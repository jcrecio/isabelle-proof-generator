{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/EqualityProof.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma proves_eq_reflexive_pre:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq t t\"", "lemma unsimp_context: \"\\<Gamma> = {} \\<union> \\<Gamma>\"", "lemma proves_eq_reflexive:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t t\"", "lemma proves_eq_symmetric_pre:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"typ_of s = typ_of t\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\"", "lemma proves_eq_symmetric:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"typ_of s = typ_of t\"\n  assumes \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\"", "lemma proves_eq_symmetric2':\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> (mk_eq s t)\"\n  assumes \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\"", "lemma proves_eq_symmetric_rule:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"typ_of s = typ_of t\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t s\"", "lemma proves_eq_transitive_pre:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> u\"\n  assumes \"typ_of s = typ_of t\" \"typ_of t = typ_of u\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\"", "lemma proves_eq_transitive:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> u\"\n  assumes \"typ_of s = typ_of t\" \"typ_of t = typ_of u\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\"", "lemma proves_eq_transitive2:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> (mk_eq s t)\"\n  assumes \"term_ok \\<Theta> (mk_eq t u)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\"", "lemma proves_eq_transitive_rule:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> u\"\n  assumes \"typ_of s = typ_of t\" \"typ_of t = typ_of u\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\" \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s u\"", "lemma proves_eq_intr_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  shows \"\\<Theta>, {} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto> (B \\<longmapsto> A) \\<longmapsto> mk_eq A B\"", "lemma proves_eq_intr:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> (A \\<longmapsto> B) \\<longmapsto> (B \\<longmapsto> A) \\<longmapsto> mk_eq A B\"", "lemma proves_eq_intr_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> (A \\<longmapsto> B)\" \"\\<Theta>, \\<Gamma> \\<turnstile> (B \\<longmapsto> A)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"", "lemma proves_eq_elim_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B\"", "lemma proves_eq_elim:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B\"", "lemma proves_eq_elim_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> A \\<longmapsto> B\"", "lemma proves_eq_elim2_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B \\<longmapsto> A\"", "lemma proves_eq_combination_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq f g \\<longmapsto> mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)\"", "lemma proves_eq_combination:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g \\<longmapsto> mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)\"", "lemma proves_eq_combination_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x y\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\"", "lemma proves_eq_combination_rule_better:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x y\"\n  assumes f: \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"typ_of x = Some \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\"", "lemma proves_eq_mp_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes pA: \"\\<Theta>, \\<Gamma> \\<turnstile> A\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B\"", "lemma proves_eq_mp_rule_better:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes pA: \"\\<Theta>, \\<Gamma> \\<turnstile> A\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B\"", "lemma proves_subst_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  assumes P: \"term_ok \\<Theta> P\" \"typ_of P = Some (\\<tau> \\<rightarrow> propT)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma> . term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma> . typ_of A = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x y\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)\"", "lemma proves_beta_step_rule: \n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes abs: \"term_ok \\<Theta> (Abs T t)\" \"\\<Theta>, \\<Gamma> \\<turnstile> (Abs T t) $ x\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some T\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> subst_bv x t\"", "lemma proves_add_param_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ctxt: \"finite \\<Gamma>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes type: \"typ_ok \\<Theta> \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ \n      (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))))\"", "lemma proves_add_abs_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ctxt: \"finite \\<Gamma>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes type: \"typ_ok \\<Theta> \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\"", "lemma proves_inst_bound_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma> . term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma> . typ_of A = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f) (Abs \\<tau> g)\" \"typ_of (Abs \\<tau> f) = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)\"", "lemma proves_descend_abs_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' (bind_fv (x, \\<tau>') s)) (Abs \\<tau>' (bind_fv (x, \\<tau>') t))\"\n    \"is_closed s\" \"is_closed t\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\"", "lemma obtain_fresh_variable:\n  assumes \"finite \\<Gamma>\"\n  obtains x where \"(x,\\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\"", "lemma obtain_fresh_variable':\n  assumes \"finite \\<Gamma>\"\n  obtains x where \"(x,\\<tau>) \\<notin> fv t \\<union> fv u \\<union> FV \\<Gamma>\"", "lemma proves_eq_abstract_rule_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes B: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  shows \"\\<Theta>, {} \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n    \\<longmapsto> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\"", "lemma proves_eq_abstract_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes B: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n    \\<longmapsto> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\"", "lemma proves_eq_abstract_rule_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes B: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\"", "lemma proves_eq_ext_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes prem: \"\\<Theta>, \\<Gamma> \\<turnstile> Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\"", "lemma bind_fv2_idem[simp]: \n  \"bind_fv2 (x, \\<tau>) lev1 (bind_fv2 (x, \\<tau>) lev2 t) = bind_fv2 (x, \\<tau>) lev2 t \"", "lemma \"bind_fv2 (x,\\<tau>) lev (mk_eq' \\<tau>' s t) = mk_eq' \\<tau>' (bind_fv2 (x,\\<tau>) lev s) (bind_fv2 (x,\\<tau>) lev t)\"", "lemma \"bind_fv (x,\\<tau>) (mk_eq' \\<tau>' s t) = mk_eq' \\<tau>' (bind_fv (x,\\<tau>) s) (bind_fv (x,\\<tau>) t)\"", "lemma term_ok_Abs_fvI: \"term_ok \\<Theta> s \\<Longrightarrow> typ_ok \\<Theta> \\<tau> \\<Longrightarrow> term_ok \\<Theta> (Abs_fv x \\<tau> s)\"", "lemma proves_eq_abstract_rule_derived_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"(x, \\<tau>) \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\" \n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s)) (Abs \\<tau> (bind_fv (x, \\<tau>) t))\"", "lemma proves_descend_abs_rule_iff:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ok: \"is_closed s\" \"is_closed t\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \n    \\<longleftrightarrow> \\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' (bind_fv (x, \\<tau>') s)) (Abs \\<tau>' (bind_fv (x, \\<tau>') t))\"", "lemma proves_descend_abs_rule':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (subst_bv (Fv x \\<tau>') t)\"", "lemma proves_ascend_abs_rule':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"(x,\\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (subst_bv (Fv x \\<tau>') t)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\"", "lemma proves_descend_abs_rule_iff':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"(x, \\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (subst_bv (Fv x \\<tau>') t)\n    \\<longleftrightarrow> \\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\"", "lemma proves_beta_step_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes free: \"\\<forall>(x,\\<tau>) \\<in> set vs . (x,\\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\"\n  assumes term_ok': \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) t)\"\n  assumes beta: \"t \\<rightarrow>\\<^sub>\\<beta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq\n    (subst_bvs (map (case_prod Fv) vs) t)\n    (subst_bvs (map (case_prod Fv) vs) u)\"", "lemma subst_bvs_empty[simp]: \"subst_bvs [] t = t\"", "lemma proves_beta_step:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes beta: \"t \\<rightarrow>\\<^sub>\\<beta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"", "lemma proves_beta_steps:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes beta: \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"", "lemma proves_beta_norm:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes beta: \"beta_norm t = Some u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"", "lemma beta_norm_preserves_proves:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"\\<Theta>, \\<Gamma> \\<turnstile> t\"\n  assumes beta: \"beta_norm t = Some u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> u\"", "lemma proves_eta_step_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes free: \"\\<forall>(x,\\<tau>) \\<in> set vs . (x,\\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\"\n  assumes term_ok': \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) t)\"\n  assumes eta: \"t \\<rightarrow>\\<^sub>\\<eta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq\n    (subst_bvs (map (case_prod Fv) vs) t)\n    (subst_bvs (map (case_prod Fv) vs) u)\"", "lemma proves_eta_step:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes eta: \"t \\<rightarrow>\\<^sub>\\<eta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"", "lemma proves_eta_steps:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes eta: \"t \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"", "lemma proves_eta_norm:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes eta: \"eta_norm t = u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"", "lemma eta_norm_preserves_proves:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"\\<Theta>, \\<Gamma> \\<turnstile> t\"\n  assumes eta: \"eta_norm t = u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> u\"", "lemma beta_eta_norm_preserves_proves:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"\\<Theta>, \\<Gamma> \\<turnstile> t\"\n  assumes beta_eta: \"beta_eta_norm t = Some u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> u\"", "lemma forall_elim':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes all: \"\\<Theta>, \\<Gamma> \\<turnstile> Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ B\"\n  assumes a: \"has_typ a \\<tau>\" \"wf_term (sig \\<Theta>) a\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B \\<bullet> a\""], "translations": [["", "lemma proves_eq_reflexive_pre:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "have \"eq_reflexive_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_reflexive_ax \\<in> axioms \\<Theta>", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. eq_reflexive_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_reflexive_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "moreover"], ["proof (state)\nthis:\n  eq_reflexive_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "obtain \\<tau> where \\<tau>: \"typ_of t = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of t = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms wt_term_def"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of t = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "moreover"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "hence \"typ_ok \\<Theta> \\<tau>\""], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "using assms term_ok_imp_typ_ok"], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "by blast"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "ultimately"], ["proof (chain)\npicking this:\n  eq_reflexive_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>", "have \"\\<Theta>, {} \\<turnstile> subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_reflexive_ax\""], ["proof (prove)\nusing this:\n  eq_reflexive_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_reflexive_ax", "using axiom_subst_typ' assms"], ["proof (prove)\nusing this:\n  eq_reflexive_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n  \\<lbrakk>wf_theory ?\\<Theta>; ?A \\<in> axioms ?\\<Theta>;\n   inst_ok ?\\<Theta> ?insts\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> subst_typ' ?insts ?A\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_reflexive_ax", "by (simp del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_reflexive_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "hence \"\\<Theta>, {} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)] \n    (subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_reflexive_ax)\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_reflexive_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>)]\n                                eq_reflexive_ax)", "using \\<tau> assms(1) assms(2) inst_var"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_reflexive_ax\n  typ_of t = Some \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  \\<lbrakk>wf_theory ?\\<Theta>; ?\\<Theta>,?\\<Gamma> \\<turnstile> ?B;\n   term_ok ?\\<Theta> ?a; typ_of ?a = Some ?\\<tau>;\n   (?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> subst_term\n                [((?x, ?\\<tau>), ?a)] ?B\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>)]\n                                eq_reflexive_ax)", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_reflexive_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_reflexive_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "have \"subst_term [((Var (STR ''x'', 0), \\<tau>), t)] \n    (subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_reflexive_ax)\n    = mk_eq t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n     (subst_typ'\n       [((Var (String.Literal True True True False False True False\n                STR ''a'',\n               0),\n          full_sort),\n         \\<tau>)]\n       eq_reflexive_ax) =\n    mk_eq' (the (typ_of t)) t t", "using \\<tau>"], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n     (subst_typ'\n       [((Var (String.Literal True True True False False True False\n                STR ''a'',\n               0),\n          full_sort),\n         \\<tau>)]\n       eq_reflexive_ax) =\n    mk_eq' (the (typ_of t)) t t", "by (simp add: eq_axs_def typ_of_def)"], ["proof (state)\nthis:\n  subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>)]\n     eq_reflexive_ax) =\n  mk_eq' (the (typ_of t)) t t\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,{} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_reflexive_ax)\n  subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>)]\n     eq_reflexive_ax) =\n  mk_eq' (the (typ_of t)) t t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_reflexive_ax)\n  subst_term [((Var (STR ''x'', 0), \\<tau>), t)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>)]\n     eq_reflexive_ax) =\n  mk_eq' (the (typ_of t)) t t\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> mk_eq' (the (typ_of t)) t t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unsimp_context: \"\\<Gamma> = {} \\<union> \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Gamma> = {} \\<union> \\<Gamma>", "by simp"], ["", "lemma proves_eq_reflexive:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of t)) t t", "by (subst unsimp_context) (use assms proves_eq_reflexive_pre weaken_proves_set in blast)"], ["", "lemma proves_eq_symmetric_pre:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"typ_of s = typ_of t\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "have \"eq_symmetric_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_symmetric_ax \\<in> axioms \\<Theta>", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  term_ok \\<Theta> s\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. eq_symmetric_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_symmetric_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "moreover"], ["proof (state)\nthis:\n  eq_symmetric_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "obtain \\<tau> where \\<tau>: \"typ_of t = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of t = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms wt_term_def"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  term_ok \\<Theta> s\n  typ_of s = typ_of t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of t = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "moreover"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "hence \"typ_ok \\<Theta> \\<tau>\""], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "using assms term_ok_imp_typ_ok"], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  term_ok \\<Theta> s\n  typ_of s = typ_of t\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "by blast"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "ultimately"], ["proof (chain)\npicking this:\n  eq_symmetric_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>", "have \"\\<Theta>, {} \\<turnstile> subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_symmetric_ax\""], ["proof (prove)\nusing this:\n  eq_symmetric_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_symmetric_ax", "using assms axiom_subst_typ'"], ["proof (prove)\nusing this:\n  eq_symmetric_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  term_ok \\<Theta> s\n  typ_of s = typ_of t\n  \\<lbrakk>wf_theory ?\\<Theta>; ?A \\<in> axioms ?\\<Theta>;\n   inst_ok ?\\<Theta> ?insts\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> subst_typ' ?insts ?A\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_symmetric_ax", "by (auto simp del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_symmetric_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "hence \"\\<Theta>, {} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t)]\n    (subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_symmetric_ax)\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_symmetric_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''x'', 0), \\<tau>), s),\n                               ((Var (STR ''y'', 0), \\<tau>), t)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>)]\n                                eq_symmetric_ax)", "using \\<tau> \\<open>typ_ok \\<Theta> \\<tau>\\<close> term_ok_var assms"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_symmetric_ax\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> t\n  term_ok \\<Theta> s\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''x'', 0), \\<tau>), s),\n                               ((Var (STR ''y'', 0), \\<tau>), t)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>)]\n                                eq_symmetric_ax)", "by (fastforce intro!: inst_var_multiple simp add: eq_symmetric_ax_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_symmetric_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_symmetric_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "using \\<tau> assms(4)"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_symmetric_ax)\n  typ_of t = Some \\<tau>\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "by (simp add: eq_axs_def typ_of_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_symmetric:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"typ_of s = typ_of t\"\n  assumes \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "by (subst unsimp_context) (use assms proves_eq_symmetric_pre weaken_proves_set in blast)"], ["", "lemma proves_eq_symmetric2':\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> (mk_eq s t)\"\n  assumes \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "have \"term_ok \\<Theta> s\" \"term_ok \\<Theta> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t", "using assms wt_term_def term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "have \"typ_of s = typ_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of s = typ_of t", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. typ_of s = typ_of t", "by (cases \\<Theta> rule: theory_full_exhaust)\n      (auto simp add: tinstT_def typ_of_def wt_term_def bind_eq_Some_conv)"], ["proof (state)\nthis:\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "ultimately"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  typ_of s = typ_of t", "show ?thesis"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "using proves_eq_symmetric assms"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  typ_of s = typ_of t\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t; term_ok ?\\<Theta> ?s;\n   typ_of ?s = typ_of ?t; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s\n                ?t \\<longmapsto>\n               mk_eq ?t ?s\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_symmetric_rule:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"typ_of s = typ_of t\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t s", "using proves.implies_elim[OF proves_eq_symmetric[OF assms(1-4), of \\<Gamma>] assms(5), OF ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<turnstile> mk_eq t s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t s", "by simp"], ["", "lemma proves_eq_transitive_pre:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> u\"\n  assumes \"typ_of s = typ_of t\" \"typ_of t = typ_of u\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "have \"eq_transitive_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_transitive_ax \\<in> axioms \\<Theta>", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n\ngoal (1 subgoal):\n 1. eq_transitive_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_transitive_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "moreover"], ["proof (state)\nthis:\n  eq_transitive_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "obtain \\<tau> where \\<tau>: \"typ_of t = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of t = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms wt_term_def"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of t = Some \\<tau> \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "moreover"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "hence ok: \"typ_ok \\<Theta> \\<tau>\""], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "using assms term_ok_imp_typ_ok"], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "by blast"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "ultimately"], ["proof (chain)\npicking this:\n  eq_transitive_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>", "have \"\\<Theta>, {} \\<turnstile> subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_transitive_ax\""], ["proof (prove)\nusing this:\n  eq_transitive_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_transitive_ax", "using assms axiom_subst_typ'"], ["proof (prove)\nusing this:\n  eq_transitive_ax \\<in> axioms \\<Theta>\n  typ_of t = Some \\<tau>\n  typ_ok \\<Theta> \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n  \\<lbrakk>wf_theory ?\\<Theta>; ?A \\<in> axioms ?\\<Theta>;\n   inst_ok ?\\<Theta> ?insts\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> subst_typ' ?insts ?A\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_transitive_ax", "by (auto simp del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_transitive_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "hence \"\\<Theta>, {} \\<turnstile> subst_term [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t), \n      ((Var (STR ''z'', 0), \\<tau>), u)] \n    (subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_transitive_ax)\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_transitive_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''x'', 0), \\<tau>), s),\n                               ((Var (STR ''y'', 0), \\<tau>), t),\n                               ((Var (STR ''z'', 0), \\<tau>), u)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>)]\n                                eq_transitive_ax)", "using \\<tau> assms ok term_ok_var"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>)]\n                            eq_transitive_ax\n  typ_of t = Some \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n  typ_ok \\<Theta> \\<tau>\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''x'', 0), \\<tau>), s),\n                               ((Var (STR ''y'', 0), \\<tau>), t),\n                               ((Var (STR ''z'', 0), \\<tau>), u)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>)]\n                                eq_transitive_ax)", "by (fastforce intro!: inst_var_multiple simp add: eq_transitive_ax_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t),\n                             ((Var (STR ''z'', 0), \\<tau>), u)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_transitive_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t),\n                             ((Var (STR ''z'', 0), \\<tau>), u)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_transitive_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "have \"subst_term [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t), \n      ((Var (STR ''z'', 0), \\<tau>), u)] \n    (subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>)] eq_transitive_ax)\n    = mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_term\n     [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t),\n      ((Var (STR ''z'', 0), \\<tau>), u)]\n     (subst_typ'\n       [((Var (String.Literal True True True False False True False\n                STR ''a'',\n               0),\n          full_sort),\n         \\<tau>)]\n       eq_transitive_ax) =\n    mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u", "using \\<tau> assms(5-6)"], ["proof (prove)\nusing this:\n  typ_of t = Some \\<tau>\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n\ngoal (1 subgoal):\n 1. subst_term\n     [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t),\n      ((Var (STR ''z'', 0), \\<tau>), u)]\n     (subst_typ'\n       [((Var (String.Literal True True True False False True False\n                STR ''a'',\n               0),\n          full_sort),\n         \\<tau>)]\n       eq_transitive_ax) =\n    mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u", "apply (simp add: eq_axs_def typ_of_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>typ_of1 [] t = typ_of1 [] u; typ_of1 [] s = typ_of1 [] u;\n     Some \\<tau> = typ_of1 [] u\\<rbrakk>\n    \\<Longrightarrow> (\\<tau> =\n                       the_default Core.aT (typ_of1 [] u) \\<longrightarrow>\n                       the_default Core.aT (typ_of1 [] u) =\n                       the (typ_of1 [] u)) \\<and>\n                      (\\<tau> \\<noteq>\n                       the_default Core.aT (typ_of1 [] u) \\<longrightarrow>\n                       the_default Core.aT (typ_of1 [] u) =\n                       the (typ_of1 [] u) \\<and>\n                       variable STR ''x''\n                        (the_default Core.aT (typ_of1 [] u)) =\n                       s \\<and>\n                       variable STR ''y''\n                        (the_default Core.aT (typ_of1 [] u)) =\n                       t \\<and>\n                       the_default Core.aT (typ_of1 [] u) =\n                       the (typ_of1 [] u) \\<and>\n                       variable STR ''y''\n                        (the_default Core.aT (typ_of1 [] u)) =\n                       t \\<and>\n                       variable STR ''z''\n                        (the_default Core.aT (typ_of1 [] u)) =\n                       u \\<and>\n                       the_default Core.aT (typ_of1 [] u) =\n                       the (typ_of1 [] u) \\<and>\n                       variable STR ''x''\n                        (the_default Core.aT (typ_of1 [] u)) =\n                       s \\<and>\n                       variable STR ''z''\n                        (the_default Core.aT (typ_of1 [] u)) =\n                       u)", "by (metis option.sel the_default.simps(2))"], ["proof (state)\nthis:\n  subst_term\n   [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t),\n    ((Var (STR ''z'', 0), \\<tau>), u)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>)]\n     eq_transitive_ax) =\n  mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t),\n                             ((Var (STR ''z'', 0), \\<tau>), u)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_transitive_ax)\n  subst_term\n   [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t),\n    ((Var (STR ''z'', 0), \\<tau>), u)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>)]\n     eq_transitive_ax) =\n  mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''x'', 0), \\<tau>), s),\n                             ((Var (STR ''y'', 0), \\<tau>), t),\n                             ((Var (STR ''z'', 0), \\<tau>), u)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>)]\n                              eq_transitive_ax)\n  subst_term\n   [((Var (STR ''x'', 0), \\<tau>), s), ((Var (STR ''y'', 0), \\<tau>), t),\n    ((Var (STR ''z'', 0), \\<tau>), u)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>)]\n     eq_transitive_ax) =\n  mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                             mk_eq t u \\<longmapsto> mk_eq s u", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> mk_eq s t \\<longmapsto>\n                           mk_eq t u \\<longmapsto> mk_eq s u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_transitive:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> u\"\n  assumes \"typ_of s = typ_of t\" \"typ_of t = typ_of u\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "by (subst unsimp_context) (use assms proves_eq_transitive_pre weaken_proves_set in blast)"], ["", "lemma proves_eq_transitive2:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> (mk_eq s t)\"\n  assumes \"term_ok \\<Theta> (mk_eq t u)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto> mk_eq t u \\<longmapsto> mk_eq s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "have \"term_ok \\<Theta> s\" \"term_ok \\<Theta> t\" \"term_ok \\<Theta> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t &&& term_ok \\<Theta> u", "using assms wt_term_def term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  term_ok \\<Theta> (mk_eq t u)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t &&& term_ok \\<Theta> u", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "have \"typ_of s = typ_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of s = typ_of t", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  term_ok \\<Theta> (mk_eq t u)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. typ_of s = typ_of t", "by (cases \\<Theta> rule: theory_full_exhaust)\n      (auto simp add: tinstT_def typ_of_def wt_term_def bind_eq_Some_conv)"], ["proof (state)\nthis:\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "moreover"], ["proof (state)\nthis:\n  typ_of s = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "have \"typ_of t = typ_of u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t = typ_of u", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  term_ok \\<Theta> (mk_eq t u)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. typ_of t = typ_of u", "by (cases \\<Theta> rule: theory_full_exhaust)\n      (auto simp add: tinstT_def typ_of_def wt_term_def bind_eq_Some_conv)"], ["proof (state)\nthis:\n  typ_of t = typ_of u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "ultimately"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u", "show ?thesis"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "using proves_eq_transitive assms"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n  term_ok \\<Theta> u\n  typ_of s = typ_of t\n  typ_of t = typ_of u\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?s; term_ok ?\\<Theta> ?t;\n   term_ok ?\\<Theta> ?u; typ_of ?s = typ_of ?t; typ_of ?t = typ_of ?u;\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s\n                ?t \\<longmapsto>\n               mk_eq ?t ?u \\<longmapsto> mk_eq ?s ?u\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq s t)\n  term_ok \\<Theta> (mk_eq t u)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                   mk_eq t u \\<longmapsto> mk_eq s u", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n                                 mk_eq t u \\<longmapsto> mk_eq s u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_transitive_rule:\n  assumes \"wf_theory \\<Theta>\"\n  assumes \"term_ok \\<Theta> s\"\n  assumes \"term_ok \\<Theta> t\"\n  assumes \"term_ok \\<Theta> u\"\n  assumes \"typ_of s = typ_of t\" \"typ_of t = typ_of u\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\" \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "note 1 = proves_eq_transitive[OF assms(1-6), of \\<Gamma>]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<longmapsto>\n             mk_eq t u \\<longmapsto> mk_eq s u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "note 2 = proves.implies_elim[OF 1 assms(7)]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq t u \\<longmapsto>\n             mk_eq s u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "note 3 = proves.implies_elim[OF 2 assms(8)]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq s u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq s u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "using ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq s u\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_intr_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  shows \"\\<Theta>, {} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto> (B \\<longmapsto> A) \\<longmapsto> mk_eq A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "have closed: \"is_closed A\" \"is_closed B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed A &&& is_closed B", "using assms(3) assms(5) typ_of_imp_closed"], ["proof (prove)\nusing this:\n  typ_of A = Some propT\n  typ_of B = Some propT\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. is_closed A &&& is_closed B", "by auto"], ["proof (state)\nthis:\n  is_closed A\n  is_closed B\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "have \"eq_intr_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_intr_ax \\<in> axioms \\<Theta>", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. eq_intr_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_intr_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "hence 1: \"\\<Theta>, {} \\<turnstile> eq_intr_ax\""], ["proof (prove)\nusing this:\n  eq_intr_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> eq_intr_ax", "by (simp add: axiom' thy)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> eq_intr_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "hence \"\\<Theta>, {} \\<turnstile> subst_term [((Var (STR ''A'', 0), propT), A), ((Var (STR ''B'', 0), propT), B)]\n    eq_intr_ax\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> eq_intr_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''A'', 0), propT), A),\n                               ((Var (STR ''B'', 0), propT), B)]\n                              eq_intr_ax", "using assms term_ok_var propT_ok"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> eq_intr_ax\n  wf_theory \\<Theta>\n  term_ok \\<Theta> A\n  typ_of A = Some propT\n  term_ok \\<Theta> B\n  typ_of B = Some propT\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  wf_theory ?\\<Theta> \\<Longrightarrow> typ_ok ?\\<Theta> propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''A'', 0), propT), A),\n                               ((Var (STR ''B'', 0), propT), B)]\n                              eq_intr_ax", "by (fastforce intro!: inst_var_multiple simp add: eq_intr_ax_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''A'', 0), propT), A),\n                             ((Var (STR ''B'', 0), propT), B)]\n                            eq_intr_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''A'', 0), propT), A),\n                             ((Var (STR ''B'', 0), propT), B)]\n                            eq_intr_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "using assms"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''A'', 0), propT), A),\n                             ((Var (STR ''B'', 0), propT), B)]\n                            eq_intr_ax\n  wf_theory \\<Theta>\n  term_ok \\<Theta> A\n  typ_of A = Some propT\n  term_ok \\<Theta> B\n  typ_of B = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B", "by (simp add: eq_axs_def typ_of_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                           (B \\<longmapsto> A) \\<longmapsto> mk_eq A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_intr:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> (A \\<longmapsto> B) \\<longmapsto> (B \\<longmapsto> A) \\<longmapsto> mk_eq A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> (A \\<longmapsto> B) \\<longmapsto>\n                                   (B \\<longmapsto> A) \\<longmapsto>\n                                   mk_eq A B", "by (subst unsimp_context) (use assms proves_eq_intr_pre weaken_proves_set in blast)"], ["", "lemma proves_eq_intr_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> (A \\<longmapsto> B)\" \"\\<Theta>, \\<Gamma> \\<turnstile> (B \\<longmapsto> A)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "note 1 = proves_eq_intr[OF assms(1-5), of \\<Gamma>]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> (A \\<longmapsto>\n              B) \\<longmapsto>\n             (B \\<longmapsto> A) \\<longmapsto> mk_eq A B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "note 2 = proves.implies_elim[OF 1 assms(6)]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> (B \\<longmapsto>\n              A) \\<longmapsto>\n             mk_eq A B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "note 3 = proves.implies_elim[OF 2 assms(7)]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq A B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq A B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "using ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq A B\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_elim_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "have closed: \"is_closed A\" \"is_closed B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed A &&& is_closed B", "by (simp_all add: assms(3) assms(5) typ_of_imp_closed)"], ["proof (state)\nthis:\n  is_closed A\n  is_closed B\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "have \"eq_elim_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_elim_ax \\<in> axioms \\<Theta>", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. eq_elim_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_elim_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "hence 1: \"\\<Theta>, {} \\<turnstile> eq_elim_ax\""], ["proof (prove)\nusing this:\n  eq_elim_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> eq_elim_ax", "by (simp add: axiom' thy)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> eq_elim_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "hence \"\\<Theta>, {} \\<turnstile> subst_term [((Var (STR ''A'', 0), propT), A), ((Var (STR ''B'', 0), propT), B)]\n    eq_elim_ax\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> eq_elim_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''A'', 0), propT), A),\n                               ((Var (STR ''B'', 0), propT), B)]\n                              eq_elim_ax", "using assms term_ok_var propT_ok"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> eq_elim_ax\n  wf_theory \\<Theta>\n  term_ok \\<Theta> A\n  typ_of A = Some propT\n  term_ok \\<Theta> B\n  typ_of B = Some propT\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  wf_theory ?\\<Theta> \\<Longrightarrow> typ_ok ?\\<Theta> propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''A'', 0), propT), A),\n                               ((Var (STR ''B'', 0), propT), B)]\n                              eq_elim_ax", "by (fastforce intro!: inst_var_multiple simp add: eq_elim_ax_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''A'', 0), propT), A),\n                             ((Var (STR ''B'', 0), propT), B)]\n                            eq_elim_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''A'', 0), propT), A),\n                             ((Var (STR ''B'', 0), propT), B)]\n                            eq_elim_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "using assms"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''A'', 0), propT), A),\n                             ((Var (STR ''B'', 0), propT), B)]\n                            eq_elim_ax\n  wf_theory \\<Theta>\n  term_ok \\<Theta> A\n  typ_of A = Some propT\n  term_ok \\<Theta> B\n  typ_of B = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "by (simp add: eq_axs_def typ_of_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_elim:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq A B \\<longmapsto> A \\<longmapsto> B", "by (subst unsimp_context) (use assms proves_eq_elim_pre weaken_proves_set in blast)"], ["", "lemma proves_eq_elim_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> A \\<longmapsto> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B", "using proves.implies_elim[OF proves_eq_elim[OF assms(1-5)] assms(6), of \\<Gamma>, OF ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<turnstile> A \\<longmapsto> B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B", "by simp"], ["", "lemma proves_eq_elim2_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B \\<longmapsto> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<longmapsto> A", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<longmapsto> A", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq B A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq B A", "by (rule proves_eq_symmetric_rule) (use assms in simp_all)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq B A\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<longmapsto> A", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq B A\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<longmapsto> A", "by (intro proves_eq_elim_rule) (use assms in simp_all)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> B \\<longmapsto> A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_combination_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  shows \"\\<Theta>, {} \\<turnstile> mk_eq f g \\<longmapsto> mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "have ok: \"typ_ok \\<Theta> \\<tau>\" \"typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\" \"typ_ok \\<Theta> \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau> &&&\n    typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>') &&&\n    typ_ok \\<Theta> \\<tau>'", "using term_ok_betapply term_ok_imp_typ_ok thy typ_of_betaply thy x f"], ["proof (prove)\nusing this:\n  \\<lbrakk>term_ok ?\\<Theta> ?f; term_ok ?\\<Theta> ?u;\n   typ_of ?f = Some (?uty \\<rightarrow> ?tty);\n   typ_of ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> term_ok ?\\<Theta> (?f \\<bullet> ?u)\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n  wf_theory \\<Theta>\n  \\<lbrakk>typ_of ?t = Some (?uty \\<rightarrow> ?tty);\n   typ_of ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of (?t \\<bullet> ?u) = Some ?tty\n  wf_theory \\<Theta>\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau> &&&\n    typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>') &&&\n    typ_ok \\<Theta> \\<tau>'", "by blast+"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "have \"eq_combination_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_combination_ax \\<in> axioms \\<Theta>", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. eq_combination_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_combination_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "moreover"], ["proof (state)\nthis:\n  eq_combination_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "have \"typ_ok \\<Theta> \\<tau>\" \"typ_ok \\<Theta> \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau> &&& typ_ok \\<Theta> \\<tau>'", "using assms term_ok_imp_typ_ok thy term_ok_betapply typ_of_betaply"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> y\n  typ_of y = Some \\<tau>\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n  wf_theory \\<Theta>\n  \\<lbrakk>term_ok ?\\<Theta> ?f; term_ok ?\\<Theta> ?u;\n   typ_of ?f = Some (?uty \\<rightarrow> ?tty);\n   typ_of ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> term_ok ?\\<Theta> (?f \\<bullet> ?u)\n  \\<lbrakk>typ_of ?t = Some (?uty \\<rightarrow> ?tty);\n   typ_of ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of (?t \\<bullet> ?u) = Some ?tty\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau> &&& typ_ok \\<Theta> \\<tau>'", "by meson+"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "ultimately"], ["proof (chain)\npicking this:\n  eq_combination_ax \\<in> axioms \\<Theta>\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> \\<tau>'", "have 1: \"\\<Theta>, {} \\<turnstile> subst_typ' \n    [((Var (STR '''a'', 0), full_sort), \\<tau>), ((Var (STR '''b'', 0), full_sort), \\<tau>')] eq_combination_ax\""], ["proof (prove)\nusing this:\n  eq_combination_ax \\<in> axioms \\<Theta>\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_combination_ax", "using assms axiom_subst_typ'"], ["proof (prove)\nusing this:\n  eq_combination_ax \\<in> axioms \\<Theta>\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> \\<tau>'\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> y\n  typ_of y = Some \\<tau>\n  \\<lbrakk>wf_theory ?\\<Theta>; ?A \\<in> axioms ?\\<Theta>;\n   inst_ok ?\\<Theta> ?insts\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> subst_typ' ?insts ?A\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_combination_ax", "by (simp del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>),\n                             ((Var (String.Literal True True True False\n                                     False True False STR ''b'',\n                                    0),\n                               full_sort),\n                              \\<tau>')]\n                            eq_combination_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "hence \"\\<Theta>, {} \\<turnstile> subst_term \n    [((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f), ((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n      ((Var (STR ''x'', 0), \\<tau>), x), ((Var (STR ''y'', 0), \\<tau>), y)]\n    (subst_typ' [((Var (STR '''a'', 0), full_sort), \\<tau>), ((Var (STR '''b'', 0), full_sort), \\<tau>')] \n    eq_combination_ax)\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>),\n                             ((Var (String.Literal True True True False\n                                     False True False STR ''b'',\n                                    0),\n                               full_sort),\n                              \\<tau>')]\n                            eq_combination_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''f'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                f),\n                               ((Var (STR ''g'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                g),\n                               ((Var (STR ''x'', 0), \\<tau>), x),\n                               ((Var (STR ''y'', 0), \\<tau>), y)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>),\n                                 ((Var (String.Literal True True True False\n   False True False STR ''b'',\n  0),\n                                   full_sort),\n                                  \\<tau>')]\n                                eq_combination_ax)", "using assms term_ok_var ok"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>),\n                             ((Var (String.Literal True True True False\n                                     False True False STR ''b'',\n                                    0),\n                               full_sort),\n                              \\<tau>')]\n                            eq_combination_ax\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> y\n  typ_of y = Some \\<tau>\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''f'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                f),\n                               ((Var (STR ''g'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                g),\n                               ((Var (STR ''x'', 0), \\<tau>), x),\n                               ((Var (STR ''y'', 0), \\<tau>), y)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>),\n                                 ((Var (String.Literal True True True False\n   False True False STR ''b'',\n  0),\n                                   full_sort),\n                                  \\<tau>')]\n                                eq_combination_ax)", "by (fastforce intro!: inst_var_multiple simp add: eq_combination_ax_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f),\n                             ((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''x'', 0), \\<tau>), x),\n                             ((Var (STR ''y'', 0), \\<tau>), y)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_combination_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f),\n                             ((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''x'', 0), \\<tau>), x),\n                             ((Var (STR ''y'', 0), \\<tau>), y)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_combination_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "using assms"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f),\n                             ((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''x'', 0), \\<tau>), x),\n                             ((Var (STR ''y'', 0), \\<tau>), y)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_combination_ax)\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> y\n  typ_of y = Some \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)", "by (simp add: eq_axs_def typ_of_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> mk_eq f g \\<longmapsto>\n                           mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_combination:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g \\<longmapsto> mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g \\<longmapsto>\n                                   mk_eq x y \\<longmapsto>\n                                   mk_eq (f $ x) (g $ y)", "by (subst unsimp_context) (use assms proves_eq_combination_pre weaken_proves_set in blast)"], ["", "(* Can probably drop a whole lot of assumptions as thy are deriveable from the last one*)"], ["", "lemma proves_eq_combination_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x y\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "note 1 = proves_eq_combination[OF assms(1-9), of \\<Gamma>]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g \\<longmapsto>\n             mk_eq x y \\<longmapsto> mk_eq (f $ x) (g $ y)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "note 2 = proves.implies_elim[OF 1 assms(10)]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq x y \\<longmapsto>\n             mk_eq (f $ x) (g $ y)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "note 3 = proves.implies_elim[OF 2 assms(11)]"], ["proof (state)\nthis:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "using ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite \\<Gamma>; \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<union> \\<Gamma> \\<union>\n                             \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_combination_rule_better:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x y\"\n  assumes f: \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"typ_of x = Some \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "have ok_Apps: \"term_ok \\<Theta> (mk_eq f g)\" \"term_ok \\<Theta> (mk_eq x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq f g) &&& term_ok \\<Theta> (mk_eq x y)", "using assms(2-3) proved_terms_well_formed_pre"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq x y\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT \\<and> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq f g) &&& term_ok \\<Theta> (mk_eq x y)", "by auto"], ["proof (state)\nthis:\n  term_ok \\<Theta> (mk_eq f g)\n  term_ok \\<Theta> (mk_eq x y)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "hence tyy: \"typ_of y = Some \\<tau>\" and tyg: \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq f g)\n  term_ok \\<Theta> (mk_eq x y)\n\ngoal (1 subgoal):\n 1. typ_of y = Some \\<tau> &&&\n    typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')", "using term_ok_mk_eq_same_typ thy x f term_okD1"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq f g)\n  term_ok \\<Theta> (mk_eq x y)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n  typ_of x = Some \\<tau>\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. typ_of y = Some \\<tau> &&&\n    typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')", "by metis+"], ["proof (state)\nthis:\n  typ_of y = Some \\<tau>\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "moreover"], ["proof (state)\nthis:\n  typ_of y = Some \\<tau>\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "have \"term_ok \\<Theta> x\" \"term_ok \\<Theta> y\" \"term_ok \\<Theta> f\" \"term_ok \\<Theta> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (term_ok \\<Theta> x &&& term_ok \\<Theta> y) &&&\n    term_ok \\<Theta> f &&& term_ok \\<Theta> g", "using ok_Apps term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq f g)\n  term_ok \\<Theta> (mk_eq x y)\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. (term_ok \\<Theta> x &&& term_ok \\<Theta> y) &&&\n    term_ok \\<Theta> f &&& term_ok \\<Theta> g", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> x\n  term_ok \\<Theta> y\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "ultimately"], ["proof (chain)\npicking this:\n  typ_of y = Some \\<tau>\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  term_ok \\<Theta> y\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g", "show ?thesis"], ["proof (prove)\nusing this:\n  typ_of y = Some \\<tau>\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  term_ok \\<Theta> y\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "using proves_eq_combination_rule assms"], ["proof (prove)\nusing this:\n  typ_of y = Some \\<tau>\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> x\n  term_ok \\<Theta> y\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?f;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>'); term_ok ?\\<Theta> ?g;\n   typ_of ?g = Some (?\\<tau> \\<rightarrow> ?\\<tau>'); term_ok ?\\<Theta> ?x;\n   typ_of ?x = Some ?\\<tau>; term_ok ?\\<Theta> ?y; typ_of ?y = Some ?\\<tau>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?f ?g;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?x ?y; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (?f $ ?x)\n                (?g $ ?y)\n  wf_theory \\<Theta>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq x y\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of x = Some \\<tau>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ x) (g $ y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_mp_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> A\" \"typ_of A = Some propT\"\n  assumes B: \"term_ok \\<Theta> B\" \"typ_of B = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes pA: \"\\<Theta>, \\<Gamma> \\<turnstile> A\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B", "have \"\\<Theta>, \\<Gamma> \\<turnstile> A \\<longmapsto> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B", "using proves_eq_elim_rule[OF assms(1-5) eq ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B", "."], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B", "thus \"\\<Theta>, \\<Gamma> \\<turnstile> B\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B", "using proves.implies_elim pA"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> A \\<longmapsto> B\n  \\<lbrakk>?\\<Theta>,?\\<Gamma>\\<^sub>1 \\<turnstile> ?A \\<longmapsto> ?B;\n   ?\\<Theta>,?\\<Gamma>\\<^sub>2 \\<turnstile> ?A\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma>\\<^sub>1 \\<union>\n                              ?\\<Gamma>\\<^sub>2 \\<turnstile> ?B\n  \\<Theta>,\\<Gamma> \\<turnstile> A\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B", "by fastforce"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> B\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_mp_rule_better:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq A B\"\n  assumes pA: \"\\<Theta>, \\<Gamma> \\<turnstile> A\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B", "by (metis ctxt eq pA proved_terms_well_formed(1) proved_terms_well_formed(2)\n      proves_eq_mp_rule term_ok_mk_eqD term_ok_mk_eq_same_typ thy)"], ["", "lemma proves_subst_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes y: \"term_ok \\<Theta> y\" \"typ_of y = Some \\<tau>\"\n  assumes P: \"term_ok \\<Theta> P\" \"typ_of P = Some (\\<tau> \\<rightarrow> propT)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma> . term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma> . typ_of A = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x y\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq P P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of P)) P P", "using assms proves_eq_reflexive"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> y\n  typ_of y = Some \\<tau>\n  term_ok \\<Theta> P\n  typ_of P = Some (\\<tau> \\<rightarrow> propT)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq x y\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq'\n                (the (typ_of ?t)) ?t ?t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of P)) P P", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of P)) P P\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of P)) P P\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)", "using proves_eq_combination_rule assms"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of P)) P P\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?f;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>'); term_ok ?\\<Theta> ?g;\n   typ_of ?g = Some (?\\<tau> \\<rightarrow> ?\\<tau>'); term_ok ?\\<Theta> ?x;\n   typ_of ?x = Some ?\\<tau>; term_ok ?\\<Theta> ?y; typ_of ?y = Some ?\\<tau>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?f ?g;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?x ?y; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (?f $ ?x)\n                (?g $ ?y)\n  wf_theory \\<Theta>\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> y\n  typ_of y = Some \\<tau>\n  term_ok \\<Theta> P\n  typ_of P = Some (\\<tau> \\<rightarrow> propT)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq x y\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (P $ x) (P $ y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_beta_step_rule: \n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes abs: \"term_ok \\<Theta> (Abs T t)\" \"\\<Theta>, \\<Gamma> \\<turnstile> (Abs T t) $ x\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some T\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> subst_bv x t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq ((Abs T t) $ x) (subst_bv x t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x) (subst_bv x t)", "using proves.\\<beta>_conversion assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?\\<Theta>; wt_term (sig ?\\<Theta>) (Abs ?T ?t);\n   wf_term (sig ?\\<Theta>) ?u; \\<turnstile>\\<^sub>\\<tau> ?u : ?T\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (Abs ?T ?t $ ?u)\n                (subst_bv ?u ?t)\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (Abs T t)\n  \\<Theta>,\\<Gamma> \\<turnstile> Abs T t $ x\n  term_ok \\<Theta> x\n  typ_of x = Some T\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x) (subst_bv x t)", "by (simp add: term_okD1)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x) (subst_bv x t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x) (subst_bv x t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "have \"term_ok \\<Theta> (Abs T t $ x)\" and tyAbs: \"typ_of (Abs T t $ x) = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs T t $ x) &&& typ_of (Abs T t $ x) = Some propT", "using abs(2) proved_terms_well_formed"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Abs T t $ x\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs T t $ x) &&& typ_of (Abs T t $ x) = Some propT", "by simp_all"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs T t $ x)\n  typ_of (Abs T t $ x) = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs T t $ x)\n  typ_of (Abs T t $ x) = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "have tySub: \"typ_of (subst_bv x t) = Some propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (subst_bv x t) = Some propT", "using tyAbs"], ["proof (prove)\nusing this:\n  typ_of (Abs T t $ x) = Some propT\n\ngoal (1 subgoal):\n 1. typ_of (subst_bv x t) = Some propT", "unfolding subst_bv_def typ_of_def"], ["proof (prove)\nusing this:\n  typ_of1 [] (Abs T t $ x) = Some propT\n\ngoal (1 subgoal):\n 1. typ_of1 [] (subst_bv1 t 0 x) = Some propT", "using typ_of1_subst_bv_gen'"], ["proof (prove)\nusing this:\n  typ_of1 [] (Abs T t $ x) = Some propT\n  \\<lbrakk>typ_of1 (?uty # ?Ts) ?t = Some ?tty;\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (subst_bv1 ?t 0 ?u) = Some ?tty\n\ngoal (1 subgoal):\n 1. typ_of1 [] (subst_bv1 t 0 x) = Some propT", "by (auto simp add: bind_eq_Some_conv split: if_splits)"], ["proof (state)\nthis:\n  typ_of (subst_bv x t) = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "moreover"], ["proof (state)\nthis:\n  typ_of (subst_bv x t) = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "have \"term_ok \\<Theta> (subst_bv x t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x t)", "have \"term_ok' (sig \\<Theta>) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok' (sig \\<Theta>) t", "using assms(2) term_ok'.simps(5) wt_term_def term_ok_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs T t)\n  term_ok' ?\\<Sigma> (Abs ?T ?t) =\n  (typ_ok_sig ?\\<Sigma> ?T \\<and> term_ok' ?\\<Sigma> ?t)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. term_ok' (sig \\<Theta>) t", "by blast"], ["proof (state)\nthis:\n  term_ok' (sig \\<Theta>) t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x t)", "hence \"term_ok' (sig \\<Theta>) (subst_bv x t)\""], ["proof (prove)\nusing this:\n  term_ok' (sig \\<Theta>) t\n\ngoal (1 subgoal):\n 1. term_ok' (sig \\<Theta>) (subst_bv x t)", "using term_ok'_subst_bv1 x(1)"], ["proof (prove)\nusing this:\n  term_ok' (sig \\<Theta>) t\n  \\<lbrakk>term_ok' (sig ?\\<Theta>) ?f; term_ok' (sig ?\\<Theta>) ?u\\<rbrakk>\n  \\<Longrightarrow> term_ok' (sig ?\\<Theta>) (subst_bv1 ?f ?lev ?u)\n  term_ok \\<Theta> x\n\ngoal (1 subgoal):\n 1. term_ok' (sig \\<Theta>) (subst_bv x t)", "by (simp add: term_okD1 subst_bv_def)"], ["proof (state)\nthis:\n  term_ok' (sig \\<Theta>) (subst_bv x t)\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  term_ok' (sig \\<Theta>) (subst_bv x t)\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x t)", "using x(1) wt_term_def term_ok'_subst_bv1 subst_bv_def tySub term_okD1"], ["proof (prove)\nusing this:\n  term_ok' (sig \\<Theta>) (subst_bv x t)\n  term_ok \\<Theta> x\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>term_ok' (sig ?\\<Theta>) ?f; term_ok' (sig ?\\<Theta>) ?u\\<rbrakk>\n  \\<Longrightarrow> term_ok' (sig ?\\<Theta>) (subst_bv1 ?f ?lev ?u)\n  subst_bv ?u ?t \\<equiv> subst_bv1 ?t 0 ?u\n  typ_of (subst_bv x t) = Some propT\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x t)", "by simp"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv x t)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv x t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x) (subst_bv x t)\n  term_ok \\<Theta> (Abs T t $ x)\n  typ_of (Abs T t $ x) = Some propT\n  typ_of (subst_bv x t) = Some propT\n  term_ok \\<Theta> (subst_bv x t)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x) (subst_bv x t)\n  term_ok \\<Theta> (Abs T t $ x)\n  typ_of (Abs T t $ x) = Some propT\n  typ_of (subst_bv x t) = Some propT\n  term_ok \\<Theta> (subst_bv x t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t", "apply (rule proves_eq_mp_rule[where A=\"(Abs T t) $ x\"])"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> wf_theory \\<Theta>\n 2. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> term_ok \\<Theta> (Abs T t $ x)\n 3. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> typ_of (Abs T t $ x) = Some propT\n 4. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> term_ok \\<Theta> (subst_bv x t)\n 5. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> typ_of (subst_bv x t) = Some propT\n 6. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n                (subst_bv x t)\n 7. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> Abs T t $ x\n 8. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> finite \\<Gamma>\n 9. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 10. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n        (subst_bv x t);\n      term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n      typ_of (subst_bv x t) = Some propT;\n      term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n     \\<Longrightarrow> \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (Abs T t)\n  \\<Theta>,\\<Gamma> \\<turnstile> Abs T t $ x\n  term_ok \\<Theta> x\n  typ_of x = Some T\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (10 subgoals):\n 1. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> wf_theory \\<Theta>\n 2. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> term_ok \\<Theta> (Abs T t $ x)\n 3. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> typ_of (Abs T t $ x) = Some propT\n 4. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> term_ok \\<Theta> (subst_bv x t)\n 5. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> typ_of (subst_bv x t) = Some propT\n 6. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n                (subst_bv x t)\n 7. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> Abs T t $ x\n 8. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> finite \\<Gamma>\n 9. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n       (subst_bv x t);\n     term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n     typ_of (subst_bv x t) = Some propT;\n     term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 10. \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs T t $ x)\n        (subst_bv x t);\n      term_ok \\<Theta> (Abs T t $ x); typ_of (Abs T t $ x) = Some propT;\n      typ_of (subst_bv x t) = Some propT;\n      term_ok \\<Theta> (subst_bv x t)\\<rbrakk>\n     \\<Longrightarrow> \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by simp_all"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> subst_bv x t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* TODO: Remember the name of this rule *)"], ["", "lemma proves_add_param_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ctxt: \"finite \\<Gamma>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes type: \"typ_ok \\<Theta> \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ \n      (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "have term_ok: \"term_ok \\<Theta> (mk_eq f g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq f g)", "using eq(1) proved_terms_well_formed_pre"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT \\<and> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq f g)", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> (mk_eq f g)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence term_ok': \"term_ok \\<Theta> f\" \"term_ok \\<Theta> g\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq f g)\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> f &&& term_ok \\<Theta> g", "apply (simp add: eq(2) wt_term_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> g", "using \\<open>term_ok \\<Theta> (mk_eq f g)\\<close> wt_term_def typ_of_def  term_ok_app_eqD"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq f g)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> g", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence \"typ_of f = typ_of g\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n\ngoal (1 subgoal):\n 1. typ_of f = typ_of g", "using thy term_ok"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq f g)\n\ngoal (1 subgoal):\n 1. typ_of f = typ_of g", "by (cases \\<Theta> rule: theory_full_exhaust)\n      (auto simp add: tinstT_def typ_of_def wt_term_def bind_eq_Some_conv)"], ["proof (state)\nthis:\n  typ_of f = typ_of g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence type': \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\nusing this:\n  typ_of f = typ_of g\n\ngoal (1 subgoal):\n 1. typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')", "using eq(2)"], ["proof (prove)\nusing this:\n  typ_of f = typ_of g\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')", "by simp"], ["proof (state)\nthis:\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "obtain x where \"x \\<notin> fst ` (fv (mk_eq f g) \\<union> FV \\<Gamma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<notin> fst `\n                   (fv (mk_eq f g) \\<union> FV \\<Gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using finite_fv finite_FV infinite_fv_UNIV variant_variable_fresh ctxt"], ["proof (prove)\nusing this:\n  finite (fv ?t)\n  finite ?S \\<Longrightarrow> finite (FV ?S)\n  infinite UNIV\n  finite ?S \\<Longrightarrow> fst (variant_variable ?s ?S) \\<notin> ?S\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        x \\<notin> fst `\n                   (fv (mk_eq f g) \\<union> FV \\<Gamma>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson finite_Un finite_imageI)"], ["proof (state)\nthis:\n  x \\<notin> fst ` (fv (mk_eq f g) \\<union> FV \\<Gamma>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence free: \"(x,\\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>\""], ["proof (prove)\nusing this:\n  x \\<notin> fst ` (fv (mk_eq f g) \\<union> FV \\<Gamma>)\n\ngoal (1 subgoal):\n 1. (x, \\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>", "by force"], ["proof (state)\nthis:\n  (x, \\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Fv x \\<tau>) (Fv x \\<tau>)\""], ["proof (prove)\nusing this:\n  (x, \\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>) (Fv x \\<tau>)", "using ctxt proves_eq_reflexive term_ok_var thy type"], ["proof (prove)\nusing this:\n  (x, \\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq'\n                (the (typ_of ?t)) ?t ?t\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  wf_theory \\<Theta>\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>) (Fv x \\<tau>)", "by presburger"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                  (Fv x \\<tau>) (Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                  (Fv x \\<tau>) (Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "apply (rule proves_eq_combination_rule[where \\<tau>'=\\<tau>'])"], ["proof (prove)\ngoal (14 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    wf_theory \\<Theta>\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> f\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of f = Some (?\\<tau>1 \\<rightarrow> \\<tau>')\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> g\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of g = Some (?\\<tau>1 \\<rightarrow> \\<tau>')\n 6. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> (Fv x \\<tau>)\n 7. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of (Fv x \\<tau>) = Some ?\\<tau>1\n 8. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> (Fv x \\<tau>)\n 9. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of (Fv x \\<tau>) = Some ?\\<tau>1\n 10. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                     (Fv x \\<tau>)\n                                     (Fv x \\<tau>) \\<Longrightarrow>\n     \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\nA total of 14 subgoals...", "using assms term_ok' type'"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (14 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    wf_theory \\<Theta>\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> f\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of f = Some (?\\<tau>1 \\<rightarrow> \\<tau>')\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> g\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of g = Some (?\\<tau>1 \\<rightarrow> \\<tau>')\n 6. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> (Fv x \\<tau>)\n 7. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of (Fv x \\<tau>) = Some ?\\<tau>1\n 8. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    term_ok \\<Theta> (Fv x \\<tau>)\n 9. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                    (Fv x \\<tau>)\n                                    (Fv x \\<tau>) \\<Longrightarrow>\n    typ_of (Fv x \\<tau>) = Some ?\\<tau>1\n 10. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>)))\n                                     (Fv x \\<tau>)\n                                     (Fv x \\<tau>) \\<Longrightarrow>\n     \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\nA total of 14 subgoals...", "by (simp_all del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "hence \"\\<Theta>, \\<Gamma> \\<turnstile> mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>))\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                    (mk_eq (f $ Fv x \\<tau>)\n(g $ Fv x \\<tau>))", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                    (mk_eq (f $ Fv x \\<tau>)\n(g $ Fv x \\<tau>))", "apply (rule proves.forall_intro)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    wf_theory \\<Theta>\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    (x, \\<tau>) \\<notin> FV \\<Gamma>\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    wf_type (sig \\<Theta>) \\<tau>", "using thy eq type free"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>\n  (x, \\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>\n\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    wf_theory \\<Theta>\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    (x, \\<tau>) \\<notin> FV \\<Gamma>\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>) \\<Longrightarrow>\n    wf_type (sig \\<Theta>) \\<tau>", "by simp_all"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "have \"mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)) \n    = (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ \n      (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)) =\n    Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n    Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "using free eq type type' bind_fv2_changed"], ["proof (prove)\nusing this:\n  (x, \\<tau>) \\<notin> fv (mk_eq f g) \\<union> FV \\<Gamma>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  bind_fv2 ?v ?lev ?tm \\<noteq> ?tm \\<Longrightarrow> ?v \\<in> fv ?tm\n\ngoal (1 subgoal):\n 1. mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)) =\n    Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n    Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "by (fastforce simp add: bind_fv_def bind_fv_unchanged typ_of_def)"], ["proof (state)\nthis:\n  mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>))\n  mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>))\n  mk_all x \\<tau> (mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_add_abs_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ctxt: \"finite \\<Gamma>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes type: \"typ_ok \\<Theta> \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have ok: \"term_ok \\<Theta> f\" \"term_ok \\<Theta> g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> f &&& term_ok \\<Theta> g", "using eq(1) proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> f &&& term_ok \\<Theta> g", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have g_ty: \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')", "by (metis eq(1) eq(2) proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "hence closed: \"is_closed f\" \"is_closed g\""], ["proof (prove)\nusing this:\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. is_closed f &&& is_closed g", "using eq(2) typ_of_imp_closed"], ["proof (prove)\nusing this:\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. is_closed f &&& is_closed g", "by blast+"], ["proof (state)\nthis:\n  is_closed f\n  is_closed g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have ok': \"term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\" \"term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0)) &&&\n    term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))", "using type term_ok_eta_expand ok thy eq(2) g_ty"], ["proof (prove)\nusing this:\n  typ_ok \\<Theta> \\<tau>\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?f;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>');\n   typ_ok ?\\<Theta> ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> term_ok ?\\<Theta> (Abs ?\\<tau> (?f $ Bv 0))\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  wf_theory \\<Theta>\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0)) &&&\n    term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n  term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have ok_ind: \"wf_term (sig \\<Theta>) f\"  \"wf_term (sig \\<Theta>) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) f &&& wf_term (sig \\<Theta>) g", "using ok wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) f &&& wf_term (sig \\<Theta>) g", "by simp_all"], ["proof (state)\nthis:\n  wf_term (sig \\<Theta>) f\n  wf_term (sig \\<Theta>) g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "note 1 = proves.eta[OF thy ok_ind(1) typ_of_imp_has_typ[OF eq(2)], of \\<Gamma>]"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "note 2 = proves.eta[OF thy ok_ind(2) typ_of_imp_has_typ[OF g_ty], of \\<Gamma>]"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have simp': \"subst_bv x f = f\" \"subst_bv x g = g\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv x f = f &&& subst_bv x g = g", "using ok term_ok_subst_bv_no_change"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> subst_bv ?u ?t = ?t\n\ngoal (1 subgoal):\n 1. subst_bv x f = f &&& subst_bv x g = g", "by auto"], ["proof (state)\nthis:\n  subst_bv ?x f = f\n  subst_bv ?x g = g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have s2: \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq g (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq g (Abs \\<tau> (g $ Bv 0))", "apply (rule proves_eq_symmetric_rule)"], ["proof (prove)\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. term_ok \\<Theta> g\n 3. term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n 4. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using \"2\"  ok'(2) ok(2) thy typ_of_eta_expand[OF g_ty] g_ty ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\n  term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n  term_ok \\<Theta> g\n  wf_theory \\<Theta>\n  typ_of (Abs \\<tau> (g $ Bv 0)) = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. term_ok \\<Theta> g\n 3. term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n 4. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by (simp_all add: simp'(2))"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq g (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "have tr1: \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "using 1 eq(1) g_ty ok'(1) ok(1) ok(2) proves_eq_transitive_rule[OF thy _ _ _ _ _ _ _ ctxt]\n      typ_of_eta_expand[OF eq(2)] eq(2)"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n  term_ok \\<Theta> f\n  term_ok \\<Theta> g\n  \\<lbrakk>term_ok \\<Theta> ?s; term_ok \\<Theta> ?t; term_ok \\<Theta> ?u;\n   typ_of ?s = typ_of ?t; typ_of ?t = typ_of ?u;\n   \\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?s ?t;\n   \\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?t ?u\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?s ?u\n  typ_of (Abs \\<tau> (f $ Bv 0)) = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "by (fastforce simp add: simp'(1))"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "using tr1 s2 proves_eq_transitive_rule[OF thy ok'(1) ok(2) ok'(2)] typ_of_eta_expand eq(2) g_ty\n    ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq g (Abs \\<tau> (g $ Bv 0))\n  \\<lbrakk>typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of g;\n   typ_of g = typ_of (Abs \\<tau> (g $ Bv 0));\n   \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g;\n   \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq g (Abs \\<tau> (g $ Bv 0));\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n               (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\n  typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>') \\<Longrightarrow>\n  typ_of (Abs ?\\<tau> (?f $ Bv 0)) = Some (?\\<tau> \\<rightarrow> ?\\<tau>')\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_inst_bound_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma> . term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma> . typ_of A = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f) (Abs \\<tau> g)\" \"typ_of (Abs \\<tau> f) = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes x: \"term_ok \\<Theta> x\" \"typ_of x = Some \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))", "using eq(1) proved_terms_well_formed(2)"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f) (Abs \\<tau> g)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "hence \"term_ok \\<Theta> (Abs \\<tau> f)\" \"term_ok \\<Theta> (Abs \\<tau> g)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> f) &&& term_ok \\<Theta> (Abs \\<tau> g)", "using term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> f) &&& term_ok \\<Theta> (Abs \\<tau> g)", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau> f)\n  term_ok \\<Theta> (Abs \\<tau> g)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "hence \"typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> f)\n  term_ok \\<Theta> (Abs \\<tau> g)\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)", "using thy \\<open>term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))\\<close>"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> f)\n  term_ok \\<Theta> (Abs \\<tau> g)\n  wf_theory \\<Theta>\n  term_ok \\<Theta> (mk_eq (Abs \\<tau> f) (Abs \\<tau> g))\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)", "by (cases \\<Theta> rule: theory_full_exhaust)\n      (auto simp add: tinstT_def typ_of_def wt_term_def bind_eq_Some_conv)"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "hence \"typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')", "using eq(2)"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\n  typ_of (Abs \\<tau> f) = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')", "by simp"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of x)) x x", "by (simp add: ctxt proves_eq_reflexive thy x(1) del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of x)) x x\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "hence 1: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of x)) x x\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x)\n                                    (Abs \\<tau> g $ x)", "using proves_eq_combination_rule[OF thy \\<open>term_ok \\<Theta> (Abs \\<tau> f)\\<close> eq(2) \\<open>term_ok \\<Theta> (Abs \\<tau> g)\\<close> \n        \\<open>typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\\<close> x x eq(1) _ ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of x)) x x\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of x)) x\n                                  x \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x)\n                                    (Abs \\<tau> g $ x)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)", "apply (rule \\<beta>_conversion)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wf_theory \\<Theta>\n 2. wt_term (sig \\<Theta>) (Abs \\<tau> f)\n 3. wf_term (sig \\<Theta>) x\n 4. \\<turnstile>\\<^sub>\\<tau> x : \\<tau>", "using thy x \\<open>term_ok \\<Theta> (Abs \\<tau> f)\\<close>"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> (Abs \\<tau> f)\n\ngoal (4 subgoals):\n 1. wf_theory \\<Theta>\n 2. wt_term (sig \\<Theta>) (Abs \\<tau> f)\n 3. wf_term (sig \\<Theta>) x\n 4. \\<turnstile>\\<^sub>\\<tau> x : \\<tau>", "by (simp_all add: wt_term_def)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"term_ok \\<Theta> (Abs \\<tau> f $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> f $ x)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> f)\\<close> x\n      \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\\<close>  proved_terms_well_formed(1) \n      wt_term_def typ_of1_split_App_obtains typ_of_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> f)\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of1 ?Ts (?t $ ?u) = Some ?ty;\n   \\<And>uty.\n      \\<lbrakk>typ_of1 ?Ts ?t = Some (uty \\<rightarrow> ?ty);\n       typ_of1 ?Ts ?u = Some uty\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> f $ x)", "by (meson proved_terms_well_formed(2) term_ok_mk_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau> f $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"term_ok \\<Theta> (Abs \\<tau> g $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> g $ x)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> g)\\<close> x\n    \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\\<close> proved_terms_well_formed(1) \n    wt_term_def typ_of1_split_App_obtains typ_of_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> g)\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (Abs \\<tau> g $ x)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of1 ?Ts (?t $ ?u) = Some ?ty;\n   \\<And>uty.\n      \\<lbrakk>typ_of1 ?Ts ?t = Some (uty \\<rightarrow> ?ty);\n       typ_of1 ?Ts ?u = Some uty\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> g $ x)", "by (meson proved_terms_well_formed(2) term_ok_mk_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"typ_of (subst_bv x f) = Some \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (subst_bv x f) = Some \\<tau>'", "using \\<open>typ_of (Abs \\<tau> f) = Some (\\<tau> \\<rightarrow> \\<tau>')\\<close> x(2) typ_of_def  typ_of_betapply"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f) = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of x = Some \\<tau>\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  \\<lbrakk>typ_of1 ?Ts (Abs ?uty ?t) = Some (?uty \\<rightarrow> ?tty);\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (Abs ?uty ?t \\<bullet> ?u) = Some ?tty\n\ngoal (1 subgoal):\n 1. typ_of (subst_bv x f) = Some \\<tau>'", "by auto"], ["proof (state)\nthis:\n  typ_of (subst_bv x f) = Some \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "moreover"], ["proof (state)\nthis:\n  typ_of (subst_bv x f) = Some \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"term_ok' (sig \\<Theta>) (subst_bv x f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok' (sig \\<Theta>) (subst_bv x f)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> f)\\<close> substn_subst_0' term_ok'_subst_bv2 wt_term_def x(1)"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> f)\n  subst_bv ?s ?t = subst_bv2 ?t 0 ?s\n  \\<lbrakk>term_ok' ?\\<Sigma> ?s; term_ok' ?\\<Sigma> ?u\\<rbrakk>\n  \\<Longrightarrow> term_ok' ?\\<Sigma> (subst_bv2 ?s ?lev ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  term_ok \\<Theta> x\n\ngoal (1 subgoal):\n 1. term_ok' (sig \\<Theta>) (subst_bv x f)", "by auto"], ["proof (state)\nthis:\n  term_ok' (sig \\<Theta>) (subst_bv x f)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "ultimately"], ["proof (chain)\npicking this:\n  typ_of (subst_bv x f) = Some \\<tau>'\n  term_ok' (sig \\<Theta>) (subst_bv x f)", "have \"term_ok \\<Theta> (subst_bv x f)\""], ["proof (prove)\nusing this:\n  typ_of (subst_bv x f) = Some \\<tau>'\n  term_ok' (sig \\<Theta>) (subst_bv x f)\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x f)", "by (simp add: wt_term_def)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv x f)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)", "using \\<open>typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\\<close> typ_of_def \\<open>typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\\<close>\n      \\<open>typ_of (subst_bv x f) = Some \\<tau>'\\<close> typ_of_Abs_body_typ' x(2)"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of (subst_bv x f) = Some \\<tau>'\n  typ_of1 ?Ts (Abs ?T ?t) = Some ?ty \\<Longrightarrow>\n  \\<exists>rty.\n     ?ty = ?T \\<rightarrow> rty \\<and> typ_of1 (?T # ?Ts) ?t = Some rty\n  typ_of x = Some \\<tau>\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)", "by fastforce"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "using \\<open>typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\\<close> typ_of_def"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "by auto"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have 2: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> f $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> f $ x)", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> f $ x)", "apply (rule proves_eq_symmetric_rule)"], ["proof (prove)\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. term_ok \\<Theta> (subst_bv x f)\n 3. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 4. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. term_ok \\<Theta> (subst_bv x f)\n 3. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 4. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply blast"], ["proof (prove)\ngoal (7 subgoals):\n 1. term_ok \\<Theta> (subst_bv x f)\n 2. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 3. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 5. finite \\<Gamma>\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using \\<open>term_ok \\<Theta> (subst_bv x f)\\<close>"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bv x f)\n\ngoal (7 subgoals):\n 1. term_ok \\<Theta> (subst_bv x f)\n 2. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 3. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 5. finite \\<Gamma>\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply blast"], ["proof (prove)\ngoal (6 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 2. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 4. finite \\<Gamma>\n 5. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 6. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using \\<open>term_ok \\<Theta> (Abs \\<tau> f $ x)\\<close>"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> f $ x)\n\ngoal (6 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 2. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 4. finite \\<Gamma>\n 5. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 6. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply blast"], ["proof (prove)\ngoal (5 subgoals):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 3. finite \\<Gamma>\n 4. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 5. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\\<close>"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n\ngoal (5 subgoals):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 3. finite \\<Gamma>\n 4. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 5. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 2. finite \\<Gamma>\n 3. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 4. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\\<close>"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> f $ x) (subst_bv x f)\n 2. finite \\<Gamma>\n 3. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 4. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. finite \\<Gamma>\n 2. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 3. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using ctxt"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (3 subgoals):\n 1. finite \\<Gamma>\n 2. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 3. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by blast+"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> f $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have 3: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)", "apply (rule \\<beta>_conversion)"], ["proof (prove)\ngoal (4 subgoals):\n 1. wf_theory \\<Theta>\n 2. wt_term (sig \\<Theta>) (Abs \\<tau> g)\n 3. wf_term (sig \\<Theta>) x\n 4. \\<turnstile>\\<^sub>\\<tau> x : \\<tau>", "using thy x \\<open>term_ok \\<Theta> (Abs \\<tau> g)\\<close>"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n  term_ok \\<Theta> (Abs \\<tau> g)\n\ngoal (4 subgoals):\n 1. wf_theory \\<Theta>\n 2. wt_term (sig \\<Theta>) (Abs \\<tau> g)\n 3. wf_term (sig \\<Theta>) x\n 4. \\<turnstile>\\<^sub>\\<tau> x : \\<tau>", "by (simp_all add: wt_term_def)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"term_ok \\<Theta> (subst_bv x g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x g)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> g $ x)\\<close> \\<open>term_ok \\<Theta> (Abs \\<tau> g)\\<close> \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\\<close> \n      \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\\<close> \\<open>typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\\<close> \n      \\<open>typ_of (subst_bv x f) = Some \\<tau>'\\<close> betapply.simps(1) subst_bv_def term_ok'.simps(5)\n      term_ok'_subst_bv1 wt_term_def typ_of_betaply x(1) x(2)"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> g $ x)\n  term_ok \\<Theta> (Abs \\<tau> g)\n  typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\n  typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n  typ_of (Abs \\<tau> g) = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of (subst_bv x f) = Some \\<tau>'\n  Abs ?uu ?t \\<bullet> ?u = subst_bv ?u ?t\n  subst_bv ?u ?t \\<equiv> subst_bv1 ?t 0 ?u\n  term_ok' ?\\<Sigma> (Abs ?T ?t) =\n  (typ_ok_sig ?\\<Sigma> ?T \\<and> term_ok' ?\\<Sigma> ?t)\n  \\<lbrakk>term_ok' (sig ?\\<Theta>) ?f; term_ok' (sig ?\\<Theta>) ?u\\<rbrakk>\n  \\<Longrightarrow> term_ok' (sig ?\\<Theta>) (subst_bv1 ?f ?lev ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of ?t = Some (?uty \\<rightarrow> ?tty);\n   typ_of ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of (?t \\<bullet> ?u) = Some ?tty\n  term_ok \\<Theta> x\n  typ_of x = Some \\<tau>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv x g)", "by (meson \"3\" proved_terms_well_formed(2) term_ok_mk_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv x g)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)", "using \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\\<close>\n      \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\\<close>"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\n  typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n\ngoal (1 subgoal):\n 1. typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)", "by auto"], ["proof (state)\nthis:\n  typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have \"typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)", "using \\<open>typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\\<close> eq(2) typ_of_betapply typ_of_def x(2)"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f) = typ_of (Abs \\<tau> g)\n  typ_of (Abs \\<tau> f) = Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>typ_of1 ?Ts (Abs ?uty ?t) = Some (?uty \\<rightarrow> ?tty);\n   typ_of1 ?Ts ?u = Some ?uty\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts (Abs ?uty ?t \\<bullet> ?u) = Some ?tty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  typ_of x = Some \\<tau>\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)", "by auto"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "have c1: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau> f $ x\"]; \n        (use assms 1 2 \\<open>term_ok \\<Theta> (subst_bv x f)\\<close>  in \\<open>solves simp\\<close>)?)"], ["proof (prove)\ngoal (4 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 2. term_ok \\<Theta> (Abs \\<tau> g $ x)\n 3. typ_of (subst_bv x f) = typ_of (Abs \\<tau> f $ x)\n 4. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> f $ x)\\<close>"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> f $ x)\n\ngoal (4 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> f $ x)\n 2. term_ok \\<Theta> (Abs \\<tau> g $ x)\n 3. typ_of (subst_bv x f) = typ_of (Abs \\<tau> f $ x)\n 4. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> g $ x)\n 2. typ_of (subst_bv x f) = typ_of (Abs \\<tau> f $ x)\n 3. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> g $ x)\\<close>"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> g $ x)\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> g $ x)\n 2. typ_of (subst_bv x f) = typ_of (Abs \\<tau> f $ x)\n 3. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (subst_bv x f) = typ_of (Abs \\<tau> f $ x)\n 2. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "using \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\\<close>"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f $ x) = typ_of (subst_bv x f)\n\ngoal (2 subgoals):\n 1. typ_of (subst_bv x f) = typ_of (Abs \\<tau> f $ x)\n 2. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "using \\<open>typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\\<close>"], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> f $ x) = typ_of (Abs \\<tau> g $ x)", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau> g $ x\"]; \n        (use assms 1 2 \\<open>term_ok \\<Theta> (subst_bv x f)\\<close>  in \\<open>solves simp\\<close>)?)"], ["proof (prove)\ngoal (6 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> g $ x)\n 2. term_ok \\<Theta> (subst_bv x g)\n 3. typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)\n 4. typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)\n 6. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)", "using  \\<open>term_ok \\<Theta> (Abs \\<tau> g $ x)\\<close>\n      \\<open>term_ok \\<Theta> (subst_bv x g)\\<close>\n      \\<open>typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)\\<close>\n      \\<open>typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)\\<close>\n      \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)\\<close>\n      \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)\\<close>"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> g $ x)\n  term_ok \\<Theta> (subst_bv x g)\n  typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)\n  typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)\n\ngoal (6 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> g $ x)\n 2. term_ok \\<Theta> (subst_bv x g)\n 3. typ_of (subst_bv x f) = typ_of (Abs \\<tau> g $ x)\n 4. typ_of (Abs \\<tau> g $ x) = typ_of (subst_bv x g)\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (Abs \\<tau> g $ x)\n 6. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> g $ x) (subst_bv x g)", "by simp_all"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv x f) (subst_bv x g)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* The is_closeds are annoying *)"], ["", "lemma proves_descend_abs_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' (bind_fv (x, \\<tau>') s)) (Abs \\<tau>' (bind_fv (x, \\<tau>') t))\"\n    \"is_closed s\" \"is_closed t\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have abs_ok: \"term_ok \\<Theta> (Abs_fv x \\<tau>' s)\" \"term_ok \\<Theta> (Abs_fv x \\<tau>' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau>' s) &&&\n    term_ok \\<Theta> (Abs_fv x \\<tau>' t)", "using eq proved_terms_well_formed wt_term_def typ_of1_split_App typ_of_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                  (Abs_fv x \\<tau>' t)\n  is_closed s\n  is_closed t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of1 ?Ts (?t $ ?u) = Some ?ty \\<Longrightarrow>\n  \\<exists>uty.\n     typ_of1 ?Ts ?t = Some (uty \\<rightarrow> ?ty) \\<and>\n     typ_of1 ?Ts ?u = Some uty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau>' s) &&&\n    term_ok \\<Theta> (Abs_fv x \\<tau>' t)", "by (meson term_ok_mk_eqD)+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs_fv x \\<tau>' s)\n  term_ok \\<Theta> (Abs_fv x \\<tau>' t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "obtain \\<tau> where \\<tau>1: \"typ_of (Abs_fv x \\<tau>' s) = Some (\\<tau>' \\<rightarrow> \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (Abs_fv x \\<tau>' s) =\n        Some (\\<tau>' \\<rightarrow> \\<tau>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (smt eq proved_terms_well_formed_pre typ_of1_split_App_obtains typ_of_Abs_body_typ' typ_of_def)"], ["proof (state)\nthis:\n  typ_of (Abs_fv x \\<tau>' s) = Some (\\<tau>' \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "hence \\<tau>2: \"typ_of (Abs_fv x \\<tau>' t) = Some (\\<tau>' \\<rightarrow> \\<tau>)\""], ["proof (prove)\nusing this:\n  typ_of (Abs_fv x \\<tau>' s) = Some (\\<tau>' \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. typ_of (Abs_fv x \\<tau>' t) = Some (\\<tau>' \\<rightarrow> \\<tau>)", "by (metis eq(1) proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  typ_of (Abs_fv x \\<tau>' t) = Some (\\<tau>' \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have add_param: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs \\<tau>' (bind_fv (x, \\<tau>') s) $ Fv x \\<tau>')\n    (Abs \\<tau>' (bind_fv (x, \\<tau>') t) $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "apply(rule proves_eq_combination_rule; use assms abs_ok \\<tau>1 \\<tau>2 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Fv x \\<tau>')\n 2. term_ok \\<Theta> (Fv x \\<tau>')\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>')))\n                                    (Fv x \\<tau>') (Fv x \\<tau>')", "using proves_eq_reflexive term_ok_var thy x(2) wt_term_def ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq'\n                (the (typ_of ?t)) ?t ?t\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  wf_theory \\<Theta>\n  typ_ok \\<Theta> \\<tau>'\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Fv x \\<tau>')\n 2. term_ok \\<Theta> (Fv x \\<tau>')\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>')))\n                                    (Fv x \\<tau>') (Fv x \\<tau>')", "by blast+"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have \\<beta>s: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs \\<tau>' (bind_fv (x, \\<tau>') s) $ Fv x \\<tau>')\n    (subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>')\n(bind_fv (x, \\<tau>') s))", "by (rule proves.\\<beta>_conversion; use assms abs_ok \\<tau>1 \\<tau>2 in \\<open>(solves \\<open>simp add: wt_term_def\\<close>)?\\<close>)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') s))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') s))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have simps: \"subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s) = s", "using subst_bv_bind_fv typ_of_imp_closed eq(2)"], ["proof (prove)\nusing this:\n  is_closed ?t \\<Longrightarrow>\n  subst_bv (Fv ?v ?T) (bind_fv (?v, ?T) ?t) = ?t\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n  is_closed s\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s) = s", "by blast"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s) = s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') s))\n  subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s) = s", "have \\<beta>s: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' (bind_fv (x, \\<tau>') s) $ Fv x \\<tau>') s\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') s))\n  subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') s) = s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    s", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t1: \"term_ok \\<Theta> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s", "using \\<beta>s proved_terms_well_formed(2) wt_term_def typ_of_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s", "using term_ok_app_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t2: \"term_ok \\<Theta> (Abs_fv x \\<tau>' s $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau>' s $ Fv x \\<tau>')", "using \\<beta>s \\<open>term_ok \\<Theta> s\\<close> proved_terms_well_formed(2) term_ok'.simps(4) \n        wt_term_def term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n  term_ok \\<Theta> s\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau>' s $ Fv x \\<tau>')", "by (meson term_ok_mk_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have \\<beta>s_rev: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s (Abs \\<tau>' (bind_fv (x, \\<tau>') s) $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s\n                                    (Abs_fv x \\<tau>' s $ Fv x \\<tau>')", "apply (rule proves_eq_symmetric_rule; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>') = typ_of s\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    s", "using \\<beta>s proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (2 subgoals):\n 1. typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>') = typ_of s\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    s", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    s", "using \\<beta>s"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    s", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have \\<beta>t: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs \\<tau>' (bind_fv (x, \\<tau>') t) $ Fv x \\<tau>')\n    (subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>')\n(bind_fv (x, \\<tau>') t))", "by (rule proves.\\<beta>_conversion; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 in \\<open>(solves \\<open>simp add: wt_term_def\\<close>)?\\<close>)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') t))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') t))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have simpt: \"subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t) = t", "using subst_bv_bind_fv typ_of_imp_closed eq(3)"], ["proof (prove)\nusing this:\n  is_closed ?t \\<Longrightarrow>\n  subst_bv (Fv ?v ?T) (bind_fv (?v, ?T) ?t) = ?t\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n  is_closed t\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t) = t", "by blast"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t) = t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') t))\n  subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t) = t", "have \\<beta>t: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq  (Abs \\<tau>' (bind_fv (x, \\<tau>') t) $ Fv x \\<tau>') t\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>')\n                                    (bind_fv (x, \\<tau>') t))\n  subst_bv (Fv x \\<tau>') (bind_fv (x, \\<tau>') t) = t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                    t", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>') t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t3: \"term_ok \\<Theta> (Abs_fv x \\<tau>' t $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "using \\<beta>s add_param proved_terms_well_formed(2) t1 term_ok'.simps(4)\n        wt_term_def term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>') s\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok \\<Theta> s\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "by (meson term_ok_mk_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t4: \"typ_of s = typ_of (Abs_fv x \\<tau>' t $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of s = typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "by (metis \\<beta>s add_param proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  typ_of s = typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t5: \"typ_of s = typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of s = typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>')", "using \\<beta>s_rev proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_of s = typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>')", "by blast"], ["proof (state)\nthis:\n  typ_of s = typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t6: \"typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>') = typ_of (Abs_fv x \\<tau>' t $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>') =\n    typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "using t4 t5"], ["proof (prove)\nusing this:\n  typ_of s = typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n  typ_of s = typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>') =\n    typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "by auto"], ["proof (state)\nthis:\n  typ_of (Abs_fv x \\<tau>' s $ Fv x \\<tau>') =\n  typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have half: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s (Abs \\<tau>' (bind_fv (x, \\<tau>') t) $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau>' (bind_fv (x, \\<tau>') s) $ Fv x \\<tau>'\"]\n        ; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 t3 t4 t5 t6 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s\n                                    (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "using \\<beta>s_rev"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s\n                                    (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "using add_param"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                  (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t7: \"term_ok \\<Theta> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> t", "using \\<beta>t proved_terms_well_formed(2) t1 t4 term_ok'.simps(4) wt_term_def term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>') t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok \\<Theta> s\n  typ_of s = typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> t", "by (meson term_ok_app_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "have t8: \"typ_of (Abs_fv x \\<tau>' t $ term.Fv x \\<tau>') = typ_of t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>') = typ_of t", "using \\<beta>t proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>') t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>') = typ_of t", "by blast"], ["proof (state)\nthis:\n  typ_of (Abs_fv x \\<tau>' t $ Fv x \\<tau>') = typ_of t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau>' (bind_fv (x, \\<tau>') t) $ Fv x \\<tau>'\"]\n        ; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 t3 t4 t5 t6 t7 t8 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                    t", "using half"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s\n                                    (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                    t", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                    t", "using \\<beta>t"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>') t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' t $ Fv x \\<tau>')\n                                    t", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* MOVE? Not general enough for other place, seems like an adhoc solution*)"], ["", "lemma obtain_fresh_variable:\n  assumes \"finite \\<Gamma>\"\n  obtains x where \"(x,\\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms finite_fv finite_FV"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  finite (fv ?t)\n  finite ?S \\<Longrightarrow> finite (FV ?S)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis finite_Un finite_imageI fst_conv image_eqI variant_variable_fresh)"], ["", "lemma obtain_fresh_variable':\n  assumes \"finite \\<Gamma>\"\n  obtains x where \"(x,\\<tau>) \\<notin> fv t \\<union> fv u \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (x, \\<tau>)\n        \\<notin> fv t \\<union> fv u \\<union> FV \\<Gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms finite_fv finite_FV"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  finite (fv ?t)\n  finite ?S \\<Longrightarrow> finite (FV ?S)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (x, \\<tau>)\n        \\<notin> fv t \\<union> fv u \\<union> FV \\<Gamma> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis finite_Un finite_imageI fst_conv image_eqI variant_variable_fresh)"], ["", "lemma proves_eq_abstract_rule_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes B: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  shows \"\\<Theta>, {} \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n    \\<longmapsto> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "have \"eq_abstract_rule_ax \\<in> axioms \\<Theta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eq_abstract_rule_ax \\<in> axioms \\<Theta>", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. eq_abstract_rule_ax \\<in> axioms \\<Theta>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  eq_abstract_rule_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "moreover"], ["proof (state)\nthis:\n  eq_abstract_rule_ax \\<in> axioms \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "have ok2: \"typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')", "using assms(2) assms(3) term_ok_imp_typ_ok thy"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?thy; term_ok ?thy ?t; typ_of ?t = Some ?ty\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?thy ?ty\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')", "by blast"], ["proof (state)\nthis:\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "moreover"], ["proof (state)\nthis:\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "hence ok3: \"typ_ok \\<Theta> \\<tau>'\""], ["proof (prove)\nusing this:\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>'", "using thy A(2)"], ["proof (prove)\nusing this:\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  wf_theory \\<Theta>\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>'", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "moreover"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "have ok1: \"typ_ok \\<Theta> \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "using thy A(2) ok2"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> \\<tau>", "by (cases \\<Theta> rule: theory_full_exhaust) auto"], ["proof (state)\nthis:\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "ultimately"], ["proof (chain)\npicking this:\n  eq_abstract_rule_ax \\<in> axioms \\<Theta>\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>'\n  typ_ok \\<Theta> \\<tau>", "have 1: \"\\<Theta>, {} \\<turnstile> subst_typ' \n    [((Var (STR '''a'', 0), full_sort), \\<tau>), ((Var (STR '''b'', 0), full_sort), \\<tau>')] eq_abstract_rule_ax\""], ["proof (prove)\nusing this:\n  eq_abstract_rule_ax \\<in> axioms \\<Theta>\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>'\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax", "using assms axiom_subst_typ'"], ["proof (prove)\nusing this:\n  eq_abstract_rule_ax \\<in> axioms \\<Theta>\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>'\n  typ_ok \\<Theta> \\<tau>\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>; ?A \\<in> axioms ?\\<Theta>;\n   inst_ok ?\\<Theta> ?insts\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> subst_typ' ?insts ?A\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax", "by (simp del: term_ok_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>),\n                             ((Var (String.Literal True True True False\n                                     False True False STR ''b'',\n                                    0),\n                               full_sort),\n                              \\<tau>')]\n                            eq_abstract_rule_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "hence \"\\<Theta>, {} \\<turnstile> subst_term [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n      ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)] (subst_typ'\n    [((Var (STR '''a'', 0), full_sort), \\<tau>), ((Var (STR '''b'', 0), full_sort), \\<tau>')] eq_abstract_rule_ax)\""], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>),\n                             ((Var (String.Literal True True True False\n                                     False True False STR ''b'',\n                                    0),\n                               full_sort),\n                              \\<tau>')]\n                            eq_abstract_rule_ax\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''g'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                g),\n                               ((Var (STR ''f'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                f)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>),\n                                 ((Var (String.Literal True True True False\n   False True False STR ''b'',\n  0),\n                                   full_sort),\n                                  \\<tau>')]\n                                eq_abstract_rule_ax)", "using ok1 ok2 ok3 assms term_ok_var"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_typ'\n                            [((Var (String.Literal True True True False\n                                     False True False STR ''a'',\n                                    0),\n                               full_sort),\n                              \\<tau>),\n                             ((Var (String.Literal True True True False\n                                     False True False STR ''b'',\n                                    0),\n                               full_sort),\n                              \\<tau>')]\n                            eq_abstract_rule_ax\n  typ_ok \\<Theta> \\<tau>\n  typ_ok \\<Theta> (\\<tau> \\<rightarrow> \\<tau>')\n  typ_ok \\<Theta> \\<tau>'\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> subst_term\n                              [((Var (STR ''g'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                g),\n                               ((Var (STR ''f'', 0),\n                                 \\<tau> \\<rightarrow> \\<tau>'),\n                                f)]\n                              (subst_typ'\n                                [((Var (String.Literal True True True False\n   False True False STR ''a'',\n  0),\n                                   full_sort),\n                                  \\<tau>),\n                                 ((Var (String.Literal True True True False\n   False True False STR ''b'',\n  0),\n                                   full_sort),\n                                  \\<tau>')]\n                                eq_abstract_rule_ax)", "by (fastforce intro!: inst_var_multiple simp add: eq_abstract_rule_ax_def)"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax)\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "have \"subst_term [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n      ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)] (subst_typ'\n    [((Var (STR '''a'', 0), full_sort), \\<tau>), ((Var (STR '''b'', 0), full_sort), \\<tau>')] eq_abstract_rule_ax)\n    = (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n    \\<longmapsto> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_term\n     [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n      ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)]\n     (subst_typ'\n       [((Var (String.Literal True True True False False True False\n                STR ''a'',\n               0),\n          full_sort),\n         \\<tau>),\n        ((Var (String.Literal True True True False False True False\n                STR ''b'',\n               0),\n          full_sort),\n         \\<tau>')]\n       eq_abstract_rule_ax) =\n    Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n    Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<longmapsto>\n    mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))", "using assms typ_of1_weaken_Ts"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of1 ?Ts ?t = Some ?ty \\<Longrightarrow>\n  typ_of1 (?Ts @ [?T]) ?t = Some ?ty\n\ngoal (1 subgoal):\n 1. subst_term\n     [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n      ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)]\n     (subst_typ'\n       [((Var (String.Literal True True True False False True False\n                STR ''a'',\n               0),\n          full_sort),\n         \\<tau>),\n        ((Var (String.Literal True True True False False True False\n                STR ''b'',\n               0),\n          full_sort),\n         \\<tau>')]\n       eq_abstract_rule_ax) =\n    Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n    Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<longmapsto>\n    mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))", "by (fastforce simp add: eq_axs_def typ_of_def)"], ["proof (state)\nthis:\n  subst_term\n   [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n    ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>),\n      ((Var (String.Literal True True True False False True False STR ''b'',\n             0),\n        full_sort),\n       \\<tau>')]\n     eq_abstract_rule_ax) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<longmapsto>\n  mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax)\n  subst_term\n   [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n    ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>),\n      ((Var (String.Literal True True True False False True False STR ''b'',\n             0),\n        full_sort),\n       \\<tau>')]\n     eq_abstract_rule_ax) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<longmapsto>\n  mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax)\n  subst_term\n   [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n    ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>),\n      ((Var (String.Literal True True True False False True False STR ''b'',\n             0),\n        full_sort),\n       \\<tau>')]\n     eq_abstract_rule_ax) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<longmapsto>\n  mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "using assms"], ["proof (prove)\nusing this:\n  \\<Theta>,{} \\<turnstile> subst_term\n                            [((Var (STR ''g'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              g),\n                             ((Var (STR ''f'', 0),\n                               \\<tau> \\<rightarrow> \\<tau>'),\n                              f)]\n                            (subst_typ'\n                              [((Var (String.Literal True True True False\n False True False STR ''a'',\n0),\n                                 full_sort),\n                                \\<tau>),\n                               ((Var (String.Literal True True True False\n False True False STR ''b'',\n0),\n                                 full_sort),\n                                \\<tau>')]\n                              eq_abstract_rule_ax)\n  subst_term\n   [((Var (STR ''g'', 0), \\<tau> \\<rightarrow> \\<tau>'), g),\n    ((Var (STR ''f'', 0), \\<tau> \\<rightarrow> \\<tau>'), f)]\n   (subst_typ'\n     [((Var (String.Literal True True True False False True False STR ''a'',\n             0),\n        full_sort),\n       \\<tau>),\n      ((Var (String.Literal True True True False False True False STR ''b'',\n             0),\n        full_sort),\n       \\<tau>')]\n     eq_abstract_rule_ax) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<longmapsto>\n  mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\n  wf_theory \\<Theta>\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                              ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                               propT) $\n                             Abs \\<tau>\n                              (mk_eq' \\<tau>' (f $ Bv 0)\n                                (g $ Bv 0)) \\<longmapsto>\n                             mk_eq (Abs \\<tau> (f $ Bv 0))\n                              (Abs \\<tau> (g $ Bv 0))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,{} \\<turnstile> Ct STR ''Pure.all''\n                            ((\\<tau> \\<rightarrow> propT) \\<rightarrow>\n                             propT) $\n                           Abs \\<tau>\n                            (mk_eq' \\<tau>' (f $ Bv 0)\n                              (g $ Bv 0)) \\<longmapsto>\n                           mk_eq (Abs \\<tau> (f $ Bv 0))\n                            (Abs \\<tau> (g $ Bv 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_abstract_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes B: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n    \\<longmapsto> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0)\n(g $ Bv 0)) \\<longmapsto>\n                                   mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "by (subst unsimp_context) (use assms proves_eq_abstract_rule_pre weaken_proves_set in blast)"], ["", "lemma proves_eq_abstract_rule_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes A: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes B: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "note 1 = proves_eq_abstract_rule[where \\<Gamma>=\\<Gamma>, OF assms(1-5) ctxt]"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (f $ Bv 0)\n                                    (g $ Bv 0)) \\<longmapsto>\n                                 mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "note 2 = proves.implies_elim[OF 1 assms(6)]"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<union>\n           \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<union>\n           \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "using ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<union>\n           \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eq_ext_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes f: \"term_ok \\<Theta> f\" \"typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes g: \"term_ok \\<Theta> g\" \"typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\"\n  assumes prem: \"\\<Theta>, \\<Gamma> \\<turnstile> Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "obtain x where x: \"(x,\\<tau>) \\<notin> FV \\<Gamma>\" \"(x,\\<tau>) \\<notin> fv f\" \"(x,\\<tau>) \\<notin> fv g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>(x, \\<tau>) \\<notin> FV \\<Gamma>;\n         (x, \\<tau>) \\<notin> fv f; (x, \\<tau>) \\<notin> fv g\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson Un_iff ctxt(1) obtain_fresh_variable')"], ["proof (state)\nthis:\n  (x, \\<tau>) \\<notin> FV \\<Gamma>\n  (x, \\<tau>) \\<notin> fv f\n  (x, \\<tau>) \\<notin> fv g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have closed: \"is_closed f\" \"is_closed g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed f &&& is_closed g", "using f g has_typ_imp_closed term_ok_def wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<turnstile>\\<^sub>\\<tau> ?t : ?ty \\<Longrightarrow> is_closed ?t\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. is_closed f &&& is_closed g", "by blast+"], ["proof (state)\nthis:\n  is_closed f\n  is_closed g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have \"term_ok \\<Theta> (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))", "using prem proved_terms_well_formed(2) term_ok_app_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have \"subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>", "using Core.subst_bv_def f(1) term_ok_subst_bv_no_change"], ["proof (prove)\nusing this:\n  subst_bv ?u ?t = subst_bv2 ?t 0 ?u\n  term_ok \\<Theta> f\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> subst_bv ?u ?t = ?t\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>", "by auto"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "moreover"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have \"subst_bv (Fv x \\<tau>) (g $ Bv 0) = g $ Fv x \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (g $ Bv 0) = g $ Fv x \\<tau>", "using Core.subst_bv_def g(1) term_ok_subst_bv_no_change"], ["proof (prove)\nusing this:\n  subst_bv ?u ?t = subst_bv2 ?t 0 ?u\n  term_ok \\<Theta> g\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> subst_bv ?u ?t = ?t\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (g $ Bv 0) = g $ Fv x \\<tau>", "by auto"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (g $ Bv 0) = g $ Fv x \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "ultimately"], ["proof (chain)\npicking this:\n  subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>\n  subst_bv (Fv x \\<tau>) (g $ Bv 0) = g $ Fv x \\<tau>", "have \"subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n    = mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\""], ["proof (prove)\nusing this:\n  subst_bv (Fv x \\<tau>) (f $ Bv 0) = f $ Fv x \\<tau>\n  subst_bv (Fv x \\<tau>) (g $ Bv 0) = g $ Fv x \\<tau>\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n    mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "by (simp add: Core.subst_bv_def)"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n  mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "hence simp: \"Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<bullet> Fv x \\<tau> = mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\""], ["proof (prove)\nusing this:\n  subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n  mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<bullet>\n    Fv x \\<tau> =\n    mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "using f g"], ["proof (prove)\nusing this:\n  subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n  mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<bullet>\n    Fv x \\<tau> =\n    mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "by (auto simp add: typ_of_def)"], ["proof (state)\nthis:\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<bullet> Fv x \\<tau> =\n  mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "hence simp': \"subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) = mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\""], ["proof (prove)\nusing this:\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<bullet> Fv x \\<tau> =\n  mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n    mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "using f g"], ["proof (prove)\nusing this:\n  Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) \\<bullet> Fv x \\<tau> =\n  mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n    mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "by (auto simp add: typ_of_def)"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)) =\n  mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq' \\<tau>' (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' \\<tau>' (f $ Fv x \\<tau>)\n                                    (g $ Fv x \\<tau>)", "apply (subst simp'[symmetric])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv (Fv x \\<tau>)\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "apply (rule forall_elim[where \\<tau>=\\<tau>])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n 2. \\<turnstile>\\<^sub>\\<tau> Fv x \\<tau> : \\<tau>\n 3. wf_term (sig \\<Theta>) (Fv x \\<tau>)", "using prem"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n\ngoal (3 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n 2. \\<turnstile>\\<^sub>\\<tau> Fv x \\<tau> : \\<tau>\n 3. wf_term (sig \\<Theta>) (Fv x \\<tau>)", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>\\<tau> Fv x \\<tau> : \\<tau>\n 2. wf_term (sig \\<Theta>) (Fv x \\<tau>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) (Fv x \\<tau>)", "using \\<open>term_ok \\<Theta> (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\\<close> term_ok'.simps(1) term_ok'.simps(5) term_okD1"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs \\<tau> (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0)))\n  term_ok' ?\\<Sigma> (Fv ?uu ?T) = typ_ok_sig ?\\<Sigma> ?T\n  term_ok' ?\\<Sigma> (Abs ?T ?t) =\n  (typ_ok_sig ?\\<Sigma> ?T \\<and> term_ok' ?\\<Sigma> ?t)\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) (Fv x \\<tau>)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' \\<tau>' (f $ Fv x \\<tau>)\n                                  (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' \\<tau>' (f $ Fv x \\<tau>)\n                                  (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have \"typ_of (f $ Fv x \\<tau>) = Some \\<tau>'\" \"typ_of (g $ Fv x \\<tau>) = Some \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (f $ Fv x \\<tau>) = Some \\<tau>' &&&\n    typ_of (g $ Fv x \\<tau>) = Some \\<tau>'", "using f(2) g(2)"], ["proof (prove)\nusing this:\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_of (f $ Fv x \\<tau>) = Some \\<tau>' &&&\n    typ_of (g $ Fv x \\<tau>) = Some \\<tau>'", "by (simp_all add: typ_of_def)"], ["proof (state)\nthis:\n  typ_of (f $ Fv x \\<tau>) = Some \\<tau>'\n  typ_of (g $ Fv x \\<tau>) = Some \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' \\<tau>' (f $ Fv x \\<tau>)\n                                  (g $ Fv x \\<tau>)\n  typ_of (f $ Fv x \\<tau>) = Some \\<tau>'\n  typ_of (g $ Fv x \\<tau>) = Some \\<tau>'", "have 1: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' \\<tau>' (f $ Fv x \\<tau>)\n                                  (g $ Fv x \\<tau>)\n  typ_of (f $ Fv x \\<tau>) = Some \\<tau>'\n  typ_of (g $ Fv x \\<tau>) = Some \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (f $ Fv x \\<tau>) (g $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have core: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                    (Abs \\<tau> (g $ Bv 0))", "apply (rule proves_eq_abstract_rule_rule[OF thy f g _ ctxt])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "using prem"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>' (f $ Bv 0) (g $ Bv 0))", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "using f proves.eta term_okD1 thy"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> f\n  typ_of f = Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>; wf_term (sig ?\\<Theta>) ?t;\n   \\<turnstile>\\<^sub>\\<tau> ?t : ?\\<tau> \\<rightarrow> ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n                (Abs ?\\<tau> (?t $ Bv 0)) ?t\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have left: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq f (Abs \\<tau> (f $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f (Abs \\<tau> (f $ Bv 0))", "(* Should be: auto ... *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f (Abs \\<tau> (f $ Bv 0))", "apply (rule proves_eq_symmetric_rule[OF thy f(1) _ _ _ ctxt])"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n 2. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of f\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "using \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) (Abs \\<tau> (g $ Bv 0))\\<close> proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0))\n                                  (Abs \\<tau> (g $ Bv 0))\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n 2. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of f\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of f\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "apply (simp add: Logic.typ_of_eta_expand f(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "using \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\\<close>"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f (Abs \\<tau> (f $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "have right: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g", "using g proves.eta term_okD1 thy"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> g\n  typ_of g = Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>; wf_term (sig ?\\<Theta>) ?t;\n   \\<turnstile>\\<^sub>\\<tau> ?t : ?\\<tau> \\<rightarrow> ?\\<tau>'\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n                (Abs ?\\<tau> (?t $ Bv 0)) ?t\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau> (f $ Bv 0)\", OF thy f(1) _ g(1) _ _ left _ ctxt])"], ["proof (prove)\ngoal (4 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n 2. typ_of f = typ_of (Abs \\<tau> (f $ Bv 0))\n 3. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of g\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "using \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\\<close> proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (4 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n 2. typ_of f = typ_of (Abs \\<tau> (f $ Bv 0))\n 3. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of g\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. typ_of f = typ_of (Abs \\<tau> (f $ Bv 0))\n 2. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of g\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "apply (simp add: Logic.typ_of_eta_expand f(2))"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of g\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "apply (simp add: Logic.typ_of_eta_expand f(2) g(2))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) g", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau> (g $ Bv 0)\", OF thy _ _ g(1)  _ _ core right ctxt])"], ["proof (prove)\ngoal (4 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n 2. term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n 3. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of (Abs \\<tau> (g $ Bv 0))\n 4. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g", "using \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\\<close> proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (f $ Bv 0)) f\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (4 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (f $ Bv 0))\n 2. term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n 3. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of (Abs \\<tau> (g $ Bv 0))\n 4. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n 2. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of (Abs \\<tau> (g $ Bv 0))\n 3. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g", "using \\<open>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\\<close> proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (g $ Bv 0)) g\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (g $ Bv 0))\n 2. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of (Abs \\<tau> (g $ Bv 0))\n 3. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs \\<tau> (f $ Bv 0)) = typ_of (Abs \\<tau> (g $ Bv 0))\n 2. typ_of (Abs \\<tau> (g $ Bv 0)) = typ_of g", "by (simp add: Logic.typ_of_eta_expand f(2) g(2))+"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq f g\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bind_fv2_idem[simp]: \n  \"bind_fv2 (x, \\<tau>) lev1 (bind_fv2 (x, \\<tau>) lev2 t) = bind_fv2 (x, \\<tau>) lev2 t \""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 (x, \\<tau>) lev1 (bind_fv2 (x, \\<tau>) lev2 t) =\n    bind_fv2 (x, \\<tau>) lev2 t", "by (induction \"(x,\\<tau>)\" lev2 t arbitrary: lev1 rule: bind_fv2.induct) auto"], ["", "corollary bind_fv_idem[simp]: \n  \"bind_fv (x, \\<tau>) (bind_fv (x, \\<tau>) t) = bind_fv (x, \\<tau>) t \""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv (x, \\<tau>) (bind_fv (x, \\<tau>) t) = bind_fv (x, \\<tau>) t", "using bind_fv_def bind_fv2_idem"], ["proof (prove)\nusing this:\n  bind_fv ?vT ?t = bind_fv2 ?vT 0 ?t\n  bind_fv2 (?x, ?\\<tau>) ?lev1.0 (bind_fv2 (?x, ?\\<tau>) ?lev2.0 ?t) =\n  bind_fv2 (?x, ?\\<tau>) ?lev2.0 ?t\n\ngoal (1 subgoal):\n 1. bind_fv (x, \\<tau>) (bind_fv (x, \\<tau>) t) = bind_fv (x, \\<tau>) t", "by simp"], ["", "corollary bind_fv_Abs_fv[simp]: \"bind_fv (x, \\<tau>) (Abs_fv x \\<tau> t) = Abs_fv x \\<tau> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv (x, \\<tau>) (Abs_fv x \\<tau> t) = Abs_fv x \\<tau> t", "by (simp add: bind_fv_def)"], ["", "lemma \"bind_fv2 (x,\\<tau>) lev (mk_eq' \\<tau>' s t) = mk_eq' \\<tau>' (bind_fv2 (x,\\<tau>) lev s) (bind_fv2 (x,\\<tau>) lev t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv2 (x, \\<tau>) lev (mk_eq' \\<tau>' s t) =\n    mk_eq' \\<tau>' (bind_fv2 (x, \\<tau>) lev s) (bind_fv2 (x, \\<tau>) lev t)", "by simp"], ["", "lemma \"bind_fv (x,\\<tau>) (mk_eq' \\<tau>' s t) = mk_eq' \\<tau>' (bind_fv (x,\\<tau>) s) (bind_fv (x,\\<tau>) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bind_fv (x, \\<tau>) (mk_eq' \\<tau>' s t) =\n    mk_eq' \\<tau>' (bind_fv (x, \\<tau>) s) (bind_fv (x, \\<tau>) t)", "by (simp add: bind_fv_def)"], ["", "lemma term_ok_Abs_fvI: \"term_ok \\<Theta> s \\<Longrightarrow> typ_ok \\<Theta> \\<tau> \\<Longrightarrow> term_ok \\<Theta> (Abs_fv x \\<tau> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>term_ok \\<Theta> s; typ_ok \\<Theta> \\<tau>\\<rbrakk>\n    \\<Longrightarrow> term_ok \\<Theta> (Abs_fv x \\<tau> s)", "by (auto simp add: wt_term_def term_ok'_bind_fv typ_of_Abs_bind_fv)"], ["", "lemma proves_eq_abstract_rule_derived_rule:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"(x, \\<tau>) \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t\" \n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s)) (Abs \\<tau> (bind_fv (x, \\<tau>) t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "obtain \\<tau>' where s: \"typ_of s = Some \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of s = Some \\<tau>' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson eq option.exhaust_sel proved_terms_well_formed(2) term_okD2 term_ok_app_eqD)"], ["proof (state)\nthis:\n  typ_of s = Some \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have t: \"typ_of t = Some \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of t = Some \\<tau>'", "by (metis eq proved_terms_well_formed(2) s term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  typ_of t = Some \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have ok: \"term_ok \\<Theta> s\" \"term_ok \\<Theta> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t", "using eq proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have closed: \"is_closed s\" \"is_closed t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed s &&& is_closed t", "using eq has_typ_imp_closed proved_terms_well_formed(2) term_ok_def term_ok_mk_eqD wt_term_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n  \\<turnstile>\\<^sub>\\<tau> ?t : ?ty \\<Longrightarrow> is_closed ?t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. is_closed s &&& is_closed t", "by blast+"], ["proof (state)\nthis:\n  is_closed s\n  is_closed t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"is_closed (mk_eq s t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed (mk_eq s t)", "using eq proved_terms_closed"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?B \\<Longrightarrow> is_closed ?B\n\ngoal (1 subgoal):\n 1. is_closed (mk_eq s t)", "by blast"], ["proof (state)\nthis:\n  is_closed (mk_eq s t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "hence \"Abs \\<tau> (bind_fv (x, \\<tau>) (mk_eq s t)) \\<bullet> Fv x \\<tau> = mk_eq s t\""], ["proof (prove)\nusing this:\n  is_closed (mk_eq s t)\n\ngoal (1 subgoal):\n 1. Abs_fv x \\<tau> (mk_eq s t) \\<bullet> Fv x \\<tau> = mk_eq s t", "using betapply_Abs_fv"], ["proof (prove)\nusing this:\n  is_closed (mk_eq s t)\n  is_closed ?t \\<Longrightarrow> Abs_fv ?v ?T ?t \\<bullet> Fv ?v ?T = ?t\n\ngoal (1 subgoal):\n 1. Abs_fv x \\<tau> (mk_eq s t) \\<bullet> Fv x \\<tau> = mk_eq s t", "by auto"], ["proof (state)\nthis:\n  Abs_fv x \\<tau> (mk_eq s t) \\<bullet> Fv x \\<tau> = mk_eq s t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_all x \\<tau> (mk_eq s t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau> (mk_eq s t)", "using eq forall_intro thy typ_ok_def x(1) x(2)"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n  \\<lbrakk>wf_theory ?\\<Theta>; ?\\<Theta>,?\\<Gamma> \\<turnstile> ?B;\n   (?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>;\n   wf_type (sig ?\\<Theta>) ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_all ?x ?\\<tau> ?B\n  wf_theory \\<Theta>\n  typ_ok ?\\<Theta> ?T \\<equiv> wf_type (sig ?\\<Theta>) ?T\n  (x, \\<tau>) \\<notin> FV \\<Gamma>\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau> (mk_eq s t)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau> (mk_eq s t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) (subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (subst_bv (Fv x \\<tau>)\n(bind_fv (x, \\<tau>) s))", "using term_ok_Abs_fvI[OF ok(1) x(2)] wf_term.intros(1) typ_ok_def x(2)"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs_fv ?x \\<tau> s)\n  wf_type ?\\<Sigma> ?T \\<Longrightarrow> wf_term ?\\<Sigma> (Fv ?v ?T)\n  typ_ok ?\\<Theta> ?T \\<equiv> wf_type (sig ?\\<Theta>) ?T\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (subst_bv (Fv x \\<tau>)\n(bind_fv (x, \\<tau>) s))", "by (auto intro!: \\<beta>_conversion[OF thy])"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) s))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) s))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) s) = s", "by (simp add: closed(1) subst_bv_bind_fv)"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) s) = s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) s))\n  subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) s) = s", "have unfs: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) s\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) s))\n  subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) s) = s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>) (subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n                                    (subst_bv (Fv x \\<tau>)\n(bind_fv (x, \\<tau>) t))", "using term_ok_Abs_fvI[OF ok(2) x(2)] wf_term.intros(1) typ_ok_def x(2)"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (Abs_fv ?x \\<tau> t)\n  wf_type ?\\<Sigma> ?T \\<Longrightarrow> wf_term ?\\<Sigma> (Fv ?v ?T)\n  typ_ok ?\\<Theta> ?T \\<equiv> wf_type (sig ?\\<Theta>) ?T\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n                                    (subst_bv (Fv x \\<tau>)\n(bind_fv (x, \\<tau>) t))", "by (auto intro!: \\<beta>_conversion[OF thy])"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) t))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) t))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) t) = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) t) = t", "by (simp add: closed(2) subst_bv_bind_fv)"], ["proof (state)\nthis:\n  subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) t) = t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) t))\n  subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) t) = t", "have unft: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>) t\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n                                  (subst_bv (Fv x \\<tau>)\n                                    (bind_fv (x, \\<tau>) t))\n  subst_bv (Fv x \\<tau>) (bind_fv (x, \\<tau>) t) = t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have prem:\n    \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (rule proves_eq_transitive_rule[where t=s, OF thy _ _ _ _ _ _ _ ctxt])"], ["proof (prove)\ngoal (7 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n 2. term_ok \\<Theta> s\n 3. term_ok \\<Theta> (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 4. typ_of (Abs_fv x \\<tau> s $ Fv x \\<tau>) = typ_of s\n 5. typ_of s = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 6. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n 7. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "using ok(1) term_ok_mk_eqD unfs unft proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> s\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (7 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n 2. term_ok \\<Theta> s\n 3. term_ok \\<Theta> (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 4. typ_of (Abs_fv x \\<tau> s $ Fv x \\<tau>) = typ_of s\n 5. typ_of s = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 6. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n 7. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (all blast)[4]"], ["proof (prove)\ngoal (3 subgoals):\n 1. typ_of s = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (metis proved_terms_well_formed(2) s t term_ok_mk_eq_same_typ thy unft)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "using unfs"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (rule proves_eq_transitive_rule[where t=t, OF thy ok _ _ _ _ _ ctxt])"], ["proof (prove)\ngoal (5 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 2. typ_of s = typ_of t\n 3. typ_of t = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "using proved_terms_well_formed(2) term_ok_mk_eqD unft"], ["proof (prove)\nusing this:\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n\ngoal (5 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 2. typ_of s = typ_of t\n 3. typ_of t = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. typ_of s = typ_of t\n 2. typ_of t = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (simp add: s t)"], ["proof (prove)\ngoal (3 subgoals):\n 1. typ_of t = typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (metis proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy unft)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "using eq"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t (Abs_fv x \\<tau> t $ Fv x \\<tau>)", "apply (rule proves_eq_symmetric_rule[OF thy ok(2) _ _ _ ctxt])"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 2. typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>) = typ_of t\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "using proved_terms_well_formed(2) term_ok_mk_eqD unft"], ["proof (prove)\nusing this:\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n 2. typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>) = typ_of t\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>) = typ_of t\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "using proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy unft"], ["proof (prove)\nusing this:\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n\ngoal (2 subgoals):\n 1. typ_of (Abs_fv x \\<tau> t $ Fv x \\<tau>) = typ_of t\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "using unft"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t", "apply blast"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "hence \"\\<Theta>, \\<Gamma> \\<turnstile> mk_all x \\<tau>\n    (mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>))\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                    (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n(Abs_fv x \\<tau> t $ Fv x \\<tau>))", "using forall_intro thy typ_ok_def x(1) x(2)"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                  (Abs_fv x \\<tau> t $ Fv x \\<tau>)\n  \\<lbrakk>wf_theory ?\\<Theta>; ?\\<Theta>,?\\<Gamma> \\<turnstile> ?B;\n   (?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>;\n   wf_type (sig ?\\<Theta>) ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_all ?x ?\\<tau> ?B\n  wf_theory \\<Theta>\n  typ_ok ?\\<Theta> ?T \\<equiv> wf_type (sig ?\\<Theta>) ?T\n  (x, \\<tau>) \\<notin> FV \\<Gamma>\n  typ_ok \\<Theta> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                    (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n(Abs_fv x \\<tau> t $ Fv x \\<tau>))", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"mk_all x \\<tau> \n      (mk_eq (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>))\n    = mk_all x \\<tau> \n      (mk_eq' \\<tau>' (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_all x \\<tau>\n     (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n       (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n    mk_all x \\<tau>\n     (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n       (Abs_fv x \\<tau> t $ Fv x \\<tau>))", "using bind_fv2_preserves_type s t typ_of_def"], ["proof (prove)\nusing this:\n  typ_of1 ?Ts ?t = Some ?ty \\<Longrightarrow>\n  typ_of1 (?Ts @ [?T]) (bind_fv2 (?v, ?T) (length ?Ts) ?t) = Some ?ty\n  typ_of s = Some \\<tau>'\n  typ_of t = Some \\<tau>'\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. mk_all x \\<tau>\n     (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n       (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n    mk_all x \\<tau>\n     (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n       (Abs_fv x \\<tau> t $ Fv x \\<tau>))", "by (fastforce simp add: bind_fv_def typ_of_def)+"], ["proof (state)\nthis:\n  mk_all x \\<tau>\n   (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "moreover"], ["proof (state)\nthis:\n  mk_all x \\<tau>\n   (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "have \"mk_all x \\<tau> \n      (mk_eq' \\<tau>' (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Fv x \\<tau>) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Fv x \\<tau>)) =\n    Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> \n      (mk_eq' \\<tau>' (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Bv 0) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mk_all x \\<tau>\n     (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n       (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n    Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n    Abs \\<tau>\n     (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "by (simp add: bind_fv_def)"], ["proof (state)\nthis:\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n  mk_all x \\<tau>\n   (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "have pre_ext: \"\\<Theta>, \\<Gamma> \\<turnstile> Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ Abs \\<tau> \n      (mk_eq' \\<tau>' (Abs \\<tau> (bind_fv (x, \\<tau>) s) $ Bv 0) (Abs \\<tau> (bind_fv (x, \\<tau>) t) $ Bv 0))\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_all x \\<tau>\n                                  (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n                                    (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n  mk_all x \\<tau>\n   (mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>))\n  mk_all x \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Fv x \\<tau>)\n     (Abs_fv x \\<tau> t $ Fv x \\<tau>)) =\n  Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n  Abs \\<tau>\n   (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Bv 0)\n                                    (Abs_fv x \\<tau> t $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                    (Abs_fv x \\<tau> t)", "apply (rule proves_eq_ext_rule[where \\<tau>=\\<tau> and \\<tau>'=\\<tau>', OF thy _ _ _ _ _ ctxt])"], ["proof (prove)\ngoal (5 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> s)\n 2. typ_of (Abs_fv x \\<tau> s) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 3. term_ok \\<Theta> (Abs_fv x \\<tau> t)\n 4. typ_of (Abs_fv x \\<tau> t) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 5. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "using proved_terms_well_formed(2) term_ok_app_eqD unfs"], ["proof (prove)\nusing this:\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s $ Fv x \\<tau>) s\n\ngoal (5 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> s)\n 2. typ_of (Abs_fv x \\<tau> s) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 3. term_ok \\<Theta> (Abs_fv x \\<tau> t)\n 4. typ_of (Abs_fv x \\<tau> t) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 5. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "apply blast"], ["proof (prove)\ngoal (4 subgoals):\n 1. typ_of (Abs_fv x \\<tau> s) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 2. term_ok \\<Theta> (Abs_fv x \\<tau> t)\n 3. typ_of (Abs_fv x \\<tau> t) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 4. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "apply (simp add: s typ_of_Abs_bind_fv)"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> t)\n 2. typ_of (Abs_fv x \\<tau> t) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 3. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "using proved_terms_well_formed(2) term_ok_app_eqD unft"], ["proof (prove)\nusing this:\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> t $ Fv x \\<tau>) t\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> (Abs_fv x \\<tau> t)\n 2. typ_of (Abs_fv x \\<tau> t) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 3. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs_fv x \\<tau> t) = Some (\\<tau> \\<rightarrow> \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "apply (simp add: t typ_of_Abs_bind_fv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "using pre_ext"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau>\n                                  (mk_eq' \\<tau>' (Abs_fv x \\<tau> s $ Bv 0)\n                                    (Abs_fv x \\<tau> t $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau>\n                                    (mk_eq' \\<tau>'\n(Abs_fv x \\<tau> s $ Bv 0) (Abs_fv x \\<tau> t $ Bv 0))", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau> s)\n                                  (Abs_fv x \\<tau> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "(* This should allow descending under abstractions for rewriting *)"], ["", "lemma proves_descend_abs_rule_iff:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes ok: \"is_closed s\" \"is_closed t\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq s t \n    \\<longleftrightarrow> \\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' (bind_fv (x, \\<tau>') s)) (Abs \\<tau>' (bind_fv (x, \\<tau>') t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t) =\n    (\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                     (Abs_fv x \\<tau>' t))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "assume asm: \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\""], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "hence \"term_ok \\<Theta> s\" \"term_ok \\<Theta> t\""], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t", "using proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> s &&& term_ok \\<Theta> t", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> s\n  term_ok \\<Theta> t\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "show \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s) (Abs_fv x \\<tau>' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t)", "by (rule proves_eq_abstract_rule_derived_rule[OF thy x ctxt asm])"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                  (Abs_fv x \\<tau>' t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "assume asm: \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s) (Abs_fv x \\<tau>' t)\""], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                  (Abs_fv x \\<tau>' t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                    (Abs_fv x \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "show \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "using assms asm proves_descend_abs_rule"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  is_closed s\n  is_closed t\n  (x, \\<tau>') \\<notin> FV \\<Gamma>\n  typ_ok \\<Theta> \\<tau>'\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs_fv x \\<tau>' s)\n                                  (Abs_fv x \\<tau>' t)\n  \\<lbrakk>wf_theory ?\\<Theta>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (Abs_fv ?x ?\\<tau>' ?s)\n                                     (Abs_fv ?x ?\\<tau>' ?t);\n   is_closed ?s; is_closed ?t; (?x, ?\\<tau>') \\<notin> FV ?\\<Gamma>;\n   typ_ok ?\\<Theta> ?\\<tau>'; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s ?t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq s t\n\ngoal:\nNo subgoals!", "qed"], ["", "(* This seems better *)"], ["", "lemma proves_descend_abs_rule':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (subst_bv (Fv x \\<tau>') t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have abs_ok: \"term_ok \\<Theta> (Abs \\<tau>' s)\" \"term_ok \\<Theta> (Abs \\<tau>' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau>' s) &&& term_ok \\<Theta> (Abs \\<tau>' t)", "using eq(1) option.distinct(1) proved_terms_well_formed term_ok'.simps(4)\n        wt_term_def typ_of1_split_App typ_of_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\n  None \\<noteq> Some ?x2.0\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow>\n  typ_of ?p = Some propT\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of1 ?Ts (?t $ ?u) = Some ?ty \\<Longrightarrow>\n  \\<exists>uty.\n     typ_of1 ?Ts ?t = Some (uty \\<rightarrow> ?ty) \\<and>\n     typ_of1 ?Ts ?u = Some uty\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau>' s) &&& term_ok \\<Theta> (Abs \\<tau>' t)", "by (smt term_ok_mk_eqD)+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau>' s)\n  term_ok \\<Theta> (Abs \\<tau>' t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "obtain \\<tau> where \\<tau>1: \"typ_of (Abs \\<tau>' s) = Some (\\<tau>' \\<rightarrow> \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (Abs \\<tau>' s) =\n        Some (\\<tau>' \\<rightarrow> \\<tau>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (smt eq proved_terms_well_formed_pre typ_of1_split_App_obtains typ_of_Abs_body_typ' typ_of_def)"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau>' s) = Some (\\<tau>' \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "hence \\<tau>2: \"typ_of (Abs \\<tau>' t)= Some (\\<tau>' \\<rightarrow> \\<tau>)\""], ["proof (prove)\nusing this:\n  typ_of (Abs \\<tau>' s) = Some (\\<tau>' \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau>' t) = Some (\\<tau>' \\<rightarrow> \\<tau>)", "by (metis eq(1) proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau>' t) = Some (\\<tau>' \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have add_param: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs \\<tau>' s $ Fv x \\<tau>')\n    (Abs \\<tau>' t $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')", "apply (rule proves_eq_combination_rule; use assms abs_ok \\<tau>1 \\<tau>2 in \\<open>(solves \\<open>simp del: term_ok_def\\<close>)?\\<close>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>')))\n                                    (Fv x \\<tau>') (Fv x \\<tau>')", "using proves_eq_reflexive term_ok_var thy x(2) ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq'\n                (the (typ_of ?t)) ?t ?t\n  term_ok ?\\<Theta> (Fv ?idn ?\\<tau>) = typ_ok ?\\<Theta> ?\\<tau>\n  wf_theory \\<Theta>\n  typ_ok \\<Theta> \\<tau>'\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of (Fv x \\<tau>')))\n                                    (Fv x \\<tau>') (Fv x \\<tau>')", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have \\<beta>s: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs \\<tau>' s $ Fv x \\<tau>')\n    (subst_bv (Fv x \\<tau>') s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') s)", "by (rule proves.\\<beta>_conversion; use assms abs_ok \\<tau>1 \\<tau>2 in \\<open>(solves \\<open>simp add: wt_term_def\\<close>)?\\<close>)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t1: \"term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)", "using \\<beta>s proved_terms_well_formed(2) wt_term_def typ_of_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)", "using term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t2: \"term_ok \\<Theta> (Abs \\<tau>' s $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau>' s $ Fv x \\<tau>')", "using \\<beta>s proved_terms_well_formed(2) t1 term_ok'.simps(4) wt_term_def term_ok_mk_eq_same_typ thy\n      term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau>' s $ Fv x \\<tau>')", "by blast"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have \\<beta>s_rev: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (Abs \\<tau>' s $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (Abs \\<tau>' s $ Fv x \\<tau>')", "apply (rule proves_eq_symmetric_rule; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of (Abs \\<tau>' s $ Fv x \\<tau>') =\n    typ_of (subst_bv (Fv x \\<tau>') s)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') s)", "using \\<beta>s proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (2 subgoals):\n 1. typ_of (Abs \\<tau>' s $ Fv x \\<tau>') =\n    typ_of (subst_bv (Fv x \\<tau>') s)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') s)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') s)", "using \\<beta>s"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') s)", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (Abs \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have \\<beta>t: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs \\<tau>' t $ Fv x \\<tau>')\n    (subst_bv (Fv x \\<tau>') t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') t)", "by (rule proves.\\<beta>_conversion; use assms abs_ok \\<tau>1 \\<tau>2 t1 in \\<open>(solves \\<open>simp add: wt_term_def\\<close>)?\\<close>)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t3: \"term_ok \\<Theta> (Abs \\<tau>' t $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau>' t $ Fv x \\<tau>')", "using \\<beta>s add_param proved_terms_well_formed(2) t1 term_ok'.simps(4)\n        wt_term_def term_ok_mk_eq_same_typ thy term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') s)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (Abs \\<tau>' t $ Fv x \\<tau>')\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (Abs \\<tau>' t $ Fv x \\<tau>')", "by meson"], ["proof (state)\nthis:\n  term_ok \\<Theta> (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t4: \"typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' t $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (subst_bv (Fv x \\<tau>') s) =\n    typ_of (Abs \\<tau>' t $ Fv x \\<tau>')", "by (metis \\<beta>s add_param proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t5: \"typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' s $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (subst_bv (Fv x \\<tau>') s) =\n    typ_of (Abs \\<tau>' s $ Fv x \\<tau>')", "using \\<beta>s_rev proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (Abs \\<tau>' s $ Fv x \\<tau>')\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_of (subst_bv (Fv x \\<tau>') s) =\n    typ_of (Abs \\<tau>' s $ Fv x \\<tau>')", "by blast"], ["proof (state)\nthis:\n  typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t6: \"typ_of (Abs \\<tau>' s $ Fv x \\<tau>') = typ_of (Abs \\<tau>' t $ term.Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau>' s $ Fv x \\<tau>') =\n    typ_of (Abs \\<tau>' t $ Fv x \\<tau>')", "using t4 t5"], ["proof (prove)\nusing this:\n  typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' t $ Fv x \\<tau>')\n  typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' s $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau>' s $ Fv x \\<tau>') =\n    typ_of (Abs \\<tau>' t $ Fv x \\<tau>')", "by auto"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau>' s $ Fv x \\<tau>') =\n  typ_of (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have half: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (Abs \\<tau>' t $ Fv x \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau>' s $ Fv x \\<tau>'\"]\n        ; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 t3 t4 t5 t6 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (Abs \\<tau>' s $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')", "using \\<beta>s_rev"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (Abs \\<tau>' s $ Fv x \\<tau>')\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (Abs \\<tau>' s $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')", "using add_param"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                  (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s $ Fv x \\<tau>')\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t7: \"term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)", "using \\<beta>t proved_terms_well_formed(2) t1 t4 term_ok'.simps(4) wt_term_def term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') t)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n  typ_of (subst_bv (Fv x \\<tau>') s) = typ_of (Abs \\<tau>' t $ Fv x \\<tau>')\n  term_ok' ?\\<Sigma> (?t $ ?u) =\n  (term_ok' ?\\<Sigma> ?t \\<and> term_ok' ?\\<Sigma> ?u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)", "by (meson term_ok_app_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "have t8: \"typ_of (Abs \\<tau>' t $ term.Fv x \\<tau>') = typ_of (subst_bv (Fv x \\<tau>') t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau>' t $ Fv x \\<tau>') =\n    typ_of (subst_bv (Fv x \\<tau>') t)", "using \\<beta>t proved_terms_well_formed(2) term_ok_mk_eq_same_typ thy"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') t)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> (mk_eq ?s ?t)\\<rbrakk>\n  \\<Longrightarrow> typ_of ?s = typ_of ?t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau>' t $ Fv x \\<tau>') =\n    typ_of (subst_bv (Fv x \\<tau>') t)", "by blast"], ["proof (state)\nthis:\n  typ_of (Abs \\<tau>' t $ Fv x \\<tau>') = typ_of (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "apply (rule proves_eq_transitive_rule[where t=\"Abs \\<tau>' t $ Fv x \\<tau>'\"]\n        ; use assms abs_ok \\<tau>1 \\<tau>2 t1 t2 t3 t4 t5 t6 t7 t8 in \\<open>(solves simp)?\\<close>)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') t)", "using half"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (Abs \\<tau>' t $ Fv x \\<tau>')\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (Abs \\<tau>' t $ Fv x \\<tau>')\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') t)", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') t)", "using \\<beta>t"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                  (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' t $ Fv x \\<tau>')\n                                    (subst_bv (Fv x \\<tau>') t)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (subst_bv (Fv x \\<tau>') t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_ascend_abs_rule':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"(x,\\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes eq: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (subst_bv (Fv x \\<tau>') t)\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "have ok_ind: \"wf_type (sig \\<Theta>) \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_type (sig \\<Theta>) \\<tau>'", "using x(3)"], ["proof (prove)\nusing this:\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. wf_type (sig \\<Theta>) \\<tau>'", "by simp"], ["proof (state)\nthis:\n  wf_type (sig \\<Theta>) \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "note 1 = proves_eq_abstract_rule_derived_rule[OF thy]"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>; typ_ok \\<Theta> ?\\<tau>;\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT;\n   \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s ?t\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n               (Abs_fv ?x ?\\<tau> ?s) (Abs_fv ?x ?\\<tau> ?t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "have \"term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)", "using eq proved_terms_well_formed(2) wt_term_def typ_of_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (subst_bv (Fv x \\<tau>') t)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)", "by (meson term_ok_app_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "hence \"is_closed (subst_bv (Fv x \\<tau>') s)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. is_closed (subst_bv (Fv x \\<tau>') s)", "using wt_term_def typ_of_imp_closed"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') s)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. is_closed (subst_bv (Fv x \\<tau>') s)", "by auto"], ["proof (state)\nthis:\n  is_closed (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "hence loose_s: \"\\<not> loose_bvar s 1\""], ["proof (prove)\nusing this:\n  is_closed (subst_bv (Fv x \\<tau>') s)\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar s 1", "using is_closed_subst_bv"], ["proof (prove)\nusing this:\n  is_closed (subst_bv (Fv x \\<tau>') s)\n  is_closed (subst_bv ?u ?t) \\<Longrightarrow> \\<not> loose_bvar ?t 1\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar s 1", "by simp"], ["proof (state)\nthis:\n  \\<not> loose_bvar s 1\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "hence loose_s': \"(\\<And>x. 1 < x \\<Longrightarrow> \\<not> loose_bvar1 s x) \""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar s 1\n\ngoal (1 subgoal):\n 1. \\<And>x. 1 < x \\<Longrightarrow> \\<not> loose_bvar1 s x", "by (simp add: not_loose_bvar_imp_not_loose_bvar1_all_greater)"], ["proof (state)\nthis:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 s ?x\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "moreover"], ["proof (state)\nthis:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 s ?x\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "have \" \\<not> occs (case_prod Fv (x,\\<tau>')) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s", "have \"(x,\\<tau>') \\<notin> fv s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, \\<tau>') \\<notin> fv s", "using x(2)"], ["proof (prove)\nusing this:\n  (x, \\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\n\ngoal (1 subgoal):\n 1. (x, \\<tau>') \\<notin> fv s", "by auto"], ["proof (state)\nthis:\n  (x, \\<tau>') \\<notin> fv s\n\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x, \\<tau>') \\<notin> fv s\n\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s", "by (simp add: fv_iff_occs)"], ["proof (state)\nthis:\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "ultimately"], ["proof (chain)\npicking this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 s ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s", "have s: \"Abs_fv x \\<tau>' (subst_bv (term.Fv x \\<tau>') s) = Abs \\<tau>' s\""], ["proof (prove)\nusing this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 s ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s\n\ngoal (1 subgoal):\n 1. Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') s) = Abs \\<tau>' s", "unfolding subst_bv_def bind_fv_def"], ["proof (prove)\nusing this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 s ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s\n\ngoal (1 subgoal):\n 1. Abs \\<tau>' (bind_fv2 (x, \\<tau>') 0 (subst_bv1 s 0 (Fv x \\<tau>'))) =\n    Abs \\<tau>' s", "using bind_fv2_subst_bv1_cancel"], ["proof (prove)\nusing this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 s ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) s\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa) ?t\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 ?v ?lev\n                     (subst_bv1 ?t ?lev\n                       (case ?v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                    ?t\n\ngoal (1 subgoal):\n 1. Abs \\<tau>' (bind_fv2 (x, \\<tau>') 0 (subst_bv1 s 0 (Fv x \\<tau>'))) =\n    Abs \\<tau>' s", "by (metis (full_types) case_prod_conv less_one linorder_neqE_nat\n          loose_bvar1_imp_loose_bvar loose_s not_less_zero)"], ["proof (state)\nthis:\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') s) = Abs \\<tau>' s\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "have \"term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)", "using eq proved_terms_well_formed(2) wt_term_def typ_of_def"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (subst_bv (Fv x \\<tau>') t)\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)", "by (meson term_ok_app_eqD)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "hence \"is_closed (subst_bv (Fv x \\<tau>') t)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. is_closed (subst_bv (Fv x \\<tau>') t)", "using wt_term_def typ_of_imp_closed"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bv (Fv x \\<tau>') t)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. is_closed (subst_bv (Fv x \\<tau>') t)", "by auto"], ["proof (state)\nthis:\n  is_closed (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "hence loose_s: \"\\<not> loose_bvar t 1\""], ["proof (prove)\nusing this:\n  is_closed (subst_bv (Fv x \\<tau>') t)\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t 1", "using is_closed_subst_bv"], ["proof (prove)\nusing this:\n  is_closed (subst_bv (Fv x \\<tau>') t)\n  is_closed (subst_bv ?u ?t) \\<Longrightarrow> \\<not> loose_bvar ?t 1\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar t 1", "by simp"], ["proof (state)\nthis:\n  \\<not> loose_bvar t 1\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "hence loose_s': \"(\\<And>x. 1 < x \\<Longrightarrow> \\<not> loose_bvar1 t x) \""], ["proof (prove)\nusing this:\n  \\<not> loose_bvar t 1\n\ngoal (1 subgoal):\n 1. \\<And>x. 1 < x \\<Longrightarrow> \\<not> loose_bvar1 t x", "by (simp add: not_loose_bvar_imp_not_loose_bvar1_all_greater)"], ["proof (state)\nthis:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "moreover"], ["proof (state)\nthis:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "have \" \\<not> occs (case_prod Fv (x,\\<tau>')) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t", "have \"(x,\\<tau>') \\<notin> fv t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, \\<tau>') \\<notin> fv t", "using x(2)"], ["proof (prove)\nusing this:\n  (x, \\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\n\ngoal (1 subgoal):\n 1. (x, \\<tau>') \\<notin> fv t", "by auto"], ["proof (state)\nthis:\n  (x, \\<tau>') \\<notin> fv t\n\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x, \\<tau>') \\<notin> fv t\n\ngoal (1 subgoal):\n 1. \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t", "by (simp add: fv_iff_occs)"], ["proof (state)\nthis:\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "ultimately"], ["proof (chain)\npicking this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t", "have t: \"Abs_fv x \\<tau>' (subst_bv (term.Fv x \\<tau>') t) = Abs \\<tau>' t\""], ["proof (prove)\nusing this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t\n\ngoal (1 subgoal):\n 1. Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') t) = Abs \\<tau>' t", "unfolding subst_bv_def bind_fv_def"], ["proof (prove)\nusing this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t\n\ngoal (1 subgoal):\n 1. Abs \\<tau>' (bind_fv2 (x, \\<tau>') 0 (subst_bv1 t 0 (Fv x \\<tau>'))) =\n    Abs \\<tau>' t", "using bind_fv2_subst_bv1_cancel"], ["proof (prove)\nusing this:\n  1 < ?x \\<Longrightarrow> \\<not> loose_bvar1 t ?x\n  \\<not> occs (case (x, \\<tau>') of (x, xa) \\<Rightarrow> Fv x xa) t\n  \\<lbrakk>\\<And>x. ?lev < x \\<Longrightarrow> \\<not> loose_bvar1 ?t x;\n   \\<not> occs (case ?v of (x, xa) \\<Rightarrow> Fv x xa) ?t\\<rbrakk>\n  \\<Longrightarrow> bind_fv2 ?v ?lev\n                     (subst_bv1 ?t ?lev\n                       (case ?v of (x, xa) \\<Rightarrow> Fv x xa)) =\n                    ?t\n\ngoal (1 subgoal):\n 1. Abs \\<tau>' (bind_fv2 (x, \\<tau>') 0 (subst_bv1 t 0 (Fv x \\<tau>'))) =\n    Abs \\<tau>' t", "by (metis (full_types) case_prod_conv less_one linorder_neqE_nat loose_bvar1_imp_loose_bvar \n        loose_s not_less_zero)"], ["proof (state)\nthis:\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') t) = Abs \\<tau>' t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "from 1 s t"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>; typ_ok \\<Theta> ?\\<tau>;\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT;\n   \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s ?t\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n               (Abs_fv ?x ?\\<tau> ?s) (Abs_fv ?x ?\\<tau> ?t)\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') s) = Abs \\<tau>' s\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') t) = Abs \\<tau>' t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>; typ_ok \\<Theta> ?\\<tau>;\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT;\n   \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s ?t\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n               (Abs_fv ?x ?\\<tau> ?s) (Abs_fv ?x ?\\<tau> ?t)\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') s) = Abs \\<tau>' s\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') t) = Abs \\<tau>' t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "using ctxt  eq x(1) x(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x, ?\\<tau>) \\<notin> FV ?\\<Gamma>; typ_ok \\<Theta> ?\\<tau>;\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok \\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT;\n   \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?s ?t\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n               (Abs_fv ?x ?\\<tau> ?s) (Abs_fv ?x ?\\<tau> ?t)\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') s) = Abs \\<tau>' s\n  Abs_fv x \\<tau>' (subst_bv (Fv x \\<tau>') t) = Abs \\<tau>' t\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                  (subst_bv (Fv x \\<tau>') t)\n  (x, \\<tau>') \\<notin> FV \\<Gamma>\n  typ_ok \\<Theta> \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)", "by fastforce"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_descend_abs_rule_iff':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes x: \"(x, \\<tau>') \\<notin> FV \\<Gamma>\" \"(x, \\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\" \"typ_ok \\<Theta> \\<tau>'\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s) (subst_bv (Fv x \\<tau>') t)\n    \\<longleftrightarrow> \\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                     (subst_bv (Fv x \\<tau>') t)) =\n    (\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>')\nt) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s)\n                                    (Abs \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "using assms proves_ascend_abs_rule'"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  (x, \\<tau>') \\<notin> FV \\<Gamma>\n  (x, \\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\n  typ_ok \\<Theta> \\<tau>'\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<lbrakk>wf_theory ?\\<Theta>; (?x, ?\\<tau>') \\<notin> FV ?\\<Gamma>;\n   (?x, ?\\<tau>') \\<notin> fv (mk_eq (Abs ?\\<tau>' ?s) (Abs ?\\<tau>' ?t));\n   typ_ok ?\\<Theta> ?\\<tau>';\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv ?x ?\\<tau>') ?s)\n                                     (subst_bv (Fv ?x ?\\<tau>') ?t);\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (Abs ?\\<tau>' ?s)\n                (Abs ?\\<tau>' ?t)\n\ngoal (2 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>')\nt) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t)\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s)\n                                    (Abs \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s)\n                                    (Abs \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "using assms proves_descend_abs_rule'"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  (x, \\<tau>') \\<notin> FV \\<Gamma>\n  (x, \\<tau>') \\<notin> fv (mk_eq (Abs \\<tau>' s) (Abs \\<tau>' t))\n  typ_ok \\<Theta> \\<tau>'\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<lbrakk>wf_theory ?\\<Theta>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (Abs ?\\<tau>' ?s)\n                                     (Abs ?\\<tau>' ?t);\n   (?x, ?\\<tau>') \\<notin> FV ?\\<Gamma>; typ_ok ?\\<Theta> ?\\<tau>';\n   finite ?\\<Gamma>; \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq\n                (subst_bv (Fv ?x ?\\<tau>') ?s)\n                (subst_bv (Fv ?x ?\\<tau>') ?t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau>' s)\n                                    (Abs \\<tau>' t) \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bv (Fv x \\<tau>') s)\n                                    (subst_bv (Fv x \\<tau>') t)", "by simp"], ["", "lemma proves_beta_step_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes free: \"\\<forall>(x,\\<tau>) \\<in> set vs . (x,\\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\"\n  assumes term_ok': \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) t)\"\n  assumes beta: \"t \\<rightarrow>\\<^sub>\\<beta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq\n    (subst_bvs (map (case_prod Fv) vs) t)\n    (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "using beta term_ok' free"], ["proof (prove)\nusing this:\n  t \\<rightarrow>\\<^sub>\\<beta> u\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<forall>(x, \\<tau>)\\<in>set vs.\n     (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "proof(induction t u arbitrary: vs rule: beta.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (beta T s t)"], ["proof (state)\nthis:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s $ t))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have ok: \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) (Abs T s))\"\n    \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s)) &&&\n    term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)", "using beta.prems(1)"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s $ t))\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s)) &&&\n    term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)", "apply simp_all"], ["proof (prove)\ngoal (2 subgoals):\n 1. wt_term (sig \\<Theta>)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) $\n      subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) \\<Longrightarrow>\n    wt_term (sig \\<Theta>)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n 2. wt_term (sig \\<Theta>)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) $\n      subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) \\<Longrightarrow>\n    wt_term (sig \\<Theta>) (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)", "using term_ok_app_eqD term_ok_def"], ["proof (prove)\nusing this:\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n\ngoal (2 subgoals):\n 1. wt_term (sig \\<Theta>)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) $\n      subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) \\<Longrightarrow>\n    wt_term (sig \\<Theta>)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n 2. wt_term (sig \\<Theta>)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) $\n      subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) \\<Longrightarrow>\n    wt_term (sig \\<Theta>) (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)", "by blast+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>x \\<in> set (map (case_prod Fv) vs) . is_closed x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x", "using beta.prems(2)"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence simp: \"subst_bvs (map (case_prod Fv) vs) (Abs T s)\n    = Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x\n\ngoal (1 subgoal):\n 1. subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) =\n    Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "by auto"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ok': \"term_ok \\<Theta> (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\nusing this:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "using ok"], ["proof (prove)\nusing this:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "by simp"], ["proof (state)\nthis:\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have T: \"typ_of (subst_bvs (map (case_prod Fv) vs) t) = Some T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) = Some T", "using ok(2) wt_term_def typ_of_beta_redex_arg simp"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of (Abs ?T ?s $ ?t) \\<noteq> None \\<Longrightarrow>\n  typ_of ?t = Some ?T\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (1 subgoal):\n 1. typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) = Some T", "using beta.prems(1) subst_bvs_App"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of (Abs ?T ?s $ ?t) \\<noteq> None \\<Longrightarrow>\n  typ_of ?t = Some ?T\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s $ t))\n  subst_bvs ?args (?s $ ?t) = subst_bvs ?args ?s $ subst_bvs ?args ?t\n\ngoal (1 subgoal):\n 1. typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) = Some T", "by (metis term_okD2)"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) = Some T\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have ok_unf: \"wt_term (sig \\<Theta>) (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\"\n    \"wf_term (sig \\<Theta>) (subst_bvs (map (case_prod Fv) vs) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wt_term (sig \\<Theta>)\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))) &&&\n    wf_term (sig \\<Theta>) (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)", "using ok(2) ok' wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. wt_term (sig \\<Theta>)\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))) &&&\n    wf_term (sig \\<Theta>) (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)", "by simp_all"], ["proof (state)\nthis:\n  wt_term (sig \\<Theta>)\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n  wf_term (sig \\<Theta>) (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> term.Fv a b) vs)\n              (Abs T s $ t) = \n  Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)) $ subst_bvs (map (case_prod Fv) vs) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s $ t) =\n    Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) $\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t", "by (simp add: simp)"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n   (Abs T s $ t) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) $\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n   (Abs T s $ t) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) $\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"subst_bvs (map (case_prod Fv) vs) (subst_bv2 s 0 t)\n    = (subst_bv (subst_bvs (map (case_prod Fv) vs) t)\n              (subst_bvs1' s 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (subst_bv2 s 0 t) =\n    subst_bv (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "using subst_bvs1'_subst_bv2[symmetric] subst_bvs_subst_bvs1'"], ["proof (prove)\nusing this:\n  ?i < ?j + 1 \\<Longrightarrow>\n  subst_bvs1' (subst_bv2 ?t ?i ?u) ?j ?vs =\n  subst_bv2 (subst_bvs1' ?t (Suc ?j) (map (\\<lambda>v. lift v ?i) ?vs)) ?i\n   (subst_bvs1' ?u ?j ?vs)\n  subst_bvs ?s ?t = subst_bvs1' ?t 0 ?s\n\ngoal (1 subgoal):\n 1. subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (subst_bv2 s 0 t) =\n    subst_bv (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "by simp (metis One_nat_def Suc_eq_plus1 map_map simp subst_bvs1.simps(2) subst_bvs1_subst_bvs1' \n        subst_bvs_def substn_subst_0' term.inject(4))"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (subst_bv2 s 0 t) =\n  subst_bv (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n   (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (4 subgoals):\n 1. \\<And>T s t vs.\n       \\<lbrakk>term_ok \\<Theta>\n                 (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                   (Abs T s $ t));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T s $ t) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T s $ t))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (subst_bv2 s 0 t))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n   (Abs T s $ t) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) $\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (subst_bv2 s 0 t) =\n  subst_bv (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n   (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "show ?case"], ["proof (prove)\nusing this:\n  subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n   (Abs T s $ t) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) $\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (subst_bv2 s 0 t) =\n  subst_bv (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n   (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T s $ t))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n(subst_bv2 s 0 t))", "using \\<beta>_conversion[OF thy ok_unf, of \\<Gamma>] T"], ["proof (prove)\nusing this:\n  subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n   (Abs T s $ t) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) $\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (subst_bv2 s 0 t) =\n  subst_bv (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n   (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  \\<turnstile>\\<^sub>\\<tau> subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                             t : T \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)) $\n                                   subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n                                  (subst_bv\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t) = Some T\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T s $ t))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n(subst_bv2 s 0 t))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (Abs T s $ t))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (subst_bv2 s 0 t))\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (appL s t u)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ok: \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) s)\"\n            \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) &&&\n    term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)", "by (metis subst_bvs_App term_ok_app_eqD)+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>a \\<in> set vs. case a of (x, \\<tau>) \\<Rightarrow> (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using appL"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) s)\n            (subst_bvs (map (case_prod Fv) vs) t)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "using appL.IH"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) u)\n      (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "using proves_eq_reflexive[OF thy ok(2), of \\<Gamma>, OF finite ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau> where \\<tau>: \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) u) = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ok wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau>' where \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) s) = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<tau> appL.prems(1) not_None_eq subst_bvs_App wt_term_def typ_of1_arg_typ typ_of_def"], ["proof (prove)\nusing this:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  (?x \\<noteq> None) = (\\<exists>y. ?x = Some y)\n  subst_bvs ?args (?s $ ?t) = subst_bvs ?args ?s $ subst_bvs ?args ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of1 ?Ts (?t $ ?u) = Some ?R;\n   typ_of1 ?Ts ?u = Some ?U\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts ?t = Some (?U \\<rightarrow> ?R)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis term_okD2)"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (s $ u))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (t $ u))", "using proves_eq_combination_rule_better thy finite ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?f ?g;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?x ?y;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>');\n   typ_of ?x = Some ?\\<tau>; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (?f $ ?x)\n                (?g $ ?y)\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (s $ u))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (t $ u))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (s $ u))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (t $ u))\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (appR s t u)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ok: \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) s)\"\n            \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) &&&\n    term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)", "by (metis subst_bvs_App term_ok_app_eqD)+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>a \\<in> set vs. case a of (x, \\<tau>) \\<Rightarrow> (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using appR"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) s)\n            (subst_bvs (map (case_prod Fv) vs) t)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "using appR.IH"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) u)\n      (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "using proves_eq_reflexive[OF thy ok(2), of \\<Gamma>, OF finite ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau> where \\<tau>: \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) s) = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ok wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau>' where \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) u) = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<tau> appR.prems(1) not_None_eq subst_bvs_App wt_term_def typ_of1_arg_typ typ_of_def"], ["proof (prove)\nusing this:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  (?x \\<noteq> None) = (\\<exists>y. ?x = Some y)\n  subst_bvs ?args (?s $ ?t) = subst_bvs ?args ?s $ subst_bvs ?args ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of1 ?Ts (?t $ ?u) = Some ?R;\n   typ_of1 ?Ts ?u = Some ?U\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts ?t = Some (?U \\<rightarrow> ?R)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis term_okD2)"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ t))", "using proves_eq_combination_rule_better thy finite ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?f ?g;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?x ?y;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>');\n   typ_of ?x = Some ?\\<tau>; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (?f $ ?x)\n                (?g $ ?y)\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ t))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (u $ s))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (u $ t))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (abs s t T)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<beta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>a \\<in> set vs. case a of (x, \\<tau>) \\<Rightarrow> (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using abs.prems(2)"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>v\\<in>set (map (case_prod Fv) vs) . is_closed v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence simp: \"mk_eq (subst_bvs (map (case_prod Fv) vs) (Abs T s))\n            (subst_bvs (map (case_prod Fv) vs) (Abs T t))\n    = mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n            (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n\ngoal (1 subgoal):\n 1. mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n    mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n     (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "by simp"], ["proof (state)\nthis:\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have T_ok: \"typ_ok \\<Theta> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> T", "using abs.prems term_ok_Types_typ_ok simp thy"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t;\n   ?\\<tau> \\<in> Types ?t\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?\\<Theta> ?\\<tau>\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> T", "by auto"], ["proof (state)\nthis:\n  typ_ok \\<Theta> T\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have 1: \"finite (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n          (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))) \\<union> FV \\<Gamma> \\<union> fv s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s)", "using finite finite_fv finite_FV"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  finite (fv ?t)\n  finite ?S \\<Longrightarrow> finite (FV ?S)\n\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s)", "by simp"], ["proof (state)\nthis:\n  finite\n   (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n         (Abs T\n           (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n    FV \\<Gamma> \\<union>\n    fv s)\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence \"\\<exists>x . (x,T) \\<notin> (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n          (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))) \\<union> FV \\<Gamma> \\<union> fv s)\""], ["proof (prove)\nusing this:\n  finite\n   (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n         (Abs T\n           (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n    FV \\<Gamma> \\<union>\n    fv s)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s) \\<Longrightarrow>\n    \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "have \"\\<And>v t P. (v, t) \\<notin> P \\<or> v \\<in> fst ` P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v t P. (v, t) \\<notin> P \\<or> v \\<in> fst ` P", "by (metis (no_types) fst_conv image_eqI)"], ["proof (state)\nthis:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P\n\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s) \\<Longrightarrow>\n    \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "then"], ["proof (chain)\npicking this:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P", "show ?thesis"], ["proof (prove)\nusing this:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "using 1 variant_variable_fresh finite_Un finite_imageI fst_conv image_eqI"], ["proof (prove)\nusing this:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P\n  finite\n   (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n         (Abs T\n           (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n    FV \\<Gamma> \\<union>\n    fv s)\n  finite ?S \\<Longrightarrow> fst (variant_variable ?s ?S) \\<notin> ?S\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n  finite ?F \\<Longrightarrow> finite (?h ` ?F)\n  fst (?x1.0, ?x2.0) = ?x1.0\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "by smt"], ["proof (state)\nthis:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "from this"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s", "obtain x where x: \"(x,T) \\<notin> (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n          (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))) \\<union> FV \\<Gamma> \\<union> fv s)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (x, T)\n        \\<notin> fv (mk_eq\n                      (Abs T\n                        (subst_bvs1' s 1\n                          (map (\\<lambda>(x, y). Fv x y) vs)))\n                      (Abs T\n                        (subst_bvs1' t 1\n                          (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                 FV \\<Gamma> \\<union>\n                 fv s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1\n                    (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n           FV \\<Gamma> \\<union>\n           fv s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence x: \"(x, T) \\<notin> fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n            (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs))))\"\n      \"(x,T) \\<notin> FV \\<Gamma>\" \"(x, T) \\<notin> fv s\""], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1\n                    (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n           FV \\<Gamma> \\<union>\n           fv s\n\ngoal (1 subgoal):\n 1. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1\n                      (map (\\<lambda>(x, y). Fv x y) vs)))) &&&\n    (x, T) \\<notin> FV \\<Gamma> &&& (x, T) \\<notin> fv s", "by auto"], ["proof (state)\nthis:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have ok: \"term_ok \\<Theta> (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "using abs.prems(1) simp"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s))\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "by auto"], ["proof (state)\nthis:\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "thm subst_bvs_extend_lower_level"], ["proof (state)\nthis:\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have combine: \"(subst_bv (term.Fv x T)\n              (subst_bvs1' s 1 (map (\\<lambda>(x, y). term.Fv x y) vs))) = \n      (subst_bvs (map (case_prod Fv) ((x,T)#vs)) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s", "using subst_bvs_extend_lower_level"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (?a # ?args). is_closed x \\<Longrightarrow>\n  subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s", "using \\<open>\\<forall>v\\<in>set (map (\\<lambda>(x, y). term.Fv x y) vs). is_closed v\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (?a # ?args). is_closed x \\<Longrightarrow>\n  subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s", "by auto"], ["proof (state)\nthis:\n  subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have 1: \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) ((x,T)#vs)) s)\n        (subst_bvs (map (case_prod Fv) ((x,T)#vs)) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) t)", "apply(rule abs.IH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. term_ok \\<Theta>\n     (subst_bvs\n       (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n         ((x, T) # vs))\n       s)\n 2. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using ok"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (2 subgoals):\n 1. term_ok \\<Theta>\n     (subst_bvs\n       (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n         ((x, T) # vs))\n       s)\n 2. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "apply (metis combine term_ok_subst_bv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using x abs.prems(2)"], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    t)\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n    (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (Abs T\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (Abs T\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "apply (rule proves_ascend_abs_rule'[where x=x])"], ["proof (prove)\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. (x, T) \\<notin> FV \\<Gamma>\n 3. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 4. typ_ok \\<Theta> T\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. (x, T) \\<notin> FV \\<Gamma>\n 3. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 4. typ_ok \\<Theta> T\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. (x, T) \\<notin> FV \\<Gamma>\n 2. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 3. typ_ok \\<Theta> T\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 5. finite \\<Gamma>\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using x"], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n\ngoal (7 subgoals):\n 1. (x, T) \\<notin> FV \\<Gamma>\n 2. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 3. typ_ok \\<Theta> T\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 5. finite \\<Gamma>\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 2. typ_ok \\<Theta> T\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 4. finite \\<Gamma>\n 5. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 6. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using x"], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n\ngoal (6 subgoals):\n 1. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 2. typ_ok \\<Theta> T\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 4. finite \\<Gamma>\n 5. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 6. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. typ_ok \\<Theta> T\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 3. finite \\<Gamma>\n 4. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 5. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using T_ok"], ["proof (prove)\nusing this:\n  typ_ok \\<Theta> T\n\ngoal (5 subgoals):\n 1. typ_ok \\<Theta> T\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 3. finite \\<Gamma>\n 4. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 5. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 2. finite \\<Gamma>\n 3. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 4. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using 1  \\<open>\\<forall>v\\<in>set (map (\\<lambda>(x, y). term.Fv x y) vs). is_closed v\\<close> subst_bvs_extend_lower_level \n      finite ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    t)\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n  \\<forall>x\\<in>set (?a # ?args). is_closed x \\<Longrightarrow>\n  subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 2. finite \\<Gamma>\n 3. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 4. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<beta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "then"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T t))", "using simp"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T t))", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (Abs T s))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (Abs T t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subst_bvs_empty[simp]: \"subst_bvs [] t = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bvs [] t = t", "by (simp add: subst_bvs_subst_bvs1')"], ["", "lemma proves_beta_step:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes beta: \"t \\<rightarrow>\\<^sub>\\<beta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "have unsimpt: \"t = subst_bvs (map (case_prod Fv) []) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t", "by simp"], ["proof (state)\nthis:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "moreover"], ["proof (state)\nthis:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "have unsimpu: \"u = subst_bvs (map (case_prod Fv) []) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u", "by simp"], ["proof (state)\nthis:\n  u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "ultimately"], ["proof (chain)\npicking this:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n  u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u", "have unsimp: \"mk_eq t u = mk_eq \n    (subst_bvs (map (case_prod Fv) []) t)\n    (subst_bvs (map (case_prod Fv) []) u)\""], ["proof (prove)\nusing this:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n  u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u\n\ngoal (1 subgoal):\n 1. mk_eq t u =\n    mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u)", "by simp"], ["proof (state)\nthis:\n  mk_eq t u =\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "apply (subst unsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) []) t)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) []) u)", "apply (rule proves_beta_step_pre)"], ["proof (prove)\ngoal (7 subgoals):\n 1. wf_theory \\<Theta>\n 2. finite \\<Gamma>\n 3. \\<forall>(x, \\<tau>)\\<in>set [].\n       (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\n 4. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n 5. t \\<rightarrow>\\<^sub>\\<beta> u\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  term_ok \\<Theta> t\n  t \\<rightarrow>\\<^sub>\\<beta> u\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (7 subgoals):\n 1. wf_theory \\<Theta>\n 2. finite \\<Gamma>\n 3. \\<forall>(x, \\<tau>)\\<in>set [].\n       (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\n 4. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n 5. t \\<rightarrow>\\<^sub>\\<beta> u\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by simp_all"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_beta_steps:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes beta: \"t \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "using beta term_ok"], ["proof (prove)\nusing this:\n  t \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* u\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "proof (induction rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       term_ok \\<Theta> a \\<Longrightarrow>\n       \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "case (rtrancl_refl a)"], ["proof (state)\nthis:\n  term_ok \\<Theta> a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       term_ok \\<Theta> a \\<Longrightarrow>\n       \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "then"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> a", "show ?case"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> a\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a", "using finite ctxt"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> a\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a", "by (simp add: proves_eq_reflexive thy)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "case (rtrancl_into_rtrancl a b c)"], ["proof (state)\nthis:\n  a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b\n  b \\<rightarrow>\\<^sub>\\<beta> c\n  term_ok \\<Theta> a \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  term_ok \\<Theta> a\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "hence \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\""], ["proof (prove)\nusing this:\n  a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b\n  b \\<rightarrow>\\<^sub>\\<beta> c\n  term_ok \\<Theta> a \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  term_ok \\<Theta> a\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "using proves_beta_step rtrancl_into_rtrancl.hyps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>; term_ok ?\\<Theta> ?t;\n   ?t \\<rightarrow>\\<^sub>\\<beta> ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?t ?u\n  b \\<rightarrow>\\<^sub>\\<beta> c\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "using beta_star_preserves_term_ok local.finite rtrancl_into_rtrancl.hyps(1)\n      rtrancl_into_rtrancl.prems thy finite ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>; term_ok ?\\<Theta> ?t;\n   ?t \\<rightarrow>\\<^sub>\\<beta> ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?t ?u\n  b \\<rightarrow>\\<^sub>\\<beta> c\n  \\<lbrakk>?r \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* ?s;\n   term_ok ?thy ?r\\<rbrakk>\n  \\<Longrightarrow> term_ok ?thy ?s\n  finite \\<Gamma>\n  a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b\n  term_ok \\<Theta> a\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<beta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<beta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "by (meson finite ctxt proved_terms_well_formed(2) proves_eq_transitive_rule[OF thy _ _ _ _ _ _ _ finite ctxt]\n        term_ok_mk_eqD term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_beta_norm:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes beta: \"beta_norm t = Some u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "using finite ctxt"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "by (simp add: beta_norm_imp_beta_reds local.beta local.finite proves_beta_steps term_ok thy\n      del: term_ok_def)"], ["", "lemma beta_norm_preserves_proves:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"\\<Theta>, \\<Gamma> \\<turnstile> t\"\n  assumes beta: \"beta_norm t = Some u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> u", "using assms proves_eq_mp_rule_better[OF thy _ _ finite ctxt] proves_beta_norm[OF thy finite _ _ ctxt]\n    proved_terms_well_formed(2)"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<Theta>,\\<Gamma> \\<turnstile> t\n  beta_norm t = Some u\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?A ?B;\n   \\<Theta>,\\<Gamma> \\<turnstile> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> ?B\n  \\<lbrakk>term_ok \\<Theta> ?t; beta_norm ?t = Some ?u\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?t ?u\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> u", "by blast"], ["", "lemma proves_eta_step_pre:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes free: \"\\<forall>(x,\\<tau>) \\<in> set vs . (x,\\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\"\n  assumes term_ok': \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) t)\"\n  assumes eta: \"t \\<rightarrow>\\<^sub>\\<eta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq\n    (subst_bvs (map (case_prod Fv) vs) t)\n    (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "using eta term_ok' free"], ["proof (prove)\nusing this:\n  t \\<rightarrow>\\<^sub>\\<eta> u\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<forall>(x, \\<tau>)\\<in>set vs.\n     (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "proof(induction t u arbitrary: vs rule: eta.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (eta s T)"], ["proof (state)\nthis:\n  \\<not> is_dependent s\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T (s $ Bv 0)))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have closeds: \"\\<forall>x \\<in> set (map (case_prod Fv) vs) . is_closed x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x", "using eta.prems(2)"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence simp: \"subst_bvs (map (case_prod Fv) vs) (Abs T (s $ Bv 0))\n    = Abs T (subst_bvs1' (s $ Bv 0) 1 (map (case_prod Fv) vs))\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed x\n\ngoal (1 subgoal):\n 1. subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n    Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))", "by auto"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence simp': \"subst_bvs (map (case_prod Fv) vs) (Abs T (s $ Bv 0))\n    = Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs) $ Bv 0)\""], ["proof (prove)\nusing this:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (1 subgoal):\n 1. subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n    Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs) $ Bv 0)", "by auto"], ["proof (state)\nthis:\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs) $ Bv 0)\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have closed: \"is_closed (subst_bvs (map (case_prod Fv) vs) (Abs T (s $ Bv 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_closed\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)))", "using eta(2) wt_term_def typ_of_imp_closed"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T (s $ Bv 0)))\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. is_closed\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)))", "by auto"], ["proof (state)\nthis:\n  is_closed\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)))\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence no_loose1: \"\\<not> loose_bvar (subst_bvs1' s 1 (map (case_prod Fv) vs)) 1\""], ["proof (prove)\nusing this:\n  is_closed\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)))\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) 1", "unfolding is_open_def"], ["proof (prove)\nusing this:\n  \\<not> loose_bvar\n          (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)))\n          0\n\ngoal (1 subgoal):\n 1. \\<not> loose_bvar (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) 1", "by (metis One_nat_def Suc_eq_plus1 loose_bvar.simps(2) loose_bvar.simps(3) simp subst_bvs1'.simps(3))"], ["proof (state)\nthis:\n  \\<not> loose_bvar (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) 1\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have not_dependent: \"\\<not> is_dependent (subst_bvs1' s 1 (map (case_prod Fv) vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> is_dependent (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "using is_closed_subst_bvs1'_closeds"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> is_dependent ?t;\n   \\<forall>x\\<in>set ?us. is_closed x\\<rbrakk>\n  \\<Longrightarrow> \\<not> is_dependent (subst_bvs1' ?t (Suc ?k) ?us)\n\ngoal (1 subgoal):\n 1. \\<not> is_dependent (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "by (simp add: closeds eta.hyps)"], ["proof (state)\nthis:\n  \\<not> is_dependent (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have decr_simp: \"subst_bv x (subst_bvs1' s 1 (map (case_prod Fv) vs))\n    = subst_bvs (map (case_prod Fv) vs) (decr 0 s)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv x (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s)", "apply (simp add: closeds eta.hyps subst_bvs_decr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv x (subst_bvs1' s (Suc 0) (map (\\<lambda>(x, y). Fv x y) vs)) =\n    decr 0 (subst_bvs1' s (Suc 0) (map (\\<lambda>(x, y). Fv x y) vs))", "using is_dependent_def no_loose_bvar1_subst_bv2_decr not_dependent substn_subst_0'"], ["proof (prove)\nusing this:\n  is_dependent ?t \\<equiv> loose_bvar1 ?t 0\n  \\<not> loose_bvar1 ?t ?i \\<Longrightarrow> subst_bv2 ?t ?i ?x = decr ?i ?t\n  \\<not> is_dependent (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  subst_bv ?s ?t = subst_bv2 ?t 0 ?s\n\ngoal (1 subgoal):\n 1. subst_bv x (subst_bvs1' s (Suc 0) (map (\\<lambda>(x, y). Fv x y) vs)) =\n    decr 0 (subst_bvs1' s (Suc 0) (map (\\<lambda>(x, y). Fv x y) vs))", "by auto"], ["proof (state)\nthis:\n  subst_bv ?x (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s)\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have ok: \"term_ok \\<Theta> (subst_bvs1' s 1 (map (case_prod Fv) vs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "by (metis One_nat_def Suc_leI eta.prems(1) is_dependent_def le_eq_less_or_eq\n      loose_bvar_decr_unchanged loose_bvar_iff_exist_loose_bvar1 no_loose1 not_dependent simp' \n      term_ok_eta_red_step)"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ok_ind: \"wf_term (sig \\<Theta>) (subst_bvs1' s 1 (map (case_prod Fv) vs))\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>)\n     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "using wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>)\n     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))", "by simp"], ["proof (state)\nthis:\n  wf_term (sig \\<Theta>)\n   (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau> where \"typ_of (Abs T (subst_bvs1' (s $ Bv 0) 1 (map (case_prod Fv) vs))) = Some (T \\<rightarrow> \\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of\n         (Abs T\n           (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))) =\n        Some (T \\<rightarrow> \\<tau>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using eta.prems(1) simp wt_term_def typ_of_Abs_body_typ'"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T (s $ Bv 0)))\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of1 ?Ts (Abs ?T ?t) = Some ?ty \\<Longrightarrow>\n  \\<exists>rty.\n     ?ty = ?T \\<rightarrow> rty \\<and> typ_of1 (?T # ?Ts) ?t = Some rty\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of\n         (Abs T\n           (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))) =\n        Some (T \\<rightarrow> \\<tau>) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (smt has_typ_iff_typ_of typ_of_def term_ok_def)"], ["proof (state)\nthis:\n  typ_of\n   (Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))) =\n  Some (T \\<rightarrow> \\<tau>)\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ty: \"typ_of (subst_bvs1' s 1 (map (case_prod Fv) vs)) = Some (T \\<rightarrow> \\<tau>)\""], ["proof (prove)\nusing this:\n  typ_of\n   (Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))) =\n  Some (T \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    Some (T \\<rightarrow> \\<tau>)", "using eta.eta eta_preserves_typ_of is_closed_decr_unchanged not_dependent\n        ok simp simp' wt_term_def typ_of_imp_closed"], ["proof (prove)\nusing this:\n  typ_of\n   (Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))) =\n  Some (T \\<rightarrow> \\<tau>)\n  \\<not> is_dependent ?s \\<Longrightarrow>\n  Abs ?T (?s $ Bv 0) \\<rightarrow>\\<^sub>\\<eta> decr 0 ?s\n  \\<lbrakk>?t \\<rightarrow>\\<^sub>\\<eta> ?t';\n   typ_of ?t = Some ?\\<tau>\\<rbrakk>\n  \\<Longrightarrow> typ_of ?t' = Some ?\\<tau>\n  is_closed ?t \\<Longrightarrow> decr 0 ?t = ?t\n  \\<not> is_dependent (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  term_ok \\<Theta> (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' (s $ Bv 0) 1 (map (\\<lambda>(x, y). Fv x y) vs))\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs) $ Bv 0)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    Some (T \\<rightarrow> \\<tau>)", "by (metis (no_types, lifting) has_typ_imp_closed term_ok_def)"], ["proof (state)\nthis:\n  typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  Some (T \\<rightarrow> \\<tau>)\n\ngoal (4 subgoals):\n 1. \\<And>s T vs.\n       \\<lbrakk>\\<not> is_dependent s;\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>)\n           \\<notin> fv (Abs T (s $ Bv 0)) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs)\n                     (Abs T (s $ Bv 0)))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 3. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 4. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "then"], ["proof (chain)\npicking this:\n  typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  Some (T \\<rightarrow> \\<tau>)", "show ?case"], ["proof (prove)\nusing this:\n  typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  Some (T \\<rightarrow> \\<tau>)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n(Abs T (s $ Bv 0)))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (decr 0 s))", "using proves.eta[OF thy ok_ind, of _ _ \\<Gamma>] ty decr_simp simp'"], ["proof (prove)\nusing this:\n  typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  Some (T \\<rightarrow> \\<tau>)\n  \\<turnstile>\\<^sub>\\<tau> subst_bvs1' s 1\n                             (map (\\<lambda>(x, y). Fv x y)\n                               vs) : ?\\<tau> \\<rightarrow>\n                                     ?\\<tau>' \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs ?\\<tau>\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs) $\n                                     Bv 0))\n                                  (subst_bvs1' s 1\n                                    (map (\\<lambda>(x, y). Fv x y) vs))\n  typ_of (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  Some (T \\<rightarrow> \\<tau>)\n  subst_bv ?x (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (decr 0 s)\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T (s $ Bv 0)) =\n  Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs) $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n(Abs T (s $ Bv 0)))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (decr 0 s))", "by (simp add: closeds eta.hyps subst_bvs_decr typ_of_imp_closed)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (Abs T (s $ Bv 0)))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (decr 0 s))\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (appL s t u)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ok: \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) s)\"\n            \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) &&&\n    term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)", "by (metis subst_bvs_App term_ok_app_eqD)+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>a \\<in> set vs. case a of (x, \\<tau>) \\<Rightarrow> (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using appL"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) s)\n            (subst_bvs (map (case_prod Fv) vs) t)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "using appL.IH"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) u)\n      (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "using proves_eq_reflexive[OF thy ok(2), of \\<Gamma>, OF finite ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau> where \\<tau>: \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) u) = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ok wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau>' where \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) s) = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<tau> appL.prems(1) not_None_eq subst_bvs_App wt_term_def typ_of1_arg_typ typ_of_def"], ["proof (prove)\nusing this:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (s $ u))\n  (?x \\<noteq> None) = (\\<exists>y. ?x = Some y)\n  subst_bvs ?args (?s $ ?t) = subst_bvs ?args ?s $ subst_bvs ?args ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of1 ?Ts (?t $ ?u) = Some ?R;\n   typ_of1 ?Ts ?u = Some ?U\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts ?t = Some (?U \\<rightarrow> ?R)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (smt has_typ_iff_typ_of typ_of_def term_ok_def)"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (3 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (s $ u) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (s $ u))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (t $ u))\n 2. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 3. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (s $ u))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (t $ u))", "using proves_eq_combination_rule_better thy finite ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?f ?g;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?x ?y;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>');\n   typ_of ?x = Some ?\\<tau>; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (?f $ ?x)\n                (?g $ ?y)\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (s $ u))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (t $ u))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (s $ u))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (t $ u))\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (appR s t u)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence ok: \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) s)\"\n            \"term_ok \\<Theta> (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) &&&\n    term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)", "by (metis subst_bvs_App term_ok_app_eqD)+"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>a \\<in> set vs. case a of (x, \\<tau>) \\<Rightarrow> (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using appR"], ["proof (prove)\nusing this:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) s)\n            (subst_bvs (map (case_prod Fv) vs) t)\""], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "using appR.IH"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) t)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) vs) u)\n      (subst_bvs (map (case_prod Fv) vs) u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "using proves_eq_reflexive[OF thy ok(2), of \\<Gamma>, OF finite ctxt]"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) vs) u)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau> where \\<tau>: \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) s) = Some \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ok wt_term_def"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n  term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) =\n        Some \\<tau> \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "moreover"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "obtain \\<tau>' where \"typ_of \n    (subst_bvs (map (case_prod Fv) vs) u) = Some (\\<tau> \\<rightarrow> \\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \\<tau> appR.prems(1) not_None_eq subst_bvs_App wt_term_def typ_of1_arg_typ typ_of_def"], ["proof (prove)\nusing this:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (u $ s))\n  (?x \\<noteq> None) = (\\<exists>y. ?x = Some y)\n  subst_bvs ?args (?s $ ?t) = subst_bvs ?args ?s $ subst_bvs ?args ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n  \\<lbrakk>typ_of1 ?Ts (?t $ ?u) = Some ?R;\n   typ_of1 ?Ts ?u = Some ?U\\<rbrakk>\n  \\<Longrightarrow> typ_of1 ?Ts ?t = Some (?U \\<rightarrow> ?R)\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (1 subgoal):\n 1. (\\<And>\\<tau>'.\n        typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n        Some (\\<tau> \\<rightarrow> \\<tau>') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis term_okD2)"], ["proof (state)\nthis:\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (2 subgoals):\n 1. \\<And>s t u vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (u $ s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (u $ t))\n 2. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ t))", "using proves_eq_combination_rule_better thy finite ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) t)\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u)))\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y) vs) u)\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s) = Some \\<tau>\n  typ_of (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) u) =\n  Some (\\<tau> \\<rightarrow> \\<tau>')\n  \\<lbrakk>wf_theory ?\\<Theta>;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?f ?g;\n   ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?x ?y;\n   typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>');\n   typ_of ?x = Some ?\\<tau>; finite ?\\<Gamma>;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq (?f $ ?x)\n                (?g $ ?y)\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (u $ t))", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (u $ s))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (u $ t))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "case (abs s t T)"], ["proof (state)\nthis:\n  s \\<rightarrow>\\<^sub>\\<eta> t\n  \\<lbrakk>term_ok \\<Theta>\n            (subst_bvs\n              (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) ?vs)\n              s);\n   \\<forall>a\\<in>set ?vs.\n      case a of\n      (x, \\<tau>) \\<Rightarrow>\n        (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                s)\n              (subst_bvs\n                (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n                  ?vs)\n                t)\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>a \\<in> set vs. case a of (x, \\<tau>) \\<Rightarrow> (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using abs.prems(2)"], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set vs.\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<forall>v\\<in>set (map (case_prod Fv) vs) . is_closed v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v", "by auto"], ["proof (state)\nthis:\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence simp: \"mk_eq (subst_bvs (map (case_prod Fv) vs) (Abs T s))\n            (subst_bvs (map (case_prod Fv) vs) (Abs T t))\n    = mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n            (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\nusing this:\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n\ngoal (1 subgoal):\n 1. mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n    mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n     (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "by simp"], ["proof (state)\nthis:\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have T_ok: \"typ_ok \\<Theta> T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> T", "using abs.prems term_ok_Types_typ_ok simp thy"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s))\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n  \\<lbrakk>wf_theory ?\\<Theta>; term_ok ?\\<Theta> ?t;\n   ?\\<tau> \\<in> Types ?t\\<rbrakk>\n  \\<Longrightarrow> typ_ok ?\\<Theta> ?\\<tau>\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. typ_ok \\<Theta> T", "by auto"], ["proof (state)\nthis:\n  typ_ok \\<Theta> T\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have 1: \"finite (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n          (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))) \\<union> FV \\<Gamma> \\<union> fv s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s)", "using finite finite_fv finite_FV"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  finite (fv ?t)\n  finite ?S \\<Longrightarrow> finite (FV ?S)\n\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s)", "by simp"], ["proof (state)\nthis:\n  finite\n   (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n         (Abs T\n           (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n    FV \\<Gamma> \\<union>\n    fv s)\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence \"\\<exists>x . (x,T) \\<notin> (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n          (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))) \\<union> FV \\<Gamma> \\<union> fv s)\""], ["proof (prove)\nusing this:\n  finite\n   (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n         (Abs T\n           (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n    FV \\<Gamma> \\<union>\n    fv s)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s) \\<Longrightarrow>\n    \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "have \"\\<And>v t P. (v::variable, t::typ) \\<notin> P \\<or> v \\<in> fst ` P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>v t P. (v, t) \\<notin> P \\<or> v \\<in> fst ` P", "by (metis (no_types) fst_conv image_eqI)"], ["proof (state)\nthis:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P\n\ngoal (1 subgoal):\n 1. finite\n     (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n           (Abs T\n             (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n      FV \\<Gamma> \\<union>\n      fv s) \\<Longrightarrow>\n    \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "then"], ["proof (chain)\npicking this:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P", "show ?thesis"], ["proof (prove)\nusing this:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "using 1 variant_variable_fresh finite_Un finite_imageI fst_conv image_eqI"], ["proof (prove)\nusing this:\n  (?v, ?t) \\<notin> ?P \\<or> ?v \\<in> fst ` ?P\n  finite\n   (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n         (Abs T\n           (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n    FV \\<Gamma> \\<union>\n    fv s)\n  finite ?S \\<Longrightarrow> fst (variant_variable ?s ?S) \\<notin> ?S\n  finite (?F \\<union> ?G) = (finite ?F \\<and> finite ?G)\n  finite ?F \\<Longrightarrow> finite (?h ` ?F)\n  fst (?x1.0, ?x2.0) = ?x1.0\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       (x, T)\n       \\<notin> fv (mk_eq\n                     (Abs T\n                       (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                     (Abs T\n                       (subst_bvs1' t 1\n                         (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                FV \\<Gamma> \\<union>\n                fv s", "by smt"], ["proof (state)\nthis:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "from this"], ["proof (chain)\npicking this:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s", "obtain x where x: \"(x,T) \\<notin> (fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n          (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))) \\<union> FV \\<Gamma> \\<union> fv s)\""], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (x, T)\n     \\<notin> fv (mk_eq\n                   (Abs T\n                     (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                   (Abs T\n                     (subst_bvs1' t 1\n                       (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n              FV \\<Gamma> \\<union>\n              fv s\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        (x, T)\n        \\<notin> fv (mk_eq\n                      (Abs T\n                        (subst_bvs1' s 1\n                          (map (\\<lambda>(x, y). Fv x y) vs)))\n                      (Abs T\n                        (subst_bvs1' t 1\n                          (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n                 FV \\<Gamma> \\<union>\n                 fv s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1\n                    (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n           FV \\<Gamma> \\<union>\n           fv s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "hence x: \"(x, T) \\<notin> fv (mk_eq (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n            (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs))))\"\n      \"(x,T) \\<notin> FV \\<Gamma>\" \"(x, T) \\<notin> fv s\""], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1\n                    (map (\\<lambda>(x, y). Fv x y) vs)))) \\<union>\n           FV \\<Gamma> \\<union>\n           fv s\n\ngoal (1 subgoal):\n 1. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1\n                      (map (\\<lambda>(x, y). Fv x y) vs)))) &&&\n    (x, T) \\<notin> FV \\<Gamma> &&& (x, T) \\<notin> fv s", "by auto"], ["proof (state)\nthis:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have ok: \"term_ok \\<Theta> (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "using abs.prems(1) simp"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (subst_bvs (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n     (Abs T s))\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "by auto"], ["proof (state)\nthis:\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have combine: \"(subst_bv (Fv x T)\n              (subst_bvs1' s 1 (map (case_prod Fv) vs))) = \n      (subst_bvs (map (case_prod Fv) ((x,T)#vs)) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s", "using subst_bvs_extend_lower_level"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (?a # ?args). is_closed x \\<Longrightarrow>\n  subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s", "using \\<open>\\<forall>v\\<in>set (map (\\<lambda>(x, y). term.Fv x y) vs). is_closed v\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set (?a # ?args). is_closed x \\<Longrightarrow>\n  subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n\ngoal (1 subgoal):\n 1. subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n    subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s", "by auto"], ["proof (state)\nthis:\n  subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have 1: \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq (subst_bvs (map (case_prod Fv) ((x,T)#vs)) s)\n        (subst_bvs (map (case_prod Fv) ((x,T)#vs)) t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) t)", "apply(rule abs.IH)"], ["proof (prove)\ngoal (2 subgoals):\n 1. term_ok \\<Theta>\n     (subst_bvs\n       (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n         ((x, T) # vs))\n       s)\n 2. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using ok combine"], ["proof (prove)\nusing this:\n  term_ok \\<Theta>\n   (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n  subst_bv (Fv x T) (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)) =\n  subst_bvs (map (\\<lambda>(x, y). Fv x y) ((x, T) # vs)) s\n\ngoal (2 subgoals):\n 1. term_ok \\<Theta>\n     (subst_bvs\n       (map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b)\n         ((x, T) # vs))\n       s)\n 2. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "apply (metis term_ok_subst_bv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "using x abs.prems(2)"], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n  \\<forall>a\\<in>set vs.\n     case a of\n     (x, \\<tau>) \\<Rightarrow>\n       (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set ((x, T) # vs).\n       case a of\n       (x, \\<tau>) \\<Rightarrow>\n         (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    t)\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "have \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Abs T (subst_bvs1' s 1 (map (case_prod Fv) vs)))\n    (Abs T (subst_bvs1' t 1 (map (case_prod Fv) vs)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (Abs T\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (Abs T\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))", "apply (rule proves_ascend_abs_rule'[where x=x])"], ["proof (prove)\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. (x, T) \\<notin> FV \\<Gamma>\n 3. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 4. typ_ok \\<Theta> T\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using thy"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n\ngoal (8 subgoals):\n 1. wf_theory \\<Theta>\n 2. (x, T) \\<notin> FV \\<Gamma>\n 3. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 4. typ_ok \\<Theta> T\n 5. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 6. finite \\<Gamma>\n 7. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 8. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (7 subgoals):\n 1. (x, T) \\<notin> FV \\<Gamma>\n 2. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 3. typ_ok \\<Theta> T\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 5. finite \\<Gamma>\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using x"], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n\ngoal (7 subgoals):\n 1. (x, T) \\<notin> FV \\<Gamma>\n 2. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 3. typ_ok \\<Theta> T\n 4. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 5. finite \\<Gamma>\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 2. typ_ok \\<Theta> T\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 4. finite \\<Gamma>\n 5. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 6. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using x"], ["proof (prove)\nusing this:\n  (x, T)\n  \\<notin> fv (mk_eq\n                (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                (Abs T\n                  (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n  (x, T) \\<notin> FV \\<Gamma>\n  (x, T) \\<notin> fv s\n\ngoal (6 subgoals):\n 1. (x, T)\n    \\<notin> fv (mk_eq\n                  (Abs T\n                    (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                  (Abs T\n                    (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs))))\n 2. typ_ok \\<Theta> T\n 3. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 4. finite \\<Gamma>\n 5. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 6. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (5 subgoals):\n 1. typ_ok \\<Theta> T\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 3. finite \\<Gamma>\n 4. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 5. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using T_ok"], ["proof (prove)\nusing this:\n  typ_ok \\<Theta> T\n\ngoal (5 subgoals):\n 1. typ_ok \\<Theta> T\n 2. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 3. finite \\<Gamma>\n 4. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 5. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "apply simp"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 2. finite \\<Gamma>\n 3. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 4. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using 1  \\<open>\\<forall>v\\<in>set (map (\\<lambda>(x, y). term.Fv x y) vs). is_closed v\\<close> subst_bvs_extend_lower_level\n    finite ctxt"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    s)\n                                  (subst_bvs\n                                    (map (\\<lambda>(x, y). Fv x y)\n((x, T) # vs))\n                                    t)\n  \\<forall>v\\<in>set (map (\\<lambda>(x, y). Fv x y) vs). is_closed v\n  \\<forall>x\\<in>set (?a # ?args). is_closed x \\<Longrightarrow>\n  subst_bv ?a (subst_bvs1' ?t 1 ?args) = subst_bvs (?a # ?args) ?t\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (4 subgoals):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bv (Fv x T)\n(subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n                                    (subst_bv (Fv x T)\n(subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n 2. finite \\<Gamma>\n 3. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 4. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<And>s t T vs.\n       \\<lbrakk>s \\<rightarrow>\\<^sub>\\<eta> t;\n        \\<And>vs.\n           \\<lbrakk>term_ok \\<Theta>\n                     (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s);\n            \\<forall>(x, \\<tau>)\\<in>set vs.\n               (x, \\<tau>) \\<notin> fv s \\<union> FV \\<Gamma>\\<rbrakk>\n           \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) s)\n                       (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) t);\n        term_ok \\<Theta>\n         (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s));\n        \\<forall>(x, \\<tau>)\\<in>set vs.\n           (x, \\<tau>) \\<notin> fv (Abs T s) \\<union> FV \\<Gamma>\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n                   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t))", "then"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T t))", "using simp"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Abs T\n                                    (subst_bvs1' s 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n                                  (Abs T\n                                    (subst_bvs1' t 1\n(map (\\<lambda>(x, y). Fv x y) vs)))\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T s))\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) vs) (Abs T t)) =\n  mk_eq (Abs T (subst_bvs1' s 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n   (Abs T (subst_bvs1' t 1 (map (\\<lambda>(x, y). Fv x y) vs)))\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T s))\n                                    (subst_bvs\n(map (\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs) (Abs T t))", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (Abs T s))\n                                  (subst_bvs\n                                    (map\n(\\<lambda>a. case a of (a, b) \\<Rightarrow> Fv a b) vs)\n                                    (Abs T t))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eta_step:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes eta: \"t \\<rightarrow>\\<^sub>\\<eta> u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "have unsimpt: \"t = subst_bvs (map (case_prod Fv) []) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t", "by simp"], ["proof (state)\nthis:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "moreover"], ["proof (state)\nthis:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "have unsimpu: \"u = subst_bvs (map (case_prod Fv) []) u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u", "by simp"], ["proof (state)\nthis:\n  u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "ultimately"], ["proof (chain)\npicking this:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n  u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u", "have unsimp: \"mk_eq t u = mk_eq \n    (subst_bvs (map (case_prod Fv) []) t)\n    (subst_bvs (map (case_prod Fv) []) u)\""], ["proof (prove)\nusing this:\n  t = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t\n  u = subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u\n\ngoal (1 subgoal):\n 1. mk_eq t u =\n    mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n     (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u)", "by simp"], ["proof (state)\nthis:\n  mk_eq t u =\n  mk_eq (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n   (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) u)\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "apply (subst unsimp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) []) t)\n                                    (subst_bvs\n(map (\\<lambda>(x, y). Fv x y) []) u)", "apply (rule proves_eta_step_pre)"], ["proof (prove)\ngoal (7 subgoals):\n 1. wf_theory \\<Theta>\n 2. finite \\<Gamma>\n 3. \\<forall>(x, \\<tau>)\\<in>set [].\n       (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\n 4. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n 5. t \\<rightarrow>\\<^sub>\\<eta> u\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "using assms"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  term_ok \\<Theta> t\n  t \\<rightarrow>\\<^sub>\\<eta> u\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (7 subgoals):\n 1. wf_theory \\<Theta>\n 2. finite \\<Gamma>\n 3. \\<forall>(x, \\<tau>)\\<in>set [].\n       (x, \\<tau>) \\<notin> fv t \\<union> FV \\<Gamma>\n 4. term_ok \\<Theta> (subst_bvs (map (\\<lambda>(x, y). Fv x y) []) t)\n 5. t \\<rightarrow>\\<^sub>\\<eta> u\n 6. \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n 7. \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT", "by simp_all"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eta_steps:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes eta: \"t \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "using eta term_ok"], ["proof (prove)\nusing this:\n  t \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* u\n  term_ok \\<Theta> t\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "proof (induction rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       term_ok \\<Theta> a \\<Longrightarrow>\n       \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "case (rtrancl_refl a)"], ["proof (state)\nthis:\n  term_ok \\<Theta> a\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       term_ok \\<Theta> a \\<Longrightarrow>\n       \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a\n 2. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "then"], ["proof (chain)\npicking this:\n  term_ok \\<Theta> a", "show ?case"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> a\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a", "using finite ctxt"], ["proof (prove)\nusing this:\n  term_ok \\<Theta> a\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a", "by (simp add: proves_eq_reflexive thy)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq' (the (typ_of a)) a a\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "case (rtrancl_into_rtrancl a b c)"], ["proof (state)\nthis:\n  a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b\n  b \\<rightarrow>\\<^sub>\\<eta> c\n  term_ok \\<Theta> a \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  term_ok \\<Theta> a\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "hence \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\""], ["proof (prove)\nusing this:\n  a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b\n  b \\<rightarrow>\\<^sub>\\<eta> c\n  term_ok \\<Theta> a \\<Longrightarrow>\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  term_ok \\<Theta> a\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b", "by simp"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "moreover"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "have \"\\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "using proves_eta_step rtrancl_into_rtrancl.hyps(2) eta_star_preserves_term_ok local.finite\n      rtrancl_into_rtrancl.hyps(1) rtrancl_into_rtrancl.prems thy finite ctxt"], ["proof (prove)\nusing this:\n  \\<lbrakk>wf_theory ?\\<Theta>; finite ?\\<Gamma>; term_ok ?\\<Theta> ?t;\n   ?t \\<rightarrow>\\<^sub>\\<eta> ?u;\n   \\<forall>A\\<in>?\\<Gamma>. term_ok ?\\<Theta> A;\n   \\<forall>A\\<in>?\\<Gamma>. typ_of A = Some propT\\<rbrakk>\n  \\<Longrightarrow> ?\\<Theta>,?\\<Gamma> \\<turnstile> mk_eq ?t ?u\n  b \\<rightarrow>\\<^sub>\\<eta> c\n  \\<lbrakk>?r \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* ?s;\n   term_ok ?thy ?r\\<rbrakk>\n  \\<Longrightarrow> term_ok ?thy ?s\n  finite \\<Gamma>\n  a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b\n  term_ok \\<Theta> a\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c\n\ngoal (1 subgoal):\n 1. \\<And>a b c.\n       \\<lbrakk>a \\<rightarrow>\\<^sub>\\<eta>\\<^sup>* b;\n        term_ok \\<Theta> a \\<Longrightarrow>\n        \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b;\n        b \\<rightarrow>\\<^sub>\\<eta> c; term_ok \\<Theta> a\\<rbrakk>\n       \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "ultimately"], ["proof (chain)\npicking this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c", "show ?case"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a b\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq b c\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c", "by (meson proved_terms_well_formed(2) proves_eq_transitive_rule[OF thy _ _ _ _ _ _ _ finite ctxt]\n        term_ok_mk_eqD term_ok_mk_eq_same_typ thy)"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq a c\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma proves_eta_norm:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"term_ok \\<Theta> t\"\n  assumes eta: \"eta_norm t = u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "using finite ctxt"], ["proof (prove)\nusing this:\n  finite \\<Gamma>\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq t u", "by (simp add: eta_norm_imp_eta_reds local.eta local.finite proves_eta_steps term_ok thy del: term_ok_def)"], ["", "lemma eta_norm_preserves_proves:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"\\<Theta>, \\<Gamma> \\<turnstile> t\"\n  assumes eta: \"eta_norm t = u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> u", "using assms proves_eq_mp_rule_better[OF thy _ _ finite ctxt]\n    proves_eta_norm[OF thy finite _ _ ctxt] proved_terms_well_formed(2)"], ["proof (prove)\nusing this:\n  wf_theory \\<Theta>\n  finite \\<Gamma>\n  \\<Theta>,\\<Gamma> \\<turnstile> t\n  eta_norm t = u\n  \\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\n  \\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\n  \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?A ?B;\n   \\<Theta>,\\<Gamma> \\<turnstile> ?A\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> ?B\n  \\<lbrakk>term_ok \\<Theta> ?t; eta_norm ?t = ?u\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> mk_eq ?t ?u\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> u", "by blast"], ["", "lemma beta_eta_norm_preserves_proves:\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes finite: \"finite \\<Gamma>\"\n  assumes term_ok: \"\\<Theta>, \\<Gamma> \\<turnstile> t\"\n  assumes beta_eta: \"beta_eta_norm t = Some u\"\n  assumes ctxt: \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> u", "using beta_eta beta_norm_preserves_proves[OF thy finite _ _ ctxt]\n    eta_norm_preserves_proves[OF thy finite _ _ ctxt] finite term_ok thy"], ["proof (prove)\nusing this:\n  beta_eta_norm t = Some u\n  \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> ?t;\n   beta_norm ?t = Some ?u\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> ?u\n  \\<lbrakk>\\<Theta>,\\<Gamma> \\<turnstile> ?t; eta_norm ?t = ?u\\<rbrakk>\n  \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> ?u\n  finite \\<Gamma>\n  \\<Theta>,\\<Gamma> \\<turnstile> t\n  wf_theory \\<Theta>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> u", "by blast"], ["", "lemma forall_elim':\n  assumes thy: \"wf_theory \\<Theta>\"\n  assumes all: \"\\<Theta>, \\<Gamma> \\<turnstile> Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ B\"\n  assumes a: \"has_typ a \\<tau>\" \"wf_term (sig \\<Theta>) a\"\n  assumes ctxt: \"finite \\<Gamma>\" \"\\<forall>A\\<in>\\<Gamma>. term_ok \\<Theta> A\" \"\\<forall>A\\<in>\\<Gamma>. typ_of A = Some propT\"\n  shows \"\\<Theta>, \\<Gamma> \\<turnstile> B \\<bullet> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "proof(cases \"is_Abs B\")"], ["proof (state)\ngoal (2 subgoals):\n 1. is_Abs B \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a\n 2. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "case True"], ["proof (state)\nthis:\n  is_Abs B\n\ngoal (2 subgoals):\n 1. is_Abs B \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a\n 2. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "from this"], ["proof (chain)\npicking this:\n  is_Abs B", "obtain t T where Abs: \"B = Abs T t\""], ["proof (prove)\nusing this:\n  is_Abs B\n\ngoal (1 subgoal):\n 1. (\\<And>T t. B = Abs T t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using is_Abs_def"], ["proof (prove)\nusing this:\n  is_Abs B\n  is_Abs ?term = (\\<exists>x41 x42. ?term = Abs x41 x42)\n\ngoal (1 subgoal):\n 1. (\\<And>T t. B = Abs T t \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  B = Abs T t\n\ngoal (2 subgoals):\n 1. is_Abs B \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a\n 2. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have \"T = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = \\<tau>", "by (smt Abs all list.inject proved_terms_well_formed(1) typ.inject(1) typ_of1.simps(1) \n        typ_of_Abs_body_typ' typ_of_def typ_of_fun)"], ["proof (state)\nthis:\n  T = \\<tau>\n\ngoal (2 subgoals):\n 1. is_Abs B \\<Longrightarrow> \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a\n 2. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "then"], ["proof (chain)\npicking this:\n  T = \\<tau>", "show ?thesis"], ["proof (prove)\nusing this:\n  T = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "using True Abs all a"], ["proof (prove)\nusing this:\n  T = \\<tau>\n  is_Abs B\n  B = Abs T t\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 B\n  \\<turnstile>\\<^sub>\\<tau> a : \\<tau>\n  wf_term (sig \\<Theta>) a\n\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "by (auto intro: forall_elim[where \\<tau>=\\<tau>])"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "case False"], ["proof (state)\nthis:\n  \\<not> is_Abs B\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have wf_B: \"wf_term (sig \\<Theta>) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) B", "using all proved_terms_well_formed(2) term_okD1 term_ok_app_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 B\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> ?t \\<Longrightarrow> term_ok' (sig ?\\<Theta>) ?t\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) B", "by blast"], ["proof (state)\nthis:\n  wf_term (sig \\<Theta>) B\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have B_typ: \"\\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT", "by (metis (no_types, lifting) all proved_terms_well_formed(1) typ_of1.simps(1) typ_of_def \n        typ_of_fun typ_of_imp_has_typ)"], ["proof (state)\nthis:\n  \\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have \"B \\<bullet> a = B $ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. B \\<bullet> a = B $ a", "using False"], ["proof (prove)\nusing this:\n  \\<not> is_Abs B\n\ngoal (1 subgoal):\n 1. B \\<bullet> a = B $ a", "by (metis betapply.elims term.discI(4))"], ["proof (state)\nthis:\n  B \\<bullet> a = B $ a\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "moreover"], ["proof (state)\nthis:\n  B \\<bullet> a = B $ a\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have \"Abs \\<tau> (B $ Bv 0) \\<bullet> a = B $ a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Abs \\<tau> (B $ Bv 0) \\<bullet> a = B $ a", "using B_typ closed_subst_bv_no_change subst_bv_def typ_of_imp_closed"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT\n  is_closed ?t \\<Longrightarrow> subst_bv ?u ?t = ?t\n  subst_bv ?u ?t \\<equiv> subst_bv1 ?t 0 ?u\n  typ_of ?t = Some ?ty \\<Longrightarrow> is_closed ?t\n\ngoal (1 subgoal):\n 1. Abs \\<tau> (B $ Bv 0) \\<bullet> a = B $ a", "by (auto simp add: subst_bv_def incr_boundvars_def)"], ["proof (state)\nthis:\n  Abs \\<tau> (B $ Bv 0) \\<bullet> a = B $ a\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "ultimately"], ["proof (chain)\npicking this:\n  B \\<bullet> a = B $ a\n  Abs \\<tau> (B $ Bv 0) \\<bullet> a = B $ a", "have simp: \"B \\<bullet> a = subst_bv a (B $ Bv 0)\""], ["proof (prove)\nusing this:\n  B \\<bullet> a = B $ a\n  Abs \\<tau> (B $ Bv 0) \\<bullet> a = B $ a\n\ngoal (1 subgoal):\n 1. B \\<bullet> a = subst_bv a (B $ Bv 0)", "by auto"], ["proof (state)\nthis:\n  B \\<bullet> a = subst_bv a (B $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have 1: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (B $ Bv 0)) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (B $ Bv 0)) B", "by (rule proves.eta[OF thy wf_B B_typ])"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (B $ Bv 0)) B\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have 2: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq B (Abs \\<tau> (B $ Bv 0))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq B (Abs \\<tau> (B $ Bv 0))", "apply (rule proves_eq_symmetric_rule[OF thy _ _ _ 1 ctxt])"], ["proof (prove)\ngoal (3 subgoals):\n 1. term_ok \\<Theta> B\n 2. term_ok \\<Theta> (Abs \\<tau> (B $ Bv 0))\n 3. typ_of (Abs \\<tau> (B $ Bv 0)) = typ_of B", "using wf_B  B_typ term_ok_def wt_term_def"], ["proof (prove)\nusing this:\n  wf_term (sig \\<Theta>) B\n  \\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT\n  term_ok ?\\<Theta> ?t \\<equiv> wt_term (sig ?\\<Theta>) ?t\n  wt_term ?\\<Sigma> ?t \\<equiv>\n  wf_term ?\\<Sigma> ?t \\<and> (\\<exists>T. \\<turnstile>\\<^sub>\\<tau> ?t : T)\n\ngoal (3 subgoals):\n 1. term_ok \\<Theta> B\n 2. term_ok \\<Theta> (Abs \\<tau> (B $ Bv 0))\n 3. typ_of (Abs \\<tau> (B $ Bv 0)) = typ_of B", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (B $ Bv 0))\n 2. typ_of (Abs \\<tau> (B $ Bv 0)) = typ_of B", "using 1 proved_terms_well_formed(2) term_ok_mk_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq (Abs \\<tau> (B $ Bv 0)) B\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (mk_eq ?s ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (2 subgoals):\n 1. term_ok \\<Theta> (Abs \\<tau> (B $ Bv 0))\n 2. typ_of (Abs \\<tau> (B $ Bv 0)) = typ_of B", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> (B $ Bv 0)) = typ_of B", "using B_typ Logic.typ_of_eta_expand"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT\n  typ_of ?f = Some (?\\<tau> \\<rightarrow> ?\\<tau>') \\<Longrightarrow>\n  typ_of (Abs ?\\<tau> (?f $ Bv 0)) = Some (?\\<tau> \\<rightarrow> ?\\<tau>')\n\ngoal (1 subgoal):\n 1. typ_of (Abs \\<tau> (B $ Bv 0)) = typ_of B", "by auto"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq B (Abs \\<tau> (B $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have 3: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT)) (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                    (the\n(typ_of\n  (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))))\n                                    (Ct STR ''Pure.all''\n((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))\n                                    (Ct STR ''Pure.all''\n((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))", "apply (rule proves_eq_reflexive[OF thy _ ctxt])"], ["proof (prove)\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Ct STR ''Pure.all''\n       ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))", "using all proved_terms_well_formed(2) term_ok_app_eqD"], ["proof (prove)\nusing this:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 B\n  ?\\<Theta>,?\\<Gamma> \\<turnstile> ?p \\<Longrightarrow> term_ok ?\\<Theta> ?p\n  term_ok ?\\<Theta> (?s $ ?t) \\<Longrightarrow>\n  term_ok ?\\<Theta> ?s \\<and> term_ok ?\\<Theta> ?t\n\ngoal (1 subgoal):\n 1. term_ok \\<Theta>\n     (Ct STR ''Pure.all''\n       ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq'\n                                  (the (typ_of\n   (Ct STR ''Pure.all''\n     ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT))))\n                                  (Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT))\n                                  (Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT))\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have 4: \"\\<Theta>, \\<Gamma> \\<turnstile> mk_eq \n    (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ B)\n    (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ (Abs \\<tau> (B $ Bv 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                    (Ct STR ''Pure.all''\n((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n                                     B)\n                                    (Ct STR ''Pure.all''\n((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $\n                                     Abs \\<tau> (B $ Bv 0))", "apply (rule proves_eq_combination_rule_better[OF thy 3 2 _ _ ctxt, where \\<tau>=\"(\\<tau> \\<rightarrow> propT)\" and \\<tau>'= propT])"], ["proof (prove)\ngoal (2 subgoals):\n 1. typ_of\n     (Ct STR ''Pure.all''\n       ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT)) =\n    Some ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT)\n 2. typ_of B = Some (\\<tau> \\<rightarrow> propT)", "using typ_of_def"], ["proof (prove)\nusing this:\n  typ_of ?t \\<equiv> typ_of1 [] ?t\n\ngoal (2 subgoals):\n 1. typ_of\n     (Ct STR ''Pure.all''\n       ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT)) =\n    Some ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT)\n 2. typ_of B = Some (\\<tau> \\<rightarrow> propT)", "apply auto[1]"], ["proof (prove)\ngoal (1 subgoal):\n 1. typ_of B = Some (\\<tau> \\<rightarrow> propT)", "using B_typ"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>\\<tau> B : \\<tau> \\<rightarrow> propT\n\ngoal (1 subgoal):\n 1. typ_of B = Some (\\<tau> \\<rightarrow> propT)", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> mk_eq\n                                  (Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   B)\n                                  (Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau> (B $ Bv 0))\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "have 5: \"\\<Theta>, \\<Gamma> \\<turnstile> (Ct STR ''Pure.all'' ((\\<tau> \\<rightarrow> propT) \\<rightarrow> propT) $ (Abs \\<tau> (B $ Bv 0)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                    ((\\<tau> \\<rightarrow>\npropT) \\<rightarrow>\n                                     propT) $\n                                   Abs \\<tau> (B $ Bv 0)", "by (rule proves_eq_mp_rule_better[OF thy 4 all ctxt])"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> Ct STR ''Pure.all''\n                                  ((\\<tau> \\<rightarrow>\n                                    propT) \\<rightarrow>\n                                   propT) $\n                                 Abs \\<tau> (B $ Bv 0)\n\ngoal (1 subgoal):\n 1. \\<not> is_Abs B \\<Longrightarrow>\n    \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a", "apply (subst simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Theta>,\\<Gamma> \\<turnstile> subst_bv a (B $ Bv 0)", "apply (rule proves.forall_elim[OF 5])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>\\<tau> a : \\<tau>\n 2. wf_term (sig \\<Theta>) a", "using assms(3)"], ["proof (prove)\nusing this:\n  \\<turnstile>\\<^sub>\\<tau> a : \\<tau>\n\ngoal (2 subgoals):\n 1. \\<turnstile>\\<^sub>\\<tau> a : \\<tau>\n 2. wf_term (sig \\<Theta>) a", "apply blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) a", "using assms(4)"], ["proof (prove)\nusing this:\n  wf_term (sig \\<Theta>) a\n\ngoal (1 subgoal):\n 1. wf_term (sig \\<Theta>) a", "by blast"], ["proof (state)\nthis:\n  \\<Theta>,\\<Gamma> \\<turnstile> B \\<bullet> a\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}