{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/Instances.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma length_neq_imp_not_raw_matches: \"length Ts \\<noteq> length Us \\<Longrightarrow> raw_matches Ts Us subs = None\"", "lemma \"raw_match T U subs = raw_match' T U subs\"", "lemma raw_match'_map_le: \"raw_match' T U subs = Some subs' \\<Longrightarrow> map_le subs subs'\"", "lemma fold_matches_first_step_not_None:\n  assumes\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (x#xs) (y#ys)) (Some subs) = Some subs'\" \n  obtains point where\n    \"raw_match' x y subs = Some point\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (xs) (ys)) (Some point) = Some subs'\"", "lemma fold_matches_last_step_not_None:\n  assumes\n    \"length xs = length ys\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (xs@[x]) (ys@[y])) (Some subs) = Some subs'\" \n  obtains point where\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (xs) (ys)) (Some subs) = Some point\"\n    \"raw_match' x y point = Some subs'\"", "lemma raw_match'_tvsT_subset_dom_res: \"raw_match' T U subs = Some subs' \\<Longrightarrow> tvsT T \\<subseteq> dom subs'\"", "lemma raw_match'_dom_res_subset_tvsT: \n  \"raw_match' T U subs = Some subs' \\<Longrightarrow> dom subs' \\<subseteq> tvsT T \\<union> dom subs\"", "lemma raw_match'_map_defined: \"raw_match' T U subs = Some subs' \\<Longrightarrow> p\\<in>tvsT T \\<Longrightarrow> subs' p ~= None\"", "lemma raw_match'_extend_map_preserve:\n  \"raw_match' T U subs = Some subs' \\<Longrightarrow> map_le subs' subs'' \\<Longrightarrow> p\\<in>tvsT T \\<Longrightarrow> subs'' p = subs' p\"", "lemma map_eq_on_tvsT_imp_map_eq_on_typ:\n  \"(\\<And>p . p\\<in>tvsT T \\<Longrightarrow> subs p = subs' p) \n  \\<Longrightarrow> tsubstT T (convert_subs subs)\n    = tsubstT T (convert_subs subs')\"", "lemma raw_match'_extend_map_preserve':\n  assumes \"raw_match' T U subs = Some subs'\" \"map_le subs' subs''\"\n  shows \"tsubstT T (convert_subs subs')\n    = tsubstT T (convert_subs subs'')\"", "lemma raw_match'_produces_matcher:\n  \"raw_match' T U subs = Some subs' \n    \\<Longrightarrow> tsubstT T (convert_subs subs') = U\"", "lemma tsubstT_matcher_imp_raw_match'_unchanged:\n  \"tsubstT T \\<rho> = U \\<Longrightarrow> raw_match' T U (\\<lambda>(idx, S). Some (\\<rho> idx S)) = Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\"", "lemma raw_match'_imp_raw_match'_on_map_le:\n  assumes \"raw_match' T U subs = Some subs'\"\n  assumes \"map_le lesubs subs\"\n  shows \"\\<exists>lesubs'. raw_match' T U lesubs = Some lesubs' \\<and> map_le lesubs' subs'\"", "lemma map_le_same_dom_imp_same_map: \"dom f = dom g \\<Longrightarrow> map_le f g \\<Longrightarrow> f = g\"", "lemma raw_match'_restriction:\n  assumes \"raw_match' T U subs = Some subs'\"\n  assumes \" tvsT T \\<subseteq> restriction \"\n  shows \"raw_match' T U (subs|`restriction) = Some (subs'|`restriction)\"", "lemma tinstT_imp_ex_raw_match':\n  assumes \"tinstT T1 T2\" \n  shows \"\\<exists>subs. raw_match' T2 T1 (\\<lambda>p . None) = Some subs\"", "lemma ex_raw_match'_imp_tinstT:\n  assumes \"\\<exists>subs. raw_match' T2 T1 (\\<lambda>p . None) = Some subs\"\n  shows \"tinstT T1 T2\"", "lemma raw_match_term_map_le: \"raw_match_term t u subs = Some subs' \\<Longrightarrow> map_le subs subs'\"", "lemma raw_match_term_tvs_subset_dom_res:\n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> tvs t \\<subseteq> dom subs'\"", "lemma raw_match_term_dom_res_subset_tvs: \n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> dom subs' \\<subseteq> tvs t \\<union> dom subs\"", "lemma raw_match_term_extend_map_preserve:\n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> map_le subs' subs'' \\<Longrightarrow> p\\<in>tvs t \\<Longrightarrow> subs'' p = subs' p\"", "lemma map_eq_on_tvs_imp_map_eq_on_term:\n  \"(\\<And>p . p\\<in>tvs t \\<Longrightarrow> subs p = subs' p) \n  \\<Longrightarrow> tsubst t (convert_subs subs)\n    = tsubst t (convert_subs subs')\"", "lemma raw_match_extend_map_preserve':\n  assumes \"raw_match_term t u subs = Some subs'\" \"map_le subs' subs''\"\n  shows \"tsubst t (convert_subs subs') \n    = tsubst t (convert_subs subs'')\"", "lemma raw_match_term_produces_matcher:\n  \"raw_match_term t u subs = Some subs' \n    \\<Longrightarrow> tsubst t (convert_subs subs') = u\"", "lemma ex_raw_match_term_imp_tinst:\n  assumes \"\\<exists>subs. raw_match_term t2 t1 (\\<lambda>p . None) = Some subs\"\n  shows \"tinst t1 t2\"", "lemma tsubst_matcher_imp_raw_match_term_unchanged:\n  \"tsubst t \\<rho> = u \\<Longrightarrow> raw_match_term t u (\\<lambda>(idx, S). Some (\\<rho> idx S)) = Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\"", "lemma raw_match_term_restriction:\n  assumes \"raw_match_term t u subs = Some subs'\"\n  assumes \"tvs t \\<subseteq> restriction \"\n  shows \"raw_match_term t u (subs|`restriction) = Some (subs'|`restriction)\"", "lemma raw_match_term_imp_raw_match_term_on_map_le:\n  assumes \"raw_match_term t u subs = Some subs'\"\n  assumes \"map_le lesubs subs\"\n  shows \"\\<exists>lesubs'. raw_match_term t u lesubs = Some lesubs' \\<and> map_le lesubs' subs'\"", "lemma tinst_imp_ex_raw_match_term:\n  assumes \"tinst t1 t2\" \n  shows \"\\<exists>subs. raw_match_term t2 t1 (\\<lambda>p . None) = Some subs\"", "lemma fold_assoc_matches_first_step_not_None:\n  assumes\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (assoc_match T U)) (zip (x#xs) (y#ys)) (Some subs) = Some subs'\" \n  obtains point where\n    \"assoc_match x y subs = Some point\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (assoc_match T U)) (zip (xs) (ys)) (Some point) = Some subs'\"", "lemma assoc_match_subset: \"assoc_match T U subs = Some subs' \\<Longrightarrow> set subs \\<subseteq> set subs'\"", "lemma assoc_match_distinct: \"assoc_match T U subs = Some subs' \\<Longrightarrow> distinct (map fst subs) \n  \\<Longrightarrow> distinct (map fst subs')\"", "lemma lookup_eq_map_of_ap:                           \n  shows \"lookup (\\<lambda>x. x=k) subs = map_of subs k\"", "lemma raw_match'_assoc_match:\n  shows \"raw_match' T U (map_of subs) = map_option map_of (assoc_match T U subs)\"", "lemma dom_eq_and_eq_on_dom_imp_eq: \"dom m = dom m' \\<Longrightarrow> \\<forall>x\\<in>dom m . m x = m' x \\<Longrightarrow> m = m'\"", "lemma list_of_map:\n  assumes \"finite (dom subs)\" \n  shows \"\\<exists>l. map_of l = subs\"", "lemma raw_match_term_assoc_match_term:\n  \"raw_match_term t u (map_of subs) = map_option map_of (assoc_match_term t u subs)\""], "translations": [["", "lemma length_neq_imp_not_raw_matches: \"length Ts \\<noteq> length Us \\<Longrightarrow> raw_matches Ts Us subs = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ts \\<noteq> length Us \\<Longrightarrow>\n    raw_matches Ts Us subs = None", "by (induction Ts Us subs rule: raw_match_raw_matches.induct(2) [where P = \"\\<lambda>T U subs . True\"])\n    (auto cong: Option.bind_cong)"], ["", "(* Making sure I did not mess up my version of the definition *)"], ["", "lemma \"raw_match T U subs = raw_match' T U subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match T U subs = raw_match' T U subs", "proof (induction T U subs rule: raw_match_raw_matches.induct(1)\n      [where Q = \"\\<lambda>Ts Us subs . raw_matches Ts Us subs \n        = (if length Ts = length Us \n      then fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip Ts Us) (Some subs)\n      else None)\"])"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>v S T subs. raw_match (Tv v S) T subs = raw_match' (Tv v S) T subs\n 2. \\<And>a Ts b Us subs.\n       (a = b \\<Longrightarrow>\n        raw_matches Ts Us subs =\n        (if length Ts = length Us\n         then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n               (zip Ts Us) (Some subs)\n         else None)) \\<Longrightarrow>\n       raw_match (Ty a Ts) (Ty b Us) subs =\n       raw_match' (Ty a Ts) (Ty b Us) subs\n 3. \\<And>v va vb vc uw_.\n       raw_match (Ty v va) (Tv vb vc) uw_ =\n       raw_match' (Ty v va) (Tv vb vc) uw_\n 4. \\<And>T Ts U Us subs.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None)\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)\n 5. \\<And>subs.\n       raw_matches [] [] subs =\n       (if length [] = length []\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip [] []) (Some subs)\n        else None)\n 6. \\<And>v va subs.\n       raw_matches [] (v # va) subs =\n       (if length [] = length (v # va)\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip [] (v # va)) (Some subs)\n        else None)\n 7. \\<And>v va subs.\n       raw_matches (v # va) [] subs =\n       (if length (v # va) = length []\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip (v # va) []) (Some subs)\n        else None)", "case (4 T Ts U Us subs)"], ["proof (state)\nthis:\n  raw_match T U subs = raw_match' T U subs\n  raw_match T U subs = Some ?a \\<Longrightarrow>\n  raw_matches Ts Us ?a =\n  (if length Ts = length Us\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip Ts Us) (Some ?a)\n   else None)\n\ngoal (7 subgoals):\n 1. \\<And>v S T subs. raw_match (Tv v S) T subs = raw_match' (Tv v S) T subs\n 2. \\<And>a Ts b Us subs.\n       (a = b \\<Longrightarrow>\n        raw_matches Ts Us subs =\n        (if length Ts = length Us\n         then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n               (zip Ts Us) (Some subs)\n         else None)) \\<Longrightarrow>\n       raw_match (Ty a Ts) (Ty b Us) subs =\n       raw_match' (Ty a Ts) (Ty b Us) subs\n 3. \\<And>v va vb vc uw_.\n       raw_match (Ty v va) (Tv vb vc) uw_ =\n       raw_match' (Ty v va) (Tv vb vc) uw_\n 4. \\<And>T Ts U Us subs.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None)\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)\n 5. \\<And>subs.\n       raw_matches [] [] subs =\n       (if length [] = length []\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip [] []) (Some subs)\n        else None)\n 6. \\<And>v va subs.\n       raw_matches [] (v # va) subs =\n       (if length [] = length (v # va)\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip [] (v # va)) (Some subs)\n        else None)\n 7. \\<And>v va subs.\n       raw_matches (v # va) [] subs =\n       (if length (v # va) = length []\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip (v # va) []) (Some subs)\n        else None)", "then"], ["proof (chain)\npicking this:\n  raw_match T U subs = raw_match' T U subs\n  raw_match T U subs = Some ?a \\<Longrightarrow>\n  raw_matches Ts Us ?a =\n  (if length Ts = length Us\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip Ts Us) (Some ?a)\n   else None)", "show ?case"], ["proof (prove)\nusing this:\n  raw_match T U subs = raw_match' T U subs\n  raw_match T U subs = Some ?a \\<Longrightarrow>\n  raw_matches Ts Us ?a =\n  (if length Ts = length Us\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip Ts Us) (Some ?a)\n   else None)\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "proof (cases \"raw_match T U subs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n     \\<And>a.\n        raw_match T U subs = Some a \\<Longrightarrow>\n        raw_matches Ts Us a =\n        (if length Ts = length Us\n         then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n               (zip Ts Us) (Some a)\n         else None);\n     raw_match T U subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)\n 2. \\<And>a.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None);\n        raw_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)", "case None"], ["proof (state)\nthis:\n  raw_match T U subs = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n     \\<And>a.\n        raw_match T U subs = Some a \\<Longrightarrow>\n        raw_matches Ts Us a =\n        (if length Ts = length Us\n         then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n               (zip Ts Us) (Some a)\n         else None);\n     raw_match T U subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)\n 2. \\<And>a.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None);\n        raw_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)", "then"], ["proof (chain)\npicking this:\n  raw_match T U subs = None", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match T U subs = None\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "proof (cases \"length Ts = length Us\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match T U subs = None; length Ts = length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)\n 2. \\<lbrakk>raw_match T U subs = None;\n     length Ts \\<noteq> length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)", "case True"], ["proof (state)\nthis:\n  length Ts = length Us\n\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match T U subs = None; length Ts = length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)\n 2. \\<lbrakk>raw_match T U subs = None;\n     length Ts \\<noteq> length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)", "then"], ["proof (chain)\npicking this:\n  length Ts = length Us", "show ?thesis"], ["proof (prove)\nusing this:\n  length Ts = length Us\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "using 4 None"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  raw_match T U subs = raw_match' T U subs\n  raw_match T U subs = Some ?a \\<Longrightarrow>\n  raw_matches Ts Us ?a =\n  (if length Ts = length Us\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip Ts Us) (Some ?a)\n   else None)\n  raw_match T U subs = None\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "by (induction Ts Us rule: list_induct2) auto"], ["proof (state)\nthis:\n  raw_matches (T # Ts) (U # Us) subs =\n  (if length (T # Ts) = length (U # Us)\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip (T # Ts) (U # Us)) (Some subs)\n   else None)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match T U subs = None;\n     length Ts \\<noteq> length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match T U subs = None;\n     length Ts \\<noteq> length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)", "case False"], ["proof (state)\nthis:\n  length Ts \\<noteq> length Us\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match T U subs = None;\n     length Ts \\<noteq> length Us\\<rbrakk>\n    \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                      (if length (T # Ts) = length (U # Us)\n                       then fold\n                             (\\<lambda>(T, U) subs.\n                                 Option.bind subs (raw_match' T U))\n                             (zip (T # Ts) (U # Us)) (Some subs)\n                       else None)", "then"], ["proof (chain)\npicking this:\n  length Ts \\<noteq> length Us", "show ?thesis"], ["proof (prove)\nusing this:\n  length Ts \\<noteq> length Us\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "using 4 None length_neq_imp_not_raw_matches"], ["proof (prove)\nusing this:\n  length Ts \\<noteq> length Us\n  raw_match T U subs = raw_match' T U subs\n  raw_match T U subs = Some ?a \\<Longrightarrow>\n  raw_matches Ts Us ?a =\n  (if length Ts = length Us\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip Ts Us) (Some ?a)\n   else None)\n  raw_match T U subs = None\n  length ?Ts \\<noteq> length ?Us \\<Longrightarrow>\n  raw_matches ?Ts ?Us ?subs = None\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "by auto"], ["proof (state)\nthis:\n  raw_matches (T # Ts) (U # Us) subs =\n  (if length (T # Ts) = length (U # Us)\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip (T # Ts) (U # Us)) (Some subs)\n   else None)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_matches (T # Ts) (U # Us) subs =\n  (if length (T # Ts) = length (U # Us)\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip (T # Ts) (U # Us)) (Some subs)\n   else None)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None);\n        raw_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None);\n        raw_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)", "case (Some a)"], ["proof (state)\nthis:\n  raw_match T U subs = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>raw_match T U subs = raw_match' T U subs;\n        \\<And>a.\n           raw_match T U subs = Some a \\<Longrightarrow>\n           raw_matches Ts Us a =\n           (if length Ts = length Us\n            then fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip Ts Us) (Some a)\n            else None);\n        raw_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_matches (T # Ts) (U # Us) subs =\n                         (if length (T # Ts) = length (U # Us)\n                          then fold\n                                (\\<lambda>(T, U) subs.\n                                    Option.bind subs (raw_match' T U))\n                                (zip (T # Ts) (U # Us)) (Some subs)\n                          else None)", "then"], ["proof (chain)\npicking this:\n  raw_match T U subs = Some a", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match T U subs = Some a\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "using 4"], ["proof (prove)\nusing this:\n  raw_match T U subs = Some a\n  raw_match T U subs = raw_match' T U subs\n  raw_match T U subs = Some ?a \\<Longrightarrow>\n  raw_matches Ts Us ?a =\n  (if length Ts = length Us\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip Ts Us) (Some ?a)\n   else None)\n\ngoal (1 subgoal):\n 1. raw_matches (T # Ts) (U # Us) subs =\n    (if length (T # Ts) = length (U # Us)\n     then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n           (zip (T # Ts) (U # Us)) (Some subs)\n     else None)", "by auto"], ["proof (state)\nthis:\n  raw_matches (T # Ts) (U # Us) subs =\n  (if length (T # Ts) = length (U # Us)\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip (T # Ts) (U # Us)) (Some subs)\n   else None)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_matches (T # Ts) (U # Us) subs =\n  (if length (T # Ts) = length (U # Us)\n   then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip (T # Ts) (U # Us)) (Some subs)\n   else None)\n\ngoal (6 subgoals):\n 1. \\<And>v S T subs. raw_match (Tv v S) T subs = raw_match' (Tv v S) T subs\n 2. \\<And>a Ts b Us subs.\n       (a = b \\<Longrightarrow>\n        raw_matches Ts Us subs =\n        (if length Ts = length Us\n         then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n               (zip Ts Us) (Some subs)\n         else None)) \\<Longrightarrow>\n       raw_match (Ty a Ts) (Ty b Us) subs =\n       raw_match' (Ty a Ts) (Ty b Us) subs\n 3. \\<And>v va vb vc uw_.\n       raw_match (Ty v va) (Tv vb vc) uw_ =\n       raw_match' (Ty v va) (Tv vb vc) uw_\n 4. \\<And>subs.\n       raw_matches [] [] subs =\n       (if length [] = length []\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip [] []) (Some subs)\n        else None)\n 5. \\<And>v va subs.\n       raw_matches [] (v # va) subs =\n       (if length [] = length (v # va)\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip [] (v # va)) (Some subs)\n        else None)\n 6. \\<And>v va subs.\n       raw_matches (v # va) [] subs =\n       (if length (v # va) = length []\n        then fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n              (zip (v # va) []) (Some subs)\n        else None)", "qed simp_all"], ["", "lemma raw_match'_map_le: \"raw_match' T U subs = Some subs' \\<Longrightarrow> map_le subs subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U subs = Some subs' \\<Longrightarrow>\n    subs \\<subseteq>\\<^sub>m subs'", "proof (induction T U subs arbitrary: subs' rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> aa \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?aa \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> aa \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'", "have \"length Ts = length Us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ts = length Us", "using \"2.prems\""], ["proof (prove)\nusing this:\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. length Ts = length Us", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> aa \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'", "moreover"], ["proof (state)\nthis:\n  length Ts = length Us\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> aa \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'", "have I: \"(a,b) \\<in> set (zip Ts Us) \\<Longrightarrow> raw_match' a b subs = Some subs' \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\" \n      for a b subs subs'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> set (zip Ts Us);\n     raw_match' a b subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "using \"2.prems\""], ["proof (prove)\nusing this:\n  raw_match' (Ty a__ Ts) (Ty b__ Us) subsa__ = Some subs'a__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(a, b) \\<in> set (zip Ts Us);\n     raw_match' a b subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "by (auto split: if_splits intro: \"2.IH\")"], ["proof (state)\nthis:\n  \\<lbrakk>(?a, ?b) \\<in> set (zip Ts Us);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> aa \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'", "ultimately"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  \\<lbrakk>(?a, ?b) \\<in> set (zip Ts Us);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  \\<lbrakk>(?a, ?b) \\<in> set (zip Ts Us);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m subs'", "using \"2.prems\""], ["proof (prove)\nusing this:\n  length Ts = length Us\n  \\<lbrakk>(?a, ?b) \\<in> set (zip Ts Us);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m subs'", "proof (induction Ts Us arbitrary: subs subs' rule: rev_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>\\<And>a b subs subs'.\n                   \\<lbrakk>(a, b) \\<in> set (zip [] []);\n                    raw_match' a b subs = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (constT a) (constT b) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>\\<And>a b subs subs'.\n                       \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n                        raw_match' a b subs = Some subs'\\<rbrakk>\n                       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        \\<And>a b subs subs'.\n           \\<lbrakk>(a, b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n            raw_match' a b subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>(?a, ?b) \\<in> set (zip [] []);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (constT a) (constT b) subs = Some subs'\n\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>\\<And>a b subs subs'.\n                   \\<lbrakk>(a, b) \\<in> set (zip [] []);\n                    raw_match' a b subs = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (constT a) (constT b) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>\\<And>a b subs subs'.\n                       \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n                        raw_match' a b subs = Some subs'\\<rbrakk>\n                       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        \\<And>a b subs subs'.\n           \\<lbrakk>(a, b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n            raw_match' a b subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>(?a, ?b) \\<in> set (zip [] []);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (constT a) (constT b) subs = Some subs'", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?a, ?b) \\<in> set (zip [] []);\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (constT a) (constT b) subs = Some subs'\n\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m subs'", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  subs \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>\\<And>a b subs subs'.\n                       \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n                        raw_match' a b subs = Some subs'\\<rbrakk>\n                       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        \\<And>a b subs subs'.\n           \\<lbrakk>(a, b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n            raw_match' a b subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>\\<And>a b subs subs'.\n                       \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n                        raw_match' a b subs = Some subs'\\<rbrakk>\n                       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        \\<And>a b subs subs'.\n           \\<lbrakk>(a, b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n            raw_match' a b subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "case (snoc x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>\\<And>a b subs subs'.\n              \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n               raw_match' a b subs = Some subs'\\<rbrakk>\n              \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>(?a, ?b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>\\<And>a b subs subs'.\n                       \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n                        raw_match' a b subs = Some subs'\\<rbrakk>\n                       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        \\<And>a b subs subs'.\n           \\<lbrakk>(a, b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n            raw_match' a b subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs'", "then"], ["proof (chain)\npicking this:\n  length xs = length ys\n  \\<lbrakk>\\<And>a b subs subs'.\n              \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n               raw_match' a b subs = Some subs'\\<rbrakk>\n              \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>(?a, ?b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs = Some subs'", "show ?case"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>\\<And>a b subs subs'.\n              \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n               raw_match' a b subs = Some subs'\\<rbrakk>\n              \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>(?a, ?b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs = Some subs'\n\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m subs'", "using map_le_trans"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>\\<And>a b subs subs'.\n              \\<lbrakk>(a, b) \\<in> set (zip xs ys);\n               raw_match' a b subs = Some subs'\\<rbrakk>\n              \\<Longrightarrow> subs \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>(?a, ?b) \\<in> set (zip (xs @ [x]) (ys @ [y]));\n   raw_match' ?a ?b ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (xs @ [x])) (Ty b (ys @ [y])) subs = Some subs'\n  \\<lbrakk>?m1.0 \\<subseteq>\\<^sub>m ?m2.0;\n   ?m2.0 \\<subseteq>\\<^sub>m ?m3.0\\<rbrakk>\n  \\<Longrightarrow> ?m1.0 \\<subseteq>\\<^sub>m ?m3.0\n\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m subs'", "by (fastforce split: if_splits prod.splits simp add: bind_eq_Some_conv)"], ["proof (state)\nthis:\n  subs \\<subseteq>\\<^sub>m subs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subs \\<subseteq>\\<^sub>m subs'\n\ngoal (2 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'\n 2. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       subs \\<subseteq>\\<^sub>m subs'", "qed (auto simp add: map_le_def split: if_splits option.splits)"], ["", "(* Specializing for raw_match' *)"], ["", "lemma fold_matches_first_step_not_None:\n  assumes\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (x#xs) (y#ys)) (Some subs) = Some subs'\" \n  obtains point where\n    \"raw_match' x y subs = Some point\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (xs) (ys)) (Some point) = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n          (zip xs ys) (Some point) =\n         Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fold_matches_first_step_not_None assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (?f T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>?f ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (?f T U)) (zip ?xs ?ys)\n        (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n   (zip (x # xs) (y # ys)) (Some subs) =\n  Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n          (zip xs ys) (Some point) =\n         Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["", "lemma fold_matches_last_step_not_None:\n  assumes\n    \"length xs = length ys\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (xs@[x]) (ys@[y])) (Some subs) = Some subs'\" \n  obtains point where\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (xs) (ys)) (Some subs) = Some point\"\n    \"raw_match' x y point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip xs ys) (Some subs) =\n                 Some point;\n         raw_match' x y point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fold_matches_last_step_not_None assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?xs = length ?ys;\n   fold (\\<lambda>(T, U) subs. Option.bind subs (?f T U))\n    (zip (?xs @ [?x]) (?ys @ [?y])) (Some ?subs) =\n   Some ?subs';\n   \\<And>point.\n      \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (?f T U))\n                (zip ?xs ?ys) (Some ?subs) =\n               Some point;\n       ?f ?x ?y point = Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  length xs = length ys\n  fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n   (zip (xs @ [x]) (ys @ [y])) (Some subs) =\n  Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n                  (zip xs ys) (Some subs) =\n                 Some point;\n         raw_match' x y point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "."], ["", "corollary raw_match'_Type_conds:\n  assumes \"raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\"\n  shows \"a=b\" \"length Ts = length Us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b &&& length Ts = length Us", "using assms"], ["proof (prove)\nusing this:\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. a = b &&& length Ts = length Us", "by (auto split: if_splits)"], ["", "corollary fold_matches_first_step_not_None':\n  assumes \"length xs = length ys\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (raw_match' T U)) (zip (x#xs) (y#ys)) (Some subs) = Some subs'\"  \n  shows \"raw_match' x y subs ~= None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' x y subs \\<noteq> None", "using assms fold_matches_first_step_not_None"], ["proof (prove)\nusing this:\n  length xs = length ys\n  fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n   (zip (x # xs) (y # ys)) (Some subs) =\n  Some subs'\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>raw_match' ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n        (zip ?xs ?ys) (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. raw_match' x y subs \\<noteq> None", "by (metis option.discI)"], ["", "corollary raw_match'_hd_raw_match':\n  assumes \"raw_match' (Ty a (T#Ts)) (Ty b (U#Us)) subs = Some subs'\"\n  shows \"raw_match' T U subs ~= None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U subs \\<noteq> None", "using assms fold_matches_first_step_not_None' raw_match'_Type_conds"], ["proof (prove)\nusing this:\n  raw_match' (Ty a (T # Ts)) (Ty b (U # Us)) subs = Some subs'\n  \\<lbrakk>length ?xs = length ?ys;\n   fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n    (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n   Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y ?subs \\<noteq> None\n  raw_match' (Ty ?a ?Ts) (Ty ?b ?Us) ?subs = Some ?subs' \\<Longrightarrow>\n  ?a = ?b\n  raw_match' (Ty ?a ?Ts) (Ty ?b ?Us) ?subs = Some ?subs' \\<Longrightarrow>\n  length ?Ts = length ?Us\n\ngoal (1 subgoal):\n 1. raw_match' T U subs \\<noteq> None", "by (metis (no_types, lifting) length_Cons nat.simps(1) raw_match'.simps(2))"], ["", "corollary raw_match'_eq_Some_at_point_not_None':\n  assumes \"length Ts = length Us\"\n  assumes \"raw_match' (Ty a (Ts@Ts')) (Ty b (Us@Us')) subs = Some subs'\"\n  shows \"raw_match' (Ty a (Ts)) (Ty b (Us)) subs ~= None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) subs \\<noteq> None", "using assms fold_Option_bind_eq_Some_at_point_not_None'"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  raw_match' (Ty a (Ts @ Ts')) (Ty b (Us @ Us')) subs = Some subs'\n  fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) (?l1.0 @ ?l2.0)\n   ?start =\n  Some ?res \\<Longrightarrow>\n  fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) ?l1.0\n   ?start \\<noteq>\n  None\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) subs \\<noteq> None", "by (fastforce split: if_splits)"], ["", "(* I should have defined a custom induction rule here, instead I copied the structure of the proof \n  each time... Clean up when time\n*)"], ["", "lemma raw_match'_tvsT_subset_dom_res: \"raw_match' T U subs = Some subs' \\<Longrightarrow> tvsT T \\<subseteq> dom subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U subs = Some subs' \\<Longrightarrow>\n    tvsT T \\<subseteq> dom subs'", "proof (induction T U subs arbitrary: subs' rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tvsT (Tv v S) \\<subseteq> dom subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvsT xa \\<subseteq> dom subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a Ts) \\<subseteq> dom subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tvsT (Ty v va) \\<subseteq> dom subs'", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?xa \\<subseteq> dom ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tvsT (Tv v S) \\<subseteq> dom subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvsT xa \\<subseteq> dom subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a Ts) \\<subseteq> dom subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tvsT (Ty v va) \\<subseteq> dom subs'", "have l: \"length Ts = length Us\" \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?xa \\<subseteq> dom ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (metis option.discI raw_match'.simps(2))+"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tvsT (Tv v S) \\<subseteq> dom subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvsT xa \\<subseteq> dom subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a Ts) \\<subseteq> dom subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tvsT (Ty v va) \\<subseteq> dom subs'", "from this 2"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?xa \\<subseteq> dom ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'", "have better_IH: \n    \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> raw_match' x y subs = Some subs' \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\"\n    for x y subs subs'"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?xa \\<subseteq> dom ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     raw_match' x y subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> tvsT x \\<subseteq> dom subs'", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tvsT (Tv v S) \\<subseteq> dom subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvsT xa \\<subseteq> dom subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a Ts) \\<subseteq> dom subs'\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tvsT (Ty v va) \\<subseteq> dom subs'", "from l \"2.prems\" better_IH"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. tvsT (Ty a Ts) \\<subseteq> dom subs'", "proof (induction Ts Us arbitrary: a b subs subs' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b subs subs'.\n       \\<lbrakk>a = b; raw_match' (constT a) (constT b) subs = Some subs';\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (constT a) \\<subseteq> dom subs'\n 2. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "case Nil"], ["proof (state)\nthis:\n  a = b\n  raw_match' (constT a) (constT b) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'\n\ngoal (2 subgoals):\n 1. \\<And>a b subs subs'.\n       \\<lbrakk>a = b; raw_match' (constT a) (constT b) subs = Some subs';\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (constT a) \\<subseteq> dom subs'\n 2. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "then"], ["proof (chain)\npicking this:\n  a = b\n  raw_match' (constT a) (constT b) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  raw_match' (constT a) (constT b) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. tvsT (constT a) \\<subseteq> dom subs'", "by simp"], ["proof (state)\nthis:\n  tvsT (constT a) \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>?a = ?b; raw_match' (Ty ?a xs) (Ty ?b ys) ?subs = Some ?subs';\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs'\\<rbrakk>\n      \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT (Ty ?a xs) \\<subseteq> dom ?subs'\n  a = b\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "obtain point where point: \"raw_match' x y subs = Some point\"\n      and rest: \"raw_match' (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         raw_match' (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems(1) Cons.prems(2) fold_matches_first_step_not_None \n          raw_match'.simps(2) raw_match'_Type_conds(2))"], ["proof (state)\nthis:\n  raw_match' x y subs = Some point\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "have \"tvsT (Ty a xs) \\<subseteq> dom subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvsT (Ty a xs) \\<subseteq> dom subs'", "apply (rule Cons.IH[of _ b point])"], ["proof (prove)\ngoal (3 subgoals):\n 1. a = b\n 2. raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n 3. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT x \\<subseteq> dom subs'", "using Cons.prems rest"], ["proof (prove)\nusing this:\n  a = b\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvsT ?x \\<subseteq> dom ?subs'\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (3 subgoals):\n 1. a = b\n 2. raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n 3. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT x \\<subseteq> dom subs'", "apply blast+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT x \\<subseteq> dom subs'", "by (metis Cons.prems(3) list.set_intros(2) zip_Cons_Cons)"], ["proof (state)\nthis:\n  tvsT (Ty a xs) \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "moreover"], ["proof (state)\nthis:\n  tvsT (Ty a xs) \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "have \"tvsT x \\<subseteq> dom point\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvsT x \\<subseteq> dom point", "by (metis Cons.prems(3) list.set_intros(1) point zip_Cons_Cons)"], ["proof (state)\nthis:\n  tvsT x \\<subseteq> dom point\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "moreover"], ["proof (state)\nthis:\n  tvsT x \\<subseteq> dom point\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "have \"dom point \\<subseteq> dom subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom point \\<subseteq> dom subs'", "using map_le_implies_dom_le raw_match'_map_le rest"], ["proof (prove)\nusing this:\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. dom point \\<subseteq> dom subs'", "by blast"], ["proof (state)\nthis:\n  dom point \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tvsT x \\<subseteq> dom subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT (Ty a xs) \\<subseteq> dom subs';\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvsT xa \\<subseteq> dom subs'\\<rbrakk>\n       \\<Longrightarrow> tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "ultimately"], ["proof (chain)\npicking this:\n  tvsT (Ty a xs) \\<subseteq> dom subs'\n  tvsT x \\<subseteq> dom point\n  dom point \\<subseteq> dom subs'", "show ?case"], ["proof (prove)\nusing this:\n  tvsT (Ty a xs) \\<subseteq> dom subs'\n  tvsT x \\<subseteq> dom point\n  dom point \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. tvsT (Ty a (x # xs)) \\<subseteq> dom subs'", "by auto"], ["proof (state)\nthis:\n  tvsT (Ty a (x # xs)) \\<subseteq> dom subs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tvsT (Ty a Ts) \\<subseteq> dom subs'\n\ngoal (2 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tvsT (Tv v S) \\<subseteq> dom subs'\n 2. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tvsT (Ty v va) \\<subseteq> dom subs'", "qed (auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv)"], ["", "lemma raw_match'_dom_res_subset_tvsT: \n  \"raw_match' T U subs = Some subs' \\<Longrightarrow> dom subs' \\<subseteq> tvsT T \\<union> dom subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U subs = Some subs' \\<Longrightarrow>\n    dom subs' \\<subseteq> tvsT T \\<union> dom subs", "proof (induction T U subs arbitrary: subs' rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Tv v S) \\<union> dom subs\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvsT xa \\<union> dom aa;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a Ts) \\<union> dom subs\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Ty v va) \\<union> dom subs", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?xa \\<union> dom ?aa\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Tv v S) \\<union> dom subs\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvsT xa \\<union> dom aa;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a Ts) \\<union> dom subs\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Ty v va) \\<union> dom subs", "have l: \"length Ts = length Us\" \"a = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?xa \\<union> dom ?aa\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (metis option.discI raw_match'.simps(2))+"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Tv v S) \\<union> dom subs\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvsT xa \\<union> dom aa;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a Ts) \\<union> dom subs\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Ty v va) \\<union> dom subs", "from this 2"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?xa \\<union> dom ?aa\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'", "have better_IH: \n    \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> raw_match' x y subs = Some subs' \n      \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs\"\n    for x y subs subs'"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?xa \\<union> dom ?aa\n  raw_match' (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     raw_match' x y subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Tv v S) \\<union> dom subs\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvsT xa \\<union> dom aa;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a Ts) \\<union> dom subs\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Ty v va) \\<union> dom subs", "from l \"2.prems\" better_IH"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvsT (Ty a Ts) \\<union> dom subs", "proof (induction Ts Us arbitrary: a b subs subs' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b subs subs'.\n       \\<lbrakk>a = b; raw_match' (constT a) (constT b) subs = Some subs';\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT x \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (constT a) \\<union> dom subs\n 2. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "case Nil"], ["proof (state)\nthis:\n  a = b\n  raw_match' (constT a) (constT b) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n\ngoal (2 subgoals):\n 1. \\<And>a b subs subs'.\n       \\<lbrakk>a = b; raw_match' (constT a) (constT b) subs = Some subs';\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT x \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (constT a) \\<union> dom subs\n 2. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "then"], ["proof (chain)\npicking this:\n  a = b\n  raw_match' (constT a) (constT b) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  raw_match' (constT a) (constT b) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvsT (constT a) \\<union> dom subs", "by simp"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvsT (constT a) \\<union> dom subs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>?a = ?b; raw_match' (Ty ?a xs) (Ty ?b ys) ?subs = Some ?subs';\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs'\\<rbrakk>\n      \\<Longrightarrow> dom subs'\n                        \\<subseteq> tvsT x \\<union> dom subs\\<rbrakk>\n  \\<Longrightarrow> dom ?subs'\n                    \\<subseteq> tvsT (Ty ?a xs) \\<union> dom ?subs\n  a = b\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "obtain point where first: \"raw_match' x y subs = Some point\"\n      and rest: \"raw_match' (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         raw_match' (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems(1) Cons.prems(2) fold_matches_first_step_not_None raw_match'.simps(2) raw_match'_Type_conds(2))"], ["proof (state)\nthis:\n  raw_match' x y subs = Some point\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "from first"], ["proof (chain)\npicking this:\n  raw_match' x y subs = Some point", "have \"dom point \\<subseteq> tvsT x \\<union> dom subs\""], ["proof (prove)\nusing this:\n  raw_match' x y subs = Some point\n\ngoal (1 subgoal):\n 1. dom point \\<subseteq> tvsT x \\<union> dom subs", "using Cons.prems(3)"], ["proof (prove)\nusing this:\n  raw_match' x y subs = Some point\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom point \\<subseteq> tvsT x \\<union> dom subs", "by fastforce"], ["proof (state)\nthis:\n  dom point \\<subseteq> tvsT x \\<union> dom subs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "moreover"], ["proof (state)\nthis:\n  dom point \\<subseteq> tvsT x \\<union> dom subs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "have \"dom subs' \\<subseteq> tvsT (Ty a xs) \\<union> dom point\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvsT (Ty a xs) \\<union> dom point", "apply (rule Cons.IH)"], ["proof (prove)\ngoal (3 subgoals):\n 1. a = ?b\n 2. raw_match' (Ty a xs) (Ty ?b ys) point = Some subs'\n 3. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs", "using Cons.prems(1)"], ["proof (prove)\nusing this:\n  a = b\n\ngoal (3 subgoals):\n 1. a = ?b\n 2. raw_match' (Ty a xs) (Ty ?b ys) point = Some subs'\n 3. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n 2. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs", "using Cons.prems(2) rest"], ["proof (prove)\nusing this:\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (2 subgoals):\n 1. raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n 2. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        raw_match' x y subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvsT x \\<union> dom subs", "by (metis Cons.prems(3) list.set_intros(2) zip_Cons_Cons)"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvsT (Ty a xs) \\<union> dom point\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys a b subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>a b subs subs'.\n           \\<lbrakk>a = b; raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> dom subs'\n                                 \\<subseteq> tvsT x \\<union>\n       dom subs\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT (Ty a xs) \\<union> dom subs;\n        a = b; raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs'\n                             \\<subseteq> tvsT xa \\<union> dom subs\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "ultimately"], ["proof (chain)\npicking this:\n  dom point \\<subseteq> tvsT x \\<union> dom subs\n  dom subs' \\<subseteq> tvsT (Ty a xs) \\<union> dom point", "show ?case"], ["proof (prove)\nusing this:\n  dom point \\<subseteq> tvsT x \\<union> dom subs\n  dom subs' \\<subseteq> tvsT (Ty a xs) \\<union> dom point\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "using Cons.prems in_mono"], ["proof (prove)\nusing this:\n  dom point \\<subseteq> tvsT x \\<union> dom subs\n  dom subs' \\<subseteq> tvsT (Ty a xs) \\<union> dom point\n  a = b\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvsT ?x \\<union> dom ?subs\n  ?A \\<subseteq> ?B \\<Longrightarrow>\n  ?x \\<in> ?A \\<longrightarrow> ?x \\<in> ?B\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs", "apply (clarsimp split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv domIff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b ya.\n       \\<lbrakk>\\<And>xa ya subs subs'.\n                   \\<lbrakk>xa = x \\<and> ya = y \\<or>\n                            (xa, ya) \\<in> set (zip xs ys);\n                    raw_match' xa ya subs = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvsT xa \\<union> dom subs;\n        \\<And>A B x.\n           A \\<subseteq> B \\<Longrightarrow>\n           x \\<in> A \\<longrightarrow> x \\<in> B;\n        dom point \\<subseteq> tvsT x \\<union> dom subs;\n        dom subs' \\<subseteq> tvsT_Set (set xs) \\<union> dom point; a = b;\n        length xs = length ys;\n        fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip xs ys) (raw_match' x y subs) =\n        Some subs';\n        subs (a, b) = None; \\<forall>x\\<in>set xs. (a, b) \\<notin> tvsT x;\n        subs' (a, b) = Some ya\\<rbrakk>\n       \\<Longrightarrow> (a, b) \\<in> tvsT x", "by (smt UN_iff Un_iff domIff in_mono option.distinct(1))"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs\n\ngoal:\nNo subgoals!", "(*by fastforce, but too slow, check later *)"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvsT (Ty a (x # xs)) \\<union> dom subs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvsT (Ty a Ts) \\<union> dom subs\n\ngoal (2 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Tv v S) \\<union> dom subs\n 2. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvsT (Ty v va) \\<union> dom subs", "qed (auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv)"], ["", "corollary raw_match'_dom_res_eq_tvsT: \n  \"raw_match' T U subs = Some subs' \\<Longrightarrow> dom subs' = tvsT T \\<union> dom subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U subs = Some subs' \\<Longrightarrow>\n    dom subs' = tvsT T \\<union> dom subs", "by (simp add: map_le_implies_dom_le raw_match'_tvsT_subset_dom_res \n      raw_match'_dom_res_subset_tvsT raw_match'_map_le subset_antisym)"], ["", "corollary raw_match'_dom_res_eq_tvsT_empty: \n  \"raw_match' T U (\\<lambda>x. None) = Some subs' \\<Longrightarrow> dom subs' = tvsT T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U Map.empty = Some subs' \\<Longrightarrow>\n    dom subs' = tvsT T", "using raw_match'_dom_res_eq_tvsT"], ["proof (prove)\nusing this:\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' = tvsT ?T \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. raw_match' T U Map.empty = Some subs' \\<Longrightarrow>\n    dom subs' = tvsT T", "by simp"], ["", "lemma raw_match'_map_defined: \"raw_match' T U subs = Some subs' \\<Longrightarrow> p\\<in>tvsT T \\<Longrightarrow> subs' p ~= None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some subs'; p \\<in> tvsT T\\<rbrakk>\n    \\<Longrightarrow> subs' p \\<noteq> None", "using raw_match'_dom_res_eq_tvsT"], ["proof (prove)\nusing this:\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' = tvsT ?T \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some subs'; p \\<in> tvsT T\\<rbrakk>\n    \\<Longrightarrow> subs' p \\<noteq> None", "by blast"], ["", "lemma raw_match'_extend_map_preserve:\n  \"raw_match' T U subs = Some subs' \\<Longrightarrow> map_le subs' subs'' \\<Longrightarrow> p\\<in>tvsT T \\<Longrightarrow> subs'' p = subs' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some subs';\n     subs' \\<subseteq>\\<^sub>m subs''; p \\<in> tvsT T\\<rbrakk>\n    \\<Longrightarrow> subs'' p = subs' p", "using raw_match'_dom_res_eq_tvsT domIff map_le_implies_dom_le"], ["proof (prove)\nusing this:\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' = tvsT ?T \\<union> dom ?subs\n  (?a \\<in> dom ?m) = (?m ?a \\<noteq> None)\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some subs';\n     subs' \\<subseteq>\\<^sub>m subs''; p \\<in> tvsT T\\<rbrakk>\n    \\<Longrightarrow> subs'' p = subs' p", "by (simp add: map_le_def)"], ["", "abbreviation \"convert_subs subs \\<equiv> (\\<lambda>v S . the_default (Tv v S) (subs (v, S)))\""], ["", "lemma map_eq_on_tvsT_imp_map_eq_on_typ:\n  \"(\\<And>p . p\\<in>tvsT T \\<Longrightarrow> subs p = subs' p) \n  \\<Longrightarrow> tsubstT T (convert_subs subs)\n    = tsubstT T (convert_subs subs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> tvsT T \\<Longrightarrow> subs p = subs' p) \\<Longrightarrow>\n    tsubstT T (convert_subs subs) = tsubstT T (convert_subs subs')", "by (induction T) auto"], ["", "lemma raw_match'_extend_map_preserve':\n  assumes \"raw_match' T U subs = Some subs'\" \"map_le subs' subs''\"\n  shows \"tsubstT T (convert_subs subs')\n    = tsubstT T (convert_subs subs'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubstT T (convert_subs subs') = tsubstT T (convert_subs subs'')", "apply (rule map_eq_on_tvsT_imp_map_eq_on_typ)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> tvsT T \\<Longrightarrow> subs' p = subs'' p", "using raw_match'_extend_map_preserve assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   ?subs' \\<subseteq>\\<^sub>m ?subs''; ?p \\<in> tvsT ?T\\<rbrakk>\n  \\<Longrightarrow> ?subs'' ?p = ?subs' ?p\n  raw_match' T U subs = Some subs'\n  subs' \\<subseteq>\\<^sub>m subs''\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> tvsT T \\<Longrightarrow> subs' p = subs'' p", "by metis"], ["", "lemma raw_match'_produces_matcher:\n  \"raw_match' T U subs = Some subs' \n    \\<Longrightarrow> tsubstT T (convert_subs subs') = U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U subs = Some subs' \\<Longrightarrow>\n    tsubstT T (convert_subs subs') = U", "proof (induction T U subs arbitrary: subs' rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tsubstT (Tv v S) (convert_subs subs') = T\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tsubstT (Ty v va) (convert_subs subs') = Tv vb vc", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tsubstT (Tv v S) (convert_subs subs') = T\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tsubstT (Ty v va) (convert_subs subs') = Tv vb vc", "hence l: \"length Ts = length Us\" \"a=b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tsubstT (Tv v S) (convert_subs subs') = T\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tsubstT (Ty v va) (convert_subs subs') = Tv vb vc", "from this 2"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'", "have better_IH: \n    \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> raw_match' x y subs = Some subs' \n    \\<Longrightarrow> tsubstT x (convert_subs subs') = y\"\n    for x y subs subs'"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     raw_match' x y subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> tsubstT x (convert_subs subs') = y", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tsubstT (Tv v S) (convert_subs subs') = T\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us\n 3. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tsubstT (Ty v va) (convert_subs subs') = Tv vb vc", "from l better_IH"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n\ngoal (1 subgoal):\n 1. tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us", "using 2"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us", "proof(induction Ts Us arbitrary: subs subs' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n        \\<And>x xa y xb aa subs'.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x; xb = Some aa;\n            raw_match' xa y aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n        raw_match' (constT a) (constT b) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (constT a) (convert_subs subs') = constT b\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "case Nil"], ["proof (state)\nthis:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (constT a) (constT b) subs = Some subs'\n\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n        \\<And>x xa y xb aa subs'.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x; xb = Some aa;\n            raw_match' xa y aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n        raw_match' (constT a) (constT b) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (constT a) (convert_subs subs') = constT b\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "then"], ["proof (chain)\npicking this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (constT a) (constT b) subs = Some subs'", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (constT a) (constT b) subs = Some subs'\n\ngoal (1 subgoal):\n 1. tsubstT (constT a) (convert_subs subs') = constT b", "by simp"], ["proof (state)\nthis:\n  tsubstT (constT a) (convert_subs subs') = constT b\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs'\\<rbrakk>\n      \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n   \\<And>x xa y xb aa subs'.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs'\\<rbrakk>\n      \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs ?subs') = Ty b ys\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "obtain point where first: \"raw_match' x y subs = Some point\"\n      and rest: \"raw_match' (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         raw_match' (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems(4) fold_matches_first_step_not_None l(2) length_Cons raw_match'.simps(2))"], ["proof (state)\nthis:\n  raw_match' x y subs = Some point\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "have \"tsubstT x (convert_subs point) = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubstT x (convert_subs point) = y", "using Cons.prems(2) first"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  raw_match' x y subs = Some point\n\ngoal (1 subgoal):\n 1. tsubstT x (convert_subs point) = y", "by auto"], ["proof (state)\nthis:\n  tsubstT x (convert_subs point) = y\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "moreover"], ["proof (state)\nthis:\n  tsubstT x (convert_subs point) = y\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "have \"map_le point subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. point \\<subseteq>\\<^sub>m subs'", "using raw_match'_map_le rest"], ["proof (prove)\nusing this:\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. point \\<subseteq>\\<^sub>m subs'", "by blast"], ["proof (state)\nthis:\n  point \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "ultimately"], ["proof (chain)\npicking this:\n  tsubstT x (convert_subs point) = y\n  point \\<subseteq>\\<^sub>m subs'", "have subs'_hd: \"tsubstT x (convert_subs subs') = y\""], ["proof (prove)\nusing this:\n  tsubstT x (convert_subs point) = y\n  point \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. tsubstT x (convert_subs subs') = y", "using raw_match'_extend_map_preserve' first"], ["proof (prove)\nusing this:\n  tsubstT x (convert_subs point) = y\n  point \\<subseteq>\\<^sub>m subs'\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   ?subs' \\<subseteq>\\<^sub>m ?subs''\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?T (convert_subs ?subs') =\n                    tsubstT ?T (convert_subs ?subs'')\n  raw_match' x y subs = Some point\n\ngoal (1 subgoal):\n 1. tsubstT x (convert_subs subs') = y", "by simp"], ["proof (state)\nthis:\n  tsubstT x (convert_subs subs') = y\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n            \\<And>x xa y xb aa subs'.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs'\\<rbrakk>\n               \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs subs') =\n                             Ty b ys;\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xa (convert_subs subs') = ya;\n        \\<And>xa xaa ya xb aa subs'.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubstT xaa (convert_subs subs') = ya;\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubstT (Ty a (x # xs)) (convert_subs subs') =\n                         Ty b (y # ys)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubstT (Ty a (x # xs)) (convert_subs subs') = Ty b (y # ys)", "using Cons"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs'\\<rbrakk>\n      \\<Longrightarrow> tsubstT x (convert_subs subs') = y;\n   \\<And>x xa y xb aa subs'.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs'\\<rbrakk>\n      \\<Longrightarrow> tsubstT xa (convert_subs subs') = y;\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT (Ty a xs) (convert_subs ?subs') = Ty b ys\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?x (convert_subs ?subs') = ?y\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?xa (convert_subs ?subs') = ?y\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n\ngoal (1 subgoal):\n 1. tsubstT (Ty a (x # xs)) (convert_subs subs') = Ty b (y # ys)", "by (auto simp add: bind_eq_Some_conv subs'_hd first)"], ["proof (state)\nthis:\n  tsubstT (Ty a (x # xs)) (convert_subs subs') = Ty b (y # ys)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tsubstT (Ty a Ts) (convert_subs subs') = Ty b Us\n\ngoal (2 subgoals):\n 1. \\<And>v S T subs subs'.\n       raw_match' (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       tsubstT (Tv v S) (convert_subs subs') = T\n 2. \\<And>v va vb vc subs subs'.\n       raw_match' (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       tsubstT (Ty v va) (convert_subs subs') = Tv vb vc", "qed (auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv)"], ["", "lemma tsubstT_matcher_imp_raw_match'_unchanged:\n  \"tsubstT T \\<rho> = U \\<Longrightarrow> raw_match' T U (\\<lambda>(idx, S). Some (\\<rho> idx S)) = Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubstT T \\<rho> = U \\<Longrightarrow>\n    raw_match' T U (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n    Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "proof (induction T arbitrary: U \\<rho>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1 x2 U \\<rho>.\n       \\<lbrakk>\\<And>x2a U \\<rho>.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    tsubstT x2a \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' x2a U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty x1 x2) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty x1 x2) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n 2. \\<And>x1 x2 U \\<rho>.\n       tsubstT (Tv x1 x2) \\<rho> = U \\<Longrightarrow>\n       raw_match' (Tv x1 x2) U (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n       Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "case (Ty a Ts)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> set Ts; tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (Ty a Ts) \\<rho> = U\n\ngoal (2 subgoals):\n 1. \\<And>x1 x2 U \\<rho>.\n       \\<lbrakk>\\<And>x2a U \\<rho>.\n                   \\<lbrakk>x2a \\<in> set x2;\n                    tsubstT x2a \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' x2a U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty x1 x2) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty x1 x2) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n 2. \\<And>x1 x2 U \\<rho>.\n       tsubstT (Tv x1 x2) \\<rho> = U \\<Longrightarrow>\n       raw_match' (Tv x1 x2) U (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n       Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2a \\<in> set Ts; tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (Ty a Ts) \\<rho> = U", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a \\<in> set Ts; tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (Ty a Ts) \\<rho> = U\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) U\n     (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n    Some (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S))", "proof (induction Ts arbitrary: U)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>\\<And>x2a \\<rho> U.\n                   \\<lbrakk>x2a \\<in> set [];\n                    tsubstT x2a \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' x2a U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (constT a) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n 2. \\<And>aa Ts U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>\\<And>x2a \\<rho> U.\n                               \\<lbrakk>x2a \\<in> set Ts;\n                                tsubstT x2a \\<rho> = U\\<rbrakk>\n                               \\<Longrightarrow> raw_match' x2a U\n            (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n           Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n                    tsubstT (Ty a Ts) \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' (Ty a Ts) U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        \\<And>x2a \\<rho> U.\n           \\<lbrakk>x2a \\<in> set (aa # Ts); tsubstT x2a \\<rho> = U\\<rbrakk>\n           \\<Longrightarrow> raw_match' x2a U\n                              (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                             Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty a (aa # Ts)) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (aa # Ts)) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "case Nil"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> set []; tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (constT a) \\<rho> = U\n\ngoal (2 subgoals):\n 1. \\<And>U.\n       \\<lbrakk>\\<And>x2a \\<rho> U.\n                   \\<lbrakk>x2a \\<in> set [];\n                    tsubstT x2a \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' x2a U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (constT a) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n 2. \\<And>aa Ts U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>\\<And>x2a \\<rho> U.\n                               \\<lbrakk>x2a \\<in> set Ts;\n                                tsubstT x2a \\<rho> = U\\<rbrakk>\n                               \\<Longrightarrow> raw_match' x2a U\n            (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n           Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n                    tsubstT (Ty a Ts) \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' (Ty a Ts) U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        \\<And>x2a \\<rho> U.\n           \\<lbrakk>x2a \\<in> set (aa # Ts); tsubstT x2a \\<rho> = U\\<rbrakk>\n           \\<Longrightarrow> raw_match' x2a U\n                              (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                             Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty a (aa # Ts)) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (aa # Ts)) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2a \\<in> set []; tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (constT a) \\<rho> = U", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a \\<in> set []; tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (constT a) \\<rho> = U\n\ngoal (1 subgoal):\n 1. raw_match' (constT a) U\n     (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n    Some (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S))", "by auto"], ["proof (state)\nthis:\n  raw_match' (constT a) U\n   (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n  Some (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. \\<And>aa Ts U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>\\<And>x2a \\<rho> U.\n                               \\<lbrakk>x2a \\<in> set Ts;\n                                tsubstT x2a \\<rho> = U\\<rbrakk>\n                               \\<Longrightarrow> raw_match' x2a U\n            (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n           Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n                    tsubstT (Ty a Ts) \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' (Ty a Ts) U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        \\<And>x2a \\<rho> U.\n           \\<lbrakk>x2a \\<in> set (aa # Ts); tsubstT x2a \\<rho> = U\\<rbrakk>\n           \\<Longrightarrow> raw_match' x2a U\n                              (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                             Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty a (aa # Ts)) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (aa # Ts)) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa Ts U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>\\<And>x2a \\<rho> U.\n                               \\<lbrakk>x2a \\<in> set Ts;\n                                tsubstT x2a \\<rho> = U\\<rbrakk>\n                               \\<Longrightarrow> raw_match' x2a U\n            (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n           Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n                    tsubstT (Ty a Ts) \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' (Ty a Ts) U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        \\<And>x2a \\<rho> U.\n           \\<lbrakk>x2a \\<in> set (aa # Ts); tsubstT x2a \\<rho> = U\\<rbrakk>\n           \\<Longrightarrow> raw_match' x2a U\n                              (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                             Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty a (aa # Ts)) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (aa # Ts)) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "case (Cons T Ts)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>x2a \\<rho> U.\n              \\<lbrakk>x2a \\<in> set Ts; tsubstT x2a \\<rho> = U\\<rbrakk>\n              \\<Longrightarrow> raw_match' x2a U\n                                 (\\<lambda>a.\n                                     case a of\n                                     (idx, S) \\<Rightarrow>\n Some (\\<rho> idx S)) =\n                                Some\n                                 (\\<lambda>a.\n                                     case a of\n                                     (idx, S) \\<Rightarrow>\n Some (\\<rho> idx S));\n   tsubstT (Ty a Ts) \\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a Ts) ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (\\<rho> idx S))\n  \\<lbrakk>?x2a \\<in> set (T # Ts); tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (Ty a (T # Ts)) \\<rho> = U\n\ngoal (1 subgoal):\n 1. \\<And>aa Ts U.\n       \\<lbrakk>\\<And>U.\n                   \\<lbrakk>\\<And>x2a \\<rho> U.\n                               \\<lbrakk>x2a \\<in> set Ts;\n                                tsubstT x2a \\<rho> = U\\<rbrakk>\n                               \\<Longrightarrow> raw_match' x2a U\n            (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n           Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n                    tsubstT (Ty a Ts) \\<rho> = U\\<rbrakk>\n                   \\<Longrightarrow> raw_match' (Ty a Ts) U\n(\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                                     Some\n(\\<lambda>(idx, S). Some (\\<rho> idx S));\n        \\<And>x2a \\<rho> U.\n           \\<lbrakk>x2a \\<in> set (aa # Ts); tsubstT x2a \\<rho> = U\\<rbrakk>\n           \\<Longrightarrow> raw_match' x2a U\n                              (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                             Some (\\<lambda>(idx, S). Some (\\<rho> idx S));\n        tsubstT (Ty a (aa # Ts)) \\<rho> = U\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (aa # Ts)) U\n                          (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n                         Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>\\<And>x2a \\<rho> U.\n              \\<lbrakk>x2a \\<in> set Ts; tsubstT x2a \\<rho> = U\\<rbrakk>\n              \\<Longrightarrow> raw_match' x2a U\n                                 (\\<lambda>a.\n                                     case a of\n                                     (idx, S) \\<Rightarrow>\n Some (\\<rho> idx S)) =\n                                Some\n                                 (\\<lambda>a.\n                                     case a of\n                                     (idx, S) \\<Rightarrow>\n Some (\\<rho> idx S));\n   tsubstT (Ty a Ts) \\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a Ts) ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (\\<rho> idx S))\n  \\<lbrakk>?x2a \\<in> set (T # Ts); tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (Ty a (T # Ts)) \\<rho> = U", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>x2a \\<rho> U.\n              \\<lbrakk>x2a \\<in> set Ts; tsubstT x2a \\<rho> = U\\<rbrakk>\n              \\<Longrightarrow> raw_match' x2a U\n                                 (\\<lambda>a.\n                                     case a of\n                                     (idx, S) \\<Rightarrow>\n Some (\\<rho> idx S)) =\n                                Some\n                                 (\\<lambda>a.\n                                     case a of\n                                     (idx, S) \\<Rightarrow>\n Some (\\<rho> idx S));\n   tsubstT (Ty a Ts) \\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a Ts) ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (\\<rho> idx S))\n  \\<lbrakk>?x2a \\<in> set (T # Ts); tsubstT ?x2a ?\\<rho> = ?U\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x2a ?U\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S)) =\n                    Some\n                     (\\<lambda>a.\n                         case a of\n                         (idx, S) \\<Rightarrow> Some (?\\<rho> idx S))\n  tsubstT (Ty a (T # Ts)) \\<rho> = U\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (T # Ts)) U\n     (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n    Some (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S))", "by auto"], ["proof (state)\nthis:\n  raw_match' (Ty a (T # Ts)) U\n   (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n  Some (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) U\n   (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S)) =\n  Some (\\<lambda>a. case a of (idx, S) \\<Rightarrow> Some (\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. \\<And>x1 x2 U \\<rho>.\n       tsubstT (Tv x1 x2) \\<rho> = U \\<Longrightarrow>\n       raw_match' (Tv x1 x2) U (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n       Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "qed auto"], ["", "lemma raw_match'_imp_raw_match'_on_map_le:\n  assumes \"raw_match' T U subs = Some subs'\"\n  assumes \"map_le lesubs subs\"\n  shows \"\\<exists>lesubs'. raw_match' T U lesubs = Some lesubs' \\<and> map_le lesubs' subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' T U lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using assms"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' T U lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "proof (induction T U subs arbitrary: lesubs subs' rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs lesubs subs'.\n       \\<lbrakk>raw_match' (Tv v S) T subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Tv v S) T lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "case (1 v S T subs lesubs subs')"], ["proof (state)\nthis:\n  raw_match' (Tv v S) T subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs lesubs subs'.\n       \\<lbrakk>raw_match' (Tv v S) T subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Tv v S) T lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "then"], ["proof (chain)\npicking this:\n  raw_match' (Tv v S) T subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "show ?case"], ["proof (prove)\nusing this:\n  raw_match' (Tv v S) T subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Tv v S) T lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "by (force split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv map_le_def\n        intro!: domI)"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match' (Tv v S) T lesubs = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "hence l: \"length Ts = length Us\" \"a=b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "from this 2"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "have better_IH: \n    \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> raw_match' x y subs = Some subs' \n    \\<Longrightarrow> lesubs \\<subseteq>\\<^sub>m subs \\<Longrightarrow> \\<exists>lesubs'. raw_match' x y lesubs = Some lesubs' \\<and> lesubs' \\<subseteq>\\<^sub>m subs'\"\n    for x y subs lesubs subs'"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n  lesubsa__ \\<subseteq>\\<^sub>m subsa__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us); raw_match' x y subs = Some subs';\n     lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>lesubs'.\n                         raw_match' x y lesubs = Some lesubs' \\<and>\n                         lesubs' \\<subseteq>\\<^sub>m subs'", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs lesubs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa lesubs subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match' xa y lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a Ts) (Ty b Us) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "from l better_IH"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Ty a Ts) (Ty b Us) lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using 2"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Ty a Ts) (Ty b Us) lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "proof(induction Ts Us arbitrary: subs lesubs subs' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs lesubs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs' lesubs.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' x y lesubs = Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>x xa y xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x; xb = Some aa;\n            raw_match' xa y aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa y lesubs = Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (constT a) (constT b) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (constT a) (constT b) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "case Nil"], ["proof (state)\nthis:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (constT a) (constT b) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (2 subgoals):\n 1. \\<And>subs lesubs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs' lesubs.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' x y lesubs = Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>x xa y xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x; xb = Some aa;\n            raw_match' xa y aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa y lesubs = Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (constT a) (constT b) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (constT a) (constT b) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "then"], ["proof (chain)\npicking this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (constT a) (constT b) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (constT a) (constT b) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (constT a) (constT b) lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "by simp"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match' (constT a) (constT b) lesubs = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs' lesubs.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs';\n       lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n      \\<Longrightarrow> \\<exists>lesubs'.\n                           raw_match' x y lesubs = Some lesubs' \\<and>\n                           lesubs' \\<subseteq>\\<^sub>m subs';\n   \\<And>x xa y xb aa subs' lesubs.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs';\n       lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n      \\<Longrightarrow> \\<exists>lesubs'.\n                           raw_match' xa y lesubs = Some lesubs' \\<and>\n                           lesubs' \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' (Ty a xs) (Ty b ys) ?lesubs =\n                       Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "obtain point where first: \"raw_match' x y subs = Some point\"\n      and rest: \"raw_match' (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         raw_match' (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems(4) fold_matches_first_step_not_None l(2) length_Cons raw_match'.simps(2))"], ["proof (state)\nthis:\n  raw_match' x y subs = Some point\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "have \"\\<exists>lepoint. raw_match' x y lesubs = Some lepoint \\<and> lepoint \\<subseteq>\\<^sub>m point\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lepoint.\n       raw_match' x y lesubs = Some lepoint \\<and>\n       lepoint \\<subseteq>\\<^sub>m point", "using Cons first"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs' lesubs.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs';\n       lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n      \\<Longrightarrow> \\<exists>lesubs'.\n                           raw_match' x y lesubs = Some lesubs' \\<and>\n                           lesubs' \\<subseteq>\\<^sub>m subs';\n   \\<And>x xa y xb aa subs' lesubs.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs';\n       lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n      \\<Longrightarrow> \\<exists>lesubs'.\n                           raw_match' xa y lesubs = Some lesubs' \\<and>\n                           lesubs' \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' (Ty a xs) (Ty b ys) ?lesubs =\n                       Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n  raw_match' x y subs = Some point\n\ngoal (1 subgoal):\n 1. \\<exists>lepoint.\n       raw_match' x y lesubs = Some lepoint \\<and>\n       lepoint \\<subseteq>\\<^sub>m point", "by auto"], ["proof (state)\nthis:\n  \\<exists>lepoint.\n     raw_match' x y lesubs = Some lepoint \\<and>\n     lepoint \\<subseteq>\\<^sub>m point\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "from this"], ["proof (chain)\npicking this:\n  \\<exists>lepoint.\n     raw_match' x y lesubs = Some lepoint \\<and>\n     lepoint \\<subseteq>\\<^sub>m point", "obtain lepoint where \n        comp_lepoint: \"raw_match' x y lesubs = Some lepoint\" and le_lepoint: \"lepoint \\<subseteq>\\<^sub>m point\""], ["proof (prove)\nusing this:\n  \\<exists>lepoint.\n     raw_match' x y lesubs = Some lepoint \\<and>\n     lepoint \\<subseteq>\\<^sub>m point\n\ngoal (1 subgoal):\n 1. (\\<And>lepoint.\n        \\<lbrakk>raw_match' x y lesubs = Some lepoint;\n         lepoint \\<subseteq>\\<^sub>m point\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  raw_match' x y lesubs = Some lepoint\n  lepoint \\<subseteq>\\<^sub>m point\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "have \"\\<exists>lesubs'. raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs' \\<and> lesubs' \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using Cons rest le_lepoint"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs' lesubs.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs';\n       lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n      \\<Longrightarrow> \\<exists>lesubs'.\n                           raw_match' x y lesubs = Some lesubs' \\<and>\n                           lesubs' \\<subseteq>\\<^sub>m subs';\n   \\<And>x xa y xb aa subs' lesubs.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs';\n       lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n      \\<Longrightarrow> \\<exists>lesubs'.\n                           raw_match' xa y lesubs = Some lesubs' \\<and>\n                           lesubs' \\<subseteq>\\<^sub>m subs';\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' (Ty a xs) (Ty b ys) ?lesubs =\n                       Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n  lepoint \\<subseteq>\\<^sub>m point\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "from this"], ["proof (chain)\npicking this:\n  \\<exists>lesubs'.\n     raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'", "obtain lesubs' where \n        comp_lesubs': \"raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs'\" \n        and le_lesubs': \"lesubs' \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\nusing this:\n  \\<exists>lesubs'.\n     raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs lesubs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs lesubs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' lesubs.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' x y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            \\<And>x xa y xb aa subs' lesubs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n               \\<Longrightarrow> \\<exists>lesubs'.\n                                    raw_match' xa y lesubs =\n                                    Some lesubs' \\<and>\n                                    lesubs' \\<subseteq>\\<^sub>m subs';\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' (Ty a xs) (Ty b ys) lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        a = b;\n        \\<And>xa ya subs subs' lesubs.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>xa xaa ya xb aa subs' lesubs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            lesubs \\<subseteq>\\<^sub>m aa\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match' xaa ya lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                             lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Ty a (x # xs)) (Ty b (y # ys)) lesubs =\n       Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using Cons.prems Cons.hyps comp_lepoint comp_lesubs' le_lesubs'"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?x ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?aa\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?xa ?y ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n  length xs = length ys\n  raw_match' x y lesubs = Some lepoint\n  raw_match' (Ty a xs) (Ty b ys) lepoint = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match' (Ty a (x # xs)) (Ty b (y # ys)) lesubs =\n       Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "by auto"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match' (Ty a (x # xs)) (Ty b (y # ys)) lesubs = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match' (Ty a Ts) (Ty b Us) lesubs = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<And>v va vb vc subs lesubs subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match' (Ty v va) (Tv vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'", "qed (auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv)"], ["", "lemma map_le_same_dom_imp_same_map: \"dom f = dom g \\<Longrightarrow> map_le f g \\<Longrightarrow> f = g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dom f = dom g; f \\<subseteq>\\<^sub>m g\\<rbrakk>\n    \\<Longrightarrow> f = g", "by (simp add: map_le_antisym map_le_def)"], ["", "corollary map_le_produces_same_raw_match':\n  assumes \"raw_match' T U subs = Some subs'\"\n  assumes \"dom subs \\<subseteq> tvsT T\"\n  assumes \"map_le lesubs subs\"\n  shows \"raw_match' T U lesubs = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "have \"dom subs' = tvsT T\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom subs' = tvsT T", "using assms(1) assms(2) raw_match'_dom_res_eq_tvsT"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some subs'\n  dom subs \\<subseteq> tvsT T\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' = tvsT ?T \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom subs' = tvsT T", "by auto"], ["proof (state)\nthis:\n  dom subs' = tvsT T\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "moreover"], ["proof (state)\nthis:\n  dom subs' = tvsT T\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "obtain lesubs' where \"raw_match' T U lesubs = Some lesubs'\" \"map_le lesubs' subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match' T U lesubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using raw_match'_imp_raw_match'_on_map_le assms(1) assms(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match' ?T ?U ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match' T U subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match' T U lesubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "moreover"], ["proof (state)\nthis:\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "hence \"dom lesubs' = tvsT T\""], ["proof (prove)\nusing this:\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. dom lesubs' = tvsT T", "using \\<open>dom subs' = tvsT T\\<close> map_le_implies_dom_le raw_match'_tvsT_subset_dom_res"], ["proof (prove)\nusing this:\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom subs' = tvsT T\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  tvsT ?T \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. dom lesubs' = tvsT T", "by fastforce"], ["proof (state)\nthis:\n  dom lesubs' = tvsT T\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "ultimately"], ["proof (chain)\npicking this:\n  dom subs' = tvsT T\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom lesubs' = tvsT T", "show ?thesis"], ["proof (prove)\nusing this:\n  dom subs' = tvsT T\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom lesubs' = tvsT T\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "using map_le_same_dom_imp_same_map"], ["proof (prove)\nusing this:\n  dom subs' = tvsT T\n  raw_match' T U lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom lesubs' = tvsT T\n  \\<lbrakk>dom ?f = dom ?g; ?f \\<subseteq>\\<^sub>m ?g\\<rbrakk>\n  \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. raw_match' T U lesubs = Some subs'", "by metis"], ["proof (state)\nthis:\n  raw_match' T U lesubs = Some subs'\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary \"raw_match' T U subs = Some subs' \\<Longrightarrow> dom subs \\<subseteq> tvsT T \\<Longrightarrow>\n  raw_match' T U (\\<lambda>p . None) = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some subs';\n     dom subs \\<subseteq> tvsT T\\<rbrakk>\n    \\<Longrightarrow> raw_match' T U Map.empty = Some subs'", "using map_le_empty map_le_produces_same_raw_match'"], ["proof (prove)\nusing this:\n  Map.empty \\<subseteq>\\<^sub>m ?g\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   dom ?subs \\<subseteq> tvsT ?T; ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?T ?U ?lesubs = Some ?subs'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some subs';\n     dom subs \\<subseteq> tvsT T\\<rbrakk>\n    \\<Longrightarrow> raw_match' T U Map.empty = Some subs'", "by blast"], ["", "lemma raw_match'_restriction:\n  assumes \"raw_match' T U subs = Some subs'\"\n  assumes \" tvsT T \\<subseteq> restriction \"\n  shows \"raw_match' T U (subs|`restriction) = Some (subs'|`restriction)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U (subs |` restriction) = Some (subs' |` restriction)", "using assms"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some subs'\n  tvsT T \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. raw_match' T U (subs |` restriction) = Some (subs' |` restriction)", "proof (induction T U subs arbitrary: restriction subs' rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs restriction subs'.\n       \\<lbrakk>raw_match' (Tv v S) T subs = Some subs';\n        tvsT (Tv v S) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Tv v S) T (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 3. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "case (1 v S T subs)"], ["proof (state)\nthis:\n  raw_match' (Tv v S) T subs = Some subs'\n  tvsT (Tv v S) \\<subseteq> restriction\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs restriction subs'.\n       \\<lbrakk>raw_match' (Tv v S) T subs = Some subs';\n        tvsT (Tv v S) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Tv v S) T (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 3. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "then"], ["proof (chain)\npicking this:\n  raw_match' (Tv v S) T subs = Some subs'\n  tvsT (Tv v S) \\<subseteq> restriction", "show ?case"], ["proof (prove)\nusing this:\n  raw_match' (Tv v S) T subs = Some subs'\n  tvsT (Tv v S) \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. raw_match' (Tv v S) T (subs |` restriction) =\n    Some (subs' |` restriction)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(case subs (v, S) of\n              None \\<Rightarrow> Some (subs((v, S) \\<mapsto> T))\n              | Some U \\<Rightarrow> if U = T then Some subs else None) =\n             Some subs';\n     (v, S) \\<in> restriction\\<rbrakk>\n    \\<Longrightarrow> (case subs (v, S) of\n                       None \\<Rightarrow>\n                         Some ((subs |` restriction)((v, S) \\<mapsto> T))\n                       | Some U \\<Rightarrow>\n                           if U = T then Some (subs |` restriction)\n                           else None) =\n                      Some (subs' |` restriction)", "by (smt fun_upd_restrict_conv option.case_eq_if option.discI option.sel restrict_fun_upd)"], ["proof (state)\nthis:\n  raw_match' (Tv v S) T (subs |` restriction) = Some (subs' |` restriction)\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  tvsT (Ty a Ts) \\<subseteq> restriction\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "hence l: \"length Ts = length Us\" \"a=b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  tvsT (Ty a Ts) \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "from this 2"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  tvsT (Ty a Ts) \\<subseteq> restriction", "have better_IH: \n    \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> raw_match' x y subs = Some subs' \\<Longrightarrow> tvsT x \\<subseteq> restriction\n    \\<Longrightarrow> raw_match' x y (subs |` restriction) = Some (subs' |` restriction)\"\n    for x y subs restriction subs'"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n  tvsT (Ty a Ts) \\<subseteq> restrictiona__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us); raw_match' x y subs = Some subs';\n     tvsT x \\<subseteq> restriction\\<rbrakk>\n    \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                      Some (subs' |` restriction)", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs restriction subs'.\n       \\<lbrakk>\\<And>x xa y xb aa restriction subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    raw_match' xa y aa = Some subs';\n                    tvsT xa \\<subseteq> restriction\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                     Some (subs' |` restriction);\n        raw_match' (Ty a Ts) (Ty b Us) subs = Some subs';\n        tvsT (Ty a Ts) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "from l better_IH"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (subs |` restriction) =\n    Some (subs' |` restriction)", "using 2"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a Ts) (Ty b Us) subs = Some subs'\n  tvsT (Ty a Ts) \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (subs |` restriction) =\n    Some (subs' |` restriction)", "proof(induction Ts Us arbitrary: subs subs' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs' restriction.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs';\n            tvsT x \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>x xa y xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x; xb = Some aa;\n            raw_match' xa y aa = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (constT a) (constT b) subs = Some subs';\n        tvsT (constT a) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) (constT b)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "case Nil"], ["proof (state)\nthis:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (constT a) (constT b) subs = Some subs'\n  tvsT (constT a) \\<subseteq> restriction\n\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs' restriction.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            raw_match' x y subs = Some subs';\n            tvsT x \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>x xa y xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x; xb = Some aa;\n            raw_match' xa y aa = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (constT a) (constT b) subs = Some subs';\n        tvsT (constT a) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) (constT b)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "then"], ["proof (chain)\npicking this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (constT a) (constT b) subs = Some subs'\n  tvsT (constT a) \\<subseteq> restriction", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (constT a) (constT b) subs = Some subs'\n  tvsT (constT a) \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. raw_match' (constT a) (constT b) (subs |` restriction) =\n    Some (subs' |` restriction)", "by simp"], ["proof (state)\nthis:\n  raw_match' (constT a) (constT b) (subs |` restriction) =\n  Some (subs' |` restriction)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs' restriction.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs';\n       tvsT x \\<subseteq> restriction\\<rbrakk>\n      \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                        Some (subs' |` restriction);\n   \\<And>x xa y xb aa subs' restriction.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs';\n       tvsT xa \\<subseteq> restriction\\<rbrakk>\n      \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                        Some (subs' |` restriction);\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (?subs |` restriction) =\n                    Some (?subs' |` restriction)\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  tvsT (Ty a (x # xs)) \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "obtain point where first: \"raw_match' x y subs = Some point\"\n      and rest: \"raw_match' (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y subs = Some point;\n         raw_match' (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems(4) fold_matches_first_step_not_None l(2) \n          length_Cons raw_match'.simps(2))"], ["proof (state)\nthis:\n  raw_match' x y subs = Some point\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "have \"raw_match' x y (subs |` restriction) \n      = Some (point |` restriction)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' x y (subs |` restriction) = Some (point |` restriction)", "using Cons first"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs' restriction.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs';\n       tvsT x \\<subseteq> restriction\\<rbrakk>\n      \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                        Some (subs' |` restriction);\n   \\<And>x xa y xb aa subs' restriction.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs';\n       tvsT xa \\<subseteq> restriction\\<rbrakk>\n      \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                        Some (subs' |` restriction);\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (?subs |` restriction) =\n                    Some (?subs' |` restriction)\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  tvsT (Ty a (x # xs)) \\<subseteq> restriction\n  raw_match' x y subs = Some point\n\ngoal (1 subgoal):\n 1. raw_match' x y (subs |` restriction) = Some (point |` restriction)", "by simp"], ["proof (state)\nthis:\n  raw_match' x y (subs |` restriction) = Some (point |` restriction)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "moreover"], ["proof (state)\nthis:\n  raw_match' x y (subs |` restriction) = Some (point |` restriction)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "have \"raw_match' (Ty a xs) (Ty b ys) (point |` restriction) \n      = Some (subs' |` restriction)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' (Ty a xs) (Ty b ys) (point |` restriction) =\n    Some (subs' |` restriction)", "using Cons rest"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs' restriction.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       raw_match' x y subs = Some subs';\n       tvsT x \\<subseteq> restriction\\<rbrakk>\n      \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                        Some (subs' |` restriction);\n   \\<And>x xa y xb aa subs' restriction.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some aa; raw_match' xa y aa = Some subs';\n       tvsT xa \\<subseteq> restriction\\<rbrakk>\n      \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                        Some (subs' |` restriction);\n   raw_match' (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (?subs |` restriction) =\n                    Some (?subs' |` restriction)\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   raw_match' ?x ?y ?subs = Some ?subs';\n   tvsT ?x \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?x ?y (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x; ?xb = Some ?aa;\n   raw_match' ?xa ?y ?aa = Some ?subs';\n   tvsT ?xa \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (?aa |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  tvsT (Ty a (x # xs)) \\<subseteq> restriction\n  raw_match' (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a xs) (Ty b ys) (point |` restriction) =\n    Some (subs' |` restriction)", "by simp"], ["proof (state)\nthis:\n  raw_match' (Ty a xs) (Ty b ys) (point |` restriction) =\n  Some (subs' |` restriction)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs' restriction.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                raw_match' x y subs = Some subs';\n                tvsT x \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' x y (subs |` restriction) =\n                                 Some (subs' |` restriction);\n            \\<And>x xa y xb aa subs' restriction.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x; xb = Some aa;\n                raw_match' xa y aa = Some subs';\n                tvsT xa \\<subseteq> restriction\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (aa |` restriction) =\n                                 Some (subs' |` restriction);\n            raw_match' (Ty a xs) (Ty b ys) subs = Some subs';\n            tvsT (Ty a xs) \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys)\n                              (subs |` restriction) =\n                             Some (subs' |` restriction);\n        a = b;\n        \\<And>xa ya subs subs' restriction.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            raw_match' xa ya subs = Some subs';\n            tvsT xa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa ya (subs |` restriction) =\n                             Some (subs' |` restriction);\n        \\<And>xa xaa ya xb aa subs' restriction.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some aa; raw_match' xaa ya aa = Some subs';\n            tvsT xaa \\<subseteq> restriction\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (aa |` restriction) =\n                             Some (subs' |` restriction);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        tvsT (Ty a (x # xs)) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "ultimately"], ["proof (chain)\npicking this:\n  raw_match' x y (subs |` restriction) = Some (point |` restriction)\n  raw_match' (Ty a xs) (Ty b ys) (point |` restriction) =\n  Some (subs' |` restriction)", "show ?case"], ["proof (prove)\nusing this:\n  raw_match' x y (subs |` restriction) = Some (point |` restriction)\n  raw_match' (Ty a xs) (Ty b ys) (point |` restriction) =\n  Some (subs' |` restriction)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (subs |` restriction) =\n    Some (subs' |` restriction)", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (subs |` restriction) =\n  Some (subs' |` restriction)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (subs |` restriction) =\n  Some (subs' |` restriction)\n\ngoal (1 subgoal):\n 1. \\<And>v va vb vc subs restriction subs'.\n       \\<lbrakk>raw_match' (Ty v va) (Tv vb vc) subs = Some subs';\n        tvsT (Ty v va) \\<subseteq> restriction\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty v va) (Tv vb vc)\n                          (subs |` restriction) =\n                         Some (subs' |` restriction)", "qed (auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv)"], ["", "corollary raw_match'_restriction_on_tvsT:\n  assumes \"raw_match' T U subs = Some subs'\"\n  shows \"raw_match' T U (subs|`tvsT T) = Some (subs'|`tvsT T)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U (subs |` tvsT T) = Some (subs' |` tvsT T)", "using raw_match'_restriction assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   tvsT ?T \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?T ?U (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match' T U subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match' T U (subs |` tvsT T) = Some (subs' |` tvsT T)", "by simp"], ["", "lemma tinstT_imp_ex_raw_match':\n  assumes \"tinstT T1 T2\" \n  shows \"\\<exists>subs. raw_match' T2 T1 (\\<lambda>p . None) = Some subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "obtain \\<rho> where \"tsubstT T2 \\<rho> = T1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        tsubstT T2 \\<rho> = T1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms tinstT_def"], ["proof (prove)\nusing this:\n  tinstT T1 T2\n  tinstT ?T1.0 ?T2.0 \\<equiv> \\<exists>\\<rho>. tsubstT ?T2.0 \\<rho> = ?T1.0\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        tsubstT T2 \\<rho> = T1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tsubstT T2 \\<rho> = T1\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "hence \"raw_match' T2 T1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) = Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\""], ["proof (prove)\nusing this:\n  tsubstT T2 \\<rho> = T1\n\ngoal (1 subgoal):\n 1. raw_match' T2 T1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n    Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "using tsubstT_matcher_imp_raw_match'_unchanged"], ["proof (prove)\nusing this:\n  tsubstT T2 \\<rho> = T1\n  tsubstT ?T ?\\<rho> = ?U \\<Longrightarrow>\n  raw_match' ?T ?U (\\<lambda>(idx, S). Some (?\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (?\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. raw_match' T2 T1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n    Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "by auto"], ["proof (state)\nthis:\n  raw_match' T2 T1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "hence \"raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S))|`tvsT T2) \n    = Some ((\\<lambda>(idx, S). Some (\\<rho> idx S))|`tvsT T2)\""], ["proof (prove)\nusing this:\n  raw_match' T2 T1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n    Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)", "using raw_match'_restriction_on_tvsT"], ["proof (prove)\nusing this:\n  raw_match' T2 T1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  raw_match' ?T ?U (?subs |` tvsT ?T) = Some (?subs' |` tvsT ?T)\n\ngoal (1 subgoal):\n 1. raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n    Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)", "by simp"], ["proof (state)\nthis:\n  raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "moreover"], ["proof (state)\nthis:\n  raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "have \"dom ((\\<lambda>(idx, S). Some (\\<rho> idx S))|`tvsT T2) = tvsT T2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) = tvsT T2", "by auto"], ["proof (state)\nthis:\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) = tvsT T2\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "ultimately"], ["proof (chain)\npicking this:\n  raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) = tvsT T2", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) = tvsT T2\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "using map_le_produces_same_raw_match'"], ["proof (prove)\nusing this:\n  raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) = tvsT T2\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   dom ?subs \\<subseteq> tvsT ?T; ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?T ?U ?lesubs = Some ?subs'\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "using map_le_empty"], ["proof (prove)\nusing this:\n  raw_match' T2 T1 ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvsT T2) = tvsT T2\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   dom ?subs \\<subseteq> tvsT ?T; ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?T ?U ?lesubs = Some ?subs'\n  Map.empty \\<subseteq>\\<^sub>m ?g\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs", "by blast"], ["proof (state)\nthis:\n  \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ex_raw_match'_imp_tinstT:\n  assumes \"\\<exists>subs. raw_match' T2 T1 (\\<lambda>p . None) = Some subs\"\n  shows \"tinstT T1 T2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tinstT T1 T2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. tinstT T1 T2", "obtain subs where \"raw_match' T2 T1 (\\<lambda>p . None) = Some subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>subs.\n        raw_match' T2 T1 Map.empty = Some subs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>subs. raw_match' T2 T1 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. (\\<And>subs.\n        raw_match' T2 T1 Map.empty = Some subs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  raw_match' T2 T1 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. tinstT T1 T2", "hence \"tsubstT T2 (convert_subs subs) = T1\""], ["proof (prove)\nusing this:\n  raw_match' T2 T1 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. tsubstT T2 (convert_subs subs) = T1", "using raw_match'_produces_matcher"], ["proof (prove)\nusing this:\n  raw_match' T2 T1 Map.empty = Some subs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  tsubstT ?T (convert_subs ?subs') = ?U\n\ngoal (1 subgoal):\n 1. tsubstT T2 (convert_subs subs) = T1", "by blast"], ["proof (state)\nthis:\n  tsubstT T2 (convert_subs subs) = T1\n\ngoal (1 subgoal):\n 1. tinstT T1 T2", "thus ?thesis"], ["proof (prove)\nusing this:\n  tsubstT T2 (convert_subs subs) = T1\n\ngoal (1 subgoal):\n 1. tinstT T1 T2", "unfolding tinstT_def"], ["proof (prove)\nusing this:\n  tsubstT T2 (convert_subs subs) = T1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>. tsubstT T2 \\<rho> = T1", "by fast"], ["proof (state)\nthis:\n  tinstT T1 T2\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary tinstT_iff_ex_raw_match': \n  \"tinstT T1 T2 \\<longleftrightarrow> (\\<exists>subs. raw_match' T2 T1 (\\<lambda>p . None) = Some subs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tinstT T1 T2 = (\\<exists>subs. raw_match' T2 T1 Map.empty = Some subs)", "using ex_raw_match'_imp_tinstT tinstT_imp_ex_raw_match'"], ["proof (prove)\nusing this:\n  \\<exists>subs.\n     raw_match' ?T2.0 ?T1.0 Map.empty = Some subs \\<Longrightarrow>\n  tinstT ?T1.0 ?T2.0\n  tinstT ?T1.0 ?T2.0 \\<Longrightarrow>\n  \\<exists>subs. raw_match' ?T2.0 ?T1.0 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. tinstT T1 T2 = (\\<exists>subs. raw_match' T2 T1 Map.empty = Some subs)", "by blast"], ["", "function (sequential) raw_match_term \n  :: \"term \\<Rightarrow> term \\<Rightarrow> ((variable \\<times> sort) \\<rightharpoonup> typ) \\<Rightarrow> ((variable \\<times> sort) \\<rightharpoonup> typ) option\"\n  where\n  \"raw_match_term (Ct a T) (Ct b U) subs = (if a = b then raw_match' T U subs else None)\"\n| \"raw_match_term (Fv a T) (Fv b U) subs = (if a = b then raw_match' T U subs else None)\"\n| \"raw_match_term (Bv i) (Bv j) subs = (if i = j then Some subs else None)\"\n| \"raw_match_term (Abs T t) (Abs U u) subs = \n    Option.bind (raw_match' T U subs) (raw_match_term t u)\"\n| \"raw_match_term (f $ u) (f' $ u') subs = Option.bind (raw_match_term f f' subs) (raw_match_term u u')\"\n| \"raw_match_term _ _ _ = None\""], ["proof (prove)\ngoal (704 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>a T b U subs.\n                   x = (Ct a T, Ct b U, subs) \\<Longrightarrow> P;\n        \\<And>a T b U subs. x = (Fv a T, Fv b U, subs) \\<Longrightarrow> P;\n        \\<And>i j subs. x = (Bv i, Bv j, subs) \\<Longrightarrow> P;\n        \\<And>T t U u subs.\n           x = (Abs T t, Abs U u, subs) \\<Longrightarrow> P;\n        \\<And>f u f' u' subs.\n           x = (f $ u, f' $ u', subs) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Fv v va, Ct vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Fv v va, Bv vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Fv v va, Abs vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Fv v va, vb $ vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, Ct va vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, Fv va vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, Abs va vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, va $ vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Abs v va, Ct vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Abs v va, Fv vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Abs v va, Bv vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Abs v va, vb $ vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (v $ va, Ct vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (v $ va, Fv vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (v $ va, Bv vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (v $ va, Abs vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Ct vb vc, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb v va uw_. x = (Bv vb, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Abs vb vc, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (vb $ vc, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (Ct va vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (Fv va vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (Abs va vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (va $ vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Ct vb vc, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Fv vb vc, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb v va uw_. x = (Bv vb, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (vb $ vc, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Ct vb vc, v $ va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Fv vb vc, v $ va, uw_) \\<Longrightarrow> P;\n        \\<And>vb v va uw_. x = (Bv vb, v $ va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Abs vb vc, v $ va, uw_) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>a T b U subs aa Ta ba Ua subsa.\n       (Ct a T, Ct b U, subs) =\n       (Ct aa Ta, Ct ba Ua, subsa) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) =\n       (if aa = ba then raw_match' Ta Ua subsa else None)\n 3. \\<And>a T b U subs aa Ta ba Ua subsa.\n       (Ct a T, Ct b U, subs) =\n       (Fv aa Ta, Fv ba Ua, subsa) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) =\n       (if aa = ba then raw_match' Ta Ua subsa else None)\n 4. \\<And>a T b U subs i j subsa.\n       (Ct a T, Ct b U, subs) = (Bv i, Bv j, subsa) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) =\n       (if i = j then Some subsa else None)\n 5. \\<And>a T b U subs Ta t Ua u subsa.\n       (Ct a T, Ct b U, subs) =\n       (Abs Ta t, Abs Ua u, subsa) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) =\n       Option.bind (raw_match' Ta Ua subsa)\n        (\\<lambda>x2. raw_match_term_sumC (t, u, x2))\n 6. \\<And>a T b U subs f u f' u' subsa.\n       (Ct a T, Ct b U, subs) = (f $ u, f' $ u', subsa) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) =\n       Option.bind (raw_match_term_sumC (f, f', subsa))\n        (\\<lambda>x2. raw_match_term_sumC (u, u', x2))\n 7. \\<And>a T b U subs v va vb vc uw_.\n       (Ct a T, Ct b U, subs) = (Fv v va, Ct vb vc, uw_) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) = None\n 8. \\<And>a T b U subs v va vb uw_.\n       (Ct a T, Ct b U, subs) = (Fv v va, Bv vb, uw_) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) = None\n 9. \\<And>a T b U subs v va vb vc uw_.\n       (Ct a T, Ct b U, subs) = (Fv v va, Abs vb vc, uw_) \\<Longrightarrow>\n       (if a = b then raw_match' T U subs else None) = None\n 10. \\<And>a T b U subs v va vb vc uw_.\n        (Ct a T, Ct b U, subs) = (Fv v va, vb $ vc, uw_) \\<Longrightarrow>\n        (if a = b then raw_match' T U subs else None) = None\nA total of 704 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All raw_match_term_dom", "by size_change"], ["", "lemma raw_match_term_map_le: \"raw_match_term t u subs = Some subs' \\<Longrightarrow> map_le subs subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u subs = Some subs' \\<Longrightarrow>\n    subs \\<subseteq>\\<^sub>m subs'", "by (induction t u subs arbitrary: subs' rule: raw_match_term.induct)\n    (auto split: if_splits prod.splits intro: map_le_trans raw_match'_map_le simp add: bind_eq_Some_conv)"], ["", "lemma raw_match_term_tvs_subset_dom_res:\n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> tvs t \\<subseteq> dom subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u subs = Some subs' \\<Longrightarrow>\n    tvs t \\<subseteq> dom subs'", "proof (induction t u subs arbitrary: subs' rule: raw_match_term.induct)"], ["proof (state)\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "case (4 T t U u subs)"], ["proof (state)\nthis:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs t \\<subseteq> dom ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs t \\<subseteq> dom ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'", "obtain bsubs where bsubs: \"raw_match' T U subs = Some bsubs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs t \\<subseteq> dom ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>bsubs.\n        raw_match' T U subs = Some bsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "moreover"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "hence body: \"raw_match_term t u bsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "using \"4.prems\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match_term t u bsubs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'", "have 1: \"tvs t \\<subseteq> dom subs'\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'\n\ngoal (1 subgoal):\n 1. tvs t \\<subseteq> dom subs'", "using 4"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs t \\<subseteq> dom ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. tvs t \\<subseteq> dom subs'", "by fastforce"], ["proof (state)\nthis:\n  tvs t \\<subseteq> dom subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "from bsubs"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs", "have \"tvsT T \\<subseteq> dom bsubs\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. tvsT T \\<subseteq> dom bsubs", "using raw_match'_tvsT_subset_dom_res"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  tvsT ?T \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. tvsT T \\<subseteq> dom bsubs", "by auto"], ["proof (state)\nthis:\n  tvsT T \\<subseteq> dom bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "moreover"], ["proof (state)\nthis:\n  tvsT T \\<subseteq> dom bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "have \"bsubs \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bsubs \\<subseteq>\\<^sub>m subs'", "using raw_match_term_map_le body"], ["proof (prove)\nusing this:\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term t u bsubs = Some subs'\n\ngoal (1 subgoal):\n 1. bsubs \\<subseteq>\\<^sub>m subs'", "by blast"], ["proof (state)\nthis:\n  bsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  tvsT T \\<subseteq> dom bsubs\n  bsubs \\<subseteq>\\<^sub>m subs'", "have 2: \"tvsT T \\<subseteq> dom subs'\""], ["proof (prove)\nusing this:\n  tvsT T \\<subseteq> dom bsubs\n  bsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. tvsT T \\<subseteq> dom subs'", "using map_le_implies_dom_le"], ["proof (prove)\nusing this:\n  tvsT T \\<subseteq> dom bsubs\n  bsubs \\<subseteq>\\<^sub>m subs'\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n\ngoal (1 subgoal):\n 1. tvsT T \\<subseteq> dom subs'", "by blast"], ["proof (state)\nthis:\n  tvsT T \\<subseteq> dom subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tvs t \\<subseteq> dom subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (Abs T t) \\<subseteq> dom subs'\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 37 subgoals...", "then"], ["proof (chain)\npicking this:\n  tvsT T \\<subseteq> dom subs'", "show ?case"], ["proof (prove)\nusing this:\n  tvsT T \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. tvs (Abs T t) \\<subseteq> dom subs'", "using \"4.prems\" 1 2"], ["proof (prove)\nusing this:\n  tvsT T \\<subseteq> dom subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  tvs t \\<subseteq> dom subs'\n  tvsT T \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. tvs (Abs T t) \\<subseteq> dom subs'", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  tvs (Abs T t) \\<subseteq> dom subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "next"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "case (5 f u f' u' subs)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tvs f \\<subseteq> dom ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs u \\<subseteq> dom ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "from this"], ["proof (chain)\npicking this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tvs f \\<subseteq> dom ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs u \\<subseteq> dom ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'", "obtain fsubs where f: \"raw_match_term f f' subs = Some fsubs\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tvs f \\<subseteq> dom ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs u \\<subseteq> dom ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>fsubs.\n        raw_match_term f f' subs = Some fsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "hence u: \"raw_match_term u u' fsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "using \"5.prems\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "by auto"], ["proof (state)\nthis:\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "have 1: \"tvs u \\<subseteq> dom subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvs u \\<subseteq> dom subs'", "using f u \"5.IH\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term u u' fsubs = Some subs'\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tvs f \\<subseteq> dom ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs u \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. tvs u \\<subseteq> dom subs'", "by auto"], ["proof (state)\nthis:\n  tvs u \\<subseteq> dom subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "have \"tvs f \\<subseteq> dom fsubs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tvs f \\<subseteq> dom fsubs", "using 5 f"], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tvs f \\<subseteq> dom ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tvs u \\<subseteq> dom ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. tvs f \\<subseteq> dom fsubs", "by simp"], ["proof (state)\nthis:\n  tvs f \\<subseteq> dom fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "moreover"], ["proof (state)\nthis:\n  tvs f \\<subseteq> dom fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "have \"fsubs \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsubs \\<subseteq>\\<^sub>m subs'", "using raw_match_term_map_le u"], ["proof (prove)\nusing this:\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (1 subgoal):\n 1. fsubs \\<subseteq>\\<^sub>m subs'", "by blast"], ["proof (state)\nthis:\n  fsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  tvs f \\<subseteq> dom fsubs\n  fsubs \\<subseteq>\\<^sub>m subs'", "have 2: \"tvs f \\<subseteq> dom subs'\""], ["proof (prove)\nusing this:\n  tvs f \\<subseteq> dom fsubs\n  fsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. tvs f \\<subseteq> dom subs'", "using map_le_implies_dom_le"], ["proof (prove)\nusing this:\n  tvs f \\<subseteq> dom fsubs\n  fsubs \\<subseteq>\\<^sub>m subs'\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n\ngoal (1 subgoal):\n 1. tvs f \\<subseteq> dom subs'", "by blast"], ["proof (state)\nthis:\n  tvs f \\<subseteq> dom subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tvs f \\<subseteq> dom subs';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tvs u \\<subseteq> dom subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tvs (f $ u) \\<subseteq> dom subs'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 36 subgoals...", "then"], ["proof (chain)\npicking this:\n  tvs f \\<subseteq> dom subs'", "show ?case"], ["proof (prove)\nusing this:\n  tvs f \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. tvs (f $ u) \\<subseteq> dom subs'", "using 1"], ["proof (prove)\nusing this:\n  tvs f \\<subseteq> dom subs'\n  tvs u \\<subseteq> dom subs'\n\ngoal (1 subgoal):\n 1. tvs (f $ u) \\<subseteq> dom subs'", "by simp"], ["proof (state)\nthis:\n  tvs (f $ u) \\<subseteq> dom subs'\n\ngoal (35 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Ct a T) \\<subseteq> dom subs'\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tvs (Fv a T) \\<subseteq> dom subs'\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tvs (Bv i) \\<subseteq> dom subs'\n 4. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 5. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Fv v va) \\<subseteq> dom subs'\n 8. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n       tvs (Bv v) \\<subseteq> dom subs'\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Abs va vb) uw_ = Some subs' \\<Longrightarrow>\n        tvs (Bv v) \\<subseteq> dom subs'\nA total of 35 subgoals...", "qed (use raw_match'_tvsT_subset_dom_res in \\<open>auto split: option.splits if_splits prod.splits\\<close>)"], ["", "lemma raw_match_term_dom_res_subset_tvs: \n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> dom subs' \\<subseteq> tvs t \\<union> dom subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u subs = Some subs' \\<Longrightarrow>\n    dom subs' \\<subseteq> tvs t \\<union> dom subs", "proof (induction t u subs arbitrary: subs' rule: raw_match_term.induct)"], ["proof (state)\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "case (4 T t U u subs)"], ["proof (state)\nthis:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs t \\<union> dom ?a\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs t \\<union> dom ?a\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'", "obtain bsubs where bsubs: \"raw_match' T U subs = Some bsubs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs t \\<union> dom ?a\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>bsubs.\n        raw_match' T U subs = Some bsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "moreover"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "hence body: \"raw_match_term t u bsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "using \"4.prems\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match_term t u bsubs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'", "have 1: \"dom subs' \\<subseteq> tvs t \\<union> dom bsubs\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs t \\<union> dom bsubs", "using 4"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs t \\<union> dom ?a\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs t \\<union> dom bsubs", "by fastforce"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvs t \\<union> dom bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "from bsubs"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs", "have \"dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs", "using raw_match'_dom_res_subset_tvsT"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvsT ?T \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs", "by auto"], ["proof (state)\nthis:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "moreover"], ["proof (state)\nthis:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "have \"subs \\<subseteq>\\<^sub>m bsubs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m bsubs", "using bsubs raw_match'_map_le"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n\ngoal (1 subgoal):\n 1. subs \\<subseteq>\\<^sub>m bsubs", "by blast"], ["proof (state)\nthis:\n  subs \\<subseteq>\\<^sub>m bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs\n  subs \\<subseteq>\\<^sub>m bsubs", "have 2: \"dom bsubs \\<subseteq> tvsT T \\<union> dom subs\""], ["proof (prove)\nusing this:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs\n  subs \\<subseteq>\\<^sub>m bsubs\n\ngoal (1 subgoal):\n 1. dom bsubs \\<subseteq> tvsT T \\<union> dom subs", "using bsubs raw_match'_dom_res_subset_tvsT"], ["proof (prove)\nusing this:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom bsubs\n  subs \\<subseteq>\\<^sub>m bsubs\n  raw_match' T U subs = Some bsubs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvsT ?T \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom bsubs \\<subseteq> tvsT T \\<union> dom subs", "by auto"], ["proof (state)\nthis:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom subs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> dom subs'\n                                     \\<subseteq> tvs t \\<union> dom a;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs'\n                         \\<subseteq> tvs (Abs T t) \\<union> dom subs\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 37 subgoals...", "then"], ["proof (chain)\npicking this:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom subs", "show ?case"], ["proof (prove)\nusing this:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom subs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs (Abs T t) \\<union> dom subs", "using \"4.prems\" 1 2"], ["proof (prove)\nusing this:\n  dom bsubs \\<subseteq> tvsT T \\<union> dom subs\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  dom subs' \\<subseteq> tvs t \\<union> dom bsubs\n  dom bsubs \\<subseteq> tvsT T \\<union> dom subs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs (Abs T t) \\<union> dom subs", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvs (Abs T t) \\<union> dom subs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "next"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "case (5 f u f' u' subs)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvs f \\<union> dom subs\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs u \\<union> dom ?a\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "from this"], ["proof (chain)\npicking this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvs f \\<union> dom subs\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs u \\<union> dom ?a\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'", "obtain fsubs where f: \"raw_match_term f f' subs = Some fsubs\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvs f \\<union> dom subs\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs u \\<union> dom ?a\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>fsubs.\n        raw_match_term f f' subs = Some fsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "hence u: \"raw_match_term u u' fsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "using \"5.prems\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "by auto"], ["proof (state)\nthis:\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "have 1: \"dom fsubs \\<subseteq> tvs f \\<union> dom subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom fsubs \\<subseteq> tvs f \\<union> dom subs", "using 5 f u"], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvs f \\<union> dom subs\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs u \\<union> dom ?a\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (1 subgoal):\n 1. dom fsubs \\<subseteq> tvs f \\<union> dom subs", "by simp"], ["proof (state)\nthis:\n  dom fsubs \\<subseteq> tvs f \\<union> dom subs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "have \"dom subs' \\<subseteq> tvs u \\<union> dom fsubs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs u \\<union> dom fsubs", "using 5 f"], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' \\<subseteq> tvs f \\<union> dom subs\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> dom ?subs' \\<subseteq> tvs u \\<union> dom ?a\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs u \\<union> dom fsubs", "by simp"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvs u \\<union> dom fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "moreover"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvs u \\<union> dom fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "have \"fsubs \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsubs \\<subseteq>\\<^sub>m subs'", "using raw_match_term_map_le u"], ["proof (prove)\nusing this:\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (1 subgoal):\n 1. fsubs \\<subseteq>\\<^sub>m subs'", "by blast"], ["proof (state)\nthis:\n  fsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  dom subs' \\<subseteq> tvs u \\<union> dom fsubs\n  fsubs \\<subseteq>\\<^sub>m subs'", "have 2: \"dom subs' \\<subseteq> tvs f \\<union> tvs u \\<union> dom subs\""], ["proof (prove)\nusing this:\n  dom subs' \\<subseteq> tvs u \\<union> dom fsubs\n  fsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs f \\<union> tvs u \\<union> dom subs", "by (smt \"1\" Un_commute inf_sup_aci(6) subset_Un_eq)"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvs f \\<union> tvs u \\<union> dom subs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   dom subs' \\<subseteq> tvs f \\<union> dom subs;\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> dom subs' \\<subseteq> tvs u \\<union> dom a;\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 36 subgoals...", "then"], ["proof (chain)\npicking this:\n  dom subs' \\<subseteq> tvs f \\<union> tvs u \\<union> dom subs", "show ?case"], ["proof (prove)\nusing this:\n  dom subs' \\<subseteq> tvs f \\<union> tvs u \\<union> dom subs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs", "using 1"], ["proof (prove)\nusing this:\n  dom subs' \\<subseteq> tvs f \\<union> tvs u \\<union> dom subs\n  dom fsubs \\<subseteq> tvs f \\<union> dom subs\n\ngoal (1 subgoal):\n 1. dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs", "by simp"], ["proof (state)\nthis:\n  dom subs' \\<subseteq> tvs (f $ u) \\<union> dom subs\n\ngoal (35 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Ct a T) \\<union> dom subs\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv a T) \\<union> dom subs\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv i) \\<union> dom subs\n 4. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 5. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Fv v va) \\<union> dom uw_\n 8. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n       dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Abs va vb) uw_ = Some subs' \\<Longrightarrow>\n        dom subs' \\<subseteq> tvs (Bv v) \\<union> dom uw_\nA total of 35 subgoals...", "qed (use raw_match'_dom_res_subset_tvsT in \\<open>auto split: option.splits if_splits prod.splits\\<close>)"], ["", "corollary raw_match_term_dom_res_eq_tvs: \n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> dom subs' = tvs t \\<union> dom subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u subs = Some subs' \\<Longrightarrow>\n    dom subs' = tvs t \\<union> dom subs", "by (simp add: map_le_implies_dom_le raw_match_term_tvs_subset_dom_res \n      raw_match_term_dom_res_subset_tvs raw_match_term_map_le subset_antisym)"], ["", "lemma raw_match_term_extend_map_preserve:\n  \"raw_match_term t u subs = Some subs' \\<Longrightarrow> map_le subs' subs'' \\<Longrightarrow> p\\<in>tvs t \\<Longrightarrow> subs'' p = subs' p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match_term t u subs = Some subs';\n     subs' \\<subseteq>\\<^sub>m subs''; p \\<in> tvs t\\<rbrakk>\n    \\<Longrightarrow> subs'' p = subs' p", "using raw_match_term_dom_res_eq_tvs domIff map_le_implies_dom_le"], ["proof (prove)\nusing this:\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' = tvs ?t \\<union> dom ?subs\n  (?a \\<in> dom ?m) = (?m ?a \\<noteq> None)\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match_term t u subs = Some subs';\n     subs' \\<subseteq>\\<^sub>m subs''; p \\<in> tvs t\\<rbrakk>\n    \\<Longrightarrow> subs'' p = subs' p", "by (simp add: map_le_def)"], ["", "lemma map_eq_on_tvs_imp_map_eq_on_term:\n  \"(\\<And>p . p\\<in>tvs t \\<Longrightarrow> subs p = subs' p) \n  \\<Longrightarrow> tsubst t (convert_subs subs)\n    = tsubst t (convert_subs subs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>p.\n        p \\<in> tvs t \\<Longrightarrow> subs p = subs' p) \\<Longrightarrow>\n    tsubst t (convert_subs subs) = tsubst t (convert_subs subs')", "by (induction t) (use map_eq_on_tvsT_imp_map_eq_on_typ in \\<open>fastforce+\\<close>)"], ["", "lemma raw_match_extend_map_preserve':\n  assumes \"raw_match_term t u subs = Some subs'\" \"map_le subs' subs''\"\n  shows \"tsubst t (convert_subs subs') \n    = tsubst t (convert_subs subs'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubst t (convert_subs subs') = tsubst t (convert_subs subs'')", "apply (rule map_eq_on_tvs_imp_map_eq_on_term)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> tvs t \\<Longrightarrow> subs' p = subs'' p", "using raw_match_term_extend_map_preserve assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match_term ?t ?u ?subs = Some ?subs';\n   ?subs' \\<subseteq>\\<^sub>m ?subs''; ?p \\<in> tvs ?t\\<rbrakk>\n  \\<Longrightarrow> ?subs'' ?p = ?subs' ?p\n  raw_match_term t u subs = Some subs'\n  subs' \\<subseteq>\\<^sub>m subs''\n\ngoal (1 subgoal):\n 1. \\<And>p. p \\<in> tvs t \\<Longrightarrow> subs' p = subs'' p", "by fastforce"], ["", "lemma raw_match_term_produces_matcher:\n  \"raw_match_term t u subs = Some subs' \n    \\<Longrightarrow> tsubst t (convert_subs subs') = u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u subs = Some subs' \\<Longrightarrow>\n    tsubst t (convert_subs subs') = u", "proof (induction t u subs arbitrary: subs' rule: raw_match_term.induct)"], ["proof (state)\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "case (4 T t U u subs)"], ["proof (state)\nthis:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst t (convert_subs ?subs') = u\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst t (convert_subs ?subs') = u\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'", "obtain bsubs where bsubs: \"raw_match' T U subs = Some bsubs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst t (convert_subs ?subs') = u\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>bsubs.\n        raw_match' T U subs = Some bsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "moreover"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "hence body: \"raw_match_term t u bsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "using \"4.prems\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match_term t u bsubs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'", "have 1: \"tsubst t (convert_subs subs') = u\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'\n\ngoal (1 subgoal):\n 1. tsubst t (convert_subs subs') = u", "using 4"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term t u bsubs = Some subs'\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst t (convert_subs ?subs') = u\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n\ngoal (1 subgoal):\n 1. tsubst t (convert_subs subs') = u", "by fastforce"], ["proof (state)\nthis:\n  tsubst t (convert_subs subs') = u\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "from bsubs"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs", "have \"tsubstT T (convert_subs bsubs) = U\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. tsubstT T (convert_subs bsubs) = U", "using raw_match'_produces_matcher"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  tsubstT ?T (convert_subs ?subs') = ?U\n\ngoal (1 subgoal):\n 1. tsubstT T (convert_subs bsubs) = U", "by blast"], ["proof (state)\nthis:\n  tsubstT T (convert_subs bsubs) = U\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "moreover"], ["proof (state)\nthis:\n  tsubstT T (convert_subs bsubs) = U\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "have \"bsubs \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bsubs \\<subseteq>\\<^sub>m subs'", "using raw_match_term_map_le body"], ["proof (prove)\nusing this:\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term t u bsubs = Some subs'\n\ngoal (1 subgoal):\n 1. bsubs \\<subseteq>\\<^sub>m subs'", "by blast"], ["proof (state)\nthis:\n  bsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  tsubstT T (convert_subs bsubs) = U\n  bsubs \\<subseteq>\\<^sub>m subs'", "have 2: \"tsubstT T (convert_subs subs') = U\""], ["proof (prove)\nusing this:\n  tsubstT T (convert_subs bsubs) = U\n  bsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. tsubstT T (convert_subs subs') = U", "using raw_match'_extend_map_preserve'[OF bsubs, of subs']"], ["proof (prove)\nusing this:\n  tsubstT T (convert_subs bsubs) = U\n  bsubs \\<subseteq>\\<^sub>m subs'\n  bsubs \\<subseteq>\\<^sub>m subs' \\<Longrightarrow>\n  tsubstT T (convert_subs bsubs) = tsubstT T (convert_subs subs')\n\ngoal (1 subgoal):\n 1. tsubstT T (convert_subs subs') = U", "by simp"], ["proof (state)\nthis:\n  tsubstT T (convert_subs subs') = U\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>T t U u subs subs'.\n       \\<lbrakk>\\<And>a subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> tsubst t (convert_subs subs') = u;\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (Abs T t) (convert_subs subs') = Abs U u\n 5. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 7. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 9. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Ct va vb\nA total of 37 subgoals...", "then"], ["proof (chain)\npicking this:\n  tsubstT T (convert_subs subs') = U", "show ?case"], ["proof (prove)\nusing this:\n  tsubstT T (convert_subs subs') = U\n\ngoal (1 subgoal):\n 1. tsubst (Abs T t) (convert_subs subs') = Abs U u", "using \"4.prems\" 1 2"], ["proof (prove)\nusing this:\n  tsubstT T (convert_subs subs') = U\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  tsubst t (convert_subs subs') = u\n  tsubstT T (convert_subs subs') = U\n\ngoal (1 subgoal):\n 1. tsubst (Abs T t) (convert_subs subs') = Abs U u", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  tsubst (Abs T t) (convert_subs subs') = Abs U u\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "next"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "case (5 f u f' u' subs)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tsubst f (convert_subs ?subs') = f'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst u (convert_subs ?subs') = u'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "from this"], ["proof (chain)\npicking this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tsubst f (convert_subs ?subs') = f'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst u (convert_subs ?subs') = u'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'", "obtain fsubs where f: \"raw_match_term f f' subs = Some fsubs\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tsubst f (convert_subs ?subs') = f'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst u (convert_subs ?subs') = u'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>fsubs.\n        raw_match_term f f' subs = Some fsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "hence u: \"raw_match_term u u' fsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "using \"5.prems\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "by auto"], ["proof (state)\nthis:\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "have 1: \"tsubst u (convert_subs subs') = u'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubst u (convert_subs subs') = u'", "using f u \"5.IH\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term u u' fsubs = Some subs'\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tsubst f (convert_subs ?subs') = f'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst u (convert_subs ?subs') = u'\n\ngoal (1 subgoal):\n 1. tsubst u (convert_subs subs') = u'", "by auto"], ["proof (state)\nthis:\n  tsubst u (convert_subs subs') = u'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "have \"tsubst f (convert_subs fsubs) = f'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubst f (convert_subs fsubs) = f'", "using 5 f"], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some ?subs' \\<Longrightarrow>\n  tsubst f (convert_subs ?subs') = f'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> tsubst u (convert_subs ?subs') = u'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. tsubst f (convert_subs fsubs) = f'", "by simp"], ["proof (state)\nthis:\n  tsubst f (convert_subs fsubs) = f'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "moreover"], ["proof (state)\nthis:\n  tsubst f (convert_subs fsubs) = f'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "have \"fsubs \\<subseteq>\\<^sub>m subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fsubs \\<subseteq>\\<^sub>m subs'", "using raw_match_term_map_le u"], ["proof (prove)\nusing this:\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (1 subgoal):\n 1. fsubs \\<subseteq>\\<^sub>m subs'", "by blast"], ["proof (state)\nthis:\n  fsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  tsubst f (convert_subs fsubs) = f'\n  fsubs \\<subseteq>\\<^sub>m subs'", "have 2: \"tsubst f (convert_subs subs') = f'\""], ["proof (prove)\nusing this:\n  tsubst f (convert_subs fsubs) = f'\n  fsubs \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. tsubst f (convert_subs subs') = f'", "using raw_match_extend_map_preserve'[OF f, of subs']"], ["proof (prove)\nusing this:\n  tsubst f (convert_subs fsubs) = f'\n  fsubs \\<subseteq>\\<^sub>m subs'\n  fsubs \\<subseteq>\\<^sub>m subs' \\<Longrightarrow>\n  tsubst f (convert_subs fsubs) = tsubst f (convert_subs subs')\n\ngoal (1 subgoal):\n 1. tsubst f (convert_subs subs') = f'", "by simp"], ["proof (state)\nthis:\n  tsubst f (convert_subs subs') = f'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>f u f' u' subs subs'.\n       \\<lbrakk>\\<And>subs'.\n                   raw_match_term f f' subs = Some subs' \\<Longrightarrow>\n                   tsubst f (convert_subs subs') = f';\n        \\<And>a subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs'\\<rbrakk>\n           \\<Longrightarrow> tsubst u (convert_subs subs') = u';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> tsubst (f $ u) (convert_subs subs') = f' $ u'\n 5. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 6. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 8. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Fv va vb\nA total of 36 subgoals...", "then"], ["proof (chain)\npicking this:\n  tsubst f (convert_subs subs') = f'", "show ?case"], ["proof (prove)\nusing this:\n  tsubst f (convert_subs subs') = f'\n\ngoal (1 subgoal):\n 1. tsubst (f $ u) (convert_subs subs') = f' $ u'", "using raw_match'_extend_map_preserve' 1"], ["proof (prove)\nusing this:\n  tsubst f (convert_subs subs') = f'\n  \\<lbrakk>raw_match' ?T ?U ?subs = Some ?subs';\n   ?subs' \\<subseteq>\\<^sub>m ?subs''\\<rbrakk>\n  \\<Longrightarrow> tsubstT ?T (convert_subs ?subs') =\n                    tsubstT ?T (convert_subs ?subs'')\n  tsubst u (convert_subs subs') = u'\n\ngoal (1 subgoal):\n 1. tsubst (f $ u) (convert_subs subs') = f' $ u'", "by auto"], ["proof (state)\nthis:\n  tsubst (f $ u) (convert_subs subs') = f' $ u'\n\ngoal (35 subgoals):\n 1. \\<And>a T b U subs subs'.\n       raw_match_term (Ct a T) (Ct b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Ct a T) (convert_subs subs') = Ct b U\n 2. \\<And>a T b U subs subs'.\n       raw_match_term (Fv a T) (Fv b U) subs = Some subs' \\<Longrightarrow>\n       tsubst (Fv a T) (convert_subs subs') = Fv b U\n 3. \\<And>i j subs subs'.\n       raw_match_term (Bv i) (Bv j) subs = Some subs' \\<Longrightarrow>\n       tsubst (Bv i) (convert_subs subs') = Bv j\n 4. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Ct vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Ct vb vc\n 5. \\<And>v va vb uw_ subs'.\n       raw_match_term (Fv v va) (Bv vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Bv vb\n 6. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (Abs vb vc) uw_ =\n       Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = Abs vb vc\n 7. \\<And>v va vb vc uw_ subs'.\n       raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Fv v va) (convert_subs subs') = vb $ vc\n 8. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Ct va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Ct va vb\n 9. \\<And>v va vb uw_ subs'.\n       raw_match_term (Bv v) (Fv va vb) uw_ = Some subs' \\<Longrightarrow>\n       tsubst (Bv v) (convert_subs subs') = Fv va vb\n 10. \\<And>v va vb uw_ subs'.\n        raw_match_term (Bv v) (Abs va vb) uw_ = Some subs' \\<Longrightarrow>\n        tsubst (Bv v) (convert_subs subs') = Abs va vb\nA total of 35 subgoals...", "qed (auto split: if_splits simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["", "lemma ex_raw_match_term_imp_tinst:\n  assumes \"\\<exists>subs. raw_match_term t2 t1 (\\<lambda>p . None) = Some subs\"\n  shows \"tinst t1 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tinst t1 t2", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. tinst t1 t2", "obtain subs where \"raw_match_term t2 t1 (\\<lambda>p . None) = Some subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>subs.\n        raw_match_term t2 t1 Map.empty = Some subs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. (\\<And>subs.\n        raw_match_term t2 t1 Map.empty = Some subs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  raw_match_term t2 t1 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. tinst t1 t2", "hence \"tsubst t2 (convert_subs subs) = t1\""], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. tsubst t2 (convert_subs subs) = t1", "using raw_match_term_produces_matcher"], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 Map.empty = Some subs\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  tsubst ?t (convert_subs ?subs') = ?u\n\ngoal (1 subgoal):\n 1. tsubst t2 (convert_subs subs) = t1", "by blast"], ["proof (state)\nthis:\n  tsubst t2 (convert_subs subs) = t1\n\ngoal (1 subgoal):\n 1. tinst t1 t2", "thus ?thesis"], ["proof (prove)\nusing this:\n  tsubst t2 (convert_subs subs) = t1\n\ngoal (1 subgoal):\n 1. tinst t1 t2", "unfolding tinst_def"], ["proof (prove)\nusing this:\n  tsubst t2 (convert_subs subs) = t1\n\ngoal (1 subgoal):\n 1. \\<exists>\\<rho>. tsubst t2 \\<rho> = t1", "by fast"], ["proof (state)\nthis:\n  tinst t1 t2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tsubst_matcher_imp_raw_match_term_unchanged:\n  \"tsubst t \\<rho> = u \\<Longrightarrow> raw_match_term t u (\\<lambda>(idx, S). Some (\\<rho> idx S)) = Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsubst t \\<rho> = u \\<Longrightarrow>\n    raw_match_term t u (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n    Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "by (induction t arbitrary: u \\<rho>) (auto simp add: tsubstT_matcher_imp_raw_match'_unchanged)"], ["", "lemma raw_match_term_restriction:\n  assumes \"raw_match_term t u subs = Some subs'\"\n  assumes \"tvs t \\<subseteq> restriction \"\n  shows \"raw_match_term t u (subs|`restriction) = Some (subs'|`restriction)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u (subs |` restriction) = Some (subs' |` restriction)", "using assms"], ["proof (prove)\nusing this:\n  raw_match_term t u subs = Some subs'\n  tvs t \\<subseteq> restriction\n\ngoal (1 subgoal):\n 1. raw_match_term t u (subs |` restriction) = Some (subs' |` restriction)", "by (induction t u subs arbitrary: restriction subs' rule: raw_match_term.induct)\n    (use raw_match'_restriction in \n    \\<open>auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv\\<close>)"], ["", "corollary raw_match_term_restriction_on_tvs:\n  assumes \"raw_match_term t u subs = Some subs'\"\n  shows \"raw_match_term t u (subs|`tvs t) = Some (subs'|`tvs t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u (subs |` tvs t) = Some (subs' |` tvs t)", "using raw_match_term_restriction assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match_term ?t ?u ?subs = Some ?subs';\n   tvs ?t \\<subseteq> ?restriction\\<rbrakk>\n  \\<Longrightarrow> raw_match_term ?t ?u (?subs |` ?restriction) =\n                    Some (?subs' |` ?restriction)\n  raw_match_term t u subs = Some subs'\n\ngoal (1 subgoal):\n 1. raw_match_term t u (subs |` tvs t) = Some (subs' |` tvs t)", "by simp"], ["", "lemma raw_match_term_imp_raw_match_term_on_map_le:\n  assumes \"raw_match_term t u subs = Some subs'\"\n  assumes \"map_le lesubs subs\"\n  shows \"\\<exists>lesubs'. raw_match_term t u lesubs = Some lesubs' \\<and> map_le lesubs' subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match_term t u lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using assms"], ["proof (prove)\nusing this:\n  raw_match_term t u subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match_term t u lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "proof (induction t u subs arbitrary: lesubs subs' rule: raw_match_term.induct)"], ["proof (state)\ngoal (37 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>T t U u subs lesubs subs'.\n       \\<lbrakk>\\<And>a lesubs subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term t u lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Abs T t) (Abs U u) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Ct va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 37 subgoals...", "case (4 T t U u subs)"], ["proof (state)\nthis:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>T t U u subs lesubs subs'.\n       \\<lbrakk>\\<And>a lesubs subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term t u lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Abs T t) (Abs U u) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Ct va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 37 subgoals...", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "obtain bsubs where bsubs: \"raw_match' T U subs = Some bsubs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>bsubs.\n        raw_match' T U subs = Some bsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match' T U subs = Some bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>T t U u subs lesubs subs'.\n       \\<lbrakk>\\<And>a lesubs subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term t u lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Abs T t) (Abs U u) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Ct va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 37 subgoals...", "hence body: \"raw_match_term t u bsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "using \"4.prems\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. raw_match_term t u bsubs = Some subs'", "by (auto simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match_term t u bsubs = Some subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>T t U u subs lesubs subs'.\n       \\<lbrakk>\\<And>a lesubs subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term t u lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Abs T t) (Abs U u) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Ct va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 37 subgoals...", "from bsubs 4"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some bsubs\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "obtain lebsubs where \n    lebsubs: \"raw_match' T U subs = Some lebsubs\" \"map_le lebsubs bsubs\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>lebsubs.\n        \\<lbrakk>raw_match' T U subs = Some lebsubs;\n         lebsubs \\<subseteq>\\<^sub>m bsubs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using raw_match'_map_le map_le_trans"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some bsubs\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n  raw_match' ?T ?U ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>?m1.0 \\<subseteq>\\<^sub>m ?m2.0;\n   ?m2.0 \\<subseteq>\\<^sub>m ?m3.0\\<rbrakk>\n  \\<Longrightarrow> ?m1.0 \\<subseteq>\\<^sub>m ?m3.0\n\ngoal (1 subgoal):\n 1. (\\<And>lebsubs.\n        \\<lbrakk>raw_match' T U subs = Some lebsubs;\n         lebsubs \\<subseteq>\\<^sub>m bsubs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (fastforce split: if_splits simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match' T U subs = Some lebsubs\n  lebsubs \\<subseteq>\\<^sub>m bsubs\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>T t U u subs lesubs subs'.\n       \\<lbrakk>\\<And>a lesubs subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term t u lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Abs T t) (Abs U u) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Ct va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 37 subgoals...", "from this"], ["proof (chain)\npicking this:\n  raw_match' T U subs = Some lebsubs\n  lebsubs \\<subseteq>\\<^sub>m bsubs", "obtain lesubs' where \n    lesubs':\"raw_match_term t u lebsubs = Some lesubs'\" \"map_le lesubs' subs'\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some lebsubs\n  lebsubs \\<subseteq>\\<^sub>m bsubs\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match_term t u lebsubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"4.prems\""], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some lebsubs\n  lebsubs \\<subseteq>\\<^sub>m bsubs\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match_term t u lebsubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: if_splits simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match_term t u lebsubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>T t U u subs lesubs subs'.\n       \\<lbrakk>\\<And>a lesubs subs'.\n                   \\<lbrakk>raw_match' T U subs = Some a;\n                    raw_match_term t u a = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term t u lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (Abs T t) (Abs U u) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Abs T t) (Abs U u) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Ct va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 37 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match_term (Abs T t) (Abs U u) lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using lebsubs lesubs' 4"], ["proof (prove)\nusing this:\n  raw_match' T U subs = Some lebsubs\n  lebsubs \\<subseteq>\\<^sub>m bsubs\n  raw_match_term t u lebsubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  \\<lbrakk>raw_match' T U subs = Some ?a;\n   raw_match_term t u ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term t u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (Abs T t) (Abs U u) subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match_term (Abs T t) (Abs U u) lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "apply ( auto split: if_splits simp add: bind_eq_Some_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' T U subs = Some lebsubs;\n     lebsubs \\<subseteq>\\<^sub>m bsubs;\n     raw_match_term t u lebsubs = Some subs';\n     \\<And>a subs' lesubs.\n        \\<lbrakk>lebsubs = a; raw_match_term t u a = Some subs';\n         lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term t u lesubs = Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs';\n     lesubs' = subs'; lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n    \\<Longrightarrow> \\<exists>lesubs'.\n                         (\\<exists>y.\n                             raw_match' T U lesubs = Some y \\<and>\n                             raw_match_term t u y = Some lesubs') \\<and>\n                         lesubs' \\<subseteq>\\<^sub>m subs'", "by (meson raw_match'_imp_raw_match'_on_map_le)"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match_term (Abs T t) (Abs U u) lesubs = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "next"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "case (5 f u f' u' subs)"], ["proof (state)\nthis:\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "from this"], ["proof (chain)\npicking this:\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "obtain fsubs where f: \"raw_match_term f f' subs = Some fsubs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>fsubs.\n        raw_match_term f f' subs = Some fsubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: bind_eq_Some_conv)"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "hence u: \"raw_match_term u u' fsubs = Some subs'\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "using \"5.prems\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some fsubs\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. raw_match_term u u' fsubs = Some subs'", "by auto"], ["proof (state)\nthis:\n  raw_match_term u u' fsubs = Some subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "from 5"], ["proof (chain)\npicking this:\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs", "obtain lefsubs where \n    lefsubs: \"raw_match_term f f' subs = Some lefsubs\" \"map_le lefsubs fsubs\""], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>lefsubs.\n        \\<lbrakk>raw_match_term f f' subs = Some lefsubs;\n         lefsubs \\<subseteq>\\<^sub>m fsubs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using raw_match_term_map_le map_le_trans f"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  ?subs \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>?m1.0 \\<subseteq>\\<^sub>m ?m2.0;\n   ?m2.0 \\<subseteq>\\<^sub>m ?m3.0\\<rbrakk>\n  \\<Longrightarrow> ?m1.0 \\<subseteq>\\<^sub>m ?m3.0\n  raw_match_term f f' subs = Some fsubs\n\ngoal (1 subgoal):\n 1. (\\<And>lefsubs.\n        \\<lbrakk>raw_match_term f f' subs = Some lefsubs;\n         lefsubs \\<subseteq>\\<^sub>m fsubs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "from this"], ["proof (chain)\npicking this:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs", "obtain lesubs' where \n    lesubs':\"raw_match_term u u' lefsubs = Some lesubs'\" \"map_le lesubs' subs'\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match_term u u' lefsubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \"5.prems\""], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match_term u u' lefsubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto split: if_splits simp add: bind_eq_Some_conv raw_match'_produces_matcher)"], ["proof (state)\nthis:\n  raw_match_term u u' lefsubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>f u f' u' subs lesubs subs'.\n       \\<lbrakk>\\<And>lesubs subs'.\n                   \\<lbrakk>raw_match_term f f' subs = Some subs';\n                    lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>lesubs'.\n  raw_match_term f f' lesubs = Some lesubs' \\<and>\n  lesubs' \\<subseteq>\\<^sub>m subs';\n        \\<And>a lesubs subs'.\n           \\<lbrakk>raw_match_term f f' subs = Some a;\n            raw_match_term u u' a = Some subs';\n            lesubs \\<subseteq>\\<^sub>m a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>lesubs'.\n                                raw_match_term u u' lesubs =\n                                Some lesubs' \\<and>\n                                lesubs' \\<subseteq>\\<^sub>m subs';\n        raw_match_term (f $ u) (f' $ u') subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (f $ u) (f' $ u') lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Fv va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 36 subgoals...", "from lefsubs lesubs'"], ["proof (chain)\npicking this:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs\n  raw_match_term u u' lefsubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'", "show ?case"], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs\n  raw_match_term u u' lefsubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match_term (f $ u) (f' $ u') lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "using 5"], ["proof (prove)\nusing this:\n  raw_match_term f f' subs = Some lefsubs\n  lefsubs \\<subseteq>\\<^sub>m fsubs\n  raw_match_term u u' lefsubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term f f' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  \\<lbrakk>raw_match_term f f' subs = Some ?a;\n   raw_match_term u u' ?a = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term u u' ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term (f $ u) (f' $ u') subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. \\<exists>lesubs'.\n       raw_match_term (f $ u) (f' $ u') lesubs = Some lesubs' \\<and>\n       lesubs' \\<subseteq>\\<^sub>m subs'", "by (fastforce split: if_splits simp add: bind_eq_Some_conv)"], ["proof (state)\nthis:\n  \\<exists>lesubs'.\n     raw_match_term (f $ u) (f' $ u') lesubs = Some lesubs' \\<and>\n     lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (35 subgoals):\n 1. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Ct a T) (Ct b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Ct a T) (Ct b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 2. \\<And>a T b U subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv a T) (Fv b U) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv a T) (Fv b U) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 3. \\<And>i j subs lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv i) (Bv j) subs = Some subs';\n        lesubs \\<subseteq>\\<^sub>m subs\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv i) (Bv j) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 4. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Ct vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Ct vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 5. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Bv vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Bv vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 6. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (Abs vb vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (Abs vb vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 7. \\<And>v va vb vc uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Fv v va) (vb $ vc) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Fv v va) (vb $ vc) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 8. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Ct va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Ct va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 9. \\<And>v va vb uw_ lesubs subs'.\n       \\<lbrakk>raw_match_term (Bv v) (Fv va vb) uw_ = Some subs';\n        lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n       \\<Longrightarrow> \\<exists>lesubs'.\n                            raw_match_term (Bv v) (Fv va vb) lesubs =\n                            Some lesubs' \\<and>\n                            lesubs' \\<subseteq>\\<^sub>m subs'\n 10. \\<And>v va vb uw_ lesubs subs'.\n        \\<lbrakk>raw_match_term (Bv v) (Abs va vb) uw_ = Some subs';\n         lesubs \\<subseteq>\\<^sub>m uw_\\<rbrakk>\n        \\<Longrightarrow> \\<exists>lesubs'.\n                             raw_match_term (Bv v) (Abs va vb) lesubs =\n                             Some lesubs' \\<and>\n                             lesubs' \\<subseteq>\\<^sub>m subs'\nA total of 35 subgoals...", "qed (use raw_match'_imp_raw_match'_on_map_le in \n    \\<open>auto split: option.splits if_splits prod.splits simp add: bind_eq_Some_conv\\<close>)"], ["", "corollary map_le_produces_same_raw_match_term:\n  assumes \"raw_match_term t u subs = Some subs'\"\n  assumes \"dom subs \\<subseteq> tvs t\"\n  assumes \"map_le lesubs subs\"\n  shows \"raw_match_term t u lesubs = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "have \"dom subs' = tvs t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom subs' = tvs t", "using assms(1) assms(2) raw_match_term_dom_res_eq_tvs"], ["proof (prove)\nusing this:\n  raw_match_term t u subs = Some subs'\n  dom subs \\<subseteq> tvs t\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  dom ?subs' = tvs ?t \\<union> dom ?subs\n\ngoal (1 subgoal):\n 1. dom subs' = tvs t", "by auto"], ["proof (state)\nthis:\n  dom subs' = tvs t\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "moreover"], ["proof (state)\nthis:\n  dom subs' = tvs t\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "obtain lesubs' where \"raw_match_term t u lesubs = Some lesubs'\" \"map_le lesubs' subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match_term t u lesubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using raw_match_term_imp_raw_match_term_on_map_le assms(1) assms(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>raw_match_term ?t ?u ?subs = Some ?subs';\n   ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> \\<exists>lesubs'.\n                       raw_match_term ?t ?u ?lesubs = Some lesubs' \\<and>\n                       lesubs' \\<subseteq>\\<^sub>m ?subs'\n  raw_match_term t u subs = Some subs'\n  lesubs \\<subseteq>\\<^sub>m subs\n\ngoal (1 subgoal):\n 1. (\\<And>lesubs'.\n        \\<lbrakk>raw_match_term t u lesubs = Some lesubs';\n         lesubs' \\<subseteq>\\<^sub>m subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "moreover"], ["proof (state)\nthis:\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "hence \"dom lesubs' = tvs t\""], ["proof (prove)\nusing this:\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n\ngoal (1 subgoal):\n 1. dom lesubs' = tvs t", "using \\<open>dom subs' = tvs t\\<close> map_le_implies_dom_le raw_match_term_tvs_subset_dom_res"], ["proof (prove)\nusing this:\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom subs' = tvs t\n  ?f \\<subseteq>\\<^sub>m ?g \\<Longrightarrow> dom ?f \\<subseteq> dom ?g\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  tvs ?t \\<subseteq> dom ?subs'\n\ngoal (1 subgoal):\n 1. dom lesubs' = tvs t", "by fastforce"], ["proof (state)\nthis:\n  dom lesubs' = tvs t\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "ultimately"], ["proof (chain)\npicking this:\n  dom subs' = tvs t\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom lesubs' = tvs t", "show ?thesis"], ["proof (prove)\nusing this:\n  dom subs' = tvs t\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom lesubs' = tvs t\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "using map_le_same_dom_imp_same_map"], ["proof (prove)\nusing this:\n  dom subs' = tvs t\n  raw_match_term t u lesubs = Some lesubs'\n  lesubs' \\<subseteq>\\<^sub>m subs'\n  dom lesubs' = tvs t\n  \\<lbrakk>dom ?f = dom ?g; ?f \\<subseteq>\\<^sub>m ?g\\<rbrakk>\n  \\<Longrightarrow> ?f = ?g\n\ngoal (1 subgoal):\n 1. raw_match_term t u lesubs = Some subs'", "by metis"], ["proof (state)\nthis:\n  raw_match_term t u lesubs = Some subs'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tinst_imp_ex_raw_match_term:\n  assumes \"tinst t1 t2\" \n  shows \"\\<exists>subs. raw_match_term t2 t1 (\\<lambda>p . None) = Some subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "obtain \\<rho> where \"tsubst t2 \\<rho> = t1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        tsubst t2 \\<rho> = t1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms tinst_def"], ["proof (prove)\nusing this:\n  tinst t1 t2\n  tinst ?t1.0 ?t2.0 \\<equiv> \\<exists>\\<rho>. tsubst ?t2.0 \\<rho> = ?t1.0\n\ngoal (1 subgoal):\n 1. (\\<And>\\<rho>.\n        tsubst t2 \\<rho> = t1 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  tsubst t2 \\<rho> = t1\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "hence \"raw_match_term t2 t1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) = Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\""], ["proof (prove)\nusing this:\n  tsubst t2 \\<rho> = t1\n\ngoal (1 subgoal):\n 1. raw_match_term t2 t1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n    Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "using tsubst_matcher_imp_raw_match_term_unchanged"], ["proof (prove)\nusing this:\n  tsubst t2 \\<rho> = t1\n  tsubst ?t ?\\<rho> = ?u \\<Longrightarrow>\n  raw_match_term ?t ?u (\\<lambda>(idx, S). Some (?\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (?\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. raw_match_term t2 t1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n    Some (\\<lambda>(idx, S). Some (\\<rho> idx S))", "by auto"], ["proof (state)\nthis:\n  raw_match_term t2 t1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "hence \"raw_match_term t2 t1 ((\\<lambda>(idx, S). Some (\\<rho> idx S))|`tvs t2) \n    = Some ((\\<lambda>(idx, S). Some (\\<rho> idx S))|`tvs t2)\""], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n\ngoal (1 subgoal):\n 1. raw_match_term t2 t1\n     ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n    Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)", "using raw_match_term_restriction_on_tvs"], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 (\\<lambda>(idx, S). Some (\\<rho> idx S)) =\n  Some (\\<lambda>(idx, S). Some (\\<rho> idx S))\n  raw_match_term ?t ?u ?subs = Some ?subs' \\<Longrightarrow>\n  raw_match_term ?t ?u (?subs |` tvs ?t) = Some (?subs' |` tvs ?t)\n\ngoal (1 subgoal):\n 1. raw_match_term t2 t1\n     ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n    Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)", "by simp"], ["proof (state)\nthis:\n  raw_match_term t2 t1\n   ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "moreover"], ["proof (state)\nthis:\n  raw_match_term t2 t1\n   ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "have \"dom ((\\<lambda>(idx, S). Some (\\<rho> idx S))|`tvs t2) = tvs t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) = tvs t2", "by auto"], ["proof (state)\nthis:\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) = tvs t2\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "ultimately"], ["proof (chain)\npicking this:\n  raw_match_term t2 t1\n   ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) = tvs t2", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match_term t2 t1\n   ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) = tvs t2\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "using map_le_produces_same_raw_match_term"], ["proof (prove)\nusing this:\n  raw_match_term t2 t1\n   ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) = tvs t2\n  \\<lbrakk>raw_match_term ?t ?u ?subs = Some ?subs';\n   dom ?subs \\<subseteq> tvs ?t; ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> raw_match_term ?t ?u ?lesubs = Some ?subs'\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "using map_le_empty"], ["proof (prove)\nusing this:\n  raw_match_term t2 t1\n   ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) =\n  Some ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2)\n  dom ((\\<lambda>(idx, S). Some (\\<rho> idx S)) |` tvs t2) = tvs t2\n  \\<lbrakk>raw_match_term ?t ?u ?subs = Some ?subs';\n   dom ?subs \\<subseteq> tvs ?t; ?lesubs \\<subseteq>\\<^sub>m ?subs\\<rbrakk>\n  \\<Longrightarrow> raw_match_term ?t ?u ?lesubs = Some ?subs'\n  Map.empty \\<subseteq>\\<^sub>m ?g\n\ngoal (1 subgoal):\n 1. \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs", "by blast"], ["proof (state)\nthis:\n  \\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary tinst_iff_ex_raw_match_term: \n  \"tinst t1 t2 \\<longleftrightarrow> (\\<exists>subs. raw_match_term t2 t1 (\\<lambda>p . None) = Some subs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tinst t1 t2 =\n    (\\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs)", "using ex_raw_match_term_imp_tinst tinst_imp_ex_raw_match_term"], ["proof (prove)\nusing this:\n  \\<exists>subs.\n     raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs \\<Longrightarrow>\n  tinst ?t1.0 ?t2.0\n  tinst ?t1.0 ?t2.0 \\<Longrightarrow>\n  \\<exists>subs. raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. tinst t1 t2 =\n    (\\<exists>subs. raw_match_term t2 t1 Map.empty = Some subs)", "by blast"], ["", "(* Now transfer to assoc lists for executability *)"], ["", "function (sequential) assoc_match\n  :: \"typ \\<Rightarrow> typ \\<Rightarrow> ((variable \\<times> sort) \\<times> typ) list \\<Rightarrow> ((variable \\<times> sort) \\<times> typ) list option\" where\n  \"assoc_match (Tv v S) T subs =\n    (case lookup (\\<lambda>x. x=(v,S)) subs of\n      None \\<Rightarrow> Some (((v,S), T) # subs)\n    | Some U \\<Rightarrow> (if U = T then Some subs else None))\"\n| \"assoc_match (Ty a Ts) (Ty b Us) subs =\n    (if a=b \\<and> length Ts = length Us \n      then fold (\\<lambda>(T, U) subs . Option.bind subs (assoc_match T U)) (zip Ts Us) (Some subs)\n      else None)\"\n| \"assoc_match T U subs = (if T = U then Some subs else None)\""], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>v S T subs. x = (Tv v S, T, subs) \\<Longrightarrow> P;\n        \\<And>a Ts b Us subs.\n           x = (Ty a Ts, Ty b Us, subs) \\<Longrightarrow> P;\n        \\<And>v va vb vc subs.\n           x = (Ty v va, Tv vb vc, subs) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>v S T subs va Sa Ta subsa.\n       (Tv v S, T, subs) = (Tv va Sa, Ta, subsa) \\<Longrightarrow>\n       (case lookup (\\<lambda>x. x = (v, S)) subs of\n        None \\<Rightarrow> Some (((v, S), T) # subs)\n        | Some U \\<Rightarrow> if U = T then Some subs else None) =\n       (case lookup (\\<lambda>x. x = (va, Sa)) subsa of\n        None \\<Rightarrow> Some (((va, Sa), Ta) # subsa)\n        | Some U \\<Rightarrow> if U = Ta then Some subsa else None)\n 3. \\<And>v S T subs a Ts b Us subsa.\n       (Tv v S, T, subs) = (Ty a Ts, Ty b Us, subsa) \\<Longrightarrow>\n       (case lookup (\\<lambda>x. x = (v, S)) subs of\n        None \\<Rightarrow> Some (((v, S), T) # subs)\n        | Some U \\<Rightarrow> if U = T then Some subs else None) =\n       (if a = b \\<and> length Ts = length Us\n        then fold\n              (\\<lambda>(T, U) subs.\n                  Option.bind subs\n                   (\\<lambda>x2. assoc_match_sumC (T, U, x2)))\n              (zip Ts Us) (Some subsa)\n        else None)\n 4. \\<And>v S T subs va vaa vb vc subsa.\n       (Tv v S, T, subs) = (Ty va vaa, Tv vb vc, subsa) \\<Longrightarrow>\n       (case lookup (\\<lambda>x. x = (v, S)) subs of\n        None \\<Rightarrow> Some (((v, S), T) # subs)\n        | Some U \\<Rightarrow> if U = T then Some subs else None) =\n       (if Ty va vaa = Tv vb vc then Some subsa else None)\n 5. \\<And>a Ts b Us subs aa Tsa ba Usa subsa.\n       (Ty a Ts, Ty b Us, subs) =\n       (Ty aa Tsa, Ty ba Usa, subsa) \\<Longrightarrow>\n       (if a = b \\<and> length Ts = length Us\n        then fold\n              (\\<lambda>(T, U) subs.\n                  Option.bind subs\n                   (\\<lambda>x2. assoc_match_sumC (T, U, x2)))\n              (zip Ts Us) (Some subs)\n        else None) =\n       (if aa = ba \\<and> length Tsa = length Usa\n        then fold\n              (\\<lambda>(T, U) subs.\n                  Option.bind subs\n                   (\\<lambda>x2. assoc_match_sumC (T, U, x2)))\n              (zip Tsa Usa) (Some subsa)\n        else None)\n 6. \\<And>a Ts b Us subs v va vb vc subsa.\n       (Ty a Ts, Ty b Us, subs) =\n       (Ty v va, Tv vb vc, subsa) \\<Longrightarrow>\n       (if a = b \\<and> length Ts = length Us\n        then fold\n              (\\<lambda>(T, U) subs.\n                  Option.bind subs\n                   (\\<lambda>x2. assoc_match_sumC (T, U, x2)))\n              (zip Ts Us) (Some subs)\n        else None) =\n       (if Ty v va = Tv vb vc then Some subsa else None)\n 7. \\<And>v va vb vc subs vd vaa vba vca subsa.\n       (Ty v va, Tv vb vc, subs) =\n       (Ty vd vaa, Tv vba vca, subsa) \\<Longrightarrow>\n       (if Ty v va = Tv vb vc then Some subs else None) =\n       (if Ty vd vaa = Tv vba vca then Some subsa else None)", "by (pat_completeness) auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All assoc_match_dom", "proof (relation \"measure (\\<lambda>(T, U, subs) . size T + size U)\", goal_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(T, U, subs). size T + size U))\n 2. \\<And>a Ts b Us subs x xa y xb aa.\n       \\<lbrakk>a = b \\<and> length Ts = length Us; x \\<in> set (zip Ts Us);\n        (xa, y) = x; xb = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n                         \\<in> measure\n                                (\\<lambda>(T, U, subs). size T + size U)", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. wf (measure (\\<lambda>(T, U, subs). size T + size U))\n 2. \\<And>a Ts b Us subs x xa y xb aa.\n       \\<lbrakk>a = b \\<and> length Ts = length Us; x \\<in> set (zip Ts Us);\n        (xa, y) = x; xb = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n                         \\<in> measure\n                                (\\<lambda>(T, U, subs). size T + size U)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf (measure (\\<lambda>(T, U, subs). size T + size U))", "by auto"], ["proof (state)\nthis:\n  wf (measure (\\<lambda>(T, U, subs). size T + size U))\n\ngoal (1 subgoal):\n 1. \\<And>a Ts b Us subs x xa y xb aa.\n       \\<lbrakk>a = b \\<and> length Ts = length Us; x \\<in> set (zip Ts Us);\n        (xa, y) = x; xb = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n                         \\<in> measure\n                                (\\<lambda>(T, U, subs). size T + size U)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a Ts b Us subs x xa y xb aa.\n       \\<lbrakk>a = b \\<and> length Ts = length Us; x \\<in> set (zip Ts Us);\n        (xa, y) = x; xb = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n                         \\<in> measure\n                                (\\<lambda>(T, U, subs). size T + size U)", "case (2 a Ts b Us subs x xa y xb aa)"], ["proof (state)\nthis:\n  a = b \\<and> length Ts = length Us\n  x \\<in> set (zip Ts Us)\n  (xa, y) = x\n  xb = Some aa\n\ngoal (1 subgoal):\n 1. \\<And>a Ts b Us subs x xa y xb aa.\n       \\<lbrakk>a = b \\<and> length Ts = length Us; x \\<in> set (zip Ts Us);\n        (xa, y) = x; xb = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n                         \\<in> measure\n                                (\\<lambda>(T, U, subs). size T + size U)", "hence \"length Ts = length Us\" \"a=b\""], ["proof (prove)\nusing this:\n  a = b \\<and> length Ts = length Us\n  x \\<in> set (zip Ts Us)\n  (xa, y) = x\n  xb = Some aa\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by auto"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (1 subgoal):\n 1. \\<And>a Ts b Us subs x xa y xb aa.\n       \\<lbrakk>a = b \\<and> length Ts = length Us; x \\<in> set (zip Ts Us);\n        (xa, y) = x; xb = Some aa\\<rbrakk>\n       \\<Longrightarrow> ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n                         \\<in> measure\n                                (\\<lambda>(T, U, subs). size T + size U)", "from this 2(2-)"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  x \\<in> set (zip Ts Us)\n  (xa, y) = x\n  xb = Some aa", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  x \\<in> set (zip Ts Us)\n  (xa, y) = x\n  xb = Some aa\n\ngoal (1 subgoal):\n 1. ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n    \\<in> measure (\\<lambda>(T, U, subs). size T + size U)", "by (induction Ts Us rule: list_induct2) auto"], ["proof (state)\nthis:\n  ((xa, y, aa), Ty a Ts, Ty b Us, subs)\n  \\<in> measure (\\<lambda>(T, U, subs). size T + size U)\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary assoc_match_Type_conds:\n  assumes \"assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\"\n  shows \"a=b\" \"length Ts = length Us\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a = b &&& length Ts = length Us", "using assms"], ["proof (prove)\nusing this:\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. a = b &&& length Ts = length Us", "by (auto split: if_splits)"], ["", "lemma fold_assoc_matches_first_step_not_None:\n  assumes\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (assoc_match T U)) (zip (x#xs) (y#ys)) (Some subs) = Some subs'\" \n  obtains point where\n    \"assoc_match x y subs = Some point\"\n    \"fold (\\<lambda>(T, U) subs . Option.bind subs (assoc_match T U)) (zip (xs) (ys)) (Some point) = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>assoc_match x y subs = Some point;\n         fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n          (zip xs ys) (Some point) =\n         Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n   (zip (x # xs) (y # ys)) (Some subs) =\n  Some subs'\n\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>assoc_match x y subs = Some point;\n         fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n          (zip xs ys) (Some point) =\n         Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "apply (simp split: option.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>point.\n                \\<lbrakk>assoc_match x y subs = Some point;\n                 fold\n                  (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n                  (zip xs ys) (Some point) =\n                 Some subs'\\<rbrakk>\n                \\<Longrightarrow> thesis;\n     fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n      (zip xs ys) (assoc_match x y subs) =\n     Some subs'\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (metis fold_Option_bind_eq_Some_start_not_None' not_None_eq)"], ["", "lemma assoc_match_subset: \"assoc_match T U subs = Some subs' \\<Longrightarrow> set subs \\<subseteq> set subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. assoc_match T U subs = Some subs' \\<Longrightarrow>\n    set subs \\<subseteq> set subs'", "proof (induction T U subs arbitrary: subs' rule: assoc_match.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       assoc_match (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> set aa \\<subseteq> set subs';\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'\n 3. \\<And>v va vb vc subs subs'.\n       assoc_match (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   assoc_match ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?aa \\<subseteq> set ?subs'\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       assoc_match (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> set aa \\<subseteq> set subs';\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'\n 3. \\<And>v va vb vc subs subs'.\n       assoc_match (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'", "hence l: \"length Ts = length Us\" \"a = b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   assoc_match ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?aa \\<subseteq> set ?subs'\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       assoc_match (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> set aa \\<subseteq> set subs';\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'\n 3. \\<And>v va vb vc subs subs'.\n       assoc_match (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'", "have better_IH: \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> \n    assoc_match x y subs = Some subs' \\<Longrightarrow> set subs \\<subseteq> set subs'\"\n    for x y subs subs'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     assoc_match x y subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> set subs \\<subseteq> set subs'", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa;\n   assoc_match ?xa ?y ?aa = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?aa \\<subseteq> set ?subs'\n  assoc_match (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     assoc_match x y subs = Some subs'\\<rbrakk>\n    \\<Longrightarrow> set subs \\<subseteq> set subs'", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       assoc_match (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs'\\<rbrakk>\n                   \\<Longrightarrow> set aa \\<subseteq> set subs';\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'\n 3. \\<And>v va vb vc subs subs'.\n       assoc_match (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'", "from l better_IH \"2.prems\""], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n\ngoal (1 subgoal):\n 1. set subs \\<subseteq> set subs'", "proof (induction Ts Us arbitrary: subs rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            assoc_match x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (constT a) (constT b) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'\n 2. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> set subs \\<subseteq> set subs';\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'", "case Nil"], ["proof (state)\nthis:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n  assoc_match (constT a) (constT b) subs = Some subs'\n\ngoal (2 subgoals):\n 1. \\<And>subs.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            assoc_match x y subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (constT a) (constT b) subs = Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'\n 2. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> set subs \\<subseteq> set subs';\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'", "then"], ["proof (chain)\npicking this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n  assoc_match (constT a) (constT b) subs = Some subs'", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n  assoc_match (constT a) (constT b) subs = Some subs'\n\ngoal (1 subgoal):\n 1. set subs \\<subseteq> set subs'", "by simp"], ["proof (state)\nthis:\n  set subs \\<subseteq> set subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> set subs \\<subseteq> set subs';\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> set subs \\<subseteq> set subs';\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       assoc_match x y subs = Some subs'\\<rbrakk>\n      \\<Longrightarrow> set subs \\<subseteq> set subs';\n   assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set subs'\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n  assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> set subs \\<subseteq> set subs';\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'", "obtain point where first: \"assoc_match x y subs = Some point\"\n      and rest: \"assoc_match (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>assoc_match x y subs = Some point;\n         assoc_match (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fold_assoc_matches_first_step_not_None"], ["proof (prove)\nusing this:\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>assoc_match ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n        (zip ?xs ?ys) (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>assoc_match x y subs = Some point;\n         assoc_match (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems assoc_match.simps(2) assoc_match_Type_conds(2))"], ["proof (state)\nthis:\n  assoc_match x y subs = Some point\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs'\\<rbrakk>\n               \\<Longrightarrow> set subs \\<subseteq> set subs';\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs'\\<rbrakk>\n           \\<Longrightarrow> set subs \\<subseteq> set subs';\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs =\n        Some subs'\\<rbrakk>\n       \\<Longrightarrow> set subs \\<subseteq> set subs'", "then"], ["proof (chain)\npicking this:\n  assoc_match x y subs = Some point\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'", "show ?case"], ["proof (prove)\nusing this:\n  assoc_match x y subs = Some point\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. set subs \\<subseteq> set subs'", "using Cons.IH Cons.prems(2)"], ["proof (prove)\nusing this:\n  assoc_match x y subs = Some point\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       assoc_match x y subs = Some subs'\\<rbrakk>\n      \\<Longrightarrow> set subs \\<subseteq> set subs';\n   assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set subs'\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'\\<rbrakk>\n  \\<Longrightarrow> set ?subs \\<subseteq> set ?subs'\n\ngoal (1 subgoal):\n 1. set subs \\<subseteq> set subs'", "by (fastforce split: option.splits prod.splits if_splits \n          simp add: lookup_present_eq_key bind_eq_Some_conv)"], ["proof (state)\nthis:\n  set subs \\<subseteq> set subs'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set subs \\<subseteq> set subs'\n\ngoal (2 subgoals):\n 1. \\<And>v S T subs subs'.\n       assoc_match (Tv v S) T subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'\n 2. \\<And>v va vb vc subs subs'.\n       assoc_match (Ty v va) (Tv vb vc) subs = Some subs' \\<Longrightarrow>\n       set subs \\<subseteq> set subs'", "qed (auto split: option.splits prod.splits if_splits simp add: lookup_present_eq_key)"], ["", "lemma assoc_match_distinct: \"assoc_match T U subs = Some subs' \\<Longrightarrow> distinct (map fst subs) \n  \\<Longrightarrow> distinct (map fst subs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>assoc_match T U subs = Some subs';\n     distinct (map fst subs)\\<rbrakk>\n    \\<Longrightarrow> distinct (map fst subs')", "proof (induction T U subs arbitrary: subs' rule: assoc_match.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       \\<lbrakk>assoc_match (Tv v S) T subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs';\n                    distinct (map fst aa)\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 3. \\<And>v va vb vc subs subs'.\n       \\<lbrakk>assoc_match (Ty v va) (Tv vb vc) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; assoc_match ?xa ?y ?aa = Some ?subs';\n   distinct (map fst ?aa)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       \\<lbrakk>assoc_match (Tv v S) T subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs';\n                    distinct (map fst aa)\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 3. \\<And>v va vb vc subs subs'.\n       \\<lbrakk>assoc_match (Ty v va) (Tv vb vc) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "hence l: \"length Ts = length Us\" \"a = b\""], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; assoc_match ?xa ?y ?aa = Some ?subs';\n   distinct (map fst ?aa)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       \\<lbrakk>assoc_match (Tv v S) T subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs';\n                    distinct (map fst aa)\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 3. \\<And>v va vb vc subs subs'.\n       \\<lbrakk>assoc_match (Ty v va) (Tv vb vc) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "have better_IH: \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow> \n    assoc_match x y subs = Some subs' \\<Longrightarrow> distinct (map fst subs) \\<Longrightarrow> distinct (map fst subs')\"\n    for x y subs subs'"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n    \\<Longrightarrow> distinct (map fst subs')", "using 2"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some ?aa; assoc_match ?xa ?y ?aa = Some ?subs';\n   distinct (map fst ?aa)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a Ts) (Ty b Us) subsa__ = Some subs'a__\n  distinct (map fst subsa__)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(x, y) \\<in> set (zip Ts Us);\n     assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n    \\<Longrightarrow> distinct (map fst subs')", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n\ngoal (3 subgoals):\n 1. \\<And>v S T subs subs'.\n       \\<lbrakk>assoc_match (Tv v S) T subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>a Ts b Us subs subs'.\n       \\<lbrakk>\\<And>x xa y xb aa subs'.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x; xb = Some aa;\n                    assoc_match xa y aa = Some subs';\n                    distinct (map fst aa)\\<rbrakk>\n                   \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a Ts) (Ty b Us) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 3. \\<And>v va vb vc subs subs'.\n       \\<lbrakk>assoc_match (Ty v va) (Tv vb vc) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "from l better_IH \"2.prems\""], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n  distinct (map fst subs)", "show ?case"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip Ts Us);\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a Ts) (Ty b Us) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (1 subgoal):\n 1. distinct (map fst subs')", "proof (induction Ts Us arbitrary: subs subs' rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            assoc_match x y subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (constT a) (constT b) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "case Nil"], ["proof (state)\nthis:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (constT a) (constT b) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (2 subgoals):\n 1. \\<And>subs subs'.\n       \\<lbrakk>a = b;\n        \\<And>x y subs subs'.\n           \\<lbrakk>(x, y) \\<in> set (zip [] []);\n            assoc_match x y subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (constT a) (constT b) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "then"], ["proof (chain)\npicking this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (constT a) (constT b) subs = Some subs'\n  distinct (map fst subs)", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip [] []);\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (constT a) (constT b) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (1 subgoal):\n 1. distinct (map fst subs')", "by simp"], ["proof (state)\nthis:\n  distinct (map fst subs')\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n      \\<Longrightarrow> distinct (map fst subs');\n   assoc_match (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "obtain point where first: \"assoc_match x y subs = Some point\"\n      and rest: \"assoc_match (Ty a xs) (Ty b ys) point = Some subs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>assoc_match x y subs = Some point;\n         assoc_match (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fold_assoc_matches_first_step_not_None"], ["proof (prove)\nusing this:\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>assoc_match ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n        (zip ?xs ?ys) (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>assoc_match x y subs = Some point;\n         assoc_match (Ty a xs) (Ty b ys) point = Some subs'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (no_types, lifting) Cons.hyps Cons.prems assoc_match.simps(2) assoc_match_Type_conds(2))"], ["proof (state)\nthis:\n  assoc_match x y subs = Some point\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "have dst_point: \"distinct (map fst point)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst point)", "apply (rule Cons.prems)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (?x, ?y) \\<in> set (zip (x # xs) (y # ys))\n 2. assoc_match ?x ?y ?subs = Some point\n 3. distinct (map fst ?subs)", "using first Cons.prems"], ["proof (prove)\nusing this:\n  assoc_match x y subs = Some point\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (3 subgoals):\n 1. (?x, ?y) \\<in> set (zip (x # xs) (y # ys))\n 2. assoc_match ?x ?y ?subs = Some point\n 3. distinct (map fst ?subs)", "by simp_all"], ["proof (state)\nthis:\n  distinct (map fst point)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "have \"distinct (map fst subs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst subs')", "apply (rule Cons.IH)"], ["proof (prove)\ngoal (4 subgoals):\n 1. a = b\n 2. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 3. assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\n 4. distinct (map fst ?subs)", "using Cons.prems rest"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  distinct (map fst subs)\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (4 subgoals):\n 1. a = b\n 2. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 3. assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\n 4. distinct (map fst ?subs)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\n 3. distinct (map fst ?subs)", "using Cons.prems"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs'\n  distinct (map fst subs)\n\ngoal (3 subgoals):\n 1. \\<And>x y subs subs'.\n       \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n        assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\n 3. distinct (map fst ?subs)", "apply auto[1]"], ["proof (prove)\ngoal (2 subgoals):\n 1. assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\n 2. distinct (map fst ?subs)", "using rest"], ["proof (prove)\nusing this:\n  assoc_match (Ty a xs) (Ty b ys) point = Some subs'\n\ngoal (2 subgoals):\n 1. assoc_match (Ty a xs) (Ty b ys) ?subs = Some subs'\n 2. distinct (map fst ?subs)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (map fst point)", "using dst_point"], ["proof (prove)\nusing this:\n  distinct (map fst point)\n\ngoal (1 subgoal):\n 1. distinct (map fst point)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  distinct (map fst subs')\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs subs'.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs subs'.\n           \\<lbrakk>a = b;\n            \\<And>x y subs subs'.\n               \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n                assoc_match x y subs = Some subs';\n                distinct (map fst subs)\\<rbrakk>\n               \\<Longrightarrow> distinct (map fst subs');\n            assoc_match (Ty a xs) (Ty b ys) subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        a = b;\n        \\<And>xa ya subs subs'.\n           \\<lbrakk>(xa, ya) \\<in> set (zip (x # xs) (y # ys));\n            assoc_match xa ya subs = Some subs';\n            distinct (map fst subs)\\<rbrakk>\n           \\<Longrightarrow> distinct (map fst subs');\n        assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "then"], ["proof (chain)\npicking this:\n  distinct (map fst subs')", "show ?case"], ["proof (prove)\nusing this:\n  distinct (map fst subs')\n\ngoal (1 subgoal):\n 1. distinct (map fst subs')", "using Cons.IH Cons.prems(2)"], ["proof (prove)\nusing this:\n  distinct (map fst subs')\n  \\<lbrakk>a = b;\n   \\<And>x y subs subs'.\n      \\<lbrakk>(x, y) \\<in> set (zip xs ys);\n       assoc_match x y subs = Some subs'; distinct (map fst subs)\\<rbrakk>\n      \\<Longrightarrow> distinct (map fst subs');\n   assoc_match (Ty a xs) (Ty b ys) ?subs = Some ?subs';\n   distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n  \\<lbrakk>(?x, ?y) \\<in> set (zip (x # xs) (y # ys));\n   assoc_match ?x ?y ?subs = Some ?subs'; distinct (map fst ?subs)\\<rbrakk>\n  \\<Longrightarrow> distinct (map fst ?subs')\n\ngoal (1 subgoal):\n 1. distinct (map fst subs')", "by simp"], ["proof (state)\nthis:\n  distinct (map fst subs')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  distinct (map fst subs')\n\ngoal (2 subgoals):\n 1. \\<And>v S T subs subs'.\n       \\<lbrakk>assoc_match (Tv v S) T subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')\n 2. \\<And>v va vb vc subs subs'.\n       \\<lbrakk>assoc_match (Ty v va) (Tv vb vc) subs = Some subs';\n        distinct (map fst subs)\\<rbrakk>\n       \\<Longrightarrow> distinct (map fst subs')", "qed (auto split: option.splits prod.splits if_splits simp add: lookup_present_eq_key)"], ["", "(* Seems that distinct is not even necessary, as both take the first one in case of duplicates*)"], ["", "lemma lookup_eq_map_of_ap:                           \n  shows \"lookup (\\<lambda>x. x=k) subs = map_of subs k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lookup (\\<lambda>x. x = k) subs = map_of subs k", "by (induction subs arbitrary: k) auto"], ["", "(* Ugly proof, but should mean that I can replace raw_match' with the executable assoc_match *)"], ["", "lemma raw_match'_assoc_match:\n  shows \"raw_match' T U (map_of subs) = map_option map_of (assoc_match T U subs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' T U (map_of subs) = map_option map_of (assoc_match T U subs)", "proof (induction T U \"map_of subs\" arbitrary: subs rule: raw_match'.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>v S T subs.\n       raw_match' (Tv v S) T (map_of subs) =\n       map_option map_of (assoc_match (Tv v S) T subs)\n 2. \\<And>a Ts b Us subs.\n       (\\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length Ts = length Us;\n            x \\<in> set (zip Ts Us); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of\n                              (assoc_match xa y subs)) \\<Longrightarrow>\n       raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n       map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n 3. \\<And>v va vb vc subs.\n       raw_match' (Ty v va) (Tv vb vc) (map_of subs) =\n       map_option map_of (assoc_match (Ty v va) (Tv vb vc) subs)", "case (1 v S T)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>v S T subs.\n       raw_match' (Tv v S) T (map_of subs) =\n       map_option map_of (assoc_match (Tv v S) T subs)\n 2. \\<And>a Ts b Us subs.\n       (\\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length Ts = length Us;\n            x \\<in> set (zip Ts Us); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of\n                              (assoc_match xa y subs)) \\<Longrightarrow>\n       raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n       map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n 3. \\<And>v va vb vc subs.\n       raw_match' (Ty v va) (Tv vb vc) (map_of subs) =\n       map_option map_of (assoc_match (Ty v va) (Tv vb vc) subs)", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' (Tv v S) T (map_of subs) =\n    map_option map_of (assoc_match (Tv v S) T subs)", "by (auto split: option.splits prod.splits simp add: lookup_present_eq_key lookup_eq_map_of_ap)"], ["proof (state)\nthis:\n  raw_match' (Tv v S) T (map_of subs) =\n  map_option map_of (assoc_match (Tv v S) T subs)\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs.\n       (\\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length Ts = length Us;\n            x \\<in> set (zip Ts Us); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of\n                              (assoc_match xa y subs)) \\<Longrightarrow>\n       raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n       map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<And>v va vb vc subs.\n       raw_match' (Ty v va) (Tv vb vc) (map_of subs) =\n       map_option map_of (assoc_match (Ty v va) (Tv vb vc) subs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs.\n       (\\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length Ts = length Us;\n            x \\<in> set (zip Ts Us); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of\n                              (assoc_match xa y subs)) \\<Longrightarrow>\n       raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n       map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<And>v va vb vc subs.\n       raw_match' (Ty v va) (Tv vb vc) (map_of subs) =\n       map_option map_of (assoc_match (Ty v va) (Tv vb vc) subs)", "case (2 a Ts b Us subs)"], ["proof (state)\nthis:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n\ngoal (2 subgoals):\n 1. \\<And>a Ts b Us subs.\n       (\\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length Ts = length Us;\n            x \\<in> set (zip Ts Us); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of\n                              (assoc_match xa y subs)) \\<Longrightarrow>\n       raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n       map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<And>v va vb vc subs.\n       raw_match' (Ty v va) (Tv vb vc) (map_of subs) =\n       map_option map_of (assoc_match (Ty v va) (Tv vb vc) subs)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "proof(cases \"(raw_match' (Ty a Ts) (Ty b Us) (map_of subs))\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa y xb subs.\n                \\<lbrakk>a = b \\<and> length Ts = length Us;\n                 x \\<in> set (zip Ts Us); (xa, y) = x;\n                 xb = Some (map_of subs)\\<rbrakk>\n                \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                  map_option map_of (assoc_match xa y subs);\n     raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "case None"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x xa y xb subs.\n                \\<lbrakk>a = b \\<and> length Ts = length Us;\n                 x \\<in> set (zip Ts Us); (xa, y) = x;\n                 xb = Some (map_of subs)\\<rbrakk>\n                \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                  map_option map_of (assoc_match xa y subs);\n     raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "then"], ["proof (chain)\npicking this:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "proof (cases \"a = b \\<and> length Ts = length Us\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     a = b \\<and> length Ts = length Us\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     \\<not> (a = b \\<and> length Ts = length Us)\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)", "case True"], ["proof (state)\nthis:\n  a = b \\<and> length Ts = length Us\n\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     a = b \\<and> length Ts = length Us\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     \\<not> (a = b \\<and> length Ts = length Us)\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)", "hence \"length Ts = length Us\" \"a = b\""], ["proof (prove)\nusing this:\n  a = b \\<and> length Ts = length Us\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by auto"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     a = b \\<and> length Ts = length Us\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)\n 2. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     \\<not> (a = b \\<and> length Ts = length Us)\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)", "then"], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b", "show ?thesis"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "using 2 None"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "proof (induction Ts Us arbitrary: subs rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs.\n       \\<lbrakk>a = b;\n        \\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of (assoc_match xa y subs);\n        raw_match' (constT a) (constT b) (map_of subs) = None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) (constT b) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (constT a) (constT b) subs)\n 2. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x xa y xb subs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x;\n                xb = Some (map_of subs)\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                 map_option map_of (assoc_match xa y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = None\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa xaa ya xb subs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (map_of subs) =\n                             map_option map_of (assoc_match xaa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "case Nil"], ["proof (state)\nthis:\n  a = b\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (constT a) (constT b) (map_of subs) = None\n\ngoal (2 subgoals):\n 1. \\<And>subs.\n       \\<lbrakk>a = b;\n        \\<And>x xa y xb subs.\n           \\<lbrakk>a = b \\<and> length [] = length [];\n            x \\<in> set (zip [] []); (xa, y) = x;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                             map_option map_of (assoc_match xa y subs);\n        raw_match' (constT a) (constT b) (map_of subs) = None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) (constT b) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (constT a) (constT b) subs)\n 2. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x xa y xb subs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x;\n                xb = Some (map_of subs)\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                 map_option map_of (assoc_match xa y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = None\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa xaa ya xb subs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (map_of subs) =\n                             map_option map_of (assoc_match xaa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "then"], ["proof (chain)\npicking this:\n  a = b\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (constT a) (constT b) (map_of subs) = None", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  \\<lbrakk>a = b \\<and> length [] = length []; ?x \\<in> set (zip [] []);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (constT a) (constT b) (map_of subs) = None\n\ngoal (1 subgoal):\n 1. raw_match' (constT a) (constT b) (map_of subs) =\n    map_option map_of (assoc_match (constT a) (constT b) subs)", "by simp"], ["proof (state)\nthis:\n  raw_match' (constT a) (constT b) (map_of subs) =\n  map_option map_of (assoc_match (constT a) (constT b) subs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x xa y xb subs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x;\n                xb = Some (map_of subs)\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                 map_option map_of (assoc_match xa y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = None\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa xaa ya xb subs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (map_of subs) =\n                             map_option map_of (assoc_match xaa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x xa y xb subs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x;\n                xb = Some (map_of subs)\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                 map_option map_of (assoc_match xa y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = None\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa xaa ya xb subs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (map_of subs) =\n                             map_option map_of (assoc_match xaa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x xa y xb subs.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some (map_of subs)\\<rbrakk>\n      \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                        map_option map_of (assoc_match xa y subs);\n   raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) = None\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) =\n                    map_option map_of\n                     (assoc_match (Ty a xs) (Ty b ys) ?subs)\n  a = b\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x;\n   ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = None\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x xa y xb subs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x;\n                xb = Some (map_of subs)\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                 map_option map_of (assoc_match xa y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = None\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa xaa ya xb subs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (map_of subs) =\n                             map_option map_of (assoc_match xaa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "hence eq_hd: \"raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\""], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x xa y xb subs.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some (map_of subs)\\<rbrakk>\n      \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                        map_option map_of (assoc_match xa y subs);\n   raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) = None\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) =\n                    map_option map_of\n                     (assoc_match (Ty a xs) (Ty b ys) ?subs)\n  a = b\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x;\n   ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = None\n\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)", "by auto"], ["proof (state)\nthis:\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs.\n           \\<lbrakk>a = b;\n            \\<And>x xa y xb subs.\n               \\<lbrakk>a = b \\<and> length xs = length ys;\n                x \\<in> set (zip xs ys); (xa, y) = x;\n                xb = Some (map_of subs)\\<rbrakk>\n               \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                 map_option map_of (assoc_match xa y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = None\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa xaa ya xb subs.\n           \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n            xa \\<in> set (zip (x # xs) (y # ys)); (xaa, ya) = xa;\n            xb = Some (map_of subs)\\<rbrakk>\n           \\<Longrightarrow> raw_match' xaa ya (map_of subs) =\n                             map_option map_of (assoc_match xaa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        None\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "then"], ["proof (chain)\npicking this:\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)", "show ?case"], ["proof (prove)\nusing this:\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "proof(cases \"assoc_match x y subs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match' x y (map_of subs) =\n             map_option map_of (assoc_match x y subs);\n     assoc_match x y subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                       (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n 2. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "case None"], ["proof (state)\nthis:\n  assoc_match x y subs = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match' x y (map_of subs) =\n             map_option map_of (assoc_match x y subs);\n     assoc_match x y subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                       (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n 2. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "hence \"raw_match' x y (map_of subs) = None\""], ["proof (prove)\nusing this:\n  assoc_match x y subs = None\n\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = None", "using eq_hd"], ["proof (prove)\nusing this:\n  assoc_match x y subs = None\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\n\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = None", "by simp"], ["proof (state)\nthis:\n  raw_match' x y (map_of subs) = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>raw_match' x y (map_of subs) =\n             map_option map_of (assoc_match x y subs);\n     assoc_match x y subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                       (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n 2. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "then"], ["proof (chain)\npicking this:\n  raw_match' x y (map_of subs) = None", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match' x y (map_of subs) = None\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "using fold_Option_bind_at_some_point_None_eq_None fold_assoc_matches_first_step_not_None\n              Cons.prems"], ["proof (prove)\nusing this:\n  raw_match' x y (map_of subs) = None\n  fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) ?l1.0 ?start =\n  None \\<Longrightarrow>\n  fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) (?l1.0 @ ?l2.0)\n   ?start =\n  None\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>assoc_match ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n        (zip ?xs ?ys) (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  a = b\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x;\n   ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = None\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "by (auto split: option.splits prod.splits if_splits \n                simp add: fold_Option_bind_eq_None_start_None)"], ["proof (state)\nthis:\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n  map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "case (Some res)"], ["proof (state)\nthis:\n  assoc_match x y subs = Some res\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "hence \"raw_match' x y (map_of subs) = Some (map_of res)\""], ["proof (prove)\nusing this:\n  assoc_match x y subs = Some res\n\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = Some (map_of res)", "using eq_hd"], ["proof (prove)\nusing this:\n  assoc_match x y subs = Some res\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\n\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = Some (map_of res)", "by simp"], ["proof (state)\nthis:\n  raw_match' x y (map_of subs) = Some (map_of res)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        assoc_match x y subs = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "then"], ["proof (chain)\npicking this:\n  raw_match' x y (map_of subs) = Some (map_of res)", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match' x y (map_of subs) = Some (map_of res)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "using fold_assoc_matches_first_step_not_None fold_Option_bind_eq_Some_at_each_point_Some\n              Cons.prems Cons.IH"], ["proof (prove)\nusing this:\n  raw_match' x y (map_of subs) = Some (map_of res)\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>assoc_match ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n        (zip ?xs ?ys) (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) (?l1.0 @ ?l2.0)\n   ?start =\n  Some ?res \\<Longrightarrow>\n  \\<exists>point.\n     fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) ?l1.0\n      ?start =\n     Some point \\<and>\n     fold (\\<lambda>(x, y) option. Option.bind option (?f x y)) ?l2.0\n      (Some point) =\n     Some ?res\n  a = b\n  \\<lbrakk>a = b \\<and> length (x # xs) = length (y # ys);\n   ?x \\<in> set (zip (x # xs) (y # ys)); (?xa, ?y) = ?x;\n   ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = None\n  \\<lbrakk>a = b;\n   \\<And>x xa y xb subs.\n      \\<lbrakk>a = b \\<and> length xs = length ys; x \\<in> set (zip xs ys);\n       (xa, y) = x; xb = Some (map_of subs)\\<rbrakk>\n      \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                        map_option map_of (assoc_match xa y subs);\n   raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) = None\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) =\n                    map_option map_of\n                     (assoc_match (Ty a xs) (Ty b ys) ?subs)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "by (auto split: option.splits prod.splits if_splits \n                simp add: fold_Option_bind_eq_None_start_None)"], ["proof (state)\nthis:\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n  map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n  map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n  map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     \\<not> (a = b \\<and> length Ts = length Us)\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     \\<not> (a = b \\<and> length Ts = length Us)\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)", "case False"], ["proof (state)\nthis:\n  \\<not> (a = b \\<and> length Ts = length Us)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None;\n     \\<not> (a = b \\<and> length Ts = length Us)\\<rbrakk>\n    \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                      map_option map_of\n                       (assoc_match (Ty a Ts) (Ty b Us) subs)", "then"], ["proof (chain)\npicking this:\n  \\<not> (a = b \\<and> length Ts = length Us)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (a = b \\<and> length Ts = length Us)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "using None 2"], ["proof (prove)\nusing this:\n  \\<not> (a = b \\<and> length Ts = length Us)\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = None\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "by auto"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n  map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n  map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "case (Some res)"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "hence l: \"length Ts = length Us\" \"a = b\""], ["proof (prove)\nusing this:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. length Ts = length Us &&& a = b", "by (simp_all split: if_splits)"], ["proof (state)\nthis:\n  length Ts = length Us\n  a = b\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "have better_IH: \"(x, y) \\<in> set (zip Ts Us) \\<Longrightarrow>\n    raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\"\n      for x y subs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (zip Ts Us) \\<Longrightarrow>\n    raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)", "using 2 Some"], ["proof (prove)\nusing this:\n  \\<lbrakk>a = b \\<and> length Ts = length Us; ?x \\<in> set (zip Ts Us);\n   (?xa, ?y) = ?x; ?xb = Some (map_of ?subs)\\<rbrakk>\n  \\<Longrightarrow> raw_match' ?xa ?y (map_of ?subs) =\n                    map_option map_of (assoc_match ?xa ?y ?subs)\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subsa__) = Some res\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> set (zip Ts Us) \\<Longrightarrow>\n    raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)", "by (simp split: if_splits)"], ["proof (state)\nthis:\n  (?x, ?y) \\<in> set (zip Ts Us) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n\ngoal (1 subgoal):\n 1. \\<And>aa.\n       \\<lbrakk>\\<And>x xa y xb subs.\n                   \\<lbrakk>a = b \\<and> length Ts = length Us;\n                    x \\<in> set (zip Ts Us); (xa, y) = x;\n                    xb = Some (map_of subs)\\<rbrakk>\n                   \\<Longrightarrow> raw_match' xa y (map_of subs) =\n                                     map_option map_of\n(assoc_match xa y subs);\n        raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some aa\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a Ts) (Ty b Us) subs)", "from l better_IH Some \"2.prems\""], ["proof (chain)\npicking this:\n  length Ts = length Us\n  a = b\n  (?x, ?y) \\<in> set (zip Ts Us) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some res", "show ?thesis"], ["proof (prove)\nusing this:\n  length Ts = length Us\n  a = b\n  (?x, ?y) \\<in> set (zip Ts Us) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n    map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)", "proof (induction Ts Us arbitrary: subs res rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>subs res.\n       \\<lbrakk>a = b;\n        \\<And>x y subs.\n           (x, y) \\<in> set (zip [] []) \\<Longrightarrow>\n           raw_match' x y (map_of subs) =\n           map_option map_of (assoc_match x y subs);\n        raw_match' (constT a) (constT b) (map_of subs) = Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) (constT b) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (constT a) (constT b) subs)\n 2. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "case Nil"], ["proof (state)\nthis:\n  a = b\n  (?x, ?y) \\<in> set (zip [] []) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (constT a) (constT b) (map_of subs) = Some res\n\ngoal (2 subgoals):\n 1. \\<And>subs res.\n       \\<lbrakk>a = b;\n        \\<And>x y subs.\n           (x, y) \\<in> set (zip [] []) \\<Longrightarrow>\n           raw_match' x y (map_of subs) =\n           map_option map_of (assoc_match x y subs);\n        raw_match' (constT a) (constT b) (map_of subs) = Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (constT a) (constT b) (map_of subs) =\n                         map_option map_of\n                          (assoc_match (constT a) (constT b) subs)\n 2. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "then"], ["proof (chain)\npicking this:\n  a = b\n  (?x, ?y) \\<in> set (zip [] []) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (constT a) (constT b) (map_of subs) = Some res", "show ?case"], ["proof (prove)\nusing this:\n  a = b\n  (?x, ?y) \\<in> set (zip [] []) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (constT a) (constT b) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. raw_match' (constT a) (constT b) (map_of subs) =\n    map_option map_of (assoc_match (constT a) (constT b) subs)", "by simp"], ["proof (state)\nthis:\n  raw_match' (constT a) (constT b) (map_of subs) =\n  map_option map_of (assoc_match (constT a) (constT b) subs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "case (Cons x xs y ys)"], ["proof (state)\nthis:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs.\n      (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n      raw_match' x y (map_of subs) =\n      map_option map_of (assoc_match x y subs);\n   raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) = Some ?res\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) =\n                    map_option map_of\n                     (assoc_match (Ty a xs) (Ty b ys) ?subs)\n  a = b\n  (?x, ?y) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "obtain point where first: \"raw_match' x y (map_of subs) = Some (map_of point)\"\n        and rest: \"raw_match' (Ty a xs) (Ty b ys) (map_of point) = Some res\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y (map_of subs) = Some (map_of point);\n         raw_match' (Ty a xs) (Ty b ys) (map_of point) = Some res\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fold_matches_first_step_not_None Cons.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n            (zip (?x # ?xs) (?y # ?ys)) (Some ?subs) =\n           Some ?subs';\n   \\<And>point.\n      \\<lbrakk>raw_match' ?x ?y ?subs = Some point;\n       fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n        (zip ?xs ?ys) (Some point) =\n       Some ?subs'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n  a = b\n  (?x, ?y) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. (\\<And>point.\n        \\<lbrakk>raw_match' x y (map_of subs) = Some (map_of point);\n         raw_match' (Ty a xs) (Ty b ys) (map_of point) = Some res\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp split: option.splits prod.splits if_splits) (smt map_option_eq_Some)"], ["proof (state)\nthis:\n  raw_match' x y (map_of subs) = Some (map_of point)\n  raw_match' (Ty a xs) (Ty b ys) (map_of point) = Some res\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "have 1: \"raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)", "using Cons.prems"], ["proof (prove)\nusing this:\n  a = b\n  (?x, ?y) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = Some res\n\ngoal (1 subgoal):\n 1. raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)", "by simp"], ["proof (state)\nthis:\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "have 2: \"raw_match' (Ty a xs) (Ty b ys) (map_of point)\n        = map_option map_of (assoc_match (Ty a xs) (Ty b ys) point)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' (Ty a xs) (Ty b ys) (map_of point) =\n    map_option map_of (assoc_match (Ty a xs) (Ty b ys) point)", "using Cons rest"], ["proof (prove)\nusing this:\n  length xs = length ys\n  \\<lbrakk>a = b;\n   \\<And>x y subs.\n      (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n      raw_match' x y (map_of subs) =\n      map_option map_of (assoc_match x y subs);\n   raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) = Some ?res\\<rbrakk>\n  \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of ?subs) =\n                    map_option map_of\n                     (assoc_match (Ty a xs) (Ty b ys) ?subs)\n  a = b\n  (?x, ?y) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n  raw_match' ?x ?y (map_of ?subs) =\n  map_option map_of (assoc_match ?x ?y ?subs)\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) = Some res\n  raw_match' (Ty a xs) (Ty b ys) (map_of point) = Some res\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a xs) (Ty b ys) (map_of point) =\n    map_option map_of (assoc_match (Ty a xs) (Ty b ys) point)", "by auto"], ["proof (state)\nthis:\n  raw_match' (Ty a xs) (Ty b ys) (map_of point) =\n  map_option map_of (assoc_match (Ty a xs) (Ty b ys) point)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys subs res.\n       \\<lbrakk>length xs = length ys;\n        \\<And>subs res.\n           \\<lbrakk>a = b;\n            \\<And>x y subs.\n               (x, y) \\<in> set (zip xs ys) \\<Longrightarrow>\n               raw_match' x y (map_of subs) =\n               map_option map_of (assoc_match x y subs);\n            raw_match' (Ty a xs) (Ty b ys) (map_of subs) = Some res\\<rbrakk>\n           \\<Longrightarrow> raw_match' (Ty a xs) (Ty b ys) (map_of subs) =\n                             map_option map_of\n                              (assoc_match (Ty a xs) (Ty b ys) subs);\n        a = b;\n        \\<And>xa ya subs.\n           (xa, ya) \\<in> set (zip (x # xs) (y # ys)) \\<Longrightarrow>\n           raw_match' xa ya (map_of subs) =\n           map_option map_of (assoc_match xa ya subs);\n        raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> raw_match' (Ty a (x # xs)) (Ty b (y # ys))\n                          (map_of subs) =\n                         map_option map_of\n                          (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "using 1 2 first rest"], ["proof (prove)\nusing this:\n  raw_match' x y (map_of subs) = map_option map_of (assoc_match x y subs)\n  raw_match' (Ty a xs) (Ty b ys) (map_of point) =\n  map_option map_of (assoc_match (Ty a xs) (Ty b ys) point)\n  raw_match' x y (map_of subs) = Some (map_of point)\n  raw_match' (Ty a xs) (Ty b ys) (map_of point) = Some res\n\ngoal (1 subgoal):\n 1. raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n    map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)", "apply (simp split: if_splits option.splits prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z.\n       \\<lbrakk>raw_match' x y (map_of subs) =\n                map_option map_of (assoc_match x y subs);\n        Some (map_of point) = map_option map_of (assoc_match x y subs);\n        a = b; length xs = length ys;\n        fold (\\<lambda>(T, U) subs. Option.bind subs (assoc_match T U))\n         (zip xs ys) (Some point) =\n        Some z;\n        map_of z = res;\n        fold (\\<lambda>(T, U) subs. Option.bind subs (raw_match' T U))\n         (zip xs ys) (map_option map_of (assoc_match x y subs)) =\n        Some res\\<rbrakk>\n       \\<Longrightarrow> Some res =\n                         map_option map_of\n                          (fold\n                            (\\<lambda>(T, U) subs.\n                                Option.bind subs (assoc_match T U))\n                            (zip xs ys) (assoc_match x y subs))", "by (smt Cons.IH Cons.prems(2) assoc_match.simps(2) list.set_intros(2) map_option_eq_Some \n            rest zip_Cons_Cons)"], ["proof (state)\nthis:\n  raw_match' (Ty a (x # xs)) (Ty b (y # ys)) (map_of subs) =\n  map_option map_of (assoc_match (Ty a (x # xs)) (Ty b (y # ys)) subs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n  map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match' (Ty a Ts) (Ty b Us) (map_of subs) =\n  map_option map_of (assoc_match (Ty a Ts) (Ty b Us) subs)\n\ngoal (1 subgoal):\n 1. \\<And>v va vb vc subs.\n       raw_match' (Ty v va) (Tv vb vc) (map_of subs) =\n       map_option map_of (assoc_match (Ty v va) (Tv vb vc) subs)", "qed (auto split: option.splits prod.splits simp add: lookup_present_eq_key)"], ["", "lemma dom_eq_and_eq_on_dom_imp_eq: \"dom m = dom m' \\<Longrightarrow> \\<forall>x\\<in>dom m . m x = m' x \\<Longrightarrow> m = m'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>dom m = dom m'; \\<forall>x\\<in>dom m. m x = m' x\\<rbrakk>\n    \\<Longrightarrow> m = m'", "by (simp add: map_le_def map_le_same_dom_imp_same_map)"], ["", "lemma list_of_map:\n  assumes \"finite (dom subs)\" \n  shows \"\\<exists>l. map_of l = subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "proof-"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "have \"finite {(k, the (subs k)) | k . k\\<in>dom subs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite {(k, the (subs k)) |k. k \\<in> dom subs}", "using assms"], ["proof (prove)\nusing this:\n  finite (dom subs)\n\ngoal (1 subgoal):\n 1. finite {(k, the (subs k)) |k. k \\<in> dom subs}", "by simp"], ["proof (state)\nthis:\n  finite {(k, the (subs k)) |k. k \\<in> dom subs}\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "from this"], ["proof (chain)\npicking this:\n  finite {(k, the (subs k)) |k. k \\<in> dom subs}", "obtain l where l: \"set l = {(k, the (subs k)) | k . k\\<in>dom subs}\""], ["proof (prove)\nusing this:\n  finite {(k, the (subs k)) |k. k \\<in> dom subs}\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        set l = {(k, the (subs k)) |k. k \\<in> dom subs} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using finite_list"], ["proof (prove)\nusing this:\n  finite {(k, the (subs k)) |k. k \\<in> dom subs}\n  finite ?A \\<Longrightarrow> \\<exists>xs. set xs = ?A\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        set l = {(k, the (subs k)) |k. k \\<in> dom subs} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  set l = {(k, the (subs k)) |k. k \\<in> dom subs}\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "hence \"dom (map_of l) = fst ` {(k, the (subs k)) | k . k\\<in>dom subs}\""], ["proof (prove)\nusing this:\n  set l = {(k, the (subs k)) |k. k \\<in> dom subs}\n\ngoal (1 subgoal):\n 1. dom (map_of l) = fst ` {(k, the (subs k)) |k. k \\<in> dom subs}", "by (simp add: dom_map_of_conv_image_fst)"], ["proof (state)\nthis:\n  dom (map_of l) = fst ` {(k, the (subs k)) |k. k \\<in> dom subs}\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "also"], ["proof (state)\nthis:\n  dom (map_of l) = fst ` {(k, the (subs k)) |k. k \\<in> dom subs}\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "have \"\\<dots> = dom subs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ` {(k, the (subs k)) |k. k \\<in> dom subs} = dom subs", "by (simp add: Setcompr_eq_image domI image_image)"], ["proof (state)\nthis:\n  fst ` {(k, the (subs k)) |k. k \\<in> dom subs} = dom subs\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "finally"], ["proof (chain)\npicking this:\n  dom (map_of l) = dom subs", "have \"dom (map_of l) = dom subs\""], ["proof (prove)\nusing this:\n  dom (map_of l) = dom subs\n\ngoal (1 subgoal):\n 1. dom (map_of l) = dom subs", "."], ["proof (state)\nthis:\n  dom (map_of l) = dom subs\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "moreover"], ["proof (state)\nthis:\n  dom (map_of l) = dom subs\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "have \"map_of l x = subs x\" if \"x\\<in>dom subs\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_of l x = subs x", "using that"], ["proof (prove)\nusing this:\n  x \\<in> dom subs\n\ngoal (1 subgoal):\n 1. map_of l x = subs x", "by (smt l domIff fst_conv map_of_SomeD mem_Collect_eq option.collapse prod.sel(2) weak_map_of_SomeI)"], ["proof (state)\nthis:\n  ?x \\<in> dom subs \\<Longrightarrow> map_of l ?x = subs ?x\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "ultimately"], ["proof (chain)\npicking this:\n  dom (map_of l) = dom subs\n  ?x \\<in> dom subs \\<Longrightarrow> map_of l ?x = subs ?x", "have \"map_of l = subs\""], ["proof (prove)\nusing this:\n  dom (map_of l) = dom subs\n  ?x \\<in> dom subs \\<Longrightarrow> map_of l ?x = subs ?x\n\ngoal (1 subgoal):\n 1. map_of l = subs", "by (simp add: dom_eq_and_eq_on_dom_imp_eq)"], ["proof (state)\nthis:\n  map_of l = subs\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", "thus ?thesis"], ["proof (prove)\nusing this:\n  map_of l = subs\n\ngoal (1 subgoal):\n 1. \\<exists>l. map_of l = subs", ".."], ["proof (state)\nthis:\n  \\<exists>l. map_of l = subs\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary tinstT_iff_assoc_match[code]: \"tinstT T1 T2 \\<longleftrightarrow> assoc_match T2 T1 [] ~= None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tinstT T1 T2 = (assoc_match T2 T1 [] \\<noteq> None)", "using tinstT_iff_ex_raw_match' list_of_map raw_match'_assoc_match"], ["proof (prove)\nusing this:\n  tinstT ?T1.0 ?T2.0 =\n  (\\<exists>subs. raw_match' ?T2.0 ?T1.0 Map.empty = Some subs)\n  finite (dom ?subs) \\<Longrightarrow> \\<exists>l. map_of l = ?subs\n  raw_match' ?T ?U (map_of ?subs) =\n  map_option map_of (assoc_match ?T ?U ?subs)\n\ngoal (1 subgoal):\n 1. tinstT T1 T2 = (assoc_match T2 T1 [] \\<noteq> None)", "by (smt map_of_eq_empty_iff map_option_is_None option.collapse option.distinct(1))"], ["", "function (sequential) assoc_match_term \n  :: \"term \\<Rightarrow> term \\<Rightarrow> ((variable \\<times> sort) \\<times> typ) list \\<Rightarrow> ((variable \\<times> sort) \\<times> typ) list option\"\n  where\n  \"assoc_match_term (Ct a T) (Ct b U) subs = (if a = b then assoc_match T U subs else None)\"\n| \"assoc_match_term (Fv a T) (Fv b U) subs = (if a = b then assoc_match T U subs else None)\"\n| \"assoc_match_term (Bv i) (Bv j) subs = (if i = j then Some subs else None)\"\n| \"assoc_match_term (Abs T t) (Abs U u) subs = \n    Option.bind (assoc_match T U subs) (assoc_match_term t u)\"\n| \"assoc_match_term (f $ u) (f' $ u') subs = Option.bind (assoc_match_term f f' subs) (assoc_match_term u u')\"\n| \"assoc_match_term _ _ _ = None\""], ["proof (prove)\ngoal (704 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>a T b U subs.\n                   x = (Ct a T, Ct b U, subs) \\<Longrightarrow> P;\n        \\<And>a T b U subs. x = (Fv a T, Fv b U, subs) \\<Longrightarrow> P;\n        \\<And>i j subs. x = (Bv i, Bv j, subs) \\<Longrightarrow> P;\n        \\<And>T t U u subs.\n           x = (Abs T t, Abs U u, subs) \\<Longrightarrow> P;\n        \\<And>f u f' u' subs.\n           x = (f $ u, f' $ u', subs) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Fv v va, Ct vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Fv v va, Bv vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Fv v va, Abs vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Fv v va, vb $ vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, Ct va vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, Fv va vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, Abs va vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Bv v, va $ vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Abs v va, Ct vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Abs v va, Fv vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (Abs v va, Bv vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (Abs v va, vb $ vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (v $ va, Ct vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (v $ va, Fv vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb uw_. x = (v $ va, Bv vb, uw_) \\<Longrightarrow> P;\n        \\<And>v va vb vc uw_.\n           x = (v $ va, Abs vb vc, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Ct vb vc, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb v va uw_. x = (Bv vb, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Abs vb vc, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (vb $ vc, Fv v va, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (Ct va vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (Fv va vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (Abs va vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>va vb v uw_. x = (va $ vb, Bv v, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Ct vb vc, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Fv vb vc, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb v va uw_. x = (Bv vb, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (vb $ vc, Abs v va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Ct vb vc, v $ va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Fv vb vc, v $ va, uw_) \\<Longrightarrow> P;\n        \\<And>vb v va uw_. x = (Bv vb, v $ va, uw_) \\<Longrightarrow> P;\n        \\<And>vb vc v va uw_.\n           x = (Abs vb vc, v $ va, uw_) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>a T b U subs aa Ta ba Ua subsa.\n       (Ct a T, Ct b U, subs) =\n       (Ct aa Ta, Ct ba Ua, subsa) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) =\n       (if aa = ba then assoc_match Ta Ua subsa else None)\n 3. \\<And>a T b U subs aa Ta ba Ua subsa.\n       (Ct a T, Ct b U, subs) =\n       (Fv aa Ta, Fv ba Ua, subsa) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) =\n       (if aa = ba then assoc_match Ta Ua subsa else None)\n 4. \\<And>a T b U subs i j subsa.\n       (Ct a T, Ct b U, subs) = (Bv i, Bv j, subsa) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) =\n       (if i = j then Some subsa else None)\n 5. \\<And>a T b U subs Ta t Ua u subsa.\n       (Ct a T, Ct b U, subs) =\n       (Abs Ta t, Abs Ua u, subsa) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) =\n       Option.bind (assoc_match Ta Ua subsa)\n        (\\<lambda>x2. assoc_match_term_sumC (t, u, x2))\n 6. \\<And>a T b U subs f u f' u' subsa.\n       (Ct a T, Ct b U, subs) = (f $ u, f' $ u', subsa) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) =\n       Option.bind (assoc_match_term_sumC (f, f', subsa))\n        (\\<lambda>x2. assoc_match_term_sumC (u, u', x2))\n 7. \\<And>a T b U subs v va vb vc uw_.\n       (Ct a T, Ct b U, subs) = (Fv v va, Ct vb vc, uw_) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) = None\n 8. \\<And>a T b U subs v va vb uw_.\n       (Ct a T, Ct b U, subs) = (Fv v va, Bv vb, uw_) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) = None\n 9. \\<And>a T b U subs v va vb vc uw_.\n       (Ct a T, Ct b U, subs) = (Fv v va, Abs vb vc, uw_) \\<Longrightarrow>\n       (if a = b then assoc_match T U subs else None) = None\n 10. \\<And>a T b U subs v va vb vc uw_.\n        (Ct a T, Ct b U, subs) = (Fv v va, vb $ vc, uw_) \\<Longrightarrow>\n        (if a = b then assoc_match T U subs else None) = None\nA total of 704 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All assoc_match_term_dom", "by size_change"], ["", "lemma raw_match_term_assoc_match_term:\n  \"raw_match_term t u (map_of subs) = map_option map_of (assoc_match_term t u subs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. raw_match_term t u (map_of subs) =\n    map_option map_of (assoc_match_term t u subs)", "proof (induction t u \"map_of subs\" arbitrary: subs rule: raw_match_term.induct)"], ["proof (state)\ngoal (37 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>T t U u subs.\n       (\\<And>subsa.\n           raw_match' T U (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term t u (map_of subsa) =\n           map_option map_of (assoc_match_term t u subsa)) \\<Longrightarrow>\n       raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n       map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)\n 5. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 6. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 7. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 9. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\nA total of 37 subgoals...", "case (4 T t U u)"], ["proof (state)\nthis:\n  raw_match' T U (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term t u (map_of ?subs) =\n  map_option map_of (assoc_match_term t u ?subs)\n\ngoal (37 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>T t U u subs.\n       (\\<And>subsa.\n           raw_match' T U (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term t u (map_of subsa) =\n           map_option map_of (assoc_match_term t u subsa)) \\<Longrightarrow>\n       raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n       map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)\n 5. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 6. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 7. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 9. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\nA total of 37 subgoals...", "then"], ["proof (chain)\npicking this:\n  raw_match' T U (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term t u (map_of ?subs) =\n  map_option map_of (assoc_match_term t u ?subs)", "show ?case"], ["proof (prove)\nusing this:\n  raw_match' T U (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term t u (map_of ?subs) =\n  map_option map_of (assoc_match_term t u ?subs)\n\ngoal (1 subgoal):\n 1. raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n    map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)", "proof (cases \"assoc_match T U subs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>subs.\n                raw_match' T U (map_of subs) =\n                Some (map_of subs) \\<Longrightarrow>\n                raw_match_term t u (map_of subs) =\n                map_option map_of (assoc_match_term t u subs);\n     assoc_match T U subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                      map_option map_of\n                       (assoc_match_term (Abs T t) (Abs U u) subs)\n 2. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "case None"], ["proof (state)\nthis:\n  assoc_match T U subs = None\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>subs.\n                raw_match' T U (map_of subs) =\n                Some (map_of subs) \\<Longrightarrow>\n                raw_match_term t u (map_of subs) =\n                map_option map_of (assoc_match_term t u subs);\n     assoc_match T U subs = None\\<rbrakk>\n    \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                      map_option map_of\n                       (assoc_match_term (Abs T t) (Abs U u) subs)\n 2. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "then"], ["proof (chain)\npicking this:\n  assoc_match T U subs = None", "show ?thesis"], ["proof (prove)\nusing this:\n  assoc_match T U subs = None\n\ngoal (1 subgoal):\n 1. raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n    map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)", "using raw_match'_assoc_match"], ["proof (prove)\nusing this:\n  assoc_match T U subs = None\n  raw_match' ?T ?U (map_of ?subs) =\n  map_option map_of (assoc_match ?T ?U ?subs)\n\ngoal (1 subgoal):\n 1. raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n    map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)", "by simp"], ["proof (state)\nthis:\n  raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n  map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "case (Some bsubs)"], ["proof (state)\nthis:\n  assoc_match T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "hence 1: \"raw_match' T U (map_of subs) = Some (map_of bsubs)\""], ["proof (prove)\nusing this:\n  assoc_match T U subs = Some bsubs\n\ngoal (1 subgoal):\n 1. raw_match' T U (map_of subs) = Some (map_of bsubs)", "using raw_match'_assoc_match"], ["proof (prove)\nusing this:\n  assoc_match T U subs = Some bsubs\n  raw_match' ?T ?U (map_of ?subs) =\n  map_option map_of (assoc_match ?T ?U ?subs)\n\ngoal (1 subgoal):\n 1. raw_match' T U (map_of subs) = Some (map_of bsubs)", "by simp"], ["proof (state)\nthis:\n  raw_match' T U (map_of subs) = Some (map_of bsubs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "hence \"raw_match_term t u (map_of bsubs) = map_option map_of (assoc_match_term t u bsubs)\""], ["proof (prove)\nusing this:\n  raw_match' T U (map_of subs) = Some (map_of bsubs)\n\ngoal (1 subgoal):\n 1. raw_match_term t u (map_of bsubs) =\n    map_option map_of (assoc_match_term t u bsubs)", "using 4"], ["proof (prove)\nusing this:\n  raw_match' T U (map_of subs) = Some (map_of bsubs)\n  raw_match' T U (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term t u (map_of ?subs) =\n  map_option map_of (assoc_match_term t u ?subs)\n\ngoal (1 subgoal):\n 1. raw_match_term t u (map_of bsubs) =\n    map_option map_of (assoc_match_term t u bsubs)", "by blast"], ["proof (state)\nthis:\n  raw_match_term t u (map_of bsubs) =\n  map_option map_of (assoc_match_term t u bsubs)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>subs.\n                   raw_match' T U (map_of subs) =\n                   Some (map_of subs) \\<Longrightarrow>\n                   raw_match_term t u (map_of subs) =\n                   map_option map_of (assoc_match_term t u subs);\n        assoc_match T U subs = Some a\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (Abs T t) (Abs U u) subs)", "then"], ["proof (chain)\npicking this:\n  raw_match_term t u (map_of bsubs) =\n  map_option map_of (assoc_match_term t u bsubs)", "show ?thesis"], ["proof (prove)\nusing this:\n  raw_match_term t u (map_of bsubs) =\n  map_option map_of (assoc_match_term t u bsubs)\n\ngoal (1 subgoal):\n 1. raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n    map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)", "by (simp add: Some 1)"], ["proof (state)\nthis:\n  raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n  map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  raw_match_term (Abs T t) (Abs U u) (map_of subs) =\n  map_option map_of (assoc_match_term (Abs T t) (Abs U u) subs)\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 5. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 6. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 7. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 9. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Fv va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Fv va vb) subs)\nA total of 36 subgoals...", "next"], ["proof (state)\ngoal (36 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 5. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 6. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 7. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 9. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Fv va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Fv va vb) subs)\nA total of 36 subgoals...", "case (5 f u f' u')"], ["proof (state)\nthis:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 5. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 6. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 7. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 9. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Fv va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Fv va vb) subs)\nA total of 36 subgoals...", "(* Do a real proof here when time *)"], ["proof (state)\nthis:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 5. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 6. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 7. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 9. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Fv va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Fv va vb) subs)\nA total of 36 subgoals...", "from \"5.hyps\"(1) \"5.hyps\"(2)"], ["proof (chain)\npicking this:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)", "have \"Option.bind (map_option map_of (assoc_match_term f f' subs))\n     (raw_match_term u u') =\n    map_option map_of (Option.bind (assoc_match_term f f' subs) (assoc_match_term u u'))\""], ["proof (prove)\nusing this:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n\ngoal (1 subgoal):\n 1. Option.bind (map_option map_of (assoc_match_term f f' subs))\n     (raw_match_term u u') =\n    map_option map_of\n     (Option.bind (assoc_match_term f f' subs) (assoc_match_term u u'))", "by (smt None_eq_map_option_iff bind.bind_lunit bind_eq_None_conv option.collapse option.map_sel)"], ["proof (state)\nthis:\n  Option.bind (map_option map_of (assoc_match_term f f' subs))\n   (raw_match_term u u') =\n  map_option map_of\n   (Option.bind (assoc_match_term f f' subs) (assoc_match_term u u'))\n\ngoal (36 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>f u f' u' subs.\n       \\<lbrakk>\\<And>subsa.\n                   map_of subs = map_of subsa \\<Longrightarrow>\n                   raw_match_term f f' (map_of subsa) =\n                   map_option map_of (assoc_match_term f f' subsa);\n        \\<And>subsa.\n           raw_match_term f f' (map_of subs) =\n           Some (map_of subsa) \\<Longrightarrow>\n           raw_match_term u u' (map_of subsa) =\n           map_option map_of (assoc_match_term u u' subsa)\\<rbrakk>\n       \\<Longrightarrow> raw_match_term (f $ u) (f' $ u') (map_of subs) =\n                         map_option map_of\n                          (assoc_match_term (f $ u) (f' $ u') subs)\n 5. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 6. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 7. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 8. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 9. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Fv va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Fv va vb) subs)\nA total of 36 subgoals...", "with 5"], ["proof (chain)\npicking this:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n  Option.bind (map_option map_of (assoc_match_term f f' subs))\n   (raw_match_term u u') =\n  map_option map_of\n   (Option.bind (assoc_match_term f f' subs) (assoc_match_term u u'))", "show ?case"], ["proof (prove)\nusing this:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n  Option.bind (map_option map_of (assoc_match_term f f' subs))\n   (raw_match_term u u') =\n  map_option map_of\n   (Option.bind (assoc_match_term f f' subs) (assoc_match_term u u'))\n\ngoal (1 subgoal):\n 1. raw_match_term (f $ u) (f' $ u') (map_of subs) =\n    map_option map_of (assoc_match_term (f $ u) (f' $ u') subs)", "using raw_match'_assoc_match 5"], ["proof (prove)\nusing this:\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n  Option.bind (map_option map_of (assoc_match_term f f' subs))\n   (raw_match_term u u') =\n  map_option map_of\n   (Option.bind (assoc_match_term f f' subs) (assoc_match_term u u'))\n  raw_match' ?T ?U (map_of ?subs) =\n  map_option map_of (assoc_match ?T ?U ?subs)\n  map_of subs = map_of ?subs \\<Longrightarrow>\n  raw_match_term f f' (map_of ?subs) =\n  map_option map_of (assoc_match_term f f' ?subs)\n  raw_match_term f f' (map_of subs) = Some (map_of ?subs) \\<Longrightarrow>\n  raw_match_term u u' (map_of ?subs) =\n  map_option map_of (assoc_match_term u u' ?subs)\n\ngoal (1 subgoal):\n 1. raw_match_term (f $ u) (f' $ u') (map_of subs) =\n    map_option map_of (assoc_match_term (f $ u) (f' $ u') subs)", "by (auto split: option.splits prod.splits simp add: lookup_present_eq_key bind_eq_Some_conv bind_eq_None_conv)"], ["proof (state)\nthis:\n  raw_match_term (f $ u) (f' $ u') (map_of subs) =\n  map_option map_of (assoc_match_term (f $ u) (f' $ u') subs)\n\ngoal (35 subgoals):\n 1. \\<And>a T b U subs.\n       raw_match_term (Ct a T) (Ct b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Ct a T) (Ct b U) subs)\n 2. \\<And>a T b U subs.\n       raw_match_term (Fv a T) (Fv b U) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv a T) (Fv b U) subs)\n 3. \\<And>i j subs.\n       raw_match_term (Bv i) (Bv j) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv i) (Bv j) subs)\n 4. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Ct vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Ct vb vc) subs)\n 5. \\<And>v va vb subs.\n       raw_match_term (Fv v va) (Bv vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Bv vb) subs)\n 6. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (Abs vb vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (Abs vb vc) subs)\n 7. \\<And>v va vb vc subs.\n       raw_match_term (Fv v va) (vb $ vc) (map_of subs) =\n       map_option map_of (assoc_match_term (Fv v va) (vb $ vc) subs)\n 8. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Ct va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Ct va vb) subs)\n 9. \\<And>v va vb subs.\n       raw_match_term (Bv v) (Fv va vb) (map_of subs) =\n       map_option map_of (assoc_match_term (Bv v) (Fv va vb) subs)\n 10. \\<And>v va vb subs.\n        raw_match_term (Bv v) (Abs va vb) (map_of subs) =\n        map_option map_of (assoc_match_term (Bv v) (Abs va vb) subs)\nA total of 35 subgoals...", "qed (use raw_match'_assoc_match in \\<open>auto split: option.splits prod.splits\\<close>)"], ["", "(* Automation surprisingly broke on translation :( *)"], ["", "corollary tinst_iff_assoc_match_term[code]: \"tinst t1 t2 \\<longleftrightarrow> assoc_match_term t2 t1 [] \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tinst t1 t2 = (assoc_match_term t2 t1 [] \\<noteq> None)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. tinst t1 t2 \\<Longrightarrow> assoc_match_term t2 t1 [] \\<noteq> None\n 2. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "assume \"tinst t1 t2\""], ["proof (state)\nthis:\n  tinst t1 t2\n\ngoal (2 subgoals):\n 1. tinst t1 t2 \\<Longrightarrow> assoc_match_term t2 t1 [] \\<noteq> None\n 2. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "from this"], ["proof (chain)\npicking this:\n  tinst t1 t2", "obtain asubs where \"raw_match_term t2 t1 Map.empty = Some asubs\""], ["proof (prove)\nusing this:\n  tinst t1 t2\n\ngoal (1 subgoal):\n 1. (\\<And>asubs.\n        raw_match_term t2 t1 Map.empty = Some asubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using tinst_imp_ex_raw_match_term"], ["proof (prove)\nusing this:\n  tinst t1 t2\n  tinst ?t1.0 ?t2.0 \\<Longrightarrow>\n  \\<exists>subs. raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs\n\ngoal (1 subgoal):\n 1. (\\<And>asubs.\n        raw_match_term t2 t1 Map.empty = Some asubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  raw_match_term t2 t1 Map.empty = Some asubs\n\ngoal (2 subgoals):\n 1. tinst t1 t2 \\<Longrightarrow> assoc_match_term t2 t1 [] \\<noteq> None\n 2. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "from this"], ["proof (chain)\npicking this:\n  raw_match_term t2 t1 Map.empty = Some asubs", "obtain csubs where \"assoc_match_term t2 t1 [] = Some csubs\""], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 Map.empty = Some asubs\n\ngoal (1 subgoal):\n 1. (\\<And>csubs.\n        assoc_match_term t2 t1 [] = Some csubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis empty_eq_map_of_iff map_option_eq_Some raw_match_term_assoc_match_term)"], ["proof (state)\nthis:\n  assoc_match_term t2 t1 [] = Some csubs\n\ngoal (2 subgoals):\n 1. tinst t1 t2 \\<Longrightarrow> assoc_match_term t2 t1 [] \\<noteq> None\n 2. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "thus \"assoc_match_term t2 t1 [] \\<noteq> None\""], ["proof (prove)\nusing this:\n  assoc_match_term t2 t1 [] = Some csubs\n\ngoal (1 subgoal):\n 1. assoc_match_term t2 t1 [] \\<noteq> None", "by simp"], ["proof (state)\nthis:\n  assoc_match_term t2 t1 [] \\<noteq> None\n\ngoal (1 subgoal):\n 1. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "assume \"assoc_match_term t2 t1 [] \\<noteq> None\""], ["proof (state)\nthis:\n  assoc_match_term t2 t1 [] \\<noteq> None\n\ngoal (1 subgoal):\n 1. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "from this"], ["proof (chain)\npicking this:\n  assoc_match_term t2 t1 [] \\<noteq> None", "obtain csubs where \"assoc_match_term t2 t1 [] = Some csubs\""], ["proof (prove)\nusing this:\n  assoc_match_term t2 t1 [] \\<noteq> None\n\ngoal (1 subgoal):\n 1. (\\<And>csubs.\n        assoc_match_term t2 t1 [] = Some csubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  assoc_match_term t2 t1 [] = Some csubs\n\ngoal (1 subgoal):\n 1. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "from this"], ["proof (chain)\npicking this:\n  assoc_match_term t2 t1 [] = Some csubs", "obtain asubs where \"raw_match_term t2 t1 Map.empty = Some asubs\""], ["proof (prove)\nusing this:\n  assoc_match_term t2 t1 [] = Some csubs\n\ngoal (1 subgoal):\n 1. (\\<And>asubs.\n        raw_match_term t2 t1 Map.empty = Some asubs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis empty_eq_map_of_iff option.simps(9) raw_match_term_assoc_match_term)"], ["proof (state)\nthis:\n  raw_match_term t2 t1 Map.empty = Some asubs\n\ngoal (1 subgoal):\n 1. assoc_match_term t2 t1 [] \\<noteq> None \\<Longrightarrow> tinst t1 t2", "thus \"tinst t1 t2\""], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 Map.empty = Some asubs\n\ngoal (1 subgoal):\n 1. tinst t1 t2", "using tinst_iff_ex_raw_match_term"], ["proof (prove)\nusing this:\n  raw_match_term t2 t1 Map.empty = Some asubs\n  tinst ?t1.0 ?t2.0 =\n  (\\<exists>subs. raw_match_term ?t2.0 ?t1.0 Map.empty = Some subs)\n\ngoal (1 subgoal):\n 1. tinst t1 t2", "by blast"], ["proof (state)\nthis:\n  tinst t1 t2\n\ngoal:\nNo subgoals!", "qed"], ["", "hide_fact fold_matches_first_step_not_None fold_matches_last_step_not_None"], ["", "end"]]}