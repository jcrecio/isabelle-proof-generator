{"file_name": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker/Name.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Metalogic_ProofChecker", "problem_names": ["lemma fresh_name_fresh:\n  assumes \"finite S\"\n  shows \"fresh_name S \\<notin> S\"", "lemma [code]: \"fresh_name' S = String.implode (fresh_name (String.explode ` S))\"", "lemma fresh_name'_fresh:\n  assumes \"finite S\"\n  shows \"fresh_name' S \\<notin> S\"", "lemma variant_name_fresh:\n  assumes \"finite S\"\n  shows \"fst (variant_name s S) \\<notin> S\"", "lemma variant_name_adds:\n  shows \"snd (variant_name s S) = insert (fst (variant_name s S)) S\"", "lemma variant_variable_fresh:\n  assumes \"finite S\"\n  shows \"fst (variant_variable s S) \\<notin> S\"", "lemma variant_variable_adds:\n  shows \"snd (variant_variable s S) = insert (fst (variant_variable s S)) S\"", "lemma variant_names_fresh:\n  assumes \"finite S\"\n  shows \"\\<forall>s \\<in> set (fst (variant_variables n s S)) . s \\<notin> S\"", "lemma variant_names_distinct:\n  assumes \"finite S\"\n  shows \"distinct (fst (variant_variables n s S))\"", "lemma map_Pair_zip_replicate_conv: \"map (\\<lambda>x. Pair x c) l = zip l (replicate (length l) c)\"", "lemma distinct_fresh_rename_ns: \"finite G \\<Longrightarrow> distinct (fresh_rename_ns n B insts G)\"", "lemma fresh_fresh_rename_ns: \"finite G \\<Longrightarrow> \\<forall>nm \\<in> set (fresh_rename_ns n B insts G) . \n  nm \\<notin> (fst ` (fv B \\<union> (\\<Union>t \\<in> snd ` set insts . (fv t)) \\<union> (fst ` set insts)) \\<union> G)\"", "lemma length_fresh_rename_ns: \"finite G \\<Longrightarrow> length (fresh_rename_ns n B insts G) = n\"", "lemma distinct_fresh_rename_idns: \"finite G \\<Longrightarrow> distinct (fresh_rename_idns n B insts G)\"", "lemma fresh_fresh_rename_idns: \"finite G \\<Longrightarrow> \\<forall>nm \\<in> set (fresh_rename_idns n B insts G) . \n  nm \\<notin> (fst ` (fv B \\<union> (\\<Union>t \\<in> snd ` set insts . (fv t)) \\<union> (fst ` set insts)) \\<union> G)\"", "lemma length_fresh_rename_idns: \"finite G \\<Longrightarrow>  length (fresh_rename_idns n B insts G) = n\""], "translations": [["", "lemma fresh_name_fresh:\n  assumes \"finite S\"\n  shows \"fresh_name S \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_name S \\<notin> S", "proof(cases \"S=empty\")"], ["proof (state)\ngoal (2 subgoals):\n 1. S = {} \\<Longrightarrow> fresh_name S \\<notin> S\n 2. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "case True"], ["proof (state)\nthis:\n  S = {}\n\ngoal (2 subgoals):\n 1. S = {} \\<Longrightarrow> fresh_name S \\<notin> S\n 2. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "then"], ["proof (chain)\npicking this:\n  S = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  S = {}\n\ngoal (1 subgoal):\n 1. fresh_name S \\<notin> S", "by simp"], ["proof (state)\nthis:\n  fresh_name S \\<notin> S\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "case False"], ["proof (state)\nthis:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "hence \"length (fresh_name S) > (Max (image length S))\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. Max (length ` S) < length (fresh_name S)", "by auto"], ["proof (state)\nthis:\n  Max (length ` S) < length (fresh_name S)\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "hence \"\\<forall>s\\<in>S. length (fresh_name S) > length s\""], ["proof (prove)\nusing this:\n  Max (length ` S) < length (fresh_name S)\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>S. length s < length (fresh_name S)", "using assms"], ["proof (prove)\nusing this:\n  Max (length ` S) < length (fresh_name S)\n  finite S\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>S. length s < length (fresh_name S)", "by (simp add: le_imp_less_Suc)"], ["proof (state)\nthis:\n  \\<forall>s\\<in>S. length s < length (fresh_name S)\n\ngoal (1 subgoal):\n 1. S \\<noteq> {} \\<Longrightarrow> fresh_name S \\<notin> S", "thus \"fresh_name S \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>s\\<in>S. length s < length (fresh_name S)\n\ngoal (1 subgoal):\n 1. fresh_name S \\<notin> S", "by blast"], ["proof (state)\nthis:\n  fresh_name S \\<notin> S\n\ngoal:\nNo subgoals!", "qed"], ["", "(* Lift this generator to literals *)"], ["", "context\n  includes \"String.literal.lifting\"\nbegin"], ["", "lift_definition fresh_name' :: \"String.literal set \\<Rightarrow> String.literal\" is \"fresh_name\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>seta char.\n       \\<lbrakk>\\<And>cs c.\n                   \\<lbrakk>cs \\<in> seta; c \\<in> set cs\\<rbrakk>\n                   \\<Longrightarrow> \\<not> digit7 c;\n        char \\<in> set (fresh_name seta)\\<rbrakk>\n       \\<Longrightarrow> \\<not> digit7 char", "by (auto split: if_splits)"], ["", "lemma [code]: \"fresh_name' S = String.implode (fresh_name (String.explode ` S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_name' S = String.implode (fresh_name (literal.explode ` S))", "by (metis String.implode_explode_eq fresh_name'.rep_eq)"], ["", "lemma fresh_name'_fresh:\n  assumes \"finite S\"\n  shows \"fresh_name' S \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fresh_name' S \\<notin> S", "by (metis assms finite_imageI fresh_name'.rep_eq fresh_name_fresh rev_image_eqI)"], ["", "end"], ["", "fun variant_name :: \"name \\<Rightarrow> name set \\<Rightarrow> (name \\<times> name set)\" where\n  \"variant_name s S = (let s' = (fresh_name' S) in (s', insert s' S))\""], ["", "lemma variant_name_fresh:\n  assumes \"finite S\"\n  shows \"fst (variant_name s S) \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (variant_name s S) \\<notin> S", "using assms fresh_name'_fresh"], ["proof (prove)\nusing this:\n  finite S\n  finite ?S \\<Longrightarrow> fresh_name' ?S \\<notin> ?S\n\ngoal (1 subgoal):\n 1. fst (variant_name s S) \\<notin> S", "by (metis fst_conv variant_name.simps)"], ["", "lemma variant_name_adds:\n  shows \"snd (variant_name s S) = insert (fst (variant_name s S)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (variant_name s S) = insert (fst (variant_name s S)) S", "by (metis fst_conv snd_conv variant_name.simps)"], ["", "(* This is a hack to transfer result to variables, better to write generator directly *)"], ["", "fun name :: \"variable \\<Rightarrow> name\" where\n  \"name (variable.Free n) = n\"\n| \"name (Var (n,_)) = n\""], ["", "(* And for variables *)"], ["", "fun variant_variable :: \"variable \\<Rightarrow> variable set \\<Rightarrow> (variable \\<times> variable set)\" where \n  \"variant_variable (variable.Free n) S = (let s' = fresh_name' (name ` S) in \n    (Free s', insert (variable.Free s') S))\"\n| \"variant_variable (Var (n,_)) S = (let s' = fresh_name' (name ` S) in \n    (Var (s',0), insert (Var (s',0)) S))\""], ["", "lemma variant_variable_fresh:\n  assumes \"finite S\"\n  shows \"fst (variant_variable s S) \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst (variant_variable s S) \\<notin> S", "apply (cases s)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       s = Free x1 \\<Longrightarrow> fst (variant_variable s S) \\<notin> S\n 2. \\<And>x2.\n       s = Var x2 \\<Longrightarrow> fst (variant_variable s S) \\<notin> S", "using assms fresh_name'_fresh"], ["proof (prove)\nusing this:\n  finite S\n  finite ?S \\<Longrightarrow> fresh_name' ?S \\<notin> ?S\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       s = Free x1 \\<Longrightarrow> fst (variant_variable s S) \\<notin> S\n 2. \\<And>x2.\n       s = Var x2 \\<Longrightarrow> fst (variant_variable s S) \\<notin> S", "apply (metis finite_imageI fstI name.simps(1) rev_image_eqI variant_variable.simps(1))"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Var x2 \\<Longrightarrow> fst (variant_variable s S) \\<notin> S", "using assms fresh_name'_fresh"], ["proof (prove)\nusing this:\n  finite S\n  finite ?S \\<Longrightarrow> fresh_name' ?S \\<notin> ?S\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       s = Var x2 \\<Longrightarrow> fst (variant_variable s S) \\<notin> S", "by (metis (no_types, hide_lams) finite_imageI fst_conv image_iff name.simps(2) surj_pair variant_variable.simps(2))"], ["", "lemma variant_variable_adds:\n  shows \"snd (variant_variable s S) = insert (fst (variant_variable s S)) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd (variant_variable s S) = insert (fst (variant_variable s S)) S", "by (metis (no_types, lifting) fst_conv snd_conv variant_variable.elims)"], ["", "(* Even worse generator for fresh variable names to allow transforming parallel to sequential substitutions \n  Applied hack for variables here too\n*)"], ["", "fun variant_variables :: \"nat \\<Rightarrow> variable \\<Rightarrow> variable set \\<Rightarrow> (variable list \\<times> variable set)\" where\n  \"variant_variables 0 _ S = ([], S)\"\n| \"variant_variables (Suc n) s S = \n    (let (s', S') = variant_variable s S in \n      (let (ss, S'') = variant_variables n s' S' in\n        (s'#ss, S'')))\""], ["", "lemma variant_names_fresh:\n  assumes \"finite S\"\n  shows \"\\<forall>s \\<in> set (fst (variant_variables n s S)) . s \\<notin> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (fst (variant_variables n s S)). s \\<notin> S", "using assms"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (fst (variant_variables n s S)). s \\<notin> S", "proof (induction n arbitrary: s S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s S.\n       finite S \\<Longrightarrow>\n       \\<forall>s\\<in>set (fst (variant_variables 0 s S)). s \\<notin> S\n 2. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "case 0"], ["proof (state)\nthis:\n  finite S\n\ngoal (2 subgoals):\n 1. \\<And>s S.\n       finite S \\<Longrightarrow>\n       \\<forall>s\\<in>set (fst (variant_variables 0 s S)). s \\<notin> S\n 2. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "then"], ["proof (chain)\npicking this:\n  finite S", "show ?case"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (fst (variant_variables 0 s S)). s \\<notin> S", "by simp"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set (fst (variant_variables 0 s S)). s \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "case (Suc n)"], ["proof (state)\nthis:\n  finite ?S \\<Longrightarrow>\n  \\<forall>s\\<in>set (fst (variant_variables n ?s ?S)). s \\<notin> ?S\n  finite S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "obtain s' S' where s'S': \"variant_variable s S = (s', S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s' S'.\n        variant_variable s S = (s', S') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  variant_variable s S = (s', S')\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "hence \"s' \\<notin> S\""], ["proof (prove)\nusing this:\n  variant_variable s S = (s', S')\n\ngoal (1 subgoal):\n 1. s' \\<notin> S", "by (metis Suc.prems fst_conv variant_variable_fresh)"], ["proof (state)\nthis:\n  s' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "moreover"], ["proof (state)\nthis:\n  s' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "have I: \"\\<forall>s\\<in>set (fst (variant_variables n s' S')). s \\<notin> S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (fst (variant_variables n s' S')). s \\<notin> S'", "by (metis Suc.IH Suc.prems s'S' finite.insertI snd_conv variant_variable_adds)"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set (fst (variant_variables n s' S')). s \\<notin> S'\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "moreover"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set (fst (variant_variables n s' S')). s \\<notin> S'\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "have \"S \\<subseteq> S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> S'", "by (metis insert_iff s'S' snd_conv subsetI variant_variable_adds)"], ["proof (state)\nthis:\n  S \\<subseteq> S'\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   \\<forall>s\\<in>set (fst (variant_variables n s S)).\n                      s \\<notin> S;\n        finite S\\<rbrakk>\n       \\<Longrightarrow> \\<forall>s\\<in>set\n   (fst (variant_variables (Suc n) s S)).\n                            s \\<notin> S", "ultimately"], ["proof (chain)\npicking this:\n  s' \\<notin> S\n  \\<forall>s\\<in>set (fst (variant_variables n s' S')). s \\<notin> S'\n  S \\<subseteq> S'", "show ?case"], ["proof (prove)\nusing this:\n  s' \\<notin> S\n  \\<forall>s\\<in>set (fst (variant_variables n s' S')). s \\<notin> S'\n  S \\<subseteq> S'\n\ngoal (1 subgoal):\n 1. \\<forall>s\\<in>set (fst (variant_variables (Suc n) s S)). s \\<notin> S", "by (auto simp add: Let_def s'S' split: prod.splits)"], ["proof (state)\nthis:\n  \\<forall>s\\<in>set (fst (variant_variables (Suc n) s S)). s \\<notin> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma variant_names_distinct:\n  assumes \"finite S\"\n  shows \"distinct (fst (variant_variables n s S))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (fst (variant_variables n s S))", "using assms"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. distinct (fst (variant_variables n s S))", "proof (induction n arbitrary: s S)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s S.\n       finite S \\<Longrightarrow> distinct (fst (variant_variables 0 s S))\n 2. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "case 0"], ["proof (state)\nthis:\n  finite S\n\ngoal (2 subgoals):\n 1. \\<And>s S.\n       finite S \\<Longrightarrow> distinct (fst (variant_variables 0 s S))\n 2. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "then"], ["proof (chain)\npicking this:\n  finite S", "show ?case"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. distinct (fst (variant_variables 0 s S))", "by simp"], ["proof (state)\nthis:\n  distinct (fst (variant_variables 0 s S))\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "case (Suc n)"], ["proof (state)\nthis:\n  finite ?S \\<Longrightarrow> distinct (fst (variant_variables n ?s ?S))\n  finite S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "obtain s' S' where s'S': \"variant_variable s S = (s', S')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s' S'.\n        variant_variable s S = (s', S') \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  variant_variable s S = (s', S')\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "hence \"s' \\<notin> S\""], ["proof (prove)\nusing this:\n  variant_variable s S = (s', S')\n\ngoal (1 subgoal):\n 1. s' \\<notin> S", "by (metis Suc.prems fst_conv variant_variable_fresh)"], ["proof (state)\nthis:\n  s' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "moreover"], ["proof (state)\nthis:\n  s' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "have I: \"distinct (fst (variant_variables n s' S'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct (fst (variant_variables n s' S'))", "by (metis Suc.IH Suc.prems s'S' finite.insertI snd_conv variant_variable_adds)"], ["proof (state)\nthis:\n  distinct (fst (variant_variables n s' S'))\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "moreover"], ["proof (state)\nthis:\n  distinct (fst (variant_variables n s' S'))\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "have \"S \\<subseteq> S'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> S'", "by (metis insert_iff s'S' snd_conv subsetI variant_variable_adds)"], ["proof (state)\nthis:\n  S \\<subseteq> S'\n\ngoal (1 subgoal):\n 1. \\<And>n s S.\n       \\<lbrakk>\\<And>s S.\n                   finite S \\<Longrightarrow>\n                   distinct (fst (variant_variables n s S));\n        finite S\\<rbrakk>\n       \\<Longrightarrow> distinct (fst (variant_variables (Suc n) s S))", "ultimately"], ["proof (chain)\npicking this:\n  s' \\<notin> S\n  distinct (fst (variant_variables n s' S'))\n  S \\<subseteq> S'", "show ?case"], ["proof (prove)\nusing this:\n  s' \\<notin> S\n  distinct (fst (variant_variables n s' S'))\n  S \\<subseteq> S'\n\ngoal (1 subgoal):\n 1. distinct (fst (variant_variables (Suc n) s S))", "apply (simp add: Let_def s'S' split: prod.splits)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s' \\<notin> S; distinct (fst (variant_variables n s' S'));\n     S \\<subseteq> S'\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x1.\n                         (\\<exists>x2.\n                             variant_variables n s' S' =\n                             (x1, x2)) \\<longrightarrow>\n                         s' \\<notin> set x1 \\<and> distinct x1", "by (metis Suc.prems finite.insertI fst_conv insertI1 s'S' snd_conv variant_names_fresh variant_variable_adds)"], ["proof (state)\nthis:\n  distinct (fst (variant_variables (Suc n) s S))\n\ngoal:\nNo subgoals!", "qed"], ["", "corollary variant_names_amount:\n  assumes \"finite S\"\n  shows \"length (fst (variant_variables n s S)) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length (fst (variant_variables n s S)) = n", "using assms"], ["proof (prove)\nusing this:\n  finite S\n\ngoal (1 subgoal):\n 1. length (fst (variant_variables n s S)) = n", "by (induction n arbitrary: s S) (simp_all add: case_prod_beta variant_variable_adds)"], ["", "(* \n  After translation I also need to make sure fresh vars are not in the context\n*)"], ["", "abbreviation \"fresh_rename_ns n B insts G \\<equiv> fst (variant_variables n (Free STR ''lol'')\n  (fst ` (fv B \\<union> (\\<Union>t\\<in>snd ` set insts . fv t) \\<union> (fst ` set insts)) \\<union> G))\""], ["", "abbreviation \"fresh_rename_idns n B insts \\<equiv> fresh_rename_ns n B insts\""], ["", "lemma map_Pair_zip_replicate_conv: \"map (\\<lambda>x. Pair x c) l = zip l (replicate (length l) c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>x. (x, c)) l = zip l (replicate (length l) c)", "by (induction l) auto"], ["", "lemma distinct_fresh_rename_ns: \"finite G \\<Longrightarrow> distinct (fresh_rename_ns n B insts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow> distinct (fresh_rename_idns n B insts G)", "by (metis (no_types, lifting) List.finite_set add_vars'_fv finite_UN finite_Un finite_imageI variant_names_distinct)"], ["", "lemma fresh_fresh_rename_ns: \"finite G \\<Longrightarrow> \\<forall>nm \\<in> set (fresh_rename_ns n B insts G) . \n  nm \\<notin> (fst ` (fv B \\<union> (\\<Union>t \\<in> snd ` set insts . (fv t)) \\<union> (fst ` set insts)) \\<union> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow>\n    \\<forall>nm\\<in>set (fresh_rename_idns n B insts G).\n       nm \\<notin> fst `\n                   (fv B \\<union> \\<Union> (fv ` snd ` set insts) \\<union>\n                    fst ` set insts) \\<union>\n                   G", "by (metis (no_types, lifting) List.finite_set add_vars'_fv finite_UN finite_Un finite_imageI variant_names_fresh)"], ["", "lemma length_fresh_rename_ns: \"finite G \\<Longrightarrow> length (fresh_rename_ns n B insts G) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow> length (fresh_rename_idns n B insts G) = n", "by (metis (no_types, lifting) List.finite_set add_vars'_fv finite_UN finite_Un finite_imageI variant_names_amount)"], ["", "lemma distinct_fresh_rename_idns: \"finite G \\<Longrightarrow> distinct (fresh_rename_idns n B insts G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow> distinct (fresh_rename_idns n B insts G)", "using distinct_fresh_rename_ns"], ["proof (prove)\nusing this:\n  finite ?G \\<Longrightarrow> distinct (fresh_rename_idns ?n ?B ?insts ?G)\n\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow> distinct (fresh_rename_idns n B insts G)", "by (metis)"], ["", "lemma fresh_fresh_rename_idns: \"finite G \\<Longrightarrow> \\<forall>nm \\<in> set (fresh_rename_idns n B insts G) . \n  nm \\<notin> (fst ` (fv B \\<union> (\\<Union>t \\<in> snd ` set insts . (fv t)) \\<union> (fst ` set insts)) \\<union> G)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow>\n    \\<forall>nm\\<in>set (fresh_rename_idns n B insts G).\n       nm \\<notin> fst `\n                   (fv B \\<union> \\<Union> (fv ` snd ` set insts) \\<union>\n                    fst ` set insts) \\<union>\n                   G", "using distinct_fresh_rename_ns map_Pair_zip_replicate_conv map_Pair_zip_replicate_conv"], ["proof (prove)\nusing this:\n  finite ?G \\<Longrightarrow> distinct (fresh_rename_idns ?n ?B ?insts ?G)\n  map (\\<lambda>x. (x, ?c)) ?l = zip ?l (replicate (length ?l) ?c)\n  map (\\<lambda>x. (x, ?c)) ?l = zip ?l (replicate (length ?l) ?c)\n\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow>\n    \\<forall>nm\\<in>set (fresh_rename_idns n B insts G).\n       nm \\<notin> fst `\n                   (fv B \\<union> \\<Union> (fv ` snd ` set insts) \\<union>\n                    fst ` set insts) \\<union>\n                   G", "by (smt fresh_fresh_rename_ns fst_conv imageE image_eqI list.set_map)"], ["", "lemma length_fresh_rename_idns: \"finite G \\<Longrightarrow>  length (fresh_rename_idns n B insts G) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite G \\<Longrightarrow> length (fresh_rename_idns n B insts G) = n", "by (metis length_fresh_rename_ns)"], ["", "end"]]}