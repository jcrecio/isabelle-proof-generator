{"file_name": "/home/qj213/afp-2021-10-22/thys/HRB-Slicing/StaticInter/HRBSlice.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HRB-Slicing", "problem_names": ["lemma slice1_cdep_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\"", "lemma slice1_ddep_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\"", "lemma slice1_sum_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\"", "lemma slice1_call_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\"", "lemma slice1_param_in_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\"", "lemma is_SDG_path_slice1:\n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n' \\<in> sum_SDG_slice1 n''\\<rbrakk> \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\"", "lemma slice2_cdep_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\"", "lemma slice2_ddep_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\"", "lemma slice2_sum_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\"", "lemma slice2_ret_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\"", "lemma slice2_param_out_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\"", "lemma is_SDG_path_slice2:\n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n' \\<in> sum_SDG_slice2 n''\\<rbrakk> \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\"", "lemma slice2_is_SDG_path_slice2: \n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\"", "lemma HRB_slice_cases[consumes 1,case_names phase1 phase2]:\n  \"\\<lbrakk>x \\<in> HRB_slice S; \\<And>n nx. \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S\\<rbrakk> \\<Longrightarrow> P n;\n   \\<And>nx n' n'' p n. \\<lbrakk>n' \\<in> sum_SDG_slice1 nx; n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n'); \n                    n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk> \\<Longrightarrow> P n\\<rbrakk>\n  \\<Longrightarrow> P x\"", "lemma HRB_slice_refl:\n  assumes \"valid_node m\" and \"CFG_node m \\<in> S\" shows \"CFG_node m \\<in> HRB_slice S\"", "lemma HRB_slice_valid_node: \"n \\<in> HRB_slice S \\<Longrightarrow> valid_SDG_node n\"", "lemma valid_SDG_node_in_slice_parent_node_in_slice:\n  assumes \"n \\<in> HRB_slice S\" shows \"CFG_node (parent_node n) \\<in> HRB_slice S\"", "lemma HRB_slice_is_SDG_path_HRB_slice: \n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\"", "lemma call_return_nodes_in_slice:\n  assumes \"valid_edge a\" and \"kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f\"\n  and \"valid_edge a'\" and \"kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\" and \"a \\<in> get_return_edges a'\"\n  and \"CFG_node (targetnode a) \\<in> HRB_slice S\"\n  shows \"CFG_node (sourcenode a) \\<in> HRB_slice S\"\n  and \"CFG_node (sourcenode a') \\<in> HRB_slice S\" \n  and \"CFG_node (targetnode a') \\<in> HRB_slice S\"", "lemma in_intra_SDG_path_in_slice2:\n  \"\\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set ns\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\"", "lemma in_intra_SDG_path_in_HRB_slice:\n  \"\\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\"", "lemma in_matched_in_slice2:\n  \"\\<lbrakk>matched n ns n'; n'' \\<in> set ns\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\"", "lemma in_matched_in_HRB_slice:\n  \"\\<lbrakk>matched n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\"", "theorem in_realizable_in_HRB_slice:\n  \"\\<lbrakk>realizable n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\"", "lemma slice1_ics_SDG_path:\n  assumes \"n \\<in> sum_SDG_slice1 n'\" and \"n \\<noteq> n'\"\n  obtains ns where \"CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set ns\"", "lemma slice2_irs_SDG_path:\n  assumes \"n \\<in> sum_SDG_slice2 n'\" and \"valid_SDG_node n'\"\n  obtains ns where \"n irs-ns\\<rightarrow>\\<^sub>d* n'\"", "theorem HRB_slice_realizable:\n  assumes \"n \\<in> HRB_slice S\" and \"\\<forall>n' \\<in> S. valid_SDG_node n'\" and \"n \\<notin> S\"\n  obtains n' ns where \"n' \\<in> S\" and \"realizable (CFG_node (_Entry_)) ns n'\" \n  and \"n \\<in> set ns\"", "theorem HRB_slice_precise:\n  \"\\<lbrakk>\\<forall>n' \\<in> S. valid_SDG_node n'; n \\<notin> S\\<rbrakk> \\<Longrightarrow>\n    n \\<in> HRB_slice S = \n    (\\<exists>n' ns. n' \\<in> S \\<and> realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns)\""], "translations": [["", "lemma slice1_cdep_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice1 n;\n     n s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'", "by(induct rule:sum_SDG_slice1.induct,\n   auto intro:sum_SDG_slice1.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice1_ddep_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice1 n;\n     n s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'", "by(induct rule:sum_SDG_slice1.induct,\n   auto intro:sum_SDG_slice1.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice1_sum_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice1 n;\n     n s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'", "by(induct rule:sum_SDG_slice1.induct,\n   auto intro:sum_SDG_slice1.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice1_call_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice1 n;\n     n s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'", "by(induct rule:sum_SDG_slice1.induct,\n   auto intro:sum_SDG_slice1.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice1_param_in_slice1:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice1 n; n s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice1 n;\n     n s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice1 n'", "by(induct rule:sum_SDG_slice1.induct,\n   auto intro:sum_SDG_slice1.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma is_SDG_path_slice1:\n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n' \\<in> sum_SDG_slice1 n''\\<rbrakk> \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n';\n     n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n    \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "proof(induct rule:intra_sum_SDG_path.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 4. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "case isSp_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n_ \\<in> sum_SDG_slice1 n''\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 4. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n_ \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. n_ \\<in> sum_SDG_slice1 n''", "by simp"], ["proof (state)\nthis:\n  n_ \\<in> sum_SDG_slice1 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "case (isSp_Append_cdep n ns nx n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "note IH = \\<open>nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\\<close>"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "from \\<open>nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close> \\<open>n' \\<in> sum_SDG_slice1 n''\\<close>"], ["proof (chain)\npicking this:\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n''", "have \"nx \\<in> sum_SDG_slice1 n''\""], ["proof (prove)\nusing this:\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice1 n''", "by(rule cdep_slice1)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 n''", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n''", "."], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "case (isSp_Append_ddep n ns nx V n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx \\<noteq> n'\n  n' \\<in> sum_SDG_slice1 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "note IH = \\<open>nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\\<close>"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "from \\<open>nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>n' \\<in> sum_SDG_slice1 n''\\<close>"], ["proof (chain)\npicking this:\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice1 n''", "have \"nx \\<in> sum_SDG_slice1 n''\""], ["proof (prove)\nusing this:\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice1 n''", "by(rule ddep_slice1)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 n''", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n''", "."], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "case (isSp_Append_sum n ns nx p n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "note IH = \\<open>nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\\<close>"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "from \\<open>nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<close> \\<open>n' \\<in> sum_SDG_slice1 n''\\<close>"], ["proof (chain)\npicking this:\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n''", "have \"nx \\<in> sum_SDG_slice1 n''\""], ["proof (prove)\nusing this:\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice1 n''", "by(rule sum_slice1)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice1 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice1 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice1 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice1 n''", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 n''", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 n''\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n''", "."], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n''\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Set describing phase 2 of the two-phase slicer\\<close>"], ["", "inductive_set sum_SDG_slice2 :: \"'node SDG_node \\<Rightarrow> 'node SDG_node set\"\n  for n::\"'node SDG_node\"\n  where refl_slice2:\"valid_SDG_node n \\<Longrightarrow> n \\<in> sum_SDG_slice2 n\"\n  | cdep_slice2:\n  \"\\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'; n' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\"\n  | ddep_slice2: \n  \"\\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\"\n  | return_slice2:\n  \"\\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n'; n' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\"\n  | param_out_slice2: \n  \"\\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n'; n' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\"\n  | sum_slice2:\n  \"\\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'; n' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\""], ["", "lemma slice2_cdep_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice2 n;\n     n s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'", "by(induct rule:sum_SDG_slice2.induct,\n   auto intro:sum_SDG_slice2.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice2_ddep_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice2 n;\n     n s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'", "by(induct rule:sum_SDG_slice2.induct,\n   auto intro:sum_SDG_slice2.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice2_sum_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice2 n;\n     n s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'", "by(induct rule:sum_SDG_slice2.induct,\n   auto intro:sum_SDG_slice2.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice2_ret_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice2 n;\n     n s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'", "by(induct rule:sum_SDG_slice2.induct,\n   auto intro:sum_SDG_slice2.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma slice2_param_out_slice2:\n  \"\\<lbrakk>nx \\<in> sum_SDG_slice2 n; n s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n'\\<rbrakk> \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nx \\<in> sum_SDG_slice2 n;\n     n s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n'\\<rbrakk>\n    \\<Longrightarrow> nx \\<in> sum_SDG_slice2 n'", "by(induct rule:sum_SDG_slice2.induct,\n   auto intro:sum_SDG_slice2.intros sum_SDG_edge_valid_SDG_node)"], ["", "lemma is_SDG_path_slice2:\n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n' \\<in> sum_SDG_slice2 n''\\<rbrakk> \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n';\n     n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n    \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "proof(induct rule:intra_sum_SDG_path.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 4. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "case isSp_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n_ \\<in> sum_SDG_slice2 n''\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 4. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n_ \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. n_ \\<in> sum_SDG_slice2 n''", "by simp"], ["proof (state)\nthis:\n  n_ \\<in> sum_SDG_slice2 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "case (isSp_Append_cdep n ns nx n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "note IH = \\<open>nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\\<close>"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "from \\<open>nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close> \\<open>n' \\<in> sum_SDG_slice2 n''\\<close>"], ["proof (chain)\npicking this:\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n''", "have \"nx \\<in> sum_SDG_slice2 n''\""], ["proof (prove)\nusing this:\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice2 n''", "by(rule cdep_slice2)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n''\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice2 n''", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice2 n''", "."], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice2 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "case (isSp_Append_ddep n ns nx V n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx \\<noteq> n'\n  n' \\<in> sum_SDG_slice2 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "note IH = \\<open>nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\\<close>"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "from \\<open>nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>n' \\<in> sum_SDG_slice2 n''\\<close>"], ["proof (chain)\npicking this:\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice2 n''", "have \"nx \\<in> sum_SDG_slice2 n''\""], ["proof (prove)\nusing this:\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice2 n''", "by(rule ddep_slice2)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n''\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice2 n''", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice2 n''", "."], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "case (isSp_Append_sum n ns nx p n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "note IH = \\<open>nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\\<close>"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n'' \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "from \\<open>nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<close> \\<open>n' \\<in> sum_SDG_slice2 n''\\<close>"], ["proof (chain)\npicking this:\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n''", "have \"nx \\<in> sum_SDG_slice2 n''\""], ["proof (prove)\nusing this:\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice2 n''", "by(rule sum_slice2)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n''a \\<in> sum_SDG_slice2 n'' \\<Longrightarrow>\n        n \\<in> sum_SDG_slice2 n'';\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n' \\<in> sum_SDG_slice2 n''\\<rbrakk>\n       \\<Longrightarrow> n \\<in> sum_SDG_slice2 n''", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice2 n''", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice2 n''\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice2 n''", "."], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice2 n''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma slice2_is_SDG_path_slice2: \n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> sum_SDG_slice2 n\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n';\n     n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "proof(induct rule:intra_sum_SDG_path.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 4. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case isSp_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n'' \\<in> sum_SDG_slice2 n_\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 4. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n'' \\<in> sum_SDG_slice2 n_\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n_", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n_\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case (isSp_Append_cdep n ns nx n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 n\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\\<close> \\<open>n'' \\<in> sum_SDG_slice2 n\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  n'' \\<in> sum_SDG_slice2 n", "have \"n'' \\<in> sum_SDG_slice2 nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  n'' \\<in> sum_SDG_slice2 n\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 nx", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 nx", "show ?case"], ["proof (prove)\nusing this:\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by -(rule slice2_cdep_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case (isSp_Append_ddep n ns nx V n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx \\<noteq> n'\n  n'' \\<in> sum_SDG_slice2 n\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\\<close> \\<open>n'' \\<in> sum_SDG_slice2 n\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  n'' \\<in> sum_SDG_slice2 n", "have \"n'' \\<in> sum_SDG_slice2 nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  n'' \\<in> sum_SDG_slice2 n\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 nx", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n'' \\<in> sum_SDG_slice2 nx", "show ?case"], ["proof (prove)\nusing this:\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by -(rule slice2_ddep_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case (isSp_Append_sum n ns nx p n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 n\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\\<close> \\<open>n'' \\<in> sum_SDG_slice2 n\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  n'' \\<in> sum_SDG_slice2 n", "have \"n'' \\<in> sum_SDG_slice2 nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  n'' \\<in> sum_SDG_slice2 n\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 nx", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n'.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> sum_SDG_slice2 n \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n''a;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> sum_SDG_slice2 n\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 nx", "show ?case"], ["proof (prove)\nusing this:\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by -(rule slice2_sum_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>The backward slice using the Horwitz-Reps-Binkley slicer\\<close>"], ["", "text \\<open>Note: our slicing criterion is a set of nodes, not a unique node.\\<close>"], ["", "inductive_set combine_SDG_slices :: \"'node SDG_node set \\<Rightarrow> 'node SDG_node set\"\n  for S::\"'node SDG_node set\"\n  where combSlice_refl:\"n \\<in> S \\<Longrightarrow> n \\<in> combine_SDG_slices S\" \n  | combSlice_Return_parent_node:\n  \"\\<lbrakk>n' \\<in> S; n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n'); n \\<in> sum_SDG_slice2 n'\\<rbrakk> \n  \\<Longrightarrow> n \\<in> combine_SDG_slices S\""], ["", "definition HRB_slice :: \"'node SDG_node set \\<Rightarrow> 'node SDG_node set\"\n  where \"HRB_slice S \\<equiv> {n'. \\<exists>n \\<in> S. n' \\<in> combine_SDG_slices (sum_SDG_slice1 n)}\""], ["", "lemma HRB_slice_cases[consumes 1,case_names phase1 phase2]:\n  \"\\<lbrakk>x \\<in> HRB_slice S; \\<And>n nx. \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S\\<rbrakk> \\<Longrightarrow> P n;\n   \\<And>nx n' n'' p n. \\<lbrakk>n' \\<in> sum_SDG_slice1 nx; n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n'); \n                    n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk> \\<Longrightarrow> P n\\<rbrakk>\n  \\<Longrightarrow> P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> HRB_slice S;\n     \\<And>n nx.\n        \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S\\<rbrakk>\n        \\<Longrightarrow> P n;\n     \\<And>nx n' n'' p n.\n        \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n         n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n         n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk>\n        \\<Longrightarrow> P n\\<rbrakk>\n    \\<Longrightarrow> P x", "by(fastforce elim:combine_SDG_slices.cases simp:HRB_slice_def)"], ["", "lemma HRB_slice_refl:\n  assumes \"valid_node m\" and \"CFG_node m \\<in> S\" shows \"CFG_node m \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_node m \\<in> HRB_slice S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. CFG_node m \\<in> HRB_slice S", "from \\<open>valid_node m\\<close>"], ["proof (chain)\npicking this:\n  valid_node m", "have \"CFG_node m \\<in> sum_SDG_slice1 (CFG_node m)\""], ["proof (prove)\nusing this:\n  valid_node m\n\ngoal (1 subgoal):\n 1. CFG_node m \\<in> sum_SDG_slice1 (CFG_node m)", "by(fastforce intro:refl_slice1)"], ["proof (state)\nthis:\n  CFG_node m \\<in> sum_SDG_slice1 (CFG_node m)\n\ngoal (1 subgoal):\n 1. CFG_node m \\<in> HRB_slice S", "with \\<open>CFG_node m \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  CFG_node m \\<in> S\n  CFG_node m \\<in> sum_SDG_slice1 (CFG_node m)", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node m \\<in> S\n  CFG_node m \\<in> sum_SDG_slice1 (CFG_node m)\n\ngoal (1 subgoal):\n 1. CFG_node m \\<in> HRB_slice S", "by(simp add:HRB_slice_def)(blast intro:combSlice_refl)"], ["proof (state)\nthis:\n  CFG_node m \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HRB_slice_valid_node: \"n \\<in> HRB_slice S \\<Longrightarrow> valid_SDG_node n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S \\<Longrightarrow> valid_SDG_node n", "proof(induct rule:HRB_slice_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n", "case (phase1 n nx)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 nx\n  nx \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n", "thus ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 nx\n  nx \\<in> S\n\ngoal (1 subgoal):\n 1. valid_SDG_node n", "by(induct rule:sum_SDG_slice1.induct,auto intro:sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n", "case (phase2 nx n' n'' p n)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice1 nx\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  n \\<in> sum_SDG_slice2 n'\n  nx \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> valid_SDG_node n", "from \\<open>n \\<in> sum_SDG_slice2 n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice2 n'", "show ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. valid_SDG_node n", "by(induct rule:sum_SDG_slice2.induct,auto intro:sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma valid_SDG_node_in_slice_parent_node_in_slice:\n  assumes \"n \\<in> HRB_slice S\" shows \"CFG_node (parent_node n) \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "from \\<open>n \\<in> HRB_slice S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> HRB_slice S", "have \"valid_SDG_node n\""], ["proof (prove)\nusing this:\n  n \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. valid_SDG_node n", "by(rule HRB_slice_valid_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\n\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "hence \"n = CFG_node (parent_node n) \\<or> CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\n\ngoal (1 subgoal):\n 1. n = CFG_node (parent_node n) \\<or>\n    CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n", "by(rule valid_SDG_node_cases)"], ["proof (state)\nthis:\n  n = CFG_node (parent_node n) \\<or>\n  CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = CFG_node (parent_node n) \\<or>\n  CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = CFG_node (parent_node n) \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S\n 2. CFG_node\n     (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S", "assume \"n = CFG_node (parent_node n)\""], ["proof (state)\nthis:\n  n = CFG_node (parent_node n)\n\ngoal (2 subgoals):\n 1. n = CFG_node (parent_node n) \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S\n 2. CFG_node\n     (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S", "with \\<open>n \\<in> HRB_slice S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> HRB_slice S\n  n = CFG_node (parent_node n)", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> HRB_slice S\n  n = CFG_node (parent_node n)\n\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "by simp"], ["proof (state)\nthis:\n  CFG_node (parent_node n) \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S", "assume \"CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n\""], ["proof (state)\nthis:\n  CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S", "hence \"CFG_node (parent_node n) s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\""], ["proof (prove)\nusing this:\n  CFG_node (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) s\\<longrightarrow>\\<^bsub>cd\\<^esub> n", "by(rule SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  CFG_node (parent_node n) s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node n) \\<longrightarrow>\\<^bsub>cd\\<^esub> n \\<Longrightarrow>\n    CFG_node (parent_node n) \\<in> HRB_slice S", "with \\<open>n \\<in> HRB_slice S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> HRB_slice S\n  CFG_node (parent_node n) s\\<longrightarrow>\\<^bsub>cd\\<^esub> n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> HRB_slice S\n  CFG_node (parent_node n) s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. CFG_node (parent_node n) \\<in> HRB_slice S", "by(fastforce elim:combine_SDG_slices.cases \n                 intro:combine_SDG_slices.intros cdep_slice1 cdep_slice2 \n                  simp:HRB_slice_def)"], ["proof (state)\nthis:\n  CFG_node (parent_node n) \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CFG_node (parent_node n) \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma HRB_slice_is_SDG_path_HRB_slice: \n  \"\\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> HRB_slice {n};\n     n' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> HRB_slice S", "proof(induct arbitrary:S rule:intra_sum_SDG_path.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> HRB_slice {n};\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (isSp_Nil n)"], ["proof (state)\nthis:\n  valid_SDG_node n\n  n'' \\<in> HRB_slice {n}\n  n \\<in> S\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> HRB_slice {n};\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n\n  n'' \\<in> HRB_slice {n}\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (isSp_Append_cdep n ns nx n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> HRB_slice {n}\n  n' \\<in> S\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF \\<open>n'' \\<in> HRB_slice {n}\\<close>]"], ["proof (chain)\npicking this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {nx}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s\\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "proof(induct rule:HRB_slice_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "case (phase1 n nx')"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 nx'\n  nx' \\<in> {nx}\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "from \\<open>nx' \\<in> {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> {nx}", "have \"nx' = nx\""], ["proof (prove)\nusing this:\n  nx' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. nx' = nx", "by simp"], ["proof (state)\nthis:\n  nx' = nx\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n \\<in> sum_SDG_slice1 nx'\\<close> \\<open>nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 nx'\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  nx' = nx", "have \"n \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 nx'\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  nx' = nx\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n'", "by(fastforce intro:slice1_cdep_slice1)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> S\n  n \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<in> S\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "case (phase2 nx'' nx' n'' p n)"], ["proof (state)\nthis:\n  nx' \\<in> sum_SDG_slice1 nx''\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  nx'' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "from \\<open>nx'' \\<in> {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx'' \\<in> {nx}", "have \"nx'' = nx\""], ["proof (prove)\nusing this:\n  nx'' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. nx'' = nx", "by simp"], ["proof (state)\nthis:\n  nx'' = nx\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>nx' \\<in> sum_SDG_slice1 nx''\\<close> \\<open>nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> sum_SDG_slice1 nx''\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  nx'' = nx", "have \"nx' \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  nx' \\<in> sum_SDG_slice1 nx''\n  nx s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  nx'' = nx\n\ngoal (1 subgoal):\n 1. nx' \\<in> sum_SDG_slice1 n'", "by(fastforce intro:slice1_cdep_slice1)"], ["proof (state)\nthis:\n  nx' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\\<close> \\<open>n \\<in> sum_SDG_slice2 nx'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  n' \\<in> S\n  nx' \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  n' \\<in> S\n  nx' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_Return_parent_node \n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (isSp_Append_ddep n ns nx V n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx \\<noteq> n'\n  n'' \\<in> HRB_slice {n}\n  n' \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF \\<open>n'' \\<in> HRB_slice {n}\\<close>]"], ["proof (chain)\npicking this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {nx}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "proof(induct rule:HRB_slice_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "case (phase1 n nx')"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 nx'\n  nx' \\<in> {nx}\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "from \\<open>nx' \\<in> {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> {nx}", "have \"nx' = nx\""], ["proof (prove)\nusing this:\n  nx' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. nx' = nx", "by simp"], ["proof (state)\nthis:\n  nx' = nx\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n \\<in> sum_SDG_slice1 nx'\\<close> \\<open>nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 nx'\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx' = nx", "have \"n \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 nx'\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx' = nx\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n'", "by(fastforce intro:slice1_ddep_slice1)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> S\n  n \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<in> S\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "case (phase2 nx'' nx' n'' p n)"], ["proof (state)\nthis:\n  nx' \\<in> sum_SDG_slice1 nx''\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  nx'' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "from \\<open>nx'' \\<in> {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx'' \\<in> {nx}", "have \"nx'' = nx\""], ["proof (prove)\nusing this:\n  nx'' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. nx'' = nx", "by simp"], ["proof (state)\nthis:\n  nx'' = nx\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>nx' \\<in> sum_SDG_slice1 nx''\\<close> \\<open>nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> sum_SDG_slice1 nx''\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx'' = nx", "have \"nx' \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  nx' \\<in> sum_SDG_slice1 nx''\n  nx s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx'' = nx\n\ngoal (1 subgoal):\n 1. nx' \\<in> sum_SDG_slice1 n'", "by(fastforce intro:slice1_ddep_slice1)"], ["proof (state)\nthis:\n  nx' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\\<close> \\<open>n \\<in> sum_SDG_slice2 nx'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  n' \\<in> S\n  nx' \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  n' \\<in> S\n  nx' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_Return_parent_node \n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (isSp_Append_sum n ns nx p n')"], ["proof (state)\nthis:\n  n is-ns\\<rightarrow>\\<^sub>d* nx\n  \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  n'' \\<in> HRB_slice {n}\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> HRB_slice {n}; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF \\<open>n'' \\<in> HRB_slice {n}\\<close>]"], ["proof (chain)\npicking this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {nx}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a p n' S.\n       \\<lbrakk>n is-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> HRB_slice {n}; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n';\n        n'' \\<in> HRB_slice {n}; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "proof(induct rule:HRB_slice_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "case (phase1 n nx')"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 nx'\n  nx' \\<in> {nx}\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "from \\<open>nx' \\<in> {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> {nx}", "have \"nx' = nx\""], ["proof (prove)\nusing this:\n  nx' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. nx' = nx", "by simp"], ["proof (state)\nthis:\n  nx' = nx\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n \\<in> sum_SDG_slice1 nx'\\<close> \\<open>nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 nx'\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  nx' = nx", "have \"n \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 nx'\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  nx' = nx\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n'", "by(fastforce intro:slice1_sum_slice1)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (2 subgoals):\n 1. \\<And>n nxa.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nxa; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S\n 2. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> S\n  n \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<in> S\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "case (phase2 nx'' nx' n'' p' n)"], ["proof (state)\nthis:\n  nx' \\<in> sum_SDG_slice1 nx''\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  nx'' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "from \\<open>nx'' \\<in> {nx}\\<close>"], ["proof (chain)\npicking this:\n  nx'' \\<in> {nx}", "have \"nx'' = nx\""], ["proof (prove)\nusing this:\n  nx'' \\<in> {nx}\n\ngoal (1 subgoal):\n 1. nx'' = nx", "by simp"], ["proof (state)\nthis:\n  nx'' = nx\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>nx' \\<in> sum_SDG_slice1 nx''\\<close> \\<open>nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx' \\<in> sum_SDG_slice1 nx''\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  nx'' = nx", "have \"nx' \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  nx' \\<in> sum_SDG_slice1 nx''\n  nx s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'\n  nx'' = nx\n\ngoal (1 subgoal):\n 1. nx' \\<in> sum_SDG_slice1 n'", "by(fastforce intro:slice1_sum_slice1)"], ["proof (state)\nthis:\n  nx' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. \\<And>nxa n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nxa;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nxa \\<in> {nx}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice S", "with \\<open>n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\\<close> \\<open>n \\<in> sum_SDG_slice2 nx'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  n' \\<in> S\n  nx' \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx')\n  n \\<in> sum_SDG_slice2 nx'\n  n' \\<in> S\n  nx' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_Return_parent_node \n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma call_return_nodes_in_slice:\n  assumes \"valid_edge a\" and \"kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f\"\n  and \"valid_edge a'\" and \"kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\" and \"a \\<in> get_return_edges a'\"\n  and \"CFG_node (targetnode a) \\<in> HRB_slice S\"\n  shows \"CFG_node (sourcenode a) \\<in> HRB_slice S\"\n  and \"CFG_node (sourcenode a') \\<in> HRB_slice S\" \n  and \"CFG_node (targetnode a') \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S &&&\n    CFG_node (sourcenode a') \\<in> HRB_slice S &&&\n    CFG_node (targetnode a') \\<in> HRB_slice S", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. CFG_node (sourcenode a') \\<in> HRB_slice S\n 3. CFG_node (targetnode a') \\<in> HRB_slice S", "from \\<open>valid_edge a'\\<close> \\<open>kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\\<close> \\<open>a \\<in> get_return_edges a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\n  a \\<in> get_return_edges a'", "have \"CFG_node (sourcenode a') s-p\\<rightarrow>\\<^bsub>sum\\<^esub> CFG_node (targetnode a)\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\n  a \\<in> get_return_edges a'\n\ngoal (1 subgoal):\n 1. CFG_node\n     (sourcenode\n       a') s-p\\<rightarrow>\\<^bsub>sum\\<^esub> CFG_node (targetnode a)", "by(fastforce intro:sum_SDG_call_summary_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (sourcenode\n     a') s-p\\<rightarrow>\\<^bsub>sum\\<^esub> CFG_node (targetnode a)\n\ngoal (3 subgoals):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. CFG_node (sourcenode a') \\<in> HRB_slice S\n 3. CFG_node (targetnode a') \\<in> HRB_slice S", "with \\<open>CFG_node (targetnode a) \\<in> HRB_slice S\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (targetnode a) \\<in> HRB_slice S\n  CFG_node\n   (sourcenode\n     a') s-p\\<rightarrow>\\<^bsub>sum\\<^esub> CFG_node (targetnode a)", "show \"CFG_node (sourcenode a') \\<in> HRB_slice S\""], ["proof (prove)\nusing this:\n  CFG_node (targetnode a) \\<in> HRB_slice S\n  CFG_node\n   (sourcenode\n     a') s-p\\<rightarrow>\\<^bsub>sum\\<^esub> CFG_node (targetnode a)\n\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a') \\<in> HRB_slice S", "by(fastforce elim!:combine_SDG_slices.cases \n                intro:combine_SDG_slices.intros sum_slice1 sum_slice2 \n                 simp:HRB_slice_def)"], ["proof (state)\nthis:\n  CFG_node (sourcenode a') \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. CFG_node (targetnode a') \\<in> HRB_slice S", "from \\<open>CFG_node (targetnode a) \\<in> HRB_slice S\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (targetnode a) \\<in> HRB_slice S", "obtain n\\<^sub>c where \"CFG_node (targetnode a) \\<in> combine_SDG_slices (sum_SDG_slice1 n\\<^sub>c)\"\n    and \"n\\<^sub>c \\<in> S\""], ["proof (prove)\nusing this:\n  CFG_node (targetnode a) \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. (\\<And>n\\<^sub>c.\n        \\<lbrakk>CFG_node (targetnode a)\n                 \\<in> combine_SDG_slices (sum_SDG_slice1 n\\<^sub>c);\n         n\\<^sub>c \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(simp add:HRB_slice_def) blast"], ["proof (state)\nthis:\n  CFG_node (targetnode a)\n  \\<in> combine_SDG_slices (sum_SDG_slice1 n\\<^sub>c)\n  n\\<^sub>c \\<in> S\n\ngoal (2 subgoals):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. CFG_node (targetnode a') \\<in> HRB_slice S", "thus \"CFG_node (sourcenode a) \\<in> HRB_slice S\""], ["proof (prove)\nusing this:\n  CFG_node (targetnode a)\n  \\<in> combine_SDG_slices (sum_SDG_slice1 n\\<^sub>c)\n  n\\<^sub>c \\<in> S\n\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S", "proof(induct \"CFG_node (targetnode a)\" rule:combine_SDG_slices.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c;\n     n\\<^sub>c \\<in> S\\<rbrakk>\n    \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "case combSlice_refl"], ["proof (state)\nthis:\n  CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c\n  n\\<^sub>c \\<in> S\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c;\n     n\\<^sub>c \\<in> S\\<rbrakk>\n    \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "from \\<open>valid_edge a\\<close> \\<open>kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f", "have \"CFG_node (sourcenode a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\""], ["proof (prove)\nusing this:\n  valid_edge a\n  kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f\n\ngoal (1 subgoal):\n 1. CFG_node\n     (sourcenode\n       a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)", "by(fastforce intro:sum_SDG_return_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c;\n     n\\<^sub>c \\<in> S\\<rbrakk>\n    \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "with \\<open>valid_edge a\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)", "have \"CFG_node (sourcenode a) \\<in> sum_SDG_slice2 (CFG_node (targetnode a))\""], ["proof (prove)\nusing this:\n  valid_edge a\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\n\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a) \\<in> sum_SDG_slice2 (CFG_node (targetnode a))", "by(fastforce intro:sum_SDG_slice2.intros)"], ["proof (state)\nthis:\n  CFG_node (sourcenode a) \\<in> sum_SDG_slice2 (CFG_node (targetnode a))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c;\n     n\\<^sub>c \\<in> S\\<rbrakk>\n    \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S\n 2. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "with \\<open>CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c\\<close> \\<open>n\\<^sub>c \\<in> S\\<close>\n      \\<open>CFG_node (sourcenode a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c\n  n\\<^sub>c \\<in> S\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\n  CFG_node (sourcenode a) \\<in> sum_SDG_slice2 (CFG_node (targetnode a))", "show ?case"], ["proof (prove)\nusing this:\n  CFG_node (targetnode a) \\<in> sum_SDG_slice1 n\\<^sub>c\n  n\\<^sub>c \\<in> S\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\n  CFG_node (sourcenode a) \\<in> sum_SDG_slice2 (CFG_node (targetnode a))\n\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S", "by(fastforce intro:combSlice_Return_parent_node simp:HRB_slice_def)"], ["proof (state)\nthis:\n  CFG_node (sourcenode a) \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "case (combSlice_Return_parent_node n' n'' p')"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice1 n\\<^sub>c\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  CFG_node (targetnode a) \\<in> sum_SDG_slice2 n'\n  n\\<^sub>c \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "from \\<open>valid_edge a\\<close> \\<open>kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f", "have \"CFG_node (sourcenode a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\""], ["proof (prove)\nusing this:\n  valid_edge a\n  kind a = Q\\<hookleftarrow>\\<^bsub>p\\<^esub>f\n\ngoal (1 subgoal):\n 1. CFG_node\n     (sourcenode\n       a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)", "by(fastforce intro:sum_SDG_return_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\n\ngoal (1 subgoal):\n 1. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "with \\<open>CFG_node (targetnode a) \\<in> sum_SDG_slice2 n'\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (targetnode a) \\<in> sum_SDG_slice2 n'\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)", "have \"CFG_node (sourcenode a) \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\nusing this:\n  CFG_node (targetnode a) \\<in> sum_SDG_slice2 n'\n  CFG_node\n   (sourcenode\n     a) s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (targetnode a)\n\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a) \\<in> sum_SDG_slice2 n'", "by(fastforce intro:sum_SDG_slice2.intros)"], ["proof (state)\nthis:\n  CFG_node (sourcenode a) \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. \\<And>n' n'' p.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 n\\<^sub>c;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        CFG_node (targetnode a) \\<in> sum_SDG_slice2 n';\n        n\\<^sub>c \\<in> S\\<rbrakk>\n       \\<Longrightarrow> CFG_node (sourcenode a) \\<in> HRB_slice S", "with \\<open>n' \\<in> sum_SDG_slice1 n\\<^sub>c\\<close> \\<open>n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\\<close> \\<open>n\\<^sub>c \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> sum_SDG_slice1 n\\<^sub>c\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  n\\<^sub>c \\<in> S\n  CFG_node (sourcenode a) \\<in> sum_SDG_slice2 n'", "show ?case"], ["proof (prove)\nusing this:\n  n' \\<in> sum_SDG_slice1 n\\<^sub>c\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  n\\<^sub>c \\<in> S\n  CFG_node (sourcenode a) \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. CFG_node (sourcenode a) \\<in> HRB_slice S", "by(fastforce intro:combine_SDG_slices.combSlice_Return_parent_node \n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  CFG_node (sourcenode a) \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  CFG_node (sourcenode a) \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. CFG_node (targetnode a') \\<in> HRB_slice S", "from \\<open>valid_edge a'\\<close> \\<open>kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\\<close> \\<open>a \\<in> get_return_edges a'\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a'\n  kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\n  a \\<in> get_return_edges a'", "have \"CFG_node (targetnode a') s\\<longrightarrow>\\<^bsub>cd\\<^esub> CFG_node (sourcenode a)\""], ["proof (prove)\nusing this:\n  valid_edge a'\n  kind a' = Q':r'\\<hookrightarrow>\\<^bsub>p\\<^esub>fs'\n  a \\<in> get_return_edges a'\n\ngoal (1 subgoal):\n 1. CFG_node\n     (targetnode\n       a') s\\<longrightarrow>\\<^bsub>cd\\<^esub> CFG_node (sourcenode a)", "by(fastforce intro:sum_SDG_proc_entry_exit_cdep)"], ["proof (state)\nthis:\n  CFG_node\n   (targetnode\n     a') s\\<longrightarrow>\\<^bsub>cd\\<^esub> CFG_node (sourcenode a)\n\ngoal (1 subgoal):\n 1. CFG_node (targetnode a') \\<in> HRB_slice S", "with \\<open>CFG_node (sourcenode a) \\<in> HRB_slice S\\<close> \\<open>n\\<^sub>c \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (sourcenode a) \\<in> HRB_slice S\n  n\\<^sub>c \\<in> S\n  CFG_node\n   (targetnode\n     a') s\\<longrightarrow>\\<^bsub>cd\\<^esub> CFG_node (sourcenode a)", "show \"CFG_node (targetnode a') \\<in> HRB_slice S\""], ["proof (prove)\nusing this:\n  CFG_node (sourcenode a) \\<in> HRB_slice S\n  n\\<^sub>c \\<in> S\n  CFG_node\n   (targetnode\n     a') s\\<longrightarrow>\\<^bsub>cd\\<^esub> CFG_node (sourcenode a)\n\ngoal (1 subgoal):\n 1. CFG_node (targetnode a') \\<in> HRB_slice S", "by(fastforce elim!:combine_SDG_slices.cases \n                intro:combine_SDG_slices.intros cdep_slice1 cdep_slice2 \n                 simp:HRB_slice_def)"], ["proof (state)\nthis:\n  CFG_node (targetnode a') \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Proof of Precision\\<close>"], ["", "lemma in_intra_SDG_path_in_slice2:\n  \"\\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set ns\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "proof(induct rule:intra_SDG_path.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case iSp_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n'' \\<in> set []\n\ngoal (3 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\n 2. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n'' \\<in> set []\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n_", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n_\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case (iSp_Append_cdep n ns nx n')"], ["proof (state)\nthis:\n  n i-ns\\<rightarrow>\\<^sub>d* nx\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> set (ns @ [nx])\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "note IH = \\<open>n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>n'' \\<in> set (ns@[nx])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ [nx])", "have \"n'' \\<in> set ns \\<or> n'' = nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ [nx])\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns \\<or> n'' = nx", "by auto"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 nx", "have \"n'' \\<in> sum_SDG_slice2 nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 nx", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 nx", "show ?thesis"], ["proof (prove)\nusing this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by(fastforce intro:slice2_cdep_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "assume \"n'' = nx\""], ["proof (state)\nthis:\n  n'' = nx\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'", "have \"valid_SDG_node n'\""], ["proof (prove)\nusing this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n\ngoal (1 subgoal):\n 1. valid_SDG_node n'", "by(rule SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "hence \"n' \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\nusing this:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n' \\<in> sum_SDG_slice2 n'", "by(rule refl_slice2)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n'", "have \"nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\nusing this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice2 n'", "by(fastforce intro:cdep_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>n'' = nx\\<close>"], ["proof (chain)\npicking this:\n  n'' = nx\n  nx \\<in> sum_SDG_slice2 n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = nx\n  nx \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "case (iSp_Append_ddep n ns nx V n')"], ["proof (state)\nthis:\n  n i-ns\\<rightarrow>\\<^sub>d* nx\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx \\<noteq> n'\n  n'' \\<in> set (ns @ [nx])\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "note IH = \\<open>n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>n'' \\<in> set (ns@[nx])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ [nx])", "have \"n'' \\<in> set ns \\<or> n'' = nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ [nx])\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns \\<or> n'' = nx", "by auto"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n'.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 nx", "have \"n'' \\<in> sum_SDG_slice2 nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 nx", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n'' \\<in> sum_SDG_slice2 nx", "show ?thesis"], ["proof (prove)\nusing this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by(fastforce intro:slice2_ddep_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "assume \"n'' = nx\""], ["proof (state)\nthis:\n  n'' = nx\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from \\<open>nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"valid_SDG_node n'\""], ["proof (prove)\nusing this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. valid_SDG_node n'", "by(rule SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "hence \"n' \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\nusing this:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n' \\<in> sum_SDG_slice2 n'", "by(rule refl_slice2)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice2 n'", "have \"nx \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\nusing this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice2 n'", "by(fastforce intro:ddep_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>n'' = nx\\<close>"], ["proof (chain)\npicking this:\n  n'' = nx\n  nx \\<in> sum_SDG_slice2 n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = nx\n  nx \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_intra_SDG_path_in_HRB_slice:\n  \"\\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set ns;\n     n' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> HRB_slice S", "proof(induct arbitrary:S rule:intra_SDG_path.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case iSp_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n'' \\<in> set []\n  n_ \\<in> S\n\ngoal (3 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n'' \\<in> set []\n  n_ \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (iSp_Append_cdep n ns nx n')"], ["proof (state)\nthis:\n  n i-ns\\<rightarrow>\\<^sub>d* nx\n  \\<lbrakk>n'' \\<in> set ns; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n'' \\<in> set (ns @ [nx])\n  n' \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns; nx \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n'' \\<in> set (ns@[nx])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ [nx])", "have \"n'' \\<in> set ns \\<or> n'' = nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ [nx])\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns \\<or> n'' = nx", "by auto"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (2 subgoals):\n 1. \\<And>n ns n''a n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a \\<longrightarrow>\\<^bsub>cd\\<^esub> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF \\<open>n'' \\<in> set ns\\<close>]"], ["proof (chain)\npicking this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {nx}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "from this \\<open>nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> HRB_slice {nx}\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {nx}\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce elim:HRB_slice_cases slice1_cdep_slice1\n        intro:bexI[where x=\"n'\"] combine_SDG_slices.intros SDG_edge_sum_SDG_edge \n        simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = nx\""], ["proof (state)\nthis:\n  n'' = nx\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'", "have \"valid_SDG_node n'\""], ["proof (prove)\nusing this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n\ngoal (1 subgoal):\n 1. valid_SDG_node n'", "by(rule SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n' \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n' \\<in> sum_SDG_slice1 n'", "by(rule refl_slice1)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n'", "have \"nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  nx \\<longrightarrow>\\<^bsub>cd\\<^esub> n'\n  n' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice1 n'", "by(fastforce intro:cdep_slice1 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' = nx\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' = nx\n  n' \\<in> S\n  nx \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n'' = nx\n  n' \\<in> S\n  nx \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (iSp_Append_ddep n ns nx V n')"], ["proof (state)\nthis:\n  n i-ns\\<rightarrow>\\<^sub>d* nx\n  \\<lbrakk>n'' \\<in> set ns; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  nx \\<noteq> n'\n  n'' \\<in> set (ns @ [nx])\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns; nx \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n'' \\<in> set (ns@[nx])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ [nx])", "have \"n'' \\<in> set ns \\<or> n'' = nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ [nx])\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns \\<or> n'' = nx", "by auto"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (1 subgoal):\n 1. \\<And>n ns n''a V n' S.\n       \\<lbrakk>n i-ns\\<rightarrow>\\<^sub>d* n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a -V\\<rightarrow>\\<^sub>d\\<^sub>d n'; n''a \\<noteq> n';\n        n'' \\<in> set (ns @ [n''a]); n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> set ns \\<or> n'' = nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF \\<open>n'' \\<in> set ns\\<close>]"], ["proof (chain)\npicking this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {nx}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "from this \\<open>nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> HRB_slice {nx}\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> S", "show ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {nx}\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce elim:HRB_slice_cases slice1_ddep_slice1\n        intro:bexI[where x=\"n'\"] combine_SDG_slices.intros SDG_edge_sum_SDG_edge \n        simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = nx\""], ["proof (state)\nthis:\n  n'' = nx\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'", "have \"valid_SDG_node n'\""], ["proof (prove)\nusing this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n\ngoal (1 subgoal):\n 1. valid_SDG_node n'", "by(rule SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n' \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n' \\<in> sum_SDG_slice1 n'", "by(rule refl_slice1)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\\<close>"], ["proof (chain)\npicking this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice1 n'", "have \"nx \\<in> sum_SDG_slice1 n'\""], ["proof (prove)\nusing this:\n  nx -V\\<rightarrow>\\<^sub>d\\<^sub>d n'\n  n' \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. nx \\<in> sum_SDG_slice1 n'", "by(fastforce intro:ddep_slice1 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n'' = nx \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' = nx\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' = nx\n  n' \\<in> S\n  nx \\<in> sum_SDG_slice1 n'", "show ?case"], ["proof (prove)\nusing this:\n  n'' = nx\n  n' \\<in> S\n  nx \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_matched_in_slice2:\n  \"\\<lbrakk>matched n ns n'; n'' \\<in> set ns\\<rbrakk> \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matched n ns n'; n'' \\<in> set ns\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "proof(induct rule:matched.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\n 2. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "case matched_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n'' \\<in> set []\n\ngoal (4 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\n 2. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n'' \\<in> set []\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n_", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n_\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "case (matched_Append_intra_SDG_path n ns nx ns' n')"], ["proof (state)\nthis:\n  matched n ns nx\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n'' \\<in> set (ns @ ns')\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "note IH = \\<open>n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 nx\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n'' \\<in> set (ns@ns')\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ ns')", "have \"n'' \\<in> set ns \\<or> n'' \\<in> set ns'\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ ns')\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns \\<or> n'' \\<in> set ns'", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<or> n'' \\<in> set ns'\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n'.\n       \\<lbrakk>matched n ns n''a;\n        n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n''a;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n';\n        n'' \\<in> set (ns @ ns')\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> set ns \\<or> n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 nx", "have \"n'' \\<in> sum_SDG_slice2 nx\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 nx", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx i-ns'\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n'' \\<in> sum_SDG_slice2 nx", "show ?thesis"], ["proof (prove)\nusing this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n'' \\<in> sum_SDG_slice2 nx\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by(fastforce intro:slice2_is_SDG_path_slice2 \n                        intra_SDG_path_is_SDG_path)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n'", "with \\<open>nx i-ns'\\<rightarrow>\\<^sub>d* n'\\<close>"], ["proof (chain)\npicking this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n'' \\<in> set ns'", "show ?case"], ["proof (prove)\nusing this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n'", "by(rule in_intra_SDG_path_in_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n'\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "case (matched_bracket_call n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a')"], ["proof (state)\nthis:\n  matched n\\<^sub>0 ns n\\<^sub>1\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  valid_edge a\n  a' \\<in> get_return_edges a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "note IH1 = \\<open>n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>1\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "note IH2 = \\<open>n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>3\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\\<close> \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close> \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close> \n    \\<open>a' \\<in> get_return_edges a\\<close> \\<open>valid_edge a\\<close>\n    \\<open>sourcenode a = parent_node n\\<^sub>1\\<close> \\<open>targetnode a = parent_node n\\<^sub>2\\<close>\n    \\<open>sourcenode a' = parent_node n\\<^sub>3\\<close> \\<open>targetnode a' = parent_node n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4", "have \"matched n\\<^sub>1 ([]@n\\<^sub>1#ns'@[n\\<^sub>3]) n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "by(fastforce intro:matched.matched_bracket_call matched_Nil \n                 elim:SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "then"], ["proof (chain)\npicking this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "obtain nsx where \"n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule matched_is_SDG_path)"], ["proof (state)\nthis:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n'' \\<in> set (ns@n\\<^sub>1#ns'@[n\\<^sub>3])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])", "have \"((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or> n'' = n\\<^sub>3\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n        n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "thus ?case"], ["proof (prove)\nusing this:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3 \\<Longrightarrow>\n    n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "proof(erule disjE)+"], ["proof (state)\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>1\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>1", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by -(rule slice2_is_SDG_path_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' = n\\<^sub>1\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>1\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4", "have \"n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:is_SDG_path_slice2 refl_slice2 is_SDG_path_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n'' = n\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\\<^sub>1\n  n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\\<^sub>1\n  n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from IH2[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>3\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:slice2_ret_slice2 slice2_param_out_slice2 \n                        SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' = n\\<^sub>3\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"n\\<^sub>3 s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n    n\\<^sub>3 s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "by(fastforce intro:SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n\\<^sub>3 s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "hence \"n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 s-p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 s-p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:return_slice2 param_out_slice2 refl_slice2 \n                        sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n'' = n\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\\<^sub>3\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\\<^sub>3\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "case (matched_bracket_param n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a a')"], ["proof (state)\nthis:\n  matched n\\<^sub>0 ns n\\<^sub>1\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  valid_edge a\n  a' \\<in> get_return_edges a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "note IH1 = \\<open>n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>1\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "note IH2 = \\<open>n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>3\\<close>"], ["proof (state)\nthis:\n  n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\\<close> \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close> \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close> \n    \\<open>a' \\<in> get_return_edges a\\<close> \\<open>valid_edge a\\<close>\n    \\<open>sourcenode a = parent_node n\\<^sub>1\\<close> \\<open>targetnode a = parent_node n\\<^sub>2\\<close>\n    \\<open>sourcenode a' = parent_node n\\<^sub>3\\<close> \\<open>targetnode a' = parent_node n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4", "have \"matched n\\<^sub>1 ([]@n\\<^sub>1#ns'@[n\\<^sub>3]) n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "by(fastforce intro:matched.matched_bracket_param matched_Nil \n                 elim:SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "then"], ["proof (chain)\npicking this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "obtain nsx where \"n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule matched_is_SDG_path)"], ["proof (state)\nthis:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n'' \\<in> set (ns@n\\<^sub>1#ns'@[n\\<^sub>3])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])", "have \"((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or> n'' = n\\<^sub>3\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a'.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        n'' \\<in> set ns \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>1;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set ns' \\<Longrightarrow>\n        n'' \\<in> sum_SDG_slice2 n\\<^sub>3;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "thus ?case"], ["proof (prove)\nusing this:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3 \\<Longrightarrow>\n    n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "proof(erule disjE)+"], ["proof (state)\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>1\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>1", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>1\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by -(rule slice2_is_SDG_path_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' = n\\<^sub>1\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>1\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4", "have \"n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:is_SDG_path_slice2 refl_slice2 is_SDG_path_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n'' = n\\<^sub>1\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\\<^sub>1\n  n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\\<^sub>1\n  n\\<^sub>1 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from IH2[OF this]"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>3\""], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "."], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:slice2_param_out_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "assume \"n'' = n\\<^sub>3\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "from \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "by(rule SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "hence \"n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:param_out_slice2 refl_slice2 sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "with \\<open>n'' = n\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\\<^sub>3\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\\<^sub>3\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_matched_in_HRB_slice:\n  \"\\<lbrakk>matched n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>matched n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> HRB_slice S", "proof(induct arbitrary:S rule:matched.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case matched_Nil"], ["proof (state)\nthis:\n  valid_SDG_node n_\n  n'' \\<in> set []\n  n_ \\<in> S\n\ngoal (4 subgoals):\n 1. \\<And>n S.\n       \\<lbrakk>valid_SDG_node n; n'' \\<in> set []; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n_\n  n'' \\<in> set []\n  n_ \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (matched_Append_intra_SDG_path n ns nx ns' n')"], ["proof (state)\nthis:\n  matched n ns nx\n  \\<lbrakk>n'' \\<in> set ns; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n'' \\<in> set (ns @ ns')\n  n' \\<in> S\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns; nx \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns; nx \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n'' \\<in> set (ns@ns')\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ ns')", "have \"n'' \\<in> set ns \\<or> n'' \\<in> set ns'\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ ns')\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns \\<or> n'' \\<in> set ns'", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> set ns \\<or> n'' \\<in> set ns'\n\ngoal (3 subgoals):\n 1. \\<And>n ns n''a ns' n' S.\n       \\<lbrakk>matched n ns n''a;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n''a \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n''a i-ns'\\<rightarrow>\\<^sub>d* n'; n'' \\<in> set (ns @ ns');\n        n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> set ns \\<or> n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF \\<open>n'' \\<in> set ns\\<close>]"], ["proof (chain)\npicking this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {nx}\""], ["proof (prove)\nusing this:\n  nx \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {nx}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {nx}\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>nx i-ns'\\<rightarrow>\\<^sub>d* n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n' \\<in> S\n  n'' \\<in> HRB_slice {nx}", "show ?thesis"], ["proof (prove)\nusing this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n' \\<in> S\n  n'' \\<in> HRB_slice {nx}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:HRB_slice_is_SDG_path_HRB_slice \n                        intra_SDG_path_is_SDG_path)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>nx i-ns'\\<rightarrow>\\<^sub>d* n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n' \\<in> S\n  n'' \\<in> set ns'", "show ?case"], ["proof (prove)\nusing this:\n  nx i-ns'\\<rightarrow>\\<^sub>d* n'\n  n' \\<in> S\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:in_intra_SDG_path_in_HRB_slice simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (matched_bracket_call n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a')"], ["proof (state)\nthis:\n  matched n\\<^sub>0 ns n\\<^sub>1\n  \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  valid_edge a\n  a' \\<in> get_return_edges a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n  n\\<^sub>4 \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH1 = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH2 = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\\<close> \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close> \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close> \n    \\<open>a' \\<in> get_return_edges a\\<close> \\<open>valid_edge a\\<close>\n    \\<open>sourcenode a = parent_node n\\<^sub>1\\<close> \\<open>targetnode a = parent_node n\\<^sub>2\\<close>\n    \\<open>sourcenode a' = parent_node n\\<^sub>3\\<close> \\<open>targetnode a' = parent_node n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4", "have \"matched n\\<^sub>1 ([]@n\\<^sub>1#ns'@[n\\<^sub>3]) n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "by(fastforce intro:matched.matched_bracket_call matched_Nil \n                 elim:SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "then"], ["proof (chain)\npicking this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "obtain nsx where \"n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule matched_is_SDG_path)"], ["proof (state)\nthis:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n'' \\<in> set (ns@n\\<^sub>1#ns'@[n\\<^sub>3])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])", "have \"((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or> n'' = n\\<^sub>3\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (2 subgoals):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 ns' n\\<^sub>3 n\\<^sub>4 V a a'\n       S. \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2;\n           matched n\\<^sub>2 ns' n\\<^sub>3;\n           \\<And>S.\n              \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n              \\<Longrightarrow> n'' \\<in> HRB_slice S;\n           n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n           n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n           valid_edge a; a' \\<in> get_return_edges a;\n           sourcenode a = parent_node n\\<^sub>1;\n           targetnode a = parent_node n\\<^sub>2;\n           sourcenode a' = parent_node n\\<^sub>3;\n           targetnode a' = parent_node n\\<^sub>4;\n           n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n           n\\<^sub>4 \\<in> S\\<rbrakk>\n          \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3 \\<Longrightarrow>\n    n'' \\<in> HRB_slice S", "proof(erule disjE)+"], ["proof (state)\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  n\\<^sub>1 \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {n\\<^sub>1}\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {n\\<^sub>1}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {n\\<^sub>1}\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  n'' \\<in> HRB_slice {n\\<^sub>1}", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  n'' \\<in> HRB_slice {n\\<^sub>1}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by -(rule HRB_slice_is_SDG_path_HRB_slice)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = n\\<^sub>1\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>1\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4", "have \"n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4", "by(fastforce intro:is_SDG_path_slice1 refl_slice1 is_SDG_path_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' = n\\<^sub>1\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\\<^sub>1\n  n\\<^sub>4 \\<in> S\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\\<^sub>1\n  n\\<^sub>4 \\<in> S\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns'", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>3\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "by(rule in_matched_in_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:slice2_ret_slice2 slice2_param_out_slice2 \n                        SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"valid_SDG_node n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. valid_SDG_node n\\<^sub>4", "by(fastforce intro:SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4", "by(rule refl_slice1)"], ["proof (state)\nthis:\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"CFG_node (parent_node n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n\\<^sub>4)\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node\n       n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n                (parent_node n\\<^sub>4)", "by(fastforce elim:SDG_edge.cases intro:SDG_return_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' \\<in> sum_SDG_slice2 n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)", "show ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_Return_parent_node SDG_edge_sum_SDG_edge \n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = n\\<^sub>3\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"CFG_node (parent_node n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n\\<^sub>4)\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node\n       n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n                (parent_node n\\<^sub>4)", "by(fastforce elim:SDG_edge.cases intro:SDG_return_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"valid_SDG_node n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. valid_SDG_node n\\<^sub>4", "by(fastforce intro:SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4", "by(rule refl_slice1)"], ["proof (state)\nthis:\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>valid_SDG_node n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n\\<^sub>4", "have \"n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(rule refl_slice2)"], ["proof (state)\nthis:\n  n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or> n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4", "have \"n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p\\<rightarrow>\\<^bsub>ret\\<^esub> n\\<^sub>4 \\<or>\n  n\\<^sub>3 -p:V\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:return_slice2 param_out_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\\<close> \n      \\<open>CFG_node (parent_node n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n\\<^sub>4)\\<close> \\<open>n'' = n\\<^sub>3\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n  n'' = n\\<^sub>3\n  n\\<^sub>4 \\<in> S\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "show ?case"], ["proof (prove)\nusing this:\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n  n'' = n\\<^sub>3\n  n\\<^sub>4 \\<in> S\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_Return_parent_node SDG_edge_sum_SDG_edge\n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (matched_bracket_param n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a a')"], ["proof (state)\nthis:\n  matched n\\<^sub>0 ns n\\<^sub>1\n  \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  valid_edge a\n  a' \\<in> get_return_edges a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n  n\\<^sub>4 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH1 = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH2 = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\\<close> \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close> \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close> \n    \\<open>a' \\<in> get_return_edges a\\<close> \\<open>valid_edge a\\<close>\n    \\<open>sourcenode a = parent_node n\\<^sub>1\\<close> \\<open>targetnode a = parent_node n\\<^sub>2\\<close>\n    \\<open>sourcenode a' = parent_node n\\<^sub>3\\<close> \\<open>targetnode a' = parent_node n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4", "have \"matched n\\<^sub>1 ([]@n\\<^sub>1#ns'@[n\\<^sub>3]) n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  a' \\<in> get_return_edges a\n  valid_edge a\n  sourcenode a = parent_node n\\<^sub>1\n  targetnode a = parent_node n\\<^sub>2\n  sourcenode a' = parent_node n\\<^sub>3\n  targetnode a' = parent_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "by(fastforce intro:matched.matched_bracket_param matched_Nil \n                 elim:SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "then"], ["proof (chain)\npicking this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4", "obtain nsx where \"n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>1 ([] @ n\\<^sub>1 # ns' @ [n\\<^sub>3]) n\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule matched_is_SDG_path)"], ["proof (state)\nthis:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n'' \\<in> set (ns@n\\<^sub>1#ns'@[n\\<^sub>3])\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])", "have \"((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or> n'' = n\\<^sub>3\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3])\n\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3", "by auto"], ["proof (state)\nthis:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p V n\\<^sub>2 ns' n\\<^sub>3 V' n\\<^sub>4 a\n       a' S.\n       \\<lbrakk>matched n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns'; n\\<^sub>3 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4;\n        valid_edge a; a' \\<in> get_return_edges a;\n        sourcenode a = parent_node n\\<^sub>1;\n        targetnode a = parent_node n\\<^sub>2;\n        sourcenode a' = parent_node n\\<^sub>3;\n        targetnode a' = parent_node n\\<^sub>4;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns' @ [n\\<^sub>3]);\n        n\\<^sub>4 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns') \\<or>\n    n'' = n\\<^sub>3 \\<Longrightarrow>\n    n'' \\<in> HRB_slice S", "proof(erule disjE)+"], ["proof (state)\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH1[OF this]"], ["proof (chain)\npicking this:\n  n\\<^sub>1 \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {n\\<^sub>1}\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {n\\<^sub>1}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {n\\<^sub>1}\n\ngoal (4 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 4. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  n'' \\<in> HRB_slice {n\\<^sub>1}", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  n'' \\<in> HRB_slice {n\\<^sub>1}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by -(rule HRB_slice_is_SDG_path_HRB_slice)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = n\\<^sub>1\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>1\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4", "have \"n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4", "by(fastforce intro:is_SDG_path_slice1 refl_slice1 is_SDG_path_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (3 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' = n\\<^sub>1\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\\<^sub>1\n  n\\<^sub>4 \\<in> S\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\\<^sub>1\n  n\\<^sub>4 \\<in> S\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns'", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>3\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "by(rule in_matched_in_slice2)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3", "have \"n'' \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> sum_SDG_slice2 n\\<^sub>4", "by(fastforce intro:slice2_param_out_slice2 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"valid_SDG_node n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. valid_SDG_node n\\<^sub>4", "by(rule SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4", "by(rule refl_slice1)"], ["proof (state)\nthis:\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"CFG_node (parent_node n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n\\<^sub>4)\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node\n       n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n                (parent_node n\\<^sub>4)", "by(fastforce elim:SDG_edge.cases intro:SDG_return_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (2 subgoals):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' \\<in> sum_SDG_slice2 n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)", "show ?case"], ["proof (prove)\nusing this:\n  n'' \\<in> sum_SDG_slice2 n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  n\\<^sub>4 \\<in> S\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_Return_parent_node SDG_edge_sum_SDG_edge \n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = n\\<^sub>3\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "by(rule SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"valid_SDG_node n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. valid_SDG_node n\\<^sub>4", "by(rule SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4", "by(rule refl_slice1)"], ["proof (state)\nthis:\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>valid_SDG_node n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n\\<^sub>4", "have \"n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  valid_SDG_node n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(rule refl_slice2)"], ["proof (state)\nthis:\n  n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4", "have \"n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 s-p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4", "by(rule param_out_slice2)"], ["proof (state)\nthis:\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4", "have \"CFG_node (parent_node n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n\\<^sub>4)\""], ["proof (prove)\nusing this:\n  n\\<^sub>3 -p:V'\\<rightarrow>\\<^bsub>out\\<^esub> n\\<^sub>4\n\ngoal (1 subgoal):\n 1. CFG_node\n     (parent_node\n       n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n                (parent_node n\\<^sub>4)", "by(fastforce elim:SDG_edge.cases intro:SDG_return_edge)"], ["proof (state)\nthis:\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (1 subgoal):\n 1. n'' = n\\<^sub>3 \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\\<close> \\<open>n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\\<close> \\<open>n'' = n\\<^sub>3\\<close> \\<open>n\\<^sub>4 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  n'' = n\\<^sub>3\n  n\\<^sub>4 \\<in> S\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)", "show ?case"], ["proof (prove)\nusing this:\n  n\\<^sub>3 \\<in> sum_SDG_slice2 n\\<^sub>4\n  n\\<^sub>4 \\<in> sum_SDG_slice1 n\\<^sub>4\n  n'' = n\\<^sub>3\n  n\\<^sub>4 \\<in> S\n  CFG_node\n   (parent_node\n     n\\<^sub>3) -p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node\n              (parent_node n\\<^sub>4)\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:combSlice_Return_parent_node SDG_edge_sum_SDG_edge\n                            simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem in_realizable_in_HRB_slice:\n  \"\\<lbrakk>realizable n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>realizable n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk>\n    \\<Longrightarrow> n'' \\<in> HRB_slice S", "proof(induct arbitrary:S rule:realizable.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n ns n' S.\n       \\<lbrakk>matched n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (realizable_matched n ns n')"], ["proof (state)\nthis:\n  matched n ns n'\n  n'' \\<in> set ns\n  n' \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n ns n' S.\n       \\<lbrakk>matched n ns n'; n'' \\<in> set ns; n' \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  matched n ns n'\n  n'' \\<in> set ns\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(rule in_matched_in_HRB_slice)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "case (realizable_call n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3)"], ["proof (state)\nthis:\n  realizable n\\<^sub>0 ns n\\<^sub>1\n  \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns')\n  n\\<^sub>3 \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "note IH = \\<open>\\<And>S. \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk> \\<Longrightarrow> n'' \\<in> HRB_slice S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> ?S\\<rbrakk>\n  \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>n'' \\<in> set (ns@n\\<^sub>1#ns')\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns')", "have \"(n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns'\""], ["proof (prove)\nusing this:\n  n'' \\<in> set (ns @ n\\<^sub>1 # ns')\n\ngoal (1 subgoal):\n 1. (n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns'", "by auto"], ["proof (state)\nthis:\n  (n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. \\<And>n\\<^sub>0 ns n\\<^sub>1 p n\\<^sub>2 V ns' n\\<^sub>3 S.\n       \\<lbrakk>realizable n\\<^sub>0 ns n\\<^sub>1;\n        \\<And>S.\n           \\<lbrakk>n'' \\<in> set ns; n\\<^sub>1 \\<in> S\\<rbrakk>\n           \\<Longrightarrow> n'' \\<in> HRB_slice S;\n        n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n        n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2;\n        matched n\\<^sub>2 ns' n\\<^sub>3;\n        n'' \\<in> set (ns @ n\\<^sub>1 # ns'); n\\<^sub>3 \\<in> S\\<rbrakk>\n       \\<Longrightarrow> n'' \\<in> HRB_slice S", "thus ?case"], ["proof (prove)\nusing this:\n  (n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or> n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n'' \\<in> set ns \\<or> n'' = n\\<^sub>1) \\<or>\n    n'' \\<in> set ns' \\<Longrightarrow>\n    n'' \\<in> HRB_slice S", "proof(erule disjE)+"], ["proof (state)\ngoal (3 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns\""], ["proof (state)\nthis:\n  n'' \\<in> set ns\n\ngoal (3 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "from IH[OF this]"], ["proof (chain)\npicking this:\n  n\\<^sub>1 \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S", "have \"n'' \\<in> HRB_slice {n\\<^sub>1}\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 \\<in> ?S \\<Longrightarrow> n'' \\<in> HRB_slice ?S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {n\\<^sub>1}", "by simp"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {n\\<^sub>1}\n\ngoal (3 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n'' \\<in> HRB_slice {n\\<^sub>2}\""], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {n\\<^sub>1}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice {n\\<^sub>2}", "proof(induct rule:HRB_slice_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "case (phase1 n nx)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 nx\n  nx \\<in> {n\\<^sub>1}\n\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "from \\<open>nx \\<in> {n\\<^sub>1}\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> {n\\<^sub>1}", "have \"nx = n\\<^sub>1\""], ["proof (prove)\nusing this:\n  nx \\<in> {n\\<^sub>1}\n\ngoal (1 subgoal):\n 1. nx = n\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  nx = n\\<^sub>1\n\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "with \\<open>n \\<in> sum_SDG_slice1 nx\\<close> \\<open>n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or> n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 nx\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  nx = n\\<^sub>1", "have \"n \\<in> sum_SDG_slice1 n\\<^sub>2\""], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 nx\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  nx = n\\<^sub>1\n\ngoal (1 subgoal):\n 1. n \\<in> sum_SDG_slice1 n\\<^sub>2", "by(fastforce intro:slice1_call_slice1 slice1_param_in_slice1 \n                          SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "thus ?case"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice {n\\<^sub>2}", "by(fastforce intro:combine_SDG_slices.combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice {n\\<^sub>2}\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "case (phase2 nx n' n'' p' n)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice1 nx\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  n \\<in> sum_SDG_slice2 n'\n  nx \\<in> {n\\<^sub>1}\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "from \\<open>nx \\<in> {n\\<^sub>1}\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> {n\\<^sub>1}", "have \"nx = n\\<^sub>1\""], ["proof (prove)\nusing this:\n  nx \\<in> {n\\<^sub>1}\n\ngoal (1 subgoal):\n 1. nx = n\\<^sub>1", "by simp"], ["proof (state)\nthis:\n  nx = n\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "with \\<open>n' \\<in> sum_SDG_slice1 nx\\<close> \\<open>n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or> n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> sum_SDG_slice1 nx\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  nx = n\\<^sub>1", "have \"n' \\<in> sum_SDG_slice1 n\\<^sub>2\""], ["proof (prove)\nusing this:\n  n' \\<in> sum_SDG_slice1 nx\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  nx = n\\<^sub>1\n\ngoal (1 subgoal):\n 1. n' \\<in> sum_SDG_slice1 n\\<^sub>2", "by(fastforce intro:slice1_call_slice1 slice1_param_in_slice1 \n                          SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n' \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> {n\\<^sub>1}\\<rbrakk>\n       \\<Longrightarrow> n \\<in> HRB_slice {n\\<^sub>2}", "with \\<open>n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\\<close> \\<open>n \\<in> sum_SDG_slice2 n'\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  n \\<in> sum_SDG_slice2 n'\n  n' \\<in> sum_SDG_slice1 n\\<^sub>2", "show ?case"], ["proof (prove)\nusing this:\n  n'' s-p'\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n')\n  n \\<in> sum_SDG_slice2 n'\n  n' \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. n \\<in> HRB_slice {n\\<^sub>2}", "by(fastforce intro:combine_SDG_slices.combSlice_Return_parent_node \n                     simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n \\<in> HRB_slice {n\\<^sub>2}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice {n\\<^sub>2}\n\ngoal (3 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  matched n\\<^sub>2 ns' n\\<^sub>3", "obtain nsx where \"n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule matched_is_SDG_path)"], ["proof (state)\nthis:\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\n\ngoal (3 subgoals):\n 1. n'' \\<in> set ns \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 3. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n'' \\<in> HRB_slice {n\\<^sub>2}\\<close> \\<open>n\\<^sub>3 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n'' \\<in> HRB_slice {n\\<^sub>2}\n  n\\<^sub>3 \\<in> S\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' \\<in> HRB_slice {n\\<^sub>2}\n  n\\<^sub>3 \\<in> S\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:HRB_slice_is_SDG_path_HRB_slice)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' = n\\<^sub>1\""], ["proof (state)\nthis:\n  n'' = n\\<^sub>1\n\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close>"], ["proof (chain)\npicking this:\n  matched n\\<^sub>2 ns' n\\<^sub>3", "obtain nsx where \"n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\""], ["proof (prove)\nusing this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule matched_is_SDG_path)"], ["proof (state)\nthis:\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\n\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n\\<^sub>2 \\<in> sum_SDG_slice1 n\\<^sub>2\""], ["proof (prove)\nusing this:\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\n\ngoal (1 subgoal):\n 1. n\\<^sub>2 \\<in> sum_SDG_slice1 n\\<^sub>2", "by(fastforce intro:refl_slice1 is_SDG_path_valid_SDG_node)"], ["proof (state)\nthis:\n  n\\<^sub>2 \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or> n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  n\\<^sub>2 \\<in> sum_SDG_slice1 n\\<^sub>2", "have \"n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>2\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 -p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<^sub>2 \\<or>\n  n\\<^sub>1 -p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<^sub>2\n  n\\<^sub>2 \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>2", "by(fastforce intro:call_slice1 param_in_slice1 SDG_edge_sum_SDG_edge)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "hence \"n\\<^sub>1 \\<in> HRB_slice {n\\<^sub>2}\""], ["proof (prove)\nusing this:\n  n\\<^sub>1 \\<in> sum_SDG_slice1 n\\<^sub>2\n\ngoal (1 subgoal):\n 1. n\\<^sub>1 \\<in> HRB_slice {n\\<^sub>2}", "by(fastforce intro:combSlice_refl simp:HRB_slice_def)"], ["proof (state)\nthis:\n  n\\<^sub>1 \\<in> HRB_slice {n\\<^sub>2}\n\ngoal (2 subgoals):\n 1. n'' = n\\<^sub>1 \\<Longrightarrow> n'' \\<in> HRB_slice S\n 2. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "with \\<open>n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\\<close> \\<open>n'' = n\\<^sub>1\\<close> \\<open>n\\<^sub>3 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\n  n'' = n\\<^sub>1\n  n\\<^sub>3 \\<in> S\n  n\\<^sub>1 \\<in> HRB_slice {n\\<^sub>2}", "show ?thesis"], ["proof (prove)\nusing this:\n  n\\<^sub>2 is-nsx\\<rightarrow>\\<^sub>d* n\\<^sub>3\n  n'' = n\\<^sub>1\n  n\\<^sub>3 \\<in> S\n  n\\<^sub>1 \\<in> HRB_slice {n\\<^sub>2}\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(fastforce intro:HRB_slice_is_SDG_path_HRB_slice)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "assume \"n'' \\<in> set ns'\""], ["proof (state)\nthis:\n  n'' \\<in> set ns'\n\ngoal (1 subgoal):\n 1. n'' \\<in> set ns' \\<Longrightarrow> n'' \\<in> HRB_slice S", "from \\<open>matched n\\<^sub>2 ns' n\\<^sub>3\\<close> this \\<open>n\\<^sub>3 \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns'\n  n\\<^sub>3 \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  matched n\\<^sub>2 ns' n\\<^sub>3\n  n'' \\<in> set ns'\n  n\\<^sub>3 \\<in> S\n\ngoal (1 subgoal):\n 1. n'' \\<in> HRB_slice S", "by(rule in_matched_in_HRB_slice)"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' \\<in> HRB_slice S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma slice1_ics_SDG_path:\n  assumes \"n \\<in> sum_SDG_slice1 n'\" and \"n \\<noteq> n'\"\n  obtains ns where \"CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n';\n         n \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns", "from \\<open>n \\<in> sum_SDG_slice1 n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice1 n'", "have \"n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\""], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice1 n'\n\ngoal (1 subgoal):\n 1. n = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n \\<in> set ns)", "proof(induct rule:sum_SDG_slice1.induct)"], ["proof (state)\ngoal (6 subgoals):\n 1. valid_SDG_node n' \\<Longrightarrow>\n    n' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n' \\<in> set ns)\n 2. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 6. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "case refl_slice1"], ["proof (state)\nthis:\n  valid_SDG_node n'\n\ngoal (6 subgoals):\n 1. valid_SDG_node n' \\<Longrightarrow>\n    n' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n' \\<in> set ns)\n 2. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 6. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. n' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n' \\<in> set ns)\n\ngoal (5 subgoals):\n 1. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "case (cdep_slice1 n'' n)"], ["proof (state)\nthis:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n  n \\<in> sum_SDG_slice1 n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (5 subgoals):\n 1. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (5 subgoals):\n 1. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "hence \"n'' ics-[]\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. n'' ics-[]\\<rightarrow>\\<^sub>d* n''", "by(rule icsSp_Nil)"], ["proof (state)\nthis:\n  n'' ics-[]\\<rightarrow>\\<^sub>d* n''\n\ngoal (5 subgoals):\n 1. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''", "have \"valid_node (parent_node n'')\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. valid_node (parent_node n'')", "by(rule valid_SDG_CFG_node)"], ["proof (state)\nthis:\n  valid_node (parent_node n'')\n\ngoal (5 subgoals):\n 1. \\<And>n'' n'a.\n       \\<lbrakk>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 5. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node (parent_node n'')\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof(cases \"parent_node n'' = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case True"], ["proof (state)\nthis:\n  parent_node n'' = (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)", "have \"n'' = CFG_node (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' = CFG_node (_Exit_)", "by(rule valid_SDG_node_parent_Exit)"], ["proof (state)\nthis:\n  n'' = CFG_node (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n  n'' = CFG_node (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n  n'' = CFG_node (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_no_sum_SDG_edge_source)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case False"], ["proof (state)\nthis:\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from this False"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)", "obtain ns \n        where \"CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule Entry_cc_SDG_path_to_inner_node)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''", "have \"CFG_node (_Entry_) cc-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  n'' s\\<longrightarrow>\\<^bsub>cd\\<^esub> n\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) cc-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by(fastforce intro:ccSp_Append_cdep sum_SDG_edge_SDG_edge)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "hence \"CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) cc-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by(rule cc_SDG_path_ics_SDG_path)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\\<close>"], ["proof (chain)\npicking this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by fastforce"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns", "obtain nsx where \"CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set nsx\""], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        \\<lbrakk>CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n';\n         n \\<in> set nsx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx", "obtain ns' ns'' where \"nsx = ns'@ns''\" and \"n ics-ns''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        \\<lbrakk>nsx = ns' @ ns'';\n         n ics-ns''\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule ics_SDG_path_split)"], ["proof (state)\nthis:\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by(fastforce intro:ics_SDG_path_Append)"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (4 subgoals):\n 1. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "case (ddep_slice1 n'' V n)"], ["proof (state)\nthis:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n  n \\<in> sum_SDG_slice1 n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (4 subgoals):\n 1. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (4 subgoals):\n 1. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "hence \"n'' ics-[]\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. n'' ics-[]\\<rightarrow>\\<^sub>d* n''", "by(rule icsSp_Nil)"], ["proof (state)\nthis:\n  n'' ics-[]\\<rightarrow>\\<^sub>d* n''\n\ngoal (4 subgoals):\n 1. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''", "have \"valid_node (parent_node n'')\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. valid_node (parent_node n'')", "by(rule valid_SDG_CFG_node)"], ["proof (state)\nthis:\n  valid_node (parent_node n'')\n\ngoal (4 subgoals):\n 1. \\<And>n'' V n'a.\n       \\<lbrakk>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 4. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node (parent_node n'')\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof(cases \"parent_node n'' = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case True"], ["proof (state)\nthis:\n  parent_node n'' = (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)", "have \"n'' = CFG_node (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' = CFG_node (_Exit_)", "by(rule valid_SDG_node_parent_Exit)"], ["proof (state)\nthis:\n  n'' = CFG_node (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n  n'' = CFG_node (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n  n'' = CFG_node (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_no_sum_SDG_edge_source)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case False"], ["proof (state)\nthis:\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from this False"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)", "obtain ns \n        where \"CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule Entry_cc_SDG_path_to_inner_node)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "hence \"CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''", "by(rule cc_SDG_path_ics_SDG_path)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof(cases \"n'' = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n'' = n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. n'' \\<noteq> n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "case True"], ["proof (state)\nthis:\n  n'' = n\n\ngoal (2 subgoals):\n 1. n'' = n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. n'' \\<noteq> n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "from \\<open>n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\\<close>"], ["proof (chain)\npicking this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>n'' = n\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\n  n = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\n  n = n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>n'' = n\\<close>"], ["proof (chain)\npicking this:\n  n'' = n\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns", "show ?thesis"], ["proof (prove)\nusing this:\n  n'' = n\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by fastforce"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n'' \\<noteq> n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "case False"], ["proof (state)\nthis:\n  n'' \\<noteq> n\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\\<close> \\<open>CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\\<close>"], ["proof (chain)\npicking this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n  n'' \\<noteq> n", "have \"CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  n'' s-V\\<rightarrow>\\<^sub>d\\<^sub>d n\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n  n'' \\<noteq> n\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by -(rule icsSp_Append_ddep)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. n'' \\<noteq> n \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "from \\<open>n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\\<close>"], ["proof (chain)\npicking this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by fastforce"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns", "obtain nsx where \"CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set nsx\""], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        \\<lbrakk>CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n';\n         n \\<in> set nsx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx", "obtain ns' ns'' where \"nsx = ns'@ns''\" and \"n ics-ns''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        \\<lbrakk>nsx = ns' @ ns'';\n         n ics-ns''\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule ics_SDG_path_split)"], ["proof (state)\nthis:\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by(fastforce intro:ics_SDG_path_Append)"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (3 subgoals):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "case (call_slice1 n'' p n)"], ["proof (state)\nthis:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n  n \\<in> sum_SDG_slice1 n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (3 subgoals):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (3 subgoals):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "hence \"n'' ics-[]\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. n'' ics-[]\\<rightarrow>\\<^sub>d* n''", "by(rule icsSp_Nil)"], ["proof (state)\nthis:\n  n'' ics-[]\\<rightarrow>\\<^sub>d* n''\n\ngoal (3 subgoals):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''", "have \"valid_node (parent_node n'')\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. valid_node (parent_node n'')", "by(rule valid_SDG_CFG_node)"], ["proof (state)\nthis:\n  valid_node (parent_node n'')\n\ngoal (3 subgoals):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 3. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node (parent_node n'')\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof(cases \"parent_node n'' = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case True"], ["proof (state)\nthis:\n  parent_node n'' = (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)", "have \"n'' = CFG_node (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' = CFG_node (_Exit_)", "by(rule valid_SDG_node_parent_Exit)"], ["proof (state)\nthis:\n  n'' = CFG_node (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n  n'' = CFG_node (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n  n'' = CFG_node (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_no_sum_SDG_edge_source)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case False"], ["proof (state)\nthis:\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from this False"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)", "obtain ns \n        where \"CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule Entry_cc_SDG_path_to_inner_node)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''", "have \"CFG_node (_Entry_) cc-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>call\\<^esub> n\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) cc-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by(fastforce intro:ccSp_Append_call sum_SDG_edge_SDG_edge)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "hence \"CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) cc-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by(rule cc_SDG_path_ics_SDG_path)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\\<close>"], ["proof (chain)\npicking this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by fastforce"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns", "obtain nsx where \"CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set nsx\""], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        \\<lbrakk>CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n';\n         n \\<in> set nsx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx", "obtain ns' ns'' where \"nsx = ns'@ns''\" and \"n ics-ns''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        \\<lbrakk>nsx = ns' @ ns'';\n         n ics-ns''\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule ics_SDG_path_split)"], ["proof (state)\nthis:\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by(fastforce intro:ics_SDG_path_Append)"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (2 subgoals):\n 1. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "case (param_in_slice1 n'' p V n)"], ["proof (state)\nthis:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n  n \\<in> sum_SDG_slice1 n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (2 subgoals):\n 1. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (2 subgoals):\n 1. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "hence \"n'' ics-[]\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. n'' ics-[]\\<rightarrow>\\<^sub>d* n''", "by(rule icsSp_Nil)"], ["proof (state)\nthis:\n  n'' ics-[]\\<rightarrow>\\<^sub>d* n''\n\ngoal (2 subgoals):\n 1. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''", "have \"valid_node (parent_node n'')\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. valid_node (parent_node n'')", "by(rule valid_SDG_CFG_node)"], ["proof (state)\nthis:\n  valid_node (parent_node n'')\n\ngoal (2 subgoals):\n 1. \\<And>n'' p V n'a.\n       \\<lbrakk>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)\n 2. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node (parent_node n'')\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof(cases \"parent_node n'' = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case True"], ["proof (state)\nthis:\n  parent_node n'' = (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)", "have \"n'' = CFG_node (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' = CFG_node (_Exit_)", "by(rule valid_SDG_node_parent_Exit)"], ["proof (state)\nthis:\n  n'' = CFG_node (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n  n'' = CFG_node (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n  n'' = CFG_node (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_no_sum_SDG_edge_source)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case False"], ["proof (state)\nthis:\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from this False"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)", "obtain ns \n        where \"CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule Entry_cc_SDG_path_to_inner_node)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "hence \"CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''", "by(rule cc_SDG_path_ics_SDG_path)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''", "have \"CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  n'' s-p:V\\<rightarrow>\\<^bsub>in\\<^esub> n\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by -(rule icsSp_Append_param_in)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\\<close>"], ["proof (chain)\npicking this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by fastforce"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns", "obtain nsx where \"CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set nsx\""], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        \\<lbrakk>CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n';\n         n \\<in> set nsx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx", "obtain ns' ns'' where \"nsx = ns'@ns''\" and \"n ics-ns''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        \\<lbrakk>nsx = ns' @ ns'';\n         n ics-ns''\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule ics_SDG_path_split)"], ["proof (state)\nthis:\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by(fastforce intro:ics_SDG_path_Append)"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "case (sum_slice1 n'' p n)"], ["proof (state)\nthis:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n  n \\<in> sum_SDG_slice1 n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "hence \"n'' ics-[]\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. n'' ics-[]\\<rightarrow>\\<^sub>d* n''", "by(rule icsSp_Nil)"], ["proof (state)\nthis:\n  n'' ics-[]\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "from \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''", "have \"valid_node (parent_node n'')\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. valid_node (parent_node n'')", "by(rule valid_SDG_CFG_node)"], ["proof (state)\nthis:\n  valid_node (parent_node n'')\n\ngoal (1 subgoal):\n 1. \\<And>n'' p n'a.\n       \\<lbrakk>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n'a;\n        n'a \\<in> sum_SDG_slice1 n';\n        n'a = n' \\<or>\n        (\\<exists>ns.\n            CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n            n'a \\<in> set ns)\\<rbrakk>\n       \\<Longrightarrow> n'' = n' \\<or>\n                         (\\<exists>ns.\n                             CFG_node\n                              (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                             n'' \\<in> set ns)", "thus ?case"], ["proof (prove)\nusing this:\n  valid_node (parent_node n'')\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof(cases \"parent_node n'' = (_Exit_)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case True"], ["proof (state)\nthis:\n  parent_node n'' = (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>valid_SDG_node n''\\<close>"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)", "have \"n'' = CFG_node (_Exit_)\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' = (_Exit_)\n\ngoal (1 subgoal):\n 1. n'' = CFG_node (_Exit_)", "by(rule valid_SDG_node_parent_Exit)"], ["proof (state)\nthis:\n  n'' = CFG_node (_Exit_)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n  n'' = CFG_node (_Exit_)", "have False"], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n  n'' = CFG_node (_Exit_)\n\ngoal (1 subgoal):\n 1. False", "by(fastforce intro:Exit_no_sum_SDG_edge_source)"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' = (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)\n 2. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by simp"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "case False"], ["proof (state)\nthis:\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n", "have \"valid_SDG_node n''\""], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n\ngoal (1 subgoal):\n 1. valid_SDG_node n''", "by(rule sum_SDG_edge_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from this False"], ["proof (chain)\npicking this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)", "obtain ns \n        where \"CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  valid_SDG_node n''\n  parent_node n'' \\<noteq> (_Exit_)\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n'' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule Entry_cc_SDG_path_to_inner_node)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "hence \"CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) cc-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''", "by(rule cc_SDG_path_ics_SDG_path)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "with \\<open>n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\\<close>"], ["proof (chain)\npicking this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''", "have \"CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\""], ["proof (prove)\nusing this:\n  n'' s-p\\<rightarrow>\\<^bsub>sum\\<^esub> n\n  CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n''\n\ngoal (1 subgoal):\n 1. CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n", "by -(rule icsSp_Append_sum)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>valid_node (parent_node n'');\n     parent_node n'' \\<noteq> (_Exit_)\\<rbrakk>\n    \\<Longrightarrow> n'' = n' \\<or>\n                      (\\<exists>ns.\n                          CFG_node\n                           (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n                          n'' \\<in> set ns)", "from \\<open>n = n' \\<or> (\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns)\\<close>"], ["proof (chain)\npicking this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"n = n'\""], ["proof (state)\nthis:\n  n = n'\n\ngoal (2 subgoals):\n 1. n = n' \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)\n 2. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  n = n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by fastforce"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "assume \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns", "obtain nsx where \"CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\" and \"n \\<in> set nsx\""], ["proof (prove)\nusing this:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        \\<lbrakk>CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n';\n         n \\<in> set nsx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "then"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx", "obtain ns' ns'' where \"nsx = ns'@ns''\" and \"n ics-ns''\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-nsx\\<rightarrow>\\<^sub>d* n'\n  n \\<in> set nsx\n\ngoal (1 subgoal):\n 1. (\\<And>ns' ns''.\n        \\<lbrakk>nsx = ns' @ ns'';\n         n ics-ns''\\<rightarrow>\\<^sub>d* n'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by -(erule ics_SDG_path_split)"], ["proof (state)\nthis:\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns \\<Longrightarrow>\n    n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "with \\<open>CFG_node (_Entry_) ics-ns@[n'']\\<rightarrow>\\<^sub>d* n\\<close>"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'", "show ?thesis"], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-ns @ [n'']\\<rightarrow>\\<^sub>d* n\n  nsx = ns' @ ns''\n  n ics-ns''\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. n'' = n' \\<or>\n    (\\<exists>ns.\n        CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n        n'' \\<in> set ns)", "by(fastforce intro:ics_SDG_path_Append)"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n'' = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n'' \\<in> set ns)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns", "with \\<open>n \\<noteq> n'\\<close>"], ["proof (chain)\npicking this:\n  n \\<noteq> n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)", "show \"\\<exists>ns. CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and> n \\<in> set ns\""], ["proof (prove)\nusing this:\n  n \\<noteq> n'\n  n = n' \\<or>\n  (\\<exists>ns.\n      CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n      n \\<in> set ns)\n\ngoal (1 subgoal):\n 1. \\<exists>ns.\n       CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n       n \\<in> set ns", "by simp"], ["proof (state)\nthis:\n  \\<exists>ns.\n     CFG_node (_Entry_) ics-ns\\<rightarrow>\\<^sub>d* n' \\<and>\n     n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma slice2_irs_SDG_path:\n  assumes \"n \\<in> sum_SDG_slice2 n'\" and \"valid_SDG_node n'\"\n  obtains ns where \"n irs-ns\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        n irs-ns\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice2 n'\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        n irs-ns\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(induct rule:sum_SDG_slice2.induct,auto intro:intra_return_sum_SDG_path.intros)"], ["", "theorem HRB_slice_realizable:\n  assumes \"n \\<in> HRB_slice S\" and \"\\<forall>n' \\<in> S. valid_SDG_node n'\" and \"n \\<notin> S\"\n  obtains n' ns where \"n' \\<in> S\" and \"realizable (CFG_node (_Entry_)) ns n'\" \n  and \"n \\<in> set ns\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n' ns.\n        \\<lbrakk>n' \\<in> S; realizable (CFG_node (_Entry_)) ns n';\n         n \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "from \\<open>n \\<in> HRB_slice S\\<close> \\<open>n \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> HRB_slice S\n  n \\<notin> S", "show \"\\<exists>n' ns. n' \\<in> S \\<and> realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\""], ["proof (prove)\nusing this:\n  n \\<in> HRB_slice S\n  n \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "proof(induct rule:HRB_slice_cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "case (phase1 n nx)"], ["proof (state)\nthis:\n  n \\<in> sum_SDG_slice1 nx\n  nx \\<in> S\n  n \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n nx.\n       \\<lbrakk>n \\<in> sum_SDG_slice1 nx; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns\n 2. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "with \\<open>n \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<notin> S\n  n \\<in> sum_SDG_slice1 nx\n  nx \\<in> S\n  n \\<notin> S", "show ?case"], ["proof (prove)\nusing this:\n  n \\<notin> S\n  n \\<in> sum_SDG_slice1 nx\n  nx \\<in> S\n  n \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "by(fastforce elim:slice1_ics_SDG_path ics_SDG_path_realizable)"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "case (phase2 n' nx n'' p n)"], ["proof (state)\nthis:\n  nx \\<in> sum_SDG_slice1 n'\n  n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node nx)\n  n \\<in> sum_SDG_slice2 nx\n  n' \\<in> S\n  n \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "from \\<open>\\<forall>n' \\<in> S. valid_SDG_node n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  Ball S valid_SDG_node\n  n' \\<in> S", "have \"valid_SDG_node n'\""], ["proof (prove)\nusing this:\n  Ball S valid_SDG_node\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. valid_SDG_node n'", "by simp"], ["proof (state)\nthis:\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "with \\<open>nx \\<in> sum_SDG_slice1 n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> sum_SDG_slice1 n'\n  valid_SDG_node n'", "have \"valid_SDG_node nx\""], ["proof (prove)\nusing this:\n  nx \\<in> sum_SDG_slice1 n'\n  valid_SDG_node n'\n\ngoal (1 subgoal):\n 1. valid_SDG_node nx", "by(auto elim:slice1_ics_SDG_path ics_SDG_path_split \n              intro:ics_SDG_path_valid_SDG_node)"], ["proof (state)\nthis:\n  valid_SDG_node nx\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "with \\<open>n \\<in> sum_SDG_slice2 nx\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> sum_SDG_slice2 nx\n  valid_SDG_node nx", "obtain nsx where \"n irs-nsx\\<rightarrow>\\<^sub>d* nx\""], ["proof (prove)\nusing this:\n  n \\<in> sum_SDG_slice2 nx\n  valid_SDG_node nx\n\ngoal (1 subgoal):\n 1. (\\<And>nsx.\n        n irs-nsx\\<rightarrow>\\<^sub>d* nx \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule slice2_irs_SDG_path)"], ["proof (state)\nthis:\n  n irs-nsx\\<rightarrow>\\<^sub>d* nx\n\ngoal (1 subgoal):\n 1. \\<And>nx n' n'' p n.\n       \\<lbrakk>n' \\<in> sum_SDG_slice1 nx;\n        n'' s-p\\<rightarrow>\\<^bsub>ret\\<^esub> CFG_node (parent_node n');\n        n \\<in> sum_SDG_slice2 n'; nx \\<in> S; n \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>n' ns.\n                            n' \\<in> S \\<and>\n                            realizable (CFG_node (_Entry_)) ns n' \\<and>\n                            n \\<in> set ns", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "proof(cases \"n = nx\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. n \\<noteq> nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "case True"], ["proof (state)\nthis:\n  n = nx\n\ngoal (2 subgoals):\n 1. n = nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. n \\<noteq> nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "proof(cases \"nx = n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nx = n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "case True"], ["proof (state)\nthis:\n  nx = n'\n\ngoal (2 subgoals):\n 1. nx = n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>n = nx\\<close> \\<open>n \\<notin> S\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n = nx\n  n \\<notin> S\n  n' \\<in> S\n  nx = n'", "have False"], ["proof (prove)\nusing this:\n  n = nx\n  n \\<notin> S\n  n' \\<in> S\n  nx = n'\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. nx = n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "by simp"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "case False"], ["proof (state)\nthis:\n  nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>nx \\<in> sum_SDG_slice1 n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> sum_SDG_slice1 n'\n  nx \\<noteq> n'", "obtain ns \n          where \"realizable (CFG_node (_Entry_)) ns n'\" and \"nx \\<in> set ns\""], ["proof (prove)\nusing this:\n  nx \\<in> sum_SDG_slice1 n'\n  nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>realizable (CFG_node (_Entry_)) ns n';\n         nx \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:slice1_ics_SDG_path ics_SDG_path_realizable)"], ["proof (state)\nthis:\n  realizable (CFG_node (_Entry_)) ns n'\n  nx \\<in> set ns\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>n = nx\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n = nx\n  n' \\<in> S\n  realizable (CFG_node (_Entry_)) ns n'\n  nx \\<in> set ns", "show ?thesis"], ["proof (prove)\nusing this:\n  n = nx\n  n' \\<in> S\n  realizable (CFG_node (_Entry_)) ns n'\n  nx \\<in> set ns\n\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "by blast"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal (1 subgoal):\n 1. n \\<noteq> nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "case False"], ["proof (state)\nthis:\n  n \\<noteq> nx\n\ngoal (1 subgoal):\n 1. n \\<noteq> nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>n irs-nsx\\<rightarrow>\\<^sub>d* nx\\<close>"], ["proof (chain)\npicking this:\n  n irs-nsx\\<rightarrow>\\<^sub>d* nx\n  n \\<noteq> nx", "obtain ns\n        where \"realizable (CFG_node (_Entry_)) ns nx\" and \"n \\<in> set ns\""], ["proof (prove)\nusing this:\n  n irs-nsx\\<rightarrow>\\<^sub>d* nx\n  n \\<noteq> nx\n\ngoal (1 subgoal):\n 1. (\\<And>ns.\n        \\<lbrakk>realizable (CFG_node (_Entry_)) ns nx;\n         n \\<in> set ns\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule irs_SDG_path_realizable)"], ["proof (state)\nthis:\n  realizable (CFG_node (_Entry_)) ns nx\n  n \\<in> set ns\n\ngoal (1 subgoal):\n 1. n \\<noteq> nx \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "proof(cases \"nx = n'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. nx = n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "case True"], ["proof (state)\nthis:\n  nx = n'\n\ngoal (2 subgoals):\n 1. nx = n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n 2. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>realizable (CFG_node (_Entry_)) ns nx\\<close> \\<open>n \\<in> set ns\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  realizable (CFG_node (_Entry_)) ns nx\n  n \\<in> set ns\n  n' \\<in> S\n  nx = n'", "show ?thesis"], ["proof (prove)\nusing this:\n  realizable (CFG_node (_Entry_)) ns nx\n  n \\<in> set ns\n  n' \\<in> S\n  nx = n'\n\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "by blast"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "case False"], ["proof (state)\nthis:\n  nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>nx \\<in> sum_SDG_slice1 n'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> sum_SDG_slice1 n'\n  nx \\<noteq> n'", "obtain nsx'\n          where \"CFG_node (_Entry_) ics-nsx'\\<rightarrow>\\<^sub>d* n'\" and \"nx \\<in> set nsx'\""], ["proof (prove)\nusing this:\n  nx \\<in> sum_SDG_slice1 n'\n  nx \\<noteq> n'\n\ngoal (1 subgoal):\n 1. (\\<And>nsx'.\n        \\<lbrakk>CFG_node (_Entry_) ics-nsx'\\<rightarrow>\\<^sub>d* n';\n         nx \\<in> set nsx'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule slice1_ics_SDG_path)"], ["proof (state)\nthis:\n  CFG_node (_Entry_) ics-nsx'\\<rightarrow>\\<^sub>d* n'\n  nx \\<in> set nsx'\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "then"], ["proof (chain)\npicking this:\n  CFG_node (_Entry_) ics-nsx'\\<rightarrow>\\<^sub>d* n'\n  nx \\<in> set nsx'", "obtain ns' where \"nx ics-ns'\\<rightarrow>\\<^sub>d* n'\""], ["proof (prove)\nusing this:\n  CFG_node (_Entry_) ics-nsx'\\<rightarrow>\\<^sub>d* n'\n  nx \\<in> set nsx'\n\ngoal (1 subgoal):\n 1. (\\<And>ns'.\n        nx ics-ns'\\<rightarrow>\\<^sub>d* n' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by -(erule ics_SDG_path_split)"], ["proof (state)\nthis:\n  nx ics-ns'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>realizable (CFG_node (_Entry_)) ns nx\\<close>"], ["proof (chain)\npicking this:\n  realizable (CFG_node (_Entry_)) ns nx\n  nx ics-ns'\\<rightarrow>\\<^sub>d* n'", "obtain ns'' where \"realizable (CFG_node (_Entry_)) (ns@ns'') n'\""], ["proof (prove)\nusing this:\n  realizable (CFG_node (_Entry_)) ns nx\n  nx ics-ns'\\<rightarrow>\\<^sub>d* n'\n\ngoal (1 subgoal):\n 1. (\\<And>ns''.\n        realizable (CFG_node (_Entry_)) (ns @ ns'') n' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(erule realizable_Append_ics_SDG_path)"], ["proof (state)\nthis:\n  realizable (CFG_node (_Entry_)) (ns @ ns'') n'\n\ngoal (1 subgoal):\n 1. nx \\<noteq> n' \\<Longrightarrow>\n    \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "with \\<open>n \\<in> set ns\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> set ns\n  n' \\<in> S\n  realizable (CFG_node (_Entry_)) (ns @ ns'') n'", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> set ns\n  n' \\<in> S\n  realizable (CFG_node (_Entry_)) (ns @ ns'') n'\n\ngoal (1 subgoal):\n 1. \\<exists>n' ns.\n       n' \\<in> S \\<and>\n       realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>n' ns.\n     n' \\<in> S \\<and>\n     realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem HRB_slice_precise:\n  \"\\<lbrakk>\\<forall>n' \\<in> S. valid_SDG_node n'; n \\<notin> S\\<rbrakk> \\<Longrightarrow>\n    n \\<in> HRB_slice S = \n    (\\<exists>n' ns. n' \\<in> S \\<and> realizable (CFG_node (_Entry_)) ns n' \\<and> n \\<in> set ns)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Ball S valid_SDG_node; n \\<notin> S\\<rbrakk>\n    \\<Longrightarrow> (n \\<in> HRB_slice S) =\n                      (\\<exists>n' ns.\n                          n' \\<in> S \\<and>\n                          realizable (CFG_node (_Entry_)) ns n' \\<and>\n                          n \\<in> set ns)", "by(fastforce elim:HRB_slice_realizable intro:in_realizable_in_HRB_slice)"], ["", "end"], ["", "end"]]}