{"file_name": "/home/qj213/afp-2021-10-22/thys/HRB-Slicing/StaticInter/Observable.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/HRB-Slicing", "problem_names": ["lemma obs_intraE:\n  assumes \"n' \\<in> obs_intra n S\"\n  obtains as where \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\" and \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\" and \"n' \\<in> S\"", "lemma n_in_obs_intra:\n  assumes \"valid_node n\" and \"n \\<in> S\" shows \"obs_intra n S = {n}\"", "lemma in_obs_intra_valid:\n  assumes \"n' \\<in> obs_intra n S\" shows \"valid_node n\" and \"valid_node n'\"", "lemma edge_obs_intra_subset:\n  assumes \"valid_edge a\" and \"intra_kind (kind a)\" and \"sourcenode a \\<notin> S\"\n  shows \"obs_intra (targetnode a) S \\<subseteq> obs_intra (sourcenode a) S\"", "lemma path_obs_intra_subset:\n  assumes \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\" and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> S\"\n  shows \"obs_intra n' S \\<subseteq> obs_intra n S\"", "lemma path_ex_obs_intra:\n  assumes \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\" and \"n' \\<in> S\"\n  obtains m where \"m \\<in> obs_intra n S\"", "lemma obsI:\n  assumes \"n' \\<in> obs_intra n S\"\n  and \"\\<forall>nx \\<in> set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\"\n  shows \"\\<lbrakk>ns = nsx@n#nsx'; \\<forall>xs x xs'. nsx = xs@x#xs' \\<and> obs_intra x S \\<noteq> {}\n     \\<longrightarrow> (\\<exists>x'' \\<in> set (xs'@[n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n  \\<Longrightarrow> n'#nsx' \\<in> obs ns S\"", "lemma obsE [consumes 2]:\n  assumes \"ns' \\<in> obs ns S\" and \"\\<forall>n \\<in> set (tl ns). return_node n\"\n  obtains nsx n nsx' n' where \"ns = nsx@n#nsx'\" and \"ns' = n'#nsx'\" \n  and \"n' \\<in> obs_intra n S\" \n  and \"\\<forall>nx \\<in> set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\"\n  and \"\\<forall>xs x xs'. nsx = xs@x#xs' \\<and> obs_intra x S \\<noteq> {}\n  \\<longrightarrow> (\\<exists>x'' \\<in> set (xs'@[n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\"", "lemma obs_split_det:\n  assumes \"xs@x#xs' = ys@y#ys'\" \n  and \"obs_intra x S \\<noteq> {}\" \n  and \"\\<forall>x' \\<in> set xs'. \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\"\n  and \"\\<forall>zs z zs'. xs = zs@z#zs' \\<and> obs_intra z S \\<noteq> {}\n  \\<longrightarrow> (\\<exists>z'' \\<in> set (zs'@[x]). \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\"\n  and \"obs_intra y S \\<noteq> {}\" \n  and \"\\<forall>y' \\<in> set ys'. \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\"\n  and \"\\<forall>zs z zs'. ys = zs@z#zs' \\<and> obs_intra z S \\<noteq> {}\n  \\<longrightarrow> (\\<exists>z'' \\<in> set (zs'@[y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\"\n  shows \"xs = ys \\<and> x = y \\<and> xs' = ys'\"", "lemma in_obs_valid:\n  assumes \"ns' \\<in> obs ns S\" and \"\\<forall>n \\<in> set ns. valid_node n\"\n  shows \"\\<forall>n \\<in> set ns'. valid_node n\""], "translations": [["", "lemma obs_intraE:\n  assumes \"n' \\<in> obs_intra n S\"\n  obtains as where \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\" and \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\" and \"n' \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>\\<^sub>\\<iota>* n';\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<open>n' \\<in> obs_intra n S\\<close>"], ["proof (prove)\nusing this:\n  n' \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>\\<^sub>\\<iota>* n';\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obs_intra.cases)"], ["", "lemma n_in_obs_intra:\n  assumes \"valid_node n\" and \"n \\<in> S\" shows \"obs_intra n S = {n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "from \\<open>valid_node n\\<close>"], ["proof (chain)\npicking this:\n  valid_node n", "have \"n -[]\\<rightarrow>* n\""], ["proof (prove)\nusing this:\n  valid_node n\n\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>* n", "by(rule empty_path)"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "hence \"n -[]\\<rightarrow>\\<^sub>\\<iota>* n\""], ["proof (prove)\nusing this:\n  n -[]\\<rightarrow>* n\n\ngoal (1 subgoal):\n 1. n -[]\\<rightarrow>\\<^sub>\\<iota>* n", "by(simp add:intra_path_def)"], ["proof (state)\nthis:\n  n -[]\\<rightarrow>\\<^sub>\\<iota>* n\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "with \\<open>n \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> S\n  n -[]\\<rightarrow>\\<^sub>\\<iota>* n", "have \"n \\<in> obs_intra n S\""], ["proof (prove)\nusing this:\n  n \\<in> S\n  n -[]\\<rightarrow>\\<^sub>\\<iota>* n\n\ngoal (1 subgoal):\n 1. n \\<in> obs_intra n S", "by(fastforce elim:obs_intra_elem simp:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "{"], ["proof (state)\nthis:\n  n \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "fix n'"], ["proof (state)\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "assume \"n' \\<in> obs_intra n S\""], ["proof (state)\nthis:\n  n' \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "have \"n' = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n' = n", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "assume \"n' \\<noteq> n\""], ["proof (state)\nthis:\n  n' \\<noteq> n\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "from \\<open>n' \\<in> obs_intra n S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> obs_intra n S", "obtain as where \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\"\n        and \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\"\n        and \"n' \\<in> S\""], ["proof (prove)\nusing this:\n  n' \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>n -as\\<rightarrow>\\<^sub>\\<iota>* n';\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:obs_intra.cases)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n' \\<in> S\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "from \\<open>n -as\\<rightarrow>\\<^sub>\\<iota>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'", "have \"n -as\\<rightarrow>* n'\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n'", "by(simp add:intra_path_def)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n\ngoal (1 subgoal):\n 1. n' \\<noteq> n \\<Longrightarrow> False", "from this \\<open>\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\\<close> \\<open>n' \\<noteq> n\\<close> \\<open>n \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n' \\<noteq> n\n  n \\<in> S", "show False"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n' \\<noteq> n\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. False", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S;\n        n' \\<noteq> n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n   n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n  \\<Longrightarrow> False\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  n' \\<noteq> n\n  n \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S;\n        n' \\<noteq> n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "from \\<open>\\<forall>nx\\<in>set (sourcenodes (a#as)). nx \\<notin> S\\<close> \\<open>sourcenode a = n\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  sourcenode a = n", "have \"n \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  sourcenode a = n\n\ngoal (1 subgoal):\n 1. n \\<notin> S", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  n \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n' \\<noteq> n''; n'' \\<in> S\\<rbrakk>\n        \\<Longrightarrow> False;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S;\n        n' \\<noteq> n; n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "with \\<open>n \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> S\n  n \\<notin> S", "show False"], ["proof (prove)\nusing this:\n  n \\<in> S\n  n \\<notin> S\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n;\n        \\<forall>nx\\<in>set (sourcenodes []). nx \\<notin> S; n \\<noteq> n;\n        n \\<in> S\\<rbrakk>\n       \\<Longrightarrow> False", "qed simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' = n\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "}"], ["proof (state)\nthis:\n  ?n'2 \\<in> obs_intra n S \\<Longrightarrow> ?n'2 = n\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "with \\<open>n \\<in> obs_intra n S\\<close>"], ["proof (chain)\npicking this:\n  n \\<in> obs_intra n S\n  ?n'2 \\<in> obs_intra n S \\<Longrightarrow> ?n'2 = n", "show ?thesis"], ["proof (prove)\nusing this:\n  n \\<in> obs_intra n S\n  ?n'2 \\<in> obs_intra n S \\<Longrightarrow> ?n'2 = n\n\ngoal (1 subgoal):\n 1. obs_intra n S = {n}", "by fastforce"], ["proof (state)\nthis:\n  obs_intra n S = {n}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_obs_intra_valid:\n  assumes \"n' \\<in> obs_intra n S\" shows \"valid_node n\" and \"valid_node n'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "using \\<open>n' \\<in> obs_intra n S\\<close>"], ["proof (prove)\nusing this:\n  n' \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. valid_node n &&& valid_node n'", "by(auto elim!:obs_intraE intro:path_valid_node simp:intra_path_def)"], ["", "lemma edge_obs_intra_subset:\n  assumes \"valid_edge a\" and \"intra_kind (kind a)\" and \"sourcenode a \\<notin> S\"\n  shows \"obs_intra (targetnode a) S \\<subseteq> obs_intra (sourcenode a) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_intra (targetnode a) S \\<subseteq> obs_intra (sourcenode a) S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "assume \"n \\<in> obs_intra (targetnode a) S\""], ["proof (state)\nthis:\n  n \\<in> obs_intra (targetnode a) S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "then"], ["proof (chain)\npicking this:\n  n \\<in> obs_intra (targetnode a) S", "obtain as where \"targetnode a -as\\<rightarrow>\\<^sub>\\<iota>* n\" \n    and all:\"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\" and \"n \\<in> S\""], ["proof (prove)\nusing this:\n  n \\<in> obs_intra (targetnode a) S\n\ngoal (1 subgoal):\n 1. (\\<And>as.\n        \\<lbrakk>targetnode a -as\\<rightarrow>\\<^sub>\\<iota>* n;\n         \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S;\n         n \\<in> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(erule obs_intraE)"], ["proof (state)\nthis:\n  targetnode a -as\\<rightarrow>\\<^sub>\\<iota>* n\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "from \\<open>valid_edge a\\<close> \\<open>intra_kind (kind a)\\<close> \\<open>targetnode a -as\\<rightarrow>\\<^sub>\\<iota>* n\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  intra_kind (kind a)\n  targetnode a -as\\<rightarrow>\\<^sub>\\<iota>* n", "have \"sourcenode a -[a]@as\\<rightarrow>\\<^sub>\\<iota>* n\""], ["proof (prove)\nusing this:\n  valid_edge a\n  intra_kind (kind a)\n  targetnode a -as\\<rightarrow>\\<^sub>\\<iota>* n\n\ngoal (1 subgoal):\n 1. sourcenode a -[a] @ as\\<rightarrow>\\<^sub>\\<iota>* n", "by(fastforce intro:Cons_path simp:intra_path_def)"], ["proof (state)\nthis:\n  sourcenode a -[a] @ as\\<rightarrow>\\<^sub>\\<iota>* n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "moreover"], ["proof (state)\nthis:\n  sourcenode a -[a] @ as\\<rightarrow>\\<^sub>\\<iota>* n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "from all \\<open>sourcenode a \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  sourcenode a \\<notin> S", "have \"\\<forall>nx \\<in> set(sourcenodes (a#as)). nx \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n  sourcenode a \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S", "by(simp add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> obs_intra (targetnode a) S \\<Longrightarrow>\n       x \\<in> obs_intra (sourcenode a) S", "ultimately"], ["proof (chain)\npicking this:\n  sourcenode a -[a] @ as\\<rightarrow>\\<^sub>\\<iota>* n\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S", "show \"n \\<in> obs_intra (sourcenode a) S\""], ["proof (prove)\nusing this:\n  sourcenode a -[a] @ as\\<rightarrow>\\<^sub>\\<iota>* n\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n\ngoal (1 subgoal):\n 1. n \\<in> obs_intra (sourcenode a) S", "using \\<open>n \\<in> S\\<close>"], ["proof (prove)\nusing this:\n  sourcenode a -[a] @ as\\<rightarrow>\\<^sub>\\<iota>* n\n  \\<forall>nx\\<in>set (sourcenodes (a # as)). nx \\<notin> S\n  n \\<in> S\n\ngoal (1 subgoal):\n 1. n \\<in> obs_intra (sourcenode a) S", "by(fastforce intro:obs_intra_elem)"], ["proof (state)\nthis:\n  n \\<in> obs_intra (sourcenode a) S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_obs_intra_subset:\n  assumes \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\" and \"\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> S\"\n  shows \"obs_intra n' S \\<subseteq> obs_intra n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_intra n' S \\<subseteq> obs_intra n S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. obs_intra n' S \\<subseteq> obs_intra n S", "from \\<open>n -as\\<rightarrow>\\<^sub>\\<iota>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'", "have \"n -as\\<rightarrow>* n'\" and \"\\<forall>a \\<in> set as. intra_kind (kind a)\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n\ngoal (1 subgoal):\n 1. n -as\\<rightarrow>* n' &&& \\<forall>a\\<in>set as. intra_kind (kind a)", "by(simp_all add:intra_path_def)"], ["proof (state)\nthis:\n  n -as\\<rightarrow>* n'\n  \\<forall>a\\<in>set as. intra_kind (kind a)\n\ngoal (1 subgoal):\n 1. obs_intra n' S \\<subseteq> obs_intra n S", "from this \\<open>\\<forall>n' \\<in> set(sourcenodes as). n' \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>* n'\n  \\<forall>a\\<in>set as. intra_kind (kind a)\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S", "show ?thesis"], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>* n'\n  \\<forall>a\\<in>set as. intra_kind (kind a)\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\n\ngoal (1 subgoal):\n 1. obs_intra n' S \\<subseteq> obs_intra n S", "proof(induct rule:path.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "case (Cons_path n'' as n' a n)"], ["proof (state)\nthis:\n  n'' -as\\<rightarrow>* n'\n  \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S\n  valid_edge a\n  sourcenode a = n\n  targetnode a = n''\n  \\<forall>a\\<in>set (a # as). intra_kind (kind a)\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "note IH = \\<open>\\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a); \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n      \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n   \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n  \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "from \\<open>\\<forall>n'\\<in>set (sourcenodes (a#as)). n' \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S", "have all:\"\\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\" and \"sourcenode a \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S &&&\n    sourcenode a \\<notin> S", "by(simp_all add:sourcenodes_def)"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\n  sourcenode a \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "from \\<open>\\<forall>a \\<in> set (a#as). intra_kind (kind a)\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>a\\<in>set (a # as). intra_kind (kind a)", "have \"intra_kind (kind a)\" and \"\\<forall>a \\<in> set as. intra_kind (kind a)\""], ["proof (prove)\nusing this:\n  \\<forall>a\\<in>set (a # as). intra_kind (kind a)\n\ngoal (1 subgoal):\n 1. intra_kind (kind a) &&& \\<forall>a\\<in>set as. intra_kind (kind a)", "by(simp_all add:intra_path_def)"], ["proof (state)\nthis:\n  intra_kind (kind a)\n  \\<forall>a\\<in>set as. intra_kind (kind a)\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "from IH[OF \\<open>\\<forall>a \\<in> set as. intra_kind (kind a)\\<close> all]"], ["proof (chain)\npicking this:\n  obs_intra n' S \\<subseteq> obs_intra n'' S", "have \"obs_intra n' S \\<subseteq> obs_intra n'' S\""], ["proof (prove)\nusing this:\n  obs_intra n' S \\<subseteq> obs_intra n'' S\n\ngoal (1 subgoal):\n 1. obs_intra n' S \\<subseteq> obs_intra n'' S", "."], ["proof (state)\nthis:\n  obs_intra n' S \\<subseteq> obs_intra n'' S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "from \\<open>valid_edge a\\<close> \\<open>intra_kind (kind a)\\<close> \\<open>targetnode a = n''\\<close>\n      \\<open>sourcenode a = n\\<close> \\<open>sourcenode a \\<notin> S\\<close>"], ["proof (chain)\npicking this:\n  valid_edge a\n  intra_kind (kind a)\n  targetnode a = n''\n  sourcenode a = n\n  sourcenode a \\<notin> S", "have \"obs_intra n'' S \\<subseteq> obs_intra n S\""], ["proof (prove)\nusing this:\n  valid_edge a\n  intra_kind (kind a)\n  targetnode a = n''\n  sourcenode a = n\n  sourcenode a \\<notin> S\n\ngoal (1 subgoal):\n 1. obs_intra n'' S \\<subseteq> obs_intra n S", "by(fastforce dest:edge_obs_intra_subset)"], ["proof (state)\nthis:\n  obs_intra n'' S \\<subseteq> obs_intra n S\n\ngoal (2 subgoals):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S\n 2. \\<And>n'' as n' a n.\n       \\<lbrakk>n'' -as\\<rightarrow>* n';\n        \\<lbrakk>\\<forall>a\\<in>set as. intra_kind (kind a);\n         \\<forall>n'\\<in>set (sourcenodes as). n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n'' S;\n        valid_edge a; sourcenode a = n; targetnode a = n'';\n        \\<forall>a\\<in>set (a # as). intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes (a # as)). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n' S \\<subseteq> obs_intra n S", "with \\<open>obs_intra n' S \\<subseteq> obs_intra n'' S\\<close>"], ["proof (chain)\npicking this:\n  obs_intra n' S \\<subseteq> obs_intra n'' S\n  obs_intra n'' S \\<subseteq> obs_intra n S", "show ?case"], ["proof (prove)\nusing this:\n  obs_intra n' S \\<subseteq> obs_intra n'' S\n  obs_intra n'' S \\<subseteq> obs_intra n S\n\ngoal (1 subgoal):\n 1. obs_intra n' S \\<subseteq> obs_intra n S", "by fastforce"], ["proof (state)\nthis:\n  obs_intra n' S \\<subseteq> obs_intra n S\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<lbrakk>valid_node n; \\<forall>a\\<in>set []. intra_kind (kind a);\n        \\<forall>n'\\<in>set (sourcenodes []). n' \\<notin> S\\<rbrakk>\n       \\<Longrightarrow> obs_intra n S \\<subseteq> obs_intra n S", "qed simp"], ["proof (state)\nthis:\n  obs_intra n' S \\<subseteq> obs_intra n S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma path_ex_obs_intra:\n  assumes \"n -as\\<rightarrow>\\<^sub>\\<iota>* n'\" and \"n' \\<in> S\"\n  obtains m where \"m \\<in> obs_intra n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>m.\n        m \\<in> obs_intra n S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs_intra n S", "show \"\\<exists>m. m \\<in> obs_intra n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs_intra n S", "proof(cases \"\\<forall>nx \\<in> set(sourcenodes as). nx \\<notin> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "case True"], ["proof (state)\nthis:\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "with \\<open>n -as\\<rightarrow>\\<^sub>\\<iota>* n'\\<close> \\<open>n' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n  n' \\<in> S\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S", "have \"n' \\<in> obs_intra n S\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n  n' \\<in> S\n  \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S\n\ngoal (1 subgoal):\n 1. n' \\<in> obs_intra n S", "by -(rule obs_intra_elem)"], ["proof (state)\nthis:\n  n' \\<in> obs_intra n S\n\ngoal (2 subgoals):\n 1. \\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S\n 2. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "thus ?thesis"], ["proof (prove)\nusing this:\n  n' \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs_intra n S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>m. m \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "hence \"\\<exists>nx \\<in> set(sourcenodes as). nx \\<in> S\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>nx\\<in>set (sourcenodes as). nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "then"], ["proof (chain)\npicking this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S", "obtain nx ns ns' where \"sourcenodes as = ns@nx#ns'\"\n      and \"nx \\<in> S\" and \"\\<forall>n' \\<in> set ns. n' \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<exists>nx\\<in>set (sourcenodes as). nx \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<And>ns nx ns'.\n        \\<lbrakk>sourcenodes as = ns @ nx # ns'; nx \\<in> S;\n         \\<forall>n'\\<in>set ns. n' \\<notin> S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim!:split_list_first_propE)"], ["proof (state)\nthis:\n  sourcenodes as = ns @ nx # ns'\n  nx \\<in> S\n  \\<forall>n'\\<in>set ns. n' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "from \\<open>sourcenodes as = ns@nx#ns'\\<close>"], ["proof (chain)\npicking this:\n  sourcenodes as = ns @ nx # ns'", "obtain as' a as'' \n      where \"ns = sourcenodes as'\"\n      and \"as = as'@a#as''\" and \"sourcenode a = nx\""], ["proof (prove)\nusing this:\n  sourcenodes as = ns @ nx # ns'\n\ngoal (1 subgoal):\n 1. (\\<And>as' a as''.\n        \\<lbrakk>ns = sourcenodes as'; as = as' @ a # as'';\n         sourcenode a = nx\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce elim:map_append_append_maps simp:sourcenodes_def)"], ["proof (state)\nthis:\n  ns = sourcenodes as'\n  as = as' @ a # as''\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "with \\<open>n -as\\<rightarrow>\\<^sub>\\<iota>* n'\\<close>"], ["proof (chain)\npicking this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n  ns = sourcenodes as'\n  as = as' @ a # as''\n  sourcenode a = nx", "have \"n -as'\\<rightarrow>\\<^sub>\\<iota>* nx\""], ["proof (prove)\nusing this:\n  n -as\\<rightarrow>\\<^sub>\\<iota>* n'\n  ns = sourcenodes as'\n  as = as' @ a # as''\n  sourcenode a = nx\n\ngoal (1 subgoal):\n 1. n -as'\\<rightarrow>\\<^sub>\\<iota>* nx", "by(fastforce dest:path_split simp:intra_path_def)"], ["proof (state)\nthis:\n  n -as'\\<rightarrow>\\<^sub>\\<iota>* nx\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "with \\<open>nx \\<in> S\\<close> \\<open>\\<forall>n' \\<in> set ns. n' \\<notin> S\\<close> \\<open>ns = sourcenodes as'\\<close>"], ["proof (chain)\npicking this:\n  nx \\<in> S\n  \\<forall>n'\\<in>set ns. n' \\<notin> S\n  ns = sourcenodes as'\n  n -as'\\<rightarrow>\\<^sub>\\<iota>* nx", "have \"nx \\<in> obs_intra n S\""], ["proof (prove)\nusing this:\n  nx \\<in> S\n  \\<forall>n'\\<in>set ns. n' \\<notin> S\n  ns = sourcenodes as'\n  n -as'\\<rightarrow>\\<^sub>\\<iota>* nx\n\ngoal (1 subgoal):\n 1. nx \\<in> obs_intra n S", "by(fastforce intro:obs_intra_elem)"], ["proof (state)\nthis:\n  nx \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>nx\\<in>set (sourcenodes as).\n               nx \\<notin> S) \\<Longrightarrow>\n    \\<exists>m. m \\<in> obs_intra n S", "thus ?thesis"], ["proof (prove)\nusing this:\n  nx \\<in> obs_intra n S\n\ngoal (1 subgoal):\n 1. \\<exists>m. m \\<in> obs_intra n S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>m. m \\<in> obs_intra n S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m. m \\<in> obs_intra n S\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Interprocedural observable sets restricted to the slice\\<close>"], ["", "fun obs :: \"'node list \\<Rightarrow> 'node set \\<Rightarrow> 'node list set\" \n  where \"obs [] S = {}\"\n  | \"obs (n#ns) S = (let S' = obs_intra n S in \n  (if (S' = {} \\<or> (\\<exists>n' \\<in> set ns. \\<exists>nx. call_of_return_node n' nx \\<and> nx \\<notin> S)) \n   then obs ns S else (\\<lambda>nx. nx#ns) ` S'))\""], ["", "lemma obsI:\n  assumes \"n' \\<in> obs_intra n S\"\n  and \"\\<forall>nx \\<in> set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\"\n  shows \"\\<lbrakk>ns = nsx@n#nsx'; \\<forall>xs x xs'. nsx = xs@x#xs' \\<and> obs_intra x S \\<noteq> {}\n     \\<longrightarrow> (\\<exists>x'' \\<in> set (xs'@[n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n  \\<Longrightarrow> n'#nsx' \\<in> obs ns S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ns = nsx @ n # nsx';\n     \\<forall>xs x xs'.\n        nsx = xs @ x # xs' \\<and>\n        obs_intra x S \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x''\\<in>set (xs' @ [n]).\n            \\<exists>nx.\n               call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n    \\<Longrightarrow> n' # nsx' \\<in> obs ns S", "proof(induct ns arbitrary:nsx)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>nsx.\n       \\<lbrakk>[] = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs [] S\n 2. \\<And>a ns nsx.\n       \\<lbrakk>\\<And>nsx.\n                   \\<lbrakk>ns = nsx @ n # nsx';\n                    \\<forall>xs x xs'.\n                       nsx = xs @ x # xs' \\<and>\n                       obs_intra x S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>x''\\<in>set (xs' @ [n]).\n                           \\<exists>nx.\n                              call_of_return_node x'' nx \\<and>\n                              nx \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> n' # nsx' \\<in> obs ns S;\n        a # ns = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs (a # ns) S", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>xs = ?nsx @ n # nsx';\n   \\<forall>xs x xs'.\n      ?nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>x''\\<in>set (xs' @ [n]).\n          \\<exists>nx.\n             call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n  \\<Longrightarrow> n' # nsx' \\<in> obs xs S\n  x # xs = nsx @ n # nsx'\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (2 subgoals):\n 1. \\<And>nsx.\n       \\<lbrakk>[] = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs [] S\n 2. \\<And>a ns nsx.\n       \\<lbrakk>\\<And>nsx.\n                   \\<lbrakk>ns = nsx @ n # nsx';\n                    \\<forall>xs x xs'.\n                       nsx = xs @ x # xs' \\<and>\n                       obs_intra x S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>x''\\<in>set (xs' @ [n]).\n                           \\<exists>nx.\n                              call_of_return_node x'' nx \\<and>\n                              nx \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> n' # nsx' \\<in> obs ns S;\n        a # ns = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs (a # ns) S", "note IH = \\<open>\\<And>nsx. \\<lbrakk>xs = nsx@n#nsx'; \n    \\<forall>xs x xs'. nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n    (\\<exists>x''\\<in>set (xs'@[n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n    \\<Longrightarrow> n'#nsx' \\<in> obs xs S\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>xs = ?nsx @ n # nsx';\n   \\<forall>xs x xs'.\n      ?nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>x''\\<in>set (xs' @ [n]).\n          \\<exists>nx.\n             call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n  \\<Longrightarrow> n' # nsx' \\<in> obs xs S\n\ngoal (2 subgoals):\n 1. \\<And>nsx.\n       \\<lbrakk>[] = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs [] S\n 2. \\<And>a ns nsx.\n       \\<lbrakk>\\<And>nsx.\n                   \\<lbrakk>ns = nsx @ n # nsx';\n                    \\<forall>xs x xs'.\n                       nsx = xs @ x # xs' \\<and>\n                       obs_intra x S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>x''\\<in>set (xs' @ [n]).\n                           \\<exists>nx.\n                              call_of_return_node x'' nx \\<and>\n                              nx \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> n' # nsx' \\<in> obs ns S;\n        a # ns = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs (a # ns) S", "note nsx = \\<open>\\<forall>xs x xs'. nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n    (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<close>"], ["proof (state)\nthis:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (2 subgoals):\n 1. \\<And>nsx.\n       \\<lbrakk>[] = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs [] S\n 2. \\<And>a ns nsx.\n       \\<lbrakk>\\<And>nsx.\n                   \\<lbrakk>ns = nsx @ n # nsx';\n                    \\<forall>xs x xs'.\n                       nsx = xs @ x # xs' \\<and>\n                       obs_intra x S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>x''\\<in>set (xs' @ [n]).\n                           \\<exists>nx.\n                              call_of_return_node x'' nx \\<and>\n                              nx \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> n' # nsx' \\<in> obs ns S;\n        a # ns = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs (a # ns) S", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' # nsx' \\<in> obs (x # xs) S", "proof(cases nsx)"], ["proof (state)\ngoal (2 subgoals):\n 1. nsx = [] \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S\n 2. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "case Nil"], ["proof (state)\nthis:\n  nsx = []\n\ngoal (2 subgoals):\n 1. nsx = [] \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S\n 2. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "with \\<open>x#xs = nsx@n#nsx'\\<close>"], ["proof (chain)\npicking this:\n  x # xs = nsx @ n # nsx'\n  nsx = []", "have \"n = x\" and \"xs = nsx'\""], ["proof (prove)\nusing this:\n  x # xs = nsx @ n # nsx'\n  nsx = []\n\ngoal (1 subgoal):\n 1. n = x &&& xs = nsx'", "by simp_all"], ["proof (state)\nthis:\n  n = x\n  xs = nsx'\n\ngoal (2 subgoals):\n 1. nsx = [] \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S\n 2. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "with \\<open>n' \\<in> obs_intra n S\\<close>\n      \\<open>\\<forall>nx\\<in>set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  n = x\n  xs = nsx'", "show ?thesis"], ["proof (prove)\nusing this:\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  n = x\n  xs = nsx'\n\ngoal (1 subgoal):\n 1. n' # nsx' \\<in> obs (x # xs) S", "by(fastforce simp:Let_def)"], ["proof (state)\nthis:\n  n' # nsx' \\<in> obs (x # xs) S\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "case (Cons z zs)"], ["proof (state)\nthis:\n  nsx = z # zs\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "with \\<open>x#xs = nsx@n#nsx'\\<close>"], ["proof (chain)\npicking this:\n  x # xs = nsx @ n # nsx'\n  nsx = z # zs", "have [simp]:\"x = z\" \"xs = zs@n#nsx'\""], ["proof (prove)\nusing this:\n  x # xs = nsx @ n # nsx'\n  nsx = z # zs\n\ngoal (1 subgoal):\n 1. x = z &&& xs = zs @ n # nsx'", "by simp_all"], ["proof (state)\nthis:\n  x = z\n  xs = zs @ n # nsx'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "from nsx Cons"], ["proof (chain)\npicking this:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  nsx = z # zs", "have \"\\<forall>xs x xs'. zs = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  nsx = z # zs\n\ngoal (1 subgoal):\n 1. \\<forall>xs x xs'.\n       zs = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n       (\\<exists>x''\\<in>set (xs' @ [n]).\n           \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "by clarsimp(erule_tac x=\"z#xs\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>xs x xs'.\n     zs = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "from IH[OF \\<open>xs = zs@n#nsx'\\<close> this]"], ["proof (chain)\npicking this:\n  n' # nsx' \\<in> obs xs S", "have \"n'#nsx' \\<in> obs xs S\""], ["proof (prove)\nusing this:\n  n' # nsx' \\<in> obs xs S\n\ngoal (1 subgoal):\n 1. n' # nsx' \\<in> obs xs S", "by simp"], ["proof (state)\nthis:\n  n' # nsx' \\<in> obs xs S\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       nsx = a # list \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. n' # nsx' \\<in> obs (x # xs) S", "proof(cases \"obs_intra z S = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs_intra z S = {} \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S\n 2. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "case True"], ["proof (state)\nthis:\n  obs_intra z S = {}\n\ngoal (2 subgoals):\n 1. obs_intra z S = {} \\<Longrightarrow> n' # nsx' \\<in> obs (x # xs) S\n 2. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "with Cons \\<open>n'#nsx' \\<in> obs xs S\\<close>"], ["proof (chain)\npicking this:\n  nsx = z # zs\n  n' # nsx' \\<in> obs xs S\n  obs_intra z S = {}", "show ?thesis"], ["proof (prove)\nusing this:\n  nsx = z # zs\n  n' # nsx' \\<in> obs xs S\n  obs_intra z S = {}\n\ngoal (1 subgoal):\n 1. n' # nsx' \\<in> obs (x # xs) S", "by(simp add:Let_def)"], ["proof (state)\nthis:\n  n' # nsx' \\<in> obs (x # xs) S\n\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "case False"], ["proof (state)\nthis:\n  obs_intra z S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "from nsx Cons"], ["proof (chain)\npicking this:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  nsx = z # zs", "have \"obs_intra z S \\<noteq> {} \\<longrightarrow>\n        (\\<exists>x''\\<in>set (zs @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  nsx = z # zs\n\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<longrightarrow>\n    (\\<exists>x''\\<in>set (zs @ [n]).\n        \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "by clarsimp"], ["proof (state)\nthis:\n  obs_intra z S \\<noteq> {} \\<longrightarrow>\n  (\\<exists>x''\\<in>set (zs @ [n]).\n      \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "with False"], ["proof (chain)\npicking this:\n  obs_intra z S \\<noteq> {}\n  obs_intra z S \\<noteq> {} \\<longrightarrow>\n  (\\<exists>x''\\<in>set (zs @ [n]).\n      \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "have \"\\<exists>x''\\<in>set (zs @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S\""], ["proof (prove)\nusing this:\n  obs_intra z S \\<noteq> {}\n  obs_intra z S \\<noteq> {} \\<longrightarrow>\n  (\\<exists>x''\\<in>set (zs @ [n]).\n      \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>x''\\<in>set (zs @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S", "by simp"], ["proof (state)\nthis:\n  \\<exists>x''\\<in>set (zs @ [n]).\n     \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S\n\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "with \\<open>xs = zs@n#nsx'\\<close>"], ["proof (chain)\npicking this:\n  xs = zs @ n # nsx'\n  \\<exists>x''\\<in>set (zs @ [n]).\n     \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S", "have \"\\<exists>n' \\<in> set xs. \\<exists>nx. call_of_return_node n' nx \\<and> nx \\<notin> S\""], ["proof (prove)\nusing this:\n  xs = zs @ n # nsx'\n  \\<exists>x''\\<in>set (zs @ [n]).\n     \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<in>set xs.\n       \\<exists>nx. call_of_return_node n' nx \\<and> nx \\<notin> S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>n'\\<in>set xs.\n     \\<exists>nx. call_of_return_node n' nx \\<and> nx \\<notin> S\n\ngoal (1 subgoal):\n 1. obs_intra z S \\<noteq> {} \\<Longrightarrow>\n    n' # nsx' \\<in> obs (x # xs) S", "with Cons \\<open>n'#nsx' \\<in> obs xs S\\<close>"], ["proof (chain)\npicking this:\n  nsx = z # zs\n  n' # nsx' \\<in> obs xs S\n  \\<exists>n'\\<in>set xs.\n     \\<exists>nx. call_of_return_node n' nx \\<and> nx \\<notin> S", "show ?thesis"], ["proof (prove)\nusing this:\n  nsx = z # zs\n  n' # nsx' \\<in> obs xs S\n  \\<exists>n'\\<in>set xs.\n     \\<exists>nx. call_of_return_node n' nx \\<and> nx \\<notin> S\n\ngoal (1 subgoal):\n 1. n' # nsx' \\<in> obs (x # xs) S", "by(simp add:Let_def)"], ["proof (state)\nthis:\n  n' # nsx' \\<in> obs (x # xs) S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' # nsx' \\<in> obs (x # xs) S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  n' # nsx' \\<in> obs (x # xs) S\n\ngoal (1 subgoal):\n 1. \\<And>nsx.\n       \\<lbrakk>[] = nsx @ n # nsx';\n        \\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> n' # nsx' \\<in> obs [] S", "qed simp"], ["", "lemma obsE [consumes 2]:\n  assumes \"ns' \\<in> obs ns S\" and \"\\<forall>n \\<in> set (tl ns). return_node n\"\n  obtains nsx n nsx' n' where \"ns = nsx@n#nsx'\" and \"ns' = n'#nsx'\" \n  and \"n' \\<in> obs_intra n S\" \n  and \"\\<forall>nx \\<in> set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\"\n  and \"\\<forall>xs x xs'. nsx = xs@x#xs' \\<and> obs_intra x S \\<noteq> {}\n  \\<longrightarrow> (\\<exists>x'' \\<in> set (xs'@[n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nsx n nsx' n'.\n        \\<lbrakk>ns = nsx @ n # nsx'; ns' = n' # nsx';\n         n' \\<in> obs_intra n S;\n         \\<forall>nx\\<in>set nsx'.\n            \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S;\n         \\<forall>xs x xs'.\n            nsx = xs @ x # xs' \\<and>\n            obs_intra x S \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x''\\<in>set (xs' @ [n]).\n                \\<exists>nx.\n                   call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof(atomize_elim)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       ns = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from \\<open>ns' \\<in> obs ns S\\<close> \\<open>\\<forall>n \\<in> set (tl ns). return_node n\\<close>"], ["proof (chain)\npicking this:\n  ns' \\<in> obs ns S\n  Ball (set (tl ns)) return_node", "show \"\\<exists>nsx n nsx' n'. ns = nsx @ n # nsx' \\<and> ns' = n' # nsx' \\<and>\n    n' \\<in> obs_intra n S \\<and> (\\<forall>nx\\<in>set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n    (\\<forall>xs x xs'. nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n    (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\""], ["proof (prove)\nusing this:\n  ns' \\<in> obs ns S\n  Ball (set (tl ns)) return_node\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       ns = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "proof(induct ns)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>ns' \\<in> obs [] S; Ball (set (tl [])) return_node\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                         [] = nsx @ n # nsx' \\<and>\n                         ns' = n' # nsx' \\<and>\n                         n' \\<in> obs_intra n S \\<and>\n                         (\\<forall>nx\\<in>set nsx'.\n                             \\<exists>nx'.\n                                call_of_return_node nx nx' \\<and>\n                                nx' \\<in> S) \\<and>\n                         (\\<forall>xs x xs'.\n                             nsx = xs @ x # xs' \\<and>\n                             obs_intra x S \\<noteq> {} \\<longrightarrow>\n                             (\\<exists>x''\\<in>set (xs' @ [n]).\n                                 \\<exists>nx.\n                                    call_of_return_node x'' nx \\<and>\n                                    nx \\<notin> S))\n 2. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case Nil"], ["proof (state)\nthis:\n  ns' \\<in> obs [] S\n  Ball (set (tl [])) return_node\n\ngoal (2 subgoals):\n 1. \\<lbrakk>ns' \\<in> obs [] S; Ball (set (tl [])) return_node\\<rbrakk>\n    \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                         [] = nsx @ n # nsx' \\<and>\n                         ns' = n' # nsx' \\<and>\n                         n' \\<in> obs_intra n S \\<and>\n                         (\\<forall>nx\\<in>set nsx'.\n                             \\<exists>nx'.\n                                call_of_return_node nx nx' \\<and>\n                                nx' \\<in> S) \\<and>\n                         (\\<forall>xs x xs'.\n                             nsx = xs @ x # xs' \\<and>\n                             obs_intra x S \\<noteq> {} \\<longrightarrow>\n                             (\\<exists>x''\\<in>set (xs' @ [n]).\n                                 \\<exists>nx.\n                                    call_of_return_node x'' nx \\<and>\n                                    nx \\<notin> S))\n 2. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "thus ?case"], ["proof (prove)\nusing this:\n  ns' \\<in> obs [] S\n  Ball (set (tl [])) return_node\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       [] = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "by simp"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     [] = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case (Cons nx ns'')"], ["proof (state)\nthis:\n  \\<lbrakk>ns' \\<in> obs ns'' S; Ball (set (tl ns'')) return_node\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                       ns'' = nsx @ n # nsx' \\<and>\n                       ns' = n' # nsx' \\<and>\n                       n' \\<in> obs_intra n S \\<and>\n                       (\\<forall>nx\\<in>set nsx'.\n                           \\<exists>nx'.\n                              call_of_return_node nx nx' \\<and>\n                              nx' \\<in> S) \\<and>\n                       (\\<forall>xs x xs'.\n                           nsx = xs @ x # xs' \\<and>\n                           obs_intra x S \\<noteq> {} \\<longrightarrow>\n                           (\\<exists>x''\\<in>set (xs' @ [n]).\n                               \\<exists>nx.\n                                  call_of_return_node x'' nx \\<and>\n                                  nx \\<notin> S))\n  ns' \\<in> obs (nx # ns'') S\n  Ball (set (tl (nx # ns''))) return_node\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "note IH = \\<open>\\<lbrakk>ns' \\<in> obs ns'' S; \\<forall>a\\<in>set (tl ns''). return_node a\\<rbrakk>\n      \\<Longrightarrow> \\<exists>nsx n nsx' n'. ns'' = nsx @ n # nsx' \\<and> ns' = n' # nsx' \\<and>\n      n' \\<in> obs_intra n S \\<and> \n      (\\<forall>nx\\<in>set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n      (\\<forall>xs x xs'. nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>ns' \\<in> obs ns'' S; Ball (set (tl ns'')) return_node\\<rbrakk>\n  \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                       ns'' = nsx @ n # nsx' \\<and>\n                       ns' = n' # nsx' \\<and>\n                       n' \\<in> obs_intra n S \\<and>\n                       (\\<forall>nx\\<in>set nsx'.\n                           \\<exists>nx'.\n                              call_of_return_node nx nx' \\<and>\n                              nx' \\<in> S) \\<and>\n                       (\\<forall>xs x xs'.\n                           nsx = xs @ x # xs' \\<and>\n                           obs_intra x S \\<noteq> {} \\<longrightarrow>\n                           (\\<exists>x''\\<in>set (xs' @ [n]).\n                               \\<exists>nx.\n                                  call_of_return_node x'' nx \\<and>\n                                  nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from \\<open>\\<forall>a\\<in>set (tl (nx # ns'')). return_node a\\<close>"], ["proof (chain)\npicking this:\n  Ball (set (tl (nx # ns''))) return_node", "have \"\\<forall>n \\<in> set ns''. return_node n\""], ["proof (prove)\nusing this:\n  Ball (set (tl (nx # ns''))) return_node\n\ngoal (1 subgoal):\n 1. Ball (set ns'') return_node", "by simp"], ["proof (state)\nthis:\n  Ball (set ns'') return_node\n\ngoal (1 subgoal):\n 1. \\<And>a ns.\n       \\<lbrakk>\\<lbrakk>ns' \\<in> obs ns S;\n                 Ball (set (tl ns)) return_node\\<rbrakk>\n                \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                                     ns = nsx @ n # nsx' \\<and>\n                                     ns' = n' # nsx' \\<and>\n                                     n' \\<in> obs_intra n S \\<and>\n                                     (\\<forall>nx\\<in>set nsx'.\n   \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n                                     (\\<forall>xs x xs'.\n   nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n   (\\<exists>x''\\<in>set (xs' @ [n]).\n       \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S));\n        ns' \\<in> obs (a # ns) S;\n        Ball (set (tl (a # ns))) return_node\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nsx n nsx' n'.\n                            a # ns = nsx @ n # nsx' \\<and>\n                            ns' = n' # nsx' \\<and>\n                            n' \\<in> obs_intra n S \\<and>\n                            (\\<forall>nx\\<in>set nsx'.\n                                \\<exists>nx'.\n                                   call_of_return_node nx nx' \\<and>\n                                   nx' \\<in> S) \\<and>\n                            (\\<forall>xs x xs'.\n                                nsx = xs @ x # xs' \\<and>\n                                obs_intra x S \\<noteq> {} \\<longrightarrow>\n                                (\\<exists>x''\\<in>set (xs' @ [n]).\n                                    \\<exists>nx.\n call_of_return_node x'' nx \\<and> nx \\<notin> S))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "proof(cases ns'')"], ["proof (state)\ngoal (2 subgoals):\n 1. ns'' = [] \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case Nil"], ["proof (state)\nthis:\n  ns'' = []\n\ngoal (2 subgoals):\n 1. ns'' = [] \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>ns' \\<in> obs (nx#ns'') S\\<close>"], ["proof (chain)\npicking this:\n  ns' \\<in> obs (nx # ns'') S\n  ns'' = []", "obtain x where \"ns' = [x]\" and \"x \\<in> obs_intra nx S\""], ["proof (prove)\nusing this:\n  ns' \\<in> obs (nx # ns'') S\n  ns'' = []\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>ns' = [x]; x \\<in> obs_intra nx S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:Let_def split:if_split_asm)"], ["proof (state)\nthis:\n  ns' = [x]\n  x \\<in> obs_intra nx S\n\ngoal (2 subgoals):\n 1. ns'' = [] \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with Nil"], ["proof (chain)\npicking this:\n  ns'' = []\n  ns' = [x]\n  x \\<in> obs_intra nx S", "show ?thesis"], ["proof (prove)\nusing this:\n  ns'' = []\n  ns' = [x]\n  x \\<in> obs_intra nx S\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case Cons"], ["proof (state)\nthis:\n  ns'' = a_ # list_\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>\\<forall>n \\<in> set ns''. return_node n\\<close>"], ["proof (chain)\npicking this:\n  Ball (set ns'') return_node\n  ns'' = a_ # list_", "have \"\\<forall>a\\<in>set (tl ns''). return_node a\""], ["proof (prove)\nusing this:\n  Ball (set ns'') return_node\n  ns'' = a_ # list_\n\ngoal (1 subgoal):\n 1. Ball (set (tl ns'')) return_node", "by simp"], ["proof (state)\nthis:\n  Ball (set (tl ns'')) return_node\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ns'' = a # list \\<Longrightarrow>\n       \\<exists>nsx n nsx' n'.\n          nx # ns'' = nsx @ n # nsx' \\<and>\n          ns' = n' # nsx' \\<and>\n          n' \\<in> obs_intra n S \\<and>\n          (\\<forall>nx\\<in>set nsx'.\n              \\<exists>nx'.\n                 call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n          (\\<forall>xs x xs'.\n              nsx = xs @ x # xs' \\<and>\n              obs_intra x S \\<noteq> {} \\<longrightarrow>\n              (\\<exists>x''\\<in>set (xs' @ [n]).\n                  \\<exists>nx.\n                     call_of_return_node x'' nx \\<and> nx \\<notin> S))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "proof(cases \"\\<exists>n' \\<in> set ns''. \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>n'\\<in>set ns''.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case True"], ["proof (state)\nthis:\n  \\<exists>n'\\<in>set ns''.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<in>set ns''.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>ns' \\<in> obs (nx#ns'') S\\<close>"], ["proof (chain)\npicking this:\n  ns' \\<in> obs (nx # ns'') S\n  \\<exists>n'\\<in>set ns''.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S", "have \"ns' \\<in> obs ns'' S\""], ["proof (prove)\nusing this:\n  ns' \\<in> obs (nx # ns'') S\n  \\<exists>n'\\<in>set ns''.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\n\ngoal (1 subgoal):\n 1. ns' \\<in> obs ns'' S", "by simp"], ["proof (state)\nthis:\n  ns' \\<in> obs ns'' S\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<in>set ns''.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from IH[OF this \\<open>\\<forall>a\\<in>set (tl ns''). return_node a\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>nsx n nsx' n'.\n     ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))", "obtain nsx n nsx' n' where split:\"ns'' = nsx @ n # nsx'\"\n          \"ns' = n' # nsx'\" \"n' \\<in> obs_intra n S\"\n          \"\\<forall>nx\\<in>set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\"\n          and imp:\"\\<forall>xs x xs'. nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n          (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<exists>nsx n nsx' n'.\n     ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. (\\<And>nsx n nsx' n'.\n        \\<lbrakk>ns'' = nsx @ n # nsx'; ns' = n' # nsx';\n         n' \\<in> obs_intra n S;\n         \\<forall>nx\\<in>set nsx'.\n            \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S;\n         \\<forall>xs x xs'.\n            nsx = xs @ x # xs' \\<and>\n            obs_intra x S \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x''\\<in>set (xs' @ [n]).\n                \\<exists>nx.\n                   call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<in>set ns''.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from True \\<open>ns'' = nsx @ n # nsx'\\<close>\n          \\<open>\\<forall>nx\\<in>set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>n'\\<in>set ns''.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\n  ns'' = nsx @ n # nsx'\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S", "have \"(\\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S) \\<or>\n          (\\<exists>n'\\<in>set nsx. \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<exists>n'\\<in>set ns''.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\n  ns'' = nsx @ n # nsx'\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S) \\<or>\n    (\\<exists>n'\\<in>set nsx.\n        \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S)", "by fastforce"], ["proof (state)\nthis:\n  (\\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S) \\<or>\n  (\\<exists>n'\\<in>set nsx.\n      \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S)\n\ngoal (2 subgoals):\n 1. \\<exists>n'\\<in>set ns''.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "thus ?thesis"], ["proof (prove)\nusing this:\n  (\\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S) \\<or>\n  (\\<exists>n'\\<in>set nsx.\n      \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>nx'.\n       call_of_return_node n nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<exists>n'\\<in>set nsx.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "assume \"\\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S\""], ["proof (state)\nthis:\n  \\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S\n\ngoal (2 subgoals):\n 1. \\<exists>nx'.\n       call_of_return_node n nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. \\<exists>n'\\<in>set nsx.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with split"], ["proof (chain)\npicking this:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  \\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S", "show ?thesis"], ["proof (prove)\nusing this:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  \\<exists>nx'. call_of_return_node n nx' \\<and> nx' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "by clarsimp"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<in>set nsx.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>n'\\<in>set nsx.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "assume \"\\<exists>n'\\<in>set nsx. \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\""], ["proof (state)\nthis:\n  \\<exists>n'\\<in>set nsx.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<in>set nsx.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with imp"], ["proof (chain)\npicking this:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  \\<exists>n'\\<in>set nsx.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S", "have \"\\<forall>xs x xs'. nx#nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n          (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  \\<exists>n'\\<in>set nsx.\n     \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>xs x xs'.\n       nx # nsx = xs @ x # xs' \\<and>\n       obs_intra x S \\<noteq> {} \\<longrightarrow>\n       (\\<exists>x''\\<in>set (xs' @ [n]).\n           \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "apply clarsimp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n' nx' xs x xs'.\n       \\<lbrakk>\\<forall>xs x xs'.\n                   nsx = xs @ x # xs' \\<and>\n                   obs_intra x S \\<noteq> {} \\<longrightarrow>\n                   (\\<exists>nx.\n                       call_of_return_node n nx \\<and> nx \\<notin> S) \\<or>\n                   (\\<exists>x''\\<in>set xs'.\n                       \\<exists>nx.\n                          call_of_return_node x'' nx \\<and> nx \\<notin> S);\n        n' \\<in> set nsx; call_of_return_node n' nx'; nx' \\<notin> S;\n        nx # nsx = xs @ x # xs'; obs_intra x S \\<noteq> {};\n        \\<forall>x''\\<in>set xs'.\n           \\<forall>nx.\n              call_of_return_node x'' nx \\<longrightarrow>\n              nx \\<in> S\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx.\n                            call_of_return_node n nx \\<and> nx \\<notin> S", "apply(case_tac xs)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n' nx' xs x xs'.\n       \\<lbrakk>\\<forall>xs x xs'.\n                   nsx = xs @ x # xs' \\<and>\n                   obs_intra x S \\<noteq> {} \\<longrightarrow>\n                   (\\<exists>nx.\n                       call_of_return_node n nx \\<and> nx \\<notin> S) \\<or>\n                   (\\<exists>x''\\<in>set xs'.\n                       \\<exists>nx.\n                          call_of_return_node x'' nx \\<and> nx \\<notin> S);\n        n' \\<in> set nsx; call_of_return_node n' nx'; nx' \\<notin> S;\n        nx # nsx = xs @ x # xs'; obs_intra x S \\<noteq> {};\n        \\<forall>x''\\<in>set xs'.\n           \\<forall>nx.\n              call_of_return_node x'' nx \\<longrightarrow> nx \\<in> S;\n        xs = []\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx.\n                            call_of_return_node n nx \\<and> nx \\<notin> S\n 2. \\<And>n' nx' xs x xs' a list.\n       \\<lbrakk>\\<forall>xs x xs'.\n                   nsx = xs @ x # xs' \\<and>\n                   obs_intra x S \\<noteq> {} \\<longrightarrow>\n                   (\\<exists>nx.\n                       call_of_return_node n nx \\<and> nx \\<notin> S) \\<or>\n                   (\\<exists>x''\\<in>set xs'.\n                       \\<exists>nx.\n                          call_of_return_node x'' nx \\<and> nx \\<notin> S);\n        n' \\<in> set nsx; call_of_return_node n' nx'; nx' \\<notin> S;\n        nx # nsx = xs @ x # xs'; obs_intra x S \\<noteq> {};\n        \\<forall>x''\\<in>set xs'.\n           \\<forall>nx.\n              call_of_return_node x'' nx \\<longrightarrow> nx \\<in> S;\n        xs = a # list\\<rbrakk>\n       \\<Longrightarrow> \\<exists>nx.\n                            call_of_return_node n nx \\<and> nx \\<notin> S", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>nx' x xs' list xa.\n       \\<lbrakk>\\<forall>xs xa xs'a.\n                   list @ x # xs' = xs @ xa # xs'a \\<and>\n                   obs_intra xa S \\<noteq> {} \\<longrightarrow>\n                   (\\<exists>x''\\<in>set xs'a.\n                       \\<exists>nx.\n                          call_of_return_node x'' nx \\<and> nx \\<notin> S);\n        call_of_return_node x nx'; nx' \\<notin> S; nsx = list @ x # xs';\n        \\<forall>x''\\<in>set xs'.\n           \\<forall>nx.\n              call_of_return_node x'' nx \\<longrightarrow> nx \\<in> S;\n        \\<forall>nx. call_of_return_node n nx \\<longrightarrow> nx \\<in> S;\n        xa \\<in> obs_intra x S\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>n' nx' x xs' list xa.\n       \\<lbrakk>\\<forall>xs xa xs'a.\n                   list @ x # xs' = xs @ xa # xs'a \\<and>\n                   obs_intra xa S \\<noteq> {} \\<longrightarrow>\n                   (\\<exists>x''\\<in>set xs'a.\n                       \\<exists>nx.\n                          call_of_return_node x'' nx \\<and> nx \\<notin> S);\n        call_of_return_node n' nx'; nx' \\<notin> S; nsx = list @ x # xs';\n        \\<forall>x''\\<in>set xs'.\n           \\<forall>nx.\n              call_of_return_node x'' nx \\<longrightarrow> nx \\<in> S;\n        \\<forall>nx. call_of_return_node n nx \\<longrightarrow> nx \\<in> S;\n        xa \\<in> obs_intra x S; n' \\<in> set list\\<rbrakk>\n       \\<Longrightarrow> False", "by(erule_tac x=\"list\" in allE,auto)+"], ["proof (state)\nthis:\n  \\<forall>xs x xs'.\n     nx # nsx = xs @ x # xs' \\<and>\n     obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>n'\\<in>set nsx.\n       \\<exists>nx'.\n          call_of_return_node n' nx' \\<and> nx' \\<notin> S \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with split Cons"], ["proof (chain)\npicking this:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  ns'' = a_ # list_\n  \\<forall>xs x xs'.\n     nx # nsx = xs @ x # xs' \\<and>\n     obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "show ?thesis"], ["proof (prove)\nusing this:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  ns'' = a_ # list_\n  \\<forall>xs x xs'.\n     nx # nsx = xs @ x # xs' \\<and>\n     obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "by auto"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<exists>n'\\<in>set ns''.\n             \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "hence \"\\<forall>n'\\<in>set ns''. \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\""], ["proof (prove)\nusing this:\n  \\<not> (\\<exists>n'\\<in>set ns''.\n             \\<exists>nx'. call_of_return_node n' nx' \\<and> nx' \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<forall>n'\\<in>set ns''.\n       \\<forall>nx'.\n          call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S", "by simp"], ["proof (state)\nthis:\n  \\<forall>n'\\<in>set ns''.\n     \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<not> (\\<exists>n'\\<in>set ns''.\n               \\<exists>nx'.\n                  call_of_return_node n' nx' \\<and>\n                  nx' \\<notin> S) \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "proof(cases \"obs_intra nx S = {}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. obs_intra nx S = {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case True"], ["proof (state)\nthis:\n  obs_intra nx S = {}\n\ngoal (2 subgoals):\n 1. obs_intra nx S = {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>ns' \\<in> obs (nx#ns'') S\\<close>"], ["proof (chain)\npicking this:\n  ns' \\<in> obs (nx # ns'') S\n  obs_intra nx S = {}", "have \"ns' \\<in> obs ns'' S\""], ["proof (prove)\nusing this:\n  ns' \\<in> obs (nx # ns'') S\n  obs_intra nx S = {}\n\ngoal (1 subgoal):\n 1. ns' \\<in> obs ns'' S", "by simp"], ["proof (state)\nthis:\n  ns' \\<in> obs ns'' S\n\ngoal (2 subgoals):\n 1. obs_intra nx S = {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from IH[OF this \\<open>\\<forall>a\\<in>set (tl ns''). return_node a\\<close>]"], ["proof (chain)\npicking this:\n  \\<exists>nsx n nsx' n'.\n     ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))", "obtain nsx n nsx' n' where split:\"ns'' = nsx @ n # nsx'\"\n            \"ns' = n' # nsx'\" \"n' \\<in> obs_intra n S\"\n            \"\\<forall>nx\\<in>set nsx'. \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\"\n            and imp:\"\\<forall>xs x xs'. nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<exists>nsx n nsx' n'.\n     ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. (\\<And>nsx n nsx' n'.\n        \\<lbrakk>ns'' = nsx @ n # nsx'; ns' = n' # nsx';\n         n' \\<in> obs_intra n S;\n         \\<forall>nx\\<in>set nsx'.\n            \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S;\n         \\<forall>xs x xs'.\n            nsx = xs @ x # xs' \\<and>\n            obs_intra x S \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x''\\<in>set (xs' @ [n]).\n                \\<exists>nx.\n                   call_of_return_node x'' nx \\<and> nx \\<notin> S)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (2 subgoals):\n 1. obs_intra nx S = {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from True imp Cons"], ["proof (chain)\npicking this:\n  obs_intra nx S = {}\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  ns'' = a_ # list_", "have \"\\<forall>xs x xs'. nx#nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n            (\\<exists>x''\\<in>set (xs' @ [n]). \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  obs_intra nx S = {}\n  \\<forall>xs x xs'.\n     nsx = xs @ x # xs' \\<and> obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n  ns'' = a_ # list_\n\ngoal (1 subgoal):\n 1. \\<forall>xs x xs'.\n       nx # nsx = xs @ x # xs' \\<and>\n       obs_intra x S \\<noteq> {} \\<longrightarrow>\n       (\\<exists>x''\\<in>set (xs' @ [n]).\n           \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "by clarsimp (hypsubst_thin,case_tac xs,clarsimp+,erule_tac x=\"list\" in allE,auto)"], ["proof (state)\nthis:\n  \\<forall>xs x xs'.\n     nx # nsx = xs @ x # xs' \\<and>\n     obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (2 subgoals):\n 1. obs_intra nx S = {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))\n 2. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with split Cons"], ["proof (chain)\npicking this:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  ns'' = a_ # list_\n  \\<forall>xs x xs'.\n     nx # nsx = xs @ x # xs' \\<and>\n     obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)", "show ?thesis"], ["proof (prove)\nusing this:\n  ns'' = nsx @ n # nsx'\n  ns' = n' # nsx'\n  n' \\<in> obs_intra n S\n  \\<forall>nx\\<in>set nsx'.\n     \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S\n  ns'' = a_ # list_\n  \\<forall>xs x xs'.\n     nx # nsx = xs @ x # xs' \\<and>\n     obs_intra x S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>x''\\<in>set (xs' @ [n]).\n         \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "by auto"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "case False"], ["proof (state)\nthis:\n  obs_intra nx S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>\\<forall>n'\\<in>set ns''. \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\\<close>\n            \\<open>ns' \\<in> obs (nx # ns'') S\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>n'\\<in>set ns''.\n     \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\n  ns' \\<in> obs (nx # ns'') S\n  obs_intra nx S \\<noteq> {}", "obtain nx'' where \"ns' = nx''#ns''\" and \"nx'' \\<in> obs_intra nx S\""], ["proof (prove)\nusing this:\n  \\<forall>n'\\<in>set ns''.\n     \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\n  ns' \\<in> obs (nx # ns'') S\n  obs_intra nx S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>nx''.\n        \\<lbrakk>ns' = nx'' # ns''; nx'' \\<in> obs_intra nx S\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(fastforce simp:Let_def split:if_split_asm)"], ["proof (state)\nthis:\n  ns' = nx'' # ns''\n  nx'' \\<in> obs_intra nx S\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "{"], ["proof (state)\nthis:\n  ns' = nx'' # ns''\n  nx'' \\<in> obs_intra nx S\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "fix n'"], ["proof (state)\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "assume \"n'\\<in>set ns''\""], ["proof (state)\nthis:\n  n' \\<in> set ns''\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>\\<forall>n \\<in> set ns''. return_node n\\<close>"], ["proof (chain)\npicking this:\n  Ball (set ns'') return_node\n  n' \\<in> set ns''", "have \"return_node n'\""], ["proof (prove)\nusing this:\n  Ball (set ns'') return_node\n  n' \\<in> set ns''\n\ngoal (1 subgoal):\n 1. return_node n'", "by simp"], ["proof (state)\nthis:\n  return_node n'\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "hence \"\\<exists>!n''. call_of_return_node n' n''\""], ["proof (prove)\nusing this:\n  return_node n'\n\ngoal (1 subgoal):\n 1. \\<exists>!n''. call_of_return_node n' n''", "by(rule return_node_call_of_return_node)"], ["proof (state)\nthis:\n  \\<exists>!n''. call_of_return_node n' n''\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "from \\<open>n'\\<in>set ns''\\<close> \n              \\<open>\\<forall>n'\\<in>set ns''. \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  n' \\<in> set ns''\n  \\<forall>n'\\<in>set ns''.\n     \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S", "have \"\\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\""], ["proof (prove)\nusing this:\n  n' \\<in> set ns''\n  \\<forall>n'\\<in>set ns''.\n     \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S", "by simp"], ["proof (state)\nthis:\n  \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>\\<exists>!n''. call_of_return_node n' n''\\<close>"], ["proof (chain)\npicking this:\n  \\<exists>!n''. call_of_return_node n' n''\n  \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S", "have \"\\<exists>n''. call_of_return_node n' n'' \\<and> n'' \\<in> S\""], ["proof (prove)\nusing this:\n  \\<exists>!n''. call_of_return_node n' n''\n  \\<forall>nx'. call_of_return_node n' nx' \\<longrightarrow> nx' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>n''. call_of_return_node n' n'' \\<and> n'' \\<in> S", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>n''. call_of_return_node n' n'' \\<and> n'' \\<in> S\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "}"], ["proof (state)\nthis:\n  ?n'2 \\<in> set ns'' \\<Longrightarrow>\n  \\<exists>n''. call_of_return_node ?n'2 n'' \\<and> n'' \\<in> S\n\ngoal (1 subgoal):\n 1. obs_intra nx S \\<noteq> {} \\<Longrightarrow>\n    \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "with \\<open>ns' = nx''#ns''\\<close> \\<open>nx'' \\<in> obs_intra nx S\\<close>"], ["proof (chain)\npicking this:\n  ns' = nx'' # ns''\n  nx'' \\<in> obs_intra nx S\n  ?n'2 \\<in> set ns'' \\<Longrightarrow>\n  \\<exists>n''. call_of_return_node ?n'2 n'' \\<and> n'' \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  ns' = nx'' # ns''\n  nx'' \\<in> obs_intra nx S\n  ?n'2 \\<in> set ns'' \\<Longrightarrow>\n  \\<exists>n''. call_of_return_node ?n'2 n'' \\<and> n'' \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>nsx n nsx' n'.\n       nx # ns'' = nsx @ n # nsx' \\<and>\n       ns' = n' # nsx' \\<and>\n       n' \\<in> obs_intra n S \\<and>\n       (\\<forall>nx\\<in>set nsx'.\n           \\<exists>nx'.\n              call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n       (\\<forall>xs x xs'.\n           nsx = xs @ x # xs' \\<and>\n           obs_intra x S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>x''\\<in>set (xs' @ [n]).\n               \\<exists>nx.\n                  call_of_return_node x'' nx \\<and> nx \\<notin> S))", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     nx # ns'' = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>nsx n nsx' n'.\n     ns = nsx @ n # nsx' \\<and>\n     ns' = n' # nsx' \\<and>\n     n' \\<in> obs_intra n S \\<and>\n     (\\<forall>nx\\<in>set nsx'.\n         \\<exists>nx'. call_of_return_node nx nx' \\<and> nx' \\<in> S) \\<and>\n     (\\<forall>xs x xs'.\n         nsx = xs @ x # xs' \\<and>\n         obs_intra x S \\<noteq> {} \\<longrightarrow>\n         (\\<exists>x''\\<in>set (xs' @ [n]).\n             \\<exists>nx. call_of_return_node x'' nx \\<and> nx \\<notin> S))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma obs_split_det:\n  assumes \"xs@x#xs' = ys@y#ys'\" \n  and \"obs_intra x S \\<noteq> {}\" \n  and \"\\<forall>x' \\<in> set xs'. \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\"\n  and \"\\<forall>zs z zs'. xs = zs@z#zs' \\<and> obs_intra z S \\<noteq> {}\n  \\<longrightarrow> (\\<exists>z'' \\<in> set (zs'@[x]). \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\"\n  and \"obs_intra y S \\<noteq> {}\" \n  and \"\\<forall>y' \\<in> set ys'. \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\"\n  and \"\\<forall>zs z zs'. ys = zs@z#zs' \\<and> obs_intra z S \\<noteq> {}\n  \\<longrightarrow> (\\<exists>z'' \\<in> set (zs'@[y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\"\n  shows \"xs = ys \\<and> x = y \\<and> xs' = ys'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xs = ys \\<and> x = y \\<and> xs' = ys'", "using assms"], ["proof (prove)\nusing this:\n  xs @ x # xs' = ys @ y # ys'\n  obs_intra x S \\<noteq> {}\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<forall>zs z zs'.\n     xs = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n  obs_intra y S \\<noteq> {}\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (1 subgoal):\n 1. xs = ys \\<and> x = y \\<and> xs' = ys'", "proof(induct xs arbitrary:ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>[] @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           [] = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "case Nil"], ["proof (state)\nthis:\n  [] @ x # xs' = ys @ y # ys'\n  obs_intra x S \\<noteq> {}\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<forall>zs z zs'.\n     [] = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n  obs_intra y S \\<noteq> {}\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>[] @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           [] = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "note impy = \\<open>\\<forall>zs z zs'. ys = zs@z#zs' \\<and> obs_intra z S \\<noteq> {}\n    \\<longrightarrow> (\\<exists>z'' \\<in> set (zs'@[y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<close>"], ["proof (state)\nthis:\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>[] @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           [] = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. [] = ys \\<and> x = y \\<and> xs' = ys'", "proof(cases \"ys = []\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'\n 2. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "case True"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'\n 2. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "with Nil \\<open>[]@x#xs' = ys@y#ys'\\<close>"], ["proof (chain)\npicking this:\n  [] @ x # xs' = ys @ y # ys'\n  obs_intra x S \\<noteq> {}\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<forall>zs z zs'.\n     [] = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n  obs_intra y S \\<noteq> {}\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n  [] @ x # xs' = ys @ y # ys'\n  ys = []", "show ?thesis"], ["proof (prove)\nusing this:\n  [] @ x # xs' = ys @ y # ys'\n  obs_intra x S \\<noteq> {}\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<forall>zs z zs'.\n     [] = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n  obs_intra y S \\<noteq> {}\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n  [] @ x # xs' = ys @ y # ys'\n  ys = []\n\ngoal (1 subgoal):\n 1. [] = ys \\<and> x = y \\<and> xs' = ys'", "by simp"], ["proof (state)\nthis:\n  [] = ys \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "case False"], ["proof (state)\nthis:\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "with \\<open>[] @ x # xs' = ys @ y # ys'\\<close>"], ["proof (chain)\npicking this:\n  [] @ x # xs' = ys @ y # ys'\n  ys \\<noteq> []", "obtain zs where \"x#zs = ys\" and \"xs' = zs@y#ys'\""], ["proof (prove)\nusing this:\n  [] @ x # xs' = ys @ y # ys'\n  ys \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>zs.\n        \\<lbrakk>x # zs = ys; xs' = zs @ y # ys'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(auto simp:Cons_eq_append_conv)"], ["proof (state)\nthis:\n  x # zs = ys\n  xs' = zs @ y # ys'\n\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "from \\<open>x#zs = ys\\<close> \\<open>obs_intra x S \\<noteq> {}\\<close> impy"], ["proof (chain)\npicking this:\n  x # zs = ys\n  obs_intra x S \\<noteq> {}\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)", "have \"\\<exists>z'' \\<in> set (zs@[y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S\""], ["proof (prove)\nusing this:\n  x # zs = ys\n  obs_intra x S \\<noteq> {}\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>z''\\<in>set (zs @ [y]).\n       \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S", "by blast"], ["proof (state)\nthis:\n  \\<exists>z''\\<in>set (zs @ [y]).\n     \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S\n\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "with \\<open>xs' = zs@y#ys'\\<close> \\<open>\\<forall>x' \\<in> set xs'. \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  xs' = zs @ y # ys'\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<exists>z''\\<in>set (zs @ [y]).\n     \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S", "have False"], ["proof (prove)\nusing this:\n  xs' = zs @ y # ys'\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<exists>z''\\<in>set (zs @ [y]).\n     \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> [] = ys \\<and> x = y \\<and> xs' = ys'", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. [] = ys \\<and> x = y \\<and> xs' = ys'", "by simp"], ["proof (state)\nthis:\n  [] = ys \\<and> x = y \\<and> xs' = ys'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  [] = ys \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "case (Cons w ws)"], ["proof (state)\nthis:\n  \\<lbrakk>ws @ x # xs' = ?ys @ y # ys'; obs_intra x S \\<noteq> {};\n   \\<forall>x'\\<in>set xs'.\n      \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n   \\<forall>zs z zs'.\n      ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [x]).\n          \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S);\n   obs_intra y S \\<noteq> {};\n   \\<forall>y'\\<in>set ys'.\n      \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n   \\<forall>zs z zs'.\n      ?ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [y]).\n          \\<exists>ny.\n             call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n  \\<Longrightarrow> ws = ?ys \\<and> x = y \\<and> xs' = ys'\n  (w # ws) @ x # xs' = ys @ y # ys'\n  obs_intra x S \\<noteq> {}\n  \\<forall>x'\\<in>set xs'.\n     \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\n  \\<forall>zs z zs'.\n     w # ws = zs @ z # zs' \\<and>\n     obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n  obs_intra y S \\<noteq> {}\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "note IH = \\<open>\\<And>ys. \\<lbrakk>ws @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n    \\<forall>x'\\<in>set xs'. \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n    \\<forall>zs z zs'. ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [x]). \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S);\n    obs_intra y S \\<noteq> {}; \\<forall>y'\\<in>set ys'. \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n    \\<forall>zs z zs'. ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>    \n    \\<Longrightarrow> ws = ys \\<and> x = y \\<and> xs' = ys'\\<close>"], ["proof (state)\nthis:\n  \\<lbrakk>ws @ x # xs' = ?ys @ y # ys'; obs_intra x S \\<noteq> {};\n   \\<forall>x'\\<in>set xs'.\n      \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n   \\<forall>zs z zs'.\n      ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [x]).\n          \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S);\n   obs_intra y S \\<noteq> {};\n   \\<forall>y'\\<in>set ys'.\n      \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n   \\<forall>zs z zs'.\n      ?ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [y]).\n          \\<exists>ny.\n             call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n  \\<Longrightarrow> ws = ?ys \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "note impw = \\<open>\\<forall>zs z zs'. w # ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n    (\\<exists>z''\\<in>set (zs' @ [x]). \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\\<close>"], ["proof (state)\nthis:\n  \\<forall>zs z zs'.\n     w # ws = zs @ z # zs' \\<and>\n     obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "note impy = \\<open>\\<forall>zs z zs'. ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n    (\\<exists>z''\\<in>set (zs' @ [y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<close>"], ["proof (state)\nthis:\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<And>a xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>xs @ x # xs' = ys @ y # ys';\n                    obs_intra x S \\<noteq> {};\n                    \\<forall>x'\\<in>set xs'.\n                       \\<exists>x''.\n                          call_of_return_node x' x'' \\<and> x'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       xs = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [x]).\n                           \\<exists>nx.\n                              call_of_return_node z'' nx \\<and>\n                              nx \\<notin> S);\n                    obs_intra y S \\<noteq> {};\n                    \\<forall>y'\\<in>set ys'.\n                       \\<exists>y''.\n                          call_of_return_node y' y'' \\<and> y'' \\<in> S;\n                    \\<forall>zs z zs'.\n                       ys = zs @ z # zs' \\<and>\n                       obs_intra z S \\<noteq> {} \\<longrightarrow>\n                       (\\<exists>z''\\<in>set (zs' @ [y]).\n                           \\<exists>ny.\n                              call_of_return_node z'' ny \\<and>\n                              ny \\<notin> S)\\<rbrakk>\n                   \\<Longrightarrow> xs = ys \\<and> x = y \\<and> xs' = ys';\n        (a # xs) @ x # xs' = ys @ y # ys'; obs_intra x S \\<noteq> {};\n        \\<forall>x'\\<in>set xs'.\n           \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S;\n        \\<forall>zs z zs'.\n           a # xs = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [x]).\n               \\<exists>nx.\n                  call_of_return_node z'' nx \\<and> nx \\<notin> S);\n        obs_intra y S \\<noteq> {};\n        \\<forall>y'\\<in>set ys'.\n           \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S;\n        \\<forall>zs z zs'.\n           ys = zs @ z # zs' \\<and>\n           obs_intra z S \\<noteq> {} \\<longrightarrow>\n           (\\<exists>z''\\<in>set (zs' @ [y]).\n               \\<exists>ny.\n                  call_of_return_node z'' ny \\<and> ny \\<notin> S)\\<rbrakk>\n       \\<Longrightarrow> a # xs = ys \\<and> x = y \\<and> xs' = ys'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. w # ws = ys \\<and> x = y \\<and> xs' = ys'", "proof(cases ys)"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> w # ws = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "case Nil"], ["proof (state)\nthis:\n  ys = []\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> w # ws = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "with \\<open>(w#ws) @ x # xs' = ys @ y # ys'\\<close>"], ["proof (chain)\npicking this:\n  (w # ws) @ x # xs' = ys @ y # ys'\n  ys = []", "have \"y = w\" and \"ys' = ws @ x # xs'\""], ["proof (prove)\nusing this:\n  (w # ws) @ x # xs' = ys @ y # ys'\n  ys = []\n\ngoal (1 subgoal):\n 1. y = w &&& ys' = ws @ x # xs'", "by simp_all"], ["proof (state)\nthis:\n  y = w\n  ys' = ws @ x # xs'\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> w # ws = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "from \\<open>y = w\\<close> \\<open>obs_intra y S \\<noteq> {}\\<close> impw"], ["proof (chain)\npicking this:\n  y = w\n  obs_intra y S \\<noteq> {}\n  \\<forall>zs z zs'.\n     w # ws = zs @ z # zs' \\<and>\n     obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)", "have \"\\<exists>z''\\<in>set (ws @ [x]). \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S\""], ["proof (prove)\nusing this:\n  y = w\n  obs_intra y S \\<noteq> {}\n  \\<forall>zs z zs'.\n     w # ws = zs @ z # zs' \\<and>\n     obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<exists>z''\\<in>set (ws @ [x]).\n       \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S", "by blast"], ["proof (state)\nthis:\n  \\<exists>z''\\<in>set (ws @ [x]).\n     \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> w # ws = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "with \\<open>ys' = ws @ x # xs'\\<close> \n      \\<open>\\<forall>y'\\<in>set ys'. \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  ys' = ws @ x # xs'\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<exists>z''\\<in>set (ws @ [x]).\n     \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S", "have False"], ["proof (prove)\nusing this:\n  ys' = ws @ x # xs'\n  \\<forall>y'\\<in>set ys'.\n     \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\n  \\<exists>z''\\<in>set (ws @ [x]).\n     \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. ys = [] \\<Longrightarrow> w # ws = ys \\<and> x = y \\<and> xs' = ys'\n 2. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. w # ws = ys \\<and> x = y \\<and> xs' = ys'", "by simp"], ["proof (state)\nthis:\n  w # ws = ys \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "case (Cons w' ws')"], ["proof (state)\nthis:\n  ys = w' # ws'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "with \\<open>(w # ws) @ x # xs' = ys @ y # ys'\\<close>"], ["proof (chain)\npicking this:\n  (w # ws) @ x # xs' = ys @ y # ys'\n  ys = w' # ws'", "have \"w = w'\"\n      and \"ws @ x # xs' = ws' @ y # ys'\""], ["proof (prove)\nusing this:\n  (w # ws) @ x # xs' = ys @ y # ys'\n  ys = w' # ws'\n\ngoal (1 subgoal):\n 1. w = w' &&& ws @ x # xs' = ws' @ y # ys'", "by simp_all"], ["proof (state)\nthis:\n  w = w'\n  ws @ x # xs' = ws' @ y # ys'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "from impw"], ["proof (chain)\npicking this:\n  \\<forall>zs z zs'.\n     w # ws = zs @ z # zs' \\<and>\n     obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)", "have imp1:\"\\<forall>zs z zs'. ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [x]). \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\""], ["proof (prove)\nusing this:\n  \\<forall>zs z zs'.\n     w # ws = zs @ z # zs' \\<and>\n     obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<forall>zs z zs'.\n       ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n       (\\<exists>z''\\<in>set (zs' @ [x]).\n           \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)", "by clarsimp(erule_tac x=\"w#zs\" in allE,clarsimp)"], ["proof (state)\nthis:\n  \\<forall>zs z zs'.\n     ws = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [x]).\n         \\<exists>nx. call_of_return_node z'' nx \\<and> nx \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "from Cons impy"], ["proof (chain)\npicking this:\n  ys = w' # ws'\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)", "have imp2:\"\\<forall>zs z zs'. ws' = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n      (\\<exists>z''\\<in>set (zs' @ [y]). \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\""], ["proof (prove)\nusing this:\n  ys = w' # ws'\n  \\<forall>zs z zs'.\n     ys = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<forall>zs z zs'.\n       ws' = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n       (\\<exists>z''\\<in>set (zs' @ [y]).\n           \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)", "by clarsimp(erule_tac x=\"w'#zs\" in allE,clarsimp)"], ["proof (state)\nthis:\n  \\<forall>zs z zs'.\n     ws' = zs @ z # zs' \\<and> obs_intra z S \\<noteq> {} \\<longrightarrow>\n     (\\<exists>z''\\<in>set (zs' @ [y]).\n         \\<exists>ny. call_of_return_node z'' ny \\<and> ny \\<notin> S)\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "from IH[OF \\<open>ws @ x # xs' = ws' @ y # ys'\\<close> \\<open>obs_intra x S \\<noteq> {}\\<close>\n      \\<open>\\<forall>x'\\<in>set xs'. \\<exists>x''. call_of_return_node x' x'' \\<and> x'' \\<in> S\\<close> imp1\n      \\<open>obs_intra y S \\<noteq> {}\\<close> \\<open>\\<forall>y'\\<in>set ys'. \\<exists>y''. call_of_return_node y' y'' \\<and> y'' \\<in> S\\<close> \n      imp2]"], ["proof (chain)\npicking this:\n  ws = ws' \\<and> x = y \\<and> xs' = ys'", "have \"ws = ws' \\<and> x = y \\<and> xs' = ys'\""], ["proof (prove)\nusing this:\n  ws = ws' \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. ws = ws' \\<and> x = y \\<and> xs' = ys'", "."], ["proof (state)\nthis:\n  ws = ws' \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. \\<And>a list.\n       ys = a # list \\<Longrightarrow>\n       w # ws = ys \\<and> x = y \\<and> xs' = ys'", "with \\<open>w = w'\\<close> Cons"], ["proof (chain)\npicking this:\n  w = w'\n  ys = w' # ws'\n  ws = ws' \\<and> x = y \\<and> xs' = ys'", "show ?thesis"], ["proof (prove)\nusing this:\n  w = w'\n  ys = w' # ws'\n  ws = ws' \\<and> x = y \\<and> xs' = ys'\n\ngoal (1 subgoal):\n 1. w # ws = ys \\<and> x = y \\<and> xs' = ys'", "by simp"], ["proof (state)\nthis:\n  w # ws = ys \\<and> x = y \\<and> xs' = ys'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  w # ws = ys \\<and> x = y \\<and> xs' = ys'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_obs_valid:\n  assumes \"ns' \\<in> obs ns S\" and \"\\<forall>n \\<in> set ns. valid_node n\"\n  shows \"\\<forall>n \\<in> set ns'. valid_node n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ball (set ns') valid_node", "using \\<open>ns' \\<in> obs ns S\\<close> \\<open>\\<forall>n \\<in> set ns. valid_node n\\<close>"], ["proof (prove)\nusing this:\n  ns' \\<in> obs ns S\n  Ball (set ns) valid_node\n\ngoal (1 subgoal):\n 1. Ball (set ns') valid_node", "by(induct ns)(auto intro:in_obs_intra_valid simp:Let_def split:if_split_asm)"], ["", "end"], ["", "end"]]}