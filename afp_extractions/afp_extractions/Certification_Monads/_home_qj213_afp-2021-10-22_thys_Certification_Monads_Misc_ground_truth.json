{"file_name": "/home/qj213/afp-2021-10-22/thys/Certification_Monads/Misc.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Certification_Monads", "problem_names": ["lemma span_code [code]:\n  \"span P [] = ([], [])\"\n  \"span P (x # xs) =\n    (if P x then let (ys, zs) = span P xs in (x # ys, zs) else ([], x # xs))\""], "translations": [["", "lemma span_code [code]:\n  \"span P [] = ([], [])\"\n  \"span P (x # xs) =\n    (if P x then let (ys, zs) = span P xs in (x # ys, zs) else ([], x # xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. span P [] = ([], []) &&&\n    span P (x # xs) =\n    (if P x then let (ys, zs) = span P xs in (x # ys, zs) else ([], x # xs))", "by simp_all"], ["", "definition splitter :: \"char list \\<Rightarrow> string \\<Rightarrow> string \\<times> string\"\nwhere\n  [code_unfold]: \"splitter cs s = span (\\<lambda>c. c \\<in> set cs) s\""], ["", "end"]]}