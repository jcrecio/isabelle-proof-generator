{"file_name": "/home/qj213/afp-2021-10-22/thys/Certification_Monads/Strict_Sum.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Certification_Monads", "problem_names": ["lemma bind_cong [fundef_cong]:\n  assumes \"xs = ys\" and \"\\<And>x. ys = Right x \\<Longrightarrow> f x = g x\"\n  shows \"bind xs f = bind ys g\"", "lemma bind_mono [partial_function_mono]:\n  assumes mf: \"mono_sum_bot B\" and mg: \"\\<And>y. mono_sum_bot (\\<lambda>f. C y f)\"\n  shows \"mono_sum_bot (\\<lambda>f. bind (B f) (\\<lambda>y. C y f))\"", "lemma catch_mono [partial_function_mono]:\n  assumes mf: \"mono_sum_bot B\" and mg: \"\\<And>y. mono_sum_bot (\\<lambda>f. C y f)\"\n  shows \"mono_sum_bot (\\<lambda>f. try (B f) catch (\\<lambda>y. C y f))\"", "lemma map_sum_bot_cong [fundef_cong]:\n  assumes \"xs = ys\" and \"\\<And>x. x \\<in> set ys \\<Longrightarrow> f x = g x\"\n  shows \"map_sum_bot f xs = map_sum_bot g ys\"", "lemmas sum_bot_const_mono =\n  sum_bot.const_mono [of \"fun_ord sum_bot_ord\"]", "lemma map_sum_bot_mono [partial_function_mono]:\n  fixes C :: \"'a \\<Rightarrow> ('b \\<Rightarrow> ('e +\\<^sub>\\<bottom> 'c)) \\<Rightarrow> 'e +\\<^sub>\\<bottom> 'd\"\n  assumes \"\\<And>y. y \\<in> set B \\<Longrightarrow> mono_sum_bot (C y)\"\n  shows \"mono_sum_bot (\\<lambda>f. map_sum_bot (\\<lambda>y. C y f) B)\"", "lemma [code]:\n  \"bind (sumbot a) f = (case a of Inl b \\<Rightarrow> sumbot (Inl b) | Inr a \\<Rightarrow> f a)\"", "lemma [code]:\n  \"(try (sumbot a) catch f) = (case a of Inl b \\<Rightarrow> f b | Inr a \\<Rightarrow> sumbot (Inr a))\"", "lemma [code]: \"Right x = sumbot (Inr x)\"", "lemma [code]: \"Left x = sumbot (Inl x)\"", "lemma [code]: \"return x = sumbot (Inr x)\"", "lemma [code]: \"error x = sumbot (Inl x)\"", "lemma [code]:\n  \"case_sum_bot f g h (sumbot p) = case_sum g h p\"", "lemma sum_bot_map_mono [partial_function_mono]:\n  assumes mf: \"mono_sum_bot B\"\n  shows \"mono_sum_bot (\\<lambda>f. sum_bot_map h (B f))\""], "translations": [["", "lemma bind_cong [fundef_cong]:\n  assumes \"xs = ys\" and \"\\<And>x. ys = Right x \\<Longrightarrow> f x = g x\"\n  shows \"bind xs f = bind ys g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Strict_Sum.bind xs f = Strict_Sum.bind ys g", "using assms"], ["proof (prove)\nusing this:\n  xs = ys\n  ys = sum_bot.Right ?x \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. Strict_Sum.bind xs f = Strict_Sum.bind ys g", "by (cases ys) simp_all"], ["", "abbreviation mono_sum_bot :: \"(('a \\<Rightarrow> ('e +\\<^sub>\\<bottom> 'b)) \\<Rightarrow> 'f +\\<^sub>\\<bottom> 'c) \\<Rightarrow> bool\"\nwhere\n  \"mono_sum_bot \\<equiv> monotone (fun_ord sum_bot_ord) sum_bot_ord\""], ["", "(* TODO: perhaps use Partial_Function.bind_mono to proof this result immediately *)"], ["", "lemma bind_mono [partial_function_mono]:\n  assumes mf: \"mono_sum_bot B\" and mg: \"\\<And>y. mono_sum_bot (\\<lambda>f. C y f)\"\n  shows \"mono_sum_bot (\\<lambda>f. bind (B f) (\\<lambda>y. C y f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone sum_bot.le_fun sum_bot_ord\n     (\\<lambda>f. Strict_Sum.bind (B f) (\\<lambda>y. C y f))", "proof (rule monotoneI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "fix f g :: \"'a \\<Rightarrow> 'b +\\<^sub>\\<bottom> 'c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "assume fg: \"fun_ord sum_bot_ord f g\""], ["proof (state)\nthis:\n  sum_bot.le_fun f g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "with mf"], ["proof (chain)\npicking this:\n  monotone sum_bot.le_fun sum_bot_ord B\n  sum_bot.le_fun f g", "have \"sum_bot_ord (B f) (B g)\""], ["proof (prove)\nusing this:\n  monotone sum_bot.le_fun sum_bot_ord B\n  sum_bot.le_fun f g\n\ngoal (1 subgoal):\n 1. sum_bot_ord (B f) (B g)", "by (rule monotoneD [of _ _ _ f g])"], ["proof (state)\nthis:\n  sum_bot_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "then"], ["proof (chain)\npicking this:\n  sum_bot_ord (B f) (B g)", "have \"sum_bot_ord (bind (B f) (\\<lambda>y. C y f)) (bind (B g) (\\<lambda>y. C y f))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n     (Strict_Sum.bind (B g) (\\<lambda>y. C y f))", "unfolding flat_ord_def"], ["proof (prove)\nusing this:\n  B f = Bottom \\<or> B f = B g\n\ngoal (1 subgoal):\n 1. Strict_Sum.bind (B f) (\\<lambda>y. C y f) = Bottom \\<or>\n    Strict_Sum.bind (B f) (\\<lambda>y. C y f) =\n    Strict_Sum.bind (B g) (\\<lambda>y. C y f)", "by auto"], ["proof (state)\nthis:\n  sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n   (Strict_Sum.bind (B g) (\\<lambda>y. C y f))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "also"], ["proof (state)\nthis:\n  sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n   (Strict_Sum.bind (B g) (\\<lambda>y. C y f))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "from mg"], ["proof (chain)\npicking this:\n  monotone sum_bot.le_fun sum_bot_ord (C ?y)", "have \"\\<And>y'. sum_bot_ord (C y' f) (C y' g)\""], ["proof (prove)\nusing this:\n  monotone sum_bot.le_fun sum_bot_ord (C ?y)\n\ngoal (1 subgoal):\n 1. \\<And>y'. sum_bot_ord (C y' f) (C y' g)", "by (rule monotoneD) (rule fg)"], ["proof (state)\nthis:\n  sum_bot_ord (C ?y' f) (C ?y' g)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "then"], ["proof (chain)\npicking this:\n  sum_bot_ord (C ?y' f) (C ?y' g)", "have \"sum_bot_ord (bind (B g) (\\<lambda>y'. C y' f)) (bind (B g) (\\<lambda>y'. C y' g))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (C ?y' f) (C ?y' g)\n\ngoal (1 subgoal):\n 1. sum_bot_ord (Strict_Sum.bind (B g) (\\<lambda>y'. C y' f))\n     (Strict_Sum.bind (B g) (\\<lambda>y'. C y' g))", "unfolding flat_ord_def"], ["proof (prove)\nusing this:\n  C ?y' f = Bottom \\<or> C ?y' f = C ?y' g\n\ngoal (1 subgoal):\n 1. Strict_Sum.bind (B g) (\\<lambda>y'. C y' f) = Bottom \\<or>\n    Strict_Sum.bind (B g) (\\<lambda>y'. C y' f) =\n    Strict_Sum.bind (B g) (\\<lambda>y'. C y' g)", "by (cases \"B g\") auto"], ["proof (state)\nthis:\n  sum_bot_ord (Strict_Sum.bind (B g) (\\<lambda>y'. C y' f))\n   (Strict_Sum.bind (B g) (\\<lambda>y'. C y' g))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (Strict_Sum.bind (B x) (\\<lambda>y. C y x))\n        (Strict_Sum.bind (B y) (\\<lambda>ya. C ya y))", "finally (sum_bot.leq_trans)"], ["proof (chain)\npicking this:\n  sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n   (Strict_Sum.bind (B g) (\\<lambda>y'. C y' g))", "show \"sum_bot_ord (bind (B f) (\\<lambda>y. C y f)) (bind (B g) (\\<lambda>y'. C y' g))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n   (Strict_Sum.bind (B g) (\\<lambda>y'. C y' g))\n\ngoal (1 subgoal):\n 1. sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n     (Strict_Sum.bind (B g) (\\<lambda>y'. C y' g))", "."], ["proof (state)\nthis:\n  sum_bot_ord (Strict_Sum.bind (B f) (\\<lambda>y. C y f))\n   (Strict_Sum.bind (B g) (\\<lambda>y'. C y' g))\n\ngoal:\nNo subgoals!", "qed"], ["", "adhoc_overloading\n  Monad_Syntax.bind bind"], ["", "hide_const (open) bind"], ["", "fun catch_error :: \"'e +\\<^sub>\\<bottom> 'a \\<Rightarrow> ('e \\<Rightarrow> ('f +\\<^sub>\\<bottom> 'a)) \\<Rightarrow> 'f +\\<^sub>\\<bottom> 'a\"\nwhere\n  \"catch_error Bottom f = Bottom \" |\n  \"catch_error (Left a) f = f a\" |\n  \"catch_error (Right a) f = Right a\""], ["", "adhoc_overloading\n  Error_Syntax.catch catch_error"], ["", "lemma catch_mono [partial_function_mono]:\n  assumes mf: \"mono_sum_bot B\" and mg: \"\\<And>y. mono_sum_bot (\\<lambda>f. C y f)\"\n  shows \"mono_sum_bot (\\<lambda>f. try (B f) catch (\\<lambda>y. C y f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone sum_bot.le_fun sum_bot_ord\n     (\\<lambda>f. try B f catch (\\<lambda>y. C y f))", "proof (rule monotoneI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "fix f g :: \"'a \\<Rightarrow> 'b +\\<^sub>\\<bottom> 'c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "assume fg: \"fun_ord sum_bot_ord f g\""], ["proof (state)\nthis:\n  sum_bot.le_fun f g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "with mf"], ["proof (chain)\npicking this:\n  monotone sum_bot.le_fun sum_bot_ord B\n  sum_bot.le_fun f g", "have \"sum_bot_ord (B f) (B g)\""], ["proof (prove)\nusing this:\n  monotone sum_bot.le_fun sum_bot_ord B\n  sum_bot.le_fun f g\n\ngoal (1 subgoal):\n 1. sum_bot_ord (B f) (B g)", "by (rule monotoneD [of _ _ _ f g])"], ["proof (state)\nthis:\n  sum_bot_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "then"], ["proof (chain)\npicking this:\n  sum_bot_ord (B f) (B g)", "have \"sum_bot_ord (try (B f) catch (\\<lambda>y. C y f)) (try (B g) catch (\\<lambda>y. C y f))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n     (try B g catch (\\<lambda>y. C y f))", "unfolding flat_ord_def"], ["proof (prove)\nusing this:\n  B f = Bottom \\<or> B f = B g\n\ngoal (1 subgoal):\n 1. (try B f catch (\\<lambda>y. C y f)) = Bottom \\<or>\n    (try B f catch (\\<lambda>y. C y f)) =\n    (try B g catch (\\<lambda>y. C y f))", "by auto"], ["proof (state)\nthis:\n  sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n   (try B g catch (\\<lambda>y. C y f))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "also"], ["proof (state)\nthis:\n  sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n   (try B g catch (\\<lambda>y. C y f))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "from mg"], ["proof (chain)\npicking this:\n  monotone sum_bot.le_fun sum_bot_ord (C ?y)", "have \"\\<And>y'. sum_bot_ord (C y' f) (C y' g)\""], ["proof (prove)\nusing this:\n  monotone sum_bot.le_fun sum_bot_ord (C ?y)\n\ngoal (1 subgoal):\n 1. \\<And>y'. sum_bot_ord (C y' f) (C y' g)", "by (rule monotoneD) (rule fg)"], ["proof (state)\nthis:\n  sum_bot_ord (C ?y' f) (C ?y' g)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "then"], ["proof (chain)\npicking this:\n  sum_bot_ord (C ?y' f) (C ?y' g)", "have \"sum_bot_ord (try (B g) catch (\\<lambda>y'. C y' f)) (try (B g) catch (\\<lambda>y'. C y' g))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (C ?y' f) (C ?y' g)\n\ngoal (1 subgoal):\n 1. sum_bot_ord (try B g catch (\\<lambda>y'. C y' f))\n     (try B g catch (\\<lambda>y'. C y' g))", "unfolding flat_ord_def"], ["proof (prove)\nusing this:\n  C ?y' f = Bottom \\<or> C ?y' f = C ?y' g\n\ngoal (1 subgoal):\n 1. (try B g catch (\\<lambda>y'. C y' f)) = Bottom \\<or>\n    (try B g catch (\\<lambda>y'. C y' f)) =\n    (try B g catch (\\<lambda>y'. C y' g))", "by (cases \"B g\") auto"], ["proof (state)\nthis:\n  sum_bot_ord (try B g catch (\\<lambda>y'. C y' f))\n   (try B g catch (\\<lambda>y'. C y' g))\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (try B x catch (\\<lambda>y. C y x))\n        (try B y catch (\\<lambda>ya. C ya y))", "finally (sum_bot.leq_trans)"], ["proof (chain)\npicking this:\n  sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n   (try B g catch (\\<lambda>y'. C y' g))", "show \"sum_bot_ord (try (B f) catch (\\<lambda>y. C y f)) (try (B g) catch (\\<lambda>y'. C y' g))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n   (try B g catch (\\<lambda>y'. C y' g))\n\ngoal (1 subgoal):\n 1. sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n     (try B g catch (\\<lambda>y'. C y' g))", "."], ["proof (state)\nthis:\n  sum_bot_ord (try B f catch (\\<lambda>y. C y f))\n   (try B g catch (\\<lambda>y'. C y' g))\n\ngoal:\nNo subgoals!", "qed"], ["", "definition error :: \"'e \\<Rightarrow> 'e +\\<^sub>\\<bottom> 'a\"\nwhere\n  [simp]: \"error x = Left x\""], ["", "definition return :: \"'a \\<Rightarrow> 'e +\\<^sub>\\<bottom> 'a\"\nwhere\n  [simp]: \"return x = Right x\""], ["", "fun map_sum_bot :: \"('a \\<Rightarrow> ('e +\\<^sub>\\<bottom> 'b)) \\<Rightarrow> 'a list \\<Rightarrow> 'e +\\<^sub>\\<bottom> 'b list\"\nwhere\n  \"map_sum_bot f [] = return []\" |\n  \"map_sum_bot f (x#xs) = do {\n    y \\<leftarrow> f x;\n    ys \\<leftarrow> map_sum_bot f xs;\n    return (y # ys)\n  }\""], ["", "lemma map_sum_bot_cong [fundef_cong]:\n  assumes \"xs = ys\" and \"\\<And>x. x \\<in> set ys \\<Longrightarrow> f x = g x\"\n  shows \"map_sum_bot f xs = map_sum_bot g ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map_sum_bot f xs = map_sum_bot g ys", "unfolding assms(1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map_sum_bot f ys = map_sum_bot g ys", "using assms(2)"], ["proof (prove)\nusing this:\n  ?x \\<in> set ys \\<Longrightarrow> f ?x = g ?x\n\ngoal (1 subgoal):\n 1. map_sum_bot f ys = map_sum_bot g ys", "by (induct ys) auto"], ["", "lemmas sum_bot_const_mono =\n  sum_bot.const_mono [of \"fun_ord sum_bot_ord\"]"], ["", "lemma map_sum_bot_mono [partial_function_mono]:\n  fixes C :: \"'a \\<Rightarrow> ('b \\<Rightarrow> ('e +\\<^sub>\\<bottom> 'c)) \\<Rightarrow> 'e +\\<^sub>\\<bottom> 'd\"\n  assumes \"\\<And>y. y \\<in> set B \\<Longrightarrow> mono_sum_bot (C y)\"\n  shows \"mono_sum_bot (\\<lambda>f. map_sum_bot (\\<lambda>y. C y f) B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone sum_bot.le_fun sum_bot_ord\n     (\\<lambda>f. map_sum_bot (\\<lambda>y. C y f) B)", "using assms"], ["proof (prove)\nusing this:\n  ?y \\<in> set B \\<Longrightarrow>\n  monotone sum_bot.le_fun sum_bot_ord (C ?y)\n\ngoal (1 subgoal):\n 1. monotone sum_bot.le_fun sum_bot_ord\n     (\\<lambda>f. map_sum_bot (\\<lambda>y. C y f) B)", "by (induct B) (auto intro!: partial_function_mono)"], ["", "abbreviation update_error :: \"'e +\\<^sub>\\<bottom> 'a \\<Rightarrow> ('e \\<Rightarrow> 'f) \\<Rightarrow> 'f +\\<^sub>\\<bottom> 'a\"\nwhere\n  \"update_error r f \\<equiv> try r catch (\\<lambda> e. error (f e))\""], ["", "adhoc_overloading\n  Error_Syntax.update_error update_error"], ["", "fun sumbot :: \"'e + 'a \\<Rightarrow> 'e +\\<^sub>\\<bottom> 'a\"\nwhere\n  \"sumbot (Inl x) = Left x\" |\n  \"sumbot (Inr x) = Right x\""], ["", "code_datatype sumbot"], ["", "lemma [code]:\n  \"bind (sumbot a) f = (case a of Inl b \\<Rightarrow> sumbot (Inl b) | Inr a \\<Rightarrow> f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sumbot a \\<bind> f =\n    (case a of Inl b \\<Rightarrow> sumbot (Inl b) | Inr a \\<Rightarrow> f a)", "by (cases a) auto"], ["", "lemma [code]:\n  \"(try (sumbot a) catch f) = (case a of Inl b \\<Rightarrow> f b | Inr a \\<Rightarrow> sumbot (Inr a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (try sumbot a catch f) =\n    (case a of Inl b \\<Rightarrow> f b | Inr a \\<Rightarrow> sumbot (Inr a))", "by (cases a) auto"], ["", "lemma [code]: \"Right x = sumbot (Inr x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_bot.Right x = sumbot (Inr x)", "by simp"], ["", "lemma [code]: \"Left x = sumbot (Inl x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_bot.Left x = sumbot (Inl x)", "by simp"], ["", "lemma [code]: \"return x = sumbot (Inr x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. return x = sumbot (Inr x)", "by simp"], ["", "lemma [code]: \"error x = sumbot (Inl x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. error x = sumbot (Inl x)", "by simp"], ["", "lemma [code]:\n  \"case_sum_bot f g h (sumbot p) = case_sum g h p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case sumbot p of Bottom \\<Rightarrow> f\n     | sum_bot.Left x \\<Rightarrow> g x\n     | sum_bot.Right x \\<Rightarrow> h x) =\n    (case p of Inl x \\<Rightarrow> g x | Inr x \\<Rightarrow> h x)", "by (cases p) auto"], ["", "subsection \\<open>Connection to @{theory Partial_Function_MR.Partial_Function_MR}\\<close>"], ["", "lemma sum_bot_map_mono [partial_function_mono]:\n  assumes mf: \"mono_sum_bot B\"\n  shows \"mono_sum_bot (\\<lambda>f. sum_bot_map h (B f))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. monotone sum_bot.le_fun sum_bot_ord (\\<lambda>f. sum_bot_map h (B f))", "proof (rule monotoneI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (sum_bot_map h (B x)) (sum_bot_map h (B y))", "fix f g :: \"'a \\<Rightarrow> 'b +\\<^sub>\\<bottom> 'c\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (sum_bot_map h (B x)) (sum_bot_map h (B y))", "assume fg: \"fun_ord sum_bot_ord f g\""], ["proof (state)\nthis:\n  sum_bot.le_fun f g\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (sum_bot_map h (B x)) (sum_bot_map h (B y))", "with mf"], ["proof (chain)\npicking this:\n  monotone sum_bot.le_fun sum_bot_ord B\n  sum_bot.le_fun f g", "have \"sum_bot_ord (B f) (B g)\""], ["proof (prove)\nusing this:\n  monotone sum_bot.le_fun sum_bot_ord B\n  sum_bot.le_fun f g\n\ngoal (1 subgoal):\n 1. sum_bot_ord (B f) (B g)", "by (rule monotoneD [of _ _ _ f g])"], ["proof (state)\nthis:\n  sum_bot_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       sum_bot.le_fun x y \\<Longrightarrow>\n       sum_bot_ord (sum_bot_map h (B x)) (sum_bot_map h (B y))", "then"], ["proof (chain)\npicking this:\n  sum_bot_ord (B f) (B g)", "show \"sum_bot_ord (sum_bot_map h (B f)) (sum_bot_map h (B g))\""], ["proof (prove)\nusing this:\n  sum_bot_ord (B f) (B g)\n\ngoal (1 subgoal):\n 1. sum_bot_ord (sum_bot_map h (B f)) (sum_bot_map h (B g))", "unfolding flat_ord_def"], ["proof (prove)\nusing this:\n  B f = Bottom \\<or> B f = B g\n\ngoal (1 subgoal):\n 1. sum_bot_map h (B f) = Bottom \\<or>\n    sum_bot_map h (B f) = sum_bot_map h (B g)", "by auto"], ["proof (state)\nthis:\n  sum_bot_ord (sum_bot_map h (B f)) (sum_bot_map h (B g))\n\ngoal:\nNo subgoals!", "qed"], ["", "declaration \\<open>\nPartial_Function_MR.init \n  \"sum_bot\" \n  (fn (mt, t_to_ss, mtT, msT, t_to_sTs) =>\n      list_comb (Const (@{const_name sum_bot_map}, t_to_sTs ---> mtT --> msT), t_to_ss) $ mt)\n  (fn (commonTs, argTs) => Type (@{type_name sum_bot}, commonTs @ argTs))\n  (fn mT => Term.dest_Type mT |> #2 |> (fn [err, res] => ([err], [res]))) \n  @{thms sum_bot.map_comp} \n  @{thms sum_bot.map_ident}\n\\<close>"], ["", "end"]]}