{"file_name": "/home/qj213/afp-2021-10-22/thys/KAT_and_DRA/TwoSorted/DRAT2.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/KAT_and_DRA", "problem_names": ["lemma test_eq [kat_hom]: \"p = q \\<longleftrightarrow> `p = q`\"", "lemma test_iso: \"p \\<le> q \\<Longrightarrow> `p \\<le> q`\"", "lemma test_meet_comm: \"`p \\<cdot> q = q \\<cdot> p`\"", "lemmas test_one_top[simp] = test_iso[OF top_greatest, simplified]", "lemma test_star [simp]: \"`p\\<^sup>\\<star> = 1`\"", "lemmas [kat_hom] = test_star[symmetric]", "lemma test_comp_add1 [simp]: \"`!p + p = 1`\"", "lemma test_comp_add2 [simp]: \"`p + !p = 1`\"", "lemma test_comp_mult1 [simp]: \"`!p \\<cdot> p = 0`\"", "lemma test_comp_mult2 [simp]: \"`p \\<cdot> !p = 0`\"", "lemma test_eq1: \"`y \\<le> x` \\<longleftrightarrow> `p\\<cdot>y \\<le> x` \\<and> `!p\\<cdot>y \\<le> x`\"", "lemma \"`p\\<cdot>x = p\\<cdot>x\\<cdot>q` \\<Longrightarrow> `p\\<cdot>x\\<cdot>!q = 0`\"", "lemma test1: \"`p\\<cdot>x\\<cdot>!q = 0` \\<Longrightarrow> `p\\<cdot>x = p\\<cdot>x\\<cdot>q`\"", "lemma test2: \"`p\\<cdot>q\\<cdot>p = p\\<cdot>q`\"", "lemma test3: \"`p\\<cdot>q\\<cdot>!p = 0`\"", "lemma test4: \"`!p\\<cdot>q\\<cdot>p = 0`\"", "lemma total_correctness: \"`p\\<cdot>x\\<cdot>!q = 0` \\<longleftrightarrow> `x\\<cdot>!q \\<le> !p\\<cdot>\\<top>`\"", "lemma test_iteration_sim: \"`p\\<cdot>x \\<le> x\\<cdot>p` \\<Longrightarrow> `p\\<cdot>x\\<^sup>\\<infinity> \\<le> x\\<^sup>\\<infinity>\\<cdot>p`\"", "lemma test_iteration_annir: \"`!p\\<cdot>(p\\<cdot>x)\\<^sup>\\<infinity> = !p`\""], "translations": [["", "lemma test_eq [kat_hom]: \"p = q \\<longleftrightarrow> `p = q`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p = q) = (\\<iota> p = \\<iota> q)", "by (metis eq_iff test_iso_eq)"], ["", "ML_val \\<open>map (fn thm => thm RS @{thm sym}) (DRAHomRules.get @{context})\\<close>"], ["", "lemma test_iso: \"p \\<le> q \\<Longrightarrow> `p \\<le> q`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<le> q \\<Longrightarrow> \\<iota> p \\<le> \\<iota> q", "by (simp add: test_iso_eq)"], ["", "lemma test_meet_comm: \"`p \\<cdot> q = q \\<cdot> p`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> \\<iota> q = \\<iota> q \\<cdot> \\<iota> p", "by kat_hom (fact inf_commute)"], ["", "lemmas test_one_top[simp] = test_iso[OF top_greatest, simplified]"], ["", "lemma test_star [simp]: \"`p\\<^sup>\\<star> = 1`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p\\<^sup>\\<star> = (1::'b)", "by (metis star_subid test_iso test_top top_greatest)"], ["", "lemmas [kat_hom] = test_star[symmetric]"], ["", "lemma test_comp_add1 [simp]: \"`!p + p = 1`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ! (\\<iota> p) + \\<iota> p = (1::'b)", "by kat_hom (metis compl_sup_top)"], ["", "lemma test_comp_add2 [simp]: \"`p + !p = 1`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p + ! (\\<iota> p) = (1::'b)", "by kat_hom (metis sup_compl_top)"], ["", "lemma test_comp_mult1 [simp]: \"`!p \\<cdot> p = 0`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ! (\\<iota> p) \\<cdot> \\<iota> p = (0::'b)", "by (metis inf.commute inf_compl_bot test_bot test_inf test_not)"], ["", "lemma test_comp_mult2 [simp]: \"`p \\<cdot> !p = 0`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> ! (\\<iota> p) = (0::'b)", "by (metis inf_compl_bot test_bot test_inf test_not)"], ["", "lemma test_eq1: \"`y \\<le> x` \\<longleftrightarrow> `p\\<cdot>y \\<le> x` \\<and> `!p\\<cdot>y \\<le> x`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (y \\<le> x) =\n    (\\<iota> p \\<cdot> y \\<le> x \\<and> ! (\\<iota> p) \\<cdot> y \\<le> x)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. y \\<le> x \\<Longrightarrow>\n    \\<iota> p \\<cdot> y \\<le> x \\<and> ! (\\<iota> p) \\<cdot> y \\<le> x\n 2. \\<iota> p \\<cdot> y \\<le> x \\<and>\n    ! (\\<iota> p) \\<cdot> y \\<le> x \\<Longrightarrow>\n    y \\<le> x", "apply (metis mult_isol_var mult_onel test_not test_one_top)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> y \\<le> x \\<and>\n    ! (\\<iota> p) \\<cdot> y \\<le> x \\<Longrightarrow>\n    y \\<le> x", "apply (subgoal_tac \"`(p + !p)\\<cdot>y \\<le> x`\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<iota> p \\<cdot> y \\<le> x \\<and>\n             ! (\\<iota> p) \\<cdot> y \\<le> x;\n     (\\<iota> p + ! (\\<iota> p)) \\<cdot> y \\<le> x\\<rbrakk>\n    \\<Longrightarrow> y \\<le> x\n 2. \\<iota> p \\<cdot> y \\<le> x \\<and>\n    ! (\\<iota> p) \\<cdot> y \\<le> x \\<Longrightarrow>\n    (\\<iota> p + ! (\\<iota> p)) \\<cdot> y \\<le> x", "apply (metis mult_onel sup_compl_top test_not test_sup test_top)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> y \\<le> x \\<and>\n    ! (\\<iota> p) \\<cdot> y \\<le> x \\<Longrightarrow>\n    (\\<iota> p + ! (\\<iota> p)) \\<cdot> y \\<le> x", "by (metis distrib_right' join.sup.bounded_iff)"], ["", "lemma \"`p\\<cdot>x = p\\<cdot>x\\<cdot>q` \\<Longrightarrow> `p\\<cdot>x\\<cdot>!q = 0`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> x =\n    \\<iota> p \\<cdot> x \\<cdot> \\<iota> q \\<Longrightarrow>\n    \\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b)", "nitpick"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> x =\n    \\<iota> p \\<cdot> x \\<cdot> \\<iota> q \\<Longrightarrow>\n    \\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b)", "oops"], ["", "lemma test1: \"`p\\<cdot>x\\<cdot>!q = 0` \\<Longrightarrow> `p\\<cdot>x = p\\<cdot>x\\<cdot>q`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b) \\<Longrightarrow>\n    \\<iota> p \\<cdot> x = \\<iota> p \\<cdot> x \\<cdot> \\<iota> q", "by (metis add_0_left distrib_left mult_oner test_comp_add1)"], ["", "lemma test2: \"`p\\<cdot>q\\<cdot>p = p\\<cdot>q`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> \\<iota> q \\<cdot> \\<iota> p =\n    \\<iota> p \\<cdot> \\<iota> q", "by (metis inf.commute inf.left_idem test_inf)"], ["", "lemma test3: \"`p\\<cdot>q\\<cdot>!p = 0`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> \\<iota> q \\<cdot> ! (\\<iota> p) = (0::'b)", "by (metis inf.assoc inf.idem inf.left_commute inf_compl_bot test_bot test_inf test_not)"], ["", "lemma test4: \"`!p\\<cdot>q\\<cdot>p = 0`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ! (\\<iota> p) \\<cdot> \\<iota> q \\<cdot> \\<iota> p = (0::'b)", "by (metis double_compl test3 test_not)"], ["", "lemma total_correctness: \"`p\\<cdot>x\\<cdot>!q = 0` \\<longleftrightarrow> `x\\<cdot>!q \\<le> !p\\<cdot>\\<top>`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b)) =\n    (x \\<cdot> ! (\\<iota> q) \\<le> ! (\\<iota> p) \\<cdot> \\<top>)", "apply standard"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b) \\<Longrightarrow>\n    x \\<cdot> ! (\\<iota> q) \\<le> ! (\\<iota> p) \\<cdot> \\<top>\n 2. x \\<cdot> ! (\\<iota> q)\n    \\<le> ! (\\<iota> p) \\<cdot> \\<top> \\<Longrightarrow>\n    \\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b)", "apply (metis join.bot.extremum mult.assoc test_eq1 top_elim)"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<cdot> ! (\\<iota> q)\n    \\<le> ! (\\<iota> p) \\<cdot> \\<top> \\<Longrightarrow>\n    \\<iota> p \\<cdot> x \\<cdot> ! (\\<iota> q) = (0::'b)", "by (metis (no_types, hide_lams) add_zeror annil less_eq_def mult.assoc mult_isol test_comp_mult2)"], ["", "lemma test_iteration_sim: \"`p\\<cdot>x \\<le> x\\<cdot>p` \\<Longrightarrow> `p\\<cdot>x\\<^sup>\\<infinity> \\<le> x\\<^sup>\\<infinity>\\<cdot>p`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<iota> p \\<cdot> x \\<le> x \\<cdot> \\<iota> p \\<Longrightarrow>\n    \\<iota> p \\<cdot> x\\<^sup>\\<infinity>\n    \\<le> x\\<^sup>\\<infinity> \\<cdot> \\<iota> p", "by (metis iteration_sim)"], ["", "lemma test_iteration_annir: \"`!p\\<cdot>(p\\<cdot>x)\\<^sup>\\<infinity> = !p`\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ! (\\<iota> p) \\<cdot> (\\<iota> p \\<cdot> x)\\<^sup>\\<infinity> =\n    ! (\\<iota> p)", "by (metis annil iteration_idep mult.assoc test_comp_mult1)"], ["", "end"], ["", "end"]]}