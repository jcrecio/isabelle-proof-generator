{"file_name": "/home/qj213/afp-2021-10-22/thys/Abstract-Rewriting/SN_Orders.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Abstract-Rewriting", "problem_names": ["lemma max_ge_y[intro]: \"max x y \\<ge> y\"", "lemma max_mono2: \"x \\<ge> y \\<Longrightarrow> max x z \\<ge> max y z\"", "lemma plus_right_mono: \"y \\<ge> (z :: 'a :: ordered_ab_semigroup) \\<Longrightarrow> x + y \\<ge> x + z\"", "lemma gt_trans[trans]: \"\\<lbrakk>x \\<succ> y; y \\<succ> z\\<rbrakk> \\<Longrightarrow> x \\<succ> z\"", "lemma plus_gt_right_mono: \"x \\<succ> y \\<Longrightarrow> a + x \\<succ> a + y\"", "lemma plus_gt_both_mono: \"x \\<succ> y \\<Longrightarrow> a \\<succ> b \\<Longrightarrow> x + a \\<succ> y + b\"", "lemma max0_id: \"max 0 (x :: 'a) = x\"", "lemma pow_mono: assumes ab: \"a \\<ge> b\" and b: \"b \\<ge> 0\"\n  shows \"a ^ n \\<ge> b ^ n \\<and> b ^ n \\<ge> 0\"", "lemma pow_ge_zero[intro]: assumes a: \"a \\<ge> (0 :: 'a)\"\n  shows \"a ^ n \\<ge> 0\"", "lemma of_nat_ge_zero[intro,simp]: \"of_nat n \\<ge> (0 :: 'a :: ordered_semiring_1)\"", "lemma mult_ge_zero[intro]: \"(a :: 'a :: ordered_semiring_1) \\<ge> 0 \\<Longrightarrow> b \\<ge> 0 \\<Longrightarrow> a * b \\<ge> 0\"", "lemma pow_mono_one: assumes a: \"a \\<ge> (1 :: 'a :: ordered_semiring_1)\"\n  shows \"a ^ n \\<ge> 1\"", "lemma pow_mono_exp: assumes a: \"a \\<ge> (1 :: 'a :: ordered_semiring_1)\"\n  shows \"n \\<ge> m \\<Longrightarrow> a ^ n \\<ge> a ^ m\"", "lemma mult_ge_one[intro]: assumes a: \"(a :: 'a :: ordered_semiring_1) \\<ge> 1\"\n  and b: \"b \\<ge> 1\"\n  shows \"a * b \\<ge> 1\"", "lemma sum_list_ge_mono: fixes as :: \"('a :: ordered_semiring_0) list\"\n  assumes \"length as = length bs\"\n  and \"\\<And> i. i < length bs \\<Longrightarrow> as ! i \\<ge> bs ! i\"\n  shows \"sum_list as \\<ge> sum_list bs\"", "lemma sum_list_ge_0_nth: fixes xs :: \"('a :: ordered_semiring_0)list\"\n  assumes ge: \"\\<And> i. i < length xs \\<Longrightarrow> xs ! i \\<ge> 0\"\n  shows \"sum_list xs \\<ge> 0\"", "lemma sum_list_ge_0: fixes xs :: \"('a :: ordered_semiring_0)list\"\n  assumes ge: \"\\<And> x. x \\<in> set xs \\<Longrightarrow> x \\<ge> 0\"\n  shows \"sum_list xs \\<ge> 0\"", "lemma foldr_max: \"a \\<in> set as \\<Longrightarrow> foldr max as b \\<ge> (a :: 'a :: ordered_ab_semigroup)\"", "lemma of_nat_mono[intro]: assumes \"n \\<ge> m\" shows \"(of_nat n :: 'a :: ordered_semiring_1) \\<ge> of_nat m\"", "lemma non_infI[intro]: assumes \"\\<And> a f. \\<lbrakk> \\<And> i. (f i, f (Suc i)) \\<in> r\\<rbrakk> \\<Longrightarrow> \\<exists> i. (f i, a) \\<notin> r\"\n  shows \"non_inf r\"", "lemma non_infE[elim]: assumes \"non_inf r\" and \"\\<And> i. (f i, f (Suc i)) \\<notin> r \\<or> (f i, a) \\<notin> r \\<Longrightarrow> P\"\n  shows P", "lemma non_inf_image: \n  assumes ni: \"non_inf r\" and image: \"\\<And> a b. (a,b) \\<in> s \\<Longrightarrow> (f a, f b) \\<in> r\"\n  shows \"non_inf s\"", "lemma SN_imp_non_inf: \"SN r \\<Longrightarrow> non_inf r\"", "lemma non_inf_imp_SN_bound: \"non_inf r \\<Longrightarrow> SN {(a,b). (b,c) \\<in> r \\<and> (a,b) \\<in> r}\""], "translations": [["", "lemma max_ge_y[intro]: \"max x y \\<ge> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> max x y", "unfolding max_comm[of x y]"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> max y x", ".."], ["", "lemma max_mono2: \"x \\<ge> y \\<Longrightarrow> max x z \\<ge> max y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<Longrightarrow> max y z \\<le> max x z", "unfolding max_comm[of _ z]"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<le> x \\<Longrightarrow> max z y \\<le> max z x", "by (rule max_mono)"], ["", "end"], ["", "class ordered_ab_semigroup = non_strict_order + ab_semigroup_add + monoid_add +\n  assumes plus_left_mono: \"x \\<ge> y \\<Longrightarrow>  x + z \\<ge> y + z\""], ["", "lemma plus_right_mono: \"y \\<ge> (z :: 'a :: ordered_ab_semigroup) \\<Longrightarrow> x + y \\<ge> x + z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<le> y \\<Longrightarrow> x + z \\<le> x + y", "by (simp add: add.commute[of x], rule plus_left_mono, auto)"], ["", "class ordered_semiring_0 = ordered_ab_semigroup + semiring_0 +\n assumes times_left_mono: \"z \\<ge> 0 \\<Longrightarrow> x \\<ge> y \\<Longrightarrow> x * z \\<ge> y * z\"\n     and times_right_mono: \"x \\<ge> 0 \\<Longrightarrow> y \\<ge> z \\<Longrightarrow> x * y \\<ge> x * z\"\n     and times_left_anti_mono: \"x \\<ge> y \\<Longrightarrow> 0 \\<ge> z \\<Longrightarrow> y * z \\<ge> x * z\""], ["", "class ordered_semiring_1 = ordered_semiring_0 + semiring_1 +\n  assumes one_ge_zero: \"1 \\<ge> 0\""], ["", "text \\<open>\n   We do not use a class to define order-pairs of a strict and a weak-order \n   since often we\n   have parametric strict orders, e.g. on rational numbers there are several orders \n   $>$ where $x > y = x \\geq y + \\delta$ for some parameter $\\delta$\n\\<close>"], ["", "locale order_pair = \n  fixes gt :: \"'a :: {non_strict_order,zero} \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<succ>\" 50)\n  and default :: \"'a\"\n  assumes compat[trans]: \"\\<lbrakk>x \\<ge> y; y \\<succ> z\\<rbrakk> \\<Longrightarrow> x \\<succ> z\"\n  and compat2[trans]: \"\\<lbrakk>x \\<succ> y; y \\<ge> z\\<rbrakk> \\<Longrightarrow> x \\<succ> z\"\n  and gt_imp_ge: \"x \\<succ> y \\<Longrightarrow> x \\<ge> y\"\n  and default_ge_zero: \"default \\<ge> 0\"\nbegin"], ["", "lemma gt_trans[trans]: \"\\<lbrakk>x \\<succ> y; y \\<succ> z\\<rbrakk> \\<Longrightarrow> x \\<succ> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<succ> y; y \\<succ> z\\<rbrakk> \\<Longrightarrow> x \\<succ> z", "by (rule compat[OF gt_imp_ge])"], ["", "end"], ["", "locale one_mono_ordered_semiring_1 = order_pair gt \n  for gt :: \"'a :: ordered_semiring_1 \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<succ>\" 50) + \n  assumes plus_gt_left_mono: \"x \\<succ> y \\<Longrightarrow> x + z \\<succ> y + z\"\n  and default_gt_zero: \"default \\<succ> 0\"\nbegin"], ["", "lemma plus_gt_right_mono: \"x \\<succ> y \\<Longrightarrow> a + x \\<succ> a + y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<succ> y \\<Longrightarrow> a + x \\<succ> a + y", "unfolding add.commute[of a]"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<succ> y \\<Longrightarrow> x + a \\<succ> y + a", "by (rule plus_gt_left_mono)"], ["", "lemma plus_gt_both_mono: \"x \\<succ> y \\<Longrightarrow> a \\<succ> b \\<Longrightarrow> x + a \\<succ> y + b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<succ> y; a \\<succ> b\\<rbrakk>\n    \\<Longrightarrow> x + a \\<succ> y + b", "by (rule gt_trans[OF plus_gt_left_mono plus_gt_right_mono])"], ["", "end"], ["", "locale SN_one_mono_ordered_semiring_1 = one_mono_ordered_semiring_1 + order_pair + \n  assumes SN: \"SN {(x,y) . y \\<ge> 0 \\<and> x \\<succ> y}\""], ["", "locale SN_strict_mono_ordered_semiring_1 = SN_one_mono_ordered_semiring_1 +\n  fixes mono :: \"'a :: ordered_semiring_1 \\<Rightarrow> bool\"\n  assumes mono: \"\\<lbrakk>mono x; y \\<succ> z; x \\<ge> 0\\<rbrakk> \\<Longrightarrow> x * y \\<succ> x * z\""], ["", "locale both_mono_ordered_semiring_1 = order_pair gt \n  for gt :: \"'a :: ordered_semiring_1 \\<Rightarrow> 'a \\<Rightarrow> bool\" (infix \"\\<succ>\" 50) +\n  fixes arc_pos :: \"'a \\<Rightarrow> bool\" \n  assumes plus_gt_both_mono: \"\\<lbrakk>x \\<succ> y; z \\<succ> u\\<rbrakk> \\<Longrightarrow> x + z \\<succ> y + u\"\n  and times_gt_left_mono: \"x \\<succ> y \\<Longrightarrow> x * z \\<succ> y * z\" \n  and times_gt_right_mono: \"y \\<succ> z \\<Longrightarrow> x * y \\<succ> x * z\" \n  and zero_leastI: \"x \\<succ> 0\" \n  and zero_leastII: \"0 \\<succ> x \\<Longrightarrow> x = 0\" \n  and zero_leastIII: \"(x :: 'a) \\<ge> 0\"\n  and arc_pos_one: \"arc_pos (1 :: 'a)\"\n  and arc_pos_default: \"arc_pos default\"\n  and arc_pos_zero: \"\\<not> arc_pos 0\"\n  and arc_pos_plus: \"arc_pos x \\<Longrightarrow> arc_pos (x + y)\"\n  and arc_pos_mult: \"\\<lbrakk>arc_pos x; arc_pos y\\<rbrakk> \\<Longrightarrow> arc_pos (x * y)\"\n  and not_all_ge: \"\\<And> c d. arc_pos d \\<Longrightarrow> \\<exists> e. e \\<ge> 0 \\<and> arc_pos e \\<and> \\<not> (c \\<ge> d * e)\"\nbegin"], ["", "lemma max0_id: \"max 0 (x :: 'a) = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. max (0::'a) x = x", "unfolding max_comm[of 0]"], ["proof (prove)\ngoal (1 subgoal):\n 1. max x (0::'a) = x", "by (rule max_id[OF zero_leastIII])"], ["", "end"], ["", "locale SN_both_mono_ordered_semiring_1 = both_mono_ordered_semiring_1 +\n  assumes SN: \"SN {(x,y) . arc_pos y \\<and> x \\<succ> y}\""], ["", "locale weak_SN_strict_mono_ordered_semiring_1 = \n  fixes weak_gt :: \"'a :: ordered_semiring_1 \\<Rightarrow> 'a \\<Rightarrow> bool\"\n   and  default :: \"'a\"\n   and  mono :: \"'a \\<Rightarrow> bool\"\n  assumes weak_gt_mono: \"\\<forall> x y. (x,y) \\<in> set xys \\<longrightarrow> weak_gt x y \\<Longrightarrow> \\<exists> gt. SN_strict_mono_ordered_semiring_1  default gt mono \\<and> (\\<forall> x y. (x,y) \\<in> set xys \\<longrightarrow> gt x y)\""], ["", "locale weak_SN_both_mono_ordered_semiring_1 = \n  fixes weak_gt :: \"'a :: ordered_semiring_1 \\<Rightarrow> 'a \\<Rightarrow> bool\"\n   and  default :: \"'a\"\n   and  arc_pos :: \"'a \\<Rightarrow> bool\"\n  assumes weak_gt_both_mono: \"\\<forall> x y. (x,y) \\<in> set xys \\<longrightarrow> weak_gt x y \\<Longrightarrow> \\<exists> gt. SN_both_mono_ordered_semiring_1 default gt arc_pos \\<and> (\\<forall> x y. (x,y) \\<in> set xys \\<longrightarrow> gt x y)\""], ["", "class poly_carrier = ordered_semiring_1 + comm_semiring_1"], ["", "locale poly_order_carrier = SN_one_mono_ordered_semiring_1 default gt \n  for default :: \"'a :: poly_carrier\" and gt (infix \"\\<succ>\" 50) +\n  fixes power_mono :: \"bool\"\n  and   discrete :: \"bool\"\n  assumes times_gt_mono: \"\\<lbrakk>y \\<succ> z; x \\<ge> 1\\<rbrakk> \\<Longrightarrow> y * x \\<succ> z * x\"\n  and power_mono: \"power_mono \\<Longrightarrow> x \\<succ> y \\<Longrightarrow> y \\<ge> 0 \\<Longrightarrow> n \\<ge> 1 \\<Longrightarrow> x ^ n \\<succ> y ^ n\"\n  and discrete: \"discrete \\<Longrightarrow> x \\<ge> y \\<Longrightarrow> \\<exists> k. x = (((+) 1)^^k) y\""], ["", "class large_ordered_semiring_1 = poly_carrier +\n  assumes ex_large_of_nat: \"\\<exists> x. of_nat x \\<ge> y\""], ["", "context ordered_semiring_1\nbegin"], ["", "lemma pow_mono: assumes ab: \"a \\<ge> b\" and b: \"b \\<ge> 0\"\n  shows \"a ^ n \\<ge> b ^ n \\<and> b ^ n \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. b ^ 0 \\<le> a ^ 0 \\<and> (0::'a) \\<le> b ^ 0\n 2. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. b ^ 0 \\<le> a ^ 0 \\<and> (0::'a) \\<le> b ^ 0\n 2. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. b ^ 0 \\<le> a ^ 0 \\<and> (0::'a) \\<le> b ^ 0", "by (auto simp: ge_refl one_ge_zero)"], ["proof (state)\nthis:\n  b ^ 0 \\<le> a ^ 0 \\<and> (0::'a) \\<le> b ^ 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "hence abn: \"a ^ n \\<ge> b ^ n\" and bn: \"b ^ n \\<ge> 0\""], ["proof (prove)\nusing this:\n  b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n\n\ngoal (1 subgoal):\n 1. b ^ n \\<le> a ^ n &&& (0::'a) \\<le> b ^ n", "by auto"], ["proof (state)\nthis:\n  b ^ n \\<le> a ^ n\n  (0::'a) \\<le> b ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "have bsn: \"b ^ Suc n \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b ^ Suc n", "unfolding power_Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b * b ^ n", "using times_left_mono[OF bn b]"], ["proof (prove)\nusing this:\n  (0::'a) * b ^ n \\<le> b * b ^ n\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b * b ^ n", "by auto"], ["proof (state)\nthis:\n  (0::'a) \\<le> b ^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "have \"a ^ Suc n = a * a ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ Suc n = a * a ^ n", "unfolding power_Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * a ^ n = a * a ^ n", "by simp"], ["proof (state)\nthis:\n  a ^ Suc n = a * a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "also"], ["proof (state)\nthis:\n  a ^ Suc n = a * a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "have \"... \\<ge> b * a ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b * a ^ n \\<le> a * a ^ n", "by (rule times_left_mono[OF ge_trans[OF abn bn] ab])"], ["proof (state)\nthis:\n  b * a ^ n \\<le> a * a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "also"], ["proof (state)\nthis:\n  b * a ^ n \\<le> a * a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "have \"b * a ^ n \\<ge> b * b ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b * b ^ n \\<le> b * a ^ n", "by (rule times_right_mono[OF b abn])"], ["proof (state)\nthis:\n  b * b ^ n \\<le> b * a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       b ^ n \\<le> a ^ n \\<and> (0::'a) \\<le> b ^ n \\<Longrightarrow>\n       b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "finally"], ["proof (chain)\npicking this:\n  b * b ^ n \\<le> a ^ Suc n", "show ?case"], ["proof (prove)\nusing this:\n  b * b ^ n \\<le> a ^ Suc n\n\ngoal (1 subgoal):\n 1. b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "using bsn"], ["proof (prove)\nusing this:\n  b * b ^ n \\<le> a ^ Suc n\n  (0::'a) \\<le> b ^ Suc n\n\ngoal (1 subgoal):\n 1. b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n", "unfolding power_Suc"], ["proof (prove)\nusing this:\n  b * b ^ n \\<le> a * a ^ n\n  (0::'a) \\<le> b * b ^ n\n\ngoal (1 subgoal):\n 1. b * b ^ n \\<le> a * a ^ n \\<and> (0::'a) \\<le> b * b ^ n", "by simp"], ["proof (state)\nthis:\n  b ^ Suc n \\<le> a ^ Suc n \\<and> (0::'a) \\<le> b ^ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pow_ge_zero[intro]: assumes a: \"a \\<ge> (0 :: 'a)\"\n  shows \"a ^ n \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a ^ n", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a ^ 0\n 2. \\<And>n. (0::'a) \\<le> a ^ n \\<Longrightarrow> (0::'a) \\<le> a ^ Suc n", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> a ^ 0\n 2. \\<And>n. (0::'a) \\<le> a ^ n \\<Longrightarrow> (0::'a) \\<le> a ^ Suc n", "from one_ge_zero"], ["proof (chain)\npicking this:\n  (0::'a) \\<le> (1::'a)", "show ?case"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> (1::'a)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a ^ 0", "by simp"], ["proof (state)\nthis:\n  (0::'a) \\<le> a ^ 0\n\ngoal (1 subgoal):\n 1. \\<And>n. (0::'a) \\<le> a ^ n \\<Longrightarrow> (0::'a) \\<le> a ^ Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. (0::'a) \\<le> a ^ n \\<Longrightarrow> (0::'a) \\<le> a ^ Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  (0::'a) \\<le> a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>n. (0::'a) \\<le> a ^ n \\<Longrightarrow> (0::'a) \\<le> a ^ Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a ^ Suc n", "using times_left_mono[OF Suc a]"], ["proof (prove)\nusing this:\n  (0::'a) * a ^ n \\<le> a * a ^ n\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> a ^ Suc n", "by simp"], ["proof (state)\nthis:\n  (0::'a) \\<le> a ^ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "lemma of_nat_ge_zero[intro,simp]: \"of_nat n \\<ge> (0 :: 'a :: ordered_semiring_1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> of_nat n", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (0::'a) \\<le> of_nat 0\n 2. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. (0::'a) \\<le> of_nat 0\n 2. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> of_nat 0", "by (simp add: ge_refl)"], ["proof (state)\nthis:\n  (0::'a) \\<le> of_nat 0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "case (Suc n)"], ["proof (state)\nthis:\n  (0::'a) \\<le> of_nat n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "from plus_right_mono[OF Suc, of 1]"], ["proof (chain)\npicking this:\n  (1::'a) + (0::'a) \\<le> (1::'a) + of_nat n", "have \"of_nat (Suc n) \\<ge> (1 :: 'a)\""], ["proof (prove)\nusing this:\n  (1::'a) + (0::'a) \\<le> (1::'a) + of_nat n\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> of_nat (Suc n)", "by simp"], ["proof (state)\nthis:\n  (1::'a) \\<le> of_nat (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "also"], ["proof (state)\nthis:\n  (1::'a) \\<le> of_nat (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "have \"(1 :: 'a) \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> (1::'a)", "using one_ge_zero"], ["proof (prove)\nusing this:\n  (0::?'a) \\<le> (1::?'a)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> (1::'a)", "."], ["proof (state)\nthis:\n  (0::'a) \\<le> (1::'a)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (0::'a) \\<le> of_nat n \\<Longrightarrow> (0::'a) \\<le> of_nat (Suc n)", "finally"], ["proof (chain)\npicking this:\n  (0::'a) \\<le> of_nat (Suc n)", "show ?case"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> of_nat (Suc n)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> of_nat (Suc n)", "."], ["proof (state)\nthis:\n  (0::'a) \\<le> of_nat (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_ge_zero[intro]: \"(a :: 'a :: ordered_semiring_1) \\<ge> 0 \\<Longrightarrow> b \\<ge> 0 \\<Longrightarrow> a * b \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(0::'a) \\<le> a; (0::'a) \\<le> b\\<rbrakk>\n    \\<Longrightarrow> (0::'a) \\<le> a * b", "using times_left_mono[of b 0 a]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(0::'a) \\<le> b; (0::'a) \\<le> a\\<rbrakk>\n  \\<Longrightarrow> (0::'a) * b \\<le> a * b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>(0::'a) \\<le> a; (0::'a) \\<le> b\\<rbrakk>\n    \\<Longrightarrow> (0::'a) \\<le> a * b", "by auto"], ["", "lemma pow_mono_one: assumes a: \"a \\<ge> (1 :: 'a :: ordered_semiring_1)\"\n  shows \"a ^ n \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a ^ n", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. (1::'a) \\<le> a ^ 0\n 2. \\<And>n. (1::'a) \\<le> a ^ n \\<Longrightarrow> (1::'a) \\<le> a ^ Suc n", "case (Suc n)"], ["proof (state)\nthis:\n  (1::'a) \\<le> a ^ n\n\ngoal (2 subgoals):\n 1. (1::'a) \\<le> a ^ 0\n 2. \\<And>n. (1::'a) \\<le> a ^ n \\<Longrightarrow> (1::'a) \\<le> a ^ Suc n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a ^ Suc n", "unfolding power_Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * a ^ n", "using ge_trans[OF times_right_mono[OF ge_trans[OF a one_ge_zero] Suc], of 1]\n    a"], ["proof (prove)\nusing this:\n  (1::'a) \\<le> a * (1::'a) \\<Longrightarrow> (1::'a) \\<le> a * a ^ n\n  (1::'a) \\<le> a\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * a ^ n", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  (1::'a) \\<le> a ^ Suc n\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a ^ 0", "qed (auto simp: ge_refl)"], ["", "lemma pow_mono_exp: assumes a: \"a \\<ge> (1 :: 'a :: ordered_semiring_1)\"\n  shows \"n \\<ge> m \\<Longrightarrow> a ^ n \\<ge> a ^ m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n", "proof (induct m arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<le> n \\<Longrightarrow> a ^ 0 \\<le> a ^ n\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "case 0"], ["proof (state)\nthis:\n  0 \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<le> n \\<Longrightarrow> a ^ 0 \\<le> a ^ n\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ 0 \\<le> a ^ n", "using pow_mono_one[OF a]"], ["proof (prove)\nusing this:\n  (1::'a) \\<le> a ^ ?n\n\ngoal (1 subgoal):\n 1. a ^ 0 \\<le> a ^ n", "by auto"], ["proof (state)\nthis:\n  a ^ 0 \\<le> a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "case (Suc m nn)"], ["proof (state)\nthis:\n  m \\<le> ?n \\<Longrightarrow> a ^ m \\<le> a ^ ?n\n  Suc m \\<le> nn\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "then"], ["proof (chain)\npicking this:\n  m \\<le> ?n \\<Longrightarrow> a ^ m \\<le> a ^ ?n\n  Suc m \\<le> nn", "obtain n where nn: \"nn = Suc n\""], ["proof (prove)\nusing this:\n  m \\<le> ?n \\<Longrightarrow> a ^ m \\<le> a ^ ?n\n  Suc m \\<le> nn\n\ngoal (1 subgoal):\n 1. (\\<And>n. nn = Suc n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases nn, auto)"], ["proof (state)\nthis:\n  nn = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "note Suc = Suc[unfolded nn]"], ["proof (state)\nthis:\n  m \\<le> ?n \\<Longrightarrow> a ^ m \\<le> a ^ ?n\n  Suc m \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "hence rec: \"a ^ n \\<ge> a ^ m\""], ["proof (prove)\nusing this:\n  m \\<le> ?n \\<Longrightarrow> a ^ m \\<le> a ^ ?n\n  Suc m \\<le> Suc n\n\ngoal (1 subgoal):\n 1. a ^ m \\<le> a ^ n", "by auto"], ["proof (state)\nthis:\n  a ^ m \\<le> a ^ n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n. m \\<le> n \\<Longrightarrow> a ^ m \\<le> a ^ n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> a ^ Suc m \\<le> a ^ n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a ^ Suc m \\<le> a ^ nn", "unfolding nn power_Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. a * a ^ m \\<le> a * a ^ n", "by (rule times_right_mono[OF ge_trans[OF a one_ge_zero] rec])"], ["proof (state)\nthis:\n  a ^ Suc m \\<le> a ^ nn\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_ge_one[intro]: assumes a: \"(a :: 'a :: ordered_semiring_1) \\<ge> 1\"\n  and b: \"b \\<ge> 1\"\n  shows \"a * b \\<ge> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * b", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * b", "from ge_trans[OF b one_ge_zero]"], ["proof (chain)\npicking this:\n  (0::'a) \\<le> b", "have b0: \"b \\<ge> 0\""], ["proof (prove)\nusing this:\n  (0::'a) \\<le> b\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> b", "."], ["proof (state)\nthis:\n  (0::'a) \\<le> b\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * b", "from times_left_mono[OF b0 a]"], ["proof (chain)\npicking this:\n  (1::'a) * b \\<le> a * b", "have \"a * b \\<ge> b\""], ["proof (prove)\nusing this:\n  (1::'a) * b \\<le> a * b\n\ngoal (1 subgoal):\n 1. b \\<le> a * b", "by simp"], ["proof (state)\nthis:\n  b \\<le> a * b\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * b", "from ge_trans[OF this b]"], ["proof (chain)\npicking this:\n  (1::'a) \\<le> a * b", "show ?thesis"], ["proof (prove)\nusing this:\n  (1::'a) \\<le> a * b\n\ngoal (1 subgoal):\n 1. (1::'a) \\<le> a * b", "."], ["proof (state)\nthis:\n  (1::'a) \\<le> a * b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_ge_mono: fixes as :: \"('a :: ordered_semiring_0) list\"\n  assumes \"length as = length bs\"\n  and \"\\<And> i. i < length bs \\<Longrightarrow> as ! i \\<ge> bs ! i\"\n  shows \"sum_list as \\<ge> sum_list bs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list bs \\<le> sum_list as", "using assms"], ["proof (prove)\nusing this:\n  length as = length bs\n  ?i < length bs \\<Longrightarrow> bs ! ?i \\<le> as ! ?i\n\ngoal (1 subgoal):\n 1. sum_list bs \\<le> sum_list as", "proof (induct as arbitrary: bs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>bs.\n       \\<lbrakk>length [] = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow> bs ! i \\<le> [] ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list []\n 2. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "case (Nil bs)"], ["proof (state)\nthis:\n  length [] = length bs\n  ?i < length bs \\<Longrightarrow> bs ! ?i \\<le> [] ! ?i\n\ngoal (2 subgoals):\n 1. \\<And>bs.\n       \\<lbrakk>length [] = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow> bs ! i \\<le> [] ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list []\n 2. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "from Nil(1)"], ["proof (chain)\npicking this:\n  length [] = length bs", "show ?case"], ["proof (prove)\nusing this:\n  length [] = length bs\n\ngoal (1 subgoal):\n 1. sum_list bs \\<le> sum_list []", "by (simp add: ge_refl)"], ["proof (state)\nthis:\n  sum_list bs \\<le> sum_list []\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "case (Cons a as bbs)"], ["proof (state)\nthis:\n  \\<lbrakk>length as = length ?bs;\n   \\<And>i. i < length ?bs \\<Longrightarrow> ?bs ! i \\<le> as ! i\\<rbrakk>\n  \\<Longrightarrow> sum_list ?bs \\<le> sum_list as\n  length (a # as) = length bbs\n  ?i < length bbs \\<Longrightarrow> bbs ! ?i \\<le> (a # as) ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "from Cons(2)"], ["proof (chain)\npicking this:\n  length (a # as) = length bbs", "obtain b bs where bbs: \"bbs = b # bs\" and len: \"length as = length bs\""], ["proof (prove)\nusing this:\n  length (a # as) = length bbs\n\ngoal (1 subgoal):\n 1. (\\<And>b bs.\n        \\<lbrakk>bbs = b # bs; length as = length bs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases bbs, auto)"], ["proof (state)\nthis:\n  bbs = b # bs\n  length as = length bs\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "note ge = Cons(3)[unfolded bbs]"], ["proof (state)\nthis:\n  ?i < length (b # bs) \\<Longrightarrow> (b # bs) ! ?i \\<le> (a # as) ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "{"], ["proof (state)\nthis:\n  ?i < length (b # bs) \\<Longrightarrow> (b # bs) ! ?i \\<le> (a # as) ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "assume \"i < length bs\""], ["proof (state)\nthis:\n  i < length bs\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "hence \"Suc i < length (b # bs)\""], ["proof (prove)\nusing this:\n  i < length bs\n\ngoal (1 subgoal):\n 1. Suc i < length (b # bs)", "by simp"], ["proof (state)\nthis:\n  Suc i < length (b # bs)\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "from ge[OF this]"], ["proof (chain)\npicking this:\n  (b # bs) ! Suc i \\<le> (a # as) ! Suc i", "have \"as ! i \\<ge> bs ! i\""], ["proof (prove)\nusing this:\n  (b # bs) ! Suc i \\<le> (a # as) ! Suc i\n\ngoal (1 subgoal):\n 1. bs ! i \\<le> as ! i", "by simp"], ["proof (state)\nthis:\n  bs ! i \\<le> as ! i\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "}"], ["proof (state)\nthis:\n  ?i2 < length bs \\<Longrightarrow> bs ! ?i2 \\<le> as ! ?i2\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "from Cons(1)[OF len this]"], ["proof (chain)\npicking this:\n  (\\<And>i. i < length bs \\<Longrightarrow> i < length bs) \\<Longrightarrow>\n  sum_list bs \\<le> sum_list as", "have IH: \"sum_list as \\<ge> sum_list bs\""], ["proof (prove)\nusing this:\n  (\\<And>i. i < length bs \\<Longrightarrow> i < length bs) \\<Longrightarrow>\n  sum_list bs \\<le> sum_list as\n\ngoal (1 subgoal):\n 1. sum_list bs \\<le> sum_list as", "."], ["proof (state)\nthis:\n  sum_list bs \\<le> sum_list as\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "from ge[of 0]"], ["proof (chain)\npicking this:\n  0 < length (b # bs) \\<Longrightarrow> (b # bs) ! 0 \\<le> (a # as) ! 0", "have ab: \"a \\<ge> b\""], ["proof (prove)\nusing this:\n  0 < length (b # bs) \\<Longrightarrow> (b # bs) ! 0 \\<le> (a # as) ! 0\n\ngoal (1 subgoal):\n 1. b \\<le> a", "by simp"], ["proof (state)\nthis:\n  b \\<le> a\n\ngoal (1 subgoal):\n 1. \\<And>a as bs.\n       \\<lbrakk>\\<And>bs.\n                   \\<lbrakk>length as = length bs;\n                    \\<And>i.\n                       i < length bs \\<Longrightarrow>\n                       bs ! i \\<le> as ! i\\<rbrakk>\n                   \\<Longrightarrow> sum_list bs \\<le> sum_list as;\n        length (a # as) = length bs;\n        \\<And>i.\n           i < length bs \\<Longrightarrow>\n           bs ! i \\<le> (a # as) ! i\\<rbrakk>\n       \\<Longrightarrow> sum_list bs \\<le> sum_list (a # as)", "from ge_trans[OF plus_left_mono[OF ab] plus_right_mono[OF IH]]"], ["proof (chain)\npicking this:\n  b + sum_list bs \\<le> a + sum_list as", "show ?case"], ["proof (prove)\nusing this:\n  b + sum_list bs \\<le> a + sum_list as\n\ngoal (1 subgoal):\n 1. sum_list bbs \\<le> sum_list (a # as)", "unfolding bbs"], ["proof (prove)\nusing this:\n  b + sum_list bs \\<le> a + sum_list as\n\ngoal (1 subgoal):\n 1. sum_list (b # bs) \\<le> sum_list (a # as)", "by simp"], ["proof (state)\nthis:\n  sum_list bbs \\<le> sum_list (a # as)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_ge_0_nth: fixes xs :: \"('a :: ordered_semiring_0)list\"\n  assumes ge: \"\\<And> i. i < length xs \\<Longrightarrow> xs ! i \\<ge> 0\"\n  shows \"sum_list xs \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "let ?l = \"replicate  (length xs) (0 :: 'a)\""], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "have \"length xs = length ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs = length (replicate (length xs) (0::'a))", "by simp"], ["proof (state)\nthis:\n  length xs = length (replicate (length xs) (0::'a))\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "from sum_list_ge_mono[OF this] ge"], ["proof (chain)\npicking this:\n  (\\<And>i.\n      i < length (replicate (length xs) (0::'a)) \\<Longrightarrow>\n      replicate (length xs) (0::'a) ! i \\<le> xs ! i) \\<Longrightarrow>\n  sum_list (replicate (length xs) (0::'a)) \\<le> sum_list xs\n  ?i < length xs \\<Longrightarrow> (0::'a) \\<le> xs ! ?i", "have \"sum_list xs \\<ge> sum_list ?l\""], ["proof (prove)\nusing this:\n  (\\<And>i.\n      i < length (replicate (length xs) (0::'a)) \\<Longrightarrow>\n      replicate (length xs) (0::'a) ! i \\<le> xs ! i) \\<Longrightarrow>\n  sum_list (replicate (length xs) (0::'a)) \\<le> sum_list xs\n  ?i < length xs \\<Longrightarrow> (0::'a) \\<le> xs ! ?i\n\ngoal (1 subgoal):\n 1. sum_list (replicate (length xs) (0::'a)) \\<le> sum_list xs", "by simp"], ["proof (state)\nthis:\n  sum_list (replicate (length xs) (0::'a)) \\<le> sum_list xs\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "also"], ["proof (state)\nthis:\n  sum_list (replicate (length xs) (0::'a)) \\<le> sum_list xs\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "have \"sum_list ?l = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sum_list (replicate (length xs) (0::'a)) = (0::'a)", "using sum_list_0[of ?l]"], ["proof (prove)\nusing this:\n  (\\<Sum>x\\<leftarrow>replicate (length xs) (0::'a). (0::?'a)) = (0::?'a)\n\ngoal (1 subgoal):\n 1. sum_list (replicate (length xs) (0::'a)) = (0::'a)", "by auto"], ["proof (state)\nthis:\n  sum_list (replicate (length xs) (0::'a)) = (0::'a)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "finally"], ["proof (chain)\npicking this:\n  (0::'a) \\<le> sum_list xs", "show ?thesis"], ["proof (prove)\nusing this:\n  (0::'a) \\<le> sum_list xs\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "."], ["proof (state)\nthis:\n  (0::'a) \\<le> sum_list xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sum_list_ge_0: fixes xs :: \"('a :: ordered_semiring_0)list\"\n  assumes ge: \"\\<And> x. x \\<in> set xs \\<Longrightarrow> x \\<ge> 0\"\n  shows \"sum_list xs \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> sum_list xs", "by (rule sum_list_ge_0_nth, insert ge[unfolded set_conv_nth], auto)"], ["", "lemma foldr_max: \"a \\<in> set as \\<Longrightarrow> foldr max as b \\<ge> (a :: 'a :: ordered_ab_semigroup)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as b", "proof (induct as arbitrary: b)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b. a \\<in> set [] \\<Longrightarrow> a \\<le> foldr max [] b\n 2. \\<And>aa as b.\n       \\<lbrakk>\\<And>b.\n                   a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as b;\n        a \\<in> set (aa # as)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> foldr max (aa # as) b", "case Nil"], ["proof (state)\nthis:\n  a \\<in> set []\n\ngoal (2 subgoals):\n 1. \\<And>b. a \\<in> set [] \\<Longrightarrow> a \\<le> foldr max [] b\n 2. \\<And>aa as b.\n       \\<lbrakk>\\<And>b.\n                   a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as b;\n        a \\<in> set (aa # as)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> foldr max (aa # as) b", "thus ?case"], ["proof (prove)\nusing this:\n  a \\<in> set []\n\ngoal (1 subgoal):\n 1. a \\<le> foldr max [] b", "by simp"], ["proof (state)\nthis:\n  a \\<le> foldr max [] b\n\ngoal (1 subgoal):\n 1. \\<And>aa as b.\n       \\<lbrakk>\\<And>b.\n                   a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as b;\n        a \\<in> set (aa # as)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> foldr max (aa # as) b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>aa as b.\n       \\<lbrakk>\\<And>b.\n                   a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as b;\n        a \\<in> set (aa # as)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> foldr max (aa # as) b", "case (Cons c as)"], ["proof (state)\nthis:\n  a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as ?b\n  a \\<in> set (c # as)\n\ngoal (1 subgoal):\n 1. \\<And>aa as b.\n       \\<lbrakk>\\<And>b.\n                   a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as b;\n        a \\<in> set (aa # as)\\<rbrakk>\n       \\<Longrightarrow> a \\<le> foldr max (aa # as) b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> foldr max (c # as) b", "proof (cases \"a = c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. a = c \\<Longrightarrow> a \\<le> foldr max (c # as) b\n 2. a \\<noteq> c \\<Longrightarrow> a \\<le> foldr max (c # as) b", "case True"], ["proof (state)\nthis:\n  a = c\n\ngoal (2 subgoals):\n 1. a = c \\<Longrightarrow> a \\<le> foldr max (c # as) b\n 2. a \\<noteq> c \\<Longrightarrow> a \\<le> foldr max (c # as) b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> foldr max (c # as) b", "unfolding True"], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<le> foldr max (c # as) b", "by auto"], ["proof (state)\nthis:\n  a \\<le> foldr max (c # as) b\n\ngoal (1 subgoal):\n 1. a \\<noteq> c \\<Longrightarrow> a \\<le> foldr max (c # as) b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. a \\<noteq> c \\<Longrightarrow> a \\<le> foldr max (c # as) b", "case False"], ["proof (state)\nthis:\n  a \\<noteq> c\n\ngoal (1 subgoal):\n 1. a \\<noteq> c \\<Longrightarrow> a \\<le> foldr max (c # as) b", "with Cons"], ["proof (chain)\npicking this:\n  a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as ?b\n  a \\<in> set (c # as)\n  a \\<noteq> c", "have \"foldr max as b \\<ge> a\""], ["proof (prove)\nusing this:\n  a \\<in> set as \\<Longrightarrow> a \\<le> foldr max as ?b\n  a \\<in> set (c # as)\n  a \\<noteq> c\n\ngoal (1 subgoal):\n 1. a \\<le> foldr max as b", "by auto"], ["proof (state)\nthis:\n  a \\<le> foldr max as b\n\ngoal (1 subgoal):\n 1. a \\<noteq> c \\<Longrightarrow> a \\<le> foldr max (c # as) b", "from ge_trans[OF _ this]"], ["proof (chain)\npicking this:\n  foldr max as b \\<le> ?x \\<Longrightarrow> a \\<le> ?x", "show ?thesis"], ["proof (prove)\nusing this:\n  foldr max as b \\<le> ?x \\<Longrightarrow> a \\<le> ?x\n\ngoal (1 subgoal):\n 1. a \\<le> foldr max (c # as) b", "by auto"], ["proof (state)\nthis:\n  a \\<le> foldr max (c # as) b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  a \\<le> foldr max (c # as) b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma of_nat_mono[intro]: assumes \"n \\<ge> m\" shows \"(of_nat n :: 'a :: ordered_semiring_1) \\<ge> of_nat m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat m \\<le> of_nat n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. of_nat m \\<le> of_nat n", "let ?n = \"of_nat :: nat \\<Rightarrow> 'a\""], ["proof (state)\ngoal (1 subgoal):\n 1. of_nat m \\<le> of_nat n", "from assms"], ["proof (chain)\npicking this:\n  m \\<le> n", "show ?thesis"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. of_nat m \\<le> of_nat n", "proof (induct m arbitrary: n)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<le> n \\<Longrightarrow> of_nat 0 \\<le> of_nat n\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "case 0"], ["proof (state)\nthis:\n  0 \\<le> n\n\ngoal (2 subgoals):\n 1. \\<And>n. 0 \\<le> n \\<Longrightarrow> of_nat 0 \\<le> of_nat n\n 2. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat 0 \\<le> of_nat n", "by auto"], ["proof (state)\nthis:\n  of_nat 0 \\<le> of_nat n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "case (Suc m nn)"], ["proof (state)\nthis:\n  m \\<le> ?n \\<Longrightarrow> of_nat m \\<le> of_nat ?n\n  Suc m \\<le> nn\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "then"], ["proof (chain)\npicking this:\n  m \\<le> ?n \\<Longrightarrow> of_nat m \\<le> of_nat ?n\n  Suc m \\<le> nn", "obtain n where nn: \"nn = Suc n\""], ["proof (prove)\nusing this:\n  m \\<le> ?n \\<Longrightarrow> of_nat m \\<le> of_nat ?n\n  Suc m \\<le> nn\n\ngoal (1 subgoal):\n 1. (\\<And>n. nn = Suc n \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases nn, auto)"], ["proof (state)\nthis:\n  nn = Suc n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "note Suc = Suc[unfolded nn]"], ["proof (state)\nthis:\n  m \\<le> ?n \\<Longrightarrow> of_nat m \\<le> of_nat ?n\n  Suc m \\<le> Suc n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "hence rec: \"?n n \\<ge> ?n m\""], ["proof (prove)\nusing this:\n  m \\<le> ?n \\<Longrightarrow> of_nat m \\<le> of_nat ?n\n  Suc m \\<le> Suc n\n\ngoal (1 subgoal):\n 1. of_nat m \\<le> of_nat n", "by simp"], ["proof (state)\nthis:\n  of_nat m \\<le> of_nat n\n\ngoal (1 subgoal):\n 1. \\<And>m n.\n       \\<lbrakk>\\<And>n.\n                   m \\<le> n \\<Longrightarrow> of_nat m \\<le> of_nat n;\n        Suc m \\<le> n\\<rbrakk>\n       \\<Longrightarrow> of_nat (Suc m) \\<le> of_nat n", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (Suc m) \\<le> of_nat nn", "unfolding nn of_nat_Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) + of_nat m \\<le> (1::'a) + of_nat n", "by (rule plus_right_mono[OF rec])"], ["proof (state)\nthis:\n  of_nat (Suc m) \\<le> of_nat nn\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  of_nat m \\<le> of_nat n\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>non infinitesmal is the same as in the CADE07 bounded increase paper\\<close>"], ["", "definition non_inf :: \"'a rel \\<Rightarrow> bool\"\n where \"non_inf r \\<equiv> \\<forall> a f. \\<exists> i. (f i, f (Suc i)) \\<notin> r \\<or> (f i, a) \\<notin> r\""], ["", "lemma non_infI[intro]: assumes \"\\<And> a f. \\<lbrakk> \\<And> i. (f i, f (Suc i)) \\<in> r\\<rbrakk> \\<Longrightarrow> \\<exists> i. (f i, a) \\<notin> r\"\n  shows \"non_inf r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_inf r", "using assms"], ["proof (prove)\nusing this:\n  (\\<And>i. (?f i, ?f (Suc i)) \\<in> r) \\<Longrightarrow>\n  \\<exists>i. (?f i, ?a) \\<notin> r\n\ngoal (1 subgoal):\n 1. non_inf r", "unfolding non_inf_def"], ["proof (prove)\nusing this:\n  (\\<And>i. (?f i, ?f (Suc i)) \\<in> r) \\<Longrightarrow>\n  \\<exists>i. (?f i, ?a) \\<notin> r\n\ngoal (1 subgoal):\n 1. \\<forall>a f.\n       \\<exists>i. (f i, f (Suc i)) \\<notin> r \\<or> (f i, a) \\<notin> r", "by blast"], ["", "lemma non_infE[elim]: assumes \"non_inf r\" and \"\\<And> i. (f i, f (Suc i)) \\<notin> r \\<or> (f i, a) \\<notin> r \\<Longrightarrow> P\"\n  shows P"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using assms"], ["proof (prove)\nusing this:\n  non_inf r\n  (f ?i, f (Suc ?i)) \\<notin> r \\<or> (f ?i, a) \\<notin> r \\<Longrightarrow>\n  P\n\ngoal (1 subgoal):\n 1. P", "unfolding non_inf_def"], ["proof (prove)\nusing this:\n  \\<forall>a f.\n     \\<exists>i. (f i, f (Suc i)) \\<notin> r \\<or> (f i, a) \\<notin> r\n  (f ?i, f (Suc ?i)) \\<notin> r \\<or> (f ?i, a) \\<notin> r \\<Longrightarrow>\n  P\n\ngoal (1 subgoal):\n 1. P", "by blast"], ["", "lemma non_inf_image: \n  assumes ni: \"non_inf r\" and image: \"\\<And> a b. (a,b) \\<in> s \\<Longrightarrow> (f a, f b) \\<in> r\"\n  shows \"non_inf s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_inf s", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a f.\n       (\\<And>i. (f i, f (Suc i)) \\<in> s) \\<Longrightarrow>\n       \\<exists>i. (f i, a) \\<notin> s", "fix a g"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a f.\n       (\\<And>i. (f i, f (Suc i)) \\<in> s) \\<Longrightarrow>\n       \\<exists>i. (f i, a) \\<notin> s", "assume s: \"\\<And> i. (g i, g (Suc i)) \\<in> s\""], ["proof (state)\nthis:\n  (g ?i, g (Suc ?i)) \\<in> s\n\ngoal (1 subgoal):\n 1. \\<And>a f.\n       (\\<And>i. (f i, f (Suc i)) \\<in> s) \\<Longrightarrow>\n       \\<exists>i. (f i, a) \\<notin> s", "define h where \"h = f o g\""], ["proof (state)\nthis:\n  h = f \\<circ> g\n\ngoal (1 subgoal):\n 1. \\<And>a f.\n       (\\<And>i. (f i, f (Suc i)) \\<in> s) \\<Longrightarrow>\n       \\<exists>i. (f i, a) \\<notin> s", "from image[OF s]"], ["proof (chain)\npicking this:\n  (f (g ?i1), f (g (Suc ?i1))) \\<in> r", "have h: \"\\<And> i. (h i, h (Suc i)) \\<in> r\""], ["proof (prove)\nusing this:\n  (f (g ?i1), f (g (Suc ?i1))) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>i. (h i, h (Suc i)) \\<in> r", "unfolding h_def comp_def"], ["proof (prove)\nusing this:\n  (f (g ?i1), f (g (Suc ?i1))) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>i. (f (g i), f (g (Suc i))) \\<in> r", "."], ["proof (state)\nthis:\n  (h ?i, h (Suc ?i)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>a f.\n       (\\<And>i. (f i, f (Suc i)) \\<in> s) \\<Longrightarrow>\n       \\<exists>i. (f i, a) \\<notin> s", "from non_infE[OF ni, of h]"], ["proof (chain)\npicking this:\n  (\\<And>i.\n      (h i, h (Suc i)) \\<notin> r \\<or>\n      (h i, ?a) \\<notin> r \\<Longrightarrow>\n      ?P) \\<Longrightarrow>\n  ?P", "have \"\\<And> a. \\<exists> i. (h i, a) \\<notin> r\""], ["proof (prove)\nusing this:\n  (\\<And>i.\n      (h i, h (Suc i)) \\<notin> r \\<or>\n      (h i, ?a) \\<notin> r \\<Longrightarrow>\n      ?P) \\<Longrightarrow>\n  ?P\n\ngoal (1 subgoal):\n 1. \\<And>a. \\<exists>i. (h i, a) \\<notin> r", "using h"], ["proof (prove)\nusing this:\n  (\\<And>i.\n      (h i, h (Suc i)) \\<notin> r \\<or>\n      (h i, ?a) \\<notin> r \\<Longrightarrow>\n      ?P) \\<Longrightarrow>\n  ?P\n  (h ?i, h (Suc ?i)) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<And>a. \\<exists>i. (h i, a) \\<notin> r", "by blast"], ["proof (state)\nthis:\n  \\<exists>i. (h i, ?a) \\<notin> r\n\ngoal (1 subgoal):\n 1. \\<And>a f.\n       (\\<And>i. (f i, f (Suc i)) \\<in> s) \\<Longrightarrow>\n       \\<exists>i. (f i, a) \\<notin> s", "thus \"\\<exists>i. (g i, a) \\<notin> s\""], ["proof (prove)\nusing this:\n  \\<exists>i. (h i, ?a) \\<notin> r\n\ngoal (1 subgoal):\n 1. \\<exists>i. (g i, a) \\<notin> s", "using image"], ["proof (prove)\nusing this:\n  \\<exists>i. (h i, ?a) \\<notin> r\n  (?a, ?b) \\<in> s \\<Longrightarrow> (f ?a, f ?b) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>i. (g i, a) \\<notin> s", "unfolding h_def comp_def"], ["proof (prove)\nusing this:\n  \\<exists>i. (f (g i), ?a) \\<notin> r\n  (?a, ?b) \\<in> s \\<Longrightarrow> (f ?a, f ?b) \\<in> r\n\ngoal (1 subgoal):\n 1. \\<exists>i. (g i, a) \\<notin> s", "by blast"], ["proof (state)\nthis:\n  \\<exists>i. (g i, a) \\<notin> s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SN_imp_non_inf: \"SN r \\<Longrightarrow> non_inf r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. SN r \\<Longrightarrow> non_inf r", "by (intro non_infI, auto)"], ["", "lemma non_inf_imp_SN_bound: \"non_inf r \\<Longrightarrow> SN {(a,b). (b,c) \\<in> r \\<and> (a,b) \\<in> r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_inf r \\<Longrightarrow>\n    SN {(a, b). (b, c) \\<in> r \\<and> (a, b) \\<in> r}", "by (rule, auto)"], ["", "end"]]}