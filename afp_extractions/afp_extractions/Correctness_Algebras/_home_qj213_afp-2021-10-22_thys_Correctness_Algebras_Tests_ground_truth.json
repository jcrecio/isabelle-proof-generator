{"file_name": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras/Tests.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras", "problem_names": ["lemma strict_leq_def:\n  \"-x < -y \\<longleftrightarrow> -x \\<le> -y \\<and> \\<not> (-y \\<le> -x)\"", "lemma one_def:\n  \"top = -bot\"", "lemma mult_left_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { -p * x | x . x \\<in> A }\"", "lemma mult_right_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { x * -p | x . x \\<in> A }\"", "lemma sup_left_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { -p \\<squnion> x | x . x \\<in> A }\"", "lemma sup_right_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { x \\<squnion> -p | x . x \\<in> A }\"", "lemma test_set_closed:\n  \"A \\<subseteq> B \\<Longrightarrow> test_set B \\<Longrightarrow> test_set A\"", "lemma test_seq_test_set:\n  \"test_seq t \\<Longrightarrow> test_set { t n | n::nat . True }\"", "lemma nat_test_seq:\n  \"nat_test t s \\<Longrightarrow> test_seq t\"", "lemma pSum_test:\n  \"test_seq t \\<Longrightarrow> pSum t m = --(pSum t m)\"", "lemma pSum_test_nat:\n  \"nat_test t s \\<Longrightarrow> pSum t m = --(pSum t m)\"", "lemma pSum_upper:\n  \"test_seq t \\<Longrightarrow> i<m \\<Longrightarrow> t i \\<le> pSum t m\"", "lemma pSum_below:\n  \"test_seq t \\<Longrightarrow> (\\<forall>m<k . t m * -p \\<le> -q) \\<Longrightarrow> pSum t k * -p \\<le> -q\"", "lemma pSum_below_nat:\n  \"nat_test t s \\<Longrightarrow> (\\<forall>m<k . t m * -p \\<le> -q) \\<Longrightarrow> pSum t k * -p \\<le> -q\"", "lemma pSum_below_sum:\n  \"nat_test t s \\<Longrightarrow> pSum t x \\<le> s\"", "lemma ascending_chain_sup_left:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . -p \\<squnion> t n) \\<and> test_seq (\\<lambda>n . -p \\<squnion> t n)\"", "lemma ascending_chain_sup_right:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . t n \\<squnion> -p) \\<and> test_seq (\\<lambda>n . t n \\<squnion> -p)\"", "lemma ascending_chain_mult_left:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . -p * t n) \\<and> test_seq (\\<lambda>n . -p * t n)\"", "lemma ascending_chain_mult_right:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . t n * -p) \\<and> test_seq (\\<lambda>n . t n * -p)\"", "lemma descending_chain_sup_left:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . -p \\<squnion> t n) \\<and> test_seq (\\<lambda>n . -p \\<squnion> t n)\"", "lemma descending_chain_sup_right:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . t n \\<squnion> -p) \\<and> test_seq (\\<lambda>n . t n \\<squnion> -p)\"", "lemma descending_chain_mult_left:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . -p * t n) \\<and> test_seq (\\<lambda>n . -p * t n)\"", "lemma descending_chain_mult_right:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . t n * -p) \\<and> test_seq (\\<lambda>n . t n * -p)\""], "translations": [["", "lemma strict_leq_def:\n  \"-x < -y \\<longleftrightarrow> -x \\<le> -y \\<and> \\<not> (-y \\<le> -x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- x < - y) = (- x \\<le> - y \\<and> \\<not> - y \\<le> - x)", "by (simp add: sba_dual.sba_dual.sub_less_def sba_dual.sba_dual.sub_less_eq_def)"], ["", "lemma one_def:\n  \"top = -bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. top = - bot", "by simp"], ["", "end"], ["", "class tests = times + uminus + one + ord + sup + bot +\n  assumes sub_assoc: \"-x * (-y * -z) = (-x * -y) * -z\"\n  assumes sub_comm: \"-x * -y = -y * -x\"\n  assumes sub_compl: \"-x = -(--x * -y) * -(--x * --y)\"\n  assumes sub_mult_closed: \"-x * -y = --(-x * -y)\"\n  assumes the_bot_def: \"bot = (THE x . (\\<forall>y . x = -y * --y))\" (* define without imposing uniqueness *)\n  assumes one_def: \"1 = - bot\"\n  assumes sup_def: \"-x \\<squnion> -y = -(--x * --y)\"\n  assumes leq_def: \"-x \\<le> -y \\<longleftrightarrow> -x * -y = -x\"\n  assumes strict_leq_def: \"-x < -y \\<longleftrightarrow> -x \\<le> -y \\<and> \\<not> (-y \\<le> -x)\"\nbegin"], ["", "sublocale tests_dual: subset_boolean_algebra_extended where uminus = uminus and sup = times and minus = \"\\<lambda>x y . -(-x * y)\" and inf = sup and bot = 1 and less_eq = greater_eq and less = greater and top = bot"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.subset_boolean_algebra_extended uminus (*)\n     (\\<lambda>x y. - (- x * y)) (\\<squnion>) (1::'a)\n     (\\<lambda>x y. y \\<le> x) (\\<lambda>x y. y < x) bot", "apply unfold_locales"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>x y z. - x * (- y * - z) = - x * - y * - z\n 2. \\<And>x y. - x * - y = - y * - x\n 3. \\<And>x y. - x = - (- - x * - y) * - (- - x * - - y)\n 4. \\<And>x y. - x * - y = - - (- x * - y)\n 5. bot = (THE x. \\<forall>y. x = - y * - - y)\n 6. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 7. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 8. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 9. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 10. \\<And>x y.\n        (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: sub_assoc)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x y. - x * - y = - y * - x\n 2. \\<And>x y. - x = - (- - x * - y) * - (- - x * - - y)\n 3. \\<And>x y. - x * - y = - - (- x * - y)\n 4. bot = (THE x. \\<forall>y. x = - y * - - y)\n 5. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 6. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 7. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 8. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 9. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: sub_comm)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>x y. - x = - (- - x * - y) * - (- - x * - - y)\n 2. \\<And>x y. - x * - y = - - (- x * - y)\n 3. bot = (THE x. \\<forall>y. x = - y * - - y)\n 4. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 5. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 6. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 7. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 8. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: sub_compl)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>x y. - x * - y = - - (- x * - y)\n 2. bot = (THE x. \\<forall>y. x = - y * - - y)\n 3. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 4. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 5. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 6. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 7. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "using sub_mult_closed"], ["proof (prove)\nusing this:\n  - ?x * - ?y = - - (- ?x * - ?y)\n\ngoal (7 subgoals):\n 1. \\<And>x y. - x * - y = - - (- x * - y)\n 2. bot = (THE x. \\<forall>y. x = - y * - - y)\n 3. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 4. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 5. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 6. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 7. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply simp"], ["proof (prove)\ngoal (6 subgoals):\n 1. bot = (THE x. \\<forall>y. x = - y * - - y)\n 2. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 3. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 4. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 5. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 6. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: the_bot_def)"], ["proof (prove)\ngoal (5 subgoals):\n 1. (1::'a) = - (THE x. \\<forall>y. x = - y * - - y)\n 2. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 3. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 4. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 5. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: one_def the_bot_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x y. - x \\<squnion> - y = - (- - x * - - y)\n 2. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 3. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 4. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: sup_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y. - (- - x * - y) = - (- - x * - y)\n 2. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 3. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x y. (- y \\<le> - x) = (- x * - y = - y)\n 2. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "apply (simp add: leq_def sub_comm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. (- y < - x) = (- x * - y = - y \\<and> - y * - x \\<noteq> - x)", "by (simp add: leq_def strict_leq_def sub_comm)"], ["", "sublocale sba: subset_boolean_algebra_extended where uminus = uminus and sup = sup and minus = \"\\<lambda>x y . -(-x \\<squnion> y)\" and inf = times and bot = bot and less_eq = less_eq and less = less and top = 1"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.subset_boolean_algebra_extended uminus (\\<squnion>)\n     (\\<lambda>x y. - (- x \\<squnion> y)) (*) bot (\\<le>) (<) (1::'a)", ".."], ["", "text \\<open>sets and sequences of tests\\<close>"], ["", "definition test_set :: \"'a set \\<Rightarrow> bool\"\n  where \"test_set A \\<equiv> \\<forall>x\\<in>A . x = --x\""], ["", "lemma mult_left_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { -p * x | x . x \\<in> A }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_set A \\<Longrightarrow> test_set {- p * x |x. x \\<in> A}", "by (smt mem_Collect_eq sub_mult_closed test_set_def)"], ["", "lemma mult_right_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { x * -p | x . x \\<in> A }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_set A \\<Longrightarrow> test_set {x * - p |x. x \\<in> A}", "by (smt mem_Collect_eq sub_mult_closed test_set_def)"], ["", "lemma sup_left_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { -p \\<squnion> x | x . x \\<in> A }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_set A \\<Longrightarrow> test_set {- p \\<squnion> x |x. x \\<in> A}", "by (smt mem_Collect_eq tests_dual.sba_dual.sub_sup_closed test_set_def)"], ["", "lemma sup_right_dist_test_set:\n  \"test_set A \\<Longrightarrow> test_set { x \\<squnion> -p | x . x \\<in> A }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_set A \\<Longrightarrow> test_set {x \\<squnion> - p |x. x \\<in> A}", "by (smt mem_Collect_eq tests_dual.sba_dual.sub_sup_closed test_set_def)"], ["", "lemma test_set_closed:\n  \"A \\<subseteq> B \\<Longrightarrow> test_set B \\<Longrightarrow> test_set A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; test_set B\\<rbrakk>\n    \\<Longrightarrow> test_set A", "using test_set_def"], ["proof (prove)\nusing this:\n  test_set ?A \\<equiv> \\<forall>x\\<in>?A. x = - - x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<subseteq> B; test_set B\\<rbrakk>\n    \\<Longrightarrow> test_set A", "by auto"], ["", "definition test_seq :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> bool\"\n  where \"test_seq t \\<equiv> \\<forall>n . t n = --t n\""], ["", "lemma test_seq_test_set:\n  \"test_seq t \\<Longrightarrow> test_set { t n | n::nat . True }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq t \\<Longrightarrow> test_set {t n |n. True}", "using test_seq_def test_set_def"], ["proof (prove)\nusing this:\n  test_seq ?t \\<equiv> \\<forall>n. ?t n = - - ?t n\n  test_set ?A \\<equiv> \\<forall>x\\<in>?A. x = - - x\n\ngoal (1 subgoal):\n 1. test_seq t \\<Longrightarrow> test_set {t n |n. True}", "by auto"], ["", "definition nat_test :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  where \"nat_test t s \\<equiv> (\\<forall>n . t n = --t n) \\<and> s = --s \\<and> (\\<forall>n . t n \\<le> s) \\<and> (\\<forall>x y . (\\<forall>n . t n * -x \\<le> -y) \\<longrightarrow> s * -x \\<le> -y)\""], ["", "lemma nat_test_seq:\n  \"nat_test t s \\<Longrightarrow> test_seq t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_test t s \\<Longrightarrow> test_seq t", "by (simp add: nat_test_def test_seq_def)"], ["", "primrec pSum :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> nat \\<Rightarrow> 'a\"\n  where \"pSum f 0 = bot\"\n      | \"pSum f (Suc m) = pSum f m \\<squnion> f m\""], ["", "lemma pSum_test:\n  \"test_seq t \\<Longrightarrow> pSum t m = --(pSum t m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq t \\<Longrightarrow> pSum t m = - - pSum t m", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. test_seq t \\<Longrightarrow> pSum t 0 = - - pSum t 0\n 2. \\<And>m.\n       \\<lbrakk>test_seq t \\<Longrightarrow> pSum t m = - - pSum t m;\n        test_seq t\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc m) = - - pSum t (Suc m)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>test_seq t \\<Longrightarrow> pSum t m = - - pSum t m;\n        test_seq t\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc m) = - - pSum t (Suc m)", "by (smt pSum.simps(2) tests_dual.sba_dual.sub_sup_closed test_seq_def)"], ["", "lemma pSum_test_nat:\n  \"nat_test t s \\<Longrightarrow> pSum t m = --(pSum t m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_test t s \\<Longrightarrow> pSum t m = - - pSum t m", "by (metis nat_test_seq pSum_test)"], ["", "lemma pSum_upper:\n  \"test_seq t \\<Longrightarrow> i<m \\<Longrightarrow> t i \\<le> pSum t m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>test_seq t; i < m\\<rbrakk> \\<Longrightarrow> t i \\<le> pSum t m", "proof (induct m)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>test_seq t; i < 0\\<rbrakk> \\<Longrightarrow> t i \\<le> pSum t 0\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>test_seq t; i < m\\<rbrakk>\n                \\<Longrightarrow> t i \\<le> pSum t m;\n        test_seq t; i < Suc m\\<rbrakk>\n       \\<Longrightarrow> t i \\<le> pSum t (Suc m)", "show \"test_seq t \\<Longrightarrow> i<0 \\<Longrightarrow> t i \\<le> pSum t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>test_seq t; i < 0\\<rbrakk> \\<Longrightarrow> t i \\<le> pSum t 0", "by (smt less_zeroE)"], ["proof (state)\nthis:\n  \\<lbrakk>test_seq t; i < 0\\<rbrakk> \\<Longrightarrow> t i \\<le> pSum t 0\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>test_seq t; i < m\\<rbrakk>\n                \\<Longrightarrow> t i \\<le> pSum t m;\n        test_seq t; i < Suc m\\<rbrakk>\n       \\<Longrightarrow> t i \\<le> pSum t (Suc m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>test_seq t; i < m\\<rbrakk>\n                \\<Longrightarrow> t i \\<le> pSum t m;\n        test_seq t; i < Suc m\\<rbrakk>\n       \\<Longrightarrow> t i \\<le> pSum t (Suc m)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>test_seq t; i < m\\<rbrakk>\n                \\<Longrightarrow> t i \\<le> pSum t m;\n        test_seq t; i < Suc m\\<rbrakk>\n       \\<Longrightarrow> t i \\<le> pSum t (Suc m)", "assume \"test_seq t \\<Longrightarrow> i<n \\<Longrightarrow> t i \\<le> pSum t n\""], ["proof (state)\nthis:\n  \\<lbrakk>test_seq t; i < n\\<rbrakk> \\<Longrightarrow> t i \\<le> pSum t n\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>test_seq t; i < m\\<rbrakk>\n                \\<Longrightarrow> t i \\<le> pSum t m;\n        test_seq t; i < Suc m\\<rbrakk>\n       \\<Longrightarrow> t i \\<le> pSum t (Suc m)", "hence \"test_seq t \\<Longrightarrow> i<n \\<Longrightarrow> t i \\<le> pSum t (Suc n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>test_seq t; i < n\\<rbrakk> \\<Longrightarrow> t i \\<le> pSum t n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>test_seq t; i < n\\<rbrakk>\n    \\<Longrightarrow> t i \\<le> pSum t (Suc n)", "by (smt (z3) pSum.simps(2) pSum_test tests_dual.sba_dual.upper_bound_left tests_dual.transitive test_seq_def)"], ["proof (state)\nthis:\n  \\<lbrakk>test_seq t; i < n\\<rbrakk>\n  \\<Longrightarrow> t i \\<le> pSum t (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>test_seq t; i < m\\<rbrakk>\n                \\<Longrightarrow> t i \\<le> pSum t m;\n        test_seq t; i < Suc m\\<rbrakk>\n       \\<Longrightarrow> t i \\<le> pSum t (Suc m)", "thus \"test_seq t \\<Longrightarrow> i<Suc n \\<Longrightarrow> t i \\<le> pSum t (Suc n)\""], ["proof (prove)\nusing this:\n  \\<lbrakk>test_seq t; i < n\\<rbrakk>\n  \\<Longrightarrow> t i \\<le> pSum t (Suc n)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>test_seq t; i < Suc n\\<rbrakk>\n    \\<Longrightarrow> t i \\<le> pSum t (Suc n)", "by (metis less_Suc_eq pSum.simps(2) pSum_test tests_dual.sba_dual.upper_bound_right test_seq_def)"], ["proof (state)\nthis:\n  \\<lbrakk>test_seq t; i < Suc n\\<rbrakk>\n  \\<Longrightarrow> t i \\<le> pSum t (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pSum_below:\n  \"test_seq t \\<Longrightarrow> (\\<forall>m<k . t m * -p \\<le> -q) \\<Longrightarrow> pSum t k * -p \\<le> -q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>test_seq t; \\<forall>m<k. t m * - p \\<le> - q\\<rbrakk>\n    \\<Longrightarrow> pSum t k * - p \\<le> - q", "apply (induct k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>test_seq t; \\<forall>m<0. t m * - p \\<le> - q\\<rbrakk>\n    \\<Longrightarrow> pSum t 0 * - p \\<le> - q\n 2. \\<And>k.\n       \\<lbrakk>\\<lbrakk>test_seq t;\n                 \\<forall>m<k. t m * - p \\<le> - q\\<rbrakk>\n                \\<Longrightarrow> pSum t k * - p \\<le> - q;\n        test_seq t; \\<forall>m<Suc k. t m * - p \\<le> - q\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc k) * - p \\<le> - q", "apply (simp add: tests_dual.top_greatest)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>\\<lbrakk>test_seq t;\n                 \\<forall>m<k. t m * - p \\<le> - q\\<rbrakk>\n                \\<Longrightarrow> pSum t k * - p \\<le> - q;\n        test_seq t; \\<forall>m<Suc k. t m * - p \\<le> - q\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc k) * - p \\<le> - q", "by (smt (verit, ccfv_threshold) tests_dual.sup_right_dist_inf pSum.simps(2) pSum_test test_seq_def sub_mult_closed less_Suc_eq tests_dual.sba_dual.sub_associative tests_dual.sba_dual.sub_less_eq_def)"], ["", "lemma pSum_below_nat:\n  \"nat_test t s \\<Longrightarrow> (\\<forall>m<k . t m * -p \\<le> -q) \\<Longrightarrow> pSum t k * -p \\<le> -q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nat_test t s; \\<forall>m<k. t m * - p \\<le> - q\\<rbrakk>\n    \\<Longrightarrow> pSum t k * - p \\<le> - q", "by (simp add: nat_test_seq pSum_below)"], ["", "lemma pSum_below_sum:\n  \"nat_test t s \\<Longrightarrow> pSum t x \\<le> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_test t s \\<Longrightarrow> pSum t x \\<le> s", "by (smt (verit, ccfv_threshold) tests_dual.sup_right_unit nat_test_def one_def pSum_below_nat pSum_test_nat)"], ["", "lemma ascending_chain_sup_left:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . -p \\<squnion> t n) \\<and> test_seq (\\<lambda>n . -p \\<squnion> t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ascending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> ascending_chain\n                       (\\<lambda>n. - p \\<squnion> t n) \\<and>\n                      test_seq (\\<lambda>n. - p \\<squnion> t n)", "by (smt (z3) ord.ascending_chain_def tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.sub_sup_right_isotone test_seq_def)"], ["", "lemma ascending_chain_sup_right:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . t n \\<squnion> -p) \\<and> test_seq (\\<lambda>n . t n \\<squnion> -p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ascending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> ascending_chain\n                       (\\<lambda>n. t n \\<squnion> - p) \\<and>\n                      test_seq (\\<lambda>n. t n \\<squnion> - p)", "by (smt ascending_chain_def tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.sub_sup_left_isotone test_seq_def)"], ["", "lemma ascending_chain_mult_left:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . -p * t n) \\<and> test_seq (\\<lambda>n . -p * t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ascending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> ascending_chain (\\<lambda>n. - p * t n) \\<and>\n                      test_seq (\\<lambda>n. - p * t n)", "by (smt (z3) ascending_chain_def sub_mult_closed tests_dual.sba_dual.reflexive tests_dual.sup_isotone test_seq_def)"], ["", "lemma ascending_chain_mult_right:\n  \"ascending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> ascending_chain (\\<lambda>n . t n * -p) \\<and> test_seq (\\<lambda>n . t n * -p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ascending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> ascending_chain (\\<lambda>n. t n * - p) \\<and>\n                      test_seq (\\<lambda>n. t n * - p)", "by (smt (z3) ascending_chain_def sub_mult_closed tests_dual.sba_dual.reflexive tests_dual.sup_isotone test_seq_def)"], ["", "lemma descending_chain_sup_left:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . -p \\<squnion> t n) \\<and> test_seq (\\<lambda>n . -p \\<squnion> t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>descending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> descending_chain\n                       (\\<lambda>n. - p \\<squnion> t n) \\<and>\n                      test_seq (\\<lambda>n. - p \\<squnion> t n)", "by (smt descending_chain_def tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.sub_sup_right_isotone test_seq_def)"], ["", "lemma descending_chain_sup_right:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . t n \\<squnion> -p) \\<and> test_seq (\\<lambda>n . t n \\<squnion> -p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>descending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> descending_chain\n                       (\\<lambda>n. t n \\<squnion> - p) \\<and>\n                      test_seq (\\<lambda>n. t n \\<squnion> - p)", "by (smt descending_chain_def tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.sub_sup_left_isotone test_seq_def)"], ["", "lemma descending_chain_mult_left:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . -p * t n) \\<and> test_seq (\\<lambda>n . -p * t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>descending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> descending_chain (\\<lambda>n. - p * t n) \\<and>\n                      test_seq (\\<lambda>n. - p * t n)", "by (smt (z3) descending_chain_def sub_mult_closed tests_dual.sba_dual.reflexive tests_dual.sup_isotone test_seq_def)"], ["", "lemma descending_chain_mult_right:\n  \"descending_chain t \\<Longrightarrow> test_seq t \\<Longrightarrow> descending_chain (\\<lambda>n . t n * -p) \\<and> test_seq (\\<lambda>n . t n * -p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>descending_chain t; test_seq t\\<rbrakk>\n    \\<Longrightarrow> descending_chain (\\<lambda>n. t n * - p) \\<and>\n                      test_seq (\\<lambda>n. t n * - p)", "by (smt (z3) descending_chain_def sub_mult_closed tests_dual.sba_dual.reflexive tests_dual.sup_isotone test_seq_def)"], ["", "end"], ["", "end"]]}