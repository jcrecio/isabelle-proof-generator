{"file_name": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras/Base.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras", "problem_names": ["lemma ascending_chain_k:\n  \"ascending_chain f \\<Longrightarrow> f m \\<le> f (m + k)\"", "lemma ascending_chain_isotone:\n  \"ascending_chain f \\<Longrightarrow> m \\<le> k \\<Longrightarrow> f m \\<le> f k\"", "lemma ascending_chain_comparable:\n  \"ascending_chain f \\<Longrightarrow> f k \\<le> f m \\<or> f m \\<le> f k\"", "lemma ascending_chain_chain:\n  \"ascending_chain f \\<Longrightarrow> chain (range f)\"", "lemma chain_directed:\n  \"X \\<noteq> {} \\<Longrightarrow> chain X \\<Longrightarrow> directed X\"", "lemma ascending_chain_directed:\n  \"ascending_chain f \\<Longrightarrow> directed (range f)\"", "lemma descending_chain_k:\n  \"descending_chain f \\<Longrightarrow> f (m + k) \\<le> f m\"", "lemma descending_chain_antitone:\n  \"descending_chain f \\<Longrightarrow> m \\<le> k \\<Longrightarrow> f k \\<le> f m\"", "lemma descending_chain_comparable:\n  \"descending_chain f \\<Longrightarrow> f k \\<le> f m \\<or> f m \\<le> f k\"", "lemma descending_chain_chain:\n  \"descending_chain f \\<Longrightarrow> chain (range f)\"", "lemma chain_co_directed:\n  \"X \\<noteq> {} \\<Longrightarrow> chain X \\<Longrightarrow> co_directed X\"", "lemma descending_chain_codirected:\n  \"descending_chain f \\<Longrightarrow> co_directed (range f)\"", "lemma ascending_chain_left_sup:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . x \\<squnion> f n)\"", "lemma ascending_chain_right_sup:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . f n \\<squnion> x)\"", "lemma descending_chain_left_add:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . x \\<squnion> f n)\"", "lemma descending_chain_right_add:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . f n \\<squnion> x)\"", "lemma pSum0_below:\n \"\\<forall>i . f i \\<le> x \\<Longrightarrow> pSum0 f m \\<le> x\"", "lemma ascending_chain_left_mult:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . x * f n)\"", "lemma ascending_chain_right_mult:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . f n * x)\"", "lemma descending_chain_left_mult:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . x * f n)\"", "lemma descending_chain_right_mult:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . f n * x)\"", "lemma sup_Sup:\n  \"A \\<noteq> {} \\<Longrightarrow> sup x (Sup A) = Sup ((sup x) ` A)\"", "lemma sup_SUP:\n  \"Y \\<noteq> {} \\<Longrightarrow> sup x (SUP y\\<in>Y . f y) = (SUP y\\<in>Y. sup x (f y))\"", "lemma inf_Inf:\n  \"A \\<noteq> {} \\<Longrightarrow> inf x (Inf A) = Inf ((inf x) ` A)\"", "lemma inf_INF:\n  \"Y \\<noteq> {} \\<Longrightarrow> inf x (INF y\\<in>Y . f y) = (INF y\\<in>Y. inf x (f y))\"", "lemma SUP_image_id[simp]:\n  \"(SUP x\\<in>f`A . x) = (SUP x\\<in>A . f x)\"", "lemma INF_image_id[simp]:\n  \"(INF x\\<in>f`A . x) = (INF x\\<in>A . f x)\"", "lemma image_Collect_2:\n  \"f ` { g x | x . P x } = { f (g x) | x . P x }\"", "lemma id_power:\n  \"id^m = id\"", "lemma power_zero_id:\n  \"f^0 = id\"", "lemma power_succ_unfold:\n  \"f^Suc m = f \\<circ> f^m\"", "lemma power_succ_unfold_ext:\n  \"(f^Suc m) x = f ((f^m) x)\""], "translations": [["", "lemma ascending_chain_k:\n  \"ascending_chain f \\<Longrightarrow> f m \\<le> f (m + k)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow> f m \\<le> f (m + k)", "apply (induct k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. ascending_chain f \\<Longrightarrow> f m \\<le> f (m + 0)\n 2. \\<And>k.\n       \\<lbrakk>ascending_chain f \\<Longrightarrow> f m \\<le> f (m + k);\n        ascending_chain f\\<rbrakk>\n       \\<Longrightarrow> f m \\<le> f (m + Suc k)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>ascending_chain f \\<Longrightarrow> f m \\<le> f (m + k);\n        ascending_chain f\\<rbrakk>\n       \\<Longrightarrow> f m \\<le> f (m + Suc k)", "using le_add1 lift_Suc_mono_le ord.ascending_chain_def"], ["proof (prove)\nusing this:\n  ?n \\<le> ?n + ?m\n  \\<lbrakk>\\<And>n. ?f n \\<le> ?f (Suc n); ?n \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?f ?n \\<le> ?f ?n'\n  ord.ascending_chain ?less_eq ?f \\<equiv>\n  \\<forall>n. ?less_eq (?f n) (?f (Suc n))\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>ascending_chain f \\<Longrightarrow> f m \\<le> f (m + k);\n        ascending_chain f\\<rbrakk>\n       \\<Longrightarrow> f m \\<le> f (m + Suc k)", "by blast"], ["", "lemma ascending_chain_isotone:\n  \"ascending_chain f \\<Longrightarrow> m \\<le> k \\<Longrightarrow> f m \\<le> f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ascending_chain f; m \\<le> k\\<rbrakk>\n    \\<Longrightarrow> f m \\<le> f k", "using lift_Suc_mono_le ord.ascending_chain_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>n. ?f n \\<le> ?f (Suc n); ?n \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?f ?n \\<le> ?f ?n'\n  ord.ascending_chain ?less_eq ?f \\<equiv>\n  \\<forall>n. ?less_eq (?f n) (?f (Suc n))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>ascending_chain f; m \\<le> k\\<rbrakk>\n    \\<Longrightarrow> f m \\<le> f k", "by blast"], ["", "lemma ascending_chain_comparable:\n  \"ascending_chain f \\<Longrightarrow> f k \\<le> f m \\<or> f m \\<le> f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow> f k \\<le> f m \\<or> f m \\<le> f k", "by (meson ascending_chain_isotone linear)"], ["", "lemma ascending_chain_chain:\n  \"ascending_chain f \\<Longrightarrow> chain (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow> chain (range f)", "by (simp add: ascending_chain_comparable chain_def)"], ["", "lemma chain_directed:\n  \"X \\<noteq> {} \\<Longrightarrow> chain X \\<Longrightarrow> directed X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<noteq> {}; chain X\\<rbrakk> \\<Longrightarrow> directed X", "by (metis chain_def directed_def)"], ["", "lemma ascending_chain_directed:\n  \"ascending_chain f \\<Longrightarrow> directed (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow> directed (range f)", "by (simp add: ascending_chain_chain chain_directed)"], ["", "lemma descending_chain_k:\n  \"descending_chain f \\<Longrightarrow> f (m + k) \\<le> f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow> f (m + k) \\<le> f m", "apply (induct k)"], ["proof (prove)\ngoal (2 subgoals):\n 1. descending_chain f \\<Longrightarrow> f (m + 0) \\<le> f m\n 2. \\<And>k.\n       \\<lbrakk>descending_chain f \\<Longrightarrow> f (m + k) \\<le> f m;\n        descending_chain f\\<rbrakk>\n       \\<Longrightarrow> f (m + Suc k) \\<le> f m", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>descending_chain f \\<Longrightarrow> f (m + k) \\<le> f m;\n        descending_chain f\\<rbrakk>\n       \\<Longrightarrow> f (m + Suc k) \\<le> f m", "using le_add1 lift_Suc_antimono_le ord.descending_chain_def"], ["proof (prove)\nusing this:\n  ?n \\<le> ?n + ?m\n  \\<lbrakk>\\<And>n. ?f (Suc n) \\<le> ?f n; ?n \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?f ?n' \\<le> ?f ?n\n  ord.descending_chain ?less_eq ?f \\<equiv>\n  \\<forall>n. ?less_eq (?f (Suc n)) (?f n)\n\ngoal (1 subgoal):\n 1. \\<And>k.\n       \\<lbrakk>descending_chain f \\<Longrightarrow> f (m + k) \\<le> f m;\n        descending_chain f\\<rbrakk>\n       \\<Longrightarrow> f (m + Suc k) \\<le> f m", "by blast"], ["", "lemma descending_chain_antitone:\n  \"descending_chain f \\<Longrightarrow> m \\<le> k \\<Longrightarrow> f k \\<le> f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>descending_chain f; m \\<le> k\\<rbrakk>\n    \\<Longrightarrow> f k \\<le> f m", "using descending_chain_def lift_Suc_antimono_le"], ["proof (prove)\nusing this:\n  descending_chain ?f \\<equiv> \\<forall>n. ?f (Suc n) \\<le> ?f n\n  \\<lbrakk>\\<And>n. ?f (Suc n) \\<le> ?f n; ?n \\<le> ?n'\\<rbrakk>\n  \\<Longrightarrow> ?f ?n' \\<le> ?f ?n\n\ngoal (1 subgoal):\n 1. \\<lbrakk>descending_chain f; m \\<le> k\\<rbrakk>\n    \\<Longrightarrow> f k \\<le> f m", "by blast"], ["", "lemma descending_chain_comparable:\n  \"descending_chain f \\<Longrightarrow> f k \\<le> f m \\<or> f m \\<le> f k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow> f k \\<le> f m \\<or> f m \\<le> f k", "by (meson descending_chain_antitone nat_le_linear)"], ["", "lemma descending_chain_chain:\n  \"descending_chain f \\<Longrightarrow> chain (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow> chain (range f)", "by (simp add: descending_chain_comparable chain_def)"], ["", "lemma chain_co_directed:\n  \"X \\<noteq> {} \\<Longrightarrow> chain X \\<Longrightarrow> co_directed X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>X \\<noteq> {}; chain X\\<rbrakk> \\<Longrightarrow> co_directed X", "by (metis chain_def co_directed_def)"], ["", "lemma descending_chain_codirected:\n  \"descending_chain f \\<Longrightarrow> co_directed (range f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow> co_directed (range f)", "by (simp add: chain_co_directed descending_chain_chain)"], ["", "end"], ["", "context semilattice_sup\nbegin"], ["", "lemma ascending_chain_left_sup:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . x \\<squnion> f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow>\n    ascending_chain (\\<lambda>n. x \\<squnion> f n)", "using ascending_chain_def sup_right_isotone"], ["proof (prove)\nusing this:\n  ascending_chain ?f \\<equiv> \\<forall>n. ?f n \\<le> ?f (Suc n)\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<squnion> ?x \\<le> ?z \\<squnion> ?y\n\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow>\n    ascending_chain (\\<lambda>n. x \\<squnion> f n)", "by blast"], ["", "lemma ascending_chain_right_sup:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . f n \\<squnion> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow>\n    ascending_chain (\\<lambda>n. f n \\<squnion> x)", "using ascending_chain_def sup_left_isotone"], ["proof (prove)\nusing this:\n  ascending_chain ?f \\<equiv> \\<forall>n. ?f n \\<le> ?f (Suc n)\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<squnion> ?z \\<le> ?y \\<squnion> ?z\n\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow>\n    ascending_chain (\\<lambda>n. f n \\<squnion> x)", "by auto"], ["", "lemma descending_chain_left_add:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . x \\<squnion> f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow>\n    descending_chain (\\<lambda>n. x \\<squnion> f n)", "using descending_chain_def sup_right_isotone"], ["proof (prove)\nusing this:\n  descending_chain ?f \\<equiv> \\<forall>n. ?f (Suc n) \\<le> ?f n\n  ?x \\<le> ?y \\<Longrightarrow> ?z \\<squnion> ?x \\<le> ?z \\<squnion> ?y\n\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow>\n    descending_chain (\\<lambda>n. x \\<squnion> f n)", "by blast"], ["", "lemma descending_chain_right_add:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . f n \\<squnion> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow>\n    descending_chain (\\<lambda>n. f n \\<squnion> x)", "using descending_chain_def sup_left_isotone"], ["proof (prove)\nusing this:\n  descending_chain ?f \\<equiv> \\<forall>n. ?f (Suc n) \\<le> ?f n\n  ?x \\<le> ?y \\<Longrightarrow> ?x \\<squnion> ?z \\<le> ?y \\<squnion> ?z\n\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow>\n    descending_chain (\\<lambda>n. f n \\<squnion> x)", "by auto"], ["", "primrec pSum0 :: \"(nat \\<Rightarrow> 'a) \\<Rightarrow> nat \\<Rightarrow> 'a\"\n  where \"pSum0 f 0 = f 0\"\n      | \"pSum0 f (Suc m) = pSum0 f m \\<squnion> f m\""], ["", "lemma pSum0_below:\n \"\\<forall>i . f i \\<le> x \\<Longrightarrow> pSum0 f m \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. f i \\<le> x \\<Longrightarrow> pSum0 f m \\<le> x", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>i. f i \\<le> x \\<Longrightarrow> pSum0 f 0 \\<le> x\n 2. \\<And>m.\n       \\<lbrakk>\\<forall>i. f i \\<le> x \\<Longrightarrow> pSum0 f m \\<le> x;\n        \\<forall>i. f i \\<le> x\\<rbrakk>\n       \\<Longrightarrow> pSum0 f (Suc m) \\<le> x", "by auto"], ["", "end"], ["", "context non_associative_left_semiring\nbegin"], ["", "lemma ascending_chain_left_mult:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . x * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow>\n    ascending_chain (\\<lambda>n. x * f n)", "by (simp add: mult_right_isotone ord.ascending_chain_def)"], ["", "lemma ascending_chain_right_mult:\n  \"ascending_chain f \\<Longrightarrow> ascending_chain (\\<lambda>n . f n * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ascending_chain f \\<Longrightarrow>\n    ascending_chain (\\<lambda>n. f n * x)", "by (simp add: mult_left_isotone ord.ascending_chain_def)"], ["", "lemma descending_chain_left_mult:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . x * f n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow>\n    descending_chain (\\<lambda>n. x * f n)", "by (simp add: descending_chain_def mult_right_isotone)"], ["", "lemma descending_chain_right_mult:\n  \"descending_chain f \\<Longrightarrow> descending_chain (\\<lambda>n . f n * x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. descending_chain f \\<Longrightarrow>\n    descending_chain (\\<lambda>n. f n * x)", "by (simp add: descending_chain_def mult_left_isotone)"], ["", "end"], ["", "context complete_lattice\nbegin"], ["", "lemma sup_Sup:\n  \"A \\<noteq> {} \\<Longrightarrow> sup x (Sup A) = Sup ((sup x) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    x \\<squnion> Sup A = Sup ((\\<squnion>) x ` A)", "apply (rule order.antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    x \\<squnion> Sup A \\<le> Sup ((\\<squnion>) x ` A)\n 2. A \\<noteq> {} \\<Longrightarrow>\n    Sup ((\\<squnion>) x ` A) \\<le> x \\<squnion> Sup A", "apply (meson ex_in_conv imageI SUP_upper2 Sup_mono sup.boundedI sup_left_divisibility sup_right_divisibility)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    Sup ((\\<squnion>) x ` A) \\<le> x \\<squnion> Sup A", "by (meson SUP_least Sup_upper sup_right_isotone)"], ["", "lemma sup_SUP:\n  \"Y \\<noteq> {} \\<Longrightarrow> sup x (SUP y\\<in>Y . f y) = (SUP y\\<in>Y. sup x (f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    x \\<squnion> Sup (f ` Y) = (SUP y\\<in>Y. x \\<squnion> f y)", "apply (subst sup_Sup)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Y \\<noteq> {} \\<Longrightarrow> f ` Y \\<noteq> {}\n 2. Y \\<noteq> {} \\<Longrightarrow>\n    Sup ((\\<squnion>) x ` f ` Y) = (SUP y\\<in>Y. x \\<squnion> f y)", "by (simp_all add: image_image)"], ["", "lemma inf_Inf:\n  \"A \\<noteq> {} \\<Longrightarrow> inf x (Inf A) = Inf ((inf x) ` A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    x \\<sqinter> Inf A = Inf ((\\<sqinter>) x ` A)", "apply (rule order.antisym)"], ["proof (prove)\ngoal (2 subgoals):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    x \\<sqinter> Inf A \\<le> Inf ((\\<sqinter>) x ` A)\n 2. A \\<noteq> {} \\<Longrightarrow>\n    Inf ((\\<sqinter>) x ` A) \\<le> x \\<sqinter> Inf A", "apply (meson INF_greatest Inf_lower inf.sup_right_isotone)"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> {} \\<Longrightarrow>\n    Inf ((\\<sqinter>) x ` A) \\<le> x \\<sqinter> Inf A", "by (simp add: INF_inf_const1)"], ["", "lemma inf_INF:\n  \"Y \\<noteq> {} \\<Longrightarrow> inf x (INF y\\<in>Y . f y) = (INF y\\<in>Y. inf x (f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<noteq> {} \\<Longrightarrow>\n    x \\<sqinter> Inf (f ` Y) = (INF y\\<in>Y. x \\<sqinter> f y)", "apply (subst inf_Inf)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Y \\<noteq> {} \\<Longrightarrow> f ` Y \\<noteq> {}\n 2. Y \\<noteq> {} \\<Longrightarrow>\n    Inf ((\\<sqinter>) x ` f ` Y) = (INF y\\<in>Y. x \\<sqinter> f y)", "by (simp_all add: image_image)"], ["", "lemma SUP_image_id[simp]:\n  \"(SUP x\\<in>f`A . x) = (SUP x\\<in>A . f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SUP x\\<in>f ` A. x) = Sup (f ` A)", "by simp"], ["", "lemma INF_image_id[simp]:\n  \"(INF x\\<in>f`A . x) = (INF x\\<in>A . f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (INF x\\<in>f ` A. x) = Inf (f ` A)", "by simp"], ["", "end"], ["", "lemma image_Collect_2:\n  \"f ` { g x | x . P x } = { f (g x) | x . P x }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ` {g x |x. P x} = {f (g x) |x. P x}", "by auto"], ["", "text \\<open>The following instantiation and four lemmas are from Jose Divason Mallagaray.\\<close>"], ["", "instantiation \"fun\" :: (type, type) power\nbegin"], ["", "definition one_fun :: \"'a \\<Rightarrow> 'a\"\n  where one_fun_def: \"one_fun \\<equiv> id\""], ["", "definition times_fun :: \"('a \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a) \\<Rightarrow> ('a \\<Rightarrow> 'a)\"\n  where times_fun_def: \"times_fun \\<equiv> comp\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS('a \\<Rightarrow> 'b, power_class)", "by intro_classes"], ["", "end"], ["", "lemma id_power:\n  \"id^m = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. id ^ m = id", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. id ^ 0 = id\n 2. \\<And>m. id ^ m = id \\<Longrightarrow> id ^ Suc m = id", "apply (simp add: one_fun_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. id ^ m = id \\<Longrightarrow> id ^ Suc m = id", "by (simp add: times_fun_def)"], ["", "lemma power_zero_id:\n  \"f^0 = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ^ 0 = id", "by (simp add: one_fun_def)"], ["", "lemma power_succ_unfold:\n  \"f^Suc m = f \\<circ> f^m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f ^ Suc m = f \\<circ> f ^ m", "by (simp add: times_fun_def)"], ["", "lemma power_succ_unfold_ext:\n  \"(f^Suc m) x = f ((f^m) x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^ Suc m) x = f ((f ^ m) x)", "by (simp add: times_fun_def)"], ["", "end"]]}