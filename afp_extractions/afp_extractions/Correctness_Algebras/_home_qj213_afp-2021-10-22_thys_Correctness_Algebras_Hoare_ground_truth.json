{"file_name": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras/Hoare.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras", "problem_names": ["lemma ite_pre_then:\n  \"-p*(x\\<lhd>-p\\<rhd>y\\<guillemotleft>-q) = -p*(x\\<guillemotleft>-q)\"", "lemma ite_pre_else:\n  \"--p*(x\\<lhd>-p\\<rhd>y\\<guillemotleft>-q) = --p*(y\\<guillemotleft>-q)\"", "lemma ite_import_mult_then:\n  \"-p*-q \\<le> x\\<guillemotleft>-r \\<Longrightarrow> -p*-q \\<le> x\\<lhd>-p\\<rhd>y\\<guillemotleft>-r\"", "lemma ite_import_mult_else:\n  \"--p*-q \\<le> y\\<guillemotleft>-r \\<Longrightarrow> --p*-q \\<le> x\\<lhd>-p\\<rhd>y\\<guillemotleft>-r\"", "lemma ite_import_mult:\n  \"-p*-q \\<le> x\\<guillemotleft>-r \\<Longrightarrow> --p*-q \\<le> y\\<guillemotleft>-r \\<Longrightarrow> -q \\<le> x\\<lhd>-p\\<rhd>y\\<guillemotleft>-r\"", "lemma while_pre_then:\n  \"-p*(-p\\<star>x\\<guillemotleft>-q) = -p*(x\\<guillemotleft>-p\\<star>x\\<guillemotleft>-q)\"", "lemma while_pre_else:\n  \"--p*(-p\\<star>x\\<guillemotleft>-q) = --p*-q\"", "lemma while_pre_sub_1:\n  \"-p\\<star>x\\<guillemotleft>-q \\<le> x*(-p\\<star>x)\\<lhd>-p\\<rhd>1\\<guillemotleft>-q\"", "lemma while_pre_sub_2:\n  \"-p\\<star>x\\<guillemotleft>-q \\<le> x\\<lhd>-p\\<rhd>1\\<guillemotleft>-p\\<star>x\\<guillemotleft>-q\"", "lemma while_pre_compl:\n  \"--p \\<le> -p\\<star>x\\<guillemotleft>--p\"", "lemma while_pre_compl_one:\n  \"--p \\<le> -p\\<star>x\\<guillemotleft>1\"", "lemma while_export_equiv:\n  \"-q \\<le> -p\\<star>x\\<guillemotleft>1 \\<longleftrightarrow> -p*-q \\<le> -p\\<star>x\\<guillemotleft>1\"", "lemma nat_test_pre:\n  assumes \"nat_test t s\"\n      and \"-q \\<le> s\"\n      and \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\"", "lemma nat_test_pre_1:\n  assumes \"nat_test t s\"\n      and \"-r \\<le> s\"\n      and \"-r \\<le> -q\"\n      and \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-r \\<le> -p\\<star>x\\<guillemotleft>--p*-q\"", "lemma nat_test_pre_2:\n  assumes \"nat_test t s\"\n      and \"-r \\<le> s\"\n      and \"\\<forall>n . t n*-p \\<le> x\\<guillemotleft>pSum t n\"\n    shows \"-r \\<le> -p\\<star>x\\<guillemotleft>1\"", "lemma nat_test_pre_3:\n  assumes \"nat_test t s\"\n      and \"-q \\<le> s\"\n      and \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-q \\<le> -p\\<star>x\\<guillemotleft>1\"", "lemma aL_test:\n  \"aL = --aL\"", "lemma test_expression_test:\n  \"p \\<in> Test_expression \\<Longrightarrow> p = --p\"", "lemma disj_test:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Test_expression \\<Longrightarrow> p\\<squnion>q \\<in> Test_expression\"", "lemma zero_test_expression:\n  \"bot \\<in> Test_expression\"", "lemma one_test_expression:\n  \"1 \\<in> Test_expression\"", "lemma pSum_test_expression:\n  \"(\\<forall>n . t n \\<in> Test_expression) \\<Longrightarrow> pSum t m \\<in> Test_expression\"", "lemma one_while_program:\n  \"1 \\<in> While_program\"", "lemma power_while_program:\n  \"x \\<in> While_program \\<Longrightarrow> x^m \\<in> While_program\"", "lemma pre_expression_test:\n  \"p \\<in> Pre_expression \\<Longrightarrow> p = --p\"", "lemma disj_pre:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> p\\<squnion>q \\<in> Pre_expression\"", "lemma zero_pre_expression:\n  \"bot \\<in> Pre_expression\"", "lemma one_pre_expression:\n  \"1 \\<in> Pre_expression\"", "lemma pSum_pre_expression:\n  \"(\\<forall>n . t n \\<in> Pre_expression) \\<Longrightarrow> pSum t m \\<in> Pre_expression\"", "lemma aL_pre_expression:\n  \"aL \\<in> Pre_expression\"", "lemma tfun_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> tfun p x q r = --tfun p x q r\"", "lemma tfun_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> tfun p x q r \\<in> Pre_expression\"", "lemma tfun_iso:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> r \\<le> s \\<Longrightarrow> tfun p x q r \\<le> tfun p x q s\"", "lemma tseq_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> tseq p x q r m = --tseq p x q r m\"", "lemma tseq_test_seq:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> test_seq (tseq p x q r)\"", "lemma tseq_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> tseq p x q r m \\<in> Pre_expression\"", "lemma tsum_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> tsum p x q r = --tsum p x q r\"", "lemma t_fun_test:\n  \"q = --q \\<Longrightarrow> tfun (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tfun (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma t_fun_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tfun (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<in> Pre_expression\"", "lemma t_seq_test:\n  \"q = --q \\<Longrightarrow> tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m = --tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m\"", "lemma t_seq_test_seq:\n  \"q = --q \\<Longrightarrow> test_seq (tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)))\"", "lemma t_seq_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<in> Pre_expression\"", "lemma t_sum_test:\n  \"q = --q \\<Longrightarrow> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma tfun2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> tfun2 p q x r s = --tfun2 p q x r s\"", "lemma tfun2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> s \\<in> Pre_expression \\<Longrightarrow> tfun2 p q x r s \\<in> Pre_expression\"", "lemma tfun2_iso:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s1 = --s1 \\<Longrightarrow> s2 = --s2 \\<Longrightarrow> s1 \\<le> s2 \\<Longrightarrow> tfun2 p q x r s1 \\<le> tfun2 p q x r s2\"", "lemma tseq2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> tseq2 p q x r s m = --tseq2 p q x r s m\"", "lemma tseq2_test_seq:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> test_seq (tseq2 p q x r s)\"", "lemma tseq2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> s \\<in> Pre_expression \\<Longrightarrow> tseq2 p q x r s m \\<in> Pre_expression\"", "lemma tsum2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> tsum2 p q x r s = --tsum2 p q x r s\"", "lemma t_fun2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> tfun2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tfun2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma t_fun2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tfun2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<in> Pre_expression\"", "lemma t_seq2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m = --tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m\"", "lemma t_seq2_test_seq:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> test_seq (tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)))\"", "lemma t_seq2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<in> Pre_expression\"", "lemma t_sum2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma t_seq2_below_t_seq:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n    shows \"tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m\"", "lemma t_seq2_below_t_sum:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma t_sum2_below_t_sum:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma t_seq2_below_w:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> p\\<star>x\\<guillemotleft>q\"", "lemma t_sum2_below_w:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<le> p\\<star>x\\<guillemotleft>q\"", "lemma t_sum2_w:\n  assumes \"aL = 1\"\n      and \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = p\\<star>x\\<guillemotleft>q\"", "lemma derived_type:\n  \"p\\<lparr>x\\<rparr>q \\<Longrightarrow> p \\<in> Pre_expression \\<and> q \\<in> Pre_expression \\<and> x \\<in> While_program\"", "lemma cons_pre_trip:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q\\<lparr>y\\<rparr>r \\<Longrightarrow> p*q\\<lparr>y\\<rparr>r\"", "lemma cons_post_trip:\n  \"q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> p\\<lparr>y\\<rparr>q*r \\<longrightarrow> p\\<lparr>y\\<rparr>r\"", "lemma while_soundness_0:\n  \"-p*-q \\<le> x\\<guillemotleft>-q \\<Longrightarrow> -q*aL \\<le> -p\\<star>x\\<guillemotleft>--p*-q\"", "lemma while_soundness_1:\n  assumes \"test_seq t\"\n      and \"-q \\<le> Sum t\"\n      and \"t 0*-p*-q \\<le> x\\<guillemotleft>aL*-q\"\n      and \"\\<forall>n>0 . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\"", "lemma while_soundness_2:\n  assumes \"test_seq t\"\n      and \"-r \\<le> Sum t\"\n      and \"\\<forall>n . t n*-p \\<le> x\\<guillemotleft>pSum t n\"\n    shows \"-r \\<le> -p\\<star>x\\<guillemotleft>1\"", "theorem soundness:\n  \"p\\<lparr>x\\<rparr>q \\<Longrightarrow> p\\<langle>x\\<rangle>q\"", "lemma aL_pre_import_equal:\n  \"(x\\<guillemotleft>-q)*aL = (x\\<guillemotleft>-q*aL)*aL\"", "lemma aL_pre_below_t_seq2:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n    shows \"(p\\<star>x\\<guillemotleft>q)*aL \\<le> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) 0\"", "lemma t_seq2_ascending:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) (Suc m)\"", "lemma t_seq2_ascending_chain:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> ascending_chain (tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)))\"", "lemma while_completeness_var:\n  assumes \"-p*(x\\<guillemotleft>-q)\\<squnion>-r \\<le> -q\"\n    shows \"-p\\<star>x\\<guillemotleft>-r \\<le> -q\\<squnion>aL\"", "lemma while_completeness_sum:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"p\\<star>x\\<guillemotleft>q \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma while_complete:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n      and \"\\<forall>r\\<in>Pre_expression . x\\<guillemotleft>r\\<lparr>x\\<rparr>r\"\n    shows \"p\\<star>x\\<guillemotleft>q\\<lparr>p\\<star>x\\<rparr>q\"", "lemma pre_completeness:\n  \"x \\<in> While_program \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x\\<guillemotleft>q\\<lparr>x\\<rparr>q\"", "theorem completeness:\n  \"p\\<langle>x\\<rangle>q \\<Longrightarrow> p\\<lparr>x\\<rparr>q\"", "theorem soundness_completeness:\n  \"p\\<lparr>x\\<rparr>q \\<longleftrightarrow> p\\<langle>x\\<rangle>q\"", "lemma rule_cons_pre:\n  \"-p \\<le> -q \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p\\<lbrace>x\\<rbrace>-r\"", "lemma rule_cons_pre_mult:\n  \"-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p*-q\\<lbrace>x\\<rbrace>-r\"", "lemma rule_cons_pre_plus:\n  \"-p\\<squnion>-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p\\<lbrace>x\\<rbrace>-r\"", "lemma rule_cons_post:\n  \"-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -r \\<le> -s \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-s\"", "lemma rule_cons_post_mult:\n  \"-q\\<lbrace>x\\<rbrace>-r*-s \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-s\"", "lemma rule_cons_post_plus:\n  \"-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-r\\<squnion>-s\"", "lemma rule_disj_pre:\n \"-p\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p\\<squnion>-q\\<lbrace>x\\<rbrace>-r\"", "lemma valid_hoare_triple_same:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> p\\<lbrace>x\\<rbrace>q = p\\<langle>x\\<rangle>q\"", "lemma derived_hoare_triple_same:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> p\\<lbrace>x\\<rbrace>q = p\\<lparr>x\\<rparr>q\"", "lemma valid_rule_disj:\n  assumes \"-p\\<lbrace>x\\<rbrace>-r\"\n      and \"-q\\<lbrace>x\\<rbrace>-s\"\n    shows \"-p\\<squnion>-q\\<lbrace>x\\<rbrace>-r\\<squnion>-s\"", "lemma nat_test_rule_while:\n  \"nat_test t s \\<Longrightarrow> -q \\<le> s \\<Longrightarrow> (\\<forall>n . t n*-p*-q\\<lbrace>x\\<rbrace>pSum t n*-q) \\<Longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\"", "lemma test_seq_rule_while:\n  \"test_seq t \\<Longrightarrow> -q \\<le> Sum t \\<Longrightarrow> t 0*-p*-q\\<lbrace>x\\<rbrace>aL*-q \\<Longrightarrow> (\\<forall>n>0 . t n*-p*-q\\<lbrace>x\\<rbrace>pSum t n*-q) \\<Longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\"", "lemma rule_bot:\n  \"bot\\<lbrace>x\\<rbrace>-p\"", "lemma rule_skip:\n  \"-p\\<lbrace>1\\<rbrace>-p\"", "lemma rule_example_4:\n  assumes \"test_seq t\"\n      and \"Sum t = 1\"\n      and \"t 0*-p1*-p3 = bot\"\n      and \"-p1\\<lbrace>z1\\<rbrace>-p1*-p2\"\n      and \"\\<forall>n>0 . t n*-p1*-p2*-p3\\<lbrace>z2\\<rbrace>pSum t n*-p1*-p2\"\n    shows \"-p1\\<lbrace>z1*(-p3\\<star>z2)\\<rbrace>-p2*--p3\"", "lemma while_soundness_pc:\n  assumes \"-p*-q \\<le> x\\<guillemotleft>-q\"\n  shows \"-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\"", "lemma rule_while_pc:\n  \"-p*-q\\<lbrace>x\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\"", "lemma rule_alternation:\n  \"-p\\<lbrace>x\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>y\\<rbrace>-p \\<Longrightarrow> -p\\<lbrace>-r\\<star>x*y\\<rbrace>--r*-p\"", "lemma rule_alternation_context:\n  \"-p\\<lbrace>v\\<rbrace>-p \\<Longrightarrow> -p\\<lbrace>w\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>y\\<rbrace>-p \\<and> -p\\<lbrace>z\\<rbrace>-p \\<Longrightarrow> -p\\<lbrace>-r\\<star>v*w*x*y*z\\<rbrace>--r*-p\"", "lemma rule_example_3:\n  assumes \"-p*-q\\<lbrace>x\\<rbrace>--p*-q\"\n      and \"--p*-r\\<lbrace>x\\<rbrace>-p*-r\"\n      and \"-p*-r\\<lbrace>y\\<rbrace>-p*-q\"\n      and \"--p*-q\\<lbrace>z\\<rbrace>--p*-r\"\n    shows \"-p*-q\\<squnion>--p*-r\\<lbrace>-s\\<star>x*(y\\<lhd>-p\\<rhd>z)\\<rbrace>--s*(-p*-q\\<squnion>--p*-r)\"", "lemma\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"p\\<star>x\\<guillemotleft>q \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\"", "lemma bnd_test_set:\n  \"test_set { x^n\\<guillemotleft>bot | n::nat . True }\"", "lemma bnd_test:\n  \"bnd x = --bnd x\"", "lemma bnd_upper:\n  \"x^m\\<guillemotleft>bot \\<le> bnd x\"", "lemma bnd_least:\n  assumes \"\\<forall>n . x^n\\<guillemotleft>bot \\<le> -p\"\n    shows \"bnd x \\<le> -p\"", "lemma mult_right_dist_bnd:\n  assumes \"\\<forall>n . (x^n\\<guillemotleft>bot)*-p \\<le> -q\"\n    shows \"bnd x*-p \\<le> -q\"", "lemma tests_complete:\n  \"nat_test (\\<lambda>n . (-p*x)^n\\<guillemotleft>bot) (bnd(-p*x))\""], "translations": [["", "lemma ite_pre_then:\n  \"-p*(x\\<lhd>-p\\<rhd>y\\<guillemotleft>-q) = -p*(x\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> - q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> - q)", "have \"-p*(x\\<lhd>-p\\<rhd>y\\<guillemotleft>-q) = -p*(x\\<guillemotleft>-q) \\<squnion> bot*(y\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> - q) \\<squnion> bot * (y \\<guillemotleft> - q)", "by (smt (z3) ite_pre pre_closed tests_dual.sba_dual.sup_right_unit tests_dual.sub_commutative tests_dual.sup_left_zero tests_dual.sup_right_dist_inf tests_dual.top_double_complement tests_dual.wnf_lemma_1)"], ["proof (state)\nthis:\n  - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n  - p * (x \\<guillemotleft> - q) \\<squnion> bot * (y \\<guillemotleft> - q)\n\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> - q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n  - p * (x \\<guillemotleft> - q) \\<squnion> bot * (y \\<guillemotleft> - q)\n\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> - q)", "by (metis pre_closed tests_dual.sba_dual.sup_right_unit tests_dual.sub_sup_closed tests_dual.sup_left_zero)"], ["proof (state)\nthis:\n  - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n  - p * (x \\<guillemotleft> - q)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 40.3\\<close>"], ["", "lemma ite_pre_else:\n  \"--p*(x\\<lhd>-p\\<rhd>y\\<guillemotleft>-q) = --p*(y\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - - p * (y \\<guillemotleft> - q)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - - p * (y \\<guillemotleft> - q)", "have \"--p*(x\\<lhd>-p\\<rhd>y\\<guillemotleft>-q) = bot*(x\\<guillemotleft>-q) \\<squnion> --p*(y\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    bot * (x \\<guillemotleft> - q) \\<squnion>\n    - - p * (y \\<guillemotleft> - q)", "by (smt (z3) ite_pre pre_closed tests_dual.sub_commutative tests_dual.sub_inf_left_zero tests_dual.sup_left_zero tests_dual.sup_right_dist_inf tests_dual.top_double_complement tests_dual.wnf_lemma_3)"], ["proof (state)\nthis:\n  - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n  bot * (x \\<guillemotleft> - q) \\<squnion> - - p * (y \\<guillemotleft> - q)\n\ngoal (1 subgoal):\n 1. - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - - p * (y \\<guillemotleft> - q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n  bot * (x \\<guillemotleft> - q) \\<squnion> - - p * (y \\<guillemotleft> - q)\n\ngoal (1 subgoal):\n 1. - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n    - - p * (y \\<guillemotleft> - q)", "by (metis pre_closed tests_dual.sba_dual.sub_sup_demorgan tests_dual.sub_inf_left_zero tests_dual.sup_left_zero)"], ["proof (state)\nthis:\n  - - p * (x \\<lhd> - p \\<rhd> y \\<guillemotleft> - q) =\n  - - p * (y \\<guillemotleft> - q)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ite_import_mult_then:\n  \"-p*-q \\<le> x\\<guillemotleft>-r \\<Longrightarrow> -p*-q \\<le> x\\<lhd>-p\\<rhd>y\\<guillemotleft>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q \\<le> x \\<guillemotleft> - r \\<Longrightarrow>\n    - p * - q \\<le> x \\<lhd> - p \\<rhd> y \\<guillemotleft> - r", "by (smt ite_pre_then leq_def pre_closed sub_assoc sub_comm sub_mult_closed)"], ["", "lemma ite_import_mult_else:\n  \"--p*-q \\<le> y\\<guillemotleft>-r \\<Longrightarrow> --p*-q \\<le> x\\<lhd>-p\\<rhd>y\\<guillemotleft>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * - q \\<le> y \\<guillemotleft> - r \\<Longrightarrow>\n    - - p * - q \\<le> x \\<lhd> - p \\<rhd> y \\<guillemotleft> - r", "by (smt ite_pre_else leq_def pre_closed sub_assoc sub_comm sub_mult_closed)"], ["", "text \\<open>Theorem 40.1\\<close>"], ["", "lemma ite_import_mult:\n  \"-p*-q \\<le> x\\<guillemotleft>-r \\<Longrightarrow> --p*-q \\<le> y\\<guillemotleft>-r \\<Longrightarrow> -q \\<le> x\\<lhd>-p\\<rhd>y\\<guillemotleft>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- p * - q \\<le> x \\<guillemotleft> - r;\n     - - p * - q \\<le> y \\<guillemotleft> - r\\<rbrakk>\n    \\<Longrightarrow> - q \\<le> x \\<lhd> - p \\<rhd> y \\<guillemotleft> - r", "by (smt (verit) ite_import_mult_else ite_import_mult_then pre_closed tests_dual.sba_dual.inf_less_eq_cases)"], ["", "end"], ["", "class whiledo = ifthenelse + while +\n  assumes while_pre: \"-p\\<star>x\\<guillemotleft>-q = -p*(x\\<guillemotleft>-p\\<star>x\\<guillemotleft>-q) \\<squnion> --p*-q\"\n  assumes while_post: \"-p\\<star>x\\<guillemotleft>-q = -p\\<star>x\\<guillemotleft>--p*-q\"\nbegin"], ["", "text \\<open>Theorem 40.4\\<close>"], ["", "lemma while_pre_then:\n  \"-p*(-p\\<star>x\\<guillemotleft>-q) = -p*(x\\<guillemotleft>-p\\<star>x\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (- p \\<star> x \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - q)", "by (smt pre_closed tests_dual.sub_commutative while_pre tests_dual.wnf_lemma_1)"], ["", "text \\<open>Theorem 40.5\\<close>"], ["", "lemma while_pre_else:\n  \"--p*(-p\\<star>x\\<guillemotleft>-q) = --p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<star> x \\<guillemotleft> - q) = - - p * - q", "by (smt pre_closed tests_dual.sub_commutative while_pre tests_dual.wnf_lemma_3)"], ["", "text \\<open>Theorem 40.6\\<close>"], ["", "lemma while_pre_sub_1:\n  \"-p\\<star>x\\<guillemotleft>-q \\<le> x*(-p\\<star>x)\\<lhd>-p\\<rhd>1\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - q\n    \\<le> x * (- p \\<star> x) \\<lhd> - p \\<rhd> (1::'a) \\<guillemotleft> - q", "by (smt (z3) ite_import_mult pre_closed pre_one_increasing pre_seq tests_dual.sba_dual.transitive tests_dual.sub_sup_closed tests_dual.upper_bound_right while_pre_else while_pre_then)"], ["", "text \\<open>Theorem 40.7\\<close>"], ["", "lemma while_pre_sub_2:\n  \"-p\\<star>x\\<guillemotleft>-q \\<le> x\\<lhd>-p\\<rhd>1\\<guillemotleft>-p\\<star>x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - q\n    \\<le> x \\<lhd> - p \\<rhd> (1::'a) \\<guillemotleft>\n          - p \\<star> x \\<guillemotleft> - q", "by (smt (z3) ite_import_mult pre_closed pre_one_increasing tests_dual.sba_dual.transitive tests_dual.sub_sup_closed tests_dual.upper_bound_right while_pre_then)"], ["", "text \\<open>Theorem 40.8\\<close>"], ["", "lemma while_pre_compl:\n  \"--p \\<le> -p\\<star>x\\<guillemotleft>--p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p \\<le> - p \\<star> x \\<guillemotleft> - - p", "by (metis pre_closed tests_dual.sup_idempotent tests_dual.upper_bound_right while_pre_else)"], ["", "lemma while_pre_compl_one:\n  \"--p \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (metis tests_dual.sba_dual.top_double_complement while_post tests_dual.sup_right_unit while_pre_compl)"], ["", "text \\<open>Theorem 40.10\\<close>"], ["", "lemma while_export_equiv:\n  \"-q \\<le> -p\\<star>x\\<guillemotleft>1 \\<longleftrightarrow> -p*-q \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- q \\<le> - p \\<star> x \\<guillemotleft> (1::'a)) =\n    (- p * - q \\<le> - p \\<star> x \\<guillemotleft> (1::'a))", "by (smt pre_closed tests_dual.sba_dual.shunting tests_dual.sba_dual.sub_less_eq_def tests_dual.sba_dual.top_double_complement while_pre_compl_one)"], ["", "lemma nat_test_pre:\n  assumes \"nat_test t s\"\n      and \"-q \\<le> s\"\n      and \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 1: \"-q*--p \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q * - - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (metis pre_closed tests_dual.sub_commutative while_post tests_dual.upper_bound_right while_pre_else)"], ["proof (state)\nthis:\n  - q * - - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"\\<forall>n . t n*-p*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "show \"t n*-p*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof (induct n rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 2: \"t n = --(t n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n = - - t n", "using assms(1) nat_test_def"], ["proof (prove)\nusing this:\n  nat_test t s\n  nat_test ?t ?s \\<equiv>\n  (\\<forall>n. ?t n = - - ?t n) \\<and>\n  ?s = - - ?s \\<and>\n  (\\<forall>n. ?t n \\<le> ?s) \\<and>\n  (\\<forall>x y.\n      (\\<forall>n. ?t n * - x \\<le> - y) \\<longrightarrow>\n      ?s * - x \\<le> - y)\n\ngoal (1 subgoal):\n 1. t n = - - t n", "by auto"], ["proof (state)\nthis:\n  t n = - - t n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "assume \"\\<forall>m<n . t m*-p*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (state)\nthis:\n  \\<forall>m<n.\n     t m * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence \"\\<forall>m<n . t m*-p*-q \\<squnion> t m*--p*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     t m * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       t m * - p * - q \\<squnion> t m * - - p * - q\n       \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     t m * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n  - q * - - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<forall>m<n.\n       t m * - p * - q \\<squnion> t m * - - p * - q\n       \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (verit, del_insts) assms(1) tests_dual.greatest_lower_bound leq_def nat_test_def pre_closed tests_dual.sub_associative tests_dual.sub_commutative sub_mult_closed)"], ["proof (state)\nthis:\n  \\<forall>m<n.\n     t m * - p * - q \\<squnion> t m * - - p * - q\n     \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence \"\\<forall>m<n . t m*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  \\<forall>m<n.\n     t m * - p * - q \\<squnion> t m * - - p * - q\n     \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<forall>m<n. t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (verit, del_insts) assms(1) tests_dual.sup_right_unit tests_dual.sup_left_dist_inf tests_dual.sup_right_dist_inf nat_test_def tests_dual.inf_complement sub_mult_closed)"], ["proof (state)\nthis:\n  \\<forall>m<n. t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence \"pSum t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  \\<forall>m<n. t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt assms(1) pSum_below_nat pre_closed sub_mult_closed)"], ["proof (state)\nthis:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence \"t n*-p*-q*(-p\\<star>x\\<guillemotleft>--p*-q) = t n*-p*-q\""], ["proof (prove)\nusing this:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. t n * - p * - q * (- p \\<star> x \\<guillemotleft> - - p * - q) =\n    t n * - p * - q", "using 2"], ["proof (prove)\nusing this:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n  t n = - - t n\n\ngoal (1 subgoal):\n 1. t n * - p * - q * (- p \\<star> x \\<guillemotleft> - - p * - q) =\n    t n * - p * - q", "by (smt assms(1,3) leq_def pSum_test_nat pre_closed pre_sub_distr sub_assoc sub_comm sub_mult_closed transitive while_pre_then)"], ["proof (state)\nthis:\n  t n * - p * - q * (- p \\<star> x \\<guillemotleft> - - p * - q) =\n  t n * - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - p * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus \"t n*-p*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  t n * - p * - q * (- p \\<star> x \\<guillemotleft> - - p * - q) =\n  t n * - p * - q\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 2"], ["proof (prove)\nusing this:\n  t n * - p * - q * (- p \\<star> x \\<guillemotleft> - - p * - q) =\n  t n * - p * - q\n  t n = - - t n\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (z3) pre_closed tests_dual.sub_sup_closed tests_dual.upper_bound_right)"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence \"-q*-p \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     t n * - p * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q * - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (verit, del_insts) assms(1,2) leq_def nat_test_def pre_closed tests_dual.sub_associative tests_dual.sub_commutative sub_mult_closed)"], ["proof (state)\nthis:\n  - q * - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  - q * - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 1"], ["proof (prove)\nusing this:\n  - q * - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n  - q * - - p \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (z3) pre_closed tests_dual.sba_dual.inf_less_eq_cases tests_dual.sub_commutative tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_test_pre_1:\n  assumes \"nat_test t s\"\n      and \"-r \\<le> s\"\n      and \"-r \\<le> -q\"\n      and \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-r \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "let ?qs = \"-q*s\""], ["proof (state)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 1: \"-r \\<le> ?qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - r \\<le> - q * s", "by (metis assms(1-3) nat_test_def tests_dual.least_upper_bound)"], ["proof (state)\nthis:\n  - r \\<le> - q * s\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"\\<forall>n . t n*-p*?qs \\<le> x\\<guillemotleft>pSum t n*?qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "have 2: \"pSum t n \\<le> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pSum t n \\<le> s", "by (simp add: assms(1) pSum_below_sum)"], ["proof (state)\nthis:\n  pSum t n \\<le> s\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "have \"t n = t n * s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n = t n * s", "by (metis assms(1) nat_test_def tests_dual.sba_dual.less_eq_inf)"], ["proof (state)\nthis:\n  t n = t n * s\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "hence \"t n*-p*?qs = t n*-p*-q\""], ["proof (prove)\nusing this:\n  t n = t n * s\n\ngoal (1 subgoal):\n 1. t n * - p * (- q * s) = t n * - p * - q", "by (smt (verit, ccfv_threshold) assms(1) nat_test_def tests_dual.sub_sup_closed tests_dual.sub_associative tests_dual.sub_commutative)"], ["proof (state)\nthis:\n  t n * - p * (- q * s) = t n * - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "also"], ["proof (state)\nthis:\n  t n * - p * (- q * s) = t n * - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "have \"t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q", "by (simp add: assms(4))"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "also"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "have \"x\\<guillemotleft>pSum t n*-q = x\\<guillemotleft>pSum t n*?qs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> pSum t n * - q =\n    x \\<guillemotleft> pSum t n * (- q * s)", "using 2"], ["proof (prove)\nusing this:\n  pSum t n \\<le> s\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft> pSum t n * - q =\n    x \\<guillemotleft> pSum t n * (- q * s)", "by (smt (verit, ccfv_SIG) assms(1) leq_def nat_test_def pSum_test_nat tests_dual.sub_associative tests_dual.sub_commutative)"], ["proof (state)\nthis:\n  x \\<guillemotleft> pSum t n * - q =\n  x \\<guillemotleft> pSum t n * (- q * s)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "finally"], ["proof (chain)\npicking this:\n  t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "show \"t n*-p*?qs \\<le> x\\<guillemotleft>pSum t n*?qs\""], ["proof (prove)\nusing this:\n  t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)\n\ngoal (1 subgoal):\n 1. t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)", "."], ["proof (state)\nthis:\n  t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence 3: \"?qs \\<le> -p\\<star>x\\<guillemotleft>--p*?qs\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     t n * - p * (- q * s) \\<le> x \\<guillemotleft> pSum t n * (- q * s)\n\ngoal (1 subgoal):\n 1. - q * s \\<le> - p \\<star> x \\<guillemotleft> - - p * (- q * s)", "by (smt (verit, ccfv_threshold) assms(1) tests_dual.upper_bound_left tests_dual.upper_bound_right nat_test_def nat_test_pre pSum_test_nat pre_closed tests_dual.sub_associative sub_mult_closed transitive)"], ["proof (state)\nthis:\n  - q * s \\<le> - p \\<star> x \\<guillemotleft> - - p * (- q * s)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"-p\\<star>x\\<guillemotleft>--p*?qs \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - - p * (- q * s)\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (metis assms(1) nat_test_def pre_lower_bound_left tests_dual.sub_sup_closed while_post)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - - p * (- q * s)\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * (- q * s)\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 1 3"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * (- q * s)\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n  - r \\<le> - q * s\n  - q * s \\<le> - p \\<star> x \\<guillemotleft> - - p * (- q * s)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (verit, del_insts) leq_def tests_dual.sub_associative assms(1) nat_test_def pre_closed sub_mult_closed)"], ["proof (state)\nthis:\n  - r \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_test_pre_2:\n  assumes \"nat_test t s\"\n      and \"-r \\<le> s\"\n      and \"\\<forall>n . t n*-p \\<le> x\\<guillemotleft>pSum t n\"\n    shows \"-r \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have 1: \"-r \\<le> -p\\<star>x\\<guillemotleft>--p*s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> - - p * s", "by (smt (verit, ccfv_threshold) assms leq_def nat_test_def nat_test_pre_1 pSum_below_sum pSum_test_nat tests_dual.sub_associative tests_dual.sub_commutative)"], ["proof (state)\nthis:\n  - r \\<le> - p \\<star> x \\<guillemotleft> - - p * s\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have \"-p\\<star>x\\<guillemotleft>--p*s \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - - p * s\n    \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (metis assms(1) nat_test_def pre_below_pre_one while_post)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - - p * s\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * s\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "using 1"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * s\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n  - r \\<le> - p \\<star> x \\<guillemotleft> - - p * s\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (smt (verit) assms(1) nat_test_def pre_closed tests_dual.sba_dual.top_double_complement while_post tests_dual.transitive)"], ["proof (state)\nthis:\n  - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_test_pre_3:\n  assumes \"nat_test t s\"\n      and \"-q \\<le> s\"\n      and \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-q \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have \"-p\\<star>x\\<guillemotleft>--p*-q \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - - p * - q\n    \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (metis pre_below_pre_one sub_mult_closed)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - - p * - q\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * - q\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (smt (verit, ccfv_threshold) assms pre_closed tests_dual.sba_dual.top_double_complement tests_dual.sba_dual.transitive tests_dual.sub_sup_closed nat_test_pre)"], ["proof (state)\nthis:\n  - q \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "definition aL :: \"'a\"\n  where \"aL \\<equiv> 1\\<star>1\\<guillemotleft>1\""], ["", "lemma aL_test:\n  \"aL = --aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aL = - - aL", "by (metis aL_def one_def pre_closed)"], ["", "end"], ["", "class atoms = tests +\n  fixes Atomic_program :: \"'a set\"\n  fixes Atomic_test :: \"'a set\"\n  assumes one_atomic_program: \"1 \\<in> Atomic_program\"\n  assumes zero_atomic_test: \"bot \\<in> Atomic_test\"\n  assumes atomic_test_test: \"p \\<in> Atomic_test \\<longrightarrow> p = --p\""], ["", "class while_program = whiledo + atoms + power\nbegin"], ["", "inductive_set Test_expression :: \"'a set\"\n  where atom_test: \"p \\<in> Atomic_test \\<Longrightarrow> p \\<in> Test_expression\"\n      | neg_test:  \"p \\<in> Test_expression \\<Longrightarrow> -p \\<in> Test_expression\"\n      | conj_test: \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Test_expression \\<Longrightarrow> p*q \\<in> Test_expression\""], ["", "lemma test_expression_test:\n  \"p \\<in> Test_expression \\<Longrightarrow> p = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> Test_expression \\<Longrightarrow> p = - - p", "apply (induct rule: Test_expression.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p. p \\<in> Atomic_test \\<Longrightarrow> p = - - p\n 2. \\<And>p.\n       \\<lbrakk>p \\<in> Test_expression; p = - - p\\<rbrakk>\n       \\<Longrightarrow> - p = - - - p\n 3. \\<And>p q.\n       \\<lbrakk>p \\<in> Test_expression; p = - - p; q \\<in> Test_expression;\n        q = - - q\\<rbrakk>\n       \\<Longrightarrow> p * q = - - (p * q)", "apply (simp add: atomic_test_test)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<in> Test_expression; p = - - p\\<rbrakk>\n       \\<Longrightarrow> - p = - - - p\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> Test_expression; p = - - p; q \\<in> Test_expression;\n        q = - - q\\<rbrakk>\n       \\<Longrightarrow> p * q = - - (p * q)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> Test_expression; p = - - p; q \\<in> Test_expression;\n        q = - - q\\<rbrakk>\n       \\<Longrightarrow> p * q = - - (p * q)", "by (metis tests_dual.sub_sup_closed)"], ["", "lemma disj_test:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Test_expression \\<Longrightarrow> p\\<squnion>q \\<in> Test_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Test_expression\\<rbrakk>\n    \\<Longrightarrow> p \\<squnion> q \\<in> Test_expression", "by (smt conj_test neg_test tests_dual.sub_inf_def test_expression_test)"], ["", "lemma zero_test_expression:\n  \"bot \\<in> Test_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<in> Test_expression", "by (simp add: Test_expression.atom_test zero_atomic_test)"], ["", "lemma one_test_expression:\n  \"1 \\<in> Test_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<in> Test_expression", "using Test_expression.simps tests_dual.sba_dual.one_def zero_test_expression"], ["proof (prove)\nusing this:\n  (?a \\<in> Test_expression) =\n  ((\\<exists>p. ?a = p \\<and> p \\<in> Atomic_test) \\<or>\n   (\\<exists>p. ?a = - p \\<and> p \\<in> Test_expression) \\<or>\n   (\\<exists>p q.\n       ?a = p * q \\<and>\n       p \\<in> Test_expression \\<and> q \\<in> Test_expression))\n  (1::'a) = - bot\n  bot \\<in> Test_expression\n\ngoal (1 subgoal):\n 1. (1::'a) \\<in> Test_expression", "by blast"], ["", "lemma pSum_test_expression:\n  \"(\\<forall>n . t n \\<in> Test_expression) \\<Longrightarrow> pSum t m \\<in> Test_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. t n \\<in> Test_expression \\<Longrightarrow>\n    pSum t m \\<in> Test_expression", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. t n \\<in> Test_expression \\<Longrightarrow>\n    pSum t 0 \\<in> Test_expression\n 2. \\<And>m.\n       \\<lbrakk>\\<forall>n. t n \\<in> Test_expression \\<Longrightarrow>\n                pSum t m \\<in> Test_expression;\n        \\<forall>n. t n \\<in> Test_expression\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc m) \\<in> Test_expression", "apply (simp add: zero_test_expression)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>n. t n \\<in> Test_expression \\<Longrightarrow>\n                pSum t m \\<in> Test_expression;\n        \\<forall>n. t n \\<in> Test_expression\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc m) \\<in> Test_expression", "by (simp add: disj_test)"], ["", "inductive_set While_program :: \"'a set\"\n  where atom_prog:  \"x \\<in> Atomic_program \\<Longrightarrow> x \\<in> While_program\"\n      | seq_prog:   \"x \\<in> While_program \\<Longrightarrow> y \\<in> While_program \\<Longrightarrow> x*y \\<in> While_program\"\n      | cond_prog:  \"p \\<in> Test_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> y \\<in> While_program \\<Longrightarrow> x\\<lhd>p\\<rhd>y \\<in> While_program\"\n      | while_prog: \"p \\<in> Test_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> p\\<star>x \\<in> While_program\""], ["", "lemma one_while_program:\n  \"1 \\<in> While_program\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<in> While_program", "by (simp add: While_program.atom_prog one_atomic_program)"], ["", "lemma power_while_program:\n  \"x \\<in> While_program \\<Longrightarrow> x^m \\<in> While_program\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> While_program \\<Longrightarrow> x ^ m \\<in> While_program", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. x \\<in> While_program \\<Longrightarrow> x ^ 0 \\<in> While_program\n 2. \\<And>m.\n       \\<lbrakk>x \\<in> While_program \\<Longrightarrow>\n                x ^ m \\<in> While_program;\n        x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> x ^ Suc m \\<in> While_program", "apply (simp add: one_while_program)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>x \\<in> While_program \\<Longrightarrow>\n                x ^ m \\<in> While_program;\n        x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> x ^ Suc m \\<in> While_program", "by (simp add: While_program.seq_prog)"], ["", "inductive_set Pre_expression :: \"'a set\"\n  where test_pre: \"p \\<in> Test_expression \\<Longrightarrow> p \\<in> Pre_expression\"\n      | neg_pre:  \"p \\<in> Pre_expression \\<Longrightarrow> -p \\<in> Pre_expression\"\n      | conj_pre: \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> p*q \\<in> Pre_expression\"\n      | pre_pre:  \"p \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> x\\<guillemotleft>p \\<in> Pre_expression\""], ["", "lemma pre_expression_test:\n  \"p \\<in> Pre_expression \\<Longrightarrow> p = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<in> Pre_expression \\<Longrightarrow> p = - - p", "apply (induct rule: Pre_expression.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p. p \\<in> Test_expression \\<Longrightarrow> p = - - p\n 2. \\<And>p.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p\\<rbrakk>\n       \\<Longrightarrow> - p = - - - p\n 3. \\<And>p q.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p; q \\<in> Pre_expression;\n        q = - - q\\<rbrakk>\n       \\<Longrightarrow> p * q = - - (p * q)\n 4. \\<And>p x.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p;\n        x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> p = - - (x \\<guillemotleft> p)", "apply (simp add: test_expression_test)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p\\<rbrakk>\n       \\<Longrightarrow> - p = - - - p\n 2. \\<And>p q.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p; q \\<in> Pre_expression;\n        q = - - q\\<rbrakk>\n       \\<Longrightarrow> p * q = - - (p * q)\n 3. \\<And>p x.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p;\n        x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> p = - - (x \\<guillemotleft> p)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p q.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p; q \\<in> Pre_expression;\n        q = - - q\\<rbrakk>\n       \\<Longrightarrow> p * q = - - (p * q)\n 2. \\<And>p x.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p;\n        x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> p = - - (x \\<guillemotleft> p)", "apply (metis sub_mult_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x.\n       \\<lbrakk>p \\<in> Pre_expression; p = - - p;\n        x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> p = - - (x \\<guillemotleft> p)", "by (metis pre_closed)"], ["", "lemma disj_pre:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> p\\<squnion>q \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Pre_expression; q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> p \\<squnion> q \\<in> Pre_expression", "by (smt conj_pre neg_pre tests_dual.sub_inf_def pre_expression_test)"], ["", "lemma zero_pre_expression:\n  \"bot \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<in> Pre_expression", "by (simp add: Pre_expression.test_pre zero_test_expression)"], ["", "lemma one_pre_expression:\n  \"1 \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<in> Pre_expression", "by (simp add: Pre_expression.test_pre one_test_expression)"], ["", "lemma pSum_pre_expression:\n  \"(\\<forall>n . t n \\<in> Pre_expression) \\<Longrightarrow> pSum t m \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. t n \\<in> Pre_expression \\<Longrightarrow>\n    pSum t m \\<in> Pre_expression", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<forall>n. t n \\<in> Pre_expression \\<Longrightarrow>\n    pSum t 0 \\<in> Pre_expression\n 2. \\<And>m.\n       \\<lbrakk>\\<forall>n. t n \\<in> Pre_expression \\<Longrightarrow>\n                pSum t m \\<in> Pre_expression;\n        \\<forall>n. t n \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc m) \\<in> Pre_expression", "apply (simp add: zero_pre_expression)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<forall>n. t n \\<in> Pre_expression \\<Longrightarrow>\n                pSum t m \\<in> Pre_expression;\n        \\<forall>n. t n \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> pSum t (Suc m) \\<in> Pre_expression", "by (simp add: disj_pre)"], ["", "lemma aL_pre_expression:\n  \"aL \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aL \\<in> Pre_expression", "by (simp add: Pre_expression.pre_pre While_program.while_prog aL_def one_pre_expression one_test_expression one_while_program)"], ["", "end"], ["", "class hoare_calculus = while_program + complete_tests\nbegin"], ["", "definition tfun :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  where \"tfun p x q r \\<equiv> p \\<squnion> (x\\<guillemotleft>q*r)\""], ["", "lemma tfun_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> tfun p x q r = --tfun p x q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> tfun p x q r = - - tfun p x q r", "by (smt tfun_def sub_mult_closed pre_closed tests_dual.inf_closed)"], ["", "lemma tfun_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> tfun p x q r \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n     q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tfun p x q r \\<in> Pre_expression", "by (simp add: Pre_expression.conj_pre Pre_expression.pre_pre disj_pre tfun_def)"], ["", "lemma tfun_iso:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> r \\<le> s \\<Longrightarrow> tfun p x q r \\<le> tfun p x q s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s; r \\<le> s\\<rbrakk>\n    \\<Longrightarrow> tfun p x q r \\<le> tfun p x q s", "by (smt tfun_def tests_dual.sub_sup_right_isotone pre_iso sub_mult_closed tests_dual.sub_inf_right_isotone pre_closed)"], ["", "definition tseq :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a\"\n  where \"tseq p x q r m \\<equiv> (tfun p x q ^ m) r\""], ["", "lemma tseq_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> tseq p x q r m = --tseq p x q r m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> tseq p x q r m = - - tseq p x q r m", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> tseq p x q r 0 = - - tseq p x q r 0\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n                \\<Longrightarrow> tseq p x q r m = - - tseq p x q r m;\n        p = - - p; q = - - q; r = - - r\\<rbrakk>\n       \\<Longrightarrow> tseq p x q r (Suc m) = - - tseq p x q r (Suc m)", "apply (smt tseq_def tfun_test power_zero_id id_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n                \\<Longrightarrow> tseq p x q r m = - - tseq p x q r m;\n        p = - - p; q = - - q; r = - - r\\<rbrakk>\n       \\<Longrightarrow> tseq p x q r (Suc m) = - - tseq p x q r (Suc m)", "by (metis tseq_def tfun_test power_succ_unfold_ext)"], ["", "lemma tseq_test_seq:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> test_seq (tseq p x q r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> test_seq (tseq p x q r)", "using test_seq_def tseq_test"], ["proof (prove)\nusing this:\n  test_seq ?t \\<equiv> \\<forall>n. ?t n = - - ?t n\n  \\<lbrakk>?p = - - ?p; ?q = - - ?q; ?r = - - ?r\\<rbrakk>\n  \\<Longrightarrow> tseq ?p ?x ?q ?r ?m = - - tseq ?p ?x ?q ?r ?m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> test_seq (tseq p x q r)", "by auto"], ["", "lemma tseq_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> tseq p x q r m \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n     q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq p x q r m \\<in> Pre_expression", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n     q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq p x q r 0 \\<in> Pre_expression\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n                 q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n                \\<Longrightarrow> tseq p x q r m \\<in> Pre_expression;\n        x \\<in> While_program; p \\<in> Pre_expression;\n        q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> tseq p x q r (Suc m) \\<in> Pre_expression", "apply (smt tseq_def id_def power_zero_id)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n                 q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n                \\<Longrightarrow> tseq p x q r m \\<in> Pre_expression;\n        x \\<in> While_program; p \\<in> Pre_expression;\n        q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> tseq p x q r (Suc m) \\<in> Pre_expression", "by (smt tseq_def power_succ_unfold_ext tfun_pre_expression)"], ["", "definition tsum :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  where \"tsum p x q r \\<equiv> Sum (tseq p x q r)\""], ["", "lemma tsum_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> tsum p x q r = --tsum p x q r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> tsum p x q r = - - tsum p x q r", "using Sum_test tseq_test_seq tsum_def"], ["proof (prove)\nusing this:\n  test_seq ?t \\<Longrightarrow>\n  complete_tests_class.Sum ?t = - - complete_tests_class.Sum ?t\n  \\<lbrakk>?p = - - ?p; ?q = - - ?q; ?r = - - ?r\\<rbrakk>\n  \\<Longrightarrow> test_seq (tseq ?p ?x ?q ?r)\n  tsum ?p ?x ?q ?r \\<equiv> complete_tests_class.Sum (tseq ?p ?x ?q ?r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r\\<rbrakk>\n    \\<Longrightarrow> tsum p x q r = - - tsum p x q r", "by auto"], ["", "lemma t_fun_test:\n  \"q = --q \\<Longrightarrow> tfun (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tfun (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = - - q \\<Longrightarrow>\n    tfun (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    - - tfun (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (metis aL_test pre_closed tests_dual.sba_dual.double_negation tfun_def tfun_test)"], ["", "lemma t_fun_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tfun (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Test_expression;\n     q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tfun (- p) x (p \\<star> x \\<guillemotleft> q)\n                       (- p \\<squnion>\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                      \\<in> Pre_expression", "by (simp add: Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre Pre_expression.test_pre While_program.while_prog aL_pre_expression disj_pre tfun_pre_expression)"], ["", "lemma t_seq_test:\n  \"q = --q \\<Longrightarrow> tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m = --tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = - - q \\<Longrightarrow>\n    tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m =\n    - - tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         m", "by (metis aL_test pre_closed tests_dual.sba_dual.double_negation tfun_def tfun_test tseq_test)"], ["", "lemma t_seq_test_seq:\n  \"q = --q \\<Longrightarrow> test_seq (tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = - - q \\<Longrightarrow>\n    test_seq\n     (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n       (- p \\<squnion>\n        (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "using test_seq_def t_seq_test"], ["proof (prove)\nusing this:\n  test_seq ?t \\<equiv> \\<forall>n. ?t n = - - ?t n\n  ?q = - - ?q \\<Longrightarrow>\n  tseq (- ?p) ?x (?p \\<star> ?x \\<guillemotleft> ?q)\n   (- ?p \\<squnion>\n    (?x \\<guillemotleft> (?p \\<star> ?x \\<guillemotleft> ?q) * aL))\n   ?m =\n  - - tseq (- ?p) ?x (?p \\<star> ?x \\<guillemotleft> ?q)\n       (- ?p \\<squnion>\n        (?x \\<guillemotleft> (?p \\<star> ?x \\<guillemotleft> ?q) * aL))\n       ?m\n\ngoal (1 subgoal):\n 1. q = - - q \\<Longrightarrow>\n    test_seq\n     (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n       (- p \\<squnion>\n        (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by auto"], ["", "lemma t_seq_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Test_expression;\n     q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                       (- p \\<squnion>\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m\n                      \\<in> Pre_expression", "using Pre_expression.pre_pre Pre_expression.test_pre Test_expression.neg_test While_program.while_prog aL_pre_expression tfun_def tfun_pre_expression tseq_pre_expression"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<in> Pre_expression; ?x \\<in> While_program\\<rbrakk>\n  \\<Longrightarrow> ?x \\<guillemotleft> ?p \\<in> Pre_expression\n  ?p \\<in> Test_expression \\<Longrightarrow> ?p \\<in> Pre_expression\n  ?p \\<in> Test_expression \\<Longrightarrow> - ?p \\<in> Test_expression\n  \\<lbrakk>?p \\<in> Test_expression; ?x \\<in> While_program\\<rbrakk>\n  \\<Longrightarrow> ?p \\<star> ?x \\<in> While_program\n  aL \\<in> Pre_expression\n  tfun ?p ?x ?q ?r \\<equiv> ?p \\<squnion> (?x \\<guillemotleft> ?q * ?r)\n  \\<lbrakk>?x \\<in> While_program; ?p \\<in> Pre_expression;\n   ?q \\<in> Pre_expression; ?r \\<in> Pre_expression\\<rbrakk>\n  \\<Longrightarrow> tfun ?p ?x ?q ?r \\<in> Pre_expression\n  \\<lbrakk>?x \\<in> While_program; ?p \\<in> Pre_expression;\n   ?q \\<in> Pre_expression; ?r \\<in> Pre_expression\\<rbrakk>\n  \\<Longrightarrow> tseq ?p ?x ?q ?r ?m \\<in> Pre_expression\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Test_expression;\n     q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                       (- p \\<squnion>\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m\n                      \\<in> Pre_expression", "by auto"], ["", "lemma t_sum_test:\n  \"q = --q \\<Longrightarrow> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. q = - - q \\<Longrightarrow>\n    tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    - - tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using Sum_test t_seq_test_seq tsum_def"], ["proof (prove)\nusing this:\n  test_seq ?t \\<Longrightarrow>\n  complete_tests_class.Sum ?t = - - complete_tests_class.Sum ?t\n  ?q = - - ?q \\<Longrightarrow>\n  test_seq\n   (tseq (- ?p) ?x (?p \\<star> ?x \\<guillemotleft> ?q)\n     (- ?p \\<squnion>\n      (?x \\<guillemotleft> (?p \\<star> ?x \\<guillemotleft> ?q) * aL)))\n  tsum ?p ?x ?q ?r \\<equiv> complete_tests_class.Sum (tseq ?p ?x ?q ?r)\n\ngoal (1 subgoal):\n 1. q = - - q \\<Longrightarrow>\n    tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    - - tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by auto"], ["", "definition tfun2 :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  where \"tfun2 p q x r s \\<equiv> p \\<squnion> q*(x\\<guillemotleft>r*s)\""], ["", "lemma tfun2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> tfun2 p q x r s = --tfun2 p q x r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> tfun2 p q x r s = - - tfun2 p q x r s", "by (smt tfun2_def sub_mult_closed pre_closed tests_dual.inf_closed)"], ["", "lemma tfun2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> s \\<in> Pre_expression \\<Longrightarrow> tfun2 p q x r s \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n     q \\<in> Pre_expression; r \\<in> Pre_expression;\n     s \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tfun2 p q x r s \\<in> Pre_expression", "by (simp add: Pre_expression.conj_pre Pre_expression.pre_pre disj_pre tfun2_def)"], ["", "lemma tfun2_iso:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s1 = --s1 \\<Longrightarrow> s2 = --s2 \\<Longrightarrow> s1 \\<le> s2 \\<Longrightarrow> tfun2 p q x r s1 \\<le> tfun2 p q x r s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s1 = - - s1; s2 = - - s2;\n     s1 \\<le> s2\\<rbrakk>\n    \\<Longrightarrow> tfun2 p q x r s1 \\<le> tfun2 p q x r s2", "by (smt tfun2_def tests_dual.sub_inf_right_isotone pre_iso sub_mult_closed tests_dual.sub_sup_right_isotone pre_closed)"], ["", "definition tseq2 :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> nat \\<Rightarrow> 'a\"\n  where \"tseq2 p q x r s m \\<equiv> (tfun2 p q x r ^ m) s\""], ["", "lemma tseq2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> tseq2 p q x r s m = --tseq2 p q x r s m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> tseq2 p q x r s m = - - tseq2 p q x r s m", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> tseq2 p q x r s 0 = - - tseq2 p q x r s 0\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n                \\<Longrightarrow> tseq2 p q x r s m = - - tseq2 p q x r s m;\n        p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n       \\<Longrightarrow> tseq2 p q x r s (Suc m) =\n                         - - tseq2 p q x r s (Suc m)", "apply (smt tseq2_def power_zero_id id_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n                \\<Longrightarrow> tseq2 p q x r s m = - - tseq2 p q x r s m;\n        p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n       \\<Longrightarrow> tseq2 p q x r s (Suc m) =\n                         - - tseq2 p q x r s (Suc m)", "by (smt tseq2_def tfun2_test power_succ_unfold_ext)"], ["", "lemma tseq2_test_seq:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> test_seq (tseq2 p q x r s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> test_seq (tseq2 p q x r s)", "using test_seq_def tseq2_test"], ["proof (prove)\nusing this:\n  test_seq ?t \\<equiv> \\<forall>n. ?t n = - - ?t n\n  \\<lbrakk>?p = - - ?p; ?q = - - ?q; ?r = - - ?r; ?s = - - ?s\\<rbrakk>\n  \\<Longrightarrow> tseq2 ?p ?q ?x ?r ?s ?m = - - tseq2 ?p ?q ?x ?r ?s ?m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> test_seq (tseq2 p q x r s)", "by force"], ["", "lemma tseq2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> s \\<in> Pre_expression \\<Longrightarrow> tseq2 p q x r s m \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n     q \\<in> Pre_expression; r \\<in> Pre_expression;\n     s \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq2 p q x r s m \\<in> Pre_expression", "apply (induct m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n     q \\<in> Pre_expression; r \\<in> Pre_expression;\n     s \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq2 p q x r s 0 \\<in> Pre_expression\n 2. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n                 q \\<in> Pre_expression; r \\<in> Pre_expression;\n                 s \\<in> Pre_expression\\<rbrakk>\n                \\<Longrightarrow> tseq2 p q x r s m \\<in> Pre_expression;\n        x \\<in> While_program; p \\<in> Pre_expression;\n        q \\<in> Pre_expression; r \\<in> Pre_expression;\n        s \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> tseq2 p q x r s (Suc m) \\<in> Pre_expression", "apply (smt tseq2_def id_def power_zero_id)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m.\n       \\<lbrakk>\\<lbrakk>x \\<in> While_program; p \\<in> Pre_expression;\n                 q \\<in> Pre_expression; r \\<in> Pre_expression;\n                 s \\<in> Pre_expression\\<rbrakk>\n                \\<Longrightarrow> tseq2 p q x r s m \\<in> Pre_expression;\n        x \\<in> While_program; p \\<in> Pre_expression;\n        q \\<in> Pre_expression; r \\<in> Pre_expression;\n        s \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> tseq2 p q x r s (Suc m) \\<in> Pre_expression", "by (smt tseq2_def power_succ_unfold_ext tfun2_pre_expression)"], ["", "definition tsum2 :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\"\n  where \"tsum2 p q x r s \\<equiv> Sum (tseq2 p q x r s)\""], ["", "lemma tsum2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> r = --r \\<Longrightarrow> s = --s \\<Longrightarrow> tsum2 p q x r s = --tsum2 p q x r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> tsum2 p q x r s = - - tsum2 p q x r s", "using Sum_test tseq2_test_seq tsum2_def"], ["proof (prove)\nusing this:\n  test_seq ?t \\<Longrightarrow>\n  complete_tests_class.Sum ?t = - - complete_tests_class.Sum ?t\n  \\<lbrakk>?p = - - ?p; ?q = - - ?q; ?r = - - ?r; ?s = - - ?s\\<rbrakk>\n  \\<Longrightarrow> test_seq (tseq2 ?p ?q ?x ?r ?s)\n  tsum2 ?p ?q ?x ?r ?s \\<equiv>\n  complete_tests_class.Sum (tseq2 ?p ?q ?x ?r ?s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q; r = - - r; s = - - s\\<rbrakk>\n    \\<Longrightarrow> tsum2 p q x r s = - - tsum2 p q x r s", "by force"], ["", "lemma t_fun2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> tfun2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tfun2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q\\<rbrakk>\n    \\<Longrightarrow> tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL)) =\n                      - - tfun2 (- p * q) p x\n                           (p \\<star> x \\<guillemotleft> q)\n                           (- p * q \\<squnion>\n                            p *\n                            (x \\<guillemotleft>\n                             (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt (z3) aL_test pre_closed tests_dual.sub_sup_closed tfun2_def tfun2_test)"], ["", "lemma t_fun2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tfun2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Test_expression;\n     q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                      \\<in> Pre_expression", "by (simp add: Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre Pre_expression.test_pre While_program.while_prog aL_pre_expression disj_pre tfun2_pre_expression)"], ["", "lemma t_seq2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m = --tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q\\<rbrakk>\n    \\<Longrightarrow> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m =\n                      - - tseq2 (- p * q) p x\n                           (p \\<star> x \\<guillemotleft> q)\n                           (- p * q \\<squnion>\n                            p *\n                            (x \\<guillemotleft>\n                             (p \\<star> x \\<guillemotleft> q) * aL))\n                           m", "by (smt (z3) aL_test pre_closed tests_dual.sub_sup_closed tfun2_def tfun2_test tseq2_test)"], ["", "lemma t_seq2_test_seq:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> test_seq (tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q\\<rbrakk>\n    \\<Longrightarrow> test_seq\n                       (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                         (- p * q \\<squnion>\n                          p *\n                          (x \\<guillemotleft>\n                           (p \\<star> x \\<guillemotleft> q) * aL)))", "using test_seq_def t_seq2_test"], ["proof (prove)\nusing this:\n  test_seq ?t \\<equiv> \\<forall>n. ?t n = - - ?t n\n  \\<lbrakk>?p = - - ?p; ?q = - - ?q\\<rbrakk>\n  \\<Longrightarrow> tseq2 (- ?p * ?q) ?p ?x\n                     (?p \\<star> ?x \\<guillemotleft> ?q)\n                     (- ?p * ?q \\<squnion>\n                      ?p *\n                      (?x \\<guillemotleft>\n                       (?p \\<star> ?x \\<guillemotleft> ?q) * aL))\n                     ?m =\n                    - - tseq2 (- ?p * ?q) ?p ?x\n                         (?p \\<star> ?x \\<guillemotleft> ?q)\n                         (- ?p * ?q \\<squnion>\n                          ?p *\n                          (?x \\<guillemotleft>\n                           (?p \\<star> ?x \\<guillemotleft> ?q) * aL))\n                         ?m\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q\\<rbrakk>\n    \\<Longrightarrow> test_seq\n                       (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                         (- p * q \\<squnion>\n                          p *\n                          (x \\<guillemotleft>\n                           (p \\<star> x \\<guillemotleft> q) * aL)))", "by auto"], ["", "lemma t_seq2_pre_expression:\n  \"x \\<in> While_program \\<Longrightarrow> p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; p \\<in> Test_expression;\n     q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m\n                      \\<in> Pre_expression", "by (simp add: Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre Pre_expression.test_pre While_program.while_prog aL_pre_expression disj_pre tseq2_pre_expression)"], ["", "lemma t_sum2_test:\n  \"p = --p \\<Longrightarrow> q = --q \\<Longrightarrow> tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = --tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q\\<rbrakk>\n    \\<Longrightarrow> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL)) =\n                      - - tsum2 (- p * q) p x\n                           (p \\<star> x \\<guillemotleft> q)\n                           (- p * q \\<squnion>\n                            p *\n                            (x \\<guillemotleft>\n                             (p \\<star> x \\<guillemotleft> q) * aL))", "using Sum_test t_seq2_test_seq tsum2_def"], ["proof (prove)\nusing this:\n  test_seq ?t \\<Longrightarrow>\n  complete_tests_class.Sum ?t = - - complete_tests_class.Sum ?t\n  \\<lbrakk>?p = - - ?p; ?q = - - ?q\\<rbrakk>\n  \\<Longrightarrow> test_seq\n                     (tseq2 (- ?p * ?q) ?p ?x\n                       (?p \\<star> ?x \\<guillemotleft> ?q)\n                       (- ?p * ?q \\<squnion>\n                        ?p *\n                        (?x \\<guillemotleft>\n                         (?p \\<star> ?x \\<guillemotleft> ?q) * aL)))\n  tsum2 ?p ?q ?x ?r ?s \\<equiv>\n  complete_tests_class.Sum (tseq2 ?p ?q ?x ?r ?s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>p = - - p; q = - - q\\<rbrakk>\n    \\<Longrightarrow> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL)) =\n                      - - tsum2 (- p * q) p x\n                           (p \\<star> x \\<guillemotleft> q)\n                           (- p * q \\<squnion>\n                            p *\n                            (x \\<guillemotleft>\n                             (p \\<star> x \\<guillemotleft> q) * aL))", "by auto"], ["", "lemma t_seq2_below_t_seq:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n    shows \"tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m", "let ?t2 = \"tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (state)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m", "let ?t = \"tseq (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (state)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m", "show \"?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m", "proof (induct m)"], ["proof (state)\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "show \"?t2 0 \\<le> ?t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0", "by (smt assms aL_test id_def tests_dual.upper_bound_left tests_dual.upper_bound_right tests_dual.inf_isotone power_zero_id pre_closed pre_expression_test sub_mult_closed test_pre tseq2_def tseq_def)"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         0\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "fix m"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "assume \"?t2 m \\<le> ?t m\""], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         m\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "hence 1: \"?t2 (Suc m) \\<le> tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q) (?t m)\""], ["proof (prove)\nusing this:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         m\n\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     (Suc m)\n    \\<le> tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n             (- p \\<squnion>\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n             m)", "by (smt assms power_succ_unfold_ext pre_closed pre_expression_test sub_mult_closed t_seq2_test t_seq_test test_pre tfun2_iso tseq2_def)"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc m)\n  \\<le> tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "have \"... \\<le> ?t (Suc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n       (- p \\<squnion>\n        (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n       m)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc m)", "by (smt assms tests_dual.upper_bound_left tests_dual.upper_bound_right tests_dual.inf_isotone power_succ_unfold_ext pre_closed pre_expression_test sub_mult_closed t_seq_test test_pre tfun2_def tfun_def tseq_def)"], ["proof (state)\nthis:\n  tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              m \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m)", "thus \"?t2 (Suc m) \\<le> ?t (Suc m)\""], ["proof (prove)\nusing this:\n  tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     (Suc m)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc m)", "using 1"], ["proof (prove)\nusing this:\n  tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc m)\n  \\<le> tfun2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           m)\n\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     (Suc m)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc m)", "by (smt (verit, del_insts) assms pre_closed pre_expression_test test_expression_test tests_dual.sba_dual.transitive tests_dual.sub_sup_closed t_seq2_test t_seq_test tfun2_test)"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc m)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         m\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma t_seq2_below_t_sum:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m\n                      \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n                             (- p \\<squnion>\n                              (x \\<guillemotleft>\n                               (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt (verit, del_insts) Sum_upper pre_expression_test t_seq2_below_t_seq t_seq2_test t_seq_test t_sum_test test_pre test_seq_def tsum_def leq_def tests_dual.sub_associative)"], ["", "lemma t_sum2_below_t_sum:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                      \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n                             (- p \\<squnion>\n                              (x \\<guillemotleft>\n                               (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt Sum_least pre_expression_test t_seq2_below_t_sum t_seq2_test t_sum_test test_pre test_seq_def tsum2_def)"], ["", "lemma t_seq2_below_w:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> p\\<star>x\\<guillemotleft>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m\n                      \\<le> p \\<star> x \\<guillemotleft> q", "apply (cases m)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n     x \\<in> While_program; m = 0\\<rbrakk>\n    \\<Longrightarrow> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                       m\n                      \\<le> p \\<star> x \\<guillemotleft> q\n 2. \\<And>nat.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        x \\<in> While_program; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> tseq2 (- p * q) p x\n                          (p \\<star> x \\<guillemotleft> q)\n                          (- p * q \\<squnion>\n                           p *\n                           (x \\<guillemotleft>\n                            (p \\<star> x \\<guillemotleft> q) * aL))\n                          m\n                         \\<le> p \\<star> x \\<guillemotleft> q", "apply (smt aL_test id_def tests_dual.upper_bound_left tests_dual.sub_sup_right_isotone tests_dual.inf_commutative tests_dual.sub_inf_right_isotone power_zero_id pre_closed pre_expression_test pre_iso sub_mult_closed test_pre tseq2_def while_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        x \\<in> While_program; m = Suc nat\\<rbrakk>\n       \\<Longrightarrow> tseq2 (- p * q) p x\n                          (p \\<star> x \\<guillemotleft> q)\n                          (- p * q \\<squnion>\n                           p *\n                           (x \\<guillemotleft>\n                            (p \\<star> x \\<guillemotleft> q) * aL))\n                          m\n                         \\<le> p \\<star> x \\<guillemotleft> q", "by (smt tseq2_def power_succ_unfold_ext tests_dual.upper_bound_left tests_dual.sub_sup_right_isotone tests_dual.inf_commutative tests_dual.sub_inf_right_isotone pre_closed pre_expression_test pre_iso sub_mult_closed t_seq2_test test_pre tseq2_def while_pre tfun2_def)"], ["", "lemma t_sum2_below_w:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) \\<le> p\\<star>x\\<guillemotleft>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                       (- p * q \\<squnion>\n                        p *\n                        (x \\<guillemotleft>\n                         (p \\<star> x \\<guillemotleft> q) * aL))\n                      \\<le> p \\<star> x \\<guillemotleft> q", "by (smt Sum_least pre_closed pre_expression_test t_seq2_below_w t_seq2_test_seq test_pre tsum2_def)"], ["", "lemma t_sum2_w:\n  assumes \"aL = 1\"\n      and \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"tsum2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) = p\\<star>x\\<guillemotleft>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "let ?w = \"p\\<star>x\\<guillemotleft>q\""], ["proof (state)\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "let ?s = \"-p*q\\<squnion>p*(x\\<guillemotleft>?w*aL)\""], ["proof (state)\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "have \"?w = tseq2 (-p*q) p x ?w ?s 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q =\n    tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0", "by (smt assms(1-3) tests_dual.sup_right_unit id_def tests_dual.inf_commutative power_zero_id pre_closed pre_expression_test sub_mult_closed test_expression_test tseq2_def while_pre)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q =\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0\n\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "hence \"?w \\<le> tsum2 (-p*q) p x ?w ?s\""], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q =\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt assms(2,3) Sum_upper pre_expression_test t_seq2_test_seq test_pre tsum2_def)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    p \\<star> x \\<guillemotleft> q", "by (smt assms(2-4) tests_dual.antisymmetric pre_closed pre_expression_test t_sum2_test t_sum2_below_w test_pre)"], ["proof (state)\nthis:\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  p \\<star> x \\<guillemotleft> q\n\ngoal:\nNo subgoals!", "qed"], ["", "inductive derived_hoare_triple :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (\"_ \\<lparr> _ \\<rparr> _\" [54,54,54] 53)\n  where atom_trip:  \"p \\<in> Pre_expression \\<Longrightarrow> x \\<in> Atomic_program \\<Longrightarrow> x\\<guillemotleft>p\\<lparr>x\\<rparr>p\"\n      | seq_trip:   \"p\\<lparr>x\\<rparr>q \\<and> q\\<lparr>y\\<rparr>r \\<Longrightarrow> p\\<lparr>x*y\\<rparr>r\"\n      | cond_trip:  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> p*q\\<lparr>x\\<rparr>r \\<and> -p*q\\<lparr>y\\<rparr>r \\<Longrightarrow> q\\<lparr>x\\<lhd>p\\<rhd>y\\<rparr>r\"\n      | while_trip: \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> test_seq t \\<and> q \\<le> Sum t \\<Longrightarrow> t 0*p*q\\<lparr>x\\<rparr>aL*q \\<Longrightarrow> (\\<forall>n>0 . t n*p*q\\<lparr>x\\<rparr>pSum t n*q) \\<Longrightarrow> q\\<lparr>p\\<star>x\\<rparr>-p*q\"\n      | cons_trip:  \"p \\<in> Pre_expression \\<Longrightarrow> s \\<in> Pre_expression \\<Longrightarrow> p \\<le> q \\<and> q\\<lparr>x\\<rparr>r \\<Longrightarrow> r \\<le> s \\<Longrightarrow> p\\<lparr>x\\<rparr>s\""], ["", "lemma derived_type:\n  \"p\\<lparr>x\\<rparr>q \\<Longrightarrow> p \\<in> Pre_expression \\<and> q \\<in> Pre_expression \\<and> x \\<in> While_program\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<lparr> x \\<rparr> q \\<Longrightarrow>\n    p \\<in> Pre_expression \\<and>\n    q \\<in> Pre_expression \\<and> x \\<in> While_program", "apply (induct rule: derived_hoare_triple.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p x.\n       \\<lbrakk>p \\<in> Pre_expression; x \\<in> Atomic_program\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> p \\<in> Pre_expression \\<and>\n                         p \\<in> Pre_expression \\<and> x \\<in> While_program\n 2. \\<And>p x q y r.\n       (p \\<lparr> x \\<rparr> q \\<and>\n        p \\<in> Pre_expression \\<and>\n        q \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n       q \\<lparr> y \\<rparr> r \\<and>\n       q \\<in> Pre_expression \\<and>\n       r \\<in> Pre_expression \\<and> y \\<in> While_program \\<Longrightarrow>\n       p \\<in> Pre_expression \\<and>\n       r \\<in> Pre_expression \\<and> x * y \\<in> While_program\n 3. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<in> Pre_expression \\<and>\n         r \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> y \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         r \\<in> Pre_expression \\<and>\n                         x \\<lhd> p \\<rhd> y \\<in> While_program\n 4. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 5. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "apply (simp add: Pre_expression.pre_pre While_program.atom_prog)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p x q y r.\n       (p \\<lparr> x \\<rparr> q \\<and>\n        p \\<in> Pre_expression \\<and>\n        q \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n       q \\<lparr> y \\<rparr> r \\<and>\n       q \\<in> Pre_expression \\<and>\n       r \\<in> Pre_expression \\<and> y \\<in> While_program \\<Longrightarrow>\n       p \\<in> Pre_expression \\<and>\n       r \\<in> Pre_expression \\<and> x * y \\<in> While_program\n 2. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<in> Pre_expression \\<and>\n         r \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> y \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         r \\<in> Pre_expression \\<and>\n                         x \\<lhd> p \\<rhd> y \\<in> While_program\n 3. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 4. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "using While_program.seq_prog"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> While_program; ?y \\<in> While_program\\<rbrakk>\n  \\<Longrightarrow> ?x * ?y \\<in> While_program\n\ngoal (4 subgoals):\n 1. \\<And>p x q y r.\n       (p \\<lparr> x \\<rparr> q \\<and>\n        p \\<in> Pre_expression \\<and>\n        q \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n       q \\<lparr> y \\<rparr> r \\<and>\n       q \\<in> Pre_expression \\<and>\n       r \\<in> Pre_expression \\<and> y \\<in> While_program \\<Longrightarrow>\n       p \\<in> Pre_expression \\<and>\n       r \\<in> Pre_expression \\<and> x * y \\<in> While_program\n 2. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<in> Pre_expression \\<and>\n         r \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> y \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         r \\<in> Pre_expression \\<and>\n                         x \\<lhd> p \\<rhd> y \\<in> While_program\n 3. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 4. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "apply blast"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<in> Pre_expression \\<and>\n         r \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> y \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         r \\<in> Pre_expression \\<and>\n                         x \\<lhd> p \\<rhd> y \\<in> While_program\n 2. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 3. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "using While_program.cond_prog"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<in> Test_expression; ?x \\<in> While_program;\n   ?y \\<in> While_program\\<rbrakk>\n  \\<Longrightarrow> ?x \\<lhd> ?p \\<rhd> ?y \\<in> While_program\n\ngoal (3 subgoals):\n 1. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<in> Pre_expression \\<and>\n         r \\<in> Pre_expression \\<and> x \\<in> While_program) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> y \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         r \\<in> Pre_expression \\<and>\n                         x \\<lhd> p \\<rhd> y \\<in> While_program\n 2. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 3. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "apply blast"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 2. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "using Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.test_pre While_program.while_prog"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<in> Pre_expression; ?q \\<in> Pre_expression\\<rbrakk>\n  \\<Longrightarrow> ?p * ?q \\<in> Pre_expression\n  ?p \\<in> Pre_expression \\<Longrightarrow> - ?p \\<in> Pre_expression\n  ?p \\<in> Test_expression \\<Longrightarrow> ?p \\<in> Pre_expression\n  \\<lbrakk>?p \\<in> Test_expression; ?x \\<in> While_program\\<rbrakk>\n  \\<Longrightarrow> ?p \\<star> ?x \\<in> While_program\n\ngoal (2 subgoals):\n 1. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<in> Pre_expression \\<and>\n        aL * q \\<in> Pre_expression \\<and> x \\<in> While_program;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<in> Pre_expression \\<and>\n           pSum t n * q \\<in> Pre_expression \\<and>\n           x \\<in> While_program\\<rbrakk>\n       \\<Longrightarrow> q \\<in> Pre_expression \\<and>\n                         - p * q \\<in> Pre_expression \\<and>\n                         p \\<star> x \\<in> While_program\n 2. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and>\n        q \\<in> Pre_expression \\<and>\n        r \\<in> Pre_expression \\<and> x \\<in> While_program;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<in> Pre_expression \\<and>\n                         s \\<in> Pre_expression \\<and> x \\<in> While_program", "by blast"], ["", "lemma cons_pre_trip:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q\\<lparr>y\\<rparr>r \\<Longrightarrow> p*q\\<lparr>y\\<rparr>r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Pre_expression; q \\<lparr> y \\<rparr> r\\<rbrakk>\n    \\<Longrightarrow> p * q \\<lparr> y \\<rparr> r", "by (metis cons_trip derived_type Pre_expression.conj_pre pre_expression_test tests_dual.sba_dual.reflexive tests_dual.upper_bound_right)"], ["", "lemma cons_post_trip:\n  \"q \\<in> Pre_expression \\<Longrightarrow> r \\<in> Pre_expression \\<Longrightarrow> p\\<lparr>y\\<rparr>q*r \\<longrightarrow> p\\<lparr>y\\<rparr>r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>q \\<in> Pre_expression; r \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> p \\<lparr> y \\<rparr> q * r \\<longrightarrow>\n                      p \\<lparr> y \\<rparr> r", "by (metis cons_trip derived_type pre_expression_test tests_dual.sba_dual.reflexive tests_dual.upper_bound_right)"], ["", "definition valid_hoare_triple :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\" (\"_ \\<langle> _ \\<rangle> _\" [54,54,54] 53)\n  where \"p\\<langle>x\\<rangle>q \\<equiv> (p \\<in> Pre_expression \\<and> q \\<in> Pre_expression \\<and> x \\<in> While_program \\<and> p \\<le> x\\<guillemotleft>q)\""], ["", "end"], ["", "class hoare_calculus_sound = hoare_calculus +\n  assumes while_soundness: \"-p*-q \\<le> x\\<guillemotleft>-q \\<longrightarrow> aL*-q \\<le> -p\\<star>x\\<guillemotleft>-q\"\nbegin"], ["", "lemma while_soundness_0:\n  \"-p*-q \\<le> x\\<guillemotleft>-q \\<Longrightarrow> -q*aL \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q \\<le> x \\<guillemotleft> - q \\<Longrightarrow>\n    - q * aL \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt while_soundness aL_test sub_comm while_post)"], ["", "lemma while_soundness_1:\n  assumes \"test_seq t\"\n      and \"-q \\<le> Sum t\"\n      and \"t 0*-p*-q \\<le> x\\<guillemotleft>aL*-q\"\n      and \"\\<forall>n>0 . t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\"\n    shows \"-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"\\<forall>n . t n*-p*-q \\<le> x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n. t n * - p * - q \\<le> x \\<guillemotleft> - q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. t n * - p * - q \\<le> x \\<guillemotleft> - q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. t n * - p * - q \\<le> x \\<guillemotleft> - q", "show \"t n*-p*-q \\<le> x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> - q", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> t n * - p * - q \\<le> x \\<guillemotleft> - q\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> t n * - p * - q \\<le> x \\<guillemotleft> - q\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> - q", "by (smt (z3) assms(1) assms(3) aL_test leq_def pre_closed pre_lower_bound_right test_seq_def tests_dual.sub_associative tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "hence 1: \"t n*-p*-q \\<le> x\\<guillemotleft>pSum t n*-q\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q", "using assms(4)"], ["proof (prove)\nusing this:\n  n = Suc m\n  \\<forall>n>0. t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q", "by blast"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "have \"x\\<guillemotleft>pSum t n*-q \\<le> x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> pSum t n * - q \\<le> x \\<guillemotleft> - q", "by (metis assms(1) pSum_test pre_lower_bound_right)"], ["proof (state)\nthis:\n  x \\<guillemotleft> pSum t n * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       t n * - p * - q \\<le> x \\<guillemotleft> - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<guillemotleft> pSum t n * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> - q", "using 1"], ["proof (prove)\nusing this:\n  x \\<guillemotleft> pSum t n * - q \\<le> x \\<guillemotleft> - q\n  t n * - p * - q \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. t n * - p * - q \\<le> x \\<guillemotleft> - q", "by (smt (verit, del_insts) assms(1) pSum_test pre_closed sub_mult_closed test_seq_def leq_def tests_dual.sub_associative)"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t n * - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n. t n * - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence 2: \"-p*-q \\<le> x\\<guillemotleft>-q\""], ["proof (prove)\nusing this:\n  \\<forall>n. t n * - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. - p * - q \\<le> x \\<guillemotleft> - q", "by (smt assms(1,2) Sum_test leq_def mult_right_dist_Sum pre_closed sub_assoc sub_comm sub_mult_closed test_seq_def)"], ["proof (state)\nthis:\n  - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"\\<forall>n . t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q \\<and> pSum t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "show \"t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q \\<and> pSum t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n    pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof (induct n rule: nat_less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "assume 3: \"\\<forall>m<n . t m*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q \\<and> pSum t m*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (state)\nthis:\n  \\<forall>m<n.\n     t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n     pSum t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 4: \"pSum t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (metis pSum.simps(1) pre_closed sub_mult_closed tests_dual.top_greatest tests_dual.sba_dual.less_eq_inf tests_dual.top_double_complement)"], ["proof (state)\nthis:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence \"pSum t n*-q = (pSum t m \\<squnion> t m)*-q\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. pSum t n * - q = (pSum t m \\<squnion> t m) * - q", "by simp"], ["proof (state)\nthis:\n  pSum t n * - q = (pSum t m \\<squnion> t m) * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "also"], ["proof (state)\nthis:\n  pSum t n * - q = (pSum t m \\<squnion> t m) * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"... = pSum t m*-q \\<squnion> t m*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pSum t m \\<squnion> t m) * - q = pSum t m * - q \\<squnion> t m * - q", "by (metis (full_types) assms(1) pSum_test test_seq_def tests_dual.sup_right_dist_inf)"], ["proof (state)\nthis:\n  (pSum t m \\<squnion> t m) * - q = pSum t m * - q \\<squnion> t m * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "also"], ["proof (state)\nthis:\n  (pSum t m \\<squnion> t m) * - q = pSum t m * - q \\<squnion> t m * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"... \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pSum t m * - q \\<squnion> t m * - q\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pSum t m * - q \\<squnion> t m * - q\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"pSum t m*-q = --(pSum t m*-q) \\<and> t m*-q = --(t m*-q) \\<and> -p\\<star>x\\<guillemotleft>--p*-q = --(-p\\<star>x\\<guillemotleft>--p*-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pSum t m * - q = - - (pSum t m * - q) \\<and>\n    t m * - q = - - (t m * - q) \\<and>\n    - p \\<star> x \\<guillemotleft> - - p * - q =\n    - - (- p \\<star> x \\<guillemotleft> - - p * - q)", "apply (intro conjI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. pSum t m * - q = - - (pSum t m * - q)\n 2. t m * - q = - - (t m * - q)\n 3. - p \\<star> x \\<guillemotleft> - - p * - q =\n    - - (- p \\<star> x \\<guillemotleft> - - p * - q)", "apply (metis assms(1) pSum_test tests_dual.sub_sup_closed)"], ["proof (prove)\ngoal (2 subgoals):\n 1. t m * - q = - - (t m * - q)\n 2. - p \\<star> x \\<guillemotleft> - - p * - q =\n    - - (- p \\<star> x \\<guillemotleft> - - p * - q)", "apply (metis assms(1) test_seq_def tests_dual.sub_sup_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - - p * - q =\n    - - (- p \\<star> x \\<guillemotleft> - - p * - q)", "by (metis pre_closed tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  pSum t m * - q = - - (pSum t m * - q) \\<and>\n  t m * - q = - - (t m * - q) \\<and>\n  - p \\<star> x \\<guillemotleft> - - p * - q =\n  - - (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. pSum t m * - q \\<squnion> t m * - q\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  pSum t m * - q = - - (pSum t m * - q) \\<and>\n  t m * - q = - - (t m * - q) \\<and>\n  - p \\<star> x \\<guillemotleft> - - p * - q =\n  - - (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. pSum t m * - q \\<squnion> t m * - q\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 3"], ["proof (prove)\nusing this:\n  pSum t m * - q = - - (pSum t m * - q) \\<and>\n  t m * - q = - - (t m * - q) \\<and>\n  - p \\<star> x \\<guillemotleft> - - p * - q =\n  - - (- p \\<star> x \\<guillemotleft> - - p * - q)\n  \\<forall>m<n.\n     t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n     pSum t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. pSum t m * - q \\<squnion> t m * - q\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt (z3) lessI Suc tests_dual.greatest_lower_bound sub_mult_closed)"], ["proof (state)\nthis:\n  pSum t m * - q \\<squnion> t m * - q\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pSum t m * - q \\<squnion> t m * - q\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "finally"], ["proof (chain)\npicking this:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "show ?thesis"], ["proof (prove)\nusing this:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "."], ["proof (state)\nthis:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence 5: \"x\\<guillemotleft>pSum t n*-q \\<le> x\\<guillemotleft>-p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft> pSum t n * - q\n    \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt assms pSum_test pre_closed pre_iso sub_mult_closed)"], ["proof (state)\nthis:\n  x \\<guillemotleft> pSum t n * - q\n  \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 6: \"-p*(t n*-q) \\<le> -p*(-p\\<star>x\\<guillemotleft>--p*-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "proof (cases n)"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "case 0"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow>\n    - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n 2. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "using 2"], ["proof (prove)\nusing this:\n  n = 0\n  - p * - q \\<le> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "by (smt assms(1,3) aL_test leq_def tests_dual.sup_idempotent tests_dual.sub_sup_right_isotone pre_closed pre_lower_bound_left sub_assoc sub_comm sub_mult_closed test_seq_def transitive while_pre_then while_soundness_0)"], ["proof (state)\nthis:\n  - p * (t n * - q) \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "case (Suc m)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "hence \"-p*(t n*-q) \\<le> x\\<guillemotleft>pSum t n*-q\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. - p * (t n * - q) \\<le> x \\<guillemotleft> pSum t n * - q", "by (smt assms(1,4) test_seq_def tests_dual.sub_associative tests_dual.sub_commutative zero_less_Suc)"], ["proof (state)\nthis:\n  - p * (t n * - q) \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "hence \"-p*(t n*-q) \\<le> x\\<guillemotleft>-p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  - p * (t n * - q) \\<le> x \\<guillemotleft> pSum t n * - q\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q", "using 5"], ["proof (prove)\nusing this:\n  - p * (t n * - q) \\<le> x \\<guillemotleft> pSum t n * - q\n  x \\<guillemotleft> pSum t n * - q\n  \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt assms(1) tests_dual.least_upper_bound pSum_test pre_closed sub_mult_closed test_seq_def leq_def)"], ["proof (state)\nthis:\n  - p * (t n * - q)\n  \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "hence \"-p*(t n*-q) \\<le> -p*(x\\<guillemotleft>-p\\<star>x\\<guillemotleft>--p*-q)\""], ["proof (prove)\nusing this:\n  - p * (t n * - q)\n  \\<le> x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> - p *\n          (x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q)", "by (smt assms(1) tests_dual.upper_bound_left pre_closed sub_mult_closed test_seq_def leq_def tests_dual.sub_associative)"], ["proof (state)\nthis:\n  - p * (t n * - q)\n  \\<le> - p *\n        (x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       n = Suc nat \\<Longrightarrow>\n       - p * (t n * - q)\n       \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p * (t n * - q)\n  \\<le> - p *\n        (x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "using while_post while_pre_then"], ["proof (prove)\nusing this:\n  - p * (t n * - q)\n  \\<le> - p *\n        (x \\<guillemotleft> - p \\<star> x \\<guillemotleft> - - p * - q)\n  - ?p \\<star> ?x \\<guillemotleft> - ?q =\n  - ?p \\<star> ?x \\<guillemotleft> - - ?p * - ?q\n  - ?p * (- ?p \\<star> ?x \\<guillemotleft> - ?q) =\n  - ?p * (?x \\<guillemotleft> - ?p \\<star> ?x \\<guillemotleft> - ?q)\n\ngoal (1 subgoal):\n 1. - p * (t n * - q)\n    \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "by auto"], ["proof (state)\nthis:\n  - p * (t n * - q) \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  - p * (t n * - q) \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"--p*(t n*-q) \\<le> --p*(-p\\<star>x\\<guillemotleft>--p*-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (t n * - q)\n    \\<le> - - p * (- p \\<star> x \\<guillemotleft> - - p * - q)", "by (smt assms(1) leq_def tests_dual.upper_bound_right sub_assoc sub_comm sub_mult_closed test_seq_def while_pre_else)"], ["proof (state)\nthis:\n  - - p * (t n * - q)\n  \\<le> - - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       \\<forall>m<n.\n          t m * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n          pSum t m * - q\n          \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<Longrightarrow>\n       t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n       pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus \"t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q \\<and> pSum t n*-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\nusing this:\n  - - p * (t n * - q)\n  \\<le> - - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n    pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 4 6"], ["proof (prove)\nusing this:\n  - - p * (t n * - q)\n  \\<le> - - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n  - p * (t n * - q) \\<le> - p * (- p \\<star> x \\<guillemotleft> - - p * - q)\n\ngoal (1 subgoal):\n 1. t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n    pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt assms(1) tests_dual.sup_less_eq_cases_2 pre_closed sub_mult_closed test_seq_def)"], ["proof (state)\nthis:\n  t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n  pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n     pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q \\<and>\n     pSum t n * - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by (smt assms(1,2) Sum_test leq_def mult_right_dist_Sum pre_closed sub_comm sub_mult_closed)"], ["proof (state)\nthis:\n  - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_soundness_2:\n  assumes \"test_seq t\"\n      and \"-r \\<le> Sum t\"\n      and \"\\<forall>n . t n*-p \\<le> x\\<guillemotleft>pSum t n\"\n    shows \"-r \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have 1: \"\\<forall>n>0 . t n*-p*Sum t \\<le> x\\<guillemotleft>pSum t n*Sum t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       t n * - p * complete_tests_class.Sum t\n       \\<le> x \\<guillemotleft> pSum t n * complete_tests_class.Sum t", "by (smt (z3) assms(1,3) Sum_test Sum_upper leq_def pSum_below_Sum pSum_test test_seq_def tests_dual.sub_associative tests_dual.sub_commutative)"], ["proof (state)\nthis:\n  \\<forall>n>0.\n     t n * - p * complete_tests_class.Sum t\n     \\<le> x \\<guillemotleft> pSum t n * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have 2: \"t 0*-p*Sum t \\<le> x\\<guillemotleft>bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t 0 * - p * complete_tests_class.Sum t \\<le> x \\<guillemotleft> bot", "by (smt assms(1,3) Sum_test Sum_upper leq_def sub_assoc sub_comm test_seq_def pSum.simps(1))"], ["proof (state)\nthis:\n  t 0 * - p * complete_tests_class.Sum t \\<le> x \\<guillemotleft> bot\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have \"x\\<guillemotleft>bot \\<le> x\\<guillemotleft>aL*Sum t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> bot\n    \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t", "by (smt assms(1) Sum_test aL_test pre_iso sub_mult_closed tests_dual.top_double_complement tests_dual.top_greatest)"], ["proof (state)\nthis:\n  x \\<guillemotleft> bot\n  \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "hence \"t 0*-p*Sum t \\<le> x\\<guillemotleft>aL*Sum t\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft> bot\n  \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. t 0 * - p * complete_tests_class.Sum t\n    \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t", "using 2"], ["proof (prove)\nusing this:\n  x \\<guillemotleft> bot\n  \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t\n  t 0 * - p * complete_tests_class.Sum t \\<le> x \\<guillemotleft> bot\n\ngoal (1 subgoal):\n 1. t 0 * - p * complete_tests_class.Sum t\n    \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t", "by (smt (z3) assms(1) Sum_test aL_test leq_def pSum.simps(1) pSum_test pre_closed test_seq_def tests_dual.sub_associative tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  t 0 * - p * complete_tests_class.Sum t\n  \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "hence 3: \"Sum t \\<le> -p\\<star>x\\<guillemotleft>--p*Sum t\""], ["proof (prove)\nusing this:\n  t 0 * - p * complete_tests_class.Sum t\n  \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. complete_tests_class.Sum t\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t", "using 1"], ["proof (prove)\nusing this:\n  t 0 * - p * complete_tests_class.Sum t\n  \\<le> x \\<guillemotleft> aL * complete_tests_class.Sum t\n  \\<forall>n>0.\n     t n * - p * complete_tests_class.Sum t\n     \\<le> x \\<guillemotleft> pSum t n * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. complete_tests_class.Sum t\n    \\<le> - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t", "by (smt (verit, del_insts) assms(1) Sum_test tests_dual.sba_dual.one_def tests_dual.sup_right_unit tests_dual.upper_bound_left while_soundness_1)"], ["proof (state)\nthis:\n  complete_tests_class.Sum t\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "have \"-p\\<star>x\\<guillemotleft>--p*Sum t \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t\n    \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (metis assms(1) Sum_test pre_below_pre_one tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "hence \"Sum t \\<le> -p\\<star>x\\<guillemotleft>1\""], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. complete_tests_class.Sum t \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "using 3"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t\n  \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n  complete_tests_class.Sum t\n  \\<le> - p \\<star> x \\<guillemotleft> - - p * complete_tests_class.Sum t\n\ngoal (1 subgoal):\n 1. complete_tests_class.Sum t \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (smt (z3) assms(1) Sum_test pre_closed tests_dual.sba_dual.one_def while_post tests_dual.transitive)"], ["proof (state)\nthis:\n  complete_tests_class.Sum t \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "thus ?thesis"], ["proof (prove)\nusing this:\n  complete_tests_class.Sum t \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal (1 subgoal):\n 1. - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)", "by (smt (z3) assms(1,2) Sum_test pre_closed tests_dual.sba_dual.one_def tests_dual.transitive)"], ["proof (state)\nthis:\n  - r \\<le> - p \\<star> x \\<guillemotleft> (1::'a)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem soundness:\n  \"p\\<lparr>x\\<rparr>q \\<Longrightarrow> p\\<langle>x\\<rangle>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<lparr> x \\<rparr> q \\<Longrightarrow> p \\<langle> x \\<rangle> q", "apply (induct rule: derived_hoare_triple.induct)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p x.\n       \\<lbrakk>p \\<in> Pre_expression; x \\<in> Atomic_program\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> p \\<langle> x \\<rangle> p\n 2. \\<And>p x q y r.\n       (p \\<lparr> x \\<rparr> q \\<and> p \\<langle> x \\<rangle> q) \\<and>\n       q \\<lparr> y \\<rparr> r \\<and>\n       q \\<langle> y \\<rangle> r \\<Longrightarrow>\n       p \\<langle> x * y \\<rangle> r\n 3. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<langle> x \\<rangle> r) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<langle> y \\<rangle> r\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> x \\<lhd> p \\<rhd> y \\<rangle> r\n 4. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<langle> x \\<rangle> aL * q;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<langle> x \\<rangle> pSum t n * q\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> p \\<star> x \\<rangle> - p * q\n 5. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and> q \\<langle> x \\<rangle> r;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<langle> x \\<rangle> s", "apply (metis Pre_expression.pre_pre While_program.atom_prog pre_expression_test tests_dual.sba_dual.reflexive valid_hoare_triple_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p x q y r.\n       (p \\<lparr> x \\<rparr> q \\<and> p \\<langle> x \\<rangle> q) \\<and>\n       q \\<lparr> y \\<rparr> r \\<and>\n       q \\<langle> y \\<rangle> r \\<Longrightarrow>\n       p \\<langle> x * y \\<rangle> r\n 2. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<langle> x \\<rangle> r) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<langle> y \\<rangle> r\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> x \\<lhd> p \\<rhd> y \\<rangle> r\n 3. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<langle> x \\<rangle> aL * q;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<langle> x \\<rangle> pSum t n * q\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> p \\<star> x \\<rangle> - p * q\n 4. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and> q \\<langle> x \\<rangle> r;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<langle> x \\<rangle> s", "apply (metis valid_hoare_triple_def pre_expression_test pre_compose While_program.seq_prog)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>p q x r y.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        (p * q \\<lparr> x \\<rparr> r \\<and>\n         p * q \\<langle> x \\<rangle> r) \\<and>\n        - p * q \\<lparr> y \\<rparr> r \\<and>\n        - p * q \\<langle> y \\<rangle> r\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> x \\<lhd> p \\<rhd> y \\<rangle> r\n 2. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<langle> x \\<rangle> aL * q;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<langle> x \\<rangle> pSum t n * q\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> p \\<star> x \\<rangle> - p * q\n 3. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and> q \\<langle> x \\<rangle> r;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<langle> x \\<rangle> s", "apply (metis valid_hoare_triple_def ite_import_mult pre_expression_test cond_prog test_pre)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p q t x.\n       \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n        test_seq t \\<and> q \\<le> complete_tests_class.Sum t;\n        t 0 * p * q \\<lparr> x \\<rparr> aL * q;\n        t 0 * p * q \\<langle> x \\<rangle> aL * q;\n        \\<forall>n>0.\n           t n * p * q \\<lparr> x \\<rparr> pSum t n * q \\<and>\n           t n * p * q \\<langle> x \\<rangle> pSum t n * q\\<rbrakk>\n       \\<Longrightarrow> q \\<langle> p \\<star> x \\<rangle> - p * q\n 2. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and> q \\<langle> x \\<rangle> r;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<langle> x \\<rangle> s", "apply (smt (verit, del_insts) Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.test_pre While_program.while_prog pre_expression_test valid_hoare_triple_def while_soundness_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p s q x r.\n       \\<lbrakk>p \\<in> Pre_expression; s \\<in> Pre_expression;\n        p \\<le> q \\<and>\n        q \\<lparr> x \\<rparr> r \\<and> q \\<langle> x \\<rangle> r;\n        r \\<le> s\\<rbrakk>\n       \\<Longrightarrow> p \\<langle> x \\<rangle> s", "by (metis pre_expression_test pre_iso pre_pre tests_dual.sba_dual.transitive valid_hoare_triple_def)"], ["", "end"], ["", "class hoare_calculus_pre_complete = hoare_calculus +\n  assumes aL_pre_import: \"(x\\<guillemotleft>-q)*aL \\<le> x\\<guillemotleft>-q*aL\"\n  assumes pre_right_dist_Sum: \"x \\<in> While_program \\<and> ascending_chain t \\<and> test_seq t \\<longrightarrow> x\\<guillemotleft>Sum t = Sum (\\<lambda>n . x\\<guillemotleft>t n)\"\nbegin"], ["", "lemma aL_pre_import_equal:\n  \"(x\\<guillemotleft>-q)*aL = (x\\<guillemotleft>-q*aL)*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL", "have 1: \"(x\\<guillemotleft>-q)*aL \\<le> (x\\<guillemotleft>-q*aL)*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL \\<le> (x \\<guillemotleft> - q * aL) * aL", "by (smt (z3) aL_pre_import aL_test pre_closed tests_dual.sub_sup_closed tests_dual.least_upper_bound tests_dual.upper_bound_right)"], ["proof (state)\nthis:\n  (x \\<guillemotleft> - q) * aL \\<le> (x \\<guillemotleft> - q * aL) * aL\n\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL", "have \"(x\\<guillemotleft>-q*aL)*aL \\<le> (x\\<guillemotleft>-q)*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q * aL) * aL \\<le> (x \\<guillemotleft> - q) * aL", "by (smt (verit, ccfv_threshold) aL_test pre_closed pre_lower_bound_left tests_dual.sba_dual.inf_isotone tests_dual.sba_dual.reflexive tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  (x \\<guillemotleft> - q * aL) * aL \\<le> (x \\<guillemotleft> - q) * aL\n\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL", "thus ?thesis"], ["proof (prove)\nusing this:\n  (x \\<guillemotleft> - q * aL) * aL \\<le> (x \\<guillemotleft> - q) * aL\n\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL", "using 1"], ["proof (prove)\nusing this:\n  (x \\<guillemotleft> - q * aL) * aL \\<le> (x \\<guillemotleft> - q) * aL\n  (x \\<guillemotleft> - q) * aL \\<le> (x \\<guillemotleft> - q * aL) * aL\n\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL", "by (smt (z3) tests_dual.antisymmetric aL_test pre_closed tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  (x \\<guillemotleft> - q) * aL = (x \\<guillemotleft> - q * aL) * aL\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma aL_pre_below_t_seq2:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n    shows \"(p\\<star>x\\<guillemotleft>q)*aL \\<le> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0", "proof (unfold tseq2_def power_zero_id id_def while_pre)"], ["proof (state)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "have \"(p\\<star>x\\<guillemotleft>q)*aL = (p*(x\\<guillemotleft>p\\<star>x\\<guillemotleft>q) \\<squnion> -p*q)*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL =\n    (p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) \\<squnion>\n     - p * q) *\n    aL", "by (metis assms while_pre test_pre pre_expression_test)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) * aL =\n  (p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) \\<squnion>\n   - p * q) *\n  aL\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "also"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) * aL =\n  (p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) \\<squnion>\n   - p * q) *\n  aL\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "have \"... = p*(x\\<guillemotleft>p\\<star>x\\<guillemotleft>q)*aL \\<squnion> -p*q*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) \\<squnion>\n     - p * q) *\n    aL =\n    p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL \\<squnion>\n    - p * q * aL", "by (smt (z3) assms aL_test tests_dual.sup_right_dist_inf pre_closed pre_expression_test sub_mult_closed test_pre)"], ["proof (state)\nthis:\n  (p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) \\<squnion>\n   - p * q) *\n  aL =\n  p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL \\<squnion>\n  - p * q * aL\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "also"], ["proof (state)\nthis:\n  (p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) \\<squnion>\n   - p * q) *\n  aL =\n  p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL \\<squnion>\n  - p * q * aL\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "have \"... = p*((x\\<guillemotleft>p\\<star>x\\<guillemotleft>q)*aL) \\<squnion> -p*q*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL \\<squnion>\n    - p * q * aL =\n    p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL", "by (smt assms aL_test pre_closed pre_expression_test test_pre sub_assoc)"], ["proof (state)\nthis:\n  p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL \\<squnion>\n  - p * q * aL =\n  p * ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n  - p * q * aL\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "also"], ["proof (state)\nthis:\n  p * (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL \\<squnion>\n  - p * q * aL =\n  p * ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n  - p * q * aL\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "have \"... \\<le> p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL) \\<squnion> -p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n          - p * q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n          - p * q", "have 1: \"(x\\<guillemotleft>p\\<star>x\\<guillemotleft>q)*aL \\<le> x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL", "by (metis assms(2) pre_closed pre_expression_test aL_pre_import)"], ["proof (state)\nthis:\n  (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL\n\ngoal (1 subgoal):\n 1. p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n          - p * q", "have \"-p*q*aL \\<le> -p*q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * q * aL \\<le> - p * q", "by (metis assms(2) aL_test pre_expression_test tests_dual.sub_sup_closed tests_dual.upper_bound_left)"], ["proof (state)\nthis:\n  - p * q * aL \\<le> - p * q\n\ngoal (1 subgoal):\n 1. p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n          - p * q", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p * q * aL \\<le> - p * q\n\ngoal (1 subgoal):\n 1. p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n          - p * q", "using 1"], ["proof (prove)\nusing this:\n  - p * q * aL \\<le> - p * q\n  (x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL\n\ngoal (1 subgoal):\n 1. p *\n    ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q * aL\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n          - p * q", "by (smt assms aL_test pre_closed pre_expression_test test_pre tests_dual.sub_sup_closed tests_dual.sub_sup_right_isotone tests_dual.inf_isotone)"], ["proof (state)\nthis:\n  p * ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n  - p * q * aL\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n        - p * q\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  p * ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n  - p * q * aL\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n        - p * q\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "also"], ["proof (state)\nthis:\n  p * ((x \\<guillemotleft> p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n  - p * q * aL\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n        - p * q\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "have \"... = -p*q \\<squnion> p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n    - p * q =\n    - p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "by (smt assms aL_test tests_dual.inf_commutative pre_closed pre_expression_test test_pre tests_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) \\<squnion>\n  - p * q =\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "finally"], ["proof (chain)\npicking this:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "show \"(p\\<star>x\\<guillemotleft>q)*aL \\<le> -p*q \\<squnion> p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)\""], ["proof (prove)\nusing this:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "."], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma t_seq2_ascending:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) m \\<le> tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)) (Suc m)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc m)", "proof (induct m)"], ["proof (state)\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "let ?w = \"p\\<star>x\\<guillemotleft>q\""], ["proof (state)\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "let ?r = \"-p*q\\<squnion>p*(x\\<guillemotleft>?w*aL)\""], ["proof (state)\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "have 1: \"?w*aL = --(?w*aL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL =\n    - - ((p \\<star> x \\<guillemotleft> q) * aL)", "by (simp add: assms Pre_expression.conj_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression pre_expression_test)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) * aL =\n  - - ((p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "have 2: \"?r = --?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) =\n    - - (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (simp add: assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre Pre_expression.test_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test)"], ["proof (state)\nthis:\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) =\n  - - (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "have \"?w*aL \\<le> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "by (metis aL_pre_below_t_seq2 assms(1,2) id_def tseq2_def power_zero_id)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"?w*aL \\<le> ?w*?r\""], ["proof (prove)\nusing this:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> (p \\<star> x \\<guillemotleft> q) *\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 1 2"], ["proof (prove)\nusing this:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  (p \\<star> x \\<guillemotleft> q) * aL =\n  - - ((p \\<star> x \\<guillemotleft> q) * aL)\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) =\n  - - (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> (p \\<star> x \\<guillemotleft> q) *\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt (verit, ccfv_threshold) assms Pre_expression.pre_pre While_program.while_prog aL_test pre_expression_test tests_dual.sub_associative tests_dual.sub_sup_right_isotone tests_dual.sba_dual.less_eq_inf tests_dual.sba_dual.reflexive)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> (p \\<star> x \\<guillemotleft> q) *\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"x\\<guillemotleft>?w*aL \\<le> x\\<guillemotleft>(?w*?r)\""], ["proof (prove)\nusing this:\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> (p \\<star> x \\<guillemotleft> q) *\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> x \\<guillemotleft>\n          (p \\<star> x \\<guillemotleft> q) *\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt (verit, ccfv_threshold) assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test pre_iso test_pre)"], ["proof (state)\nthis:\n  x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"p*(x\\<guillemotleft>?w*aL) \\<le> p*(x\\<guillemotleft>(?w*?r))\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) *\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (smt (z3) assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test test_pre tests_dual.sub_sup_right_isotone)"], ["proof (state)\nthis:\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"?r \\<le> -p*q\\<squnion>p*(x\\<guillemotleft>(?w*?r))\""], ["proof (prove)\nusing this:\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. - p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n    \\<le> - p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) *\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (smt (verit, del_insts) assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test test_pre tests_dual.sba_dual.reflexive tests_dual.inf_isotone)"], ["proof (state)\nthis:\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  \\<le> - p * q \\<squnion>\n        p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (2 subgoals):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)\n 2. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "thus ?case"], ["proof (prove)\nusing this:\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  \\<le> - p * q \\<squnion>\n        p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc 0)", "by (unfold tseq2_def power_zero_id power_succ_unfold_ext id_def tfun2_def)"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0\n  \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc 0)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "let ?w = \"p\\<star>x\\<guillemotleft>q\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "let ?r = \"-p*q\\<squnion>p*(x\\<guillemotleft>?w*aL)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "let ?t = \"tseq2 (-p*q) p x ?w ?r\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "case (Suc m)"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"?w*?t m \\<le> ?w*?t (Suc m)\""], ["proof (prove)\nusing this:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) *\n    tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> (p \\<star> x \\<guillemotleft> q) *\n          tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc m)", "by (smt (z3) assms(1,2) pre_closed pre_expression_test t_seq2_test test_expression_test tests_dual.sub_sup_right_isotone)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> (p \\<star> x \\<guillemotleft> q) *\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"x\\<guillemotleft>?w*?t m \\<le> x\\<guillemotleft>?w*?t (Suc m)\""], ["proof (prove)\nusing this:\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> (p \\<star> x \\<guillemotleft> q) *\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m\n    \\<le> x \\<guillemotleft>\n          (p \\<star> x \\<guillemotleft> q) *\n          tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc m)", "by (smt (z3) assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test pre_iso test_pre tseq2_pre_expression)"], ["proof (state)\nthis:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"p*(x\\<guillemotleft>?w*?t m) \\<le> p*(x\\<guillemotleft>?w*?t (Suc m))\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc m)\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     (p \\<star> x \\<guillemotleft> q) *\n     tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      m)\n    \\<le> p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) *\n           tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n            (- p * q \\<squnion>\n             p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n            (Suc m))", "by (smt (z3) assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test test_pre tests_dual.sub_sup_right_isotone tseq2_pre_expression)"], ["proof (state)\nthis:\n  p *\n  (x \\<guillemotleft>\n   (p \\<star> x \\<guillemotleft> q) *\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    m)\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n          (Suc m))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "hence \"-p*q\\<squnion>p*(x\\<guillemotleft>?w*?t m) \\<le> -p*q\\<squnion>p*(x\\<guillemotleft>?w*?t (Suc m))\""], ["proof (prove)\nusing this:\n  p *\n  (x \\<guillemotleft>\n   (p \\<star> x \\<guillemotleft> q) *\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    m)\n  \\<le> p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n          (Suc m))\n\ngoal (1 subgoal):\n 1. - p * q \\<squnion>\n    p *\n    (x \\<guillemotleft>\n     (p \\<star> x \\<guillemotleft> q) *\n     tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      m)\n    \\<le> - p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) *\n           tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n            (- p * q \\<squnion>\n             p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n            (Suc m))", "by (smt (z3) assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test test_pre tests_dual.sba_dual.reflexive tests_dual.inf_isotone tseq2_pre_expression)"], ["proof (state)\nthis:\n  - p * q \\<squnion>\n  p *\n  (x \\<guillemotleft>\n   (p \\<star> x \\<guillemotleft> q) *\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    m)\n  \\<le> - p * q \\<squnion>\n        p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n          (Suc m))\n\ngoal (1 subgoal):\n 1. \\<And>m.\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        m\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc m) \\<Longrightarrow>\n       tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n        (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        (Suc m)\n       \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc (Suc m))", "thus ?case"], ["proof (prove)\nusing this:\n  - p * q \\<squnion>\n  p *\n  (x \\<guillemotleft>\n   (p \\<star> x \\<guillemotleft> q) *\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    m)\n  \\<le> - p * q \\<squnion>\n        p *\n        (x \\<guillemotleft>\n         (p \\<star> x \\<guillemotleft> q) *\n         tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n          (- p * q \\<squnion>\n           p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n          (Suc m))\n\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     (Suc m)\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc (Suc m))", "by (smt tseq2_def power_succ_unfold_ext tfun2_def)"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc m)\n  \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc (Suc m))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma t_seq2_ascending_chain:\n  \"p \\<in> Test_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> ascending_chain (tseq2 (-p*q) p x (p\\<star>x\\<guillemotleft>q) (-p*q\\<squnion>p*(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Test_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> ascending_chain\n                       (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                         (- p * q \\<squnion>\n                          p *\n                          (x \\<guillemotleft>\n                           (p \\<star> x \\<guillemotleft> q) * aL)))", "by (simp add: ord.ascending_chain_def t_seq2_ascending)"], ["", "end"], ["", "class hoare_calculus_complete = hoare_calculus_pre_complete +\n  assumes while_completeness: \"-p*(x\\<guillemotleft>-q) \\<le> -q \\<longrightarrow> -p\\<star>x\\<guillemotleft>-q \\<le> -q\\<squnion>aL\"\nbegin"], ["", "lemma while_completeness_var:\n  assumes \"-p*(x\\<guillemotleft>-q)\\<squnion>-r \\<le> -q\"\n    shows \"-p\\<star>x\\<guillemotleft>-r \\<le> -q\\<squnion>aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL", "have 1: \"-p\\<star>x\\<guillemotleft>-q \\<le> -q\\<squnion>aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - q \\<le> - q \\<squnion> aL", "by (smt assms pre_closed tests_dual.sub_sup_closed tests_dual.greatest_lower_bound while_completeness)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - q \\<le> - q \\<squnion> aL\n\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL", "have \"-p\\<star>x\\<guillemotleft>-r \\<le> -p\\<star>x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r\n    \\<le> - p \\<star> x \\<guillemotleft> - q", "by (smt assms pre_closed tests_dual.sub_sup_closed tests_dual.greatest_lower_bound pre_iso)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - r\n  \\<le> - p \\<star> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - r\n  \\<le> - p \\<star> x \\<guillemotleft> - q\n\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL", "using 1"], ["proof (prove)\nusing this:\n  - p \\<star> x \\<guillemotleft> - r\n  \\<le> - p \\<star> x \\<guillemotleft> - q\n  - p \\<star> x \\<guillemotleft> - q \\<le> - q \\<squnion> aL\n\ngoal (1 subgoal):\n 1. - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL", "by (smt (z3) aL_test pre_closed tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.transitive)"], ["proof (state)\nthis:\n  - p \\<star> x \\<guillemotleft> - r \\<le> - q \\<squnion> aL\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_completeness_sum:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"p\\<star>x\\<guillemotleft>q \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?w = \"p\\<star>x\\<guillemotleft>q\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?r = \"-p*q\\<squnion>p*(x\\<guillemotleft>?w*aL)\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?t = \"tseq2 (-p*q) p x ?w ?r\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?ts = \"tsum2 (-p*q) p x ?w ?r\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 1: \"?w = --?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)", "by (metis assms(2) pre_expression_test pre_closed)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 2: \"?r = --?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) =\n    - - (- p * q \\<squnion>\n         p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (simp add: assms Pre_expression.conj_pre Pre_expression.neg_pre Pre_expression.pre_pre Pre_expression.test_pre While_program.while_prog aL_pre_expression disj_pre pre_expression_test)"], ["proof (state)\nthis:\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) =\n  - - (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 3: \"?ts = --?ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n    - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (meson assms(1) assms(2) pre_expression_test t_sum2_test test_expression_test)"], ["proof (state)\nthis:\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 4: \"test_seq ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq\n     (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (simp add: assms(1) assms(2) pre_expression_test t_seq2_test_seq test_expression_test)"], ["proof (state)\nthis:\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"-p*q \\<le> ?r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * q\n    \\<le> - p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "by (smt (z3) assms(1,2) aL_test pre_closed pre_expression_test sub_mult_closed test_pre tests_dual.lower_bound_left)"], ["proof (state)\nthis:\n  - p * q\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence 5: \"-p*q \\<le> ?ts\""], ["proof (prove)\nusing this:\n  - p * q\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. - p * q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 1 2 3"], ["proof (prove)\nusing this:\n  - p * q\n  \\<le> - p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  - p * q \\<squnion>\n  p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) =\n  - - (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. - p * q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt assms Sum_upper id_def tests_dual.sba_dual.transitive power_zero_id pre_expression_test sub_mult_closed test_pre tseq2_def tseq2_test_seq tsum2_def)"], ["proof (state)\nthis:\n  - p * q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"\\<forall>n . p*(x\\<guillemotleft>?t n) \\<le> ?ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       p *\n       (x \\<guillemotleft>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n)\n       \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n              (- p * q \\<squnion>\n               p *\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "proof (rule allI, unfold tsum2_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       p *\n       (x \\<guillemotleft>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n)\n       \\<le> complete_tests_class.Sum\n              (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                (- p * q \\<squnion>\n                 p *\n                 (x \\<guillemotleft>\n                  (p \\<star> x \\<guillemotleft> q) * aL)))", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       p *\n       (x \\<guillemotleft>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n)\n       \\<le> complete_tests_class.Sum\n              (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                (- p * q \\<squnion>\n                 p *\n                 (x \\<guillemotleft>\n                  (p \\<star> x \\<guillemotleft> q) * aL)))", "have 6: \"p*(x\\<guillemotleft>?t n) \\<le> ?t (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n)\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "using 4"], ["proof (prove)\nusing this:\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n)\n    \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "by (smt assms leq_def power_succ_unfold_ext pre_closed pre_expression_test tests_dual.sub_commutative sub_mult_closed t_seq2_below_w test_pre test_seq_def tfun2_def tseq2_def tests_dual.lower_bound_right)"], ["proof (state)\nthis:\n  p *\n  (x \\<guillemotleft>\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    n)\n  \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p *\n       (x \\<guillemotleft>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n)\n       \\<le> complete_tests_class.Sum\n              (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                (- p * q \\<squnion>\n                 p *\n                 (x \\<guillemotleft>\n                  (p \\<star> x \\<guillemotleft> q) * aL)))", "have \"?t (Suc n) \\<le> Sum ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     (Suc n)\n    \\<le> complete_tests_class.Sum\n           (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n             (- p * q \\<squnion>\n              p *\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "using 4 Sum_upper"], ["proof (prove)\nusing this:\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  test_seq ?t \\<Longrightarrow> ?t ?x \\<le> complete_tests_class.Sum ?t\n\ngoal (1 subgoal):\n 1. tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     (Suc n)\n    \\<le> complete_tests_class.Sum\n           (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n             (- p * q \\<squnion>\n              p *\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by auto"], ["proof (state)\nthis:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc n)\n  \\<le> complete_tests_class.Sum\n         (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       p *\n       (x \\<guillemotleft>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n)\n       \\<le> complete_tests_class.Sum\n              (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n                (- p * q \\<squnion>\n                 p *\n                 (x \\<guillemotleft>\n                  (p \\<star> x \\<guillemotleft> q) * aL)))", "thus \"p*(x\\<guillemotleft>?t n) \\<le> Sum ?t\""], ["proof (prove)\nusing this:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc n)\n  \\<le> complete_tests_class.Sum\n         (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n)\n    \\<le> complete_tests_class.Sum\n           (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n             (- p * q \\<squnion>\n              p *\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "using 3 4 6"], ["proof (prove)\nusing this:\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   (Suc n)\n  \\<le> complete_tests_class.Sum\n         (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  p *\n  (x \\<guillemotleft>\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    n)\n  \\<le> tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n)\n    \\<le> complete_tests_class.Sum\n           (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n             (- p * q \\<squnion>\n              p *\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (smt assms(1) pre_closed pre_expression_test sub_mult_closed test_pre test_seq_def tests_dual.transitive tsum2_def)"], ["proof (state)\nthis:\n  p *\n  (x \\<guillemotleft>\n   tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n    n)\n  \\<le> complete_tests_class.Sum\n         (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     p *\n     (x \\<guillemotleft>\n      tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n       n)\n     \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n            (- p * q \\<squnion>\n             p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence \"p*(x\\<guillemotleft>?ts) \\<le> ?ts\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     p *\n     (x \\<guillemotleft>\n      tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n       n)\n     \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n            (- p * q \\<squnion>\n             p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 3 4"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     p *\n     (x \\<guillemotleft>\n      tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n       n)\n     \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n            (- p * q \\<squnion>\n             p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt assms mult_left_dist_Sum pre_closed pre_right_dist_Sum t_seq2_ascending_chain test_expression_test test_seq_def tsum2_def)"], ["proof (state)\nthis:\n  p *\n  (x \\<guillemotleft>\n   tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence \"p*(x\\<guillemotleft>?ts)\\<squnion>-p*q \\<le> ?ts\""], ["proof (prove)\nusing this:\n  p *\n  (x \\<guillemotleft>\n   tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p *\n       (x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) * aL))) \\<squnion>\n    - p * q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 3 5"], ["proof (prove)\nusing this:\n  p *\n  (x \\<guillemotleft>\n   tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  - p * q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p *\n    (x \\<guillemotleft>\n     tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p *\n       (x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) * aL))) \\<squnion>\n    - p * q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt assms(1,2) tests_dual.greatest_lower_bound pre_closed pre_expression_test sub_mult_closed test_pre)"], ["proof (state)\nthis:\n  p *\n  (x \\<guillemotleft>\n   tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))) \\<squnion>\n  - p * q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence \"?w \\<le> ?ts\\<squnion>aL\""], ["proof (prove)\nusing this:\n  p *\n  (x \\<guillemotleft>\n   tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))) \\<squnion>\n  - p * q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p *\n            (x \\<guillemotleft>\n             (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n          aL", "using 1 3"], ["proof (prove)\nusing this:\n  p *\n  (x \\<guillemotleft>\n   tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))) \\<squnion>\n  - p * q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p *\n            (x \\<guillemotleft>\n             (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n          aL", "by (smt assms(1,2) pre_expression_test while_post sub_mult_closed t_sum2_below_t_sum t_sum_test test_pre transitive while_completeness_var)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n        aL\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence \"?w = ?w*(?ts\\<squnion>aL)\""], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n        aL\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q =\n    (p \\<star> x \\<guillemotleft> q) *\n    (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p *\n       (x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n     aL)", "using 1 3"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n        aL\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q =\n    (p \\<star> x \\<guillemotleft> q) *\n    (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p *\n       (x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n     aL)", "by (smt aL_test tests_dual.sba_dual.less_eq_inf tests_dual.sba_dual.sub_sup_closed)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q =\n  (p \\<star> x \\<guillemotleft> q) *\n  (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n   aL)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "also"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q =\n  (p \\<star> x \\<guillemotleft> q) *\n  (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n   aL)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"... = ?w*?ts\\<squnion>?w*aL\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) *\n    (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p *\n       (x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n     aL) =\n    (p \\<star> x \\<guillemotleft> q) *\n    tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p *\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n    (p \\<star> x \\<guillemotleft> q) * aL", "using 1 3"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) *\n    (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n      (- p * q \\<squnion>\n       p *\n       (x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n     aL) =\n    (p \\<star> x \\<guillemotleft> q) *\n    tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p *\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n    (p \\<star> x \\<guillemotleft> q) * aL", "by (smt aL_test tests_dual.sup_left_dist_inf)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) *\n  (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n   aL) =\n  (p \\<star> x \\<guillemotleft> q) *\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p *\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n  (p \\<star> x \\<guillemotleft> q) * aL\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "also"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) *\n  (tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n    (- p * q \\<squnion>\n     p *\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n   aL) =\n  (p \\<star> x \\<guillemotleft> q) *\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p *\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n  (p \\<star> x \\<guillemotleft> q) * aL\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"... \\<le> ?ts\\<squnion>?t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) *\n    tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p *\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n    (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p *\n            (x \\<guillemotleft>\n             (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n          tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0", "using 1 3 4"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. (p \\<star> x \\<guillemotleft> q) *\n    tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p *\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n    (p \\<star> x \\<guillemotleft> q) * aL\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p *\n            (x \\<guillemotleft>\n             (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n          tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0", "by (smt (z3) assms(1,2) aL_pre_below_t_seq2 tests_dual.upper_bound_right aL_test test_seq_def tests_dual.sub_sup_closed tests_dual.inf_isotone)"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) *\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p *\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         0\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "also"], ["proof (state)\nthis:\n  (p \\<star> x \\<guillemotleft> q) *\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p *\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n  (p \\<star> x \\<guillemotleft> q) * aL\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p *\n          (x \\<guillemotleft>\n           (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n        tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         0\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"... = ?ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p *\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n    tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0 =\n    tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 3 4"], ["proof (prove)\nusing this:\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  test_seq\n   (tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p *\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n    tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0 =\n    tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n     (- p * q \\<squnion>\n      p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt Sum_upper tsum2_def test_seq_def tests_dual.less_eq_inf)"], ["proof (state)\nthis:\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p *\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) \\<squnion>\n  tseq2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0 =\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "finally"], ["proof (chain)\npicking this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"?w \\<le> ?ts\""], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n           (- p * q \\<squnion>\n            p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "."], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 1 3"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n         (- p * q \\<squnion>\n          p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n   (- p * q \\<squnion>\n    p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) =\n  - - tsum2 (- p * q) p x (p \\<star> x \\<guillemotleft> q)\n       (- p * q \\<squnion>\n        p * (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (metis assms t_sum2_below_t_sum t_sum2_below_w tests_dual.antisymmetric)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_complete:\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n      and \"\\<forall>r\\<in>Pre_expression . x\\<guillemotleft>r\\<lparr>x\\<rparr>r\"\n    shows \"p\\<star>x\\<guillemotleft>q\\<lparr>p\\<star>x\\<rparr>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "let ?w = \"p\\<star>x\\<guillemotleft>q\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "let ?t = \"tseq (-p) x ?w (-p\\<squnion>(x\\<guillemotleft>?w*aL))\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "have 1: \"?w \\<in> Pre_expression\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<in> Pre_expression", "by (simp add: assms(1-3) Pre_expression.pre_pre While_program.while_prog)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "have 2: \"test_seq ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq\n     (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n       (- p \\<squnion>\n        (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (simp add: assms(2) pre_expression_test t_seq_test_seq)"], ["proof (state)\nthis:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence 3: \"?w \\<le> Sum ?t\""], ["proof (prove)\nusing this:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> complete_tests_class.Sum\n           (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n             (- p \\<squnion>\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "using assms(1-3) tsum_def while_completeness_sum"], ["proof (prove)\nusing this:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  p \\<in> Test_expression\n  q \\<in> Pre_expression\n  x \\<in> While_program\n  tsum ?p ?x ?q ?r \\<equiv> complete_tests_class.Sum (tseq ?p ?x ?q ?r)\n  \\<lbrakk>?p \\<in> Test_expression; ?q \\<in> Pre_expression;\n   ?x \\<in> While_program\\<rbrakk>\n  \\<Longrightarrow> ?p \\<star> ?x \\<guillemotleft> ?q\n                    \\<le> tsum (- ?p) ?x (?p \\<star> ?x \\<guillemotleft> ?q)\n                           (- ?p \\<squnion>\n                            (?x \\<guillemotleft>\n                             (?p \\<star> ?x \\<guillemotleft> ?q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> complete_tests_class.Sum\n           (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n             (- p \\<squnion>\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by auto"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> complete_tests_class.Sum\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "have 4: \"p = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = - - p", "by (simp add: assms(1) test_expression_test)"], ["proof (state)\nthis:\n  p = - - p\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "have \"x\\<guillemotleft>?w*aL = --(x\\<guillemotleft>?w*aL)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL =\n    - - (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "using 1"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL =\n    - - (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)", "by (simp add: assms(3) Pre_expression.conj_pre Pre_expression.pre_pre aL_pre_expression pre_expression_test)"], ["proof (state)\nthis:\n  x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL =\n  - - (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence 5: \"(-p\\<squnion>(x\\<guillemotleft>?w*aL))*p = (x\\<guillemotleft>?w*aL)*p\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL =\n  - - (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n\ngoal (1 subgoal):\n 1. (- p \\<squnion>\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n    p =\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p", "using 4"], ["proof (prove)\nusing this:\n  x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL =\n  - - (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)\n  p = - - p\n\ngoal (1 subgoal):\n 1. (- p \\<squnion>\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n    p =\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p", "by (metis tests_dual.sba_dual.inf_complement_intro)"], ["proof (state)\nthis:\n  (- p \\<squnion>\n   (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n  p =\n  (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "have \"x\\<guillemotleft>aL*?w\\<lparr>x\\<rparr>aL*?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    aL *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "using 1"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    aL *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "by (simp add: assms(4) Pre_expression.conj_pre aL_pre_expression)"], ["proof (state)\nthis:\n  x \\<guillemotleft>\n  aL *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence \"x\\<guillemotleft>?w*aL\\<lparr>x\\<rparr>aL*?w\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  aL *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    aL \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "using 1"], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  aL *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    aL \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "by (metis aL_test pre_expression_test sub_comm)"], ["proof (state)\nthis:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  aL \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence \"(x\\<guillemotleft>?w*aL)*p*?w\\<lparr>x\\<rparr>aL*?w\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  aL \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "using 1"], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  aL \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n\ngoal (1 subgoal):\n 1. (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "by (smt (z3) assms(1) Pre_expression.conj_pre Pre_expression.test_pre derived_hoare_triple.cons_trip derived_type pre_expression_test sub_assoc tests_dual.sba_dual.reflexive tests_dual.upper_bound_left)"], ["proof (state)\nthis:\n  (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence \"(-p\\<squnion>(x\\<guillemotleft>?w*aL))*p*?w\\<lparr>x\\<rparr>aL*?w\""], ["proof (prove)\nusing this:\n  (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. (- p \\<squnion>\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n    p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "using 5"], ["proof (prove)\nusing this:\n  (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n  (- p \\<squnion>\n   (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n  p =\n  (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL) * p\n\ngoal (1 subgoal):\n 1. (- p \\<squnion>\n     (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n    p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "by simp"], ["proof (state)\nthis:\n  (- p \\<squnion>\n   (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n  p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence 6: \"?t 0*p*?w\\<lparr>x\\<rparr>aL*?w\""], ["proof (prove)\nusing this:\n  (- p \\<squnion>\n   (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)) *\n  p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     0 *\n    p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)", "by (unfold tseq_def power_zero_id id_def)"], ["proof (state)\nthis:\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0 *\n  p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "have \"\\<forall>n>0 . ?t n*p*?w\\<lparr>x\\<rparr>pSum ?t n*?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n        (- p \\<squnion>\n         (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        n *\n       p *\n       (p \\<star> x \\<guillemotleft>\n        q) \\<lparr> x \\<rparr> pSum\n                                (tseq (- p) x\n                                  (p \\<star> x \\<guillemotleft> q)\n                                  (- p \\<squnion>\n                                   (x \\<guillemotleft>\n                                    (p \\<star> x \\<guillemotleft> q) * aL)))\n                                n *\n                               (p \\<star> x \\<guillemotleft> q)", "proof (rule allI, rule impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n        (- p \\<squnion>\n         (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        n *\n       p *\n       (p \\<star> x \\<guillemotleft>\n        q) \\<lparr> x \\<rparr> pSum\n                                (tseq (- p) x\n                                  (p \\<star> x \\<guillemotleft> q)\n                                  (- p \\<squnion>\n                                   (x \\<guillemotleft>\n                                    (p \\<star> x \\<guillemotleft> q) * aL)))\n                                n *\n                               (p \\<star> x \\<guillemotleft> q)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n        (- p \\<squnion>\n         (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        n *\n       p *\n       (p \\<star> x \\<guillemotleft>\n        q) \\<lparr> x \\<rparr> pSum\n                                (tseq (- p) x\n                                  (p \\<star> x \\<guillemotleft> q)\n                                  (- p \\<squnion>\n                                   (x \\<guillemotleft>\n                                    (p \\<star> x \\<guillemotleft> q) * aL)))\n                                n *\n                               (p \\<star> x \\<guillemotleft> q)", "assume \"0<(n::nat)\""], ["proof (state)\nthis:\n  0 < n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n        (- p \\<squnion>\n         (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        n *\n       p *\n       (p \\<star> x \\<guillemotleft>\n        q) \\<lparr> x \\<rparr> pSum\n                                (tseq (- p) x\n                                  (p \\<star> x \\<guillemotleft> q)\n                                  (- p \\<squnion>\n                                   (x \\<guillemotleft>\n                                    (p \\<star> x \\<guillemotleft> q) * aL)))\n                                n *\n                               (p \\<star> x \\<guillemotleft> q)", "from this"], ["proof (chain)\npicking this:\n  0 < n", "obtain m where 7: \"n = Suc m\""], ["proof (prove)\nusing this:\n  0 < n\n\ngoal (1 subgoal):\n 1. (\\<And>m. n = Suc m \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto dest: less_imp_Suc_add)"], ["proof (state)\nthis:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n        (- p \\<squnion>\n         (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        n *\n       p *\n       (p \\<star> x \\<guillemotleft>\n        q) \\<lparr> x \\<rparr> pSum\n                                (tseq (- p) x\n                                  (p \\<star> x \\<guillemotleft> q)\n                                  (- p \\<squnion>\n                                   (x \\<guillemotleft>\n                                    (p \\<star> x \\<guillemotleft> q) * aL)))\n                                n *\n                               (p \\<star> x \\<guillemotleft> q)", "hence \"?t m*?w \\<le> pSum ?t n*?w\""], ["proof (prove)\nusing this:\n  n = Suc m\n\ngoal (1 subgoal):\n 1. tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> pSum\n           (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n             (- p \\<squnion>\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n           n *\n          (p \\<star> x \\<guillemotleft> q)", "using 1 2"], ["proof (prove)\nusing this:\n  n = Suc m\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     m *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> pSum\n           (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n             (- p \\<squnion>\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n           n *\n          (p \\<star> x \\<guillemotleft> q)", "by (smt pSum.simps(2) pSum_test pre_expression_test test_seq_def tests_dual.lower_bound_right tests_dual.sba_dual.inf_isotone tests_dual.sba_dual.reflexive)"], ["proof (state)\nthis:\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> pSum\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n         n *\n        (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       0 < n \\<Longrightarrow>\n       tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n        (- p \\<squnion>\n         (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n        n *\n       p *\n       (p \\<star> x \\<guillemotleft>\n        q) \\<lparr> x \\<rparr> pSum\n                                (tseq (- p) x\n                                  (p \\<star> x \\<guillemotleft> q)\n                                  (- p \\<squnion>\n                                   (x \\<guillemotleft>\n                                    (p \\<star> x \\<guillemotleft> q) * aL)))\n                                n *\n                               (p \\<star> x \\<guillemotleft> q)", "thus \"?t n*p*?w\\<lparr>x\\<rparr>pSum ?t n*?w\""], ["proof (prove)\nusing this:\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> pSum\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n         n *\n        (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     n *\n    p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> pSum\n                             (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                               (- p \\<squnion>\n                                (x \\<guillemotleft>\n                                 (p \\<star> x \\<guillemotleft> q) * aL)))\n                             n *\n                            (p \\<star> x \\<guillemotleft> q)", "using 1 7"], ["proof (prove)\nusing this:\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   m *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> pSum\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n         n *\n        (p \\<star> x \\<guillemotleft> q)\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n  n = Suc m\n\ngoal (1 subgoal):\n 1. tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     n *\n    p *\n    (p \\<star> x \\<guillemotleft>\n     q) \\<lparr> x \\<rparr> pSum\n                             (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                               (- p \\<squnion>\n                                (x \\<guillemotleft>\n                                 (p \\<star> x \\<guillemotleft> q) * aL)))\n                             n *\n                            (p \\<star> x \\<guillemotleft> q)", "by (smt assms conj_pre cons_trip tests_dual.upper_bound_left tests_dual.sba_dual.inf_complement_intro pSum_pre_expression power_succ_unfold_ext pre_closed pre_expression_test sub_assoc sub_comm t_seq_pre_expression test_pre tfun_def tseq_def)"], ["proof (state)\nthis:\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   n *\n  p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> pSum\n                           (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                             (- p \\<squnion>\n                              (x \\<guillemotleft>\n                               (p \\<star> x \\<guillemotleft> q) * aL)))\n                           n *\n                          (p \\<star> x \\<guillemotleft> q)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n>0.\n     tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n      (- p \\<squnion>\n       (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n *\n     p *\n     (p \\<star> x \\<guillemotleft>\n      q) \\<lparr> x \\<rparr> pSum\n                              (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                                (- p \\<squnion>\n                                 (x \\<guillemotleft>\n                                  (p \\<star> x \\<guillemotleft> q) * aL)))\n                              n *\n                             (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence \"?w\\<lparr>p\\<star>x\\<rparr>-p*?w\""], ["proof (prove)\nusing this:\n  \\<forall>n>0.\n     tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n      (- p \\<squnion>\n       (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n *\n     p *\n     (p \\<star> x \\<guillemotleft>\n      q) \\<lparr> x \\<rparr> pSum\n                              (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                                (- p \\<squnion>\n                                 (x \\<guillemotleft>\n                                  (p \\<star> x \\<guillemotleft> q) * aL)))\n                              n *\n                             (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft>\n    q \\<lparr> p \\<star> x \\<rparr> - p * (p \\<star> x \\<guillemotleft> q)", "using 1 2 3 6 assms while_trip"], ["proof (prove)\nusing this:\n  \\<forall>n>0.\n     tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n      (- p \\<squnion>\n       (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n      n *\n     p *\n     (p \\<star> x \\<guillemotleft>\n      q) \\<lparr> x \\<rparr> pSum\n                              (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n                                (- p \\<squnion>\n                                 (x \\<guillemotleft>\n                                  (p \\<star> x \\<guillemotleft> q) * aL)))\n                              n *\n                             (p \\<star> x \\<guillemotleft> q)\n  p \\<star> x \\<guillemotleft> q \\<in> Pre_expression\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  p \\<star> x \\<guillemotleft> q\n  \\<le> complete_tests_class.Sum\n         (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   0 *\n  p *\n  (p \\<star> x \\<guillemotleft>\n   q) \\<lparr> x \\<rparr> aL * (p \\<star> x \\<guillemotleft> q)\n  p \\<in> Test_expression\n  q \\<in> Pre_expression\n  x \\<in> While_program\n  \\<forall>r\\<in>Pre_expression. x \\<guillemotleft> r \\<lparr> x \\<rparr> r\n  \\<lbrakk>?p \\<in> Test_expression; ?q \\<in> Pre_expression;\n   test_seq ?t \\<and> ?q \\<le> complete_tests_class.Sum ?t;\n   ?t 0 * ?p * ?q \\<lparr> ?x \\<rparr> aL * ?q;\n   \\<forall>n>0. ?t n * ?p * ?q \\<lparr> ?x \\<rparr> pSum ?t n * ?q\\<rbrakk>\n  \\<Longrightarrow> ?q \\<lparr> ?p \\<star> ?x \\<rparr> - ?p * ?q\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft>\n    q \\<lparr> p \\<star> x \\<rparr> - p * (p \\<star> x \\<guillemotleft> q)", "by auto"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft>\n  q \\<lparr> p \\<star> x \\<rparr> - p * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "hence \"?w\\<lparr>p\\<star>x\\<rparr>-p*q\""], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft>\n  q \\<lparr> p \\<star> x \\<rparr> - p * (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> - p * q", "using 4"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft>\n  q \\<lparr> p \\<star> x \\<rparr> - p * (p \\<star> x \\<guillemotleft> q)\n  p = - - p\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> - p * q", "by (metis assms(2) while_pre_else pre_expression_test while_pre_else)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> - p * q\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "thus ?thesis"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> - p * q\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "using assms(1,2) Pre_expression.neg_pre Pre_expression.test_pre cons_post_trip"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> - p * q\n  p \\<in> Test_expression\n  q \\<in> Pre_expression\n  ?p \\<in> Pre_expression \\<Longrightarrow> - ?p \\<in> Pre_expression\n  ?p \\<in> Test_expression \\<Longrightarrow> ?p \\<in> Pre_expression\n  \\<lbrakk>?q \\<in> Pre_expression; ?r \\<in> Pre_expression\\<rbrakk>\n  \\<Longrightarrow> ?p \\<lparr> ?y \\<rparr> ?q * ?r \\<longrightarrow>\n                    ?p \\<lparr> ?y \\<rparr> ?r\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q", "by blast"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q \\<lparr> p \\<star> x \\<rparr> q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma pre_completeness:\n  \"x \\<in> While_program \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x\\<guillemotleft>q\\<lparr>x\\<rparr>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> While_program; q \\<in> Pre_expression\\<rbrakk>\n    \\<Longrightarrow> x \\<guillemotleft> q \\<lparr> x \\<rparr> q", "apply (induct arbitrary: q rule: While_program.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x q.\n       \\<lbrakk>x \\<in> Atomic_program; q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> x \\<guillemotleft> q \\<lparr> x \\<rparr> q\n 2. \\<And>x y q.\n       \\<lbrakk>x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        y \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           y \\<guillemotleft> q \\<lparr> y \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> x * y \\<guillemotleft> q \\<lparr> x * y \\<rparr> q\n 3. \\<And>p x y q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        y \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           y \\<guillemotleft> q \\<lparr> y \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> x \\<lhd> p \\<rhd> y \\<guillemotleft>\n                         q \\<lparr> x \\<lhd> p \\<rhd> y \\<rparr> q\n 4. \\<And>p x q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> p \\<star> x \\<guillemotleft>\n                         q \\<lparr> p \\<star> x \\<rparr> q", "apply (simp add: derived_hoare_triple.atom_trip)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x y q.\n       \\<lbrakk>x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        y \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           y \\<guillemotleft> q \\<lparr> y \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> x * y \\<guillemotleft> q \\<lparr> x * y \\<rparr> q\n 2. \\<And>p x y q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        y \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           y \\<guillemotleft> q \\<lparr> y \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> x \\<lhd> p \\<rhd> y \\<guillemotleft>\n                         q \\<lparr> x \\<lhd> p \\<rhd> y \\<rparr> q\n 3. \\<And>p x q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> p \\<star> x \\<guillemotleft>\n                         q \\<lparr> p \\<star> x \\<rparr> q", "apply (metis pre_pre pre_seq seq_trip pre_expression_test)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p x y q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        y \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           y \\<guillemotleft> q \\<lparr> y \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> x \\<lhd> p \\<rhd> y \\<guillemotleft>\n                         q \\<lparr> x \\<lhd> p \\<rhd> y \\<rparr> q\n 2. \\<And>p x q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> p \\<star> x \\<guillemotleft>\n                         q \\<lparr> p \\<star> x \\<rparr> q", "apply (smt cond_prog cond_trip cons_pre_trip ite_pre_else ite_pre_then neg_pre pre_pre pre_expression_test test_pre)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x q.\n       \\<lbrakk>p \\<in> Test_expression; x \\<in> While_program;\n        \\<And>q.\n           q \\<in> Pre_expression \\<Longrightarrow>\n           x \\<guillemotleft> q \\<lparr> x \\<rparr> q;\n        q \\<in> Pre_expression\\<rbrakk>\n       \\<Longrightarrow> p \\<star> x \\<guillemotleft>\n                         q \\<lparr> p \\<star> x \\<rparr> q", "by (simp add: while_complete)"], ["", "theorem completeness:\n  \"p\\<langle>x\\<rangle>q \\<Longrightarrow> p\\<lparr>x\\<rparr>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<langle> x \\<rangle> q \\<Longrightarrow> p \\<lparr> x \\<rparr> q", "by (metis valid_hoare_triple_def pre_completeness tests_dual.reflexive pre_expression_test cons_trip)"], ["", "end"], ["", "class hoare_calculus_sound_complete = hoare_calculus_sound + hoare_calculus_complete\nbegin"], ["", "text \\<open>Theorem 41\\<close>"], ["", "theorem soundness_completeness:\n  \"p\\<lparr>x\\<rparr>q \\<longleftrightarrow> p\\<langle>x\\<rangle>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<lparr> x \\<rparr> q = p \\<langle> x \\<rangle> q", "using completeness soundness"], ["proof (prove)\nusing this:\n  ?p \\<langle> ?x \\<rangle> ?q \\<Longrightarrow> ?p \\<lparr> ?x \\<rparr> ?q\n  ?p \\<lparr> ?x \\<rparr> ?q \\<Longrightarrow> ?p \\<langle> ?x \\<rangle> ?q\n\ngoal (1 subgoal):\n 1. p \\<lparr> x \\<rparr> q = p \\<langle> x \\<rangle> q", "by blast"], ["", "end"], ["", "class hoare_rules = whiledo + complete_tests + hoare_triple +\n  assumes rule_pre:   \"x\\<guillemotleft>-q\\<lbrace>x\\<rbrace>-q\"\n  assumes rule_seq:   \"-p\\<lbrace>x\\<rbrace>-q \\<and> -q\\<lbrace>y\\<rbrace>-r \\<longrightarrow> -p\\<lbrace>x*y\\<rbrace>-r\"\n  assumes rule_cond:  \"-p*-q\\<lbrace>x\\<rbrace>-r \\<and> --p*-q\\<lbrace>y\\<rbrace>-r \\<longrightarrow> -q\\<lbrace>x\\<lhd>-p\\<rhd>y\\<rbrace>-r\"\n  assumes rule_while: \"test_seq t \\<and> -q \\<le> Sum t \\<and> t 0*-p*-q\\<lbrace>x\\<rbrace>aL*-q \\<and> (\\<forall>n>0 . t n*-p*-q\\<lbrace>x\\<rbrace>pSum t n*-q) \\<longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\"\n  assumes rule_cons:  \"-p \\<le> -q \\<and> -q\\<lbrace>x\\<rbrace>-r \\<and> -r \\<le> -s \\<longrightarrow> -p\\<lbrace>x\\<rbrace>-s\"\n  assumes rule_disj:  \"-p\\<lbrace>x\\<rbrace>-r \\<and> -q\\<lbrace>x\\<rbrace>-s \\<longrightarrow> -p\\<squnion>-q\\<lbrace>x\\<rbrace>-r\\<squnion>-s\"\nbegin"], ["", "lemma rule_cons_pre:\n  \"-p \\<le> -q \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p\\<lbrace>x\\<rbrace>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- p \\<le> - q; - q \\<lbrace> x \\<rbrace> - r\\<rbrakk>\n    \\<Longrightarrow> - p \\<lbrace> x \\<rbrace> - r", "using rule_cons tests_dual.sba_dual.reflexive"], ["proof (prove)\nusing this:\n  - ?p \\<le> - ?q \\<and>\n  - ?q \\<lbrace> ?x \\<rbrace> - ?r \\<and> - ?r \\<le> - ?s \\<longrightarrow>\n  - ?p \\<lbrace> ?x \\<rbrace> - ?s\n  - ?x \\<le> - ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>- p \\<le> - q; - q \\<lbrace> x \\<rbrace> - r\\<rbrakk>\n    \\<Longrightarrow> - p \\<lbrace> x \\<rbrace> - r", "by blast"], ["", "lemma rule_cons_pre_mult:\n  \"-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p*-q\\<lbrace>x\\<rbrace>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<lbrace> x \\<rbrace> - r \\<Longrightarrow>\n    - p * - q \\<lbrace> x \\<rbrace> - r", "by (metis tests_dual.sub_sup_closed rule_cons_pre tests_dual.upper_bound_right)"], ["", "lemma rule_cons_pre_plus:\n  \"-p\\<squnion>-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p\\<lbrace>x\\<rbrace>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<Longrightarrow>\n    - p \\<lbrace> x \\<rbrace> - r", "by (metis tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.upper_bound_left rule_cons_pre)"], ["", "lemma rule_cons_post:\n  \"-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -r \\<le> -s \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- q \\<lbrace> x \\<rbrace> - r; - r \\<le> - s\\<rbrakk>\n    \\<Longrightarrow> - q \\<lbrace> x \\<rbrace> - s", "using rule_cons tests_dual.sba_dual.reflexive"], ["proof (prove)\nusing this:\n  - ?p \\<le> - ?q \\<and>\n  - ?q \\<lbrace> ?x \\<rbrace> - ?r \\<and> - ?r \\<le> - ?s \\<longrightarrow>\n  - ?p \\<lbrace> ?x \\<rbrace> - ?s\n  - ?x \\<le> - ?x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>- q \\<lbrace> x \\<rbrace> - r; - r \\<le> - s\\<rbrakk>\n    \\<Longrightarrow> - q \\<lbrace> x \\<rbrace> - s", "by blast"], ["", "lemma rule_cons_post_mult:\n  \"-q\\<lbrace>x\\<rbrace>-r*-s \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<lbrace> x \\<rbrace> - r * - s \\<Longrightarrow>\n    - q \\<lbrace> x \\<rbrace> - s", "by (metis rule_cons_post tests_dual.upper_bound_left sub_comm sub_mult_closed)"], ["", "lemma rule_cons_post_plus:\n  \"-q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-r\\<squnion>-s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<lbrace> x \\<rbrace> - r \\<Longrightarrow>\n    - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "by (metis tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.upper_bound_left rule_cons_post)"], ["", "lemma rule_disj_pre:\n \"-p\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-r \\<Longrightarrow> -p\\<squnion>-q\\<lbrace>x\\<rbrace>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- p \\<lbrace> x \\<rbrace> - r;\n     - q \\<lbrace> x \\<rbrace> - r\\<rbrakk>\n    \\<Longrightarrow> - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r", "by (metis rule_disj tests_dual.sba_dual.sup_idempotent)"], ["", "end"], ["", "class hoare_calculus_valid = hoare_calculus_sound_complete + hoare_triple +\n  assumes hoare_triple_valid: \"-p\\<lbrace>x\\<rbrace>-q \\<longleftrightarrow> -p \\<le> x\\<guillemotleft>-q\"\nbegin"], ["", "lemma valid_hoare_triple_same:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> p\\<lbrace>x\\<rbrace>q = p\\<langle>x\\<rangle>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Pre_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> p \\<lbrace> x \\<rbrace> q = p \\<langle> x \\<rangle> q", "by (metis valid_hoare_triple_def hoare_triple_valid pre_expression_test)"], ["", "lemma derived_hoare_triple_same:\n  \"p \\<in> Pre_expression \\<Longrightarrow> q \\<in> Pre_expression \\<Longrightarrow> x \\<in> While_program \\<Longrightarrow> p\\<lbrace>x\\<rbrace>q = p\\<lparr>x\\<rparr>q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> Pre_expression; q \\<in> Pre_expression;\n     x \\<in> While_program\\<rbrakk>\n    \\<Longrightarrow> p \\<lbrace> x \\<rbrace> q = p \\<lparr> x \\<rparr> q", "by (simp add: soundness_completeness valid_hoare_triple_same)"], ["", "lemma valid_rule_disj:\n  assumes \"-p\\<lbrace>x\\<rbrace>-r\"\n      and \"-q\\<lbrace>x\\<rbrace>-s\"\n    shows \"-p\\<squnion>-q\\<lbrace>x\\<rbrace>-r\\<squnion>-s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "have \"x\\<guillemotleft>-r \\<le> x\\<guillemotleft>-r\\<squnion>-s \\<and> x\\<guillemotleft>-s \\<le> x\\<guillemotleft>-r\\<squnion>-s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - r\n    \\<le> x \\<guillemotleft> - r \\<squnion> - s \\<and>\n    x \\<guillemotleft> - s \\<le> x \\<guillemotleft> - r \\<squnion> - s", "by (metis pre_iso tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.upper_bound_left tests_dual.sba_dual.upper_bound_right)"], ["proof (state)\nthis:\n  x \\<guillemotleft> - r \\<le> x \\<guillemotleft> - r \\<squnion> - s \\<and>\n  x \\<guillemotleft> - s \\<le> x \\<guillemotleft> - r \\<squnion> - s\n\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<guillemotleft> - r \\<le> x \\<guillemotleft> - r \\<squnion> - s \\<and>\n  x \\<guillemotleft> - s \\<le> x \\<guillemotleft> - r \\<squnion> - s\n\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "by (smt assms hoare_triple_valid tests_dual.greatest_lower_bound tests_dual.sba_dual.sub_sup_closed pre_closed tests_dual.transitive)"], ["proof (state)\nthis:\n  - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s\n\ngoal:\nNo subgoals!", "qed"], ["", "subclass hoare_rules"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.hoare_rules Sup (1::'a) (*) uminus (\\<squnion>) bot (\\<le>) (<)\n     hoare_triple (\\<star>) ite (\\<guillemotleft>)", "apply unfold_locales"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>x q. x \\<guillemotleft> - q \\<lbrace> x \\<rbrace> - q\n 2. \\<And>p x q y r.\n       - p \\<lbrace> x \\<rbrace> - q \\<and>\n       - q \\<lbrace> y \\<rbrace> - r \\<longrightarrow>\n       - p \\<lbrace> x * y \\<rbrace> - r\n 3. \\<And>p q x r y.\n       - p * - q \\<lbrace> x \\<rbrace> - r \\<and>\n       - - p * - q \\<lbrace> y \\<rbrace> - r \\<longrightarrow>\n       - q \\<lbrace> x \\<lhd> - p \\<rhd> y \\<rbrace> - r\n 4. \\<And>t q p x.\n       test_seq t \\<and>\n       - q \\<le> complete_tests_class.Sum t \\<and>\n       t 0 * - p * - q \\<lbrace> x \\<rbrace> aL * - q \\<and>\n       (\\<forall>n>0.\n           t n * - p *\n           - q \\<lbrace> x \\<rbrace> pSum t n * - q) \\<longrightarrow>\n       - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q\n 5. \\<And>p q x r s.\n       - p \\<le> - q \\<and>\n       - q \\<lbrace> x \\<rbrace> - r \\<and> - r \\<le> - s \\<longrightarrow>\n       - p \\<lbrace> x \\<rbrace> - s\n 6. \\<And>p x r q s.\n       - p \\<lbrace> x \\<rbrace> - r \\<and>\n       - q \\<lbrace> x \\<rbrace> - s \\<longrightarrow>\n       - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "apply (metis hoare_triple_valid pre_closed tests_dual.sba_dual.reflexive)"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>p x q y r.\n       - p \\<lbrace> x \\<rbrace> - q \\<and>\n       - q \\<lbrace> y \\<rbrace> - r \\<longrightarrow>\n       - p \\<lbrace> x * y \\<rbrace> - r\n 2. \\<And>p q x r y.\n       - p * - q \\<lbrace> x \\<rbrace> - r \\<and>\n       - - p * - q \\<lbrace> y \\<rbrace> - r \\<longrightarrow>\n       - q \\<lbrace> x \\<lhd> - p \\<rhd> y \\<rbrace> - r\n 3. \\<And>t q p x.\n       test_seq t \\<and>\n       - q \\<le> complete_tests_class.Sum t \\<and>\n       t 0 * - p * - q \\<lbrace> x \\<rbrace> aL * - q \\<and>\n       (\\<forall>n>0.\n           t n * - p *\n           - q \\<lbrace> x \\<rbrace> pSum t n * - q) \\<longrightarrow>\n       - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q\n 4. \\<And>p q x r s.\n       - p \\<le> - q \\<and>\n       - q \\<lbrace> x \\<rbrace> - r \\<and> - r \\<le> - s \\<longrightarrow>\n       - p \\<lbrace> x \\<rbrace> - s\n 5. \\<And>p x r q s.\n       - p \\<lbrace> x \\<rbrace> - r \\<and>\n       - q \\<lbrace> x \\<rbrace> - s \\<longrightarrow>\n       - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "apply (meson hoare_triple_valid pre_compose)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>p q x r y.\n       - p * - q \\<lbrace> x \\<rbrace> - r \\<and>\n       - - p * - q \\<lbrace> y \\<rbrace> - r \\<longrightarrow>\n       - q \\<lbrace> x \\<lhd> - p \\<rhd> y \\<rbrace> - r\n 2. \\<And>t q p x.\n       test_seq t \\<and>\n       - q \\<le> complete_tests_class.Sum t \\<and>\n       t 0 * - p * - q \\<lbrace> x \\<rbrace> aL * - q \\<and>\n       (\\<forall>n>0.\n           t n * - p *\n           - q \\<lbrace> x \\<rbrace> pSum t n * - q) \\<longrightarrow>\n       - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q\n 3. \\<And>p q x r s.\n       - p \\<le> - q \\<and>\n       - q \\<lbrace> x \\<rbrace> - r \\<and> - r \\<le> - s \\<longrightarrow>\n       - p \\<lbrace> x \\<rbrace> - s\n 4. \\<And>p x r q s.\n       - p \\<lbrace> x \\<rbrace> - r \\<and>\n       - q \\<lbrace> x \\<rbrace> - s \\<longrightarrow>\n       - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "apply (smt hoare_triple_valid ite_import_mult sub_mult_closed)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t q p x.\n       test_seq t \\<and>\n       - q \\<le> complete_tests_class.Sum t \\<and>\n       t 0 * - p * - q \\<lbrace> x \\<rbrace> aL * - q \\<and>\n       (\\<forall>n>0.\n           t n * - p *\n           - q \\<lbrace> x \\<rbrace> pSum t n * - q) \\<longrightarrow>\n       - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q\n 2. \\<And>p q x r s.\n       - p \\<le> - q \\<and>\n       - q \\<lbrace> x \\<rbrace> - r \\<and> - r \\<le> - s \\<longrightarrow>\n       - p \\<lbrace> x \\<rbrace> - s\n 3. \\<And>p x r q s.\n       - p \\<lbrace> x \\<rbrace> - r \\<and>\n       - q \\<lbrace> x \\<rbrace> - s \\<longrightarrow>\n       - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "apply (smt (verit, del_insts) hoare_triple_valid aL_test pSum_test sba_dual.sub_sup_closed sub_mult_closed test_seq_def while_soundness_1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>p q x r s.\n       - p \\<le> - q \\<and>\n       - q \\<lbrace> x \\<rbrace> - r \\<and> - r \\<le> - s \\<longrightarrow>\n       - p \\<lbrace> x \\<rbrace> - s\n 2. \\<And>p x r q s.\n       - p \\<lbrace> x \\<rbrace> - r \\<and>\n       - q \\<lbrace> x \\<rbrace> - s \\<longrightarrow>\n       - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "apply (smt hoare_triple_valid pre_iso tests_dual.transitive pre_closed)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x r q s.\n       - p \\<lbrace> x \\<rbrace> - r \\<and>\n       - q \\<lbrace> x \\<rbrace> - s \\<longrightarrow>\n       - p \\<squnion> - q \\<lbrace> x \\<rbrace> - r \\<squnion> - s", "by (simp add: valid_rule_disj)"], ["", "lemma nat_test_rule_while:\n  \"nat_test t s \\<Longrightarrow> -q \\<le> s \\<Longrightarrow> (\\<forall>n . t n*-p*-q\\<lbrace>x\\<rbrace>pSum t n*-q) \\<Longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>nat_test t s; - q \\<le> s;\n     \\<forall>n.\n        t n * - p * - q \\<lbrace> x \\<rbrace> pSum t n * - q\\<rbrakk>\n    \\<Longrightarrow> - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q", "by (smt (verit, ccfv_threshold) hoare_triple_valid nat_test_def nat_test_pre pSum_test_nat sub_mult_closed)"], ["", "lemma test_seq_rule_while:\n  \"test_seq t \\<Longrightarrow> -q \\<le> Sum t \\<Longrightarrow> t 0*-p*-q\\<lbrace>x\\<rbrace>aL*-q \\<Longrightarrow> (\\<forall>n>0 . t n*-p*-q\\<lbrace>x\\<rbrace>pSum t n*-q) \\<Longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>test_seq t; - q \\<le> complete_tests_class.Sum t;\n     t 0 * - p * - q \\<lbrace> x \\<rbrace> aL * - q;\n     \\<forall>n>0.\n        t n * - p * - q \\<lbrace> x \\<rbrace> pSum t n * - q\\<rbrakk>\n    \\<Longrightarrow> - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q", "by (smt (verit, del_insts) hoare_triple_valid aL_test pSum_test sub_mult_closed test_seq_def while_soundness_1)"], ["", "lemma rule_bot:\n  \"bot\\<lbrace>x\\<rbrace>-p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<lbrace> x \\<rbrace> - p", "by (metis hoare_triple_valid pre_closed tests_dual.top_double_complement tests_dual.top_greatest)"], ["", "lemma rule_skip:\n  \"-p\\<lbrace>1\\<rbrace>-p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<lbrace> (1::'a) \\<rbrace> - p", "by (simp add: hoare_triple_valid pre_one_increasing)"], ["", "lemma rule_example_4:\n  assumes \"test_seq t\"\n      and \"Sum t = 1\"\n      and \"t 0*-p1*-p3 = bot\"\n      and \"-p1\\<lbrace>z1\\<rbrace>-p1*-p2\"\n      and \"\\<forall>n>0 . t n*-p1*-p2*-p3\\<lbrace>z2\\<rbrace>pSum t n*-p1*-p2\"\n    shows \"-p1\\<lbrace>z1*(-p3\\<star>z2)\\<rbrace>-p2*--p3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "have \"t 0*-p3*(-p1*-p2) = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t 0 * - p3 * (- p1 * - p2) = bot", "by (smt (verit, ccfv_threshold) assms(1,3) sub_assoc sub_comm sub_mult_closed test_seq_def tests_dual.sup_right_zero)"], ["proof (state)\nthis:\n  t 0 * - p3 * (- p1 * - p2) = bot\n\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "hence 1: \"t 0*-p3*(-p1*-p2)\\<lbrace>z2\\<rbrace>aL*(-p1*-p2)\""], ["proof (prove)\nusing this:\n  t 0 * - p3 * (- p1 * - p2) = bot\n\ngoal (1 subgoal):\n 1. t 0 * - p3 * (- p1 * - p2) \\<lbrace> z2 \\<rbrace> aL * (- p1 * - p2)", "by (metis aL_test sub_mult_closed rule_bot)"], ["proof (state)\nthis:\n  t 0 * - p3 * (- p1 * - p2) \\<lbrace> z2 \\<rbrace> aL * (- p1 * - p2)\n\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "have \"\\<forall>n>0 . t n*-p3*(-p1*-p2)\\<lbrace>z2\\<rbrace>pSum t n*(-p1*-p2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       t n * - p3 *\n       (- p1 * - p2) \\<lbrace> z2 \\<rbrace> pSum t n * (- p1 * - p2)", "by (smt assms(1,5) lower_bound_left pSum_test rule_cons_pre sub_assoc sub_comm sub_mult_closed test_seq_def)"], ["proof (state)\nthis:\n  \\<forall>n>0.\n     t n * - p3 *\n     (- p1 * - p2) \\<lbrace> z2 \\<rbrace> pSum t n * (- p1 * - p2)\n\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "hence \"-p1*-p2\\<lbrace>-p3\\<star>z2\\<rbrace>--p3*(-p1*-p2)\""], ["proof (prove)\nusing this:\n  \\<forall>n>0.\n     t n * - p3 *\n     (- p1 * - p2) \\<lbrace> z2 \\<rbrace> pSum t n * (- p1 * - p2)\n\ngoal (1 subgoal):\n 1. - p1 * - p2 \\<lbrace> - p3 \\<star> z2 \\<rbrace> - - p3 * (- p1 * - p2)", "using 1"], ["proof (prove)\nusing this:\n  \\<forall>n>0.\n     t n * - p3 *\n     (- p1 * - p2) \\<lbrace> z2 \\<rbrace> pSum t n * (- p1 * - p2)\n  t 0 * - p3 * (- p1 * - p2) \\<lbrace> z2 \\<rbrace> aL * (- p1 * - p2)\n\ngoal (1 subgoal):\n 1. - p1 * - p2 \\<lbrace> - p3 \\<star> z2 \\<rbrace> - - p3 * (- p1 * - p2)", "by (smt (verit, del_insts) assms(1,2) tests_dual.sub_bot_least rule_while sub_mult_closed)"], ["proof (state)\nthis:\n  - p1 * - p2 \\<lbrace> - p3 \\<star> z2 \\<rbrace> - - p3 * (- p1 * - p2)\n\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p1 * - p2 \\<lbrace> - p3 \\<star> z2 \\<rbrace> - - p3 * (- p1 * - p2)\n\ngoal (1 subgoal):\n 1. - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3", "by (smt assms(4) tests_dual.upper_bound_left rule_cons_post rule_seq sub_assoc sub_comm sub_mult_closed)"], ["proof (state)\nthis:\n  - p1 \\<lbrace> z1 * (- p3 \\<star> z2) \\<rbrace> - p2 * - - p3\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class hoare_calculus_pc_2 = hoare_calculus_sound + hoare_calculus_pre_complete +\n  assumes aL_one: \"aL = 1\"\nbegin"], ["", "subclass hoare_calculus_sound_complete"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.hoare_calculus_sound_complete Sup (1::'a) (*) uminus (\\<squnion>)\n     bot (\\<le>) (<) Atomic_program Atomic_test (\\<star>) ite\n     (\\<guillemotleft>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p x q.\n       - p * (x \\<guillemotleft> - q) \\<le> - q \\<longrightarrow>\n       - p \\<star> x \\<guillemotleft> - q \\<le> - q \\<squnion> aL", "by (simp add: aL_one pre_below_one)"], ["", "lemma while_soundness_pc:\n  assumes \"-p*-q \\<le> x\\<guillemotleft>-q\"\n  shows \"-q \\<le> -p\\<star>x\\<guillemotleft>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "let ?t = \"\\<lambda>x . 1\""], ["proof (state)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 1: \"test_seq ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq (\\<lambda>x. 1::'a)", "by (simp add: test_seq_def)"], ["proof (state)\nthis:\n  test_seq (\\<lambda>x. 1::'a)\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "hence 2: \"-q \\<le> Sum ?t\""], ["proof (prove)\nusing this:\n  test_seq (\\<lambda>x. 1::'a)\n\ngoal (1 subgoal):\n 1. - q \\<le> complete_tests_class.Sum (\\<lambda>x. 1::'a)", "by (metis Sum_test Sum_upper tests_dual.sba_dual.one_def tests_dual.antisymmetric tests_dual.sub_bot_least)"], ["proof (state)\nthis:\n  - q \\<le> complete_tests_class.Sum (\\<lambda>x. 1::'a)\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have 3: \"?t 0*-p*-q \\<le> x\\<guillemotleft>aL*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) * - p * - q \\<le> x \\<guillemotleft> aL * - q", "using 1"], ["proof (prove)\nusing this:\n  test_seq (\\<lambda>x. 1::'a)\n\ngoal (1 subgoal):\n 1. (1::'a) * - p * - q \\<le> x \\<guillemotleft> aL * - q", "by (simp add: assms aL_one)"], ["proof (state)\nthis:\n  (1::'a) * - p * - q \\<le> x \\<guillemotleft> aL * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "have \"\\<forall>n>0 . ?t n*-p*-q \\<le> x\\<guillemotleft>pSum ?t n*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       (1::'a) * - p * - q\n       \\<le> x \\<guillemotleft> pSum (\\<lambda>x. 1::'a) n * - q", "using 1"], ["proof (prove)\nusing this:\n  test_seq (\\<lambda>x. 1::'a)\n\ngoal (1 subgoal):\n 1. \\<forall>n>0.\n       (1::'a) * - p * - q\n       \\<le> x \\<guillemotleft> pSum (\\<lambda>x. 1::'a) n * - q", "by (metis assms pSum_test pSum_upper tests_dual.sba_dual.one_def tests_dual.antisymmetric tests_dual.sub_bot_least tests_dual.sup_left_unit)"], ["proof (state)\nthis:\n  \\<forall>n>0.\n     (1::'a) * - p * - q\n     \\<le> x \\<guillemotleft> pSum (\\<lambda>x. 1::'a) n * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>n>0.\n     (1::'a) * - p * - q\n     \\<le> x \\<guillemotleft> pSum (\\<lambda>x. 1::'a) n * - q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "using 1 2 3 aL_one while_soundness_0"], ["proof (prove)\nusing this:\n  \\<forall>n>0.\n     (1::'a) * - p * - q\n     \\<le> x \\<guillemotleft> pSum (\\<lambda>x. 1::'a) n * - q\n  test_seq (\\<lambda>x. 1::'a)\n  - q \\<le> complete_tests_class.Sum (\\<lambda>x. 1::'a)\n  (1::'a) * - p * - q \\<le> x \\<guillemotleft> aL * - q\n  aL = (1::'a)\n  - ?p * - ?q \\<le> ?x \\<guillemotleft> - ?q \\<Longrightarrow>\n  - ?q * aL \\<le> - ?p \\<star> ?x \\<guillemotleft> - - ?p * - ?q\n\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q", "by auto"], ["proof (state)\nthis:\n  - q \\<le> - p \\<star> x \\<guillemotleft> - - p * - q\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class hoare_calculus_pc = hoare_calculus_sound + hoare_calculus_pre_complete +\n  assumes pre_one_one: \"x\\<guillemotleft>1 = 1\"\nbegin"], ["", "subclass hoare_calculus_pc_2"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.hoare_calculus_pc_2 Sup (1::'a) (*) uminus (\\<squnion>) bot\n     (\\<le>) (<) Atomic_program Atomic_test (\\<star>) ite (\\<guillemotleft>)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. aL = (1::'a)", "by (simp add: aL_def pre_one_one)"], ["", "end"], ["", "class hoare_calculus_pc_valid = hoare_calculus_pc + hoare_calculus_valid\nbegin"], ["", "lemma rule_while_pc:\n  \"-p*-q\\<lbrace>x\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>-p\\<star>x\\<rbrace>--p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q \\<lbrace> x \\<rbrace> - q \\<Longrightarrow>\n    - q \\<lbrace> - p \\<star> x \\<rbrace> - - p * - q", "by (metis hoare_triple_valid sub_mult_closed while_soundness_pc)"], ["", "lemma rule_alternation:\n  \"-p\\<lbrace>x\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>y\\<rbrace>-p \\<Longrightarrow> -p\\<lbrace>-r\\<star>x*y\\<rbrace>--r*-p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- p \\<lbrace> x \\<rbrace> - q;\n     - q \\<lbrace> y \\<rbrace> - p\\<rbrakk>\n    \\<Longrightarrow> - p \\<lbrace> - r \\<star> x * y \\<rbrace> - - r * - p", "by (meson rule_cons_pre_mult rule_seq rule_while_pc)"], ["", "lemma rule_alternation_context:\n  \"-p\\<lbrace>v\\<rbrace>-p \\<Longrightarrow> -p\\<lbrace>w\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>x\\<rbrace>-q \\<Longrightarrow> -q\\<lbrace>y\\<rbrace>-p \\<and> -p\\<lbrace>z\\<rbrace>-p \\<Longrightarrow> -p\\<lbrace>-r\\<star>v*w*x*y*z\\<rbrace>--r*-p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- p \\<lbrace> v \\<rbrace> - p; - p \\<lbrace> w \\<rbrace> - q;\n     - q \\<lbrace> x \\<rbrace> - q;\n     - q \\<lbrace> y \\<rbrace> - p \\<and>\n     - p \\<lbrace> z \\<rbrace> - p\\<rbrakk>\n    \\<Longrightarrow> - p \\<lbrace> - r \\<star>\n                                    v * w * x * y * z \\<rbrace> - - r * - p", "by (meson rule_cons_pre_mult rule_seq rule_while_pc)"], ["", "lemma rule_example_3:\n  assumes \"-p*-q\\<lbrace>x\\<rbrace>--p*-q\"\n      and \"--p*-r\\<lbrace>x\\<rbrace>-p*-r\"\n      and \"-p*-r\\<lbrace>y\\<rbrace>-p*-q\"\n      and \"--p*-q\\<lbrace>z\\<rbrace>--p*-r\"\n    shows \"-p*-q\\<squnion>--p*-r\\<lbrace>-s\\<star>x*(y\\<lhd>-p\\<rhd>z)\\<rbrace>--s*(-p*-q\\<squnion>--p*-r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "have t1: \"-p*-q\\<squnion>--p*-r\\<lbrace>x\\<rbrace>--p*-q\\<squnion>-p*-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p * - r \\<lbrace> x \\<rbrace> - - p * - q \\<squnion> - p * - r", "by (smt assms(1,2) rule_disj sub_mult_closed)"], ["proof (state)\nthis:\n  - p * - q \\<squnion>\n  - - p * - r \\<lbrace> x \\<rbrace> - - p * - q \\<squnion> - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "have \"-p*-r\\<lbrace>y\\<rbrace>-p*-q\\<squnion>--p*-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - r \\<lbrace> y \\<rbrace> - p * - q \\<squnion> - - p * - r", "by (smt assms(3) rule_cons_post_plus sub_mult_closed)"], ["proof (state)\nthis:\n  - p * - r \\<lbrace> y \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "hence t2: \"-p*(--p*-q\\<squnion>-p*-r)\\<lbrace>y\\<rbrace>-p*-q\\<squnion>--p*-r\""], ["proof (prove)\nusing this:\n  - p * - r \\<lbrace> y \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - p *\n    (- - p * - q \\<squnion>\n     - p * - r) \\<lbrace> y \\<rbrace> - p * - q \\<squnion> - - p * - r", "by (smt (z3) tests_dual.sba_dual.less_eq_inf tests_dual.sba_dual.reflexive tests_dual.sba_dual.sub_sup_closed tests_dual.sub_associative tests_dual.sub_sup_closed tests_dual.upper_bound_left tests_dual.wnf_lemma_3)"], ["proof (state)\nthis:\n  - p *\n  (- - p * - q \\<squnion>\n   - p * - r) \\<lbrace> y \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "have \"--p*-q\\<lbrace>z\\<rbrace>-p*-q\\<squnion>--p*-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * - q \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r", "by (smt assms(4) tests_dual.inf_commutative rule_cons_post_plus sub_mult_closed)"], ["proof (state)\nthis:\n  - - p * - q \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "hence \"--p*(--p*-q\\<squnion>-p*-r)\\<lbrace>z\\<rbrace>-p*-q\\<squnion>--p*-r\""], ["proof (prove)\nusing this:\n  - - p * - q \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - - p *\n    (- - p * - q \\<squnion>\n     - p * - r) \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r", "by (smt (z3) tests_dual.sba_dual.one_def tests_dual.sba_dual.sup_absorb tests_dual.sba_dual.sup_complement_intro tests_dual.sba_dual.sup_right_unit tests_dual.sub_sup_closed tests_dual.sup_complement_intro tests_dual.sup_left_dist_inf tests_dual.sup_right_unit tests_dual.top_double_complement)"], ["proof (state)\nthis:\n  - - p *\n  (- - p * - q \\<squnion>\n   - p * - r) \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "hence \"--p*-q\\<squnion>-p*-r\\<lbrace>y\\<lhd>-p\\<rhd>z\\<rbrace>-p*-q\\<squnion>--p*-r\""], ["proof (prove)\nusing this:\n  - - p *\n  (- - p * - q \\<squnion>\n   - p * - r) \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - - p * - q \\<squnion>\n    - p *\n    - r \\<lbrace> y \\<lhd> - p \\<rhd> z \\<rbrace> - p * - q \\<squnion>\n            - - p * - r", "using t2"], ["proof (prove)\nusing this:\n  - - p *\n  (- - p * - q \\<squnion>\n   - p * - r) \\<lbrace> z \\<rbrace> - p * - q \\<squnion> - - p * - r\n  - p *\n  (- - p * - q \\<squnion>\n   - p * - r) \\<lbrace> y \\<rbrace> - p * - q \\<squnion> - - p * - r\n\ngoal (1 subgoal):\n 1. - - p * - q \\<squnion>\n    - p *\n    - r \\<lbrace> y \\<lhd> - p \\<rhd> z \\<rbrace> - p * - q \\<squnion>\n            - - p * - r", "by (smt tests_dual.inf_closed rule_cond sub_mult_closed)"], ["proof (state)\nthis:\n  - - p * - q \\<squnion>\n  - p *\n  - r \\<lbrace> y \\<lhd> - p \\<rhd> z \\<rbrace> - p * - q \\<squnion>\n          - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "hence \"-s*(-p*-q\\<squnion>--p*-r)\\<lbrace>x*(y\\<lhd>-p\\<rhd>z)\\<rbrace>-p*-q\\<squnion>--p*-r\""], ["proof (prove)\nusing this:\n  - - p * - q \\<squnion>\n  - p *\n  - r \\<lbrace> y \\<lhd> - p \\<rhd> z \\<rbrace> - p * - q \\<squnion>\n          - - p * - r\n\ngoal (1 subgoal):\n 1. - s *\n    (- p * - q \\<squnion>\n     - - p *\n     - r) \\<lbrace> x *\n                    (y \\<lhd> - p \\<rhd> z) \\<rbrace> - p * - q \\<squnion>\n                - - p * - r", "using t1"], ["proof (prove)\nusing this:\n  - - p * - q \\<squnion>\n  - p *\n  - r \\<lbrace> y \\<lhd> - p \\<rhd> z \\<rbrace> - p * - q \\<squnion>\n          - - p * - r\n  - p * - q \\<squnion>\n  - - p * - r \\<lbrace> x \\<rbrace> - - p * - q \\<squnion> - p * - r\n\ngoal (1 subgoal):\n 1. - s *\n    (- p * - q \\<squnion>\n     - - p *\n     - r) \\<lbrace> x *\n                    (y \\<lhd> - p \\<rhd> z) \\<rbrace> - p * - q \\<squnion>\n                - - p * - r", "by (smt tests_dual.inf_closed rule_cons_pre_mult rule_seq sub_mult_closed)"], ["proof (state)\nthis:\n  - s *\n  (- p * - q \\<squnion>\n   - - p *\n   - r) \\<lbrace> x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - p * - q \\<squnion>\n              - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - s *\n  (- p * - q \\<squnion>\n   - - p *\n   - r) \\<lbrace> x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - p * - q \\<squnion>\n              - - p * - r\n\ngoal (1 subgoal):\n 1. - p * - q \\<squnion>\n    - - p *\n    - r \\<lbrace> - s \\<star>\n                  x *\n                  (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n              (- p * - q \\<squnion> - - p * - r)", "by (smt tests_dual.inf_closed rule_while_pc sub_mult_closed)"], ["proof (state)\nthis:\n  - p * - q \\<squnion>\n  - - p *\n  - r \\<lbrace> - s \\<star>\n                x *\n                (y \\<lhd> - p \\<rhd> z) \\<rbrace> - - s *\n            (- p * - q \\<squnion> - - p * - r)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class hoare_calculus_tc = hoare_calculus + precondition_test_test + precondition_distr_mult +\n  assumes while_bnd: \"p \\<in> Test_expression \\<and> q \\<in> Pre_expression \\<and> x \\<in> While_program \\<longrightarrow> p\\<star>x\\<guillemotleft>q \\<le> Sum (\\<lambda>n . (p*x)^n\\<guillemotleft>bot)\"\nbegin"], ["", "lemma\n  assumes \"p \\<in> Test_expression\"\n      and \"q \\<in> Pre_expression\"\n      and \"x \\<in> While_program\"\n    shows \"p\\<star>x\\<guillemotleft>q \\<le> tsum (-p) x (p\\<star>x\\<guillemotleft>q) (-p\\<squnion>(x\\<guillemotleft>(p\\<star>x\\<guillemotleft>q)*aL))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?w = \"p\\<star>x\\<guillemotleft>q\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?s = \"-p\\<squnion>(x\\<guillemotleft>?w*aL)\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?t = \"tseq (-p) x ?w ?s\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "let ?b = \"\\<lambda>n . (p*x)^n\\<guillemotleft>bot\""], ["proof (state)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 2: \"test_seq ?t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq\n     (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n       (- p \\<squnion>\n        (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (simp add: assms(2) pre_expression_test t_seq_test_seq)"], ["proof (state)\nthis:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 3: \"test_seq ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)", "using pre_closed test_seq_def tests_dual.sba_dual.complement_top"], ["proof (prove)\nusing this:\n  ?x \\<guillemotleft> - ?q = - - (?x \\<guillemotleft> - ?q)\n  test_seq ?t \\<equiv> \\<forall>n. ?t n = - - ?t n\n  - (1::'a) = bot\n\ngoal (1 subgoal):\n 1. test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)", "by blast"], ["proof (state)\nthis:\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have 4: \"?w = --?w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)", "by (metis assms(2) pre_expression_test pre_closed)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"?w \\<le> Sum ?b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> complete_tests_class.Sum\n           (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)", "using assms while_bnd"], ["proof (prove)\nusing this:\n  p \\<in> Test_expression\n  q \\<in> Pre_expression\n  x \\<in> While_program\n  ?p \\<in> Test_expression \\<and>\n  ?q \\<in> Pre_expression \\<and> ?x \\<in> While_program \\<longrightarrow>\n  ?p \\<star> ?x \\<guillemotleft> ?q\n  \\<le> complete_tests_class.Sum\n         (\\<lambda>n. (?p * ?x) ^ n \\<guillemotleft> bot)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> complete_tests_class.Sum\n           (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)", "by blast"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> complete_tests_class.Sum\n         (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence 5: \"?w = Sum ?b*?w\""], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> complete_tests_class.Sum\n         (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q =\n    complete_tests_class.Sum\n     (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)", "using 3 4"], ["proof (prove)\nusing this:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> complete_tests_class.Sum\n         (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q =\n    complete_tests_class.Sum\n     (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)", "by (smt Sum_test leq_def sub_comm)"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q =\n  complete_tests_class.Sum (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "have \"\\<forall>n . ?b n*?w \\<le> ?t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n", "show \"?b n*?w \\<le> ?t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           n", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. ((p * x) ^ 0 \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0\n 2. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "show \"?b 0*?w \\<le> ?t 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((p * x) ^ 0 \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0", "using 2 4"], ["proof (prove)\nusing this:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. ((p * x) ^ 0 \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           0", "by (metis power.power_0 pre_one test_seq_def tests_dual.sup_left_zero tests_dual.top_double_complement tests_dual.top_greatest)"], ["proof (state)\nthis:\n  ((p * x) ^ 0 \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         0\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "assume 6: \"?b n*?w \\<le> ?t n\""], ["proof (state)\nthis:\n  ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "have \"-p \\<le> ?t (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "apply (unfold tseq_def power_succ_unfold_ext)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - p\n    \\<le> tfun (- p) x (p \\<star> x \\<guillemotleft> q)\n           ((tfun (- p) x (p \\<star> x \\<guillemotleft> q) ^ n)\n             (- p \\<squnion>\n              (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))", "by (smt assms(2) pre_expression_test t_seq_test pre_closed sub_mult_closed tfun_def tseq_def tests_dual.lower_bound_left)"], ["proof (state)\nthis:\n  - p\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "hence 7: \"-p*?b (Suc n)*?w \\<le> ?t (Suc n)\""], ["proof (prove)\nusing this:\n  - p\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. - p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "using 2 3 4"], ["proof (prove)\nusing this:\n  - p\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. - p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "by (smt tests_dual.upper_bound_left sub_mult_closed test_seq_def tests_dual.transitive)"], ["proof (state)\nthis:\n  - p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "have 8: \"p*?b (Suc n)*?w \\<le> x\\<guillemotleft>?w*(?b n*?w)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> x \\<guillemotleft>\n          (p \\<star> x \\<guillemotleft> q) *\n          (((p * x) ^ n \\<guillemotleft> bot) *\n           (p \\<star> x \\<guillemotleft> q))", "by (smt assms(1,2) tests_dual.upper_bound_right tests_dual.sup_idempotent power_Suc pre_closed pre_distr_mult pre_expression_test pre_import_composition sub_assoc sub_comm sub_mult_closed test_expression_test while_pre_then tests_dual.top_double_complement)"], ["proof (state)\nthis:\n  p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        (((p * x) ^ n \\<guillemotleft> bot) *\n         (p \\<star> x \\<guillemotleft> q))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "have 9: \"... \\<le> x\\<guillemotleft>?w*?t n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    (((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q))\n    \\<le> x \\<guillemotleft>\n          (p \\<star> x \\<guillemotleft> q) *\n          tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           n", "using 2 3 4 6"], ["proof (prove)\nusing this:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    (((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q))\n    \\<le> x \\<guillemotleft>\n          (p \\<star> x \\<guillemotleft> q) *\n          tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           n", "by (smt tests_dual.sub_sup_right_isotone pre_iso sub_mult_closed test_seq_def)"], ["proof (state)\nthis:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  (((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q))\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "have \"... \\<le> ?t (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     n\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "using 2 4"], ["proof (prove)\nusing this:\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft>\n    (p \\<star> x \\<guillemotleft> q) *\n    tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n     n\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "by (smt power_succ_unfold_ext pre_closed sub_mult_closed test_seq_def tfun_def tseq_def tests_dual.lower_bound_right)"], ["proof (state)\nthis:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   n\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "hence \"p*?b (Suc n)*?w \\<le> ?t (Suc n)\""], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   n\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "using 2 3 4 8 9"], ["proof (prove)\nusing this:\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n   (- p \\<squnion>\n    (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n   n\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        (((p * x) ^ n \\<guillemotleft> bot) *\n         (p \\<star> x \\<guillemotleft> q))\n  x \\<guillemotleft>\n  (p \\<star> x \\<guillemotleft> q) *\n  (((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q))\n  \\<le> x \\<guillemotleft>\n        (p \\<star> x \\<guillemotleft> q) *\n        tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n\n\ngoal (1 subgoal):\n 1. p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "by (smt assms(1) pre_closed sub_mult_closed test_expression_test test_seq_def tests_dual.transitive)"], ["proof (state)\nthis:\n  p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              n \\<Longrightarrow>\n       ((p * x) ^ Suc n \\<guillemotleft> bot) *\n       (p \\<star> x \\<guillemotleft> q)\n       \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n              (- p \\<squnion>\n               (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n              (Suc n)", "thus \"?b (Suc n)*?w \\<le> ?t (Suc n)\""], ["proof (prove)\nusing this:\n  p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "using 2 3 4 7"], ["proof (prove)\nusing this:\n  p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n  test_seq\n   (tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n     (- p \\<squnion>\n      (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL)))\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n  - p * ((p * x) ^ Suc n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal (1 subgoal):\n 1. ((p * x) ^ Suc n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n           (Suc n)", "by (smt assms(1) tests_dual.sup_less_eq_cases sub_assoc sub_mult_closed test_expression_test test_seq_def)"], ["proof (state)\nthis:\n  ((p * x) ^ Suc n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         (Suc n)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n  \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n         n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>n.\n     ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n     \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n            (- p \\<squnion>\n             (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n            n\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "hence \"Sum ?b*?w \\<le> tsum (-p) x ?w ?s\""], ["proof (prove)\nusing this:\n  \\<forall>n.\n     ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n     \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n            (- p \\<squnion>\n             (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n            n\n\ngoal (1 subgoal):\n 1. complete_tests_class.Sum\n     (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 3 4"], ["proof (prove)\nusing this:\n  \\<forall>n.\n     ((p * x) ^ n \\<guillemotleft> bot) * (p \\<star> x \\<guillemotleft> q)\n     \\<le> tseq (- p) x (p \\<star> x \\<guillemotleft> q)\n            (- p \\<squnion>\n             (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n            n\n  test_seq (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot)\n  p \\<star> x \\<guillemotleft> q = - - (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. complete_tests_class.Sum\n     (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n    (p \\<star> x \\<guillemotleft> q)\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by (smt assms(2) Sum_upper mult_right_dist_Sum pre_expression_test sub_mult_closed t_seq_test t_sum_test test_seq_def tests_dual.transitive tsum_def)"], ["proof (state)\nthis:\n  complete_tests_class.Sum (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "thus ?thesis"], ["proof (prove)\nusing this:\n  complete_tests_class.Sum (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "using 5"], ["proof (prove)\nusing this:\n  complete_tests_class.Sum (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n  \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n  p \\<star> x \\<guillemotleft> q =\n  complete_tests_class.Sum (\\<lambda>n. (p * x) ^ n \\<guillemotleft> bot) *\n  (p \\<star> x \\<guillemotleft> q)\n\ngoal (1 subgoal):\n 1. p \\<star> x \\<guillemotleft> q\n    \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n           (- p \\<squnion>\n            (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))", "by auto"], ["proof (state)\nthis:\n  p \\<star> x \\<guillemotleft> q\n  \\<le> tsum (- p) x (p \\<star> x \\<guillemotleft> q)\n         (- p \\<squnion>\n          (x \\<guillemotleft> (p \\<star> x \\<guillemotleft> q) * aL))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "class complete_pre = complete_tests + precondition + power\nbegin"], ["", "definition bnd :: \"'a \\<Rightarrow> 'a\"\n  where \"bnd x \\<equiv> Sup { x^n\\<guillemotleft>bot | n::nat . True }\""], ["", "lemma bnd_test_set:\n  \"test_set { x^n\\<guillemotleft>bot | n::nat . True }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. test_set {x ^ n \\<guillemotleft> bot |n. True}", "by (smt (verit, del_insts) CollectD pre_closed test_set_def tests_dual.top_double_complement)"], ["", "lemma bnd_test:\n  \"bnd x = --bnd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd x = - - bnd x", "using bnd_def bnd_test_set sup_test"], ["proof (prove)\nusing this:\n  bnd ?x \\<equiv> Sup {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set ?A \\<longrightarrow> Sup ?A = - - Sup ?A\n\ngoal (1 subgoal):\n 1. bnd x = - - bnd x", "by auto"], ["", "lemma bnd_upper:\n  \"x^m\\<guillemotleft>bot \\<le> bnd x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ m \\<guillemotleft> bot \\<le> bnd x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x ^ m \\<guillemotleft> bot \\<le> bnd x", "have \"x^m\\<guillemotleft>bot \\<in> { x^m\\<guillemotleft>bot | m::nat . True }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x ^ m \\<guillemotleft> bot \\<in> {x ^ m \\<guillemotleft> bot |m. True}", "by auto"], ["proof (state)\nthis:\n  x ^ m \\<guillemotleft> bot \\<in> {x ^ m \\<guillemotleft> bot |m. True}\n\ngoal (1 subgoal):\n 1. x ^ m \\<guillemotleft> bot \\<le> bnd x", "thus ?thesis"], ["proof (prove)\nusing this:\n  x ^ m \\<guillemotleft> bot \\<in> {x ^ m \\<guillemotleft> bot |m. True}\n\ngoal (1 subgoal):\n 1. x ^ m \\<guillemotleft> bot \\<le> bnd x", "using bnd_def bnd_test_set sup_upper"], ["proof (prove)\nusing this:\n  x ^ m \\<guillemotleft> bot \\<in> {x ^ m \\<guillemotleft> bot |m. True}\n  bnd ?x \\<equiv> Sup {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set ?A \\<and> ?x \\<in> ?A \\<longrightarrow> ?x \\<le> Sup ?A\n\ngoal (1 subgoal):\n 1. x ^ m \\<guillemotleft> bot \\<le> bnd x", "by auto"], ["proof (state)\nthis:\n  x ^ m \\<guillemotleft> bot \\<le> bnd x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bnd_least:\n  assumes \"\\<forall>n . x^n\\<guillemotleft>bot \\<le> -p\"\n    shows \"bnd x \\<le> -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd x \\<le> - p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bnd x \\<le> - p", "have \"\\<forall>y\\<in>{ x^n\\<guillemotleft>bot | n::nat . True } . y \\<le> -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>{x ^ n \\<guillemotleft> bot |n. True}. y \\<le> - p", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>n. x ^ n \\<guillemotleft> bot \\<le> - p\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>{x ^ n \\<guillemotleft> bot |n. True}. y \\<le> - p", "by blast"], ["proof (state)\nthis:\n  \\<forall>y\\<in>{x ^ n \\<guillemotleft> bot |n. True}. y \\<le> - p\n\ngoal (1 subgoal):\n 1. bnd x \\<le> - p", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>{x ^ n \\<guillemotleft> bot |n. True}. y \\<le> - p\n\ngoal (1 subgoal):\n 1. bnd x \\<le> - p", "using bnd_def bnd_test_set sup_least"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>{x ^ n \\<guillemotleft> bot |n. True}. y \\<le> - p\n  bnd ?x \\<equiv> Sup {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set ?A \\<and> (\\<forall>x\\<in>?A. x \\<le> - ?y) \\<longrightarrow>\n  Sup ?A \\<le> - ?y\n\ngoal (1 subgoal):\n 1. bnd x \\<le> - p", "by auto"], ["proof (state)\nthis:\n  bnd x \\<le> - p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mult_right_dist_bnd:\n  assumes \"\\<forall>n . (x^n\\<guillemotleft>bot)*-p \\<le> -q\"\n    shows \"bnd x*-p \\<le> -q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bnd x * - p \\<le> - q", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bnd x * - p \\<le> - q", "have \"Sup { y*-p | y . y \\<in> { x^n\\<guillemotleft>bot | n::nat . True } } \\<le> -q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Sup {y * - p |y. y \\<in> {x ^ n \\<guillemotleft> bot |n. True}}\n    \\<le> - q", "by (smt assms mem_Collect_eq tests_dual.complement_bot pre_closed sub_mult_closed sup_least test_set_def)"], ["proof (state)\nthis:\n  Sup {y * - p |y. y \\<in> {x ^ n \\<guillemotleft> bot |n. True}} \\<le> - q\n\ngoal (1 subgoal):\n 1. bnd x * - p \\<le> - q", "thus ?thesis"], ["proof (prove)\nusing this:\n  Sup {y * - p |y. y \\<in> {x ^ n \\<guillemotleft> bot |n. True}} \\<le> - q\n\ngoal (1 subgoal):\n 1. bnd x * - p \\<le> - q", "using bnd_test_set bnd_def mult_right_dist_sup"], ["proof (prove)\nusing this:\n  Sup {y * - p |y. y \\<in> {x ^ n \\<guillemotleft> bot |n. True}} \\<le> - q\n  test_set {?x ^ n \\<guillemotleft> bot |n. True}\n  bnd ?x \\<equiv> Sup {?x ^ n \\<guillemotleft> bot |n. True}\n  test_set ?A \\<Longrightarrow>\n  Sup ?A * - ?p = Sup {x * - ?p |x. x \\<in> ?A}\n\ngoal (1 subgoal):\n 1. bnd x * - p \\<le> - q", "by simp"], ["proof (state)\nthis:\n  bnd x * - p \\<le> - q\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma tests_complete:\n  \"nat_test (\\<lambda>n . (-p*x)^n\\<guillemotleft>bot) (bnd(-p*x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nat_test (\\<lambda>n. (- p * x) ^ n \\<guillemotleft> bot)\n     (bnd (- p * x))", "using bnd_test bnd_upper mult_right_dist_bnd nat_test_def tests_dual.complement_bot pre_closed"], ["proof (prove)\nusing this:\n  bnd ?x = - - bnd ?x\n  ?x ^ ?m \\<guillemotleft> bot \\<le> bnd ?x\n  \\<forall>n.\n     (?x ^ n \\<guillemotleft> bot) * - ?p \\<le> - ?q \\<Longrightarrow>\n  bnd ?x * - ?p \\<le> - ?q\n  nat_test ?t ?s \\<equiv>\n  (\\<forall>n. ?t n = - - ?t n) \\<and>\n  ?s = - - ?s \\<and>\n  (\\<forall>n. ?t n \\<le> ?s) \\<and>\n  (\\<forall>x y.\n      (\\<forall>n. ?t n * - x \\<le> - y) \\<longrightarrow>\n      ?s * - x \\<le> - y)\n  - (1::'a) = bot\n  ?x \\<guillemotleft> - ?q = - - (?x \\<guillemotleft> - ?q)\n\ngoal (1 subgoal):\n 1. nat_test (\\<lambda>n. (- p * x) ^ n \\<guillemotleft> bot)\n     (bnd (- p * x))", "by blast"], ["", "end"], ["", "end"]]}