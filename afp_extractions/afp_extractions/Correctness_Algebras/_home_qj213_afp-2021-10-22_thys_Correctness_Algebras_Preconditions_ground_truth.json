{"file_name": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras/Preconditions.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras", "problem_names": ["lemma pre_sub_distr:\n  \"x\\<guillemotleft>-p*-q \\<le> (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\"", "lemma pre_below_one:\n  \"x\\<guillemotleft>-p \\<le> 1\"", "lemma pre_lower_bound_left:\n  \"x\\<guillemotleft>-p*-q \\<le> x\\<guillemotleft>-p\"", "lemma pre_iso:\n  \"-p \\<le> -q \\<Longrightarrow> x\\<guillemotleft>-p \\<le> x\\<guillemotleft>-q\"", "lemma pre_below_pre_one:\n  \"x\\<guillemotleft>-p \\<le> x\\<guillemotleft>1\"", "lemma pre_seq_below_pre_one:\n  \"x*y\\<guillemotleft>1 \\<le> x\\<guillemotleft>1\"", "lemma pre_compose:\n  \"-p \\<le> x\\<guillemotleft>-q \\<Longrightarrow> -q \\<le> y\\<guillemotleft>-r \\<Longrightarrow> -p \\<le> x*y\\<guillemotleft>-r\"", "lemma pre_one:\n  \"1\\<guillemotleft>-p = -p\"", "lemma pre_import:\n  \"-p*(x\\<guillemotleft>-q) = -p*(-p*x\\<guillemotleft>-q)\"", "lemma pre_import_composition:\n  \"-p*(-p*x*y\\<guillemotleft>-q) = -p*(x\\<guillemotleft>y\\<guillemotleft>-q)\"", "lemma pre_import_equiv:\n  \"-p \\<le> x\\<guillemotleft>-q \\<longleftrightarrow> -p \\<le> -p*x\\<guillemotleft>-q\"", "lemma pre_import_equiv_mult:\n  \"-p*-q \\<le> x\\<guillemotleft>-s \\<longleftrightarrow> -p*-q \\<le> -q*x\\<guillemotleft>-s\"", "lemma pre_mult_test_promote:\n  \"x*-p\\<guillemotleft>-q = x*-p\\<guillemotleft>-p*-q\"", "lemma pre_test_neg:\n  \"--p*(-p\\<guillemotleft>-q) = --p\"", "lemma pre_bot:\n  \"bot\\<guillemotleft>-q = 1\"", "lemma pre_export:\n  \"-p*x\\<guillemotleft>-q = --p\\<squnion>(x\\<guillemotleft>-q)\"", "lemma pre_neg_mult:\n  \"--p \\<le> -p*x\\<guillemotleft>-q\"", "lemma pre_test_test_same:\n  \"-p\\<guillemotleft>-p = 1\"", "lemma test_below_pre_test_mult:\n  \"-q \\<le> -p\\<guillemotleft>-p*-q\"", "lemma test_below_pre_test:\n  \"-q \\<le> -p\\<guillemotleft>-q\"", "lemma test_below_pre_test_2:\n  \"--p \\<le> -p\\<guillemotleft>-q\"", "lemma pre_test_bot:\n  \"-p\\<guillemotleft>bot = --p\"", "lemma pre_test_one:\n  \"-p\\<guillemotleft>1 = 1\"", "lemma pre_test_neg:\n  \"--p*(-p\\<guillemotleft>-q) = bot\"", "lemma pre_bot:\n  \"bot\\<guillemotleft>-q = bot\"", "lemma pre_export:\n  \"-p*x\\<guillemotleft>-q = -p*(x\\<guillemotleft>-q)\"", "lemma pre_neg_mult:\n  \"-p*x\\<guillemotleft>-q \\<le> -p\"", "lemma pre_test_test_same:\n  \"-p\\<guillemotleft>-p = -p\"", "lemma test_above_pre_test_plus:\n  \"--p\\<guillemotleft>-p\\<squnion>-q \\<le> -q\"", "lemma test_above_pre_test:\n  \"-p\\<guillemotleft>-q \\<le> -q\"", "lemma test_above_pre_test_2:\n  \"-p\\<guillemotleft>-q \\<le> -p\"", "lemma pre_test_bot:\n  \"-p\\<guillemotleft>bot = bot\"", "lemma pre_test_one:\n  \"-p\\<guillemotleft>1 = -p\""], "translations": [["", "lemma pre_sub_distr:\n  \"x\\<guillemotleft>-p*-q \\<le> (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - p * - q\n    \\<le> (x \\<guillemotleft> - p) * (x \\<guillemotleft> - q)", "by (smt (z3) pre_closed pre_lower_bound_right tests_dual.sub_commutative tests_dual.sub_sup_closed tests_dual.least_upper_bound)"], ["", "text \\<open>Theorem 39.5\\<close>"], ["", "lemma pre_below_one:\n  \"x\\<guillemotleft>-p \\<le> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - p \\<le> (1::'a)", "by (metis pre_closed tests_dual.sub_bot_least)"], ["", "lemma pre_lower_bound_left:\n  \"x\\<guillemotleft>-p*-q \\<le> x\\<guillemotleft>-p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - p * - q \\<le> x \\<guillemotleft> - p", "using pre_lower_bound_right tests_dual.sub_commutative"], ["proof (prove)\nusing this:\n  ?x \\<guillemotleft> - ?p * - ?q \\<le> ?x \\<guillemotleft> - ?q\n  - ?x * - ?y = - ?y * - ?x\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - p * - q \\<le> x \\<guillemotleft> - p", "by fastforce"], ["", "text \\<open>Theorem 39.1\\<close>"], ["", "lemma pre_iso:\n  \"-p \\<le> -q \\<Longrightarrow> x\\<guillemotleft>-p \\<le> x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<le> - q \\<Longrightarrow>\n    x \\<guillemotleft> - p \\<le> x \\<guillemotleft> - q", "by (metis leq_def pre_lower_bound_right)"], ["", "text \\<open>Theorem 39.4 and Theorem 40.9\\<close>"], ["", "lemma pre_below_pre_one:\n  \"x\\<guillemotleft>-p \\<le> x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - p \\<le> x \\<guillemotleft> (1::'a)", "using tests_dual.sba_dual.one_def pre_iso tests_dual.sub_bot_least"], ["proof (prove)\nusing this:\n  (1::'a) = - bot\n  - ?p \\<le> - ?q \\<Longrightarrow>\n  ?x \\<guillemotleft> - ?p \\<le> ?x \\<guillemotleft> - ?q\n  - ?x \\<le> (1::'a)\n\ngoal (1 subgoal):\n 1. x \\<guillemotleft> - p \\<le> x \\<guillemotleft> (1::'a)", "by blast"], ["", "text \\<open>Theorem 39.3\\<close>"], ["", "lemma pre_seq_below_pre_one:\n  \"x*y\\<guillemotleft>1 \\<le> x\\<guillemotleft>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * y \\<guillemotleft> (1::'a) \\<le> x \\<guillemotleft> (1::'a)", "by (metis one_def pre_below_pre_one pre_closed pre_seq)"], ["", "text \\<open>Theorem 39.6\\<close>"], ["", "lemma pre_compose:\n  \"-p \\<le> x\\<guillemotleft>-q \\<Longrightarrow> -q \\<le> y\\<guillemotleft>-r \\<Longrightarrow> -p \\<le> x*y\\<guillemotleft>-r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- p \\<le> x \\<guillemotleft> - q;\n     - q \\<le> y \\<guillemotleft> - r\\<rbrakk>\n    \\<Longrightarrow> - p \\<le> x * y \\<guillemotleft> - r", "by (metis pre_closed pre_iso tests_dual.transitive pre_seq)"], ["", "(*\nlemma pre_test_test: \"-p*(-p\\<guillemotleft>-q) = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test_promote: \"-p\\<guillemotleft>-q = -p\\<guillemotleft>-p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=4] oops\nlemma pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=2] oops\n*)"], ["", "end"], ["", "class precondition_test_test = precondition +\n  assumes pre_test_test: \"-p*(-p\\<guillemotleft>-q) = -p*-q\"\nbegin"], ["", "lemma pre_one:\n  \"1\\<guillemotleft>-p = -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) \\<guillemotleft> - p = - p", "by (metis pre_closed pre_test_test tests_dual.sba_dual.one_def tests_dual.sup_left_unit)"], ["", "lemma pre_import:\n  \"-p*(x\\<guillemotleft>-q) = -p*(-p*x\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (x \\<guillemotleft> - q) = - p * (- p * x \\<guillemotleft> - q)", "by (metis pre_closed pre_seq pre_test_test)"], ["", "lemma pre_import_composition:\n  \"-p*(-p*x*y\\<guillemotleft>-q) = -p*(x\\<guillemotleft>y\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (- p * x * y \\<guillemotleft> - q) =\n    - p * (x \\<guillemotleft> y \\<guillemotleft> - q)", "by (metis pre_closed pre_seq pre_import)"], ["", "lemma pre_import_equiv:\n  \"-p \\<le> x\\<guillemotleft>-q \\<longleftrightarrow> -p \\<le> -p*x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- p \\<le> x \\<guillemotleft> - q) =\n    (- p \\<le> - p * x \\<guillemotleft> - q)", "by (metis leq_def pre_closed pre_import)"], ["", "lemma pre_import_equiv_mult:\n  \"-p*-q \\<le> x\\<guillemotleft>-s \\<longleftrightarrow> -p*-q \\<le> -q*x\\<guillemotleft>-s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- p * - q \\<le> x \\<guillemotleft> - s) =\n    (- p * - q \\<le> - q * x \\<guillemotleft> - s)", "by (smt leq_def pre_closed sub_assoc sub_mult_closed pre_import)"], ["", "(*\nlemma pre_test_promote: \"-p\\<guillemotleft>-q = -p\\<guillemotleft>-p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=4] oops\nlemma pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=2] oops\n*)"], ["", "end"], ["", "class precondition_promote = precondition +\n  assumes pre_test_promote: \"-p\\<guillemotleft>-q = -p\\<guillemotleft>-p*-q\"\nbegin"], ["", "lemma pre_mult_test_promote:\n  \"x*-p\\<guillemotleft>-q = x*-p\\<guillemotleft>-p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x * - p \\<guillemotleft> - q = x * - p \\<guillemotleft> - p * - q", "by (metis pre_seq pre_test_promote sub_mult_closed)"], ["", "(*\nlemma pre_test_test: \"-p*(-p\\<guillemotleft>-q) = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=4] oops\nlemma pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=2] oops\n*)"], ["", "end"], ["", "class precondition_test_box = precondition +\n  assumes pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\"\nbegin"], ["", "lemma pre_test_neg:\n  \"--p*(-p\\<guillemotleft>-q) = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<guillemotleft> - q) = - - p", "by (simp add: pre_test)"], ["", "lemma pre_bot:\n  \"bot\\<guillemotleft>-q = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<guillemotleft> - q = (1::'a)", "by (metis pre_test tests_dual.sba_dual.one_def tests_dual.sba_dual.sup_left_zero tests_dual.top_double_complement)"], ["", "lemma pre_export:\n  \"-p*x\\<guillemotleft>-q = --p\\<squnion>(x\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * x \\<guillemotleft> - q = - - p \\<squnion> (x \\<guillemotleft> - q)", "by (metis pre_closed pre_seq pre_test)"], ["", "lemma pre_neg_mult:\n  \"--p \\<le> -p*x\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p \\<le> - p * x \\<guillemotleft> - q", "by (metis leq_def pre_closed pre_seq pre_test_neg)"], ["", "lemma pre_test_test_same:\n  \"-p\\<guillemotleft>-p = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> - p = (1::'a)", "using pre_test tests_dual.sba_dual.less_eq_sup_top tests_dual.sba_dual.reflexive"], ["proof (prove)\nusing this:\n  - ?p \\<guillemotleft> - ?q = - - ?p \\<squnion> - ?q\n  (- ?x \\<le> - ?y) = (- - ?x \\<squnion> - ?y = (1::'a))\n  - ?x \\<le> - ?x\n\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> - p = (1::'a)", "by auto"], ["", "lemma test_below_pre_test_mult:\n  \"-q \\<le> -p\\<guillemotleft>-p*-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<guillemotleft> - p * - q", "by (metis pre_test tests_dual.sba_dual.reflexive tests_dual.sba_dual.shunting tests_dual.sub_sup_closed)"], ["", "lemma test_below_pre_test:\n  \"-q \\<le> -p\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - q \\<le> - p \\<guillemotleft> - q", "by (simp add: pre_test tests_dual.sba_dual.upper_bound_right)"], ["", "lemma test_below_pre_test_2:\n  \"--p \\<le> -p\\<guillemotleft>-q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p \\<le> - p \\<guillemotleft> - q", "by (simp add: pre_test tests_dual.sba_dual.upper_bound_left)"], ["", "lemma pre_test_bot:\n  \"-p\\<guillemotleft>bot = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> bot = - - p", "by (metis pre_test tests_dual.sba_dual.sup_right_unit tests_dual.top_double_complement)"], ["", "lemma pre_test_one:\n  \"-p\\<guillemotleft>1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> (1::'a) = (1::'a)", "by (metis pre_seq pre_bot tests_dual.sup_right_zero)"], ["", "subclass precondition_test_test"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.precondition_test_test (\\<guillemotleft>) (1::'a) (*) uminus\n     (\\<squnion>) bot (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q. - p * (- p \\<guillemotleft> - q) = - p * - q", "by (simp add: pre_test tests_dual.sup_complement_intro)"], ["", "subclass precondition_promote"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.precondition_promote (\\<guillemotleft>) (1::'a) (*) uminus\n     (\\<squnion>) bot (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q. - p \\<guillemotleft> - q = - p \\<guillemotleft> - p * - q", "by (metis pre_test tests_dual.sba_dual.sub_commutative tests_dual.sub_sup_closed tests_dual.inf_complement_intro)"], ["", "(*\nlemma pre_test: \"-p\\<guillemotleft>-q = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" oops\nlemma pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=2] oops\n*)"], ["", "end"], ["", "class precondition_test_diamond = precondition +\n  assumes pre_test: \"-p\\<guillemotleft>-q = -p*-q\"\nbegin"], ["", "lemma pre_test_neg:\n  \"--p*(-p\\<guillemotleft>-q) = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<guillemotleft> - q) = bot", "by (simp add: pre_test tests_dual.sub_associative tests_dual.sub_commutative)"], ["", "lemma pre_bot:\n  \"bot\\<guillemotleft>-q = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<guillemotleft> - q = bot", "by (metis pre_test tests_dual.sup_left_zero tests_dual.top_double_complement)"], ["", "lemma pre_export:\n  \"-p*x\\<guillemotleft>-q = -p*(x\\<guillemotleft>-q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * x \\<guillemotleft> - q = - p * (x \\<guillemotleft> - q)", "by (metis pre_closed pre_seq pre_test)"], ["", "lemma pre_neg_mult:\n  \"-p*x\\<guillemotleft>-q \\<le> -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * x \\<guillemotleft> - q \\<le> - p", "by (metis pre_closed pre_export tests_dual.upper_bound_left)"], ["", "lemma pre_test_test_same:\n  \"-p\\<guillemotleft>-p = -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> - p = - p", "by (simp add: pre_test)"], ["", "lemma test_above_pre_test_plus:\n  \"--p\\<guillemotleft>-p\\<squnion>-q \\<le> -q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p \\<guillemotleft> - p \\<squnion> - q \\<le> - q", "using pre_test tests_dual.sba_dual.inf_complement_intro tests_dual.sub_commutative tests_dual.sub_inf_def tests_dual.upper_bound_left"], ["proof (prove)\nusing this:\n  - ?p \\<guillemotleft> - ?q = - ?p * - ?q\n  (- ?x \\<squnion> - ?y) * - - ?x = - ?y * - - ?x\n  - ?x * - ?y = - ?y * - ?x\n  - ?x \\<squnion> - ?y = - (- - ?x * - - ?y)\n  - ?x * - ?y \\<le> - ?x\n\ngoal (1 subgoal):\n 1. - - p \\<guillemotleft> - p \\<squnion> - q \\<le> - q", "by auto"], ["", "lemma test_above_pre_test:\n  \"-p\\<guillemotleft>-q \\<le> -q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> - q \\<le> - q", "by (simp add: pre_test tests_dual.upper_bound_right)"], ["", "lemma test_above_pre_test_2:\n  \"-p\\<guillemotleft>-q \\<le> -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> - q \\<le> - p", "by (simp add: pre_test tests_dual.upper_bound_left)"], ["", "lemma pre_test_bot:\n  \"-p\\<guillemotleft>bot = bot\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> bot = bot", "by (metis pre_test tests_dual.sup_right_zero tests_dual.top_double_complement)"], ["", "lemma pre_test_one:\n  \"-p\\<guillemotleft>1 = -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<guillemotleft> (1::'a) = - p", "by (metis pre_test tests_dual.complement_top tests_dual.sup_right_unit)"], ["", "subclass precondition_test_test"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.precondition_test_test (\\<guillemotleft>) (1::'a) (*) uminus\n     (\\<squnion>) bot (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q. - p * (- p \\<guillemotleft> - q) = - p * - q", "by (simp add: pre_test tests_dual.sub_associative)"], ["", "subclass precondition_promote"], ["proof (prove)\ngoal (1 subgoal):\n 1. class.precondition_promote (\\<guillemotleft>) (1::'a) (*) uminus\n     (\\<squnion>) bot (\\<le>) (<)", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p q. - p \\<guillemotleft> - q = - p \\<guillemotleft> - p * - q", "by (metis pre_seq pre_test tests_dual.sup_idempotent)"], ["", "(*\nlemma pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=6] oops\nlemma pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=2] oops\n*)"], ["", "end"], ["", "class precondition_distr_mult = precondition +\n  assumes pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\"\nbegin"], ["", "(*\nlemma pre_test_test: \"-p*(-p\\<guillemotleft>-q) = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test_promote: \"-p\\<guillemotleft>-q = -p\\<guillemotleft>-p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=2] oops\n*)"], ["", "end"], ["", "class precondition_distr_plus = precondition +\n  assumes pre_distr_plus: \"x\\<guillemotleft>-p\\<squnion>-q = (x\\<guillemotleft>-p)\\<squnion>(x\\<guillemotleft>-q)\"\nbegin"], ["", "(*\nlemma pre_test_test: \"-p*(-p\\<guillemotleft>-q) = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test_promote: \"-p\\<guillemotleft>-q = -p\\<guillemotleft>-p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = --p\\<squnion>-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_test: \"-p\\<guillemotleft>-q = -p*-q\" nitpick [expect=genuine,card=2] oops\nlemma pre_distr_mult: \"x\\<guillemotleft>-p*-q = (x\\<guillemotleft>-p)*(x\\<guillemotleft>-q)\" nitpick [expect=genuine,card=4] oops\n*)"], ["", "end"], ["", "end"]]}