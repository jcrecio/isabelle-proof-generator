{"file_name": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras/Test_Iterings.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Correctness_Algebras", "problem_names": ["lemma wnf_lemma_5:\n  \"(-p \\<squnion> -q) * (-q * x \\<squnion> --q * y) = -q * x \\<squnion> --q * -p * y\"", "lemma test_case_split_left_equal:\n  \"-z * x = -z * y \\<Longrightarrow> --z * x = --z * y \\<Longrightarrow> x = y\"", "lemma preserves_equation:\n  \"-y * x \\<le> x * -y \\<longleftrightarrow> -y * x = -y * x * -y\"", "lemma preserve_test:\n  \"-y * x \\<le> x * -y \\<Longrightarrow> -y * x\\<^sup>\\<circ> = -y * x\\<^sup>\\<circ> * -y\"", "lemma import_test:\n  \"-y * x \\<le> x * -y \\<Longrightarrow> -y * x\\<^sup>\\<circ> = -y * (-y * x)\\<^sup>\\<circ>\"", "lemma ite_neg:\n  \"x \\<lhd> -p \\<rhd> y = y \\<lhd> --p \\<rhd> x\"", "lemma ite_import_true:\n  \"x \\<lhd> -p \\<rhd> y = -p * x \\<lhd> -p \\<rhd> y\"", "lemma ite_import_false:\n  \"x \\<lhd> -p \\<rhd> y = x \\<lhd> -p \\<rhd> --p * y\"", "lemma ite_import_true_false:\n  \"x \\<lhd> -p \\<rhd> y = -p * x \\<lhd> -p \\<rhd> --p * y\"", "lemma ite_context_true:\n  \"-p * (x \\<lhd> -p \\<rhd> y) = -p * x\"", "lemma ite_context_false:\n  \"--p * (x \\<lhd> -p \\<rhd> y) = --p * y\"", "lemma ite_context_import:\n  \"-p * (x \\<lhd> -q \\<rhd> y) = -p * (x \\<lhd> -p * -q \\<rhd> y)\"", "lemma ite_conjunction:\n  \"(x \\<lhd> -q \\<rhd> y) \\<lhd> -p \\<rhd> y = x \\<lhd> -p * -q \\<rhd> y\"", "lemma ite_disjunction:\n  \"x \\<lhd> -p \\<rhd> (x \\<lhd> -q \\<rhd> y) = x \\<lhd> -p \\<squnion> -q \\<rhd> y\"", "lemma wnf_lemma_6:\n  \"(-p \\<squnion> -q) * (x \\<lhd> --p * -q \\<rhd> y) = (-p \\<squnion> -q) * (y \\<lhd> -p \\<rhd> x)\"", "lemma it_ite:\n  \"-p \\<rhd> x = x \\<lhd> -p \\<rhd> 1\"", "lemma it_neg:\n  \"--p \\<rhd> x = 1 \\<lhd> -p \\<rhd> x\"", "lemma it_import_true:\n  \"-p \\<rhd> x = -p \\<rhd> -p * x\"", "lemma it_context_true:\n  \"-p * (-p \\<rhd> x) = -p * x\"", "lemma it_context_false:\n  \"--p * (-p \\<rhd> x) = --p\"", "lemma while_unfold_it:\n  \"-p \\<star> x = -p \\<rhd> x * (-p \\<star> x)\"", "lemma while_context_false:\n  \"--p * (-p \\<star> x) = --p\"", "lemma while_context_true:\n  \"-p * (-p \\<star> x) = -p * x * (-p \\<star> x)\"", "lemma while_zero:\n  \"bot \\<star> x = 1\"", "lemma wnf_lemma_7:\n  \"1 * (bot \\<star> 1) = 1\"", "lemma while_import_condition:\n  \"-p \\<star> x = -p \\<star> -p * x\"", "lemma while_import_condition_2:\n  \"-p * -q \\<star> x = -p * -q \\<star> -p * x\"", "lemma wnf_lemma_8:\n  \"-r * (-p \\<squnion> --p * -q) \\<star> (x \\<lhd> --p * -q \\<rhd> y) = -r * (-p \\<squnion> -q) \\<star> (y \\<lhd> -p \\<rhd> x)\"", "lemma split_merge_loops:\n  assumes \"--p * y \\<le> y * --p\"\n    shows \"(-p \\<squnion> -q) \\<star> (x \\<lhd> -p \\<rhd> y) = (-p \\<star> x) * (-q \\<star> y)\"", "lemma assigns_same:\n  \"assigns x (-p) (-p)\"", "lemma preserves_equation_test:\n  \"preserves x (-p) \\<longleftrightarrow> -p * x = -p * x * -p \\<and> --p * x = --p * x * --p\"", "lemma preserves_test:\n  \"preserves (-q) (-p)\"", "lemma preserves_zero:\n  \"preserves bot (-p)\"", "lemma preserves_one:\n  \"preserves 1 (-p)\"", "lemma preserves_sup:\n  \"preserves x (-p) \\<Longrightarrow> preserves y (-p) \\<Longrightarrow> preserves (x \\<squnion> y) (-p)\"", "lemma preserves_mult:\n  \"preserves x (-p) \\<Longrightarrow> preserves y (-p) \\<Longrightarrow> preserves (x * y) (-p)\"", "lemma preserves_ite:\n  \"preserves x (-p) \\<Longrightarrow> preserves y (-p) \\<Longrightarrow> preserves (x \\<lhd> -q \\<rhd> y) (-p)\"", "lemma preserves_it:\n  \"preserves x (-p) \\<Longrightarrow> preserves (-q \\<rhd> x) (-p)\"", "lemma preserves_circ:\n  \"preserves x (-p) \\<Longrightarrow> preserves (x\\<^sup>\\<circ>) (-p)\"", "lemma preserves_while:\n  \"preserves x (-p) \\<Longrightarrow> preserves (-q \\<star> x) (-p)\"", "lemma preserves_test_neg:\n  \"preserves x (-p) \\<Longrightarrow> preserves x (--p)\"", "lemma preserves_import_circ:\n  \"preserves x (-p) \\<Longrightarrow> -p * x\\<^sup>\\<circ> = -p * (-p * x)\\<^sup>\\<circ>\"", "lemma preserves_simulate:\n  \"preserves x (-p) \\<Longrightarrow> -p * x\\<^sup>\\<circ> = -p * x\\<^sup>\\<circ> * -p\"", "lemma preserves_import_ite:\n  assumes \"preserves z (-p)\"\n    shows \"z * (x \\<lhd> -p \\<rhd> y) = z * x \\<lhd> -p \\<rhd> z * y\"", "lemma preserves_while_context:\n  \"preserves x (-p) \\<Longrightarrow> -p * (-q \\<star> x) = -p * (-p * -q \\<star> x)\"", "lemma while_ite_context_false:\n  assumes \"preserves y (-p)\"\n    shows \"--p * (-p \\<squnion> -q \\<star> (x \\<lhd> -p \\<rhd> y)) = --p * (-q \\<star> y)\"", "lemma while_ite_norm:\n  assumes \"assigns z (-p) (-q)\"\n      and \"preserves x1 (-q)\"\n      and \"preserves x2 (-q)\"\n      and \"preserves y1 (-q)\"\n      and \"preserves y2 (-q)\"\n    shows \"z * (x1 * (-r1 \\<star> y1) \\<lhd> -p \\<rhd> x2 * (-r2 \\<star> y2)) = z * (x1 \\<lhd> -q \\<rhd> x2) * ((-q * -r1 \\<squnion> --q * -r2) \\<star> (y1 \\<lhd> -q \\<rhd> y2))\"", "lemma while_it_norm:\n  \"assigns z (-p) (-q) \\<Longrightarrow> preserves x (-q) \\<Longrightarrow> preserves y (-q) \\<Longrightarrow> z * (-p \\<rhd> x * (-r \\<star> y)) = z * (-q \\<rhd> x) * (-q * -r \\<star> y)\"", "lemma while_else_norm:\n  \"assigns z (-p) (-q) \\<Longrightarrow> preserves x (-q) \\<Longrightarrow> preserves y (-q) \\<Longrightarrow> z * (1 \\<lhd> -p \\<rhd> x * (-r \\<star> y)) = z * (1 \\<lhd> -q \\<rhd> x) * (--q * -r \\<star> y)\"", "lemma while_while_pre_norm:\n  \"-p \\<star> x * (-q \\<star> y) = -p \\<rhd> x * (-p \\<squnion> -q \\<star> (y \\<lhd> -q \\<rhd> x))\"", "lemma while_while_norm:\n  \"assigns z (-p) (-r) \\<Longrightarrow> preserves x (-r) \\<Longrightarrow> preserves y (-r) \\<Longrightarrow> z * (-p \\<star> x * (-q \\<star> y)) = z * (-r \\<rhd> x) * (-r * (-p \\<squnion> -q) \\<star> (y \\<lhd> -q \\<rhd> x))\"", "lemma while_seq_replace:\n  \"assigns z (-p) (-q) \\<Longrightarrow> z * (-p \\<star> x * z) * y = z * (-q \\<star> x * z) * y\"", "lemma while_ite_replace:\n  \"assigns z (-p) (-q) \\<Longrightarrow> z * (x \\<lhd> -p \\<rhd> y) = z * (x \\<lhd> -q \\<rhd> y)\"", "lemma while_post_norm_an:\n  assumes \"preserves y (-p)\"\n    shows \"(-p \\<star> x) * y = y \\<lhd> --p \\<rhd> (-p \\<star> x * (--p \\<rhd> y))\"", "lemma while_post_norm:\n  \"preserves y (-p) \\<Longrightarrow> (-p \\<star> x) * y = -p \\<star> x * (1 \\<lhd> -p \\<rhd> y) \\<lhd> -p \\<rhd> y\"", "lemma wnf_lemma_9:\n  assumes \"assigns z (-p) (-q)\"\n      and \"preserves x1 (-q)\"\n      and \"preserves y1 (-q)\"\n      and \"preserves x2 (-q)\"\n      and \"preserves y2 (-q)\"\n      and \"preserves x2 (-p)\"\n      and \"preserves y2 (-p)\"\n    shows \"z * (x1 \\<lhd> -q \\<rhd> x2) * (-q * -p \\<squnion> -r \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2)) = z * (x1 \\<lhd> -p \\<rhd> x2) * (-p \\<squnion> -r \\<star> (y1 \\<lhd> -p \\<rhd> y2))\"", "lemma while_seq_norm:\n  assumes \"assigns z1 (-r1) (-q)\"\n      and \"preserves x2 (-q)\"\n      and \"preserves y2 (-q)\"\n      and \"preserves z2 (-q)\"\n      and \"z1 * z2 = z2 * z1\"\n      and \"assigns z2 (-q) (-r)\"\n      and \"preserves y1 (-r)\"\n      and \"preserves z1 (-r)\"\n      and \"preserves x2 (-r)\"\n      and \"preserves y2 (-r)\"\n    shows \"x1 * z1 * z2 * (-r1 \\<star> y1 * z1) * x2 * (-r2 \\<star> y2) = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> x2) * (-q \\<squnion> -r2 \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2))\""], "translations": [["", "lemma wnf_lemma_5:\n  \"(-p \\<squnion> -q) * (-q * x \\<squnion> --q * y) = -q * x \\<squnion> --q * -p * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- p \\<squnion> - q) * (- q * x \\<squnion> - - q * y) =\n    - q * x \\<squnion> - - q * - p * y", "by (smt (z3) mult_left_dist_sup sup_commute tests_dual.sba_dual.sub_sup_closed tests_dual.sba_dual.sup_complement_intro tests_dual.sba_dual.sup_idempotent tests_dual.sup_idempotent mult_assoc tests_dual.wnf_lemma_3)"], ["", "lemma test_case_split_left_equal:\n  \"-z * x = -z * y \\<Longrightarrow> --z * x = --z * y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>- z * x = - z * y; - - z * x = - - z * y\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (metis case_split_left_equal tests_dual.inf_complement)"], ["", "lemma preserves_equation:\n  \"-y * x \\<le> x * -y \\<longleftrightarrow> -y * x = -y * x * -y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- y * x \\<le> x * - y) = (- y * x = - y * x * - y)", "apply (rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. - y * x \\<le> x * - y \\<Longrightarrow> - y * x = - y * x * - y\n 2. - y * x = - y * x * - y \\<Longrightarrow> - y * x \\<le> x * - y", "apply (simp add: test_preserves_equation tests_dual.sub_bot_least)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - y * x = - y * x * - y \\<Longrightarrow> - y * x \\<le> x * - y", "by (simp add: test_preserves_equation tests_dual.sub_bot_least)"], ["", "text \\<open>Theorem 5\\<close>"], ["", "lemma preserve_test:\n  \"-y * x \\<le> x * -y \\<Longrightarrow> -y * x\\<^sup>\\<circ> = -y * x\\<^sup>\\<circ> * -y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - y * x \\<le> x * - y \\<Longrightarrow>\n    - y * x\\<^sup>\\<circ> = - y * x\\<^sup>\\<circ> * - y", "using circ_simulate preserves_equation"], ["proof (prove)\nusing this:\n  ?z * ?x \\<le> ?y * ?z \\<longrightarrow>\n  ?z * ?x\\<^sup>\\<circ> \\<le> ?y\\<^sup>\\<circ> * ?z\n  (- ?y * ?x \\<le> ?x * - ?y) = (- ?y * ?x = - ?y * ?x * - ?y)\n\ngoal (1 subgoal):\n 1. - y * x \\<le> x * - y \\<Longrightarrow>\n    - y * x\\<^sup>\\<circ> = - y * x\\<^sup>\\<circ> * - y", "by blast"], ["", "text \\<open>Theorem 5\\<close>"], ["", "lemma import_test:\n  \"-y * x \\<le> x * -y \\<Longrightarrow> -y * x\\<^sup>\\<circ> = -y * (-y * x)\\<^sup>\\<circ>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - y * x \\<le> x * - y \\<Longrightarrow>\n    - y * x\\<^sup>\\<circ> = - y * (- y * x)\\<^sup>\\<circ>", "by (simp add: circ_import tests_dual.sub_bot_least)"], ["", "definition ite :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"_ \\<lhd> _ \\<rhd> _\" [58,58,58] 57)\n  where \"x \\<lhd> p \\<rhd> y \\<equiv> p * x \\<squnion> -p * y\""], ["", "definition it :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (\"_ \\<rhd> _\" [58,58] 57)\n  where \"p \\<rhd> x \\<equiv> p * x \\<squnion> -p\""], ["", "(*\ndefinition while :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a\" (infixr \"\\<star>\" 59)\n  where \"p \\<star> y \\<equiv> (p * y)\\<^sup>\\<circ> * -p\"\n*)"], ["", "definition assigns :: \"'a \\<Rightarrow> 'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  where \"assigns x p q \\<equiv> x = x * (p * q \\<squnion> -p * -q)\""], ["", "definition preserves :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  where \"preserves x p \\<equiv> p * x \\<le> x * p \\<and> -p * x \\<le> x * -p\""], ["", "lemma ite_neg:\n  \"x \\<lhd> -p \\<rhd> y = y \\<lhd> --p \\<rhd> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<lhd> - p \\<rhd> y = y \\<lhd> - - p \\<rhd> x", "by (simp add: ite_def sup_commute)"], ["", "lemma ite_import_true:\n  \"x \\<lhd> -p \\<rhd> y = -p * x \\<lhd> -p \\<rhd> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<lhd> - p \\<rhd> y = - p * x \\<lhd> - p \\<rhd> y", "by (metis ite_def tests_dual.sup_idempotent mult_assoc)"], ["", "lemma ite_import_false:\n  \"x \\<lhd> -p \\<rhd> y = x \\<lhd> -p \\<rhd> --p * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<lhd> - p \\<rhd> y = x \\<lhd> - p \\<rhd> - - p * y", "by (metis ite_import_true ite_neg)"], ["", "lemma ite_import_true_false:\n  \"x \\<lhd> -p \\<rhd> y = -p * x \\<lhd> -p \\<rhd> --p * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<lhd> - p \\<rhd> y = - p * x \\<lhd> - p \\<rhd> - - p * y", "using ite_import_false ite_import_true"], ["proof (prove)\nusing this:\n  ?x \\<lhd> - ?p \\<rhd> ?y = ?x \\<lhd> - ?p \\<rhd> - - ?p * ?y\n  ?x \\<lhd> - ?p \\<rhd> ?y = - ?p * ?x \\<lhd> - ?p \\<rhd> ?y\n\ngoal (1 subgoal):\n 1. x \\<lhd> - p \\<rhd> y = - p * x \\<lhd> - p \\<rhd> - - p * y", "by auto"], ["", "lemma ite_context_true:\n  \"-p * (x \\<lhd> -p \\<rhd> y) = -p * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - p \\<rhd> y) = - p * x", "by (metis sup_monoid.add_0_left tests_dual.sup_right_zero tests_dual.top_double_complement wnf_lemma_5 sup_bot_right ite_def mult_assoc mult_left_zero)"], ["", "lemma ite_context_false:\n  \"--p * (x \\<lhd> -p \\<rhd> y) = --p * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (x \\<lhd> - p \\<rhd> y) = - - p * y", "by (metis ite_neg ite_context_true)"], ["", "lemma ite_context_import:\n  \"-p * (x \\<lhd> -q \\<rhd> y) = -p * (x \\<lhd> -p * -q \\<rhd> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (x \\<lhd> - q \\<rhd> y) = - p * (x \\<lhd> - p * - q \\<rhd> y)", "by (smt ite_def mult_assoc tests_dual.sup_complement_intro tests_dual.sub_sup_demorgan tests_dual.sup_idempotent mult_left_dist_sup)"], ["", "lemma ite_conjunction:\n  \"(x \\<lhd> -q \\<rhd> y) \\<lhd> -p \\<rhd> y = x \\<lhd> -p * -q \\<rhd> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<lhd> - q \\<rhd> y) \\<lhd> - p \\<rhd> y =\n    x \\<lhd> - p * - q \\<rhd> y", "by (smt sup_assoc sup_commute ite_def mult_assoc tests_dual.sub_sup_demorgan mult_left_dist_sup mult_right_dist_sup tests_dual.inf_complement_intro)"], ["", "lemma ite_disjunction:\n  \"x \\<lhd> -p \\<rhd> (x \\<lhd> -q \\<rhd> y) = x \\<lhd> -p \\<squnion> -q \\<rhd> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<lhd> - p \\<rhd> (x \\<lhd> - q \\<rhd> y) =\n    x \\<lhd> - p \\<squnion> - q \\<rhd> y", "by (smt (z3) tests_dual.sba_dual.sub_sup_closed sup_assoc ite_def mult_assoc tests_dual.sup_complement_intro tests_dual.sub_sup_demorgan mult_left_dist_sup mult_right_dist_sup tests_dual.inf_demorgan)"], ["", "lemma wnf_lemma_6:\n  \"(-p \\<squnion> -q) * (x \\<lhd> --p * -q \\<rhd> y) = (-p \\<squnion> -q) * (y \\<lhd> -p \\<rhd> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- p \\<squnion> - q) * (x \\<lhd> - - p * - q \\<rhd> y) =\n    (- p \\<squnion> - q) * (y \\<lhd> - p \\<rhd> x)", "by (smt (z3) ite_conjunction ite_context_false ite_context_true semiring.distrib_right tests_dual.sba_dual.inf_cases_2 tests_dual.sba_dual.sub_inf_def tests_dual.sba_dual.sup_complement_intro tests_dual.sub_complement)"], ["", "lemma it_ite:\n  \"-p \\<rhd> x = x \\<lhd> -p \\<rhd> 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<rhd> x = x \\<lhd> - p \\<rhd> (1::'a)", "by (simp add: it_def ite_def)"], ["", "lemma it_neg:\n  \"--p \\<rhd> x = 1 \\<lhd> -p \\<rhd> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p \\<rhd> x = (1::'a) \\<lhd> - p \\<rhd> x", "using it_ite ite_neg"], ["proof (prove)\nusing this:\n  - ?p \\<rhd> ?x = ?x \\<lhd> - ?p \\<rhd> (1::'a)\n  ?x \\<lhd> - ?p \\<rhd> ?y = ?y \\<lhd> - - ?p \\<rhd> ?x\n\ngoal (1 subgoal):\n 1. - - p \\<rhd> x = (1::'a) \\<lhd> - p \\<rhd> x", "by auto"], ["", "lemma it_import_true:\n  \"-p \\<rhd> x = -p \\<rhd> -p * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<rhd> x = - p \\<rhd> - p * x", "using it_ite ite_import_true"], ["proof (prove)\nusing this:\n  - ?p \\<rhd> ?x = ?x \\<lhd> - ?p \\<rhd> (1::'a)\n  ?x \\<lhd> - ?p \\<rhd> ?y = - ?p * ?x \\<lhd> - ?p \\<rhd> ?y\n\ngoal (1 subgoal):\n 1. - p \\<rhd> x = - p \\<rhd> - p * x", "by auto"], ["", "lemma it_context_true:\n  \"-p * (-p \\<rhd> x) = -p * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (- p \\<rhd> x) = - p * x", "by (simp add: it_ite ite_context_true)"], ["", "lemma it_context_false:\n  \"--p * (-p \\<rhd> x) = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<rhd> x) = - - p", "using it_ite ite_context_false"], ["proof (prove)\nusing this:\n  - ?p \\<rhd> ?x = ?x \\<lhd> - ?p \\<rhd> (1::'a)\n  - - ?p * (?x \\<lhd> - ?p \\<rhd> ?y) = - - ?p * ?y\n\ngoal (1 subgoal):\n 1. - - p * (- p \\<rhd> x) = - - p", "by force"], ["", "lemma while_unfold_it:\n  \"-p \\<star> x = -p \\<rhd> x * (-p \\<star> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x = - p \\<rhd> x * (- p \\<star> x)", "by (metis circ_loop_fixpoint it_def mult_assoc while_def)"], ["", "lemma while_context_false:\n  \"--p * (-p \\<star> x) = --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<star> x) = - - p", "by (metis it_context_false while_unfold_it)"], ["", "lemma while_context_true:\n  \"-p * (-p \\<star> x) = -p * x * (-p \\<star> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (- p \\<star> x) = - p * x * (- p \\<star> x)", "by (metis it_context_true mult_assoc while_unfold_it)"], ["", "lemma while_zero:\n  \"bot \\<star> x = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bot \\<star> x = (1::'a)", "by (metis circ_zero mult_left_one mult_left_zero one_def while_def)"], ["", "lemma wnf_lemma_7:\n  \"1 * (bot \\<star> 1) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (1::'a) * (bot \\<star> (1::'a)) = (1::'a)", "by (simp add: while_zero)"], ["", "lemma while_import_condition:\n  \"-p \\<star> x = -p \\<star> -p * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x = - p \\<star> - p * x", "by (metis mult_assoc tests_dual.sup_idempotent while_def)"], ["", "lemma while_import_condition_2:\n  \"-p * -q \\<star> x = -p * -q \\<star> -p * x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q \\<star> x = - p * - q \\<star> - p * x", "by (metis mult_assoc tests_dual.sup_idempotent sub_comm while_def)"], ["", "lemma wnf_lemma_8:\n  \"-r * (-p \\<squnion> --p * -q) \\<star> (x \\<lhd> --p * -q \\<rhd> y) = -r * (-p \\<squnion> -q) \\<star> (y \\<lhd> -p \\<rhd> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - r * (- p \\<squnion> - - p * - q) \\<star>\n    (x \\<lhd> - - p * - q \\<rhd> y) =\n    - r * (- p \\<squnion> - q) \\<star> (y \\<lhd> - p \\<rhd> x)", "by (metis mult_assoc while_def wnf_lemma_6 tests_dual.sba_dual.sup_complement_intro)"], ["", "text \\<open>Theorem 6 - see Theorem 31 on page 329 of Back and von Wright, Acta Informatica 36:295-334, 1999\\<close>"], ["", "lemma split_merge_loops:\n  assumes \"--p * y \\<le> y * --p\"\n    shows \"(-p \\<squnion> -q) \\<star> (x \\<lhd> -p \\<rhd> y) = (-p \\<star> x) * (-q \\<star> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n    (- p \\<star> x) * (- q \\<star> y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n    (- p \\<star> x) * (- q \\<star> y)", "have \"-p \\<squnion> -q \\<star> (x \\<lhd> -p \\<rhd> y) = (-p * x \\<squnion> --p * -q * y)\\<^sup>\\<circ> * --p * --q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n    (- p * x \\<squnion> - - p * - q * y)\\<^sup>\\<circ> * - - p * - - q", "by (smt ite_def mult_assoc sup_commute tests_dual.inf_demorgan while_def wnf_lemma_5)"], ["proof (state)\nthis:\n  - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n  (- p * x \\<squnion> - - p * - q * y)\\<^sup>\\<circ> * - - p * - - q\n\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n    (- p \\<star> x) * (- q \\<star> y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n  (- p * x \\<squnion> - - p * - q * y)\\<^sup>\\<circ> * - - p * - - q\n\ngoal (1 subgoal):\n 1. - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n    (- p \\<star> x) * (- q \\<star> y)", "by (smt assms circ_sup_1 circ_slide import_test mult_assoc preserves_equation sub_comm while_context_false while_def)"], ["proof (state)\nthis:\n  - p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y) =\n  (- p \\<star> x) * (- q \\<star> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma assigns_same:\n  \"assigns x (-p) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. assigns x (- p) (- p)", "by (simp add: assigns_def)"], ["", "lemma preserves_equation_test:\n  \"preserves x (-p) \\<longleftrightarrow> -p * x = -p * x * -p \\<and> --p * x = --p * x * --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) =\n    (- p * x = - p * x * - p \\<and> - - p * x = - - p * x * - - p)", "using preserves_def preserves_equation"], ["proof (prove)\nusing this:\n  preserves ?x ?p \\<equiv>\n  ?p * ?x \\<le> ?x * ?p \\<and> - ?p * ?x \\<le> ?x * - ?p\n  (- ?y * ?x \\<le> ?x * - ?y) = (- ?y * ?x = - ?y * ?x * - ?y)\n\ngoal (1 subgoal):\n 1. preserves x (- p) =\n    (- p * x = - p * x * - p \\<and> - - p * x = - - p * x * - - p)", "by auto"], ["", "lemma preserves_test:\n  \"preserves (-q) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves (- q) (- p)", "using tests_dual.sub_commutative preserves_def"], ["proof (prove)\nusing this:\n  - ?x * - ?y = - ?y * - ?x\n  preserves ?x ?p \\<equiv>\n  ?p * ?x \\<le> ?x * ?p \\<and> - ?p * ?x \\<le> ?x * - ?p\n\ngoal (1 subgoal):\n 1. preserves (- q) (- p)", "by auto"], ["", "lemma preserves_zero:\n  \"preserves bot (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves bot (- p)", "using tests_dual.sba_dual.sub_bot_def preserves_test"], ["proof (prove)\nusing this:\n  bot = - (THE x. \\<forall>y. x = - y \\<squnion> - - y)\n  preserves (- ?q) (- ?p)\n\ngoal (1 subgoal):\n 1. preserves bot (- p)", "by blast"], ["", "lemma preserves_one:\n  \"preserves 1 (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves (1::'a) (- p)", "using preserves_def"], ["proof (prove)\nusing this:\n  preserves ?x ?p \\<equiv>\n  ?p * ?x \\<le> ?x * ?p \\<and> - ?p * ?x \\<le> ?x * - ?p\n\ngoal (1 subgoal):\n 1. preserves (1::'a) (- p)", "by force"], ["", "lemma preserves_sup:\n  \"preserves x (-p) \\<Longrightarrow> preserves y (-p) \\<Longrightarrow> preserves (x \\<squnion> y) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preserves x (- p); preserves y (- p)\\<rbrakk>\n    \\<Longrightarrow> preserves (x \\<squnion> y) (- p)", "by (simp add: mult_left_dist_sup mult_right_dist_sup preserves_equation_test)"], ["", "lemma preserves_mult:\n  \"preserves x (-p) \\<Longrightarrow> preserves y (-p) \\<Longrightarrow> preserves (x * y) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preserves x (- p); preserves y (- p)\\<rbrakk>\n    \\<Longrightarrow> preserves (x * y) (- p)", "by (smt (verit, best) mult_assoc preserves_equation_test)"], ["", "lemma preserves_ite:\n  \"preserves x (-p) \\<Longrightarrow> preserves y (-p) \\<Longrightarrow> preserves (x \\<lhd> -q \\<rhd> y) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>preserves x (- p); preserves y (- p)\\<rbrakk>\n    \\<Longrightarrow> preserves (x \\<lhd> - q \\<rhd> y) (- p)", "by (simp add: ite_def preserves_mult preserves_sup preserves_test)"], ["", "lemma preserves_it:\n  \"preserves x (-p) \\<Longrightarrow> preserves (-q \\<rhd> x) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow> preserves (- q \\<rhd> x) (- p)", "by (simp add: it_ite preserves_ite preserves_one)"], ["", "lemma preserves_circ:\n  \"preserves x (-p) \\<Longrightarrow> preserves (x\\<^sup>\\<circ>) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow> preserves (x\\<^sup>\\<circ>) (- p)", "by (meson circ_simulate preserves_def)"], ["", "lemma preserves_while:\n  \"preserves x (-p) \\<Longrightarrow> preserves (-q \\<star> x) (-p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow> preserves (- q \\<star> x) (- p)", "using while_def preserves_circ preserves_mult preserves_test"], ["proof (prove)\nusing this:\n  ?p \\<star> ?y = (?p * ?y)\\<^sup>\\<circ> * - ?p\n  preserves ?x (- ?p) \\<Longrightarrow> preserves (?x\\<^sup>\\<circ>) (- ?p)\n  \\<lbrakk>preserves ?x (- ?p); preserves ?y (- ?p)\\<rbrakk>\n  \\<Longrightarrow> preserves (?x * ?y) (- ?p)\n  preserves (- ?q) (- ?p)\n\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow> preserves (- q \\<star> x) (- p)", "by auto"], ["", "lemma preserves_test_neg:\n  \"preserves x (-p) \\<Longrightarrow> preserves x (--p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow> preserves x (- - p)", "using preserves_def"], ["proof (prove)\nusing this:\n  preserves ?x ?p \\<equiv>\n  ?p * ?x \\<le> ?x * ?p \\<and> - ?p * ?x \\<le> ?x * - ?p\n\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow> preserves x (- - p)", "by auto"], ["", "lemma preserves_import_circ:\n  \"preserves x (-p) \\<Longrightarrow> -p * x\\<^sup>\\<circ> = -p * (-p * x)\\<^sup>\\<circ>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow>\n    - p * x\\<^sup>\\<circ> = - p * (- p * x)\\<^sup>\\<circ>", "using import_test preserves_def"], ["proof (prove)\nusing this:\n  - ?y * ?x \\<le> ?x * - ?y \\<Longrightarrow>\n  - ?y * ?x\\<^sup>\\<circ> = - ?y * (- ?y * ?x)\\<^sup>\\<circ>\n  preserves ?x ?p \\<equiv>\n  ?p * ?x \\<le> ?x * ?p \\<and> - ?p * ?x \\<le> ?x * - ?p\n\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow>\n    - p * x\\<^sup>\\<circ> = - p * (- p * x)\\<^sup>\\<circ>", "by blast"], ["", "lemma preserves_simulate:\n  \"preserves x (-p) \\<Longrightarrow> -p * x\\<^sup>\\<circ> = -p * x\\<^sup>\\<circ> * -p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow>\n    - p * x\\<^sup>\\<circ> = - p * x\\<^sup>\\<circ> * - p", "using preserve_test preserves_def"], ["proof (prove)\nusing this:\n  - ?y * ?x \\<le> ?x * - ?y \\<Longrightarrow>\n  - ?y * ?x\\<^sup>\\<circ> = - ?y * ?x\\<^sup>\\<circ> * - ?y\n  preserves ?x ?p \\<equiv>\n  ?p * ?x \\<le> ?x * ?p \\<and> - ?p * ?x \\<le> ?x * - ?p\n\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow>\n    - p * x\\<^sup>\\<circ> = - p * x\\<^sup>\\<circ> * - p", "by auto"], ["", "lemma preserves_import_ite:\n  assumes \"preserves z (-p)\"\n    shows \"z * (x \\<lhd> -p \\<rhd> y) = z * x \\<lhd> -p \\<rhd> z * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y", "have 1: \"-p * z * (x \\<lhd> -p \\<rhd> y) = -p * (z * x \\<lhd> -p \\<rhd> z * y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * z * (x \\<lhd> - p \\<rhd> y) =\n    - p * (z * x \\<lhd> - p \\<rhd> z * y)", "by (smt assms ite_context_true mult_assoc preserves_equation_test)"], ["proof (state)\nthis:\n  - p * z * (x \\<lhd> - p \\<rhd> y) = - p * (z * x \\<lhd> - p \\<rhd> z * y)\n\ngoal (1 subgoal):\n 1. z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y", "have \"--p * z * (x \\<lhd> -p \\<rhd> y) = --p * (z * x \\<lhd> -p \\<rhd> z * y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * z * (x \\<lhd> - p \\<rhd> y) =\n    - - p * (z * x \\<lhd> - p \\<rhd> z * y)", "by (smt (z3) assms ite_context_false mult_assoc preserves_equation_test)"], ["proof (state)\nthis:\n  - - p * z * (x \\<lhd> - p \\<rhd> y) =\n  - - p * (z * x \\<lhd> - p \\<rhd> z * y)\n\ngoal (1 subgoal):\n 1. z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y", "thus ?thesis"], ["proof (prove)\nusing this:\n  - - p * z * (x \\<lhd> - p \\<rhd> y) =\n  - - p * (z * x \\<lhd> - p \\<rhd> z * y)\n\ngoal (1 subgoal):\n 1. z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y", "using 1"], ["proof (prove)\nusing this:\n  - - p * z * (x \\<lhd> - p \\<rhd> y) =\n  - - p * (z * x \\<lhd> - p \\<rhd> z * y)\n  - p * z * (x \\<lhd> - p \\<rhd> y) = - p * (z * x \\<lhd> - p \\<rhd> z * y)\n\ngoal (1 subgoal):\n 1. z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y", "by (metis mult_assoc test_case_split_left_equal)"], ["proof (state)\nthis:\n  z * (x \\<lhd> - p \\<rhd> y) = z * x \\<lhd> - p \\<rhd> z * y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma preserves_while_context:\n  \"preserves x (-p) \\<Longrightarrow> -p * (-q \\<star> x) = -p * (-p * -q \\<star> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves x (- p) \\<Longrightarrow>\n    - p * (- q \\<star> x) = - p * (- p * - q \\<star> x)", "by (smt (verit, del_insts) mult_assoc tests_dual.sup_complement_intro tests_dual.sub_sup_demorgan preserves_import_circ preserves_mult preserves_simulate preserves_test while_def)"], ["", "lemma while_ite_context_false:\n  assumes \"preserves y (-p)\"\n    shows \"--p * (-p \\<squnion> -q \\<star> (x \\<lhd> -p \\<rhd> y)) = --p * (-q \\<star> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n    - - p * (- q \\<star> y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n    - - p * (- q \\<star> y)", "have \"--p * (-p \\<squnion> -q \\<star> (x \\<lhd> -p \\<rhd> y)) = --p * (--p * -q * y)\\<^sup>\\<circ> * -(-p \\<squnion> -q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n    - - p * (- - p * - q * y)\\<^sup>\\<circ> * - (- p \\<squnion> - q)", "by (smt (z3) assms import_test mult_assoc preserves_equation preserves_equation_test sub_comm while_def tests_dual.sba_dual.sub_sup_demorgan preserves_test split_merge_loops while_context_false)"], ["proof (state)\nthis:\n  - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n  - - p * (- - p * - q * y)\\<^sup>\\<circ> * - (- p \\<squnion> - q)\n\ngoal (1 subgoal):\n 1. - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n    - - p * (- q \\<star> y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n  - - p * (- - p * - q * y)\\<^sup>\\<circ> * - (- p \\<squnion> - q)\n\ngoal (1 subgoal):\n 1. - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n    - - p * (- q \\<star> y)", "by (metis (no_types, lifting) assms preserves_def mult.assoc split_merge_loops while_context_false)"], ["proof (state)\nthis:\n  - - p * (- p \\<squnion> - q \\<star> (x \\<lhd> - p \\<rhd> y)) =\n  - - p * (- q \\<star> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 7.1\\<close>"], ["", "lemma while_ite_norm:\n  assumes \"assigns z (-p) (-q)\"\n      and \"preserves x1 (-q)\"\n      and \"preserves x2 (-q)\"\n      and \"preserves y1 (-q)\"\n      and \"preserves y2 (-q)\"\n    shows \"z * (x1 * (-r1 \\<star> y1) \\<lhd> -p \\<rhd> x2 * (-r2 \\<star> y2)) = z * (x1 \\<lhd> -q \\<rhd> x2) * ((-q * -r1 \\<squnion> --q * -r2) \\<star> (y1 \\<lhd> -q \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "have 1: \"-(-q * -r1 \\<squnion> --q * -r2) = -q * --r1 \\<squnion> --q * --r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - (- q * - r1 \\<squnion> - - q * - r2) =\n    - q * - - r1 \\<squnion> - - q * - - r2", "by (smt (z3) tests_dual.complement_2 tests_dual.sub_sup_closed tests_dual.case_duality tests_dual.sub_sup_demorgan)"], ["proof (state)\nthis:\n  - (- q * - r1 \\<squnion> - - q * - r2) =\n  - q * - - r1 \\<squnion> - - q * - - r2\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "have \"-p * -q * x1 * (-q * -r1 * y1 \\<squnion> --q * -r2 * y2)\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2) = -p * -q * x1 * -q * (-q * (-q * -r1 * y1 \\<squnion> --q * -r2 * y2))\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q * x1 *\n    (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - p * - q * x1 * - q *\n    (- q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2)", "by (smt (verit, del_insts) assms(2,4,5) mult_assoc preserves_sup preserves_equation_test preserves_import_circ preserves_mult preserves_test)"], ["proof (state)\nthis:\n  - p * - q * x1 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * - q *\n  (- q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  - p * - q * x1 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * - q *\n  (- q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "have \"... = -p * -q * x1 * -q * (-q * -r1 * y1)\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * - q * x1 * - q *\n    (- q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - p * - q * x1 * - q * (- q * - r1 * y1)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2)", "using ite_context_true ite_def mult_assoc"], ["proof (prove)\nusing this:\n  - ?p * (?x \\<lhd> - ?p \\<rhd> ?y) = - ?p * ?x\n  ?x \\<lhd> ?p \\<rhd> ?y \\<equiv> ?p * ?x \\<squnion> - ?p * ?y\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. - p * - q * x1 * - q *\n    (- q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - p * - q * x1 * - q * (- q * - r1 * y1)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2)", "by auto"], ["proof (state)\nthis:\n  - p * - q * x1 * - q *\n  (- q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * - q * (- q * - r1 * y1)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "finally"], ["proof (chain)\npicking this:\n  - p * - q * x1 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * - q * (- q * - r1 * y1)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)", "have 2: \"-p * -q * x1 * (-q * -r1 * y1 \\<squnion> --q * -r2 * y2)\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2) = -p * -q * x1 * (-r1 * y1)\\<^sup>\\<circ> * --r1\""], ["proof (prove)\nusing this:\n  - p * - q * x1 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * - q * (- q * - r1 * y1)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. - p * - q * x1 *\n    (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - p * - q * x1 * (- r1 * y1)\\<^sup>\\<circ> * - - r1", "by (smt (verit, del_insts) assms ite_context_true ite_def mult_assoc preserves_equation_test preserves_import_circ preserves_mult preserves_simulate preserves_test)"], ["proof (state)\nthis:\n  - p * - q * x1 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * (- r1 * y1)\\<^sup>\\<circ> * - - r1\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "have \"--p * --q * x2 * (-q * -r1 * y1 \\<squnion> --q * -r2 * y2)\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2) = --p * --q * x2 * --q * (--q * (-q * -r1 * y1 \\<squnion> --q * -r2 * y2))\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * - - q * x2 *\n    (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - - p * - - q * x2 * - - q *\n    (- - q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2)", "by (smt (verit, del_insts) assms mult_assoc preserves_sup preserves_equation_test preserves_import_circ preserves_mult preserves_test preserves_test_neg)"], ["proof (state)\nthis:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * - - q *\n  (- - q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * - - q *\n  (- - q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "have \"... = --p * --q * x2 * --q * (--q * -r2 * y2)\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - - p * - - q * x2 * - - q *\n    (- - q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - - p * - - q * x2 * - - q * (- - q * - r2 * y2)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2)", "using ite_context_false ite_def mult_assoc"], ["proof (prove)\nusing this:\n  - - ?p * (?x \\<lhd> - ?p \\<rhd> ?y) = - - ?p * ?y\n  ?x \\<lhd> ?p \\<rhd> ?y \\<equiv> ?p * ?x \\<squnion> - ?p * ?y\n  ?a * ?b * ?c = ?a * (?b * ?c)\n\ngoal (1 subgoal):\n 1. - - p * - - q * x2 * - - q *\n    (- - q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - - p * - - q * x2 * - - q * (- - q * - r2 * y2)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2)", "by auto"], ["proof (state)\nthis:\n  - - p * - - q * x2 * - - q *\n  (- - q * (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2))\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * - - q * (- - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "finally"], ["proof (chain)\npicking this:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * - - q * (- - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)", "have \"--p * --q * x2 * (-q * -r1 * y1 \\<squnion> --q * -r2 * y2)\\<^sup>\\<circ> * (-q * --r1 \\<squnion> --q * --r2) = --p * --q * x2 * (-r2 * y2)\\<^sup>\\<circ> * --r2\""], ["proof (prove)\nusing this:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * - - q * (- - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2)\n\ngoal (1 subgoal):\n 1. - - p * - - q * x2 *\n    (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n    (- q * - - r1 \\<squnion> - - q * - - r2) =\n    - - p * - - q * x2 * (- r2 * y2)\\<^sup>\\<circ> * - - r2", "by (smt (verit, del_insts) assms(3,5) ite_context_false ite_def mult_assoc preserves_equation_test preserves_import_circ preserves_mult preserves_simulate preserves_test preserves_test_neg)"], ["proof (state)\nthis:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * (- r2 * y2)\\<^sup>\\<circ> * - - r2\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * (- r2 * y2)\\<^sup>\\<circ> * - - r2\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "using 1 2"], ["proof (prove)\nusing this:\n  - - p * - - q * x2 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - - p * - - q * x2 * (- r2 * y2)\\<^sup>\\<circ> * - - r2\n  - (- q * - r1 \\<squnion> - - q * - r2) =\n  - q * - - r1 \\<squnion> - - q * - - r2\n  - p * - q * x1 *\n  (- q * - r1 * y1 \\<squnion> - - q * - r2 * y2)\\<^sup>\\<circ> *\n  (- q * - - r1 \\<squnion> - - q * - - r2) =\n  - p * - q * x1 * (- r1 * y1)\\<^sup>\\<circ> * - - r1\n\ngoal (1 subgoal):\n 1. z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n    z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))", "by (smt (z3) assms(1) assigns_def mult_assoc mult_right_dist_sup while_def ite_context_false ite_context_true tests_dual.sub_commutative)"], ["proof (state)\nthis:\n  z * (x1 * (- r1 \\<star> y1) \\<lhd> - p \\<rhd> x2 * (- r2 \\<star> y2)) =\n  z * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - r1 \\<squnion> - - q * - r2 \\<star> (y1 \\<lhd> - q \\<rhd> y2))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_it_norm:\n  \"assigns z (-p) (-q) \\<Longrightarrow> preserves x (-q) \\<Longrightarrow> preserves y (-q) \\<Longrightarrow> z * (-p \\<rhd> x * (-r \\<star> y)) = z * (-q \\<rhd> x) * (-q * -r \\<star> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>assigns z (- p) (- q); preserves x (- q);\n     preserves y (- q)\\<rbrakk>\n    \\<Longrightarrow> z * (- p \\<rhd> x * (- r \\<star> y)) =\n                      z * (- q \\<rhd> x) * (- q * - r \\<star> y)", "by (metis sup_bot_right tests_dual.sup_right_zero it_context_true it_ite tests_dual.complement_bot preserves_one while_import_condition_2 while_ite_norm wnf_lemma_7)"], ["", "lemma while_else_norm:\n  \"assigns z (-p) (-q) \\<Longrightarrow> preserves x (-q) \\<Longrightarrow> preserves y (-q) \\<Longrightarrow> z * (1 \\<lhd> -p \\<rhd> x * (-r \\<star> y)) = z * (1 \\<lhd> -q \\<rhd> x) * (--q * -r \\<star> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>assigns z (- p) (- q); preserves x (- q);\n     preserves y (- q)\\<rbrakk>\n    \\<Longrightarrow> z * ((1::'a) \\<lhd> - p \\<rhd> x * (- r \\<star> y)) =\n                      z * ((1::'a) \\<lhd> - q \\<rhd> x) *\n                      (- - q * - r \\<star> y)", "by (metis sup_bot_left tests_dual.sup_right_zero ite_context_false tests_dual.complement_bot preserves_one while_import_condition_2 while_ite_norm wnf_lemma_7)"], ["", "lemma while_while_pre_norm:\n  \"-p \\<star> x * (-q \\<star> y) = -p \\<rhd> x * (-p \\<squnion> -q \\<star> (y \\<lhd> -q \\<rhd> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p \\<star> x * (- q \\<star> y) =\n    - p \\<rhd> x * (- p \\<squnion> - q \\<star> (y \\<lhd> - q \\<rhd> x))", "by (smt sup_commute circ_sup_1 circ_left_unfold circ_slide it_def ite_def mult_assoc mult_left_one mult_right_dist_sup tests_dual.inf_demorgan while_def wnf_lemma_5)"], ["", "text \\<open>Theorem 7.2\\<close>"], ["", "lemma while_while_norm:\n  \"assigns z (-p) (-r) \\<Longrightarrow> preserves x (-r) \\<Longrightarrow> preserves y (-r) \\<Longrightarrow> z * (-p \\<star> x * (-q \\<star> y)) = z * (-r \\<rhd> x) * (-r * (-p \\<squnion> -q) \\<star> (y \\<lhd> -q \\<rhd> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>assigns z (- p) (- r); preserves x (- r);\n     preserves y (- r)\\<rbrakk>\n    \\<Longrightarrow> z * (- p \\<star> x * (- q \\<star> y)) =\n                      z * (- r \\<rhd> x) *\n                      (- r * (- p \\<squnion> - q) \\<star>\n                       (y \\<lhd> - q \\<rhd> x))", "by (smt tests_dual.double_negation tests_dual.sub_sup_demorgan tests_dual.inf_demorgan preserves_ite while_it_norm while_while_pre_norm)"], ["", "lemma while_seq_replace:\n  \"assigns z (-p) (-q) \\<Longrightarrow> z * (-p \\<star> x * z) * y = z * (-q \\<star> x * z) * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. assigns z (- p) (- q) \\<Longrightarrow>\n    z * (- p \\<star> x * z) * y = z * (- q \\<star> x * z) * y", "by (smt assigns_def circ_slide mult_assoc tests_dual.wnf_lemma_1 tests_dual.wnf_lemma_2 tests_dual.wnf_lemma_3 tests_dual.wnf_lemma_4 while_def)"], ["", "lemma while_ite_replace:\n  \"assigns z (-p) (-q) \\<Longrightarrow> z * (x \\<lhd> -p \\<rhd> y) = z * (x \\<lhd> -q \\<rhd> y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. assigns z (- p) (- q) \\<Longrightarrow>\n    z * (x \\<lhd> - p \\<rhd> y) = z * (x \\<lhd> - q \\<rhd> y)", "by (smt assigns_def ite_def mult_assoc mult_left_dist_sup sub_comm tests_dual.wnf_lemma_1 tests_dual.wnf_lemma_3)"], ["", "lemma while_post_norm_an:\n  assumes \"preserves y (-p)\"\n    shows \"(-p \\<star> x) * y = y \\<lhd> --p \\<rhd> (-p \\<star> x * (--p \\<rhd> y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "have \"-p * (-p * x * (--p * y \\<squnion> -p))\\<^sup>\\<circ> * --p = -p * x * ((--p * y \\<squnion> -p) * -p * x)\\<^sup>\\<circ> * (--p * y \\<squnion> -p) * --p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n    - p * x * ((- - p * y \\<squnion> - p) * - p * x)\\<^sup>\\<circ> *\n    (- - p * y \\<squnion> - p) *\n    - - p", "by (metis circ_slide_1 while_def mult_assoc while_context_true)"], ["proof (state)\nthis:\n  - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n  - p * x * ((- - p * y \\<squnion> - p) * - p * x)\\<^sup>\\<circ> *\n  (- - p * y \\<squnion> - p) *\n  - - p\n\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "also"], ["proof (state)\nthis:\n  - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n  - p * x * ((- - p * y \\<squnion> - p) * - p * x)\\<^sup>\\<circ> *\n  (- - p * y \\<squnion> - p) *\n  - - p\n\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "have \"... = -p * x * (--p * y * bot \\<squnion> -p * x)\\<^sup>\\<circ> * --p * y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - p * x * ((- - p * y \\<squnion> - p) * - p * x)\\<^sup>\\<circ> *\n    (- - p * y \\<squnion> - p) *\n    - - p =\n    - p * x * (- - p * y * bot \\<squnion> - p * x)\\<^sup>\\<circ> * - - p * y", "by (smt assms sup_bot_right mult_assoc tests_dual.sup_complement tests_dual.sup_idempotent mult_left_zero mult_right_dist_sup preserves_equation_test sub_comm)"], ["proof (state)\nthis:\n  - p * x * ((- - p * y \\<squnion> - p) * - p * x)\\<^sup>\\<circ> *\n  (- - p * y \\<squnion> - p) *\n  - - p =\n  - p * x * (- - p * y * bot \\<squnion> - p * x)\\<^sup>\\<circ> * - - p * y\n\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "finally"], ["proof (chain)\npicking this:\n  - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n  - p * x * (- - p * y * bot \\<squnion> - p * x)\\<^sup>\\<circ> * - - p * y", "have \"-p * (-p * x * (--p * y \\<squnion> -p))\\<^sup>\\<circ> * --p = -p * x * (-p * x)\\<^sup>\\<circ> * --p * y\""], ["proof (prove)\nusing this:\n  - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n  - p * x * (- - p * y * bot \\<squnion> - p * x)\\<^sup>\\<circ> * - - p * y\n\ngoal (1 subgoal):\n 1. - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n    - p * x * (- p * x)\\<^sup>\\<circ> * - - p * y", "by (metis circ_sup_mult_zero sup_commute mult_assoc)"], ["proof (state)\nthis:\n  - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n  - p * x * (- p * x)\\<^sup>\\<circ> * - - p * y\n\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  - p * (- p * x * (- - p * y \\<squnion> - p))\\<^sup>\\<circ> * - - p =\n  - p * x * (- p * x)\\<^sup>\\<circ> * - - p * y\n\ngoal (1 subgoal):\n 1. (- p \\<star> x) * y =\n    y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)", "by (smt circ_left_unfold tests_dual.double_negation it_def ite_def mult_assoc mult_left_one mult_right_dist_sup while_def)"], ["proof (state)\nthis:\n  (- p \\<star> x) * y =\n  y \\<lhd> - - p \\<rhd> - p \\<star> x * (- - p \\<rhd> y)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_post_norm:\n  \"preserves y (-p) \\<Longrightarrow> (-p \\<star> x) * y = -p \\<star> x * (1 \\<lhd> -p \\<rhd> y) \\<lhd> -p \\<rhd> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves y (- p) \\<Longrightarrow>\n    (- p \\<star> x) * y =\n    - p \\<star> x * ((1::'a) \\<lhd> - p \\<rhd> y) \\<lhd> - p \\<rhd> y", "using it_neg ite_neg while_post_norm_an"], ["proof (prove)\nusing this:\n  - - ?p \\<rhd> ?x = (1::'a) \\<lhd> - ?p \\<rhd> ?x\n  ?x \\<lhd> - ?p \\<rhd> ?y = ?y \\<lhd> - - ?p \\<rhd> ?x\n  preserves ?y (- ?p) \\<Longrightarrow>\n  (- ?p \\<star> ?x) * ?y =\n  ?y \\<lhd> - - ?p \\<rhd> - ?p \\<star> ?x * (- - ?p \\<rhd> ?y)\n\ngoal (1 subgoal):\n 1. preserves y (- p) \\<Longrightarrow>\n    (- p \\<star> x) * y =\n    - p \\<star> x * ((1::'a) \\<lhd> - p \\<rhd> y) \\<lhd> - p \\<rhd> y", "by force"], ["", "lemma wnf_lemma_9:\n  assumes \"assigns z (-p) (-q)\"\n      and \"preserves x1 (-q)\"\n      and \"preserves y1 (-q)\"\n      and \"preserves x2 (-q)\"\n      and \"preserves y2 (-q)\"\n      and \"preserves x2 (-p)\"\n      and \"preserves y2 (-p)\"\n    shows \"z * (x1 \\<lhd> -q \\<rhd> x2) * (-q * -p \\<squnion> -r \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2)) = z * (x1 \\<lhd> -p \\<rhd> x2) * (-p \\<squnion> -r \\<star> (y1 \\<lhd> -p \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "have \"z * --p * --q * (x1 \\<lhd> -q \\<rhd> x2) * (-q * -p \\<squnion> -r \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2)) = z * --p * --q * x2 * --q * (--q * (-q * -p \\<squnion> -r) \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * - - p * - - q * x2 * - - q *\n    (- - q * (- q * - p \\<squnion> - r) \\<star>\n     (y1 \\<lhd> - q * - p \\<rhd> y2))", "by (smt (verit, del_insts) assms(3-5) tests_dual.double_negation ite_context_false mult_assoc tests_dual.sub_sup_demorgan tests_dual.inf_demorgan preserves_equation_test preserves_ite preserves_while_context)"], ["proof (state)\nthis:\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * x2 * - - q *\n  (- - q * (- q * - p \\<squnion> - r) \\<star>\n   (y1 \\<lhd> - q * - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * x2 * - - q *\n  (- - q * (- q * - p \\<squnion> - r) \\<star>\n   (y1 \\<lhd> - q * - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "have \"... = z * --p * --q * x2 * --q * (--q * -r \\<star> --q * y2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * - - p * - - q * x2 * - - q *\n    (- - q * (- q * - p \\<squnion> - r) \\<star>\n     (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * - - p * - - q * x2 * - - q * (- - q * - r \\<star> - - q * y2)", "by (smt sup_bot_left tests_dual.double_negation ite_conjunction ite_context_false mult_assoc tests_dual.sup_complement mult_left_dist_sup mult_left_zero while_import_condition_2)"], ["proof (state)\nthis:\n  z * - - p * - - q * x2 * - - q *\n  (- - q * (- q * - p \\<squnion> - r) \\<star>\n   (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * x2 * - - q * (- - q * - r \\<star> - - q * y2)\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  z * - - p * - - q * x2 * - - q *\n  (- - q * (- q * - p \\<squnion> - r) \\<star>\n   (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * x2 * - - q * (- - q * - r \\<star> - - q * y2)\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "have \"... = z * --p * --q * x2 * (-r \\<star> y2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * - - p * - - q * x2 * - - q * (- - q * - r \\<star> - - q * y2) =\n    z * - - p * - - q * x2 * (- r \\<star> y2)", "by (metis assms(4,5) mult_assoc preserves_equation_test preserves_test_neg preserves_while_context while_import_condition_2)"], ["proof (state)\nthis:\n  z * - - p * - - q * x2 * - - q * (- - q * - r \\<star> - - q * y2) =\n  z * - - p * - - q * x2 * (- r \\<star> y2)\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "finally"], ["proof (chain)\npicking this:\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * x2 * (- r \\<star> y2)", "have 1: \"z * --p * --q * (x1 \\<lhd> -q \\<rhd> x2) * (-q * -p \\<squnion> -r \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2)) = z * --p * --q * (x1 \\<lhd> -q \\<rhd> x2) * (-p \\<squnion> -r \\<star> (y1 \\<lhd> -p \\<rhd> y2))\""], ["proof (prove)\nusing this:\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * x2 * (- r \\<star> y2)\n\ngoal (1 subgoal):\n 1. z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "by (smt assms(6,7) ite_context_false mult_assoc preserves_equation_test sub_comm while_ite_context_false)"], ["proof (state)\nthis:\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "have \"z * -p * -q * (x1 \\<lhd> -q \\<rhd> x2) * (-q * -p \\<squnion> -r \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2)) = z * -p * -q * (x1 \\<lhd> -q \\<rhd> x2) * -q * (-q * (-p \\<squnion> -r) \\<star> -q * (y1 \\<lhd> -p \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) * - q *\n    (- q * (- p \\<squnion> - r) \\<star> - q * (y1 \\<lhd> - p \\<rhd> y2))", "by (smt (verit, del_insts) assms(2-5) tests_dual.double_negation ite_context_import mult_assoc tests_dual.sub_sup_demorgan tests_dual.sup_idempotent mult_left_dist_sup tests_dual.inf_demorgan preserves_equation_test preserves_ite preserves_while_context while_import_condition_2)"], ["proof (state)\nthis:\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) * - q *\n  (- q * (- p \\<squnion> - r) \\<star> - q * (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "hence \"z * -p * -q * (x1 \\<lhd> -q \\<rhd> x2) * (-q * -p \\<squnion> -r \\<star> (y1 \\<lhd> -q * -p \\<rhd> y2)) = z * -p * -q * (x1 \\<lhd> -q \\<rhd> x2) * (-p \\<squnion> -r \\<star> (y1 \\<lhd> -p \\<rhd> y2))\""], ["proof (prove)\nusing this:\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) * - q *\n  (- q * (- p \\<squnion> - r) \\<star> - q * (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "by (smt assms(2-5) tests_dual.double_negation mult_assoc tests_dual.sub_sup_demorgan tests_dual.sup_idempotent preserves_equation_test preserves_ite preserves_while_context while_import_condition_2)"], ["proof (state)\nthis:\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "thus ?thesis"], ["proof (prove)\nusing this:\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "using 1"], ["proof (prove)\nusing this:\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - p * - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * - - p * - - q * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. z * (x1 \\<lhd> - q \\<rhd> x2) *\n    (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n    z * (x1 \\<lhd> - p \\<rhd> x2) *\n    (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))", "by (smt assms(1) assigns_def mult_assoc mult_left_dist_sup mult_right_dist_sup while_ite_replace)"], ["proof (state)\nthis:\n  z * (x1 \\<lhd> - q \\<rhd> x2) *\n  (- q * - p \\<squnion> - r \\<star> (y1 \\<lhd> - q * - p \\<rhd> y2)) =\n  z * (x1 \\<lhd> - p \\<rhd> x2) *\n  (- p \\<squnion> - r \\<star> (y1 \\<lhd> - p \\<rhd> y2))\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Theorem 7.3\\<close>"], ["", "lemma while_seq_norm:\n  assumes \"assigns z1 (-r1) (-q)\"\n      and \"preserves x2 (-q)\"\n      and \"preserves y2 (-q)\"\n      and \"preserves z2 (-q)\"\n      and \"z1 * z2 = z2 * z1\"\n      and \"assigns z2 (-q) (-r)\"\n      and \"preserves y1 (-r)\"\n      and \"preserves z1 (-r)\"\n      and \"preserves x2 (-r)\"\n      and \"preserves y2 (-r)\"\n    shows \"x1 * z1 * z2 * (-r1 \\<star> y1 * z1) * x2 * (-r2 \\<star> y2) = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> x2) * (-q \\<squnion> -r2 \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have 1: \"preserves (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2)) (-r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) (- r)", "by (simp add: assms(7-9) ite_def preserves_mult preserves_sup preserves_test)"], ["proof (state)\nthis:\n  preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) (- r)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "hence 2: \"preserves (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2) (-r)\""], ["proof (prove)\nusing this:\n  preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) (- r)\n\ngoal (1 subgoal):\n 1. preserves\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) (- r)", "by (simp add: assms(10) preserves_ite)"], ["proof (state)\nthis:\n  preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)\n   (- r)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"x1 * z1 * z2 * (-r1 \\<star> y1 * z1) * x2 * (-r2 \\<star> y2) = x1 * z1 * z2 * (-q \\<star> y1 * z1) * x2 * (-r2 \\<star> y2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2)", "using assms(1,5) mult_assoc while_seq_replace"], ["proof (prove)\nusing this:\n  assigns z1 (- r1) (- q)\n  z1 * z2 = z2 * z1\n  ?a * ?b * ?c = ?a * (?b * ?c)\n  assigns ?z (- ?p) (- ?q) \\<Longrightarrow>\n  ?z * (- ?p \\<star> ?x * ?z) * ?y = ?z * (- ?q \\<star> ?x * ?z) * ?y\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2)", "by auto"], ["proof (state)\nthis:\n  x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (-q \\<star> y1 * z1 * (1 \\<lhd> -q \\<rhd> x2 * (-r2 \\<star> y2)) \\<lhd> -q \\<rhd> x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (- q \\<star>\n     y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2 *\n                                (- r2 \\<star>\n                                 y2)) \\<lhd> - q \\<rhd> x2 *\n                  (- r2 \\<star> y2))", "by (smt assms(2,3) mult_assoc preserves_mult preserves_while while_post_norm)"], ["proof (state)\nthis:\n  x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 *\n  (- q \\<star>\n   y1 * z1 *\n   ((1::'a) \\<lhd> - q \\<rhd> x2 *\n                              (- r2 \\<star>\n                               y2)) \\<lhd> - q \\<rhd> x2 *\n                (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 * (- q \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 *\n  (- q \\<star>\n   y1 * z1 *\n   ((1::'a) \\<lhd> - q \\<rhd> x2 *\n                              (- r2 \\<star>\n                               y2)) \\<lhd> - q \\<rhd> x2 *\n                (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * (z2 * (-q \\<star> y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) * (--q * -r2 \\<star> y2)) \\<lhd> -q \\<rhd> z2 * x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (- q \\<star>\n     y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2 *\n                                (- r2 \\<star>\n                                 y2)) \\<lhd> - q \\<rhd> x2 *\n                  (- r2 \\<star> y2)) =\n    x1 * z1 *\n    (z2 *\n     (- q \\<star>\n      y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n      (- - q * - r2 \\<star>\n       y2)) \\<lhd> - q \\<rhd> z2 * x2 * (- r2 \\<star> y2))", "by (smt assms(2-4) assigns_same mult_assoc preserves_import_ite while_else_norm)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- q \\<star>\n   y1 * z1 *\n   ((1::'a) \\<lhd> - q \\<rhd> x2 *\n                              (- r2 \\<star>\n                               y2)) \\<lhd> - q \\<rhd> x2 *\n                (- r2 \\<star> y2)) =\n  x1 * z1 *\n  (z2 *\n   (- q \\<star>\n    y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n    (- - q * - r2 \\<star>\n     y2)) \\<lhd> - q \\<rhd> z2 * x2 * (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- q \\<star>\n   y1 * z1 *\n   ((1::'a) \\<lhd> - q \\<rhd> x2 *\n                              (- r2 \\<star>\n                               y2)) \\<lhd> - q \\<rhd> x2 *\n                (- r2 \\<star> y2)) =\n  x1 * z1 *\n  (z2 *\n   (- q \\<star>\n    y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n    (- - q * - r2 \\<star>\n     y2)) \\<lhd> - q \\<rhd> z2 * x2 * (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * (z2 * (-r \\<rhd> y1 * z1 * (1 \\<lhd> -q \\<rhd> x2)) * (-r * (-q \\<squnion> -r2) \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2)) \\<lhd> -q \\<rhd> z2 * x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 *\n    (z2 *\n     (- q \\<star>\n      y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n      (- - q * - r2 \\<star>\n       y2)) \\<lhd> - q \\<rhd> z2 * x2 * (- r2 \\<star> y2)) =\n    x1 * z1 *\n    (z2 * (- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> z2 *\n   x2 *\n   (- r2 \\<star> y2))", "by (smt assms(6-10) tests_dual.double_negation tests_dual.sub_sup_demorgan tests_dual.inf_demorgan preserves_ite preserves_mult preserves_one while_while_norm wnf_lemma_8)"], ["proof (state)\nthis:\n  x1 * z1 *\n  (z2 *\n   (- q \\<star>\n    y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n    (- - q * - r2 \\<star>\n     y2)) \\<lhd> - q \\<rhd> z2 * x2 * (- r2 \\<star> y2)) =\n  x1 * z1 *\n  (z2 * (- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> z2 *\n x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 *\n  (z2 *\n   (- q \\<star>\n    y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n    (- - q * - r2 \\<star>\n     y2)) \\<lhd> - q \\<rhd> z2 * x2 * (- r2 \\<star> y2)) =\n  x1 * z1 *\n  (z2 * (- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> z2 *\n x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * ((-r \\<rhd> y1 * z1 * (1 \\<lhd> -q \\<rhd> x2)) * (-r * (-q \\<squnion> -r2) \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2)) \\<lhd> -r \\<rhd> x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 *\n    (z2 * (- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> z2 *\n   x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    ((- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2))", "by (smt assms(4,6) mult_assoc preserves_import_ite while_ite_replace)"], ["proof (state)\nthis:\n  x1 * z1 *\n  (z2 * (- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> z2 *\n x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  ((- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 *\n  (z2 * (- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> z2 *\n x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  ((- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (-r * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2)) * (-r * (-q \\<squnion> -r2) \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2)) \\<lhd> -r \\<rhd> x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    ((- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2))", "by (smt mult_assoc it_context_true ite_import_true)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  ((- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  ((- r \\<rhd> y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (-r * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2)) * -r * (-r * (-q \\<squnion> -r2) \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2)) \\<lhd> -r \\<rhd> x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2))", "using 1"], ["proof (prove)\nusing this:\n  preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) (- r)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2))", "by (simp add: preserves_equation_test)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (-r * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2)) * -r * (-q \\<squnion> -r2 \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2)) \\<lhd> -r \\<rhd> x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- q \\<squnion> - r2 \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2))", "using 2"], ["proof (prove)\nusing this:\n  preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)\n   (- r)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- r * (- q \\<squnion> - r2) \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- q \\<squnion> - r2 \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2))", "by (smt (z3) tests_dual.sba_dual.sub_sup_closed mult_assoc preserves_while_context)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- r * (- q \\<squnion> - r2) \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) * (-q \\<squnion> -r2 \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2)) \\<lhd> -q \\<rhd> x2 * (-r2 \\<star> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n     (- q \\<squnion> - r2 \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n     (- q \\<squnion> - r2 \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> x2 *\n   (- r2 \\<star> y2))", "by (smt assms(6-9) tests_dual.double_negation ite_import_true mult_assoc tests_dual.sup_idempotent preserves_equation_test preserves_ite preserves_one while_ite_replace)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (- r * (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) * - r *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - r \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> x2 *\n (- r2 \\<star> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -r \\<rhd> x2) * ((-r * (-q \\<squnion> -r2) \\<squnion> --r * -r2) \\<star> ((y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2) \\<lhd> -r \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n     (- q \\<squnion> - r2 \\<star>\n      (y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> x2 *\n   (- r2 \\<star> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n     ((y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2))", "by (smt assms(6-10) tests_dual.double_negation mult_assoc tests_dual.sub_sup_demorgan tests_dual.inf_demorgan preserves_ite preserves_mult preserves_one while_ite_norm)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   ((y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) *\n   (- q \\<squnion> - r2 \\<star>\n    (y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2)) \\<lhd> - q \\<rhd> x2 *\n (- r2 \\<star> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   ((y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -r \\<rhd> x2) * ((-r * (-q \\<squnion> -r2) \\<squnion> --r * -r2) \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -r * -q \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n     ((y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))", "using ite_conjunction"], ["proof (prove)\nusing this:\n  (?x \\<lhd> - ?q \\<rhd> ?y) \\<lhd> - ?p \\<rhd> ?y =\n  ?x \\<lhd> - ?p * - ?q \\<rhd> ?y\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n     ((y1 * z1 *\n       ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))", "by simp"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   ((y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   ((y1 * z1 *\n     ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2) \\<lhd> - r \\<rhd> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -r \\<rhd> x2) * ((-r * -q \\<squnion> -r2) \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -r * -q \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n     (y1 * z1 *\n      ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * - q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))", "by (smt (z3) mult_left_dist_sup sup_assoc tests_dual.sba_dual.sup_cases tests_dual.sub_commutative)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * - q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "also"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * (- q \\<squnion> - r2) \\<squnion> - - r * - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * - q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "have \"... = x1 * z1 * z2 * (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> x2) * (-q \\<squnion> -r2 \\<star> (y1 * z1 * (1 \\<lhd> -q \\<rhd> x2) \\<lhd> -q \\<rhd> y2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * - q \\<squnion> - r2 \\<star>\n     (y1 * z1 *\n      ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "using 1"], ["proof (prove)\nusing this:\n  preserves (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2)) (- r)\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n    (- r * - q \\<squnion> - r2 \\<star>\n     (y1 * z1 *\n      ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2)) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "by (metis assms(2,3,6,9,10) mult_assoc wnf_lemma_9)"], ["proof (state)\nthis:\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r \\<rhd> x2) *\n  (- r * - q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - r * - q \\<rhd> y2)) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n  (- q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "finally"], ["proof (chain)\npicking this:\n  x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n  (- q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "show ?thesis"], ["proof (prove)\nusing this:\n  x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n  (- q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))\n\ngoal (1 subgoal):\n 1. x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n    x1 * z1 * z2 *\n    (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n    (- q \\<squnion> - r2 \\<star>\n     (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))", "."], ["proof (state)\nthis:\n  x1 * z1 * z2 * (- r1 \\<star> y1 * z1) * x2 * (- r2 \\<star> y2) =\n  x1 * z1 * z2 *\n  (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> x2) *\n  (- q \\<squnion> - r2 \\<star>\n   (y1 * z1 * ((1::'a) \\<lhd> - q \\<rhd> x2) \\<lhd> - q \\<rhd> y2))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}