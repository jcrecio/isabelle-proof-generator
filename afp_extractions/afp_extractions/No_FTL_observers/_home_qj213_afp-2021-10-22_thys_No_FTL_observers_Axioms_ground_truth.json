{"file_name": "/home/qj213/afp-2021-10-22/thys/No_FTL_observers/Axioms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/No_FTL_observers", "problem_names": ["lemma lemSqrt: \n    assumes \"x \\<ge> 0\"\n      and   \"r = sqrt x\"\n    shows   \"r \\<ge> 0  \\<and>  r*r = x\"", "lemma lemCProps:\n  assumes \"IOb m\"\n     and  \"v = c m\"\n  shows \"(v > 0) \\<and> (\\<forall>x y.((\\<exists>p. (Ph p \\<and> W m p x \\<and> W m p y)) \n                      \\<longleftrightarrow> ( space2 x y = (c m * c m)*time2 x y )))\"", "lemma lemCCone: \n  assumes \"IOb m\"\n    and   \"onCone y (lightcone m x)\"\n  shows   \"\\<exists>p. (Ph p \\<and> W m p x \\<and> W m p y)\"", "lemma lemCPos: \n  assumes \"IOb m\"\n  shows   \"c m > 0\"", "lemma lemCPhoton:\n  assumes \"IOb m\"\n  shows \"\\<forall>x y. (\\<exists>p. (Ph p \\<and> W m p x \\<and> W m p y)) \\<longleftrightarrow> (space2 x y = (c m * c m)*(time2 x y))\""], "translations": [["", "lemma lemSqrt: \n    assumes \"x \\<ge> 0\"\n      and   \"r = sqrt x\"\n    shows   \"r \\<ge> 0  \\<and>  r*r = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> r \\<and> r * r = x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> r \\<and> r * r = x", "have rootExists: \"(\\<exists>r. sqrtTest x r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r. sqrtTest x r", "by (metis AxEuclidean assms(1))"], ["proof (state)\nthis:\n  \\<exists>r. sqrtTest x r\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> r \\<and> r * r = x", "hence \"sqrtTest x (sqrt x)\""], ["proof (prove)\nusing this:\n  \\<exists>r. sqrtTest x r\n\ngoal (1 subgoal):\n 1. sqrtTest x (sqrt x)", "by (metis lemSomeFunc)"], ["proof (state)\nthis:\n  sqrtTest x (sqrt x)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> r \\<and> r * r = x", "thus ?thesis"], ["proof (prove)\nusing this:\n  sqrtTest x (sqrt x)\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> r \\<and> r * r = x", "using assms(2)"], ["proof (prove)\nusing this:\n  sqrtTest x (sqrt x)\n  r = sqrt x\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> r \\<and> r * r = x", "by simp"], ["proof (state)\nthis:\n  (0::'a) \\<le> r \\<and> r * r = x\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* \n   AxLight\n   There is an inertial observer, according to whom, any light\n   signal moves with the same velocity in any direction \n*)"], ["", "class AxLight = WorldView +\nassumes\n  AxLight: \"\\<exists>m v.( IOb m \\<and> (v > (0::'a)) \\<and> ( \\<forall>x y.( \n              (\\<exists>p.(Ph p \\<and> W m p x \\<and> W m p y)) \\<longleftrightarrow> (space2 x y = (v * v)*time2 x y) \n            )))\"\nbegin"], ["", "end"], ["", "(*\n  AxPh\n  For any inertial observer, the speed of light is the same in every\n  direction everywhere, and it is finite. Furthermore, it is possible\n  to send out a light signal in any direction.\n*)"], ["", "class AxPh = WorldView + AxiomPreds +\nassumes\n  AxPh: \"IOb m \\<Longrightarrow> (\\<exists>v. cTest m v)\"\nbegin"], ["", "abbreviation c :: \"Body \\<Rightarrow> 'a\" where\n    \"c \\<equiv> someFunc cTest\""], ["", "fun lightcone :: \"Body \\<Rightarrow> 'a Point \\<Rightarrow> 'a Cone\" where\n    \"lightcone m v = mkCone v (c m)\""], ["", "lemma lemCProps:\n  assumes \"IOb m\"\n     and  \"v = c m\"\n  shows \"(v > 0) \\<and> (\\<forall>x y.((\\<exists>p. (Ph p \\<and> W m p x \\<and> W m p y)) \n                      \\<longleftrightarrow> ( space2 x y = (c m * c m)*time2 x y )))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < v \\<and>\n    (\\<forall>x y.\n        (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n        (space2 x y = c m * c m * time2 x y))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (0::'a) < v \\<and>\n    (\\<forall>x y.\n        (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n        (space2 x y = c m * c m * time2 x y))", "have vExists: \"(\\<exists>v. cTest m v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>v. cTest m v", "by (metis AxPh assms(1))"], ["proof (state)\nthis:\n  \\<exists>v. cTest m v\n\ngoal (1 subgoal):\n 1. (0::'a) < v \\<and>\n    (\\<forall>x y.\n        (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n        (space2 x y = c m * c m * time2 x y))", "hence \"cTest m (c m)\""], ["proof (prove)\nusing this:\n  \\<exists>v. cTest m v\n\ngoal (1 subgoal):\n 1. cTest m (c m)", "by (metis lemSomeFunc)"], ["proof (state)\nthis:\n  cTest m (c m)\n\ngoal (1 subgoal):\n 1. (0::'a) < v \\<and>\n    (\\<forall>x y.\n        (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n        (space2 x y = c m * c m * time2 x y))", "thus ?thesis"], ["proof (prove)\nusing this:\n  cTest m (c m)\n\ngoal (1 subgoal):\n 1. (0::'a) < v \\<and>\n    (\\<forall>x y.\n        (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n        (space2 x y = c m * c m * time2 x y))", "using assms(2)"], ["proof (prove)\nusing this:\n  cTest m (c m)\n  v = c m\n\ngoal (1 subgoal):\n 1. (0::'a) < v \\<and>\n    (\\<forall>x y.\n        (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n        (space2 x y = c m * c m * time2 x y))", "by simp"], ["proof (state)\nthis:\n  (0::'a) < v \\<and>\n  (\\<forall>x y.\n      (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n      (space2 x y = c m * c m * time2 x y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemCCone: \n  assumes \"IOb m\"\n    and   \"onCone y (lightcone m x)\"\n  shows   \"\\<exists>p. (Ph p \\<and> W m p x \\<and> W m p y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "have \"(\\<exists>p.(Ph p \\<and> W m p x \\<and> W m p y)) \n                      \\<longleftrightarrow> ( space2 x y = (c m * c m)*time2 x y )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n    (space2 x y = c m * c m * time2 x y)", "by (smt assms(1) lemCProps)"], ["proof (state)\nthis:\n  (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n  (space2 x y = c m * c m * time2 x y)\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "hence ph_exists: \"(space2 x y = (c m * c m)*time2 x y) \\<longrightarrow> (\\<exists>p.(Ph p \\<and> W m p x \\<and> W m p y))\""], ["proof (prove)\nusing this:\n  (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n  (space2 x y = c m * c m * time2 x y)\n\ngoal (1 subgoal):\n 1. space2 x y = c m * c m * time2 x y \\<longrightarrow>\n    (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y)", "by metis"], ["proof (state)\nthis:\n  space2 x y = c m * c m * time2 x y \\<longrightarrow>\n  (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y)\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "define lcmx where \"lcmx = lightcone m x\""], ["proof (state)\nthis:\n  lcmx = lightcone m x\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "have lcmx_vertex: \"vertex lcmx = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vertex lcmx = x", "by (simp add: lcmx_def)"], ["proof (state)\nthis:\n  vertex lcmx = x\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "have lcmx_slope: \"slope lcmx = c m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. slope lcmx = c m", "by (simp add: lcmx_def)"], ["proof (state)\nthis:\n  slope lcmx = c m\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "have \"onCone y lcmx \\<longrightarrow> (space2 x y = (c m * c m)*time2 x y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. onCone y lcmx \\<longrightarrow> space2 x y = c m * c m * time2 x y", "by (metis lcmx_vertex lcmx_slope onCone.simps)"], ["proof (state)\nthis:\n  onCone y lcmx \\<longrightarrow> space2 x y = c m * c m * time2 x y\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "hence \"space2 x y = (c m * c m)*time2 x y\""], ["proof (prove)\nusing this:\n  onCone y lcmx \\<longrightarrow> space2 x y = c m * c m * time2 x y\n\ngoal (1 subgoal):\n 1. space2 x y = c m * c m * time2 x y", "by (metis lcmx_def assms(2))"], ["proof (state)\nthis:\n  space2 x y = c m * c m * time2 x y\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "thus ?thesis"], ["proof (prove)\nusing this:\n  space2 x y = c m * c m * time2 x y\n\ngoal (1 subgoal):\n 1. \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y", "by (metis ph_exists)"], ["proof (state)\nthis:\n  \\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lemCPos: \n  assumes \"IOb m\"\n  shows   \"c m > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) < c m", "by (metis assms(1) lemCProps)"], ["", "lemma lemCPhoton:\n  assumes \"IOb m\"\n  shows \"\\<forall>x y. (\\<exists>p. (Ph p \\<and> W m p x \\<and> W m p y)) \\<longleftrightarrow> (space2 x y = (c m * c m)*(time2 x y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y.\n       (\\<exists>p. Ph p \\<and> m sees p at x \\<and> m sees p at y) =\n       (space2 x y = c m * c m * time2 x y)", "by (metis assms(1) lemCProps)"], ["", "end"], ["", "(*\n  AxEv\n  Inertial observers see the same events (meetings of bodies).\n  This also enables us to discuss the worldview transformation.\n*)"], ["", "class AxEv = WorldView +\nassumes\n  AxEv: \"\\<lbrakk> IOb m; IOb k\\<rbrakk> \\<Longrightarrow>  (\\<exists>y. (\\<forall>b. (W m b x  \\<longleftrightarrow> W k b y)))\"\nbegin"], ["", "end"], ["", "(*\n  Inertial observers can move with any speed slower than that of light\n*)"], ["", "class AxThExp = WorldView + AxPh +\nassumes\n    AxThExp: \"IOb m \\<Longrightarrow> (\\<forall>x y .( \n       (\\<exists>k.(IOb k \\<and> W m k x \\<and> W m k y)) \\<longleftrightarrow> (space2 x y < (c m * c m) * time2 x y) \n       ))\"\n\nbegin"], ["", "end"], ["", "(*\n  Every inertial observer is stationary according to himself\n*)"], ["", "class AxSelf = WorldView +\nassumes\n  AxSelf: \"IOb m  \\<Longrightarrow>  (W m m x) \\<longrightarrow> (onAxisT x)\"\nbegin"], ["", "end"], ["", "(* \n  All inertial observers agree that the speed of light is 1\n*)"], ["", "class AxC = WorldView + AxPh +\nassumes\n  AxC: \"IOb m \\<Longrightarrow> c m = 1\"\nbegin"], ["", "end"], ["", "(*\n  Inertial observers agree as to the spatial distance between two\n  events if these two events are simultaneous for both of them.\n*)"], ["", "class AxSym = WorldView +\nassumes\n  AxSym: \"\\<lbrakk> IOb m; IOb k \\<rbrakk> \\<Longrightarrow>\n            (W m e x \\<and> W m f y \\<and> W k e x'\\<and> W k f y' \\<and>\n            tval x = tval y \\<and> tval x' = tval y' )\n          \\<longrightarrow> (space2 x y = space2 x' y')\"\nbegin"], ["", "end"], ["", "(*\n  AxLines\n  All observers agree about lines\n*)"], ["", "class AxLines = WorldView + \nassumes\n  AxLines: \"\\<lbrakk> IOb m; IOb k; collinear x p q \\<rbrakk> \\<Longrightarrow> \n     collinear (wvt k m x) (wvt k m p) (wvt k m q)\"\nbegin"], ["", "end"], ["", "(*\n  AxPlanes\n  All observers agree about planes\n*)"], ["", "class AxPlanes = WorldView +\nassumes\n  AxPlanes: \"\\<lbrakk> IOb m; IOb k \\<rbrakk> \\<Longrightarrow> \n     (coplanar e x y z  \\<longrightarrow> coplanar (wvt k m e) (wvt k m x) (wvt k m y) (wvt k m z))\"\nbegin"], ["", "end"], ["", "(*\n  AxCones\n  All observers agree about lightcones\n*)"], ["", "class AxCones = WorldView + AxPh +\nassumes\n  AxCones: \"\\<lbrakk> IOb m; IOb k \\<rbrakk> \\<Longrightarrow> \n     ( onCone x (lightCone m v) \\<longrightarrow> onCone (wvt k m x) (lightcone k (wvt k m v)))\"\nbegin"], ["", "end"], ["", "(*\n  All inertial observers see time travelling in the same direction. That\n  is, if m thinks that k reached y after he reached x, then\n  k should also think that he reached y after he reached x.\n*)"], ["", "class AxTime = WorldView +\nassumes \n  AxTime: \"\\<lbrakk> IOb m; IOb k \\<rbrakk> \n              \\<Longrightarrow>( x \\<lesssim> y \\<longrightarrow> wvt k m x \\<lesssim> wvt k m y )\"\nbegin"], ["", "end"], ["", "end"]]}