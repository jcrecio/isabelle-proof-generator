{"file_name": "/home/qj213/afp-2021-10-22/thys/Formula_Derivatives/While_Default.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Formula_Derivatives", "problem_names": ["lemma while_default_code[code]:\n   \"while_default s = (if b s then while_default (c s) else s)\"", "lemma while_default_rule:\n  assumes c: \"\\<And>s. P s \\<Longrightarrow> b s \\<Longrightarrow> P (c s)\"\n  and t: \"\\<And>s. P s \\<Longrightarrow> \\<not> b s \\<Longrightarrow> Q s\"\n  and s: \"P s\" and d: \"Q d\"\n  shows \"Q (while_default s)\""], "translations": [["", "lemma while_default_code[code]:\n   \"while_default s = (if b s then while_default (c s) else s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.while_default s = (if b s then local.while_default (c s) else s)", "proof (cases \"\\<forall>k. b ((c^^k) s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "case True"], ["proof (state)\nthis:\n  \\<forall>k. b ((c ^^ k) s)\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "moreover"], ["proof (state)\nthis:\n  \\<forall>k. b ((c ^^ k) s)\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "from spec[OF True, of \"0\"]"], ["proof (chain)\npicking this:\n  b ((c ^^ 0) s)", "have \"b s\""], ["proof (prove)\nusing this:\n  b ((c ^^ 0) s)\n\ngoal (1 subgoal):\n 1. b s", "by simp_all"], ["proof (state)\nthis:\n  b s\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "moreover"], ["proof (state)\nthis:\n  b s\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "from spec[OF True, of \"Suc m\" for m]"], ["proof (chain)\npicking this:\n  b ((c ^^ Suc ?m2) s)", "have \"\\<forall>k. b ((c^^k) (c s))\""], ["proof (prove)\nusing this:\n  b ((c ^^ Suc ?m2) s)\n\ngoal (1 subgoal):\n 1. \\<forall>k. b ((c ^^ k) (c s))", "by (simp add: funpow_Suc_right del: funpow.simps(2))"], ["proof (state)\nthis:\n  \\<forall>k. b ((c ^^ k) (c s))\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>k. b ((c ^^ k) s)\n  b s\n  \\<forall>k. b ((c ^^ k) (c s))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>k. b ((c ^^ k) s)\n  b s\n  \\<forall>k. b ((c ^^ k) (c s))\n\ngoal (1 subgoal):\n 1. local.while_default s = (if b s then local.while_default (c s) else s)", "unfolding while_default_def"], ["proof (prove)\nusing this:\n  \\<forall>k. b ((c ^^ k) s)\n  b s\n  \\<forall>k. b ((c ^^ k) (c s))\n\ngoal (1 subgoal):\n 1. (if \\<forall>k. b ((c ^^ k) s) then d else the (while_option b c s)) =\n    (if b s\n     then if \\<forall>k. b ((c ^^ k) (c s)) then d\n          else the (while_option b c (c s))\n     else s)", "by simp"], ["proof (state)\nthis:\n  local.while_default s = (if b s then local.while_default (c s) else s)\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "define k where \"k = (LEAST k. \\<not> b ((c ^^ k) s))\""], ["proof (state)\nthis:\n  k = (LEAST k. \\<not> b ((c ^^ k) s))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "with False"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  k = (LEAST k. \\<not> b ((c ^^ k) s))", "have k: \"\\<not> b ((c ^^ k) s)\"\n    \"\\<And>l. \\<not> b ((c ^^ l) s) \\<Longrightarrow> k \\<le> l\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  k = (LEAST k. \\<not> b ((c ^^ k) s))\n\ngoal (1 subgoal):\n 1. \\<not> b ((c ^^ k) s) &&&\n    (\\<And>l. \\<not> b ((c ^^ l) s) \\<Longrightarrow> k \\<le> l)", "by (auto intro!: LeastI_ex[of \"\\<lambda>k. \\<not> b ((c ^^ k) s)\"] Least_le)"], ["proof (state)\nthis:\n  \\<not> b ((c ^^ k) s)\n  \\<not> b ((c ^^ ?l) s) \\<Longrightarrow> k \\<le> ?l\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.while_default s = (if b s then local.while_default (c s) else s)", "proof (cases k)"], ["proof (state)\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "case 0"], ["proof (state)\nthis:\n  k = 0\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "with k(1)"], ["proof (chain)\npicking this:\n  \\<not> b ((c ^^ k) s)\n  k = 0", "have \"\\<not> b s\""], ["proof (prove)\nusing this:\n  \\<not> b ((c ^^ k) s)\n  k = 0\n\ngoal (1 subgoal):\n 1. \\<not> b s", "by auto"], ["proof (state)\nthis:\n  \\<not> b s\n\ngoal (2 subgoals):\n 1. k = 0 \\<Longrightarrow>\n    local.while_default s = (if b s then local.while_default (c s) else s)\n 2. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "with False"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  \\<not> b s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  \\<not> b s\n\ngoal (1 subgoal):\n 1. local.while_default s = (if b s then local.while_default (c s) else s)", "by (auto simp add: while_default_def while_option_unfold)"], ["proof (state)\nthis:\n  local.while_default s = (if b s then local.while_default (c s) else s)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "case (Suc k)"], ["proof (state)\nthis:\n  k__ = Suc k\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k__ = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "with k(2)"], ["proof (chain)\npicking this:\n  \\<not> b ((c ^^ ?l) s) \\<Longrightarrow> k__ \\<le> ?l\n  k__ = Suc k", "have \"b ((c ^^ 0) s)\""], ["proof (prove)\nusing this:\n  \\<not> b ((c ^^ ?l) s) \\<Longrightarrow> k__ \\<le> ?l\n  k__ = Suc k\n\ngoal (1 subgoal):\n 1. b ((c ^^ 0) s)", "by blast"], ["proof (state)\nthis:\n  b ((c ^^ 0) s)\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k__ = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "then"], ["proof (chain)\npicking this:\n  b ((c ^^ 0) s)", "have \"b s\""], ["proof (prove)\nusing this:\n  b ((c ^^ 0) s)\n\ngoal (1 subgoal):\n 1. b s", "by simp"], ["proof (state)\nthis:\n  b s\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       k__ = Suc nat \\<Longrightarrow>\n       local.while_default s =\n       (if b s then local.while_default (c s) else s)", "with k(1) Suc False"], ["proof (chain)\npicking this:\n  \\<not> b ((c ^^ k__) s)\n  k__ = Suc k\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  b s", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> b ((c ^^ k__) s)\n  k__ = Suc k\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  b s\n\ngoal (1 subgoal):\n 1. local.while_default s = (if b s then local.while_default (c s) else s)", "unfolding while_default_def"], ["proof (prove)\nusing this:\n  \\<not> b ((c ^^ k__) s)\n  k__ = Suc k\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  b s\n\ngoal (1 subgoal):\n 1. (if \\<forall>k. b ((c ^^ k) s) then d else the (while_option b c s)) =\n    (if b s\n     then if \\<forall>k. b ((c ^^ k) (c s)) then d\n          else the (while_option b c (c s))\n     else s)", "by (subst while_option_unfold) (auto simp add: funpow_Suc_right simp del: funpow.simps(2))"], ["proof (state)\nthis:\n  local.while_default s = (if b s then local.while_default (c s) else s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.while_default s = (if b s then local.while_default (c s) else s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma while_default_rule:\n  assumes c: \"\\<And>s. P s \\<Longrightarrow> b s \\<Longrightarrow> P (c s)\"\n  and t: \"\\<And>s. P s \\<Longrightarrow> \\<not> b s \\<Longrightarrow> Q s\"\n  and s: \"P s\" and d: \"Q d\"\n  shows \"Q (while_default s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q (local.while_default s)", "proof (cases \"\\<forall>k. b ((c^^k) s)\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow> Q (local.while_default s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    Q (local.while_default s)", "case False"], ["proof (state)\nthis:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow> Q (local.while_default s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    Q (local.while_default s)", "then"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))", "obtain t where \"while_option b c s = Some t\""], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        while_option b c s = Some t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding while_option_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        (if \\<exists>k. \\<not> b ((c ^^ k) s)\n         then Some ((c ^^ (LEAST k. \\<not> b ((c ^^ k) s))) s) else None) =\n        Some t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  while_option b c s = Some t\n\ngoal (2 subgoals):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow> Q (local.while_default s)\n 2. \\<not> (\\<forall>k. b ((c ^^ k) s)) \\<Longrightarrow>\n    Q (local.while_default s)", "with False"], ["proof (chain)\npicking this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  while_option b c s = Some t", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  while_option b c s = Some t\n\ngoal (1 subgoal):\n 1. Q (local.while_default s)", "using while_option_rule[of P b c s t] while_option_stop[of b c s t] s c t"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>k. b ((c ^^ k) s))\n  while_option b c s = Some t\n  \\<lbrakk>\\<And>s. \\<lbrakk>P s; b s\\<rbrakk> \\<Longrightarrow> P (c s);\n   while_option b c s = Some t; P s\\<rbrakk>\n  \\<Longrightarrow> P t\n  while_option b c s = Some t \\<Longrightarrow> \\<not> b t\n  P s\n  \\<lbrakk>P ?s; b ?s\\<rbrakk> \\<Longrightarrow> P (c ?s)\n  \\<lbrakk>P ?s; \\<not> b ?s\\<rbrakk> \\<Longrightarrow> Q ?s\n\ngoal (1 subgoal):\n 1. Q (local.while_default s)", "by (auto simp add: while_default_def)"], ["proof (state)\nthis:\n  Q (local.while_default s)\n\ngoal (1 subgoal):\n 1. \\<forall>k. b ((c ^^ k) s) \\<Longrightarrow> Q (local.while_default s)", "qed (simp add: while_default_def d t)"], ["", "end"], ["", "end"]]}