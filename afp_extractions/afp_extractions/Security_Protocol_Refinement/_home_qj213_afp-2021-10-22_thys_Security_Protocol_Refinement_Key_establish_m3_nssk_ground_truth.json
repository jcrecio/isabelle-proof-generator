{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Key_establish/m3_nssk.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemma corrKey_shrK_bad [simp]: \"corrKey = shrK`bad\"", "lemmas m3_defs =\n  m3_def m3_init_def m3_trans_def m3_obs_def\n  m3_step1_def m3_step2_def m3_step3_def m3_step4_def m3_step5_def\n  m3_step6_def m3_step7_def m3_leak_def m3_DY_fake_def", "lemmas analz_Inj_IK = analz.Inj [where H=\"IK s\" for s]", "lemmas parts_Inj_IK = parts.Inj [where H=\"IK s\" for s]", "lemmas m3_inv1_lkeysecI = m3_inv1_lkeysec_def [THEN setc_def_to_intro, rule_format]", "lemmas m3_inv1_lkeysecE [elim] = m3_inv1_lkeysec_def [THEN setc_def_to_elim, rule_format]", "lemmas m3_inv1_lkeysecD = m3_inv1_lkeysec_def [THEN setc_def_to_dest, rule_format]", "lemma PO_m3_inv1_lkeysec_init [iff]:\n  \"init m3 \\<subseteq> m3_inv1_lkeysec\"", "lemma PO_m3_inv1_lkeysec_trans [iff]:\n  \"{m3_inv1_lkeysec} trans m3 {> m3_inv1_lkeysec}\"", "lemma PO_m3_inv1_lkeysec [iff]: \"reach m3 \\<subseteq> m3_inv1_lkeysec\"", "lemma m3_inv1_lkeysec_for_parts [simp]:\n  \"\\<lbrakk> s \\<in> m3_inv1_lkeysec \\<rbrakk> \\<Longrightarrow> Key (shrK C) \\<in> parts (IK s) \\<longleftrightarrow> C \\<in> bad\"", "lemma m3_inv1_lkeysec_for_analz [simp]:\n  \"\\<lbrakk> s \\<in> m3_inv1_lkeysec \\<rbrakk> \\<Longrightarrow> Key (shrK C) \\<in> analz (IK s) \\<longleftrightarrow> C \\<in> bad\"", "lemmas m3_inv2_ticketI =\n  m3_inv2_ticket_def [THEN setc_def_to_intro, rule_format]", "lemmas m3_inv2_ticketE [elim] =\n  m3_inv2_ticket_def [THEN setc_def_to_elim, rule_format]", "lemmas m3_inv2_ticketD =\n  m3_inv2_ticket_def [THEN setc_def_to_dest, rule_format, rotated -1]", "lemma PO_m3_inv2_ticket_init [iff]:\n  \"init m3 \\<subseteq> m3_inv2_ticket\"", "lemma PO_m3_inv2_ticket_trans [iff]:\n  \"{m3_inv2_ticket \\<inter> m3_inv1_lkeysec} trans m3 {> m3_inv2_ticket}\"", "lemma PO_m3_inv2_ticket [iff]: \"reach m3 \\<subseteq> m3_inv2_ticket\"", "lemmas m3_inv3_sesK_comprI = m3_inv3_sesK_compr_def [THEN setc_def_to_intro, rule_format]", "lemmas m3_inv3_sesK_comprE = m3_inv3_sesK_compr_def [THEN setc_def_to_elim, rule_format]", "lemmas m3_inv3_sesK_comprD = m3_inv3_sesK_compr_def [THEN setc_def_to_dest, rule_format]", "lemmas insert_commute_Key = insert_commute [where x=\"Key K\" for K]", "lemmas m3_inv3_sesK_compr_simps =\n  m3_inv3_sesK_comprD\n  m3_inv3_sesK_comprD [where KK=\"{Kab}\" for Kab, simplified]\n  m3_inv3_sesK_comprD [where KK=\"insert Kab KK\" for Kab KK, simplified]\n  insert_commute_Key", "lemma PO_m3_inv3_sesK_compr_step4:\n  \"{m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec}\n      m3_step4 Ra A B Na Kab X\n   {> m3_inv3_sesK_compr}\"", "lemmas PO_m3_inv3_sesK_compr_trans_lemmas =\n  PO_m3_inv3_sesK_compr_step4", "lemma PO_m3_inv3_sesK_compr_init [iff]:\n  \"init m3 \\<subseteq> m3_inv3_sesK_compr\"", "lemma PO_m3_inv3_sesK_compr_trans [iff]:\n  \"{m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec}\n     trans m3\n   {> m3_inv3_sesK_compr}\"", "lemma PO_m3_inv3_sesK_compr [iff]: \"reach m3 \\<subseteq> m3_inv3_sesK_compr\"", "lemmas R23_defs =\n  R23_def R23_msgs_def R23_keys_def R23_non_def R23_pres_def", "lemmas R23_msgsI = R23_msgs_def [THEN rel_def_to_intro, simplified, rule_format]", "lemmas R23_msgsE [elim] = R23_msgs_def [THEN rel_def_to_elim, simplified, rule_format]", "lemmas R23_msgsE' [elim] =\n  R23_msgs_def [THEN rel_def_to_dest, simplified, rule_format, THEN subsetD]", "lemmas R23_keysI = R23_keys_def [THEN rel_def_to_intro, simplified, rule_format]", "lemmas R23_keysE [elim] = R23_keys_def [THEN rel_def_to_elim, simplified, rule_format]", "lemmas R23_keysD = R23_keys_def [THEN rel_def_to_dest, simplified, rule_format, rotated 2]", "lemmas R23_nonI = R23_non_def [THEN rel_def_to_intro, simplified, rule_format]", "lemmas R23_nonE [elim] = R23_non_def [THEN rel_def_to_elim, simplified, rule_format]", "lemmas R23_nonD = R23_non_def [THEN rel_def_to_dest, simplified, rule_format, rotated 2]", "lemmas R23_presI = R23_pres_def [THEN rel_def_to_intro, simplified, rule_format]", "lemmas R23_presE [elim] = R23_pres_def [THEN rel_def_to_elim, simplified, rule_format]", "lemmas R23_intros = R23_msgsI R23_keysI R23_nonI R23_presI", "lemmas R23_keys_dests =\n  R23_keysD\n  R23_keysD [where KK=\"{}\", simplified]\n  R23_keysD [where KK=\"{K}\" for K, simplified]\n  R23_keysD [where KK=\"insert K KK\" for K KK, simplified, OF _ _ conjI]", "lemmas R23_non_dests =\n  R23_nonD\n  R23_nonD [where KK=\"{}\", simplified]\n  R23_nonD [where KK=\"{K}\" for K, simplified]\n  R23_nonD [where KK=\"insert K KK\" for K KK, simplified, OF _ _ conjI]", "lemmas R23_dests = R23_keys_dests R23_non_dests", "lemma abs_msg_empty: \"abs_msg {} = {}\"", "lemma abs_msg_Un [simp]:\n  \"abs_msg (G \\<union> H) = abs_msg G \\<union> abs_msg H\"", "lemma abs_msg_mono [elim]:\n  \"\\<lbrakk> m \\<in> abs_msg G; G \\<subseteq> H \\<rbrakk> \\<Longrightarrow> m \\<in> abs_msg H\"", "lemma abs_msg_insert_mono [intro]:\n  \"\\<lbrakk> m \\<in> abs_msg H \\<rbrakk> \\<Longrightarrow> m \\<in> abs_msg (insert m' H)\"", "lemma abs_msg_DY_subset_fakeable:\n  \"\\<lbrakk> (s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys; (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec \\<rbrakk>\n  \\<Longrightarrow> abs_msg (synth (analz (IK t))) \\<subseteq> fake ik0 (dom (runs s)) (chan s)\"", "lemma PO_m3_step1_refines_m2_step1:\n  \"{R23}\n     (m2_step1 Ra A B Na), (m3_step1 Ra A B Na)\n   {> R23}\"", "lemma PO_m3_step2_refines_m2_step2:\n  \"{R23}\n     (m2_step2 Rb A B), (m3_step2 Rb A B)\n   {> R23}\"", "lemma PO_m3_step3_refines_m2_step3:\n  \"{R23 \\<inter> (m2_inv3a_sesK_compr) \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv1_lkeysec)}\n     (m2_step3 Rs A B Na Kab), (m3_step3 Rs A B Na Kab)\n   {> R23}\"", "lemma PO_m3_step4_refines_m2_step4:\n  \"{R23 \\<inter> (m2_inv3b_sesK_compr_non)\n        \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec)}\n     (m2_step4 Ra A B Na Kab), (m3_step4 Ra A B Na Kab X)\n   {> R23}\"", "lemma PO_m3_step5_refines_m2_step5:\n  \"{R23}\n     (m2_step5 Rb A B Nb Kab), (m3_step5 Rb A B Nb Kab)\n   {> R23}\"", "lemma PO_m3_step6_refines_m2_step6:\n  \"{R23}\n     (m2_step6 Ra A B Na Nb Kab), (m3_step6 Ra A B Na Nb Kab)\n   {> R23}\"", "lemma PO_m3_step7_refines_m2_step7:\n  \"{R23}\n     (m2_step7 Rb A B Nb Kab), (m3_step7 Rb A B Nb Kab)\n   {> R23}\"", "lemma PO_m3_leak_refines_m2_leak:\n \"{R23}\n     m2_leak Rs Ra Rb A B, m3_leak Rs Ra Rb A B\n   {> R23}\"", "lemma PO_m3_DY_fake_refines_m2_fake:\n  \"{R23 \\<inter> UNIV \\<times> m3_inv1_lkeysec}\n     m2_fake, m3_DY_fake\n   {> R23}\"", "lemmas PO_m3_trans_refines_m2_trans =\n  PO_m3_step1_refines_m2_step1 PO_m3_step2_refines_m2_step2\n  PO_m3_step3_refines_m2_step3 PO_m3_step4_refines_m2_step4\n  PO_m3_step5_refines_m2_step5 PO_m3_step6_refines_m2_step6\n  PO_m3_step7_refines_m2_step7 PO_m3_leak_refines_m2_leak\n  PO_m3_DY_fake_refines_m2_fake", "lemma PO_m3_refines_init_m2 [iff]:\n  \"init m3 \\<subseteq> R23``(init m2)\"", "lemma PO_m3_refines_trans_m2 [iff]:\n  \"{R23 \\<inter> (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non)\n        \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec)}\n     (trans m2), (trans m3)\n   {> R23}\"", "lemma PO_m3_observation_consistent [iff]:\n  \"obs_consistent R23 med32 m2 m3\"", "lemma m3_refines_m2 [iff]:\n  \"refines\n     (R23 \\<inter> (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non)\n          \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec))\n     med32 m2 m3\"", "lemma m3_implements_m2 [iff]:\n  \"implements med32 m2 m3\"", "lemmas m3_inv4_ikk_initI = m3_inv4_ikk_init_def [THEN setc_def_to_intro, rule_format]", "lemmas m3_inv4_ikk_initE [elim] = m3_inv4_ikk_init_def [THEN setc_def_to_elim, rule_format]", "lemmas m3_inv4_ikk_initD = m3_inv4_ikk_init_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_m3_inv4_ikk_init: \"reach m3 \\<subseteq> m3_inv4_ikk_init\"", "lemmas m3_inv5_ikk_respI = m3_inv5_ikk_resp_def [THEN setc_def_to_intro, rule_format]", "lemmas m3_inv5_ikk_respE [elim] = m3_inv5_ikk_resp_def [THEN setc_def_to_elim, rule_format]", "lemmas m3_inv5_ikk_respD = m3_inv5_ikk_resp_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_m3_inv4_ikk_resp: \"reach m3 \\<subseteq> m3_inv5_ikk_resp\""], "translations": [["", "lemma corrKey_shrK_bad [simp]: \"corrKey = shrK`bad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. corrKey = shrK ` bad", "by (auto simp add: keySetup_def ltkeySetup_def corrKey_def)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>State\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>The secure channels are star-shaped to/from the server.  Therefore,\nwe have only one agent in the relation.\\<close>"], ["", "record m3_state = \"m1_state\" +\n  IK :: \"msg set\"                                \\<comment> \\<open>intruder knowledge\\<close>"], ["", "text \\<open>Observable state: agent's local state.\\<close>"], ["", "type_synonym\n  m3_obs = m2_obs"], ["", "definition\n  m3_obs :: \"m3_state \\<Rightarrow> m3_obs\" where\n  \"m3_obs s \\<equiv> \\<lparr> runs = runs s, leak = leak s \\<rparr>\""], ["", "type_synonym\n  m3_pred = \"m3_state set\""], ["", "type_synonym\n  m3_trans = \"(m3_state \\<times> m3_state) set\""], ["", "(******************************************************************************)"], ["", "subsection \\<open>Events\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>Protocol events.\\<close>"], ["", "definition     \\<comment> \\<open>by @{term \"A\"}, refines @{term \"m2_step1\"}\\<close>\n  m3_step1 :: \"[rid_t, agent, agent, nonce] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step1 Ra A B Na \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    Ra \\<notin> dom (runs s) \\<and>                      \\<comment> \\<open>\\<open>Ra\\<close> is fresh\\<close>\n    Na = Ra$na \\<and>                             \\<comment> \\<open>generate nonce \\<open>Na\\<close>\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr>\n      runs := (runs s)(Ra \\<mapsto> (Init, [A, B], [])),\n      IK := insert \\<lbrace>Agent A, Agent B, Nonce Na\\<rbrace> (IK s)    \\<comment> \\<open>send msg 1\\<close>\n    \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"B\"}, refines @{term \"m2_step2\"}\\<close>\n  m3_step2 :: \"[rid_t, agent, agent] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step2 Rb A B \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    Rb \\<notin> dom (runs s) \\<and>                       \\<comment> \\<open>\\<open>Rb\\<close> is fresh\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>create responder thread\\<close>\n    s1 = s\\<lparr>\n      runs := (runs s)(Rb \\<mapsto> (Resp, [A, B], []))\n    \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{text \"Server\"}, refines @{term m2_step3}\\<close>\n  m3_step3 :: \"[rid_t, agent, agent, nonce, key] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step3 Rs A B Na Kab \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    Rs \\<notin> dom (runs s) \\<and>                           \\<comment> \\<open>fresh server run\\<close>\n    Kab = sesK (Rs$sk) \\<and>                          \\<comment> \\<open>fresh session key\\<close>\n\n    \\<lbrace>Agent A, Agent B, Nonce Na\\<rbrace> \\<in> IK s \\<and>     \\<comment> \\<open>recv msg 1\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>record session key and send messages 2 and 3\\<close>\n    \\<comment> \\<open>note that last field in server record is for responder nonce\\<close>\n    s1 = s\\<lparr>\n      runs := (runs s)(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n      IK := insert\n              (Crypt (shrK A)\n                \\<lbrace>Nonce Na, Agent B, Key Kab,\n                   Crypt (shrK B) \\<lbrace>Key Kab, Agent A\\<rbrace>\\<rbrace>)\n              (IK s)\n    \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"A\"}, refines @{term m2_step4}\\<close>\n  m3_step4 :: \"[rid_t, agent, agent, nonce, key, msg] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step4 Ra A B Na Kab X \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    runs s Ra = Some (Init, [A, B], []) \\<and>\n    Na = Ra$na \\<and>\n\n    Crypt (shrK A) \\<lbrace>Nonce Na, Agent B, Key Kab, X\\<rbrace> \\<in> IK s \\<and>  \\<comment> \\<open>recv msg 2\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>record session key, and forward \\<open>X\\<close>\\<close>\n    s1 = s\\<lparr>\n      runs := (runs s)(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n      IK := insert X (IK s)\n    \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"B\"}, refines @{term m2_step5}\\<close>\n  m3_step5 :: \"[rid_t, agent, agent, nonce, key] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step5 Rb A B Nb Kab \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    runs s Rb = Some (Resp, [A, B], []) \\<and>\n    Nb = Rb$nb \\<and>\n\n    Crypt (shrK B) \\<lbrace>Key Kab, Agent A\\<rbrace> \\<in> IK s \\<and>              \\<comment> \\<open>recv msg 3\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>record session key\\<close>\n    s1 = s\\<lparr>\n      runs := (runs s)(Rb \\<mapsto> (Resp, [A, B], [aKey Kab])),\n      IK := insert (Crypt Kab (Nonce Nb)) (IK s)\n    \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"A\"}, refines @{term m2_step6}\\<close>\n  m3_step6 :: \"[rid_t, agent, agent, nonce, nonce, key] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step6 Ra A B Na Nb Kab \\<equiv> {(s, s').\n    runs s Ra = Some (Init, [A, B], [aKey Kab]) \\<and>      \\<comment> \\<open>key recv'd before\\<close>\n    Na = Ra$na \\<and>\n\n    Crypt Kab (Nonce Nb) \\<in> IK s \\<and>                      \\<comment> \\<open>receive \\<open>M4\\<close>\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s' = s\\<lparr>\n      runs := (runs s)(Ra \\<mapsto> (Init, [A, B], [aKey Kab, aNon Nb])),\n      IK := insert (Crypt Kab \\<lbrace>Nonce Nb, Nonce Nb\\<rbrace>) (IK s)\n    \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"B\"}, refines @{term m2_step6}\\<close>\n  m3_step7 :: \"[rid_t, agent, agent, nonce, key] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_step7 Rb A B Nb Kab \\<equiv> {(s, s').\n    runs s Rb = Some (Resp, [A, B], [aKey Kab]) \\<and>       \\<comment> \\<open>key recv'd before\\<close>\n    Nb = Rb$nb \\<and>\n\n    Crypt Kab \\<lbrace>Nonce Nb, Nonce Nb\\<rbrace> \\<in> IK s \\<and>         \\<comment> \\<open>receive \\<open>M5\\<close>\\<close>\n\n    \\<comment> \\<open>actions: (redundant) update local state marks successful termination\\<close>\n    s' = s\\<lparr>\n      runs := (runs s)(Rb \\<mapsto> (Resp, [A, B], [aKey Kab, END]))\n    \\<rparr>\n  }\""], ["", "text \\<open>Session key compromise.\\<close>"], ["", "definition     \\<comment> \\<open>refines @{term m2_leak}\\<close>\n  m3_leak :: \"[rid_t, rid_t, rid_t, agent, agent] \\<Rightarrow> m3_trans\"\nwhere\n  \"m3_leak Rs Ra Rb A B \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    runs s Rs = Some (Serv, [A, B], [aNon (Ra$na)]) \\<and>\n    runs s Ra = Some (Init, [A, B], [aKey (sesK (Rs$sk)), aNon (Rb$nb)]) \\<and>\n    runs s Rb = Some (Resp, [A, B], [aKey (sesK (Rs$sk)), END]) \\<and>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>record session key as leaked and add it to intruder knowledge\\<close>\n    s1 = s\\<lparr> leak := insert (sesK (Rs$sk), Ra$na, Rb$nb) (leak s),\n            IK := insert (Key (sesK (Rs$sk))) (IK s) \\<rparr>\n  }\""], ["", "text \\<open>Intruder fake event.\\<close>"], ["", "definition     \\<comment> \\<open>refines @{term \"m2_fake\"}\\<close>\n  m3_DY_fake :: \"m3_trans\"\nwhere\n  \"m3_DY_fake \\<equiv> {(s, s1).\n\n     \\<comment> \\<open>actions:\\<close>\n     s1 = s(|\n       IK := synth (analz (IK s))\n     |)\n  }\""], ["", "(******************************************************************************)"], ["", "subsection \\<open>Transition system\\<close>"], ["", "(******************************************************************************)"], ["", "definition\n  m3_init :: \"m3_state set\"\nwhere\n  \"m3_init \\<equiv> { \\<lparr>\n     runs = Map.empty,\n     leak = shrK`bad \\<times> {undefined} \\<times> {undefined},\n     IK = Key`shrK`bad\n  \\<rparr> }\""], ["", "definition\n  m3_trans :: \"(m3_state \\<times> m3_state) set\" where\n  \"m3_trans \\<equiv> (\\<Union>Ra Rb Rs A B Na Nb Kab X.\n     m3_step1 Ra A B Na \\<union>\n     m3_step2 Rb A B \\<union>\n     m3_step3 Rs A B Na Kab \\<union>\n     m3_step4 Ra A B Na Kab X \\<union>\n     m3_step5 Rb A B Nb Kab \\<union>\n     m3_step6 Ra A B Na Nb Kab \\<union>\n     m3_step7 Rb A B Nb Kab \\<union>\n     m3_leak Rs Ra Rb A B \\<union>\n     m3_DY_fake \\<union>\n     Id\n  )\""], ["", "definition\n  m3 :: \"(m3_state, m3_obs) spec\" where\n  \"m3 \\<equiv> \\<lparr>\n    init = m3_init,\n    trans = m3_trans,\n    obs = m3_obs\n  \\<rparr>\""], ["", "lemmas m3_defs =\n  m3_def m3_init_def m3_trans_def m3_obs_def\n  m3_step1_def m3_step2_def m3_step3_def m3_step4_def m3_step5_def\n  m3_step6_def m3_step7_def m3_leak_def m3_DY_fake_def"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Invariants\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>Specialized injection that we can apply more aggressively.\\<close>"], ["", "lemmas analz_Inj_IK = analz.Inj [where H=\"IK s\" for s]"], ["", "lemmas parts_Inj_IK = parts.Inj [where H=\"IK s\" for s]"], ["", "declare parts_Inj_IK [dest!]"], ["", "declare analz_into_parts [dest]"], ["", "subsubsection \\<open>inv1: Secrecy of pre-distributed shared keys\\<close>"], ["", "(*inv**************************************************************************)"], ["", "text \\<open>inv1: Secrecy of long-term keys\\<close>"], ["", "definition\n  m3_inv1_lkeysec :: \"m3_state set\"\nwhere\n  \"m3_inv1_lkeysec \\<equiv> {s. \\<forall>C.\n     (Key (shrK C) \\<in> parts (IK s) \\<longrightarrow> C \\<in> bad) \\<and>\n     (C \\<in> bad \\<longrightarrow> Key (shrK C) \\<in> IK s)\n  }\""], ["", "lemmas m3_inv1_lkeysecI = m3_inv1_lkeysec_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m3_inv1_lkeysecE [elim] = m3_inv1_lkeysec_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m3_inv1_lkeysecD = m3_inv1_lkeysec_def [THEN setc_def_to_dest, rule_format]"], ["", "text \\<open>Invariance proof.\\<close>"], ["", "lemma PO_m3_inv1_lkeysec_init [iff]:\n  \"init m3 \\<subseteq> m3_inv1_lkeysec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m3 \\<subseteq> m3_inv1_lkeysec", "by (auto simp add: m3_defs m3_inv1_lkeysec_def)"], ["", "lemma PO_m3_inv1_lkeysec_trans [iff]:\n  \"{m3_inv1_lkeysec} trans m3 {> m3_inv1_lkeysec}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m3_inv1_lkeysec} TS.trans m3 {> m3_inv1_lkeysec}", "by (fastforce simp add: PO_hoare_defs m3_defs intro!: m3_inv1_lkeysecI dest: Body)"], ["", "lemma PO_m3_inv1_lkeysec [iff]: \"reach m3 \\<subseteq> m3_inv1_lkeysec\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m3 \\<subseteq> m3_inv1_lkeysec", "by (rule inv_rule_incr) (fast+)"], ["", "text \\<open>Useful simplifier lemmas\\<close>"], ["", "lemma m3_inv1_lkeysec_for_parts [simp]:\n  \"\\<lbrakk> s \\<in> m3_inv1_lkeysec \\<rbrakk> \\<Longrightarrow> Key (shrK C) \\<in> parts (IK s) \\<longleftrightarrow> C \\<in> bad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> m3_inv1_lkeysec \\<Longrightarrow>\n    (Key (shrK C) \\<in> parts (IK s)) = (C \\<in> bad)", "by auto"], ["", "lemma m3_inv1_lkeysec_for_analz [simp]:\n  \"\\<lbrakk> s \\<in> m3_inv1_lkeysec \\<rbrakk> \\<Longrightarrow> Key (shrK C) \\<in> analz (IK s) \\<longleftrightarrow> C \\<in> bad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> m3_inv1_lkeysec \\<Longrightarrow>\n    (Key (shrK C) \\<in> analz (IK s)) = (C \\<in> bad)", "by auto"], ["", "subsubsection \\<open>inv2: Ticket shape for honestly encrypted M2\\<close>"], ["", "(*inv**************************************************************************)"], ["", "definition\n  m3_inv2_ticket :: \"m3_state set\"\nwhere\n  \"m3_inv2_ticket \\<equiv> {s. \\<forall>A B N K X.\n     A \\<notin> bad \\<longrightarrow>\n     Crypt (shrK A) \\<lbrace>Nonce N, Agent B, Key K, X\\<rbrace> \\<in> parts (IK s) \\<longrightarrow>\n       X = Crypt (shrK B) \\<lbrace>Key K, Agent A\\<rbrace> \\<and> K \\<in> range sesK\n  }\""], ["", "lemmas m3_inv2_ticketI =\n  m3_inv2_ticket_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m3_inv2_ticketE [elim] =\n  m3_inv2_ticket_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m3_inv2_ticketD =\n  m3_inv2_ticket_def [THEN setc_def_to_dest, rule_format, rotated -1]"], ["", "text \\<open>Invariance proof.\\<close>"], ["", "lemma PO_m3_inv2_ticket_init [iff]:\n  \"init m3 \\<subseteq> m3_inv2_ticket\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m3 \\<subseteq> m3_inv2_ticket", "by (auto simp add: m3_defs intro!: m3_inv2_ticketI)"], ["", "lemma PO_m3_inv2_ticket_trans [iff]:\n  \"{m3_inv2_ticket \\<inter> m3_inv1_lkeysec} trans m3 {> m3_inv2_ticket}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m3_inv2_ticket \\<inter> m3_inv1_lkeysec} TS.trans m3 {> m3_inv2_ticket}", "apply (auto simp add: PO_hoare_defs m3_defs intro!: m3_inv2_ticketI)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>A B N K X xa xd xe xf xg.\n       \\<lbrakk>A \\<notin> bad; xa \\<in> m3_inv2_ticket;\n        xa \\<in> m3_inv1_lkeysec; xd \\<notin> dom (runs xa);\n        msg.Agent xe \\<in> parts (IK xa); msg.Agent xf \\<in> parts (IK xa);\n        Nonce xg \\<in> parts (IK xa);\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> X =\n                         Crypt (shrK B) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n 2. \\<And>A B N K X xa xd xe xf xg.\n       \\<lbrakk>A \\<notin> bad; xa \\<in> m3_inv2_ticket;\n        xa \\<in> m3_inv1_lkeysec; xd \\<notin> dom (runs xa);\n        msg.Agent xe \\<in> parts (IK xa); msg.Agent xf \\<in> parts (IK xa);\n        Nonce xg \\<in> parts (IK xa);\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> K \\<in> range sesK\n 3. \\<And>A B N K X xa xb xe xf xi xj.\n       \\<lbrakk>A \\<notin> bad;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (insert xj (IK xa));\n        xa \\<in> m3_inv2_ticket; xa \\<in> m3_inv1_lkeysec;\n        runs xa xb = Some (Init, [xe, xf], []);\n        Crypt (shrK xe)\n         \\<lbrace>Nonce (xb $ na), msg.Agent xf, Key xi, xj\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> X =\n                         Crypt (shrK B) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n 4. \\<And>A B N K X xa xb xe xf xi xj.\n       \\<lbrakk>A \\<notin> bad;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (insert xj (IK xa));\n        xa \\<in> m3_inv2_ticket; xa \\<in> m3_inv1_lkeysec;\n        runs xa xb = Some (Init, [xe, xf], []);\n        Crypt (shrK xe)\n         \\<lbrace>Nonce (xb $ na), msg.Agent xf, Key xi, xj\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> K \\<in> range sesK\n 5. \\<And>A B N K X xa.\n       \\<lbrakk>A \\<notin> bad; xa \\<in> m3_inv2_ticket;\n        xa \\<in> m3_inv1_lkeysec;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> X =\n                         Crypt (shrK B) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n 6. \\<And>A B N K X xa.\n       \\<lbrakk>A \\<notin> bad; xa \\<in> m3_inv2_ticket;\n        xa \\<in> m3_inv1_lkeysec;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> analz (IK xa)\\<rbrakk>\n       \\<Longrightarrow> X =\n                         Crypt (shrK B) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n 7. \\<And>A B N K X xa.\n       \\<lbrakk>A \\<notin> bad; xa \\<in> m3_inv2_ticket;\n        xa \\<in> m3_inv1_lkeysec;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> K \\<in> range sesK\n 8. \\<And>A B N K X xa.\n       \\<lbrakk>A \\<notin> bad; xa \\<in> m3_inv2_ticket;\n        xa \\<in> m3_inv1_lkeysec;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> analz (IK xa)\\<rbrakk>\n       \\<Longrightarrow> K \\<in> range sesK", "apply (auto dest: m3_inv2_ticketD)\n\\<comment> \\<open>2 subgoals, from step4 [?]\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B N K X xa xb xe xf xi xj.\n       \\<lbrakk>A \\<notin> bad;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (insert xj (IK xa));\n        xa \\<in> m3_inv2_ticket; xa \\<in> m3_inv1_lkeysec;\n        runs xa xb = Some (Init, [xe, xf], []);\n        Crypt (shrK xe)\n         \\<lbrace>Nonce (xb $ na), msg.Agent xf, Key xi, xj\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> X =\n                         Crypt (shrK B) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n 2. \\<And>A B N K X xa xb xe xf xi xj.\n       \\<lbrakk>A \\<notin> bad;\n        Crypt (shrK A) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> parts (insert xj (IK xa));\n        xa \\<in> m3_inv2_ticket; xa \\<in> m3_inv1_lkeysec;\n        runs xa xb = Some (Init, [xe, xf], []);\n        Crypt (shrK xe)\n         \\<lbrace>Nonce (xb $ na), msg.Agent xf, Key xi, xj\\<rbrace>\n        \\<in> parts (IK xa)\\<rbrakk>\n       \\<Longrightarrow> K \\<in> range sesK", "apply (drule Body [where H=\"IK s\" for s], drule parts_cut,\n       auto dest: m3_inv2_ticketD)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_m3_inv2_ticket [iff]: \"reach m3 \\<subseteq> m3_inv2_ticket\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m3 \\<subseteq> m3_inv2_ticket", "by (rule inv_rule_incr) (auto del: subsetI)"], ["", "subsubsection \\<open>inv3: Session keys not used to encrypt other session keys\\<close>"], ["", "(*inv**************************************************************************)"], ["", "text \\<open>Session keys are not used to encrypt other keys. Proof requires\ngeneralization to sets of session keys.\n\nNOTE: For NSSK, this invariant cannot be inherited from the corresponding\nL2 invariant. The simulation relation is only an implication not an equivalence.\n\\<close>"], ["", "definition\n  m3_inv3_sesK_compr :: \"m3_state set\"\nwhere\n  \"m3_inv3_sesK_compr \\<equiv> {s. \\<forall>K KK.\n     KK \\<subseteq> range sesK \\<longrightarrow>\n     (Key K \\<in> analz (Key`KK \\<union> (IK s))) = (K \\<in> KK \\<or> Key K \\<in> analz (IK s))\n  }\""], ["", "lemmas m3_inv3_sesK_comprI = m3_inv3_sesK_compr_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m3_inv3_sesK_comprE = m3_inv3_sesK_compr_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m3_inv3_sesK_comprD = m3_inv3_sesK_compr_def [THEN setc_def_to_dest, rule_format]"], ["", "text \\<open>Additional lemma\\<close>"], ["", "lemmas insert_commute_Key = insert_commute [where x=\"Key K\" for K]"], ["", "lemmas m3_inv3_sesK_compr_simps =\n  m3_inv3_sesK_comprD\n  m3_inv3_sesK_comprD [where KK=\"{Kab}\" for Kab, simplified]\n  m3_inv3_sesK_comprD [where KK=\"insert Kab KK\" for Kab KK, simplified]\n  insert_commute_Key"], ["", "text \\<open>Invariance proof.\\<close>"], ["", "lemma PO_m3_inv3_sesK_compr_step4:\n  \"{m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec}\n      m3_step4 Ra A B Na Kab X\n   {> m3_inv3_sesK_compr}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "fix K KK s"], ["proof (state)\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "assume H:\n      \"s \\<in> m3_inv1_lkeysec\" \"s \\<in> m3_inv3_sesK_compr\" \"s \\<in> m3_inv2_ticket\"\n      \"runs s Ra = Some (Init, [A, B], [])\"\n      \"Na = Ra$na\"\n      \"KK \\<subseteq> range sesK\"\n      \"Crypt (shrK A) \\<lbrace>Nonce Na, Agent B, Key Kab, X\\<rbrace> \\<in> analz (IK s)\""], ["proof (state)\nthis:\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "have\n      \"(Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n          (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "proof (cases \"A \\<in> bad\")"], ["proof (state)\ngoal (2 subgoals):\n 1. A \\<in> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n 2. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "case True"], ["proof (state)\nthis:\n  A \\<in> bad\n\ngoal (2 subgoals):\n 1. A \\<in> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n 2. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "with H"], ["proof (chain)\npicking this:\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n  A \\<in> bad", "have \"X \\<in> analz (IK s)\""], ["proof (prove)\nusing this:\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n  A \\<in> bad\n\ngoal (1 subgoal):\n 1. X \\<in> analz (IK s)", "by (auto dest!: Decrypt)"], ["proof (state)\nthis:\n  X \\<in> analz (IK s)\n\ngoal (2 subgoals):\n 1. A \\<in> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n 2. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "moreover"], ["proof (state)\nthis:\n  X \\<in> analz (IK s)\n\ngoal (2 subgoals):\n 1. A \\<in> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n 2. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "with H"], ["proof (chain)\npicking this:\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n  X \\<in> analz (IK s)", "have \"X \\<in> analz (Key ` KK \\<union> IK s)\""], ["proof (prove)\nusing this:\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n  X \\<in> analz (IK s)\n\ngoal (1 subgoal):\n 1. X \\<in> analz (Key ` KK \\<union> IK s)", "by (auto intro: analz_monotonic)"], ["proof (state)\nthis:\n  X \\<in> analz (Key ` KK \\<union> IK s)\n\ngoal (2 subgoals):\n 1. A \\<in> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n 2. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "ultimately"], ["proof (chain)\npicking this:\n  X \\<in> analz (IK s)\n  X \\<in> analz (Key ` KK \\<union> IK s)", "show ?thesis"], ["proof (prove)\nusing this:\n  X \\<in> analz (IK s)\n  X \\<in> analz (Key ` KK \\<union> IK s)\n\ngoal (1 subgoal):\n 1. (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "using H"], ["proof (prove)\nusing this:\n  X \\<in> analz (IK s)\n  X \\<in> analz (Key ` KK \\<union> IK s)\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n\ngoal (1 subgoal):\n 1. (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "by (auto simp add: m3_inv3_sesK_compr_simps analz_insert_eq)"], ["proof (state)\nthis:\n  (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n  (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "case False"], ["proof (state)\nthis:\n  A \\<notin> bad\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "thus ?thesis"], ["proof (prove)\nusing this:\n  A \\<notin> bad\n\ngoal (1 subgoal):\n 1. (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "using H"], ["proof (prove)\nusing this:\n  A \\<notin> bad\n  s \\<in> m3_inv1_lkeysec\n  s \\<in> m3_inv3_sesK_compr\n  s \\<in> m3_inv2_ticket\n  runs s Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  KK \\<subseteq> range sesK\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK s)\n\ngoal (1 subgoal):\n 1. (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n    (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))", "by (fastforce simp add: m3_inv3_sesK_compr_simps\n                    dest!: m3_inv2_ticketD [OF analz_into_parts])"], ["proof (state)\nthis:\n  (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n  (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (Key K \\<in> analz (insert X (Key ` KK \\<union> IK s))) =\n  (K \\<in> KK \\<or> Key K \\<in> analz (insert X (IK s)))\n\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?s2 \\<in> m3_inv1_lkeysec; ?s2 \\<in> m3_inv3_sesK_compr;\n   ?s2 \\<in> m3_inv2_ticket; runs ?s2 Ra = Some (Init, [A, B], []);\n   Na = Ra $ na; ?KK2 \\<subseteq> range sesK;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?s2)\\<rbrakk>\n  \\<Longrightarrow> (Key ?K2\n                     \\<in> analz (insert X (Key ` ?KK2 \\<union> IK ?s2))) =\n                    (?K2 \\<in> ?KK2 \\<or>\n                     Key ?K2 \\<in> analz (insert X (IK ?s2)))\n\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s2 \\<in> m3_inv1_lkeysec; ?s2 \\<in> m3_inv3_sesK_compr;\n   ?s2 \\<in> m3_inv2_ticket; runs ?s2 Ra = Some (Init, [A, B], []);\n   Na = Ra $ na; ?KK2 \\<subseteq> range sesK;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?s2)\\<rbrakk>\n  \\<Longrightarrow> (Key ?K2\n                     \\<in> analz (insert X (Key ` ?KK2 \\<union> IK ?s2))) =\n                    (?K2 \\<in> ?KK2 \\<or>\n                     Key ?K2 \\<in> analz (insert X (IK ?s2)))\n\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}", "by (auto simp add: PO_hoare_defs m3_defs intro!: m3_inv3_sesK_comprI dest!: analz_Inj_IK)"], ["proof (state)\nthis:\n  {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n   m3_inv1_lkeysec} m3_step4 Ra A B Na Kab X {> m3_inv3_sesK_compr}\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>All together now.\\<close>"], ["", "lemmas PO_m3_inv3_sesK_compr_trans_lemmas =\n  PO_m3_inv3_sesK_compr_step4"], ["", "lemma PO_m3_inv3_sesK_compr_init [iff]:\n  \"init m3 \\<subseteq> m3_inv3_sesK_compr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m3 \\<subseteq> m3_inv3_sesK_compr", "by (auto simp add: m3_defs intro!: m3_inv3_sesK_comprI)"], ["", "lemma PO_m3_inv3_sesK_compr_trans [iff]:\n  \"{m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec}\n     trans m3\n   {> m3_inv3_sesK_compr}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec} TS.trans m3 {> m3_inv3_sesK_compr}", "by (auto simp add: m3_def m3_trans_def intro!: PO_m3_inv3_sesK_compr_trans_lemmas)\n   (auto simp add: PO_hoare_defs m3_defs m3_inv3_sesK_compr_simps intro!: m3_inv3_sesK_comprI)"], ["", "lemma PO_m3_inv3_sesK_compr [iff]: \"reach m3 \\<subseteq> m3_inv3_sesK_compr\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m3 \\<subseteq> m3_inv3_sesK_compr", "by (rule_tac J=\"m3_inv2_ticket \\<inter> m3_inv1_lkeysec\" in inv_rule_incr) (auto)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Refinement\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>Message abstraction and simulation relation\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>Abstraction function on sets of messages.\\<close>"], ["", "inductive_set\n  abs_msg :: \"msg set \\<Rightarrow> chmsg set\"\n  for H :: \"msg set\"\nwhere\n  am_M1:\n    \"\\<lbrace>Agent A, Agent B, Nonce Na\\<rbrace> \\<in> H\n  \\<Longrightarrow> Insec A B (Msg [aNon Na]) \\<in> abs_msg H\"\n| am_M2:\n    \"Crypt (shrK C) \\<lbrace>Nonce N, Agent B, Key K, X\\<rbrace> \\<in> H\n  \\<Longrightarrow> Secure Sv C (Msg [aNon N, aAgt B, aKey K]) \\<in> abs_msg H\"\n| am_M3:\n    \"Crypt (shrK C) \\<lbrace>Key K, Agent A\\<rbrace> \\<in> H\n  \\<Longrightarrow> Secure Sv C (Msg [aKey K, aAgt A]) \\<in> abs_msg H\"\n| am_M4:\n    \"Crypt K (Nonce N) \\<in> H\n  \\<Longrightarrow> dAuth K (Msg [aNon N]) \\<in> abs_msg H\"\n| am_M5:\n    \"Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace> \\<in> H\n  \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N']) \\<in> abs_msg H\""], ["", "text \\<open>R23: The simulation relation. This is a data refinement of\nthe insecure and secure channels of refinement 2.\\<close>"], ["", "definition\n  R23_msgs :: \"(m2_state \\<times> m3_state) set\" where\n  \"R23_msgs \\<equiv> {(s, t). abs_msg (parts (IK t)) \\<subseteq> chan s}\""], ["", "definition\n  R23_keys :: \"(m2_state \\<times> m3_state) set\" where     \\<comment> \\<open>only an implication!\\<close>\n  \"R23_keys \\<equiv> {(s, t). \\<forall>KK K. KK \\<subseteq> range sesK \\<longrightarrow>\n     Key K \\<in> analz (Key`KK \\<union> IK t) \\<longrightarrow> aKey K \\<in> extr (aKey`KK \\<union> ik0) (chan s)\n  }\""], ["", "definition\n  R23_non :: \"(m2_state \\<times> m3_state) set\" where      \\<comment> \\<open>only an implication!\\<close>\n  \"R23_non \\<equiv> {(s, t). \\<forall>KK N. KK \\<subseteq> range sesK \\<longrightarrow>\n     Nonce N \\<in> analz (Key`KK \\<union> IK t) \\<longrightarrow> aNon N \\<in> extr (aKey`KK \\<union> ik0) (chan s)\n  }\""], ["", "definition\n  R23_pres :: \"(m2_state \\<times> m3_state) set\" where\n  \"R23_pres \\<equiv> {(s, t). runs s = runs t \\<and> leak s = leak t}\""], ["", "definition\n  R23 :: \"(m2_state \\<times> m3_state) set\" where\n  \"R23 \\<equiv> R23_msgs \\<inter> R23_keys \\<inter> R23_non \\<inter> R23_pres\""], ["", "lemmas R23_defs =\n  R23_def R23_msgs_def R23_keys_def R23_non_def R23_pres_def"], ["", "text \\<open>The mediator function is the identity here.\\<close>"], ["", "definition\n  med32 :: \"m3_obs \\<Rightarrow> m2_obs\" where\n  \"med32 \\<equiv> id\""], ["", "lemmas R23_msgsI = R23_msgs_def [THEN rel_def_to_intro, simplified, rule_format]"], ["", "lemmas R23_msgsE [elim] = R23_msgs_def [THEN rel_def_to_elim, simplified, rule_format]"], ["", "lemmas R23_msgsE' [elim] =\n  R23_msgs_def [THEN rel_def_to_dest, simplified, rule_format, THEN subsetD]"], ["", "lemmas R23_keysI = R23_keys_def [THEN rel_def_to_intro, simplified, rule_format]"], ["", "lemmas R23_keysE [elim] = R23_keys_def [THEN rel_def_to_elim, simplified, rule_format]"], ["", "lemmas R23_keysD = R23_keys_def [THEN rel_def_to_dest, simplified, rule_format, rotated 2]"], ["", "lemmas R23_nonI = R23_non_def [THEN rel_def_to_intro, simplified, rule_format]"], ["", "lemmas R23_nonE [elim] = R23_non_def [THEN rel_def_to_elim, simplified, rule_format]"], ["", "lemmas R23_nonD = R23_non_def [THEN rel_def_to_dest, simplified, rule_format, rotated 2]"], ["", "lemmas R23_presI = R23_pres_def [THEN rel_def_to_intro, simplified, rule_format]"], ["", "lemmas R23_presE [elim] = R23_pres_def [THEN rel_def_to_elim, simplified, rule_format]"], ["", "lemmas R23_intros = R23_msgsI R23_keysI R23_nonI R23_presI"], ["", "text \\<open>Further lemmas: general lemma for simplifier and different instantiations.\\<close>"], ["", "lemmas R23_keys_dests =\n  R23_keysD\n  R23_keysD [where KK=\"{}\", simplified]\n  R23_keysD [where KK=\"{K}\" for K, simplified]\n  R23_keysD [where KK=\"insert K KK\" for K KK, simplified, OF _ _ conjI]"], ["", "lemmas R23_non_dests =\n  R23_nonD\n  R23_nonD [where KK=\"{}\", simplified]\n  R23_nonD [where KK=\"{K}\" for K, simplified]\n  R23_nonD [where KK=\"insert K KK\" for K KK, simplified, OF _ _ conjI]"], ["", "lemmas R23_dests = R23_keys_dests R23_non_dests"], ["", "(* lemmas insert_commute_Key = insert_commute [where x=\"Key K\" for K]  *)\n(*\nlemmas R23_keys_emptyD =\n  R23_keysD [where KK=\"{}\", simplified, THEN iffD1, rotated 1]\n  R23_keysD [where KK=\"{}\", simplified, THEN iffD2, rotated 1]\n*)"], ["", "subsubsection \\<open>General lemmas\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>General facts about @{term \"abs_msg\"}\\<close>"], ["", "declare abs_msg.intros [intro!]"], ["", "declare abs_msg.cases [elim!]"], ["", "lemma abs_msg_empty: \"abs_msg {} = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_msg {} = {}", "by (auto)"], ["", "lemma abs_msg_Un [simp]:\n  \"abs_msg (G \\<union> H) = abs_msg G \\<union> abs_msg H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. abs_msg (G \\<union> H) = abs_msg G \\<union> abs_msg H", "by (auto)"], ["", "lemma abs_msg_mono [elim]:\n  \"\\<lbrakk> m \\<in> abs_msg G; G \\<subseteq> H \\<rbrakk> \\<Longrightarrow> m \\<in> abs_msg H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<in> abs_msg G; G \\<subseteq> H\\<rbrakk>\n    \\<Longrightarrow> m \\<in> abs_msg H", "by (auto)"], ["", "lemma abs_msg_insert_mono [intro]:\n  \"\\<lbrakk> m \\<in> abs_msg H \\<rbrakk> \\<Longrightarrow> m \\<in> abs_msg (insert m' H)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> abs_msg H \\<Longrightarrow> m \\<in> abs_msg (insert m' H)", "by (auto)"], ["", "text \\<open>Facts about @{term \"abs_msg\"} concerning abstraction of fakeable\nmessages. This is crucial for proving the refinement of the intruder event.\\<close>"], ["", "lemma abs_msg_DY_subset_fakeable:\n  \"\\<lbrakk> (s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys; (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec \\<rbrakk>\n  \\<Longrightarrow> abs_msg (synth (analz (IK t))) \\<subseteq> fake ik0 (dom (runs s)) (chan s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n     (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec\\<rbrakk>\n    \\<Longrightarrow> abs_msg (synth (analz (IK t)))\n                      \\<subseteq> fake ik0 (dom (runs s)) (chan s)", "apply (auto)\n\\<comment> \\<open>9 subgoals, deal with replays first\\<close>"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt (shrK C) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt (shrK C) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K (Nonce N) \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 7. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 8. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 9. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "prefer 2"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt (shrK C) \\<lbrace>Nonce N, msg.Agent B, Key K, X\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt (shrK C) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K (Nonce N) \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 7. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 8. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 9. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "apply (blast)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt (shrK C) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K (Nonce N) \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 7. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 8. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "prefer 3"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt (shrK C) \\<lbrace>Key K, msg.Agent A\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K (Nonce N) \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 7. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 8. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "apply (blast)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K (Nonce N) \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 7. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "prefer 4"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K (Nonce N) \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 7. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "apply (blast)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "prefer 5"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Crypt K \\<lbrace>Nonce N, Nonce N'\\<rbrace>\n        \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 6. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "apply (blast)\n\\<comment> \\<open>remaining 5 subgoals are real fakes\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>A B Na.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Nonce Na \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> Insec A B (Msg [aNon Na])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 2. \\<And>C N B K X.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Nonce N \\<in> analz (IK t); X \\<in> synth (analz (IK t));\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aNon N, aAgt B, aKey K])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 3. \\<And>C K A.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec; C \\<in> bad;\n        Key K \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> StatCh secure Sv C (Msg [aKey K, aAgt A])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 4. \\<And>K N.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)\n 5. \\<And>K N N'.\n       \\<lbrakk>(s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys;\n        (s, t) \\<in> R23_non; t \\<in> m3_inv1_lkeysec;\n        Key K \\<in> analz (IK t); Nonce N \\<in> analz (IK t);\n        Nonce N' \\<in> analz (IK t)\\<rbrakk>\n       \\<Longrightarrow> dAuth K (Msg [aNon N, aNon N'])\n                         \\<in> fake ik0 (dom (runs s)) (chan s)", "apply (intro fake_StatCh fake_DynCh, auto dest: R23_dests)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsubsection \\<open>Refinement proof\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>Pair decomposition. These were set to \\texttt{elim!}, which is too\nagressive here.\\<close>"], ["", "declare MPair_analz [rule del, elim]"], ["", "declare MPair_parts [rule del, elim]"], ["", "text \\<open>Protocol events.\\<close>"], ["", "lemma PO_m3_step1_refines_m2_step1:\n  \"{R23}\n     (m2_step1 Ra A B Na), (m3_step1 Ra A B Na)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23} m2_step1 Ra A B Na, m3_step1 Ra A B Na {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros)\n   (auto)"], ["", "lemma PO_m3_step2_refines_m2_step2:\n  \"{R23}\n     (m2_step2 Rb A B), (m3_step2 Rb A B)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23} m2_step2 Rb A B, m3_step2 Rb A B {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros)"], ["", "lemma PO_m3_step3_refines_m2_step3:\n  \"{R23 \\<inter> (m2_inv3a_sesK_compr) \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv1_lkeysec)}\n     (m2_step3 Rs A B Na Kab), (m3_step3 Rs A B Na Kab)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "assume H:\n      \"(s, t) \\<in> R23_msgs\" \"(s, t) \\<in> R23_keys\" \"(s, t) \\<in> R23_non\" \"(s, t) \\<in> R23_pres\"\n      \"s \\<in> m2_inv3a_sesK_compr\" \"t \\<in> m3_inv3_sesK_compr\" \"t \\<in> m3_inv1_lkeysec\"\n      \"Kab = sesK (Rs$sk)\" \"Rs \\<notin> dom (runs t)\"\n      \"\\<lbrace> Agent A, Agent B, Nonce Na \\<rbrace> \\<in> parts (IK t)\""], ["proof (state)\nthis:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3a_sesK_compr\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv1_lkeysec\n  Kab = sesK (Rs $ sk)\n  Rs \\<notin> dom (runs t)\n  \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace> \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "let ?s'=\n      \"s\\<lparr> runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n          chan := insert (Secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n                 (insert (Secure Sv B (Msg [aKey Kab, aAgt A])) (chan s)) \\<rparr>\""], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "let ?t'=\n      \"t\\<lparr> runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n          IK := insert\n                  (Crypt (shrK A)\n                    \\<lbrace>Nonce Na, Agent B, Key Kab,\n                       Crypt (shrK B) \\<lbrace>Key Kab, Agent A\\<rbrace>\\<rbrace>)\n                  (IK t) \\<rparr>\""], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "have \"(?s', ?t') \\<in> R23_msgs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_msgs", "using H"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3a_sesK_compr\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv1_lkeysec\n  Kab = sesK (Rs $ sk)\n  Rs \\<notin> dom (runs t)\n  \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace> \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_msgs", "by (-) (rule R23_intros, auto)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_msgs\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_msgs\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "have \"(?s', ?t') \\<in> R23_keys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_keys", "using H"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3a_sesK_compr\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv1_lkeysec\n  Kab = sesK (Rs $ sk)\n  Rs \\<notin> dom (runs t)\n  \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace> \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_keys", "by (-) (rule R23_intros,\n            auto simp add: m2_inv3a_sesK_compr_simps m3_inv3_sesK_compr_simps dest: R23_keys_dests)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "have \"(?s', ?t') \\<in> R23_non\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_non", "using H"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3a_sesK_compr\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv1_lkeysec\n  Kab = sesK (Rs $ sk)\n  Rs \\<notin> dom (runs t)\n  \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace> \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_non", "by (-) (rule R23_intros,\n            auto simp add: m2_inv3a_sesK_compr_simps m3_inv3_sesK_compr_simps dest: R23_non_dests)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_non\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_non\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "have \"(?s', ?t') \\<in> R23_pres\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_pres", "using H"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3a_sesK_compr\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv1_lkeysec\n  Kab = sesK (Rs $ sk)\n  Rs \\<notin> dom (runs t)\n  \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace> \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         chan :=\n           insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n            (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n              (chan s))\\<rparr>,\n     t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n         IK :=\n           insert\n            (Crypt (shrK A)\n              \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                Crypt (shrK B)\n                 \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n            (IK t)\\<rparr>)\n    \\<in> R23_pres", "by (-) (rule R23_intros, auto)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "note calculation"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_msgs\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_keys\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_non\n  (s\\<lparr>runs := runs s(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       chan :=\n         insert (StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]))\n          (insert (StatCh secure Sv B (Msg [aKey Kab, aAgt A]))\n            (chan s))\\<rparr>,\n   t\\<lparr>runs := runs t(Rs \\<mapsto> (Serv, [A, B], [aNon Na])),\n       IK :=\n         insert\n          (Crypt (shrK A)\n            \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n              Crypt (shrK B)\n               \\<lbrace>Key Kab, msg.Agent A\\<rbrace>\\<rbrace>)\n          (IK t)\\<rparr>)\n  \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_msgs\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_keys\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_non\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_msgs\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_keys\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_non\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3a_sesK_compr; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv1_lkeysec; Kab = sesK (Rs $ sk);\n   Rs \\<notin> dom (runs ?t2);\n   \\<lbrace>msg.Agent A, msg.Agent B, Nonce Na\\<rbrace>\n   \\<in> parts (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           chan :=\n                             insert\n                              (StatCh secure Sv A\n                                (Msg [aNon Na, aAgt B, aKey Kab]))\n                              (insert\n                                (StatCh secure Sv B\n                                  (Msg [aKey Kab, aAgt A]))\n                                (chan ?s2))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Rs \\<mapsto>\n                                  (Serv, [A, B], [aNon Na])),\n                           IK :=\n                             insert\n                              (Crypt (shrK A)\n                                \\<lbrace>Nonce Na, msg.Agent B, Key Kab,\n                                  Crypt (shrK B)\n                                   \\<lbrace>Key Kab,\n                                     msg.Agent A\\<rbrace>\\<rbrace>)\n                              (IK ?t2)\\<rparr>)\n                    \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3a_sesK_compr \\<times>\n     (m3_inv3_sesK_compr \\<inter>\n      m3_inv1_lkeysec)} m2_step3 Rs A B Na\n                         Kab, m3_step3 Rs A B Na Kab {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs)"], ["proof (state)\nthis:\n  {R23 \\<inter>\n   m2_inv3a_sesK_compr \\<times>\n   (m3_inv3_sesK_compr \\<inter>\n    m3_inv1_lkeysec)} m2_step3 Rs A B Na Kab, m3_step3 Rs A B Na Kab {> R23}\n\ngoal:\nNo subgoals!", "qed"], ["", "(*  with equality in R23_keys [OLD, before adding session key compromise]:\n\ngoal (1 subgoal):\n 1. \\<And>s t. \\<lbrakk>t \\<in> m3_inv3_keyuse; t \\<in> m3_inv1_lkeysec; t \\<in> m3_inv5_badkeys;\n           Kab \\<notin> dom (runs t); Kab \\<in> range sesK;\n           \\<lbrace>Agent A, Agent B, Nonce Na\\<rbrace> \\<in> parts (IK t);\n           Kab \\<notin> keysFor (analz (IK t)); Key (shrK A) \\<notin> analz (IK t);\n           (s, t) \\<in> R23_msgs; (s, t) \\<in> R23_keys; (s, t) \\<in> R23_pres; Kab \\<noteq> shrK A;\n           Key (shrK B) \\<in> analz (IK t); Kab \\<noteq> shrK B; A \\<notin> bad; B \\<in> bad\\<rbrakk>\n          \\<Longrightarrow> Key Kab \\<in> analz (IK t)\n\nThis does NOT hold, since Kab is revealed in abstract model when A \\<notin> bad; B \\<in> bad,\nbut not in concrete one, since here it is protected by A's encryption.\n*)"], ["", "lemma PO_m3_step4_refines_m2_step4:\n  \"{R23 \\<inter> (m2_inv3b_sesK_compr_non)\n        \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec)}\n     (m2_step4 Ra A B Na Kab), (m3_step4 Ra A B Na Kab X)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "fix s t"], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "assume H:\n      \"(s, t) \\<in> R23_msgs\" \"(s, t) \\<in> R23_keys\" \"(s, t) \\<in> R23_non\" \"(s, t) \\<in> R23_pres\"\n      \"s \\<in> m2_inv3b_sesK_compr_non\"\n      \"t \\<in> m3_inv3_sesK_compr\" \"t \\<in> m3_inv2_ticket\" \"t \\<in> m3_inv1_lkeysec\"\n      \"runs t Ra = Some (Init, [A, B], [])\"\n      \"Na = Ra$na\"\n      \"Crypt (shrK A) \\<lbrace>Nonce Na, Agent B, Key Kab, X\\<rbrace> \\<in> analz (IK t)\""], ["proof (state)\nthis:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "let ?s' = \"s\\<lparr> runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab])) \\<rparr>\"\n    and ?t' = \"t\\<lparr> runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n                  IK := insert X (IK t) \\<rparr>\""], ["proof (state)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "from H"], ["proof (chain)\npicking this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)", "have \"Secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]) \\<in> chan s\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]) \\<in> chan s", "by auto"], ["proof (state)\nthis:\n  StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]) \\<in> chan s\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "moreover"], ["proof (state)\nthis:\n  StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]) \\<in> chan s\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "have \"X \\<in> parts (IK t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> parts (IK t)", "using H"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. X \\<in> parts (IK t)", "by (auto dest!: Body MPair_parts)"], ["proof (state)\nthis:\n  X \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "hence \"(?s', ?t') \\<in> R23_msgs\""], ["proof (prove)\nusing this:\n  X \\<in> parts (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_msgs", "using H"], ["proof (prove)\nusing this:\n  X \\<in> parts (IK t)\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_msgs", "by (auto intro!: R23_intros)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_msgs\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_msgs\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "have \"(?s', ?t') \\<in> R23_keys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys\n 2. \\<not> ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "assume \"A \\<in> bad\""], ["proof (state)\nthis:\n  A \\<in> bad\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys\n 2. \\<not> ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "with H"], ["proof (chain)\npicking this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  A \\<in> bad", "have \"X \\<in> analz (IK t)\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  A \\<in> bad\n\ngoal (1 subgoal):\n 1. X \\<in> analz (IK t)", "by (-) (drule Decrypt, auto)"], ["proof (state)\nthis:\n  X \\<in> analz (IK t)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys\n 2. \\<not> ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "with H"], ["proof (chain)\npicking this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X \\<in> analz (IK t)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "by (-) (rule R23_intros, auto dest!: analz_cut  intro: analz_monotonic)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "assume \"A \\<notin> bad\""], ["proof (state)\nthis:\n  A \\<notin> bad\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "note H"], ["proof (state)\nthis:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "moreover"], ["proof (state)\nthis:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "with \\<open>A \\<notin> bad\\<close>"], ["proof (chain)\npicking this:\n  A \\<notin> bad\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)", "have \"X = Crypt (shrK B) \\<lbrace>Key Kab, Agent A\\<rbrace> \\<and> Kab \\<in> range sesK\""], ["proof (prove)\nusing this:\n  A \\<notin> bad\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n    Kab \\<in> range sesK", "by (auto dest!: m3_inv2_ticketD)"], ["proof (state)\nthis:\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "moreover"], ["proof (state)\nthis:\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "{"], ["proof (state)\nthis:\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "assume H1: \"Key (shrK B) \\<in> analz (IK t)\""], ["proof (state)\nthis:\n  Key (shrK B) \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "have \"aKey Kab \\<in> extr ik0 (chan s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "note calculation"], ["proof (state)\nthis:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "moreover"], ["proof (state)\nthis:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "hence \"Secure Sv B (Msg [aKey Kab, aAgt A]) \\<in> chan s\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. StatCh secure Sv B (Msg [aKey Kab, aAgt A]) \\<in> chan s", "by (-) (drule analz_into_parts, drule Body, elim MPair_parts, auto)"], ["proof (state)\nthis:\n  StatCh secure Sv B (Msg [aKey Kab, aAgt A]) \\<in> chan s\n\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "ultimately"], ["proof (chain)\npicking this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n  StatCh secure Sv B (Msg [aKey Kab, aAgt A]) \\<in> chan s", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n  StatCh secure Sv B (Msg [aKey Kab, aAgt A]) \\<in> chan s\n\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "using H1"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n  StatCh secure Sv B (Msg [aKey Kab, aAgt A]) \\<in> chan s\n  Key (shrK B) \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. aKey Kab \\<in> extr ik0 (chan s)", "by auto"], ["proof (state)\nthis:\n  aKey Kab \\<in> extr ik0 (chan s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  aKey Kab \\<in> extr ik0 (chan s)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "}"], ["proof (state)\nthis:\n  Key (shrK B) \\<in> analz (IK t) \\<Longrightarrow>\n  aKey Kab \\<in> extr ik0 (chan s)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "ultimately"], ["proof (chain)\npicking this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n  Key (shrK B) \\<in> analz (IK t) \\<Longrightarrow>\n  aKey Kab \\<in> extr ik0 (chan s)", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n  Key (shrK B) \\<in> analz (IK t) \\<Longrightarrow>\n  aKey Kab \\<in> extr ik0 (chan s)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_keys", "by (-) (rule R23_intros, auto simp add: m3_inv3_sesK_compr_simps)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_keys\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "have \"(?s', ?t') \\<in> R23_non\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "proof (cases)"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non\n 2. \\<not> ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "assume \"A \\<in> bad\""], ["proof (state)\nthis:\n  A \\<in> bad\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non\n 2. \\<not> ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "hence \"X \\<in> analz (IK t)\""], ["proof (prove)\nusing this:\n  A \\<in> bad\n\ngoal (1 subgoal):\n 1. X \\<in> analz (IK t)", "using H"], ["proof (prove)\nusing this:\n  A \\<in> bad\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. X \\<in> analz (IK t)", "by (-) (drule Decrypt, auto)"], ["proof (state)\nthis:\n  X \\<in> analz (IK t)\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non\n 2. \\<not> ?P \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "thus ?thesis"], ["proof (prove)\nusing this:\n  X \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "using H"], ["proof (prove)\nusing this:\n  X \\<in> analz (IK t)\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "by (-) (rule R23_intros, auto dest!: analz_cut intro: analz_monotonic)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_non\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "assume \"A \\<notin> bad\""], ["proof (state)\nthis:\n  A \\<notin> bad\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "hence \"X = Crypt (shrK B) \\<lbrace>Key Kab, Agent A \\<rbrace> \\<and> Kab \\<in> range sesK\""], ["proof (prove)\nusing this:\n  A \\<notin> bad\n\ngoal (1 subgoal):\n 1. X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n    Kab \\<in> range sesK", "using H"], ["proof (prove)\nusing this:\n  A \\<notin> bad\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n    Kab \\<in> range sesK", "by (auto dest!: m3_inv2_ticketD)"], ["proof (state)\nthis:\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. A \\<notin> bad \\<Longrightarrow>\n    (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "thus ?thesis"], ["proof (prove)\nusing this:\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "using H"], ["proof (prove)\nusing this:\n  X = Crypt (shrK B) \\<lbrace>Key Kab, msg.Agent A\\<rbrace> \\<and>\n  Kab \\<in> range sesK\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_non", "by (-) (rule R23_intros,\n                auto simp add: m2_inv3b_sesK_compr_non_simps m3_inv3_sesK_compr_simps\n                     dest: R23_non_dests)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_non\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_non\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_non\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "have \"(?s', ?t') \\<in> R23_pres\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_pres", "using H"], ["proof (prove)\nusing this:\n  (s, t) \\<in> R23_msgs\n  (s, t) \\<in> R23_keys\n  (s, t) \\<in> R23_non\n  (s, t) \\<in> R23_pres\n  s \\<in> m2_inv3b_sesK_compr_non\n  t \\<in> m3_inv3_sesK_compr\n  t \\<in> m3_inv2_ticket\n  t \\<in> m3_inv1_lkeysec\n  runs t Ra = Some (Init, [A, B], [])\n  Na = Ra $ na\n  Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n  \\<in> analz (IK t)\n\ngoal (1 subgoal):\n 1. (s\\<lparr>runs := runs s(Ra \\<mapsto>\n                (Init, [A, B], [aKey Kab]))\\<rparr>,\n     t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n         IK := insert X (IK t)\\<rparr>)\n    \\<in> R23_pres", "by (auto intro!: R23_intros)"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "moreover"], ["proof (state)\nthis:\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "note calculation"], ["proof (state)\nthis:\n  StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab]) \\<in> chan s\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_msgs\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_keys\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_non\n  (s\\<lparr>runs := runs s(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))\\<rparr>,\n   t\\<lparr>runs := runs t(Ra \\<mapsto> (Init, [A, B], [aKey Kab])),\n       IK := insert X (IK t)\\<rparr>)\n  \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab])\n                    \\<in> chan ?s2\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_msgs\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_keys\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_non\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> StatCh secure Sv A (Msg [aNon Na, aAgt B, aKey Kab])\n                    \\<in> chan ?s2\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_msgs\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_keys\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_non\n  \\<lbrakk>(?s2, ?t2) \\<in> R23_msgs; (?s2, ?t2) \\<in> R23_keys;\n   (?s2, ?t2) \\<in> R23_non; (?s2, ?t2) \\<in> R23_pres;\n   ?s2 \\<in> m2_inv3b_sesK_compr_non; ?t2 \\<in> m3_inv3_sesK_compr;\n   ?t2 \\<in> m3_inv2_ticket; ?t2 \\<in> m3_inv1_lkeysec;\n   runs ?t2 Ra = Some (Init, [A, B], []); Na = Ra $ na;\n   Crypt (shrK A) \\<lbrace>Nonce Na, msg.Agent B, Key Kab, X\\<rbrace>\n   \\<in> analz (IK ?t2)\\<rbrakk>\n  \\<Longrightarrow> (?s2\\<lparr>runs := runs ?s2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab]))\\<rparr>,\n                     ?t2\\<lparr>runs := runs ?t2(Ra \\<mapsto>\n                                  (Init, [A, B], [aKey Kab])),\n                           IK := insert X (IK ?t2)\\<rparr>)\n                    \\<in> R23_pres\n\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     m2_inv3b_sesK_compr_non \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                         Kab, m3_step4 Ra A B Na Kab X {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs dest!: analz_Inj_IK)"], ["proof (state)\nthis:\n  {R23 \\<inter>\n   m2_inv3b_sesK_compr_non \\<times>\n   (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n    m3_inv1_lkeysec)} m2_step4 Ra A B Na\n                       Kab, m3_step4 Ra A B Na Kab X {> R23}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma PO_m3_step5_refines_m2_step5:\n  \"{R23}\n     (m2_step5 Rb A B Nb Kab), (m3_step5 Rb A B Nb Kab)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23} m2_step5 Rb A B Nb Kab, m3_step5 Rb A B Nb Kab {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros)\n   (auto)"], ["", "lemma PO_m3_step6_refines_m2_step6:\n  \"{R23}\n     (m2_step6 Ra A B Na Nb Kab), (m3_step6 Ra A B Na Nb Kab)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23} m2_step6 Ra A B Na Nb Kab, m3_step6 Ra A B Na Nb Kab {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros)\n   (auto)"], ["", "lemma PO_m3_step7_refines_m2_step7:\n  \"{R23}\n     (m2_step7 Rb A B Nb Kab), (m3_step7 Rb A B Nb Kab)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23} m2_step7 Rb A B Nb Kab, m3_step7 Rb A B Nb Kab {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros)"], ["", "text \\<open>Intruder events.\\<close>"], ["", "lemma PO_m3_leak_refines_m2_leak:\n \"{R23}\n     m2_leak Rs Ra Rb A B, m3_leak Rs Ra Rb A B\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23} m2_leak Rs Ra Rb A B, m3_leak Rs Ra Rb A B {> R23}", "by (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros)\n   (auto dest: R23_dests)"], ["", "lemma PO_m3_DY_fake_refines_m2_fake:\n  \"{R23 \\<inter> UNIV \\<times> m3_inv1_lkeysec}\n     m2_fake, m3_DY_fake\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23 \\<inter> UNIV \\<times> m3_inv1_lkeysec} m2_fake, m3_DY_fake {> R23}", "apply (auto simp add: PO_rhoare_defs R23_def m2_defs m3_defs intro!: R23_intros\n            del: abs_msg.cases)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>a y x.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; x \\<in> abs_msg (parts (IK y))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fake ik0 (dom (runs a)) (chan a)\n 2. \\<And>a y x.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec;\n        x \\<in> abs_msg (synth (analz (IK y)))\\<rbrakk>\n       \\<Longrightarrow> x \\<in> fake ik0 (dom (runs a)) (chan a)\n 3. \\<And>a y KK K.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; KK \\<subseteq> range sesK;\n        Key K \\<in> analz (Key ` KK \\<union> IK y)\\<rbrakk>\n       \\<Longrightarrow> aKey K \\<in> extr (aKey ` KK \\<union> ik0) (chan a)\n 4. \\<And>a y KK K.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; KK \\<subseteq> range sesK;\n        Key K \\<in> analz (IK y)\\<rbrakk>\n       \\<Longrightarrow> aKey K \\<in> extr (aKey ` KK \\<union> ik0) (chan a)\n 5. \\<And>a y KK N.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; KK \\<subseteq> range sesK;\n        Nonce N \\<in> analz (Key ` KK \\<union> IK y)\\<rbrakk>\n       \\<Longrightarrow> aNon N \\<in> extr (aKey ` KK \\<union> ik0) (chan a)\n 6. \\<And>a y KK N.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; KK \\<subseteq> range sesK;\n        Nonce N \\<in> analz (IK y)\\<rbrakk>\n       \\<Longrightarrow> aNon N \\<in> extr (aKey ` KK \\<union> ik0) (chan a)", "apply (auto intro: abs_msg_DY_subset_fakeable [THEN subsetD]\n            del: abs_msg.cases)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a y KK K.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; KK \\<subseteq> range sesK;\n        Key K \\<in> analz (IK y)\\<rbrakk>\n       \\<Longrightarrow> aKey K \\<in> extr (aKey ` KK \\<union> ik0) (chan a)\n 2. \\<And>a y KK N.\n       \\<lbrakk>(a, y) \\<in> R23_msgs; (a, y) \\<in> R23_keys;\n        (a, y) \\<in> R23_non; (a, y) \\<in> R23_pres;\n        y \\<in> m3_inv1_lkeysec; KK \\<subseteq> range sesK;\n        Nonce N \\<in> analz (IK y)\\<rbrakk>\n       \\<Longrightarrow> aNon N \\<in> extr (aKey ` KK \\<union> ik0) (chan a)", "apply (auto dest: R23_dests)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>All together now...\\<close>"], ["", "lemmas PO_m3_trans_refines_m2_trans =\n  PO_m3_step1_refines_m2_step1 PO_m3_step2_refines_m2_step2\n  PO_m3_step3_refines_m2_step3 PO_m3_step4_refines_m2_step4\n  PO_m3_step5_refines_m2_step5 PO_m3_step6_refines_m2_step6\n  PO_m3_step7_refines_m2_step7 PO_m3_leak_refines_m2_leak\n  PO_m3_DY_fake_refines_m2_fake"], ["", "lemma PO_m3_refines_init_m2 [iff]:\n  \"init m3 \\<subseteq> R23``(init m2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m3 \\<subseteq> R23 `` init m2", "by (auto simp add: R23_def m2_defs m3_defs intro!: R23_intros)"], ["", "lemma PO_m3_refines_trans_m2 [iff]:\n  \"{R23 \\<inter> (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non)\n        \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec)}\n     (trans m2), (trans m3)\n   {> R23}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R23 \\<inter>\n     (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} TS.trans m2, TS.trans m3 {> R23}", "apply (auto simp add: m3_def m3_trans_def m2_def m2_trans_def)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>x xc xd xe.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step1 x xc xd xe {> R23}\n 2. \\<And>xa xc xd.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step2 xa xc xd {> R23}\n 3. \\<And>xb xc xd xe xg.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step3 xb xc xd xe\n         xg {> R23}\n 4. \\<And>x xc xd xe xg xh.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step4 x xc xd xe xg\n         xh {> R23}\n 5. \\<And>xa xc xd xf xg.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step5 xa xc xd xf\n         xg {> R23}\n 6. \\<And>x xc xd xe xf xg.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step6 x xc xd xe xf\n         xg {> R23}\n 7. \\<And>xa xc xd xf xg.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_step7 xa xc xd xf\n         xg {> R23}\n 8. \\<And>x xa xb xc xd.\n       {R23 \\<inter>\n        (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n        (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n         m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                                (\\<Union>xe xf Kab.\n                                    m2_step1 xb x xa xe \\<union>\n                                    m2_step2 xc x xa \\<union>\n                                    m2_step3 xd x xa xe Kab \\<union>\n                                    m2_step4 xb x xa xe Kab \\<union>\n                                    m2_step5 xc x xa xf Kab \\<union>\n                                    m2_step6 xb x xa xe xf Kab \\<union>\n                                    m2_step7 xc x xa xf Kab) \\<union>\n                                m2_leak xd xb xc x xa) \\<union>\n                            m2_fake)\\<^sup>=, m3_leak xb x xa xc xd {> R23}\n 9. {R23 \\<inter>\n     (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n     (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n      m3_inv1_lkeysec)} ((\\<Union>x xa xb xc xd.\n                             (\\<Union>xe xf Kab.\n                                 m2_step1 xb x xa xe \\<union>\n                                 m2_step2 xc x xa \\<union>\n                                 m2_step3 xd x xa xe Kab \\<union>\n                                 m2_step4 xb x xa xe Kab \\<union>\n                                 m2_step5 xc x xa xf Kab \\<union>\n                                 m2_step6 xb x xa xe xf Kab \\<union>\n                                 m2_step7 xc x xa xf Kab) \\<union>\n                             m2_leak xd xb xc x xa) \\<union>\n                         m2_fake)\\<^sup>=, m3_DY_fake {> R23}", "apply (blast intro!: PO_m3_trans_refines_m2_trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_m3_observation_consistent [iff]:\n  \"obs_consistent R23 med32 m2 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R23 med32 m2 m3", "by (auto simp add: obs_consistent_def R23_def med32_def m2_defs m3_defs)"], ["", "text \\<open>Refinement result.\\<close>"], ["", "lemma m3_refines_m2 [iff]:\n  \"refines\n     (R23 \\<inter> (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non)\n          \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec))\n     med32 m2 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines\n     (R23 \\<inter>\n      (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n      (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec))\n     med32 m2 m3", "by (rule Refinement_using_invariants) (auto)"], ["", "lemma m3_implements_m2 [iff]:\n  \"implements med32 m2 m3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implements med32 m2 m3", "by (rule refinement_soundness) (auto)"], ["", "subsection \\<open>Inherited invariants\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>inv4 (derived): Key secrecy for initiator\\<close>"], ["", "(*invh*************************************************************************)"], ["", "definition\n  m3_inv4_ikk_init :: \"m3_state set\"\nwhere\n  \"m3_inv4_ikk_init \\<equiv> {s. \\<forall>Ra K A B al.\n     runs s Ra = Some (Init, [A, B], aKey K # al) \\<longrightarrow> A \\<in> good \\<longrightarrow> B \\<in> good \\<longrightarrow>\n     Key K \\<in> analz (IK s) \\<longrightarrow>\n       (\\<exists>Nb'. (K, Ra $ na, Nb') \\<in> leak s)\n  }\""], ["", "lemmas m3_inv4_ikk_initI = m3_inv4_ikk_init_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m3_inv4_ikk_initE [elim] = m3_inv4_ikk_init_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m3_inv4_ikk_initD = m3_inv4_ikk_init_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "lemma PO_m3_inv4_ikk_init: \"reach m3 \\<subseteq> m3_inv4_ikk_init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m3 \\<subseteq> m3_inv4_ikk_init", "proof (rule INV_from_Refinement_using_invariants [OF m3_refines_m2])"], ["proof (state)\ngoal (3 subgoals):\n 1. Range\n     (R23 \\<inter>\n      (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n      (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n       m3_inv1_lkeysec) \\<inter>\n      ?I \\<times> ?J)\n    \\<subseteq> m3_inv4_ikk_init\n 2. reach m2 \\<subseteq> ?I\n 3. reach m3 \\<subseteq> ?J", "show \"Range (R23 \\<inter> (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non)\n                   \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec)\n                   \\<inter> m2_inv6_ikk_init \\<times> UNIV)\n      \\<subseteq> m3_inv4_ikk_init\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range\n     (R23 \\<inter>\n      (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n      (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n       m3_inv1_lkeysec) \\<inter>\n      m2_inv6_ikk_init \\<times> UNIV)\n    \\<subseteq> m3_inv4_ikk_init", "by (auto simp add: R23_def R23_pres_def intro!: m3_inv4_ikk_initI)\n       (elim m2_inv6_ikk_initE, auto dest: R23_keys_dests)"], ["proof (state)\nthis:\n  Range\n   (R23 \\<inter>\n    (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n    (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec) \\<inter>\n    m2_inv6_ikk_init \\<times> UNIV)\n  \\<subseteq> m3_inv4_ikk_init\n\ngoal (2 subgoals):\n 1. reach m2 \\<subseteq> m2_inv6_ikk_init\n 2. reach m3 \\<subseteq> UNIV", "qed auto"], ["", "subsubsection \\<open>inv5 (derived): Key secrecy for responder\\<close>"], ["", "(*invh*************************************************************************)"], ["", "definition\n  m3_inv5_ikk_resp :: \"m3_state set\"\nwhere\n  \"m3_inv5_ikk_resp \\<equiv> {s. \\<forall>Rb K A B al.\n     runs s Rb = Some (Resp, [A, B], aKey K # al) \\<longrightarrow> A \\<in> good \\<longrightarrow> B \\<in> good \\<longrightarrow>\n     Key K \\<in> analz (IK s) \\<longrightarrow>\n       K \\<in> Domain (leak s)\n  }\""], ["", "lemmas m3_inv5_ikk_respI = m3_inv5_ikk_resp_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m3_inv5_ikk_respE [elim] = m3_inv5_ikk_resp_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m3_inv5_ikk_respD = m3_inv5_ikk_resp_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "lemma PO_m3_inv4_ikk_resp: \"reach m3 \\<subseteq> m3_inv5_ikk_resp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m3 \\<subseteq> m3_inv5_ikk_resp", "proof (rule INV_from_Refinement_using_invariants [OF m3_refines_m2])"], ["proof (state)\ngoal (3 subgoals):\n 1. Range\n     (R23 \\<inter>\n      (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n      (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n       m3_inv1_lkeysec) \\<inter>\n      ?I \\<times> ?J)\n    \\<subseteq> m3_inv5_ikk_resp\n 2. reach m2 \\<subseteq> ?I\n 3. reach m3 \\<subseteq> ?J", "show \"Range (R23 \\<inter> (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non)\n                   \\<times> (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter> m3_inv1_lkeysec)\n                   \\<inter> m2_inv7_ikk_resp \\<times> UNIV)\n      \\<subseteq> m3_inv5_ikk_resp\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Range\n     (R23 \\<inter>\n      (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n      (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n       m3_inv1_lkeysec) \\<inter>\n      m2_inv7_ikk_resp \\<times> UNIV)\n    \\<subseteq> m3_inv5_ikk_resp", "by (auto simp add: R23_def R23_pres_def intro!: m3_inv5_ikk_respI)\n       (elim m2_inv7_ikk_respE, auto dest: R23_keys_dests)"], ["proof (state)\nthis:\n  Range\n   (R23 \\<inter>\n    (m2_inv3a_sesK_compr \\<inter> m2_inv3b_sesK_compr_non) \\<times>\n    (m3_inv3_sesK_compr \\<inter> m3_inv2_ticket \\<inter>\n     m3_inv1_lkeysec) \\<inter>\n    m2_inv7_ikk_resp \\<times> UNIV)\n  \\<subseteq> m3_inv5_ikk_resp\n\ngoal (2 subgoals):\n 1. reach m2 \\<subseteq> m2_inv7_ikk_resp\n 2. reach m3 \\<subseteq> UNIV", "qed auto"], ["", "end"]]}