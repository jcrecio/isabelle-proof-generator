{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Key_establish/m1_keydist.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemma knC_empty [simp]: \"knC Map.empty = keySetup\"", "lemma azC_empty [simp]: \"azC Map.empty = keySetup\"", "lemma azC_map_runs [simp]: \"azC (map_runs h runz) = azC runz\"", "lemma knC_upd_Init_Resp_None:\n  \"\\<lbrakk> R \\<notin> dom runz; rol \\<in> {Init, Resp} \\<rbrakk>\n  \\<Longrightarrow> knC (runz(R \\<mapsto> (rol, [A, B], []))) = knC runz\"", "lemma knC_upd_Init_Some:\n  \"\\<lbrakk> runz Ra = Some (Init, [A, B], []) \\<rbrakk> \n  \\<Longrightarrow> knC (runz(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))) = insert (Kab, A) (knC runz)\"", "lemma knC_upd_Resp_Some:\n  \"\\<lbrakk> runz Ra = Some (Resp, [A, B], []) \\<rbrakk> \n  \\<Longrightarrow> knC (runz(Ra \\<mapsto> (Resp, [A, B], [aKey Kab]))) = insert (Kab, B) (knC runz)\"", "lemma knC_upd_Server:\n  \"\\<lbrakk> Rs \\<notin> dom runz \\<rbrakk>\n  \\<Longrightarrow> knC (runz(Rs \\<mapsto> (Serv, [A, B], []))) = insert (sesK (Rs$sk), Sv) (knC runz)\"", "lemmas knC_upd_lemmas [simp] = \n  knC_upd_Init_Resp_None knC_upd_Init_Some knC_upd_Resp_Some\n  knC_upd_Server", "lemma azC_upd_Init_None:\n  \"\\<lbrakk> Ra \\<notin> dom runz \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Ra \\<mapsto> (Init, [A, B], []))) = azC runz\"", "lemma azC_upd_Resp_None:\n  \"\\<lbrakk> Rb \\<notin> dom runz \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rb \\<mapsto> (Resp, [A, B], []))) = azC runz\"", "lemma azC_upd_Init_Some:\n  \"\\<lbrakk> runz Ra = Some (Init, [A, B], []) \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Ra \\<mapsto> (Init, [A, B], al))) = azC runz\"", "lemma azC_upd_Resp_Some:\n  \"\\<lbrakk> runz Rb = Some (Resp, [A, B], []) \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rb \\<mapsto> (Resp, [A, B], al))) = azC runz\"", "lemma azC_upd_Serv_bad:\n  \"\\<lbrakk> Rs \\<notin> dom runz; A \\<in> bad \\<or> B \\<in> bad \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) = azC runz \\<union> {sesK (Rs$sk)} \\<times> UNIV\"", "lemma azC_upd_Serv_good:\n  \"\\<lbrakk> Rs \\<notin> dom runz; K = sesK (Rs$sk); A \\<notin> bad; B \\<notin> bad \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) \n      = azC runz \\<union> {(K, A), (K, B), (K, Sv)}\"", "lemma azC_upd_Serv:\n  \"\\<lbrakk> Rs \\<notin> dom runz; K = sesK (Rs$sk) \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) =\n     azC runz \\<union> {K} \\<times> (if A \\<notin> bad \\<and> B \\<notin> bad then {A, B, Sv} else UNIV)\"", "lemmas azC_upd_lemmas [simp] =\n  azC_upd_Init_None azC_upd_Resp_None\n  azC_upd_Init_Some azC_upd_Resp_Some azC_upd_Serv", "lemmas m1x_defs = \n  m1x_def m1x_init_def m1x_trans_def\n  m1x_step1_def m1x_step2_def m1x_step3_def m1x_step4_def m1x_step5_def \n  m1x_leak_def", "lemma m1x_obs_id [simp]: \"obs m1x = id\"", "lemmas m1x_inv1_keyI = m1x_inv1_key_def [THEN setc_def_to_intro, rule_format]", "lemmas m1x_inv1_keyE [elim] = \n  m1x_inv1_key_def [THEN setc_def_to_elim, rule_format]", "lemmas m1x_inv1_keyD [dest] = \n  m1x_inv1_key_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_m1x_inv1_key_init [iff]:\n  \"init m1x \\<subseteq> m1x_inv1_key\"", "lemma PO_m1x_inv1_key_trans [iff]:\n  \"{m1x_inv1_key} trans m1x {> m1x_inv1_key}\"", "lemma PO_m1x_inv1_key [iff]: \"reach m1x \\<subseteq> m1x_inv1_key\"", "lemmas R01x_defs = R01x_def med01x_def", "lemma PO_m1x_step1_refines_skip:\n  \"{R01x} \n     Id, (m1x_step1 Ra A B) \n   {> R01x}\"", "lemma PO_m1x_step2_refines_skip:\n  \"{R01x} \n     Id, (m1x_step2 Rb A B) \n   {> R01x}\"", "lemma PO_m1x_step3_refines_s0g_gen:\n  \"{R01x \\<inter> UNIV \\<times> m1x_inv1_key} \n     (s0g_gen Kab Sv {Sv, A, B}), (m1x_step3 Rs A B Kab) \n   {> R01x}\"", "lemma PO_m1x_step4_refines_s0g_learn:\n  \"{R01x} \n     (s0g_learn Kab A), (m1x_step4 Ra A B Kab) \n   {> R01x}\"", "lemma PO_m1x_step5_refines_s0g_learn:\n  \"{R01x} \n     (s0g_learn Kab B), (m1x_step5 Rb A B Kab) \n   {> R01x}\"", "lemma PO_m1x_leak_refines_s0g_leak:\n  \"{R01x} \n     (s0g_leak (sesK (Rs$sk))), (m1x_leak Rs) \n   {> R01x}\"", "lemmas PO_m1x_trans_refines_s0g_trans = \n  PO_m1x_step1_refines_skip PO_m1x_step2_refines_skip\n  PO_m1x_step3_refines_s0g_gen PO_m1x_step4_refines_s0g_learn \n  PO_m1x_step5_refines_s0g_learn PO_m1x_leak_refines_s0g_leak", "lemma PO_m1x_refines_init_s0g [iff]:\n  \"init m1x \\<subseteq> R01x``(init s0g)\"", "lemma PO_m1x_refines_trans_s0g [iff]:\n  \"{R01x \\<inter> UNIV \\<times> m1x_inv1_key} \n     (trans s0g), (trans m1x) \n   {> R01x}\"", "lemma obs_consistent_med01x [iff]: \n  \"obs_consistent R01x med01x s0g m1x\"", "lemma PO_m1x_refines_s0g [iff]: \n  \"refines \n     (R01x \\<inter> UNIV \\<times> m1x_inv1_key)\n     med01x s0g m1x\"", "lemma  m1x_implements_s0g [iff]: \"implements med01x s0g m1x\"", "lemmas m1x_secrecyI = m1x_secrecy_def [THEN setc_def_to_intro, rule_format]", "lemmas m1x_secrecyE [elim] = m1x_secrecy_def [THEN setc_def_to_elim, rule_format]", "lemma PO_m1x_obs_secrecy [iff]: \"oreach m1x \\<subseteq> m1x_secrecy\"", "lemma PO_m1x_secrecy [iff]: \"reach m1x \\<subseteq> m1x_secrecy\""], "translations": [["", "lemma knC_empty [simp]: \"knC Map.empty = keySetup\""], ["proof (prove)\ngoal (1 subgoal):\n 1. knC Map.empty = keySetup", "by (auto elim: knC.cases)"], ["", "lemma azC_empty [simp]: \"azC Map.empty = keySetup\""], ["proof (prove)\ngoal (1 subgoal):\n 1. azC Map.empty = keySetup", "by (auto elim: azC.cases)"], ["", "text \\<open>\\<open>azC\\<close> and run abstraction\\<close>"], ["", "lemma azC_map_runs [simp]: \"azC (map_runs h runz) = azC runz\""], ["proof (prove)\ngoal (1 subgoal):\n 1. azC (map_runs h runz) = azC runz", "by (auto simp add: map_runs_def elim!: azC.cases)"], ["", "text \\<open>Update lemmas for @{term \"knC\"}\\<close>"], ["", "lemma knC_upd_Init_Resp_None:\n  \"\\<lbrakk> R \\<notin> dom runz; rol \\<in> {Init, Resp} \\<rbrakk>\n  \\<Longrightarrow> knC (runz(R \\<mapsto> (rol, [A, B], []))) = knC runz\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>R \\<notin> dom runz; rol \\<in> {Init, Resp}\\<rbrakk>\n    \\<Longrightarrow> knC (runz(R \\<mapsto> (rol, [A, B], []))) = knC runz", "by (fastforce simp add: domIff elim!: knC.cases)"], ["", "lemma knC_upd_Init_Some:\n  \"\\<lbrakk> runz Ra = Some (Init, [A, B], []) \\<rbrakk> \n  \\<Longrightarrow> knC (runz(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))) = insert (Kab, A) (knC runz)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runz Ra = Some (Init, [A, B], []) \\<Longrightarrow>\n    knC (runz(Ra \\<mapsto> (Init, [A, B], [aKey Kab]))) =\n    insert (Kab, A) (knC runz)", "apply (auto elim!: knC.cases) \n\\<comment> \\<open>3 subgoals\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Raa Aa Ba K al.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Raa = Some (Init, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Aa)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Init, [A, B], [aKey Kab])))\n 2. \\<And>Rb Aa Ba K al.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rb = Some (Resp, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Ba)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Init, [A, B], [aKey Kab])))\n 3. \\<And>Rs.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []); Rs \\<in> dom runz;\n        fst (the (runz Rs)) = Serv\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Init, [A, B], [aKey Kab])))", "apply (rename_tac Raa Aa Ba K al, rule_tac A=Aa and B=Ba and al=al in knC_init, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Rb Aa Ba K al.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rb = Some (Resp, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Ba)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Init, [A, B], [aKey Kab])))\n 2. \\<And>Rs.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []); Rs \\<in> dom runz;\n        fst (the (runz Rs)) = Serv\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Init, [A, B], [aKey Kab])))", "apply (rename_tac Rb Aa Ba K al, rule_tac A=Aa and B=Ba and al=al in knC_resp, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Rs.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []); Rs \\<in> dom runz;\n        fst (the (runz Rs)) = Serv\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Init, [A, B], [aKey Kab])))", "apply (rule_tac knC_serv, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma knC_upd_Resp_Some:\n  \"\\<lbrakk> runz Ra = Some (Resp, [A, B], []) \\<rbrakk> \n  \\<Longrightarrow> knC (runz(Ra \\<mapsto> (Resp, [A, B], [aKey Kab]))) = insert (Kab, B) (knC runz)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runz Ra = Some (Resp, [A, B], []) \\<Longrightarrow>\n    knC (runz(Ra \\<mapsto> (Resp, [A, B], [aKey Kab]))) =\n    insert (Kab, B) (knC runz)", "apply (auto elim!: knC.cases)\n\\<comment> \\<open>3 subgoals\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Raa Aa Ba K al.\n       \\<lbrakk>runz Ra = Some (Resp, [A, B], []);\n        runz Raa = Some (Init, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Aa)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Resp, [A, B], [aKey Kab])))\n 2. \\<And>Rb Aa Ba K al.\n       \\<lbrakk>runz Ra = Some (Resp, [A, B], []);\n        runz Rb = Some (Resp, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Ba)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Resp, [A, B], [aKey Kab])))\n 3. \\<And>Rs.\n       \\<lbrakk>runz Ra = Some (Resp, [A, B], []); Rs \\<in> dom runz;\n        fst (the (runz Rs)) = Serv\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Resp, [A, B], [aKey Kab])))", "apply (rename_tac Raa Aa Ba K al, rule_tac A=Aa and B=Ba and al=al in knC_init, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Rb Aa Ba K al.\n       \\<lbrakk>runz Ra = Some (Resp, [A, B], []);\n        runz Rb = Some (Resp, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Ba)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Resp, [A, B], [aKey Kab])))\n 2. \\<And>Rs.\n       \\<lbrakk>runz Ra = Some (Resp, [A, B], []); Rs \\<in> dom runz;\n        fst (the (runz Rs)) = Serv\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Resp, [A, B], [aKey Kab])))", "apply (rename_tac Raa Aa Ba K al, rule_tac A=Aa and B=Ba and al=al in knC_resp, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Rs.\n       \\<lbrakk>runz Ra = Some (Resp, [A, B], []); Rs \\<in> dom runz;\n        fst (the (runz Rs)) = Serv\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> knC (runz(Ra \\<mapsto>\n                                    (Resp, [A, B], [aKey Kab])))", "apply (rule_tac knC_serv, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma knC_upd_Server:\n  \"\\<lbrakk> Rs \\<notin> dom runz \\<rbrakk>\n  \\<Longrightarrow> knC (runz(Rs \\<mapsto> (Serv, [A, B], []))) = insert (sesK (Rs$sk), Sv) (knC runz)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rs \\<notin> dom runz \\<Longrightarrow>\n    knC (runz(Rs \\<mapsto> (Serv, [A, B], []))) =\n    insert (sesK (Rs $ sk), Sv) (knC runz)", "apply (auto elim!: knC.cases)\n\\<comment> \\<open>2 subgoals\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Ra Aa Ba K al.\n       \\<lbrakk>Rs \\<notin> dom runz;\n        runz Ra = Some (Init, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Aa)\n                         \\<in> knC (runz(Rs \\<mapsto> (Serv, [A, B], [])))\n 2. \\<And>Rb Aa Ba K al.\n       \\<lbrakk>Rs \\<notin> dom runz;\n        runz Rb = Some (Resp, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Ba)\n                         \\<in> knC (runz(Rs \\<mapsto> (Serv, [A, B], [])))", "apply (rename_tac Raa Aa Ba K al, rule_tac A=Aa and B=Ba in knC_init, auto dest: dom_lemmas)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Rb Aa Ba K al.\n       \\<lbrakk>Rs \\<notin> dom runz;\n        runz Rb = Some (Resp, [Aa, Ba], aKey K # al)\\<rbrakk>\n       \\<Longrightarrow> (K, Ba)\n                         \\<in> knC (runz(Rs \\<mapsto> (Serv, [A, B], [])))", "apply (rename_tac Raa Aa Ba K al, rule_tac A=Aa and B=Ba in knC_resp, auto dest: dom_lemmas)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemmas knC_upd_lemmas [simp] = \n  knC_upd_Init_Resp_None knC_upd_Init_Some knC_upd_Resp_Some\n  knC_upd_Server"], ["", "text \\<open>Update lemmas for @{term \"azC\"}\\<close>"], ["", "lemma azC_upd_Init_None:\n  \"\\<lbrakk> Ra \\<notin> dom runz \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Ra \\<mapsto> (Init, [A, B], []))) = azC runz\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Ra \\<notin> dom runz \\<Longrightarrow>\n    azC (runz(Ra \\<mapsto> (Init, [A, B], []))) = azC runz", "by (auto simp add: azC.simps elim!: azC.cases dest: dom_lemmas)"], ["", "lemma azC_upd_Resp_None:\n  \"\\<lbrakk> Rb \\<notin> dom runz \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rb \\<mapsto> (Resp, [A, B], []))) = azC runz\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Rb \\<notin> dom runz \\<Longrightarrow>\n    azC (runz(Rb \\<mapsto> (Resp, [A, B], []))) = azC runz", "by (auto simp add: azC.simps elim!: azC.cases dest: dom_lemmas)"], ["", "lemma azC_upd_Init_Some:\n  \"\\<lbrakk> runz Ra = Some (Init, [A, B], []) \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Ra \\<mapsto> (Init, [A, B], al))) = azC runz\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runz Ra = Some (Init, [A, B], []) \\<Longrightarrow>\n    azC (runz(Ra \\<mapsto> (Init, [A, B], al))) = azC runz", "apply (auto elim!: azC.cases)\n\\<comment> \\<open>5 subgoals\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Aa)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Ba)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 3. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 4. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 5. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))", "apply (rule_tac azC_good, auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Ba)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 3. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 4. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))", "apply (rule_tac azC_good, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 3. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))", "apply (rule_tac azC_good, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Ra = Some (Init, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Ra \\<mapsto> (Init, [A, B], al)))", "apply (rule_tac azC_bad, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma azC_upd_Resp_Some:\n  \"\\<lbrakk> runz Rb = Some (Resp, [A, B], []) \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rb \\<mapsto> (Resp, [A, B], al))) = azC runz\""], ["proof (prove)\ngoal (1 subgoal):\n 1. runz Rb = Some (Resp, [A, B], []) \\<Longrightarrow>\n    azC (runz(Rb \\<mapsto> (Resp, [A, B], al))) = azC runz", "apply (auto elim!: azC.cases)\n\\<comment> \\<open>5 subgoals\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Aa)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Ba)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 3. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 4. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 5. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))", "apply (rule_tac azC_good, auto)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Ba)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 3. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 4. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))", "apply (rule_tac azC_good, auto)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>Rs Aa Ba ala.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), Sv)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 3. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))", "apply (rule_tac azC_good, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))\n 2. \\<And>Rs Aa Ba ala C.\n       \\<lbrakk>runz Rb = Some (Resp, [A, B], []);\n        runz Rs = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rs $ sk), C)\n                         \\<in> azC (runz(Rb \\<mapsto> (Resp, [A, B], al)))", "apply (rule_tac azC_bad, auto)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma azC_upd_Serv_bad:\n  \"\\<lbrakk> Rs \\<notin> dom runz; A \\<in> bad \\<or> B \\<in> bad \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) = azC runz \\<union> {sesK (Rs$sk)} \\<times> UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rs \\<notin> dom runz; A \\<in> bad \\<or> B \\<in> bad\\<rbrakk>\n    \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) =\n                      azC runz \\<union> {sesK (Rs $ sk)} \\<times> UNIV", "apply (auto elim!: azC.cases)\n\\<comment> \\<open>10 subgoals\\<close>"], ["proof (prove)\ngoal (10 subgoals):\n 1. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; A \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Aa)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 2. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; A \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Ba)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 3. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; A \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Sv)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 4. \\<And>Rsa Aa Ba ala C.\n       \\<lbrakk>Rs \\<notin> dom runz; A \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), C)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 5. \\<And>Rsa Aa Ba ala C.\n       \\<lbrakk>Rs \\<notin> dom runz; A \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), C)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 6. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; B \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Aa)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 7. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; B \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Ba)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 8. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; B \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Sv)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 9. \\<And>Rsa Aa Ba ala C.\n       \\<lbrakk>Rs \\<notin> dom runz; B \\<in> bad;\n        runz Rsa = Some (Serv, [Aa, Ba], ala); Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), C)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 10. \\<And>Rsa Aa Ba ala C.\n        \\<lbrakk>Rs \\<notin> dom runz; B \\<in> bad;\n         runz Rsa = Some (Serv, [Aa, Ba], ala); Ba \\<in> bad\\<rbrakk>\n        \\<Longrightarrow> (sesK (Rsa $ sk), C)\n                          \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))", "apply (\n  rename_tac Rsa Aa Ba ala, rule_tac A=Aa and B=Ba and al=ala in azC_good, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala, rule_tac A=Aa and B=Ba and al=ala in azC_good, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala, rule_tac A=Aa and B=Ba and al=ala in azC_good, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala C, rule_tac A=Aa and B=Ba and al=ala in azC_bad, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala C, rule_tac A=Aa and B=Ba and al=ala in azC_bad, auto dest: dom_lemmas\n)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma azC_upd_Serv_good:\n  \"\\<lbrakk> Rs \\<notin> dom runz; K = sesK (Rs$sk); A \\<notin> bad; B \\<notin> bad \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) \n      = azC runz \\<union> {(K, A), (K, B), (K, Sv)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk); A \\<notin> bad;\n     B \\<notin> bad\\<rbrakk>\n    \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) =\n                      azC runz \\<union> {(K, A), (K, B), (K, Sv)}", "apply (auto elim!: azC.cases)\n\\<comment> \\<open>5 subgoals\\<close>"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk); A \\<notin> bad;\n        B \\<notin> bad; runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Aa)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 2. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk); A \\<notin> bad;\n        B \\<notin> bad; runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Ba)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 3. \\<And>Rsa Aa Ba ala.\n       \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk); A \\<notin> bad;\n        B \\<notin> bad; runz Rsa = Some (Serv, [Aa, Ba], ala)\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), Sv)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 4. \\<And>Rsa Aa Ba ala C.\n       \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk); A \\<notin> bad;\n        B \\<notin> bad; runz Rsa = Some (Serv, [Aa, Ba], ala);\n        Aa \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), C)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))\n 5. \\<And>Rsa Aa Ba ala C.\n       \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk); A \\<notin> bad;\n        B \\<notin> bad; runz Rsa = Some (Serv, [Aa, Ba], ala);\n        Ba \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> (sesK (Rsa $ sk), C)\n                         \\<in> azC (runz(Rs \\<mapsto> (Serv, [A, B], al)))", "apply (\n  rename_tac Rsa Aa Ba ala, rule_tac A=Aa and B=Ba and al=ala in azC_good, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala, rule_tac A=Aa and B=Ba and al=ala in azC_good, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala, rule_tac A=Aa and B=Ba and al=ala in azC_good, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala C, rule_tac A=Aa and B=Ba and al=ala in azC_bad, auto dest: dom_lemmas,\n  rename_tac Rsa Aa Ba ala C, rule_tac A=Aa and B=Ba and al=ala in azC_bad, auto dest: dom_lemmas\n)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma azC_upd_Serv:\n  \"\\<lbrakk> Rs \\<notin> dom runz; K = sesK (Rs$sk) \\<rbrakk>\n  \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) =\n     azC runz \\<union> {K} \\<times> (if A \\<notin> bad \\<and> B \\<notin> bad then {A, B, Sv} else UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Rs \\<notin> dom runz; K = sesK (Rs $ sk)\\<rbrakk>\n    \\<Longrightarrow> azC (runz(Rs \\<mapsto> (Serv, [A, B], al))) =\n                      azC runz \\<union>\n                      {K} \\<times>\n                      (if A \\<notin> bad \\<and> B \\<notin> bad\n                       then {A, B, Sv} else UNIV)", "by (simp add: azC_upd_Serv_bad azC_upd_Serv_good)"], ["", "lemmas azC_upd_lemmas [simp] =\n  azC_upd_Init_None azC_upd_Resp_None\n  azC_upd_Init_Some azC_upd_Resp_Some azC_upd_Serv"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Events\\<close>"], ["", "(******************************************************************************)"], ["", "definition     \\<comment> \\<open>by @{term \"A\"}, refines skip\\<close>\n  m1x_step1 :: \"[rid_t, agent, agent] \\<Rightarrow> 'x m1r_trans\"\nwhere\n  \"m1x_step1 Ra A B \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    Ra \\<notin> dom (runs s) \\<and>                \\<comment> \\<open>\\<open>Ra\\<close> is fresh\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>create initiator thread\\<close>\n    s1 = s\\<lparr> runs := (runs s)(Ra \\<mapsto> (Init, [A, B], [])) \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"B\"}, refines skip\\<close>\n  m1x_step2 :: \"[rid_t, agent, agent] \\<Rightarrow> 'x m1r_trans\"\nwhere\n  \"m1x_step2 Rb A B \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    Rb \\<notin> dom (runs s) \\<and>               \\<comment> \\<open>\\<open>Rb\\<close> is fresh\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    \\<comment> \\<open>create responder thread\\<close>\n    s1 = s\\<lparr> runs := (runs s)(Rb \\<mapsto> (Resp, [A, B], [])) \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"Server\"}, refines @{term s0g_gen}\\<close>\n  m1x_step3 :: \"[rid_t, agent, agent, key] \\<Rightarrow> 'x m1r_trans\"\nwhere\n  \"m1x_step3 Rs A B Kab \\<equiv> {(s, s1).\n\n    \\<comment> \\<open>guards:\\<close>\n    Rs \\<notin> dom (runs s) \\<and>                        \\<comment> \\<open>\\<open>Rs\\<close> is fresh\\<close>\n    Kab = sesK (Rs$sk) \\<and>                       \\<comment> \\<open>generate session key\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> runs := (runs s)(Rs \\<mapsto> (Serv, [A, B], [])) \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{term \"A\"}, refines @{term s0g_learn}\\<close>\n  m1x_step4 :: \"[rid_t, agent, agent, key] \\<Rightarrow> 'x m1x_trans\"\nwhere\n  \"m1x_step4 Ra A B Kab \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    runs s Ra = Some (Init, [A, B], []) \\<and>\n    (Kab \\<notin> leak s \\<longrightarrow> (Kab, A) \\<in> azC (runs s)) \\<and>   \\<comment> \\<open>authorization guard\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> runs := (runs s)(Ra \\<mapsto> (Init, [A, B], [aKey Kab])) \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by @{text \"B\"}, refines @{term s0g_learn}\\<close>\n  m1x_step5 :: \"[rid_t, agent, agent, key] \\<Rightarrow> 'x m1x_trans\"\nwhere\n  \"m1x_step5 Rb A B Kab \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    runs s Rb = Some (Resp, [A, B], []) \\<and> \n    (Kab \\<notin> leak s \\<longrightarrow> (Kab, B) \\<in> azC (runs s)) \\<and>    \\<comment> \\<open>authorization guard\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> runs := (runs s)(Rb \\<mapsto> (Resp, [A, B], [aKey Kab])) \\<rparr>\n  }\""], ["", "definition     \\<comment> \\<open>by attacker, refines @{term s0g_leak}\\<close>\n  m1x_leak :: \"rid_t \\<Rightarrow> 'x m1x_trans\"\nwhere\n  \"m1x_leak Rs \\<equiv> {(s, s1).           \n    \\<comment> \\<open>guards:\\<close>\n    Rs \\<in> dom (runs s) \\<and>\n    fst (the (runs s Rs)) = Serv \\<and>         \\<comment> \\<open>compromise server run \\<open>Rs\\<close>\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> leak := insert (sesK (Rs$sk)) (leak s) \\<rparr>\n  }\""], ["", "(******************************************************************************)"], ["", "subsection \\<open>Specification\\<close>"], ["", "(******************************************************************************)"], ["", "definition \n  m1x_init :: \"m1x_state set\"\nwhere\n  \"m1x_init \\<equiv> { \\<lparr>\n     runs = Map.empty,\n     leak = corrKey         \\<comment> \\<open>statically corrupted keys initially leaked\\<close>\n  \\<rparr> }\""], ["", "definition \n  m1x_trans :: \"'x m1x_trans\" where\n  \"m1x_trans \\<equiv> (\\<Union>A B Ra Rb Rs Kab.\n     m1x_step1 Ra A B \\<union>\n     m1x_step2 Rb A B \\<union>\n     m1x_step3 Rs A B Kab \\<union>\n     m1x_step4 Ra A B Kab \\<union>\n     m1x_step5 Rb A B Kab \\<union>\n     m1x_leak Rs \\<union>\n     Id\n  )\""], ["", "definition \n  m1x :: \"(m1x_state, m1x_obs) spec\" where\n  \"m1x \\<equiv> \\<lparr>\n    init = m1x_init,\n    trans = m1x_trans,\n    obs = id\n  \\<rparr>\""], ["", "lemmas m1x_defs = \n  m1x_def m1x_init_def m1x_trans_def\n  m1x_step1_def m1x_step2_def m1x_step3_def m1x_step4_def m1x_step5_def \n  m1x_leak_def"], ["", "lemma m1x_obs_id [simp]: \"obs m1x = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs m1x = id", "by (simp add: m1x_def)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Invariants\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>inv1: Key definedness\\<close>"], ["", "(*inv**************************************************************************)"], ["", "text \\<open>Only run identifiers or static keys can be (concretely) known or \nauthorized keys. (This reading corresponds to the contraposition of the \nproperty expressed below.)\\<close>"], ["", "definition \n  m1x_inv1_key :: \"m1x_state set\" \nwhere\n  \"m1x_inv1_key \\<equiv> {s. \\<forall>Rs A.\n     Rs \\<notin> dom (runs s) \\<longrightarrow> \n       (sesK (Rs$sk), A) \\<notin> knC (runs s) \\<and> \n       (sesK (Rs$sk), A) \\<notin> azC (runs s) \\<and>\n       sesK (Rs$sk) \\<notin> leak s\n  }\""], ["", "lemmas m1x_inv1_keyI = m1x_inv1_key_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m1x_inv1_keyE [elim] = \n  m1x_inv1_key_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m1x_inv1_keyD [dest] = \n  m1x_inv1_key_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "text \\<open>Invariance proof.\\<close>"], ["", "lemma PO_m1x_inv1_key_init [iff]:\n  \"init m1x \\<subseteq> m1x_inv1_key\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m1x \\<subseteq> m1x_inv1_key", "by (auto simp add: m1x_defs m1x_inv1_key_def)"], ["", "lemma PO_m1x_inv1_key_trans [iff]:\n  \"{m1x_inv1_key} trans m1x {> m1x_inv1_key}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m1x_inv1_key} TS.trans m1x {> m1x_inv1_key}", "by (auto simp add: PO_hoare_defs m1x_defs intro!: m1x_inv1_keyI)"], ["", "lemma PO_m1x_inv1_key [iff]: \"reach m1x \\<subseteq> m1x_inv1_key\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m1x \\<subseteq> m1x_inv1_key", "by (rule inv_rule_basic) (auto)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Refinement of s0g\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>med10: The mediator function maps a concrete observation to an \nabstract one.\\<close>"], ["", "definition \n  med01x :: \"m1x_obs \\<Rightarrow> key s0g_obs\"\nwhere\n  \"med01x t \\<equiv> \\<lparr> kn = knC (runs t), az = azC (runs t), lk = leak t \\<rparr>\""], ["", "text \\<open>R01: The simulation relation expreses key knowledge and authorization\nin terms of the client and server run information.\\<close>"], ["", "definition\n  R01x :: \"(key s0g_state \\<times> m1x_state) set\" where\n  \"R01x \\<equiv> {(s, t). s = med01x t}\""], ["", "lemmas R01x_defs = R01x_def med01x_def"], ["", "text \\<open>Refinement proof.\\<close>"], ["", "lemma PO_m1x_step1_refines_skip:\n  \"{R01x} \n     Id, (m1x_step1 Ra A B) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x} Id, m1x_step1 Ra A B {> R01x}", "by (auto simp add: PO_rhoare_defs R01x_defs s0g_defs m1x_defs)"], ["", "lemma PO_m1x_step2_refines_skip:\n  \"{R01x} \n     Id, (m1x_step2 Rb A B) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x} Id, m1x_step2 Rb A B {> R01x}", "by (auto simp add: PO_rhoare_defs R01x_defs s0g_defs m1x_defs)"], ["", "lemma PO_m1x_step3_refines_s0g_gen:\n  \"{R01x \\<inter> UNIV \\<times> m1x_inv1_key} \n     (s0g_gen Kab Sv {Sv, A, B}), (m1x_step3 Rs A B Kab) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x \\<inter>\n     UNIV \\<times>\n     m1x_inv1_key} s0g_gen Kab Sv {Sv, A, B}, m1x_step3 Rs A B Kab {> R01x}", "by (auto simp add: PO_rhoare_defs R01x_defs s0g_defs m1x_defs)"], ["", "lemma PO_m1x_step4_refines_s0g_learn:\n  \"{R01x} \n     (s0g_learn Kab A), (m1x_step4 Ra A B Kab) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x} s0g_learn Kab A, m1x_step4 Ra A B Kab {> R01x}", "by (auto simp add: PO_rhoare_defs R01x_defs s0g_defs m1x_defs)"], ["", "lemma PO_m1x_step5_refines_s0g_learn:\n  \"{R01x} \n     (s0g_learn Kab B), (m1x_step5 Rb A B Kab) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x} s0g_learn Kab B, m1x_step5 Rb A B Kab {> R01x}", "by (auto simp add: PO_rhoare_defs R01x_defs s0g_defs m1x_defs)"], ["", "lemma PO_m1x_leak_refines_s0g_leak:\n  \"{R01x} \n     (s0g_leak (sesK (Rs$sk))), (m1x_leak Rs) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x} s0g_leak (sesK (Rs $ sk)), m1x_leak Rs {> R01x}", "by (fastforce simp add: PO_rhoare_defs R01x_defs s0g_defs m1x_defs)"], ["", "text \\<open>All together now...\\<close>"], ["", "lemmas PO_m1x_trans_refines_s0g_trans = \n  PO_m1x_step1_refines_skip PO_m1x_step2_refines_skip\n  PO_m1x_step3_refines_s0g_gen PO_m1x_step4_refines_s0g_learn \n  PO_m1x_step5_refines_s0g_learn PO_m1x_leak_refines_s0g_leak"], ["", "lemma PO_m1x_refines_init_s0g [iff]:\n  \"init m1x \\<subseteq> R01x``(init s0g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m1x \\<subseteq> R01x `` init s0g", "by (auto simp add: R01x_defs s0g_defs m1x_defs intro!: s0g_secrecyI s0g_domI)"], ["", "lemma PO_m1x_refines_trans_s0g [iff]:\n  \"{R01x \\<inter> UNIV \\<times> m1x_inv1_key} \n     (trans s0g), (trans m1x) \n   {> R01x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R01x \\<inter>\n     UNIV \\<times> m1x_inv1_key} TS.trans s0g, TS.trans m1x {> R01x}", "by (auto simp add: m1x_def m1x_trans_def s0g_def s0g_trans_def\n         intro!: PO_m1x_trans_refines_s0g_trans)"], ["", "text \\<open>Observation consistency.\\<close>"], ["", "lemma obs_consistent_med01x [iff]: \n  \"obs_consistent R01x med01x s0g m1x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R01x med01x s0g m1x", "by (auto simp add: obs_consistent_def R01x_defs s0g_def m1x_def)"], ["", "text \\<open>Refinement result.\\<close>"], ["", "lemma PO_m1x_refines_s0g [iff]: \n  \"refines \n     (R01x \\<inter> UNIV \\<times> m1x_inv1_key)\n     med01x s0g m1x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines (R01x \\<inter> UNIV \\<times> m1x_inv1_key) med01x s0g m1x", "by (rule Refinement_using_invariants) (auto del: subsetI)"], ["", "lemma  m1x_implements_s0g [iff]: \"implements med01x s0g m1x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. implements med01x s0g m1x", "by (rule refinement_soundness) (fast)"], ["", "subsection \\<open>Derived invariants\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>inv2: Secrecy\\<close>"], ["", "(*invh*************************************************************************)"], ["", "text \\<open>Secrecy, expressed in terms of runs.\\<close>"], ["", "definition \n  m1x_secrecy :: \"'x m1x_pred\"\nwhere\n  \"m1x_secrecy \\<equiv> {s. knC (runs s) \\<subseteq> azC (runs s) \\<union> leak s \\<times> UNIV}\""], ["", "lemmas m1x_secrecyI = m1x_secrecy_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m1x_secrecyE [elim] = m1x_secrecy_def [THEN setc_def_to_elim, rule_format]"], ["", "text \\<open>Invariance proof.\\<close>"], ["", "lemma PO_m1x_obs_secrecy [iff]: \"oreach m1x \\<subseteq> m1x_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach m1x \\<subseteq> m1x_secrecy", "apply (rule external_invariant_translation [OF PO_s0g_obs_secrecy _ m1x_implements_s0g])"], ["proof (prove)\ngoal (1 subgoal):\n 1. med01x -` s0g_secrecy \\<subseteq> m1x_secrecy", "apply (auto simp add: med01x_def m1x_secrecy_def s0g_secrecy_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_m1x_secrecy [iff]: \"reach m1x \\<subseteq> m1x_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m1x \\<subseteq> m1x_secrecy", "by (rule external_to_internal_invariant [OF PO_m1x_obs_secrecy], auto)"], ["", "end"]]}