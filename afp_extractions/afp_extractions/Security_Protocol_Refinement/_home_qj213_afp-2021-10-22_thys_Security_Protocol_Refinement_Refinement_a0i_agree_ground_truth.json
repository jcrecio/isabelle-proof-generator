{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Refinement/a0i_agree.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemmas a0i_defs = \n  a0n_defs a0i_def a0i_trans_def a0i_commit_def", "lemma a0i_obs [simp]: \"obs a0i = id\"", "lemma a0i_anyP_observable [iff]: \"observable (obs a0i) P\"", "lemmas a0i_inv1_iagreeI = \n  a0i_inv1_iagree_def [THEN setc_def_to_intro, rule_format]", "lemmas a0i_inv1_iagreeE [elim] = \n  a0i_inv1_iagree_def [THEN setc_def_to_elim, rule_format]", "lemmas a0i_inv1_iagreeD = \n  a0i_inv1_iagree_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_a0i_inv1_iagree_init [iff]:\n  \"init a0i \\<subseteq> a0i_inv1_iagree\"", "lemma PO_a0i_inv1_iagree_trans [iff]:\n  \"{a0i_inv1_iagree} trans a0i {> a0i_inv1_iagree}\"", "lemma PO_a0i_inv1_iagree [iff]: \"reach a0i \\<subseteq> a0i_inv1_iagree\"", "lemma PO_a0i_obs_inv1_iagree [iff]: \"oreach a0i \\<subseteq> a0i_inv1_iagree\"", "lemma PO_a0i_running_refines_a0n_running:\n  \"{R0n0i} \n     (a0n_running h d), (a0i_running h d) \n   {> R0n0i}\"", "lemma PO_a0i_commit_refines_a0n_commit:\n  \"{R0n0i} \n     (a0n_commit h d), (a0i_commit h d) \n   {> R0n0i}\"", "lemma PO_a0i_corrupt_refines_a0n_corrupt:\n  \"{R0n0i} \n     (a0n_corrupt d), (a0i_corrupt d) \n   {> R0n0i}\"", "lemmas PO_a0i_trans_refines_a0n_trans = \n  PO_a0i_running_refines_a0n_running\n  PO_a0i_commit_refines_a0n_commit\n  PO_a0i_corrupt_refines_a0n_corrupt", "lemma PO_m1_refines_init_a0n [iff]:\n  \"init a0i \\<subseteq> R0n0i``(init a0n)\"", "lemma PO_m1_refines_trans_a0n [iff]:\n  \"{R0n0i} \n     (trans a0n), (trans a0i) \n   {> R0n0i}\"", "lemma PO_obs_consistent [iff]:\n  \"obs_consistent R0n0i med0n0i a0n a0i\"", "lemma PO_a0i_refines_a0n:\n  \"refines R0n0i med0n0i a0n a0i\"", "lemma iagree_implies_niagree [iff]: \"a0i_inv1_iagree \\<subseteq> a0n_inv1_niagree\"", "lemma PO_a0i_a0n_inv1_niagree [iff]: \"reach a0i \\<subseteq> a0n_inv1_niagree\"", "lemma PO_a0i_obs_a0n_inv1_niagree [iff]: \"oreach a0i \\<subseteq> a0n_inv1_niagree\""], "translations": [["", "lemmas a0i_defs = \n  a0n_defs a0i_def a0i_trans_def a0i_commit_def"], ["", "text \\<open>Any property is trivially observable.\\<close>"], ["", "lemma a0i_obs [simp]: \"obs a0i = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs a0i = id", "by (simp add: a0i_def)"], ["", "lemma a0i_anyP_observable [iff]: \"observable (obs a0i) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. observable (obs a0i) P", "by (auto)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Invariants\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>Injective agreement.\\<close>"], ["", "(******************************************************************************)"], ["", "definition \n  a0i_inv1_iagree :: \"'ds a0i_state set\" \nwhere\n  \"a0i_inv1_iagree \\<equiv> {s. \\<forall>h d.\n     set h \\<subseteq> good \\<longrightarrow> d \\<notin> corrupted s \\<longrightarrow>\n       signals s (Commit h d) \\<le> signals s (Running h d)\n  }\""], ["", "lemmas a0i_inv1_iagreeI = \n  a0i_inv1_iagree_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas a0i_inv1_iagreeE [elim] = \n  a0i_inv1_iagree_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas a0i_inv1_iagreeD = \n  a0i_inv1_iagree_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "lemma PO_a0i_inv1_iagree_init [iff]:\n  \"init a0i \\<subseteq> a0i_inv1_iagree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init a0i \\<subseteq> a0i_inv1_iagree", "by (auto simp add: a0i_defs intro!: a0i_inv1_iagreeI)"], ["", "lemma PO_a0i_inv1_iagree_trans [iff]:\n  \"{a0i_inv1_iagree} trans a0i {> a0i_inv1_iagree}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {a0i_inv1_iagree} TS.trans a0i {> a0i_inv1_iagree}", "apply (auto simp add: PO_hoare_defs a0i_defs intro!: a0i_inv1_iagreeI)"], ["proof (prove)\ngoal (6 subgoals):\n 1. \\<And>xa xb xc.\n       \\<lbrakk>set xb \\<subseteq> good; xc \\<notin> corrupted xa;\n        xa \\<in> a0i_inv1_iagree\\<rbrakk>\n       \\<Longrightarrow> signals xa (Commit xb xc)\n                         \\<le> Suc (signals xa (Running xb xc))\n 2. \\<And>h d xa xb.\n       \\<lbrakk>set h \\<subseteq> good; d \\<notin> corrupted xa;\n        xa \\<in> a0i_inv1_iagree; h \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> signals xa (Commit h d)\n                         \\<le> signals xa (Running h d)\n 3. \\<And>h d xa xc.\n       \\<lbrakk>set h \\<subseteq> good; d \\<notin> corrupted xa;\n        xa \\<in> a0i_inv1_iagree; d \\<noteq> xc\\<rbrakk>\n       \\<Longrightarrow> signals xa (Commit h d)\n                         \\<le> signals xa (Running h d)\n 4. \\<And>xa xb xc xd.\n       \\<lbrakk>xd \\<in> set xb; xd \\<in> bad; set xb \\<subseteq> good;\n        xc \\<notin> corrupted xa; xa \\<in> a0i_inv1_iagree;\n        \\<not> Suc (signals xa (Commit xb xc))\n               \\<le> signals xa (Running xb xc)\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>h d xa xb xd.\n       \\<lbrakk>xd \\<in> set xb; xd \\<in> bad; set h \\<subseteq> good;\n        d \\<notin> corrupted xa; xa \\<in> a0i_inv1_iagree;\n        \\<not> signals xa (Commit h d) \\<le> signals xa (Running h d);\n        h \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>h d xa xb xc xd.\n       \\<lbrakk>xd \\<in> set xb; xd \\<in> bad; set h \\<subseteq> good;\n        d \\<notin> corrupted xa; xa \\<in> a0i_inv1_iagree;\n        \\<not> signals xa (Commit h d) \\<le> signals xa (Running h d);\n        d \\<noteq> xc\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto dest: a0i_inv1_iagreeD intro: le_SucI)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_a0i_inv1_iagree [iff]: \"reach a0i \\<subseteq> a0i_inv1_iagree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach a0i \\<subseteq> a0i_inv1_iagree", "by (rule inv_rule_basic) (auto)"], ["", "text \\<open>As an external invariant.\\<close>"], ["", "lemma PO_a0i_obs_inv1_iagree [iff]: \"oreach a0i \\<subseteq> a0i_inv1_iagree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach a0i \\<subseteq> a0i_inv1_iagree", "apply (rule external_from_internal_invariant, fast)"], ["proof (prove)\ngoal (1 subgoal):\n 1. obs a0i ` reach a0i \\<subseteq> a0i_inv1_iagree", "apply (subst a0i_def, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Refinement\\<close>"], ["", "(******************************************************************************)"], ["", "definition\n  med0n0i :: \"'d a0i_obs \\<Rightarrow> 'd a0i_obs\"\nwhere\n  \"med0n0i \\<equiv> id\""], ["", "definition\n  R0n0i :: \"('d a0n_state \\<times> 'd a0i_state) set\"\nwhere\n  \"R0n0i \\<equiv> Id\""], ["", "lemma PO_a0i_running_refines_a0n_running:\n  \"{R0n0i} \n     (a0n_running h d), (a0i_running h d) \n   {> R0n0i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0n0i} a0i_running h d, a0i_running h d {> R0n0i}", "by (unfold R0n0i_def) (rule relhoare_refl)"], ["", "lemma PO_a0i_commit_refines_a0n_commit:\n  \"{R0n0i} \n     (a0n_commit h d), (a0i_commit h d) \n   {> R0n0i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0n0i} a0n_commit h d, a0i_commit h d {> R0n0i}", "by (auto simp add: PO_rhoare_defs R0n0i_def a0i_defs)"], ["", "lemma PO_a0i_corrupt_refines_a0n_corrupt:\n  \"{R0n0i} \n     (a0n_corrupt d), (a0i_corrupt d) \n   {> R0n0i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0n0i} a0i_corrupt d, a0i_corrupt d {> R0n0i}", "by (unfold R0n0i_def) (rule relhoare_refl)"], ["", "lemmas PO_a0i_trans_refines_a0n_trans = \n  PO_a0i_running_refines_a0n_running\n  PO_a0i_commit_refines_a0n_commit\n  PO_a0i_corrupt_refines_a0n_corrupt"], ["", "text \\<open>All together now...\\<close>"], ["", "lemma PO_m1_refines_init_a0n [iff]:\n  \"init a0i \\<subseteq> R0n0i``(init a0n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init a0i \\<subseteq> R0n0i `` init a0n", "by (auto simp add: R0n0i_def a0i_defs)"], ["", "lemma PO_m1_refines_trans_a0n [iff]:\n  \"{R0n0i} \n     (trans a0n), (trans a0i) \n   {> R0n0i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R0n0i} TS.trans a0n, TS.trans a0i {> R0n0i}", "by (auto simp add: a0n_def a0n_trans_def a0i_def a0i_trans_def\n         intro!: PO_a0i_trans_refines_a0n_trans)"], ["", "lemma PO_obs_consistent [iff]:\n  \"obs_consistent R0n0i med0n0i a0n a0i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R0n0i med0n0i a0n a0i", "by (auto simp add: obs_consistent_def R0n0i_def med0n0i_def a0i_def a0n_def)"], ["", "lemma PO_a0i_refines_a0n:\n  \"refines R0n0i med0n0i a0n a0i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines R0n0i med0n0i a0n a0i", "by (rule Refinement_basic) (auto)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Derived invariants\\<close>"], ["", "(******************************************************************************)"], ["", "lemma iagree_implies_niagree [iff]: \"a0i_inv1_iagree \\<subseteq> a0n_inv1_niagree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a0i_inv1_iagree \\<subseteq> a0n_inv1_niagree", "apply (auto intro!: a0n_inv1_niagreeI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x h d.\n       \\<lbrakk>x \\<in> a0i_inv1_iagree; set h \\<subseteq> good;\n        d \\<notin> corrupted x; 0 < signals x (Commit h d)\\<rbrakk>\n       \\<Longrightarrow> 0 < signals x (Running h d)", "apply (drule_tac d=d in a0i_inv1_iagreeD, auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>Non-injective agreeement as internal and external invariants.\\<close>"], ["", "lemma PO_a0i_a0n_inv1_niagree [iff]: \"reach a0i \\<subseteq> a0n_inv1_niagree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach a0i \\<subseteq> a0n_inv1_niagree", "by (rule subset_trans, rule, rule)"], ["", "lemma PO_a0i_obs_a0n_inv1_niagree [iff]: \"oreach a0i \\<subseteq> a0n_inv1_niagree\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach a0i \\<subseteq> a0n_inv1_niagree", "by (rule subset_trans, rule, rule)"], ["", "end"]]}