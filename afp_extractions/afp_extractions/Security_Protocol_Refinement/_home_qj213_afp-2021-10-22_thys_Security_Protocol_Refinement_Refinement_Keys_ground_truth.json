{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Refinement/Keys.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemma invKey_K: \"K \\<in> symKeys \\<Longrightarrow> invKey K = K\"", "lemma invKey_invKey_id [simp]: \"invKey (invKey K) = K\"", "lemma invKey_eq [simp]: \"(invKey K = invKey K') = (K=K')\"", "lemma privateKey_neq_publicKey: \"priK A \\<noteq> pubK A'\"", "lemma publicKey_neq_privateKey: \"pubK A \\<noteq> priK A'\"", "lemma publicKey_inject [iff]: \"(pubK A = pubK A') = (A = A')\"", "lemma not_symKeys_pubK [iff]: \"pubK A \\<notin> symKeys\"", "lemma not_symKeys_priK [iff]: \"priK A \\<notin> symKeys\"", "lemma symKey_neq_priK: \"K \\<in> symKeys \\<Longrightarrow> K \\<noteq> priK A\"", "lemma symKeys_neq_imp_neq: \"(K \\<in> symKeys) \\<noteq> (K' \\<in> symKeys) \\<Longrightarrow> K \\<noteq> K'\"", "lemma symKeys_invKey_iff [iff]: \"(invKey K \\<in> symKeys) = (K \\<in> symKeys)\"", "lemma invKey_image_eq [simp]: \"(invKey x \\<in> invKey`A) = (x \\<in> A)\"", "lemma invKey_pubK_image_priK_image [simp]: \"invKey ` pubK ` AS = priK ` AS\"", "lemma publicKey_notin_image_privateKey: \"pubK A \\<notin> priK ` AS\"", "lemma privateKey_notin_image_publicKey: \"priK x \\<notin> pubK ` AA\"", "lemma publicKey_image_eq [simp]: \"(pubK x \\<in> pubK ` AA) = (x \\<in> AA)\"", "lemma privateKey_image_eq [simp]: \"(priK A \\<in> priK ` AS) = (A \\<in> AS)\"", "lemma sym_sesK: \"sesK f \\<in> symKeys\"   \\<comment> \\<open>All session keys are symmetric\\<close>", "lemma sym_shrK: \"shrK X \\<in> symKeys\"   \\<comment> \\<open>All shared keys are symmetric\\<close>", "lemma symK_eq_invKey: \"\\<lbrakk> SK = invKey K; SK \\<in> symKeys \\<rbrakk> \\<Longrightarrow> K = SK\"", "lemma publicKey_notin_image_shrK: \"pubK x \\<notin> shrK ` AA\"", "lemma privateKey_notin_image_shrK: \"priK x \\<notin> shrK ` AA\"", "lemma shrK_notin_image_publicKey: \"shrK x \\<notin> pubK ` AA\"", "lemma shrK_notin_image_privateKey: \"shrK x \\<notin> priK ` AA\"", "lemma sesK_notin_image_shrK [simp]: \"sesK K \\<notin> shrK`AA\"", "lemma shrK_notin_image_sesK [simp]: \"shrK K \\<notin> sesK`AA\"", "lemma sesK_image_eq [simp]: \"(sesK x \\<in> sesK ` AA) = (x \\<in> AA)\"", "lemma shrK_image_eq [simp]: \"(shrK x \\<in> shrK ` AA) = (x \\<in> AA)\""], "translations": [["", "lemma invKey_K: \"K \\<in> symKeys \\<Longrightarrow> invKey K = K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<in> symKeys \\<Longrightarrow> invKey K = K", "by (simp add: symKeys_def)"], ["", "text \\<open>Most lemmas we need come for free with the inductive type definition:\ninjectiveness and distinctness.\\<close>"], ["", "lemma invKey_invKey_id [simp]: \"invKey (invKey K) = K\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invKey (invKey K) = K", "by (cases K, auto) \n   (rename_tac ltk, case_tac ltk, auto)"], ["", "lemma invKey_eq [simp]: \"(invKey K = invKey K') = (K=K')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (invKey K = invKey K') = (K = K')", "apply (safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. invKey K = invKey K' \\<Longrightarrow> K = K'", "apply (drule_tac f=invKey in arg_cong, simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text \\<open>We get most lemmas below for free from the inductive definition\nof type @{typ key}. Many of these are just proved as a reality check.\\<close>"], ["", "subsection\\<open>Asymmetric Keys\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>No private key equals any public key (essential to ensure that private\nkeys are private!). A similar statement an axiom in Paulson's theory!\\<close>"], ["", "lemma privateKey_neq_publicKey: \"priK A \\<noteq> pubK A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. priK A \\<noteq> pubK A'", "by auto"], ["", "lemma publicKey_neq_privateKey: \"pubK A \\<noteq> priK A'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pubK A \\<noteq> priK A'", "by auto"], ["", "subsection\\<open>Basic properties of @{term pubK} and @{term priK}\\<close>"], ["", "lemma publicKey_inject [iff]: \"(pubK A = pubK A') = (A = A')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pubK A = pubK A') = (A = A')", "by (auto)"], ["", "lemma not_symKeys_pubK [iff]: \"pubK A \\<notin> symKeys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pubK A \\<notin> symKeys", "by (simp add: symKeys_def)"], ["", "lemma not_symKeys_priK [iff]: \"priK A \\<notin> symKeys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. priK A \\<notin> symKeys", "by (simp add: symKeys_def)"], ["", "lemma symKey_neq_priK: \"K \\<in> symKeys \\<Longrightarrow> K \\<noteq> priK A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K \\<in> symKeys \\<Longrightarrow> K \\<noteq> priK A", "by (auto simp add: symKeys_def)"], ["", "lemma symKeys_neq_imp_neq: \"(K \\<in> symKeys) \\<noteq> (K' \\<in> symKeys) \\<Longrightarrow> K \\<noteq> K'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (K \\<in> symKeys) \\<noteq> (K' \\<in> symKeys) \\<Longrightarrow>\n    K \\<noteq> K'", "by blast"], ["", "lemma symKeys_invKey_iff [iff]: \"(invKey K \\<in> symKeys) = (K \\<in> symKeys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (invKey K \\<in> symKeys) = (K \\<in> symKeys)", "by (unfold symKeys_def, auto)"], ["", "subsection\\<open>\"Image\" equations that hold for injective functions\\<close>"], ["", "lemma invKey_image_eq [simp]: \"(invKey x \\<in> invKey`A) = (x \\<in> A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (invKey x \\<in> invKey ` A) = (x \\<in> A)", "by auto"], ["", "(*holds because invKey is injective*)"], ["", "lemma invKey_pubK_image_priK_image [simp]: \"invKey ` pubK ` AS = priK ` AS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. invKey ` pubK ` AS = priK ` AS", "by (auto simp add: image_def)"], ["", "lemma publicKey_notin_image_privateKey: \"pubK A \\<notin> priK ` AS\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pubK A \\<notin> priK ` AS", "by auto"], ["", "lemma privateKey_notin_image_publicKey: \"priK x \\<notin> pubK ` AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. priK x \\<notin> pubK ` AA", "by auto"], ["", "lemma publicKey_image_eq [simp]: \"(pubK x \\<in> pubK ` AA) = (x \\<in> AA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (pubK x \\<in> pubK ` AA) = (x \\<in> AA)", "by auto"], ["", "lemma privateKey_image_eq [simp]: \"(priK A \\<in> priK ` AS) = (A \\<in> AS)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (priK A \\<in> priK ` AS) = (A \\<in> AS)", "by auto"], ["", "subsection\\<open>Symmetric Keys\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>The following was stated as an axiom in Paulson's theory.\\<close>"], ["", "lemma sym_sesK: \"sesK f \\<in> symKeys\"   \\<comment> \\<open>All session keys are symmetric\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sesK f \\<in> symKeys", "by (simp add: symKeys_def)"], ["", "lemma sym_shrK: \"shrK X \\<in> symKeys\"   \\<comment> \\<open>All shared keys are symmetric\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. shrK X \\<in> symKeys", "by (simp add: symKeys_def)"], ["", "text \\<open>Symmetric keys and inversion\\<close>"], ["", "lemma symK_eq_invKey: \"\\<lbrakk> SK = invKey K; SK \\<in> symKeys \\<rbrakk> \\<Longrightarrow> K = SK\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>SK = invKey K; SK \\<in> symKeys\\<rbrakk>\n    \\<Longrightarrow> K = SK", "by (auto simp add: symKeys_def)"], ["", "text \\<open>Image-related lemmas.\\<close>"], ["", "lemma publicKey_notin_image_shrK: \"pubK x \\<notin> shrK ` AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pubK x \\<notin> shrK ` AA", "by auto"], ["", "lemma privateKey_notin_image_shrK: \"priK x \\<notin> shrK ` AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. priK x \\<notin> shrK ` AA", "by auto"], ["", "lemma shrK_notin_image_publicKey: \"shrK x \\<notin> pubK ` AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shrK x \\<notin> pubK ` AA", "by auto"], ["", "lemma shrK_notin_image_privateKey: \"shrK x \\<notin> priK ` AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shrK x \\<notin> priK ` AA", "by auto"], ["", "lemma sesK_notin_image_shrK [simp]: \"sesK K \\<notin> shrK`AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sesK K \\<notin> shrK ` AA", "by (auto)"], ["", "lemma shrK_notin_image_sesK [simp]: \"shrK K \\<notin> sesK`AA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shrK K \\<notin> sesK ` AA", "by (auto)"], ["", "lemma sesK_image_eq [simp]: \"(sesK x \\<in> sesK ` AA) = (x \\<in> AA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (sesK x \\<in> sesK ` AA) = (x \\<in> AA)", "by auto"], ["", "lemma shrK_image_eq [simp]: \"(shrK x \\<in> shrK ` AA) = (x \\<in> AA)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (shrK x \\<in> shrK ` AA) = (x \\<in> AA)", "by auto"], ["", "end"]]}