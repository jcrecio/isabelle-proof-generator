{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Refinement/Infra.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemmas set_def_to_intro = meta_eq_to_obj_eq [THEN eqset_imp_iff, THEN iffD2]", "lemmas set_def_to_dest = meta_eq_to_obj_eq [THEN eqset_imp_iff, THEN iffD1]", "lemmas set_def_to_elim = set_def_to_dest [elim_format]", "lemmas setc_def_to_intro = \n  set_def_to_intro [where B=\"{x. P x}\" for P, to_pred]", "lemmas setc_def_to_dest = \n  set_def_to_dest [where B=\"{x. P x}\" for P, to_pred]", "lemmas setc_def_to_elim = setc_def_to_dest [elim_format]", "lemmas rel_def_to_intro = setc_def_to_intro [where x=\"(s, t)\" for s t]", "lemmas rel_def_to_dest = setc_def_to_dest [where x=\"(s, t)\" for s t]", "lemmas rel_def_to_elim = rel_def_to_dest [elim_format]", "lemma map_definedness: \n  \"f x = Some y \\<Longrightarrow> x \\<in> dom f\"", "lemma map_definedness_contra:\n  \"\\<lbrakk> f x = Some y; z \\<notin> dom f \\<rbrakk> \\<Longrightarrow> x \\<noteq> z\"", "lemmas dom_lemmas = map_definedness map_definedness_contra", "lemma vimage_image_subset: \"A \\<subseteq> f-`(f`A)\"", "lemma Image_compose [simp]:\n  \"(R1 O R2)``A  = R2``(R1``A)\"", "lemma map_id: \"map id = id\"", "lemma map_comp: \"map (g o f) = map g o map f\"", "lemma take_prefix: \"\\<lbrakk> take n l = xs \\<rbrakk> \\<Longrightarrow> \\<exists>xs'. l = xs @ xs'\"", "lemma finite_positive_cardI [intro!]: \n  \"\\<lbrakk> A \\<noteq> {}; finite A \\<rbrakk> \\<Longrightarrow> 0 < card A\"", "lemma finite_positive_cardD [dest!]: \n  \"\\<lbrakk> 0 < card A; finite A \\<rbrakk> \\<Longrightarrow> A \\<noteq> {}\"", "lemma finite_zero_cardI [intro!]: \n  \"\\<lbrakk> A = {}; finite A \\<rbrakk> \\<Longrightarrow> card A = 0\"", "lemma finite_zero_cardD [dest!]: \n  \"\\<lbrakk> card A = 0; finite A \\<rbrakk> \\<Longrightarrow> A = {}\""], "translations": [["", "lemmas set_def_to_intro = meta_eq_to_obj_eq [THEN eqset_imp_iff, THEN iffD2]"], ["", "lemmas set_def_to_dest = meta_eq_to_obj_eq [THEN eqset_imp_iff, THEN iffD1]"], ["", "lemmas set_def_to_elim = set_def_to_dest [elim_format]"], ["", "lemmas setc_def_to_intro = \n  set_def_to_intro [where B=\"{x. P x}\" for P, to_pred]"], ["", "lemmas setc_def_to_dest = \n  set_def_to_dest [where B=\"{x. P x}\" for P, to_pred]"], ["", "lemmas setc_def_to_elim = setc_def_to_dest [elim_format]"], ["", "lemmas rel_def_to_intro = setc_def_to_intro [where x=\"(s, t)\" for s t]"], ["", "lemmas rel_def_to_dest = setc_def_to_dest [where x=\"(s, t)\" for s t]"], ["", "lemmas rel_def_to_elim = rel_def_to_dest [elim_format]"], ["", "(******************************************************************************)"], ["", "subsection \\<open>General results\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>Maps\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>We usually remove @{term\"domIff\"} from the simpset and clasets due\nto annoying behavior. Sometimes the lemmas below are more well-behaved than \n@{term \"domIff\"}. Usually to be used as \"dest: dom\\_lemmas\". However, adding \nthem as permanent dest rules slows down proofs too much, so we refrain from \ndoing this.\\<close>"], ["", "lemma map_definedness: \n  \"f x = Some y \\<Longrightarrow> x \\<in> dom f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = Some y \\<Longrightarrow> x \\<in> dom f", "by (simp add: domIff)"], ["", "lemma map_definedness_contra:\n  \"\\<lbrakk> f x = Some y; z \\<notin> dom f \\<rbrakk> \\<Longrightarrow> x \\<noteq> z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>f x = Some y; z \\<notin> dom f\\<rbrakk>\n    \\<Longrightarrow> x \\<noteq> z", "by (auto simp add: domIff)"], ["", "lemmas dom_lemmas = map_definedness map_definedness_contra"], ["", "subsubsection \\<open>Set\\<close>"], ["", "(******************************************************************************)"], ["", "lemma vimage_image_subset: \"A \\<subseteq> f-`(f`A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<subseteq> f -` f ` A", "by (auto simp add: image_def vimage_def)"], ["", "subsubsection \\<open>Relations\\<close>"], ["", "(******************************************************************************)"], ["", "lemma Image_compose [simp]:\n  \"(R1 O R2)``A  = R2``(R1``A)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (R1 O R2) `` A = R2 `` R1 `` A", "by (auto)"], ["", "subsubsection \\<open>Lists\\<close>"], ["", "(******************************************************************************)"], ["", "lemma map_id: \"map id = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map id = id", "(* already in simpset *)"], ["proof (prove)\ngoal (1 subgoal):\n 1. map id = id", "by (simp)\n\n\\<comment> \\<open>Do NOT add the following equation to the simpset! (looping)\\<close>"], ["", "lemma map_comp: \"map (g o f) = map g o map f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (g \\<circ> f) = map g \\<circ> map f", "by (simp)"], ["", "declare map_comp_map [simp del]"], ["", "lemma take_prefix: \"\\<lbrakk> take n l = xs \\<rbrakk> \\<Longrightarrow> \\<exists>xs'. l = xs @ xs'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. take n l = xs \\<Longrightarrow> \\<exists>xs'. l = xs @ xs'", "by (induct l arbitrary: n xs, auto)\n   (case_tac n, auto)"], ["", "subsubsection \\<open>Finite sets\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>Cardinality.\\<close>"], ["", "declare arg_cong [where f=card, intro]"], ["", "lemma finite_positive_cardI [intro!]: \n  \"\\<lbrakk> A \\<noteq> {}; finite A \\<rbrakk> \\<Longrightarrow> 0 < card A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<noteq> {}; finite A\\<rbrakk> \\<Longrightarrow> 0 < card A", "by (auto)"], ["", "lemma finite_positive_cardD [dest!]: \n  \"\\<lbrakk> 0 < card A; finite A \\<rbrakk> \\<Longrightarrow> A \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>0 < card A; finite A\\<rbrakk> \\<Longrightarrow> A \\<noteq> {}", "by (auto)"], ["", "lemma finite_zero_cardI [intro!]: \n  \"\\<lbrakk> A = {}; finite A \\<rbrakk> \\<Longrightarrow> card A = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A = {}; finite A\\<rbrakk> \\<Longrightarrow> card A = 0", "by (auto)"], ["", "lemma finite_zero_cardD [dest!]: \n  \"\\<lbrakk> card A = 0; finite A \\<rbrakk> \\<Longrightarrow> A = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>card A = 0; finite A\\<rbrakk> \\<Longrightarrow> A = {}", "by (auto)"], ["", "end"]]}