{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Refinement/s0g_secrecy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemmas s0g_secrecyI = s0g_secrecy_def [THEN setc_def_to_intro, rule_format]", "lemmas s0g_secrecyE [elim] = \n  s0g_secrecy_def [THEN setc_def_to_elim, rule_format]", "lemmas s0g_domI = s0g_dom_def [THEN setc_def_to_intro, rule_format]", "lemmas s0g_domE [elim] = s0g_dom_def [THEN setc_def_to_elim, rule_format]", "lemmas s0g_defs = \n  s0g_def s0g_init_def s0g_trans_def\n  s0g_gen_def s0g_learn_def s0g_leak_def", "lemma s0g_obs_id [simp]: \"obs s0g = id\"", "lemma s0g_anyP_observable [iff]: \"observable (obs s0g) P\"", "lemma PO_s0g_secrecy_init [iff]:\n  \"init s0g \\<subseteq> s0g_secrecy\"", "lemma PO_s0g_secrecy_trans [iff]:\n  \"{s0g_secrecy} trans s0g {> s0g_secrecy}\"", "lemma PO_s0g_secrecy [iff]:\"reach s0g \\<subseteq> s0g_secrecy\"", "lemma PO_s0g_obs_secrecy [iff]:\"oreach s0g \\<subseteq> s0g_secrecy\"", "lemma PO_s0g_dom_init [iff]:\n  \"init s0g \\<subseteq> s0g_dom\"", "lemma PO_s0g_dom_trans [iff]:\n  \"{s0g_dom} trans s0g {> s0g_dom}\"", "lemma PO_s0g_dom [iff]: \"reach s0g \\<subseteq> s0g_dom\"", "lemma PO_s0g_obs_dom [iff]: \"oreach s0g \\<subseteq> s0g_dom\""], "translations": [["", "lemmas s0g_secrecyI = s0g_secrecy_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas s0g_secrecyE [elim] = \n  s0g_secrecy_def [THEN setc_def_to_elim, rule_format]"], ["", "text \\<open>Data that someone is authorized to know and leaked data is known \nby someone.\\<close>"], ["", "definition \n  s0g_dom :: \"'d s0g_state set\"\nwhere \n  \"s0g_dom \\<equiv> {s. Domain (az s \\<union> lkr s) \\<subseteq> Domain (kn s)}\""], ["", "lemmas s0g_domI = s0g_dom_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas s0g_domE [elim] = s0g_dom_def [THEN setc_def_to_elim, rule_format]"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Events\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>New secrets may be generated anytime.\\<close>"], ["", "definition \n  s0g_gen :: \"['d, agent, agent set] \\<Rightarrow> ('d s0g_state \\<times> 'd s0g_state) set\"\nwhere \n  \"s0g_gen d A G \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    A \\<in> G \\<and>    \n    d \\<notin> Domain (kn s) \\<and>                      \\<comment> \\<open>fresh item\\<close>\n \n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> \n      kn := insert (d, A) (kn s), \n      az := az s \\<union> {d} \\<times> (if G \\<inter> bad = {} then G else UNIV)\n    \\<rparr>\n  }\""], ["", "text \\<open>Learning secrets.\\<close>"], ["", "definition \n  s0g_learn :: \n    \"['d, agent] \\<Rightarrow> ('d s0g_state \\<times> 'd s0g_state) set\"\nwhere \n  \"s0g_learn d B \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    \\<comment> \\<open>\\<open>d \\<in> Domain (kn s) \\<and>\\<close> someone knows \\<open>d\\<close> (follows from authorization)\\<close>\n\n    \\<comment> \\<open>check authorization or leakage to preserve secrecy\\<close>\n    (d, B) \\<in> az s \\<union> lkr s \\<and>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> kn := insert (d, B) (kn s) \\<rparr>\n  }\""], ["", "text \\<open>Leaking secrets.\\<close>"], ["", "definition \n  s0g_leak :: \n    \"'d \\<Rightarrow> ('d s0g_state \\<times> 'd s0g_state) set\"\nwhere \n  \"s0g_leak d \\<equiv> {(s, s1).\n    \\<comment> \\<open>guards:\\<close>\n    d \\<in> Domain (kn s) \\<and>       \\<comment> \\<open>someone knows \\<open>d\\<close>\\<close>\n\n    \\<comment> \\<open>actions:\\<close>\n    s1 = s\\<lparr> lk := insert d (lk s) \\<rparr>\n  }\""], ["", "(******************************************************************************)"], ["", "subsection \\<open>Specification\\<close>"], ["", "(******************************************************************************)"], ["", "definition \n  s0g_init :: \"'d s0g_state set\"\nwhere\n  \"s0g_init \\<equiv> s0g_secrecy \\<inter> s0g_dom\"   \\<comment> \\<open>any state satisfying invariants\\<close>"], ["", "definition \n  s0g_trans :: \"('d s0g_state \\<times> 'd s0g_state) set\" where\n  \"s0g_trans \\<equiv> (\\<Union>d A B G.\n     s0g_gen d A G \\<union>  \n     s0g_learn d B \\<union> \n     s0g_leak d \\<union> \n     Id\n  )\""], ["", "definition \n  s0g :: \"('d s0g_state, 'd s0g_obs) spec\" where\n  \"s0g \\<equiv> \\<lparr>\n    init = s0g_init,\n    trans = s0g_trans,\n    obs = id\n  \\<rparr>\""], ["", "lemmas s0g_defs = \n  s0g_def s0g_init_def s0g_trans_def\n  s0g_gen_def s0g_learn_def s0g_leak_def"], ["", "lemma s0g_obs_id [simp]: \"obs s0g = id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs s0g = id", "by (simp add: s0g_def)"], ["", "text \\<open>All state predicates are trivially observable.\\<close>"], ["", "lemma s0g_anyP_observable [iff]: \"observable (obs s0g) P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. observable (obs s0g) P", "by (auto)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Invariant proofs\\<close>"], ["", "(******************************************************************************)"], ["", "subsection \\<open>inv1: Secrecy\\<close>"], ["", "(******************************************************************************)"], ["", "lemma PO_s0g_secrecy_init [iff]:\n  \"init s0g \\<subseteq> s0g_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init s0g \\<subseteq> s0g_secrecy", "by (auto simp add: s0g_defs intro!: s0g_secrecyI)"], ["", "lemma PO_s0g_secrecy_trans [iff]:\n  \"{s0g_secrecy} trans s0g {> s0g_secrecy}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s0g_secrecy} TS.trans s0g {> s0g_secrecy}", "apply (auto simp add: s0g_defs PO_hoare_defs intro!: s0g_secrecyI)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>a b xa xb xc xd xe.\n       \\<lbrakk>(a, b) \\<in> kn xa; xa \\<in> s0g_secrecy; xc \\<in> xd;\n        xb \\<notin> Domain (kn xa); xe \\<in> xd; xe \\<in> bad;\n        (a, b) \\<notin> az xa; a \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> a \\<in> lk xa\n 2. \\<And>a b xa xb xc xd.\n       \\<lbrakk>xa \\<in> s0g_secrecy; xc \\<in> xd;\n        xb \\<notin> Domain (kn xa); xd \\<inter> bad = {};\n        (a, b) \\<notin> az xa; (a, b) \\<in> kn xa; a \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> a \\<in> lk xa\n 3. \\<And>a b xa xb xc xd.\n       \\<lbrakk>xa \\<in> s0g_secrecy; xc \\<in> xd;\n        xb \\<notin> Domain (kn xa); xd \\<inter> bad = {};\n        (a, b) \\<notin> az xa; (a, b) \\<in> kn xa; b \\<notin> xd\\<rbrakk>\n       \\<Longrightarrow> a \\<in> lk xa\n 4. \\<And>a b xa xb xc xd.\n       \\<lbrakk>(a, b) \\<in> kn xa; xa \\<in> s0g_secrecy; xc \\<in> xd;\n        xb \\<notin> Domain (kn xa);\n        xa\\<lparr>kn := insert (xb, xc) (kn xa),\n             az := az xa \\<union> {xb} \\<times> xd\\<rparr> =\n        xa\\<lparr>kn := insert (xb, xc) (kn xa),\n             az := az xa \\<union> {xb} \\<times> UNIV\\<rparr>;\n        (a, b) \\<notin> az xa; a \\<noteq> xb\\<rbrakk>\n       \\<Longrightarrow> a \\<in> lk xa\n 5. \\<And>a b xa xb xc.\n       \\<lbrakk>(a, b) \\<notin> az xa; xa \\<in> s0g_secrecy;\n        (xb, xc) \\<in> az xa; (a, b) \\<in> kn xa\\<rbrakk>\n       \\<Longrightarrow> a \\<in> lk xa\n 6. \\<And>a b xa xb.\n       \\<lbrakk>(a, b) \\<notin> az xa; xa \\<in> s0g_secrecy; xb \\<in> lk xa;\n        (a, b) \\<in> kn xa\\<rbrakk>\n       \\<Longrightarrow> a \\<in> lk xa\n 7. \\<And>a b xa xb ba.\n       \\<lbrakk>(a, b) \\<in> kn xa; (a, b) \\<notin> az xa;\n        xa \\<in> s0g_secrecy; (xb, ba) \\<in> kn xa;\n        a \\<notin> lk xa\\<rbrakk>\n       \\<Longrightarrow> a = xb", "apply (auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_s0g_secrecy [iff]:\"reach s0g \\<subseteq> s0g_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach s0g \\<subseteq> s0g_secrecy", "by (rule inv_rule_basic, auto)"], ["", "text \\<open>As en external invariant.\\<close>"], ["", "lemma PO_s0g_obs_secrecy [iff]:\"oreach s0g \\<subseteq> s0g_secrecy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach s0g \\<subseteq> s0g_secrecy", "by (rule external_from_internal_invariant) (auto del: subsetI)"], ["", "subsection \\<open>inv2: Authorized and leaked data is known to someone\\<close>"], ["", "(******************************************************************************)"], ["", "lemma PO_s0g_dom_init [iff]:\n  \"init s0g \\<subseteq> s0g_dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init s0g \\<subseteq> s0g_dom", "by (auto simp add: s0g_defs intro!: s0g_domI)"], ["", "lemma PO_s0g_dom_trans [iff]:\n  \"{s0g_dom} trans s0g {> s0g_dom}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {s0g_dom} TS.trans s0g {> s0g_dom}", "apply (auto simp add: s0g_defs PO_hoare_defs intro!: s0g_domI)"], ["proof (prove)\ngoal (13 subgoals):\n 1. \\<And>xa b xb xc xd xe xf.\n       \\<lbrakk>xb \\<in> s0g_dom; (xa, b) \\<in> az xb; xd \\<in> xe;\n        xc \\<notin> Domain (kn xb); xf \\<in> xe; xf \\<in> bad;\n        xa \\<noteq> xc; xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>xa b xb xc xd xe.\n       \\<lbrakk>xb \\<in> s0g_dom; (xa, b) \\<in> az xb; xd \\<in> xe;\n        xc \\<notin> Domain (kn xb); xe \\<inter> bad = {}; xa \\<noteq> xc;\n        xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>xa b xb xc xd xe.\n       \\<lbrakk>xb \\<in> s0g_dom; xd \\<in> xe; xc \\<notin> Domain (kn xb);\n        xb\\<lparr>kn := insert (xc, xd) (kn xb),\n             az := az xb \\<union> {xc} \\<times> xe\\<rparr> =\n        xb\\<lparr>kn := insert (xc, xd) (kn xb),\n             az := az xb \\<union> {xc} \\<times> UNIV\\<rparr>;\n        xa \\<notin> Domain (kn xb); (xa, b) \\<in> az xb\\<rbrakk>\n       \\<Longrightarrow> xa = xc\n 4. \\<And>xa b xb xc xd.\n       \\<lbrakk>xb \\<in> s0g_dom; (xa, b) \\<in> az xb; (xc, xd) \\<in> az xb;\n        xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> xa = xc\n 5. \\<And>xa b xb xc.\n       \\<lbrakk>xb \\<in> s0g_dom; (xa, b) \\<in> az xb; xc \\<in> lk xb;\n        xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> xa = xc\n 6. \\<And>xa b xb xc ba.\n       \\<lbrakk>xb \\<in> s0g_dom; (xa, b) \\<in> az xb;\n        (xc, ba) \\<in> kn xb\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> Domain (kn xb)\n 7. \\<And>xa xb xc xd xe xf.\n       \\<lbrakk>xb \\<in> s0g_dom; xa \\<in> lk xb; xd \\<in> xe;\n        xc \\<notin> Domain (kn xb); xf \\<in> xe; xf \\<in> bad;\n        xa \\<noteq> xc; xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>xa xb xc xd xe.\n       \\<lbrakk>xb \\<in> s0g_dom; xa \\<in> lk xb; xd \\<in> xe;\n        xc \\<notin> Domain (kn xb); xe \\<inter> bad = {}; xa \\<noteq> xc;\n        xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>xa xb xc xd xe.\n       \\<lbrakk>xb \\<in> s0g_dom; xa \\<in> lk xb; xd \\<in> xe;\n        xc \\<notin> Domain (kn xb);\n        xb\\<lparr>kn := insert (xc, xd) (kn xb),\n             az := az xb \\<union> {xc} \\<times> xe\\<rparr> =\n        xb\\<lparr>kn := insert (xc, xd) (kn xb),\n             az := az xb \\<union> {xc} \\<times> UNIV\\<rparr>;\n        xa \\<notin> Domain (kn xb)\\<rbrakk>\n       \\<Longrightarrow> xa = xc\n 10. \\<And>xa xb xc xd.\n        \\<lbrakk>xb \\<in> s0g_dom; xa \\<in> lk xb; (xc, xd) \\<in> az xb;\n         xa \\<notin> Domain (kn xb)\\<rbrakk>\n        \\<Longrightarrow> xa = xc\nA total of 13 subgoals...", "apply (blast)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_s0g_dom [iff]: \"reach s0g \\<subseteq> s0g_dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach s0g \\<subseteq> s0g_dom", "by (rule inv_rule_basic, auto)"], ["", "text \\<open>As en external invariant.\\<close>"], ["", "lemma PO_s0g_obs_dom [iff]: \"oreach s0g \\<subseteq> s0g_dom\""], ["proof (prove)\ngoal (1 subgoal):\n 1. oreach s0g \\<subseteq> s0g_dom", "by (rule external_from_internal_invariant) (auto del: subsetI)"], ["", "end"]]}