{"file_name": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement/Auth_simple/m2_confid_chan.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Security_Protocol_Refinement", "problem_names": ["lemmas m2_defs = \n  m2_def m2_init_def m2_trans_def m2_obs_def\n  m2_step1_def m2_step2_def m2_step3_def m2_fake_def", "lemmas m2_inv1_noncesI = \n  m2_inv1_nonces_def [THEN setc_def_to_intro, rule_format]", "lemmas m2_inv1_noncesE [elim] = \n  m2_inv1_nonces_def [THEN setc_def_to_elim, rule_format]", "lemmas m2_inv1_noncesD = \n  m2_inv1_nonces_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_m2_inv1_init [iff]: \"init m2 \\<subseteq> m2_inv1_nonces\"", "lemma PO_m2_inv1_trans [iff]:\n  \"{m2_inv1_nonces} trans m2 {> m2_inv1_nonces}\"", "lemma PO_m2_inv012 [iff]: \n  \"reach m2 \\<subseteq> m2_inv1_nonces\"", "lemmas m2_inv3_msg2I = m2_inv3_msg2_def [THEN setc_def_to_intro, rule_format]", "lemmas m2_inv3_msg2E [elim] = m2_inv3_msg2_def [THEN setc_def_to_elim, rule_format]", "lemmas m2_inv3_msg2D = m2_inv3_msg2_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_m2_inv4_init [iff]:\n  \"init m2 \\<subseteq> m2_inv3_msg2\"", "lemma PO_m2_inv4_trans [iff]:\n  \"{m2_inv3_msg2} trans m2 {> m2_inv3_msg2}\"", "lemma PO_m2_inv4 [iff]: \"reach m2 \\<subseteq> m2_inv3_msg2\"", "lemmas m2_inv4_inon_secretI = \n  m2_inv4_inon_secret_def [THEN setc_def_to_intro, rule_format]", "lemmas m2_inv4_inon_secretE [elim] = \n  m2_inv4_inon_secret_def [THEN setc_def_to_elim, rule_format]", "lemmas m2_inv4_inon_secretD = \n  m2_inv4_inon_secret_def [THEN setc_def_to_dest, rule_format, rotated 1]", "lemma PO_m2_inv3_init [iff]:\n  \"init m2 \\<subseteq> m2_inv4_inon_secret\"", "lemma PO_m2_inv3_trans [iff]:\n  \"{m2_inv4_inon_secret \\<inter> m2_inv1_nonces} \n     trans m2 \n   {> m2_inv4_inon_secret}\"", "lemma PO_m2_inv3 [iff]: \"reach m2 \\<subseteq> m2_inv4_inon_secret\"", "lemma PO_m2_step1_refines_m1_step1:\n  \"{R12} \n     (m1_step1 Ra A B Na), (m2_step1 Ra A B Na) \n   {> R12}\"", "lemma PO_m2_step2_refines_m1_step2:\n  \"{R12} \n     (m1_step2 Rb A B Na Nb), (m2_step2 Rb A B Na Nb) \n   {> R12}\"", "lemma PO_m2_step3_refines_m1_step3:\n  \"{R12 \\<inter> UNIV \\<times> (m2_inv4_inon_secret \\<inter> m2_inv3_msg2)} \n     (m1_step3 Ra A B Na Nb), (m2_step3 Ra A B Na Nb) \n   {> R12}\"", "lemma PO_m2_fake_refines_skip:\n  \"{R12} Id, m2_fake {> R12}\"", "lemmas PO_m2_trans_refines_m1_trans = \n  PO_m2_step1_refines_m1_step1 PO_m2_step2_refines_m1_step2\n  PO_m2_step3_refines_m1_step3 PO_m2_fake_refines_skip", "lemma PO_m2_refines_init_m1 [iff]:\n  \"init m2 \\<subseteq> R12``(init m1)\"", "lemma PO_m2_refines_trans_m1 [iff]:\n  \"{R12 \\<inter> \n    UNIV \\<times> (m2_inv4_inon_secret \\<inter> m2_inv3_msg2)} \n     (trans m1), (trans m2) \n   {> R12}\"", "lemma PO_R12_obs_consistent [iff]:\n  \"obs_consistent R12 med21 m1 m2\"", "lemma PO_m3_refines_m2:\n  \"refines \n     (R12 \\<inter> \n      UNIV \\<times> (m2_inv4_inon_secret \\<inter> m2_inv3_msg2 \\<inter> m2_inv1_nonces))\n     med21 m1 m2\""], "translations": [["", "lemmas m2_defs = \n  m2_def m2_init_def m2_trans_def m2_obs_def\n  m2_step1_def m2_step2_def m2_step3_def m2_fake_def"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Invariants\\<close>"], ["", "(******************************************************************************)"], ["", "subsubsection \\<open>Invariant 1: Messages only contains generated nonces.\\<close>"], ["", "(******************************************************************************)"], ["", "definition \n  m2_inv1_nonces :: \"m2_state set\" where\n  \"m2_inv1_nonces \\<equiv> {s. \\<forall>R. \n     aNon (R$0) \\<in> atoms (chan s) \\<longrightarrow> R \\<in> dom (runs s) \n  }\""], ["", "lemmas m2_inv1_noncesI = \n  m2_inv1_nonces_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m2_inv1_noncesE [elim] = \n  m2_inv1_nonces_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m2_inv1_noncesD = \n  m2_inv1_nonces_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "lemma PO_m2_inv1_init [iff]: \"init m2 \\<subseteq> m2_inv1_nonces\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m2 \\<subseteq> m2_inv1_nonces", "by (auto simp add: PO_hoare_def m2_defs intro!: m2_inv1_noncesI)"], ["", "lemma PO_m2_inv1_trans [iff]:\n  \"{m2_inv1_nonces} trans m2 {> m2_inv1_nonces}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m2_inv1_nonces} TS.trans m2 {> m2_inv1_nonces}", "apply (auto simp add: PO_hoare_def m2_defs intro!: m2_inv1_noncesI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>R xa xd.\n       \\<lbrakk>xa \\<in> m2_inv1_nonces; xd \\<notin> dom (runs xa);\n        R \\<notin> dom (runs xa);\n        aNon (R $ 0) \\<in> atoms (chan xa)\\<rbrakk>\n       \\<Longrightarrow> R = xd\n 2. \\<And>R xa xb xc xe.\n       \\<lbrakk>xa \\<in> m2_inv1_nonces; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (R $ 0)]) \\<in> chan xa;\n        R \\<notin> dom (runs xa)\\<rbrakk>\n       \\<Longrightarrow> R = xe\n 3. \\<And>R xa xb xc xe xf.\n       \\<lbrakk>xa \\<in> m2_inv1_nonces; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa;\n        R \\<notin> dom (runs xa);\n        aNon (R $ 0) \\<in> atoms (chan xa)\\<rbrakk>\n       \\<Longrightarrow> R = xe", "apply (auto dest: m2_inv1_noncesD)\n\\<comment> \\<open>1 subgoal\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>R xa xb xc xe.\n       \\<lbrakk>xa \\<in> m2_inv1_nonces; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (R $ 0)]) \\<in> chan xa;\n        R \\<notin> dom (runs xa)\\<rbrakk>\n       \\<Longrightarrow> R = xe", "apply (subgoal_tac \"aNon (R$0) \\<in> atoms (chan xa)\", auto)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_m2_inv012 [iff]: \n  \"reach m2 \\<subseteq> m2_inv1_nonces\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m2 \\<subseteq> m2_inv1_nonces", "by (rule inv_rule_basic) (auto)"], ["", "subsubsection \\<open>Invariant 3: relates message 2 with the responder run\\<close>"], ["", "(******************************************************************************)\n(*\n 1. \\<And>a y. \\<lbrakk>runs a = runs y; runs y Ra = Some (Init, [A, B], []);\n           Confid A B (Msg [aNon (Ra$0), aNon Nb]) \\<in> chan y; A \\<notin> bad; B \\<notin> bad\\<rbrakk>\n          \\<Longrightarrow> \\<exists>Rb. Nb = Rb $ 0 \\<and> runs y Rb = Some (Resp, [A, B], [aNon (Ra $ 0)])\n*)"], ["", "text \\<open>It is needed, together with initiator nonce secrecy, in proof \nobligation REF/@{term m2_step2}.\\<close>"], ["", "definition \n  m2_inv3_msg2 :: \"m2_state set\" where\n  \"m2_inv3_msg2 \\<equiv> {s. \\<forall>A B Na Nb. \n     Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan s \\<longrightarrow> \n     aNon Na \\<notin> extr ik0 (chan s) \\<longrightarrow>\n       (\\<exists>Rb. Nb = Rb$0 \\<and> runs s Rb = Some (Resp, [A, B], [aNon Na]))\n  }\""], ["", "lemmas m2_inv3_msg2I = m2_inv3_msg2_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m2_inv3_msg2E [elim] = m2_inv3_msg2_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m2_inv3_msg2D = m2_inv3_msg2_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "lemma PO_m2_inv4_init [iff]:\n  \"init m2 \\<subseteq> m2_inv3_msg2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m2 \\<subseteq> m2_inv3_msg2", "by (auto simp add: PO_hoare_def m2_defs intro!: m2_inv3_msg2I)"], ["", "lemma PO_m2_inv4_trans [iff]:\n  \"{m2_inv3_msg2} trans m2 {> m2_inv3_msg2}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m2_inv3_msg2} TS.trans m2 {> m2_inv3_msg2}", "apply (auto simp add: PO_hoare_def m2_defs intro!: m2_inv3_msg2I)"], ["proof (prove)\ngoal (8 subgoals):\n 1. \\<And>A B Na Nb xa xb xd.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xd \\<notin> dom (runs xa);\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa;\n        Na \\<noteq> xd $ 0; aNon Na \\<notin> extr ik0 (chan xa);\n        xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xd \\<and>\n                            (Rb \\<noteq> xd \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 2. \\<And>A B Na Nb xa xc xd.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xd \\<notin> dom (runs xa);\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa;\n        Na \\<noteq> xd $ 0; aNon Na \\<notin> extr ik0 (chan xa);\n        xc \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xd \\<and>\n                            (Rb \\<noteq> xd \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 3. \\<And>A B Na Nb xa xb xc xd.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xd \\<notin> dom (runs xa);\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa;\n        aNon Na \\<notin> extr ik0 (chan xa); xb \\<notin> bad;\n        xc \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xd \\<and>\n                            (Rb \\<noteq> xd \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 4. \\<And>A B Na Nb xa xb xc xe xf.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa;\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa; Na \\<noteq> xf;\n        Na \\<noteq> xe $ 0; aNon Na \\<notin> extr ik0 (chan xa);\n        xc \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xe \\<and>\n                            (Rb \\<noteq> xe \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 5. \\<And>A B Na Nb xa xb xc xe xf.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa;\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa; Na \\<noteq> xf;\n        Na \\<noteq> xe $ 0; aNon Na \\<notin> extr ik0 (chan xa);\n        xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xe \\<and>\n                            (Rb \\<noteq> xe \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 6. \\<And>A B Na Nb xa xb xc xe xf.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa;\n        aNon Na \\<notin> extr ik0 (chan xa); xc \\<notin> bad;\n        xb \\<notin> bad;\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            (Rb = xe \\<longrightarrow>\n                             Nb = xe $ 0 \\<and>\n                             xb = A \\<and> xc = B \\<and> xf = Na) \\<and>\n                            (Rb \\<noteq> xe \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 7. \\<And>A B Na Nb xa xb xc xd xg.\n       \\<lbrakk>Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa;\n        aNon Na \\<notin> extr ik0 (chan xa); xa \\<in> m2_inv3_msg2;\n        runs xa xd = Some (Init, [xb, xc], []);\n        Confid xc xb (Msg [aNon (xd $ 0), aNon xg]) \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xd \\<and>\n                            (Rb \\<noteq> xd \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 8. \\<And>A B Na Nb xa.\n       \\<lbrakk>Confid B A (Msg [aNon Na, aNon Nb])\n                \\<in> fake ik0 (dom (runs xa)) (chan xa);\n        aNon Na \\<notin> extr ik0 (chan xa); xa \\<in> m2_inv3_msg2\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Nb = Rb $ 0 \\<and>\n                            runs xa Rb = Some (Resp, [A, B], [aNon Na])", "apply (auto dest: m2_inv3_msg2D dom_lemmas)\n\\<comment> \\<open>2 subgoals\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B Na Nb xa xb xc xe xf.\n       \\<lbrakk>xa \\<in> m2_inv3_msg2; xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa;\n        aNon Na \\<notin> extr ik0 (chan xa); xc \\<notin> bad;\n        xb \\<notin> bad;\n        Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            (Rb = xe \\<longrightarrow>\n                             Nb = xe $ 0 \\<and>\n                             xb = A \\<and> xc = B \\<and> xf = Na) \\<and>\n                            (Rb \\<noteq> xe \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))\n 2. \\<And>A B Na Nb xa xb xc xd xg.\n       \\<lbrakk>Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa;\n        aNon Na \\<notin> extr ik0 (chan xa); xa \\<in> m2_inv3_msg2;\n        runs xa xd = Some (Init, [xb, xc], []);\n        Confid xc xb (Msg [aNon (xd $ 0), aNon xg]) \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xd \\<and>\n                            (Rb \\<noteq> xd \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))", "apply (drule m2_inv3_msg2D, auto dest: dom_lemmas)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B Na Nb xa xb xc xd xg.\n       \\<lbrakk>Confid B A (Msg [aNon Na, aNon Nb]) \\<in> chan xa;\n        aNon Na \\<notin> extr ik0 (chan xa); xa \\<in> m2_inv3_msg2;\n        runs xa xd = Some (Init, [xb, xc], []);\n        Confid xc xb (Msg [aNon (xd $ 0), aNon xg]) \\<in> chan xa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Rb.\n                            Rb \\<noteq> xd \\<and>\n                            (Rb \\<noteq> xd \\<longrightarrow>\n                             Nb = Rb $ 0 \\<and>\n                             runs xa Rb = Some (Resp, [A, B], [aNon Na]))", "apply (drule m2_inv3_msg2D, auto, force)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_m2_inv4 [iff]: \"reach m2 \\<subseteq> m2_inv3_msg2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m2 \\<subseteq> m2_inv3_msg2", "by (rule inv_rule_incr) (auto del: subsetI)"], ["", "subsubsection \\<open>Invariant 4: Initiator nonce secrecy.\\<close>"], ["", "(******************************************************************************)"], ["", "text \\<open>It is needed in the proof \nobligation REF/@{term m2_step2}. It would be sufficient to prove the invariant \nfor the case @{term \"x=None\"}, but we have generalized it here.\\<close>"], ["", "definition \n  m2_inv4_inon_secret :: \"m2_state set\" where\n  \"m2_inv4_inon_secret \\<equiv> {s. \\<forall>A B Ra al.\n     runs s Ra = Some (Init, [A, B], al) \\<longrightarrow>\n     A \\<notin> bad \\<longrightarrow> B \\<notin> bad \\<longrightarrow> \n       aNon (Ra$0) \\<notin> extr ik0 (chan s)\n  }\""], ["", "lemmas m2_inv4_inon_secretI = \n  m2_inv4_inon_secret_def [THEN setc_def_to_intro, rule_format]"], ["", "lemmas m2_inv4_inon_secretE [elim] = \n  m2_inv4_inon_secret_def [THEN setc_def_to_elim, rule_format]"], ["", "lemmas m2_inv4_inon_secretD = \n  m2_inv4_inon_secret_def [THEN setc_def_to_dest, rule_format, rotated 1]"], ["", "lemma PO_m2_inv3_init [iff]:\n  \"init m2 \\<subseteq> m2_inv4_inon_secret\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m2 \\<subseteq> m2_inv4_inon_secret", "by (auto simp add: PO_hoare_def m2_defs intro!: m2_inv4_inon_secretI)"], ["", "lemma PO_m2_inv3_trans [iff]:\n  \"{m2_inv4_inon_secret \\<inter> m2_inv1_nonces} \n     trans m2 \n   {> m2_inv4_inon_secret}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {m2_inv4_inon_secret \\<inter>\n     m2_inv1_nonces} TS.trans m2 {> m2_inv4_inon_secret}", "apply (auto simp add: PO_hoare_def m2_defs intro!: m2_inv4_inon_secretI)"], ["proof (prove)\ngoal (9 subgoals):\n 1. \\<And>A B xa xd.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad;\n        xa \\<in> m2_inv4_inon_secret; xa \\<in> m2_inv1_nonces;\n        aNon (xd $ 0) \\<in> extr ik0 (chan xa);\n        xd \\<notin> dom (runs xa)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A B Ra al xa xb xd.\n       \\<lbrakk>xd \\<notin> dom (runs xa); Ra \\<noteq> xd;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; aNon (Ra $ 0) \\<in> extr ik0 (chan xa);\n        xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>A B Ra al xa xc xd.\n       \\<lbrakk>xd \\<notin> dom (runs xa); Ra \\<noteq> xd;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; aNon (Ra $ 0) \\<in> extr ik0 (chan xa);\n        xc \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 4. \\<And>A B Ra al xa xb xc xd.\n       \\<lbrakk>xd \\<notin> dom (runs xa); Ra \\<noteq> xd;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; aNon (Ra $ 0) \\<in> extr ik0 (chan xa);\n        xb \\<notin> bad; xc \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 5. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xc \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 6. \\<And>A B Ra al xa xb xc xe xf.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xc \\<in> bad;\n        aNon (Ra $ 0) \\<in> extr ik0 (chan xa)\\<rbrakk>\n       \\<Longrightarrow> False\n 7. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 8. \\<And>A B Ra al xa xb xc xe xf.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xb \\<in> bad;\n        aNon (Ra $ 0) \\<in> extr ik0 (chan xa)\\<rbrakk>\n       \\<Longrightarrow> False\n 9. \\<And>A B Ra al xa xb xc xe xf.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon xf]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; aNon (Ra $ 0) \\<in> extr ik0 (chan xa);\n        xc \\<notin> bad; xb \\<notin> bad\\<rbrakk>\n       \\<Longrightarrow> False", "apply (auto dest: m2_inv4_inon_secretD) \n\\<comment> \\<open>3 subgoals\\<close>"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>A B xa xd.\n       \\<lbrakk>A \\<notin> bad; B \\<notin> bad;\n        xa \\<in> m2_inv4_inon_secret; xa \\<in> m2_inv1_nonces;\n        aNon (xd $ 0) \\<in> extr ik0 (chan xa);\n        xd \\<notin> dom (runs xa)\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xc \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 3. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fastforce)                \\<comment> \\<open>requires @{text \"m2_inv1_nonces\"}\\<close>"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xc \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fastforce)                \\<comment> \\<open>requires ind hyp\\<close>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>A B Ra al xa xb xc xe.\n       \\<lbrakk>xe \\<notin> dom (runs xa);\n        Confid xb xc (Msg [aNon (Ra $ 0)]) \\<in> chan xa; Ra \\<noteq> xe;\n        runs xa Ra = Some (Init, [A, B], al); A \\<notin> bad;\n        B \\<notin> bad; xa \\<in> m2_inv4_inon_secret;\n        xa \\<in> m2_inv1_nonces; xb \\<in> bad\\<rbrakk>\n       \\<Longrightarrow> False", "apply (fastforce)                \\<comment> \\<open>requires ind hyp\\<close>"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_m2_inv3 [iff]: \"reach m2 \\<subseteq> m2_inv4_inon_secret\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reach m2 \\<subseteq> m2_inv4_inon_secret", "by (rule inv_rule_incr [where J=\"m2_inv1_nonces\"]) (auto)"], ["", "(******************************************************************************)"], ["", "subsection \\<open>Refinement\\<close>"], ["", "(******************************************************************************)"], ["", "definition\n  R12 :: \"(m1_state \\<times> m2_state) set\" where\n  \"R12 \\<equiv> {(s, t). runs s = runs t}\""], ["", "abbreviation\n  med21 :: \"m2_obs \\<Rightarrow> m1_obs\" where\n  \"med21 \\<equiv> id\""], ["", "text \\<open>Proof obligations.\\<close>"], ["", "lemma PO_m2_step1_refines_m1_step1:\n  \"{R12} \n     (m1_step1 Ra A B Na), (m2_step1 Ra A B Na) \n   {> R12}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12} m1_step1 Ra A B Na, m2_step1 Ra A B Na {> R12}", "by (auto simp add: PO_rhoare_defs R12_def m1_defs m2_defs)"], ["", "lemma PO_m2_step2_refines_m1_step2:\n  \"{R12} \n     (m1_step2 Rb A B Na Nb), (m2_step2 Rb A B Na Nb) \n   {> R12}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12} m1_step2 Rb A B Na Nb, m2_step2 Rb A B Na Nb {> R12}", "by (auto simp add: PO_rhoare_defs R12_def m1_defs m2_defs)"], ["", "lemma PO_m2_step3_refines_m1_step3:\n  \"{R12 \\<inter> UNIV \\<times> (m2_inv4_inon_secret \\<inter> m2_inv3_msg2)} \n     (m1_step3 Ra A B Na Nb), (m2_step3 Ra A B Na Nb) \n   {> R12}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12 \\<inter>\n     UNIV \\<times>\n     (m2_inv4_inon_secret \\<inter>\n      m2_inv3_msg2)} m1_step3 Ra A B Na Nb, m2_step3 Ra A B Na Nb {> R12}", "by (auto simp add: PO_rhoare_defs R12_def m1_defs m2_defs)\n   (blast)"], ["", "text \\<open>New fake events refine skip.\\<close>"], ["", "lemma PO_m2_fake_refines_skip:\n  \"{R12} Id, m2_fake {> R12}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12} Id, m2_fake {> R12}", "by (auto simp add: PO_rhoare_def R12_def m1_defs m2_defs)"], ["", "lemmas PO_m2_trans_refines_m1_trans = \n  PO_m2_step1_refines_m1_step1 PO_m2_step2_refines_m1_step2\n  PO_m2_step3_refines_m1_step3 PO_m2_fake_refines_skip"], ["", "text \\<open>All together now...\\<close>"], ["", "lemma PO_m2_refines_init_m1 [iff]:\n  \"init m2 \\<subseteq> R12``(init m1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. init m2 \\<subseteq> R12 `` init m1", "by (auto simp add: R12_def m1_defs m2_defs)"], ["", "lemma PO_m2_refines_trans_m1 [iff]:\n  \"{R12 \\<inter> \n    UNIV \\<times> (m2_inv4_inon_secret \\<inter> m2_inv3_msg2)} \n     (trans m1), (trans m2) \n   {> R12}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {R12 \\<inter>\n     UNIV \\<times>\n     (m2_inv4_inon_secret \\<inter>\n      m2_inv3_msg2)} TS.trans m1, TS.trans m2 {> R12}", "apply (auto simp add: m2_def m2_trans_def m1_def m1_trans_def)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x xa xb xd.\n       {R12 \\<inter>\n        UNIV \\<times>\n        (m2_inv4_inon_secret \\<inter>\n         m2_inv3_msg2)} (\\<Union>x xa xb xc xd Nb.\n                            m1_step1 xb x xa xd \\<union>\n                            m1_step2 xc x xa xd Nb \\<union>\n                            m1_step3 xb x xa xd\n                             Nb)\\<^sup>=, m2_step1 xb x xa xd {> R12}\n 2. \\<And>x xa xc xd Nb.\n       {R12 \\<inter>\n        UNIV \\<times>\n        (m2_inv4_inon_secret \\<inter>\n         m2_inv3_msg2)} (\\<Union>x xa xb xc xd Nb.\n                            m1_step1 xb x xa xd \\<union>\n                            m1_step2 xc x xa xd Nb \\<union>\n                            m1_step3 xb x xa xd\n                             Nb)\\<^sup>=, m2_step2 xc x xa xd Nb {> R12}\n 3. \\<And>x xa xb xd Nb.\n       {R12 \\<inter>\n        UNIV \\<times>\n        (m2_inv4_inon_secret \\<inter>\n         m2_inv3_msg2)} (\\<Union>x xa xb xc xd Nb.\n                            m1_step1 xb x xa xd \\<union>\n                            m1_step2 xc x xa xd Nb \\<union>\n                            m1_step3 xb x xa xd\n                             Nb)\\<^sup>=, m2_step3 xb x xa xd Nb {> R12}\n 4. {R12 \\<inter>\n     UNIV \\<times>\n     (m2_inv4_inon_secret \\<inter>\n      m2_inv3_msg2)} (\\<Union>x xa xb xc xd Nb.\n                         m1_step1 xb x xa xd \\<union>\n                         m1_step2 xc x xa xd Nb \\<union>\n                         m1_step3 xb x xa xd Nb)\\<^sup>=, m2_fake {> R12}", "apply (blast intro!: PO_m2_trans_refines_m1_trans)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma PO_R12_obs_consistent [iff]:\n  \"obs_consistent R12 med21 m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. obs_consistent R12 med21 m1 m2", "by (auto simp add: obs_consistent_def R12_def m1_defs m2_defs)"], ["", "lemma PO_m3_refines_m2:\n  \"refines \n     (R12 \\<inter> \n      UNIV \\<times> (m2_inv4_inon_secret \\<inter> m2_inv3_msg2 \\<inter> m2_inv1_nonces))\n     med21 m1 m2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. refines\n     (R12 \\<inter>\n      UNIV \\<times>\n      (m2_inv4_inon_secret \\<inter> m2_inv3_msg2 \\<inter> m2_inv1_nonces))\n     med21 m1 m2", "by (rule Refinement_using_invariants) (auto)"], ["", "end"]]}