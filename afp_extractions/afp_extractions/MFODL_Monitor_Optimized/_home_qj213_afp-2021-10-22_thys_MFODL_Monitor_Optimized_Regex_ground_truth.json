{"file_name": "/home/qj213/afp-2021-10-22/thys/MFODL_Monitor_Optimized/Regex.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFODL_Monitor_Optimized", "problem_names": ["lemma finite_atms[simp]: \"finite (atms r)\"", "lemma size_regex_estimation[termination_simp]: \"x \\<in> atms r \\<Longrightarrow> y < f x \\<Longrightarrow> y < size_regex f r\"", "lemma size_regex_estimation'[termination_simp]: \"x \\<in> atms r \\<Longrightarrow> y \\<le> f x \\<Longrightarrow> y \\<le> size_regex f r\"", "lemma fv_regex_cong[fundef_cong]:\n  \"r = r' \\<Longrightarrow> (\\<And>z. z \\<in> atms r \\<Longrightarrow> fv z = fv' z) \\<Longrightarrow> fv_regex fv r = fv_regex fv' r'\"", "lemma finite_fv_regex[simp]: \"(\\<And>z. z \\<in> atms r \\<Longrightarrow> finite (fv z)) \\<Longrightarrow> finite (fv_regex fv r)\"", "lemma fv_regex_commute:\n  \"(\\<And>z. z \\<in> atms r \\<Longrightarrow> x \\<in> fv z \\<longleftrightarrow> g x \\<in> fv' z) \\<Longrightarrow> x \\<in> fv_regex fv r \\<longleftrightarrow> g x \\<in> fv_regex fv' r\"", "lemma fv_regex_alt: \"fv_regex fv r = (\\<Union>z \\<in> atms r. fv z)\"", "lemma insert_Un: \"insert x (A \\<union> B) = insert x A \\<union> insert x B\"", "lemma nfv_regex_simps[simp]:\n  assumes [simp]: \"(\\<And>z. z \\<in> atms r \\<Longrightarrow> finite (fv z))\" \"(\\<And>z. z \\<in> atms s \\<Longrightarrow> finite (fv z))\"\n  shows\n  \"nfv_regex fv (Skip n) = 0\"\n  \"nfv_regex fv (Test \\<phi>) = Max (insert 0 (Suc ` fv \\<phi>))\"\n  \"nfv_regex fv (Plus r s) = max (nfv_regex fv r) (nfv_regex fv s)\"\n  \"nfv_regex fv (Times r s) = max (nfv_regex fv r) (nfv_regex fv s)\"\n  \"nfv_regex fv (Star r) = nfv_regex fv r\"", "lemma match_cong[fundef_cong]:\n  \"r = r' \\<Longrightarrow> (\\<And>i z. z \\<in> atms r \\<Longrightarrow> t i z = t' i z) \\<Longrightarrow> match t r = match t' r'\"", "lemma lpd\\<kappa>_lpd: \"lpd\\<kappa> \\<kappa> test i r = \\<kappa> ` lpd test i r\"", "lemma rpd\\<kappa>_rpd: \"rpd\\<kappa> \\<kappa> test i r = \\<kappa> ` rpd test i r\"", "lemma match_le: \"match test r i j \\<Longrightarrow> i \\<le> j\"", "lemma match_rtranclp_le: \"(match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow> i \\<le> j\"", "lemma eps_match: \"eps test i r \\<longleftrightarrow> match test r i i\"", "lemma lpd_match: \"i < j \\<Longrightarrow> match test r i j \\<longleftrightarrow> (\\<Squnion>s \\<in> lpd test i r. match test s) (i + 1) j\"", "lemma rpd_match: \"i < j \\<Longrightarrow> match test r i j \\<longleftrightarrow> (\\<Squnion>s \\<in> rpd test j r. match test s) i (j - 1)\"", "lemma lpd_fv_regex: \"s \\<in> lpd test i r \\<Longrightarrow> fv_regex fv s \\<subseteq> fv_regex fv r\"", "lemma rpd_fv_regex: \"s \\<in> rpd test i r \\<Longrightarrow> fv_regex fv s \\<subseteq> fv_regex fv r\"", "lemma match_fv_cong:\n  \"(\\<And>i x. x \\<in> atms r \\<Longrightarrow> test i x = test' i x) \\<Longrightarrow> match test r = match test' r\"", "lemma eps_fv_cong:\n  \"(\\<And>i x. x \\<in> atms r \\<Longrightarrow> test i x = test' i x) \\<Longrightarrow> eps test i r = eps test' i r\"", "lemmas safe_regex_induct = safe_regex.induct[case_names Skip Test Plus TimesF TimesP Star]", "lemma safe_cosafe:\n  \"(\\<And>x. x \\<in> atms r \\<Longrightarrow> safe Strict x \\<Longrightarrow> safe Lax x) \\<Longrightarrow> safe_regex m Strict r \\<Longrightarrow> safe_regex m Lax r\"", "lemma safe_lpd_fv_regex_le: \"safe_regex Futu Strict r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> fv_regex fv r \\<subseteq> fv_regex fv s\"", "lemma safe_lpd_fv_regex: \"safe_regex Futu Strict r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> fv_regex fv s = fv_regex fv r\"", "lemma cosafe_lpd: \"safe_regex Futu Lax r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> safe_regex Futu Lax s\"", "lemma safe_lpd: \"(\\<forall>x \\<in> atms r. safe Strict x \\<longrightarrow> safe Lax x) \\<Longrightarrow>\n  safe_regex Futu Strict r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> safe_regex Futu Strict s\"", "lemma safe_rpd_fv_regex_le: \"safe_regex Past Strict r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> fv_regex fv r \\<subseteq> fv_regex fv s\"", "lemma safe_rpd_fv_regex: \"safe_regex Past Strict r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> fv_regex fv s = fv_regex fv r\"", "lemma cosafe_rpd: \"safe_regex Past Lax r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> safe_regex Past Lax s\"", "lemma safe_rpd: \"(\\<forall>x \\<in> atms r. safe Strict x \\<longrightarrow> safe Lax x) \\<Longrightarrow>\n  safe_regex Past Strict r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> safe_regex Past Strict s\"", "lemma safe_regex_safe: \"(\\<And>g r. safe g r \\<Longrightarrow> safe Lax r) \\<Longrightarrow>\n  safe_regex m g r \\<Longrightarrow> x \\<in> atms r \\<Longrightarrow> safe Lax x\"", "lemma safe_regex_map_regex:\n  \"(\\<And>g x. x \\<in> atms r \\<Longrightarrow> safe g x \\<Longrightarrow>  safe g (f x)) \\<Longrightarrow> (\\<And>x. x \\<in> atms r \\<Longrightarrow> fv (f x) = fv x) \\<Longrightarrow>\n   safe_regex m g r \\<Longrightarrow> safe_regex m g (map_regex f r)\"", "lemma safe_regex_cong[fundef_cong]:\n  \"(\\<And>g x. x \\<in> atms r \\<Longrightarrow> safe g x = safe' g x) \\<Longrightarrow>\n  Regex.safe_regex fv safe m g r = Regex.safe_regex fv safe' m g r\"", "lemma safe_regex_mono:\n  \"(\\<And>g x. x \\<in> atms r \\<Longrightarrow> safe g x \\<Longrightarrow> safe' g x) \\<Longrightarrow>\n  Regex.safe_regex fv safe m g r \\<Longrightarrow> Regex.safe_regex fv safe' m g r\"", "lemma match_map_regex: \"match t (map_regex f r) = match (\\<lambda>k z. t k (f z)) r\"", "lemma match_cong_strong:\n  \"(\\<And>k z. k \\<in> {i ..< j + 1} \\<Longrightarrow> z \\<in> atms r \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow> match t r i j = match t' r i j\""], "translations": [["", "lemma finite_atms[simp]: \"finite (atms r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (atms r)", "by (induct r) auto"], ["", "definition \"Wild = Skip 1\""], ["", "lemma size_regex_estimation[termination_simp]: \"x \\<in> atms r \\<Longrightarrow> y < f x \\<Longrightarrow> y < size_regex f r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> atms r; y < f x\\<rbrakk>\n    \\<Longrightarrow> y < size_regex f r", "by (induct r) auto"], ["", "lemma size_regex_estimation'[termination_simp]: \"x \\<in> atms r \\<Longrightarrow> y \\<le> f x \\<Longrightarrow> y \\<le> size_regex f r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> atms r; y \\<le> f x\\<rbrakk>\n    \\<Longrightarrow> y \\<le> size_regex f r", "by (induct r) auto"], ["", "qualified"], ["", "definition \"TimesL r S = Times r ` S\""], ["", "qualified"], ["", "definition \"TimesR R s = (\\<lambda>r. Times r s) ` R\""], ["", "qualified"], ["", "primrec fv_regex where\n  \"fv_regex fv (Skip n) = {}\"\n| \"fv_regex fv (Test \\<phi>) = fv \\<phi>\"\n| \"fv_regex fv (Plus r s) = fv_regex fv r \\<union> fv_regex fv s\"\n| \"fv_regex fv (Times r s) = fv_regex fv r \\<union> fv_regex fv s\"\n| \"fv_regex fv (Star r) = fv_regex fv r\""], ["", "lemma fv_regex_cong[fundef_cong]:\n  \"r = r' \\<Longrightarrow> (\\<And>z. z \\<in> atms r \\<Longrightarrow> fv z = fv' z) \\<Longrightarrow> fv_regex fv r = fv_regex fv' r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r = r';\n     \\<And>z. z \\<in> atms r \\<Longrightarrow> fv z = fv' z\\<rbrakk>\n    \\<Longrightarrow> fv_regex fv r = fv_regex fv' r'", "by (induct r arbitrary: r') auto"], ["", "lemma finite_fv_regex[simp]: \"(\\<And>z. z \\<in> atms r \\<Longrightarrow> finite (fv z)) \\<Longrightarrow> finite (fv_regex fv r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z \\<in> atms r \\<Longrightarrow> finite (fv z)) \\<Longrightarrow>\n    finite (fv_regex fv r)", "by (induct r) auto"], ["", "lemma fv_regex_commute:\n  \"(\\<And>z. z \\<in> atms r \\<Longrightarrow> x \\<in> fv z \\<longleftrightarrow> g x \\<in> fv' z) \\<Longrightarrow> x \\<in> fv_regex fv r \\<longleftrightarrow> g x \\<in> fv_regex fv' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        z \\<in> atms r \\<Longrightarrow>\n        (x \\<in> fv z) = (g x \\<in> fv' z)) \\<Longrightarrow>\n    (x \\<in> fv_regex fv r) = (g x \\<in> fv_regex fv' r)", "by (induct r) auto"], ["", "lemma fv_regex_alt: \"fv_regex fv r = (\\<Union>z \\<in> atms r. fv z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv_regex fv r = \\<Union> (fv ` atms r)", "by (induct r) auto"], ["", "qualified"], ["", "definition nfv_regex where\n  \"nfv_regex fv r = Max (insert 0 (Suc ` fv_regex fv r))\""], ["", "lemma insert_Un: \"insert x (A \\<union> B) = insert x A \\<union> insert x B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert x (A \\<union> B) = insert x A \\<union> insert x B", "by auto"], ["", "lemma nfv_regex_simps[simp]:\n  assumes [simp]: \"(\\<And>z. z \\<in> atms r \\<Longrightarrow> finite (fv z))\" \"(\\<And>z. z \\<in> atms s \\<Longrightarrow> finite (fv z))\"\n  shows\n  \"nfv_regex fv (Skip n) = 0\"\n  \"nfv_regex fv (Test \\<phi>) = Max (insert 0 (Suc ` fv \\<phi>))\"\n  \"nfv_regex fv (Plus r s) = max (nfv_regex fv r) (nfv_regex fv s)\"\n  \"nfv_regex fv (Times r s) = max (nfv_regex fv r) (nfv_regex fv s)\"\n  \"nfv_regex fv (Star r) = nfv_regex fv r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (nfv_regex fv (Skip n) = 0 &&&\n     nfv_regex fv (Test \\<phi>) = Max (insert 0 (Suc ` fv \\<phi>))) &&&\n    nfv_regex fv (Plus r s) = max (nfv_regex fv r) (nfv_regex fv s) &&&\n    nfv_regex fv (Times r s) = max (nfv_regex fv r) (nfv_regex fv s) &&&\n    nfv_regex fv (Star r) = nfv_regex fv r", "unfolding nfv_regex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (Max (insert 0 (Suc ` fv_regex fv (Skip n))) = 0 &&&\n     Max (insert 0 (Suc ` fv_regex fv (Test \\<phi>))) =\n     Max (insert 0 (Suc ` fv \\<phi>))) &&&\n    Max (insert 0 (Suc ` fv_regex fv (Plus r s))) =\n    max (Max (insert 0 (Suc ` fv_regex fv r)))\n     (Max (insert 0 (Suc ` fv_regex fv s))) &&&\n    Max (insert 0 (Suc ` fv_regex fv (Times r s))) =\n    max (Max (insert 0 (Suc ` fv_regex fv r)))\n     (Max (insert 0 (Suc ` fv_regex fv s))) &&&\n    Max (insert 0 (Suc ` fv_regex fv (Star r))) =\n    Max (insert 0 (Suc ` fv_regex fv r))", "by (auto simp add: image_Un Max_Un insert_Un simp del: Un_insert_right Un_insert_left)"], ["", "abbreviation \"min_regex_default f r j \\<equiv> (if atms r = {} then j else Min ((\\<lambda>z. f z j) ` atms r))\""], ["", "qualified"], ["", "primrec match :: \"(nat \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a regex \\<Rightarrow> nat \\<Rightarrow> nat \\<Rightarrow> bool\" where\n  \"match test (Skip n) = (\\<lambda>i j. j = i + n)\"\n| \"match test (Test \\<phi>) = (\\<lambda>i j. i = j \\<and> test i \\<phi>)\"\n| \"match test (Plus r s) = match test r \\<squnion> match test s\"\n| \"match test (Times r s) = match test r OO match test s\"\n| \"match test (Star r) = (match test r)\\<^sup>*\\<^sup>*\""], ["", "lemma match_cong[fundef_cong]:\n  \"r = r' \\<Longrightarrow> (\\<And>i z. z \\<in> atms r \\<Longrightarrow> t i z = t' i z) \\<Longrightarrow> match t r = match t' r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r = r';\n     \\<And>i z. z \\<in> atms r \\<Longrightarrow> t i z = t' i z\\<rbrakk>\n    \\<Longrightarrow> match t r = match t' r'", "by (induct r arbitrary: r') auto"], ["", "qualified"], ["", "primrec eps where\n  \"eps test i (Skip n) = (n = 0)\"\n| \"eps test i (Test \\<phi>) = test i \\<phi>\"\n| \"eps test i (Plus r s) = (eps test i r \\<or> eps test i s)\"\n| \"eps test i (Times r s) = (eps test i r \\<and> eps test i s)\"\n| \"eps test i (Star r) = True\""], ["", "qualified"], ["", "primrec lpd where\n  \"lpd test i (Skip n) = (case n of 0 \\<Rightarrow> {} | Suc m \\<Rightarrow> {Skip m})\"\n| \"lpd test i (Test \\<phi>) = {}\"\n| \"lpd test i (Plus r s) = (lpd test i r \\<union> lpd test i s)\"\n| \"lpd test i (Times r s) = TimesR (lpd test i r) s \\<union> (if eps test i r then lpd test i s else {})\"\n| \"lpd test i (Star r) = TimesR (lpd test i r) (Star r)\""], ["", "qualified"], ["", "primrec lpd\\<kappa> where\n  \"lpd\\<kappa> \\<kappa> test i (Skip n) = (case n of 0 \\<Rightarrow> {} | Suc m \\<Rightarrow> {\\<kappa> (Skip m)})\"\n| \"lpd\\<kappa> \\<kappa> test i (Test \\<phi>) = {}\"\n| \"lpd\\<kappa> \\<kappa> test i (Plus r s) = lpd\\<kappa> \\<kappa> test i r \\<union> lpd\\<kappa> \\<kappa> test i s\"\n| \"lpd\\<kappa> \\<kappa> test i (Times r s) = lpd\\<kappa> (\\<lambda>t. \\<kappa> (Times t s)) test i r \\<union> (if eps test i r then lpd\\<kappa> \\<kappa> test i s else {})\"\n| \"lpd\\<kappa> \\<kappa> test i (Star r) = lpd\\<kappa> (\\<lambda>t. \\<kappa> (Times t (Star r))) test i r\""], ["", "qualified"], ["", "primrec rpd where\n  \"rpd test i (Skip n) = (case n of 0 \\<Rightarrow> {} | Suc m \\<Rightarrow> {Skip m})\"\n| \"rpd test i (Test \\<phi>) = {}\"\n| \"rpd test i (Plus r s) = (rpd test i r \\<union> rpd test i s)\"\n| \"rpd test i (Times r s) = TimesL r (rpd test i s) \\<union> (if eps test i s then rpd test i r else {})\"\n| \"rpd test i (Star r) = TimesL (Star r) (rpd test i r)\""], ["", "qualified"], ["", "primrec rpd\\<kappa> where\n  \"rpd\\<kappa> \\<kappa> test i (Skip n) = (case n of 0 \\<Rightarrow> {} | Suc m \\<Rightarrow> {\\<kappa> (Skip m)})\"\n| \"rpd\\<kappa> \\<kappa> test i (Test \\<phi>) = {}\"\n| \"rpd\\<kappa> \\<kappa> test i (Plus r s) = rpd\\<kappa> \\<kappa> test i r \\<union> rpd\\<kappa> \\<kappa> test i s\"\n| \"rpd\\<kappa> \\<kappa> test i (Times r s) = rpd\\<kappa> (\\<lambda>t. \\<kappa> (Times r t)) test i s \\<union> (if eps test i s then rpd\\<kappa> \\<kappa> test i r else {})\"\n| \"rpd\\<kappa> \\<kappa> test i (Star r) = rpd\\<kappa> (\\<lambda>t. \\<kappa> (Times (Star r) t)) test i r\""], ["", "lemma lpd\\<kappa>_lpd: \"lpd\\<kappa> \\<kappa> test i r = \\<kappa> ` lpd test i r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lpd\\<kappa> \\<kappa> test i r = \\<kappa> ` lpd test i r", "by (induct r arbitrary: \\<kappa>) (auto simp: TimesR_def split: nat.splits)"], ["", "lemma rpd\\<kappa>_rpd: \"rpd\\<kappa> \\<kappa> test i r = \\<kappa> ` rpd test i r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rpd\\<kappa> \\<kappa> test i r = \\<kappa> ` rpd test i r", "by (induct r arbitrary: \\<kappa>) (auto simp: TimesL_def split: nat.splits)"], ["", "lemma match_le: \"match test r i j \\<Longrightarrow> i \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match test r i j \\<Longrightarrow> i \\<le> j", "proof (induction r arbitrary: i j)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x i j. match test (Skip x) i j \\<Longrightarrow> i \\<le> j\n 2. \\<And>x i j. match test (Test x) i j \\<Longrightarrow> i \\<le> j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Plus r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Times r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j. match test r i j \\<Longrightarrow> i \\<le> j;\n        match test (Star r) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j", "case (Times r s)"], ["proof (state)\nthis:\n  match test r ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test s ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test (Times r s) i j\n\ngoal (5 subgoals):\n 1. \\<And>x i j. match test (Skip x) i j \\<Longrightarrow> i \\<le> j\n 2. \\<And>x i j. match test (Test x) i j \\<Longrightarrow> i \\<le> j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Plus r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Times r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j. match test r i j \\<Longrightarrow> i \\<le> j;\n        match test (Star r) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j", "then"], ["proof (chain)\npicking this:\n  match test r ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test s ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test (Times r s) i j", "show ?case"], ["proof (prove)\nusing this:\n  match test r ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test s ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test (Times r s) i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "using order.trans"], ["proof (prove)\nusing this:\n  match test r ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test s ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test (Times r s) i j\n  \\<lbrakk>?a \\<le> ?b; ?b \\<le> ?c\\<rbrakk> \\<Longrightarrow> ?a \\<le> ?c\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by fastforce"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (4 subgoals):\n 1. \\<And>x i j. match test (Skip x) i j \\<Longrightarrow> i \\<le> j\n 2. \\<And>x i j. match test (Test x) i j \\<Longrightarrow> i \\<le> j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Plus r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j. match test r i j \\<Longrightarrow> i \\<le> j;\n        match test (Star r) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x i j. match test (Skip x) i j \\<Longrightarrow> i \\<le> j\n 2. \\<And>x i j. match test (Test x) i j \\<Longrightarrow> i \\<le> j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Plus r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j. match test r i j \\<Longrightarrow> i \\<le> j;\n        match test (Star r) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j", "case (Star r)"], ["proof (state)\nthis:\n  match test r ?i ?j \\<Longrightarrow> ?i \\<le> ?j\n  match test (Star r) i j\n\ngoal (4 subgoals):\n 1. \\<And>x i j. match test (Skip x) i j \\<Longrightarrow> i \\<le> j\n 2. \\<And>x i j. match test (Test x) i j \\<Longrightarrow> i \\<le> j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Plus r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j. match test r i j \\<Longrightarrow> i \\<le> j;\n        match test (Star r) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j", "from Star.prems"], ["proof (chain)\npicking this:\n  match test (Star r) i j", "show ?case"], ["proof (prove)\nusing this:\n  match test (Star r) i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "unfolding match.simps"], ["proof (prove)\nusing this:\n  (match test r)\\<^sup>*\\<^sup>* i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by (induct i j rule: rtranclp.induct) (force dest: Star.IH)+"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (3 subgoals):\n 1. \\<And>x i j. match test (Skip x) i j \\<Longrightarrow> i \\<le> j\n 2. \\<And>x i j. match test (Test x) i j \\<Longrightarrow> i \\<le> j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j. match test r1 i j \\<Longrightarrow> i \\<le> j;\n        \\<And>i j. match test r2 i j \\<Longrightarrow> i \\<le> j;\n        match test (Plus r1 r2) i j\\<rbrakk>\n       \\<Longrightarrow> i \\<le> j", "qed auto"], ["", "lemma match_rtranclp_le: \"(match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow> i \\<le> j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow> i \\<le> j", "by (metis match.simps(5) match_le)"], ["", "lemma eps_match: \"eps test i r \\<longleftrightarrow> match test r i i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. eps test i r = match test r i i", "by (induction r) (auto dest: antisym[OF match_le match_le])"], ["", "lemma lpd_match: \"i < j \\<Longrightarrow> match test r i j \\<longleftrightarrow> (\\<Squnion>s \\<in> lpd test i r. match test s) (i + 1) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow>\n    match test r i j = (\\<Squnion> (match test ` lpd test i r)) (i + 1) j", "proof (induction r arbitrary: i j)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "case (Times r s)"], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow>\n  match test r ?i ?j = (\\<Squnion> (match test ` lpd test ?i r)) (?i + 1) ?j\n  ?i < ?j \\<Longrightarrow>\n  match test s ?i ?j = (\\<Squnion> (match test ` lpd test ?i s)) (?i + 1) ?j\n  i < j\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "have \"match test (Times r s) i j \\<longleftrightarrow> (\\<exists>k. match test r i k \\<and> match test s k j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match test (Times r s) i j =\n    (\\<exists>k. match test r i k \\<and> match test s k j)", "by auto"], ["proof (state)\nthis:\n  match test (Times r s) i j =\n  (\\<exists>k. match test r i k \\<and> match test s k j)\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "also"], ["proof (state)\nthis:\n  match test (Times r s) i j =\n  (\\<exists>k. match test r i k \\<and> match test s k j)\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "have \"\\<dots> \\<longleftrightarrow> match test r i i \\<and> match test s i j \\<or>\n    (\\<exists>k>i. match test r i k \\<and> match test s k j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>k. match test r i k \\<and> match test s k j) =\n    (match test r i i \\<and> match test s i j \\<or>\n     (\\<exists>k>i. match test r i k \\<and> match test s k j))", "using match_le[of test r i] nat_less_le"], ["proof (prove)\nusing this:\n  match test r i ?j \\<Longrightarrow> i \\<le> ?j\n  (?m < ?n) = (?m \\<le> ?n \\<and> ?m \\<noteq> ?n)\n\ngoal (1 subgoal):\n 1. (\\<exists>k. match test r i k \\<and> match test s k j) =\n    (match test r i i \\<and> match test s i j \\<or>\n     (\\<exists>k>i. match test r i k \\<and> match test s k j))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>k. match test r i k \\<and> match test s k j) =\n  (match test r i i \\<and> match test s i j \\<or>\n   (\\<exists>k>i. match test r i k \\<and> match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "also"], ["proof (state)\nthis:\n  (\\<exists>k. match test r i k \\<and> match test s k j) =\n  (match test r i i \\<and> match test s i j \\<or>\n   (\\<exists>k>i. match test r i k \\<and> match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "have \"\\<dots> \\<longleftrightarrow> match test r i i \\<and> (\\<Squnion>t \\<in> lpd test i s. match test t) (i + 1) j \\<or>\n    (\\<exists>k>i. (\\<Squnion>t \\<in> lpd test i r. match test t) (i + 1) k \\<and> match test s k j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match test r i i \\<and> match test s i j \\<or>\n     (\\<exists>k>i. match test r i k \\<and> match test s k j)) =\n    (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k>i.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j))", "using Times.IH(1) Times.IH(2)[OF Times.prems]"], ["proof (prove)\nusing this:\n  ?i < ?j \\<Longrightarrow>\n  match test r ?i ?j = (\\<Squnion> (match test ` lpd test ?i r)) (?i + 1) ?j\n  match test s i j = (\\<Squnion> (match test ` lpd test i s)) (i + 1) j\n\ngoal (1 subgoal):\n 1. (match test r i i \\<and> match test s i j \\<or>\n     (\\<exists>k>i. match test r i k \\<and> match test s k j)) =\n    (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k>i.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j))", "by metis"], ["proof (state)\nthis:\n  (match test r i i \\<and> match test s i j \\<or>\n   (\\<exists>k>i. match test r i k \\<and> match test s k j)) =\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k>i.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "also"], ["proof (state)\nthis:\n  (match test r i i \\<and> match test s i j \\<or>\n   (\\<exists>k>i. match test r i k \\<and> match test s k j)) =\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k>i.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "have \"\\<dots> \\<longleftrightarrow> match test r i i \\<and> (\\<Squnion>t \\<in> lpd test i s. match test t) (i + 1) j \\<or>\n    (\\<exists>k. (\\<Squnion>t \\<in> lpd test i r. match test t) (i + 1) k \\<and> match test s k j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k>i.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j)) =\n    (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j))", "using Times.prems"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k>i.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j)) =\n    (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j))", "by (intro disj_cong[OF refl] iff_exI) (auto dest: match_le)"], ["proof (state)\nthis:\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k>i.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j)) =\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "also"], ["proof (state)\nthis:\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k>i.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j)) =\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "have \"\\<dots> \\<longleftrightarrow> (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match test r i i \\<and>\n     (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n     (\\<exists>k.\n         (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n         match test s k j)) =\n    (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j", "by (force simp: TimesL_def TimesR_def eps_match)"], ["proof (state)\nthis:\n  (match test r i i \\<and>\n   (\\<Squnion> (match test ` lpd test i s)) (i + 1) j \\<or>\n   (\\<exists>k.\n       (\\<Squnion> (match test ` lpd test i r)) (i + 1) k \\<and>\n       match test s k j)) =\n  (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nlpd test i (Times r1 r2)))\n                          (i + 1) j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "finally"], ["proof (chain)\npicking this:\n  match test (Times r s) i j =\n  (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j", "show ?case"], ["proof (prove)\nusing this:\n  match test (Times r s) i j =\n  (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j\n\ngoal (1 subgoal):\n 1. match test (Times r s) i j =\n    (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j", "."], ["proof (state)\nthis:\n  match test (Times r s) i j =\n  (\\<Squnion> (match test ` lpd test i (Times r s))) (i + 1) j\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "case (Star r)"], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow>\n  match test r ?i ?j = (\\<Squnion> (match test ` lpd test ?i r)) (?i + 1) ?j\n  i < j\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "have \"\\<exists>s\\<in>lpd test i r. (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j\" if \"(match test r)\\<^sup>*\\<^sup>* i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>lpd test i r.\n       (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j", "using that Star.prems match_le[of test _ \"i + 1\"]"], ["proof (prove)\nusing this:\n  (match test r)\\<^sup>*\\<^sup>* i j\n  i < j\n  match test ?r (i + 1) ?j \\<Longrightarrow> i + 1 \\<le> ?j\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>lpd test i r.\n       (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j", "proof (induct rule: converse_rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>j < j;\n     \\<And>r j.\n        match test r (j + 1) j \\<Longrightarrow> j + 1 \\<le> j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>lpd test j r.\n                         (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                          (j + 1) j\n 2. \\<And>y z.\n       \\<lbrakk>match test r y z; (match test r)\\<^sup>*\\<^sup>* z j;\n        \\<lbrakk>z < j;\n         \\<And>r j.\n            match test r (z + 1) j \\<Longrightarrow> z + 1 \\<le> j\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s\\<in>lpd test z r.\n                             (match test s OO\n                              (match test r)\\<^sup>*\\<^sup>*)\n                              (z + 1) j;\n        y < j;\n        \\<And>r j.\n           match test r (y + 1) j \\<Longrightarrow> y + 1 \\<le> j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>lpd test y r.\n                            (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                             (y + 1) j", "case (step i k)"], ["proof (state)\nthis:\n  match test r i k\n  (match test r)\\<^sup>*\\<^sup>* k j\n  \\<lbrakk>k < j;\n   \\<And>r j.\n      match test r (k + 1) j \\<Longrightarrow> k + 1 \\<le> j\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<in>lpd test k r.\n                       (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                        (k + 1) j\n  i < j\n  match test ?r (i + 1) ?j \\<Longrightarrow> i + 1 \\<le> ?j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j < j;\n     \\<And>r j.\n        match test r (j + 1) j \\<Longrightarrow> j + 1 \\<le> j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>lpd test j r.\n                         (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                          (j + 1) j\n 2. \\<And>y z.\n       \\<lbrakk>match test r y z; (match test r)\\<^sup>*\\<^sup>* z j;\n        \\<lbrakk>z < j;\n         \\<And>r j.\n            match test r (z + 1) j \\<Longrightarrow> z + 1 \\<le> j\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s\\<in>lpd test z r.\n                             (match test s OO\n                              (match test r)\\<^sup>*\\<^sup>*)\n                              (z + 1) j;\n        y < j;\n        \\<And>r j.\n           match test r (y + 1) j \\<Longrightarrow> y + 1 \\<le> j\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>lpd test y r.\n                            (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                             (y + 1) j", "then"], ["proof (chain)\npicking this:\n  match test r i k\n  (match test r)\\<^sup>*\\<^sup>* k j\n  \\<lbrakk>k < j;\n   \\<And>r j.\n      match test r (k + 1) j \\<Longrightarrow> k + 1 \\<le> j\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<in>lpd test k r.\n                       (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                        (k + 1) j\n  i < j\n  match test ?r (i + 1) ?j \\<Longrightarrow> i + 1 \\<le> ?j", "show ?case"], ["proof (prove)\nusing this:\n  match test r i k\n  (match test r)\\<^sup>*\\<^sup>* k j\n  \\<lbrakk>k < j;\n   \\<And>r j.\n      match test r (k + 1) j \\<Longrightarrow> k + 1 \\<le> j\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<in>lpd test k r.\n                       (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                        (k + 1) j\n  i < j\n  match test ?r (i + 1) ?j \\<Longrightarrow> i + 1 \\<le> ?j\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>lpd test i r.\n       (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j", "by (cases \"i < k\") (auto simp: not_less Star.IH dest: match_le)"], ["proof (state)\nthis:\n  \\<exists>s\\<in>lpd test i r.\n     (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j < j;\n     \\<And>r j.\n        match test r (j + 1) j \\<Longrightarrow> j + 1 \\<le> j\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>lpd test j r.\n                         (match test s OO (match test r)\\<^sup>*\\<^sup>*)\n                          (j + 1) j", "qed simp"], ["proof (state)\nthis:\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>lpd test i r.\n     (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` lpd test i r)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` lpd test i (Star r)))\n                          (i + 1) j", "with Star.prems"], ["proof (chain)\npicking this:\n  i < j\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>lpd test i r.\n     (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j", "show ?case"], ["proof (prove)\nusing this:\n  i < j\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>lpd test i r.\n     (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j\n\ngoal (1 subgoal):\n 1. match test (Star r) i j =\n    (\\<Squnion> (match test ` lpd test i (Star r))) (i + 1) j", "using match_le[of test _  \"i + 1\"]"], ["proof (prove)\nusing this:\n  i < j\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>lpd test i r.\n     (match test s OO (match test r)\\<^sup>*\\<^sup>*) (i + 1) j\n  match test ?r (i + 1) ?j \\<Longrightarrow> i + 1 \\<le> ?j\n\ngoal (1 subgoal):\n 1. match test (Star r) i j =\n    (\\<Squnion> (match test ` lpd test i (Star r))) (i + 1) j", "by (auto simp: TimesL_def TimesR_def Suc_le_eq Star.IH[of i]\n      elim!: converse_rtranclp_into_rtranclp[rotated])"], ["proof (state)\nthis:\n  match test (Star r) i j =\n  (\\<Squnion> (match test ` lpd test i (Star r))) (i + 1) j\n\ngoal (3 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` lpd test i (Skip x))) (i + 1) j\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` lpd test i (Test x))) (i + 1) j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` lpd test i r1)) (i + 1) j;\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` lpd test i r2)) (i + 1) j;\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` lpd test i (Plus r1 r2)))\n                          (i + 1) j", "qed (auto split: nat.splits)"], ["", "lemma rpd_match: \"i < j \\<Longrightarrow> match test r i j \\<longleftrightarrow> (\\<Squnion>s \\<in> rpd test j r. match test s) i (j - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < j \\<Longrightarrow>\n    match test r i j = (\\<Squnion> (match test ` rpd test j r)) i (j - 1)", "proof (induction r arbitrary: i j)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "case (Times r s)"], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow>\n  match test r ?i ?j = (\\<Squnion> (match test ` rpd test ?j r)) ?i (?j - 1)\n  ?i < ?j \\<Longrightarrow>\n  match test s ?i ?j = (\\<Squnion> (match test ` rpd test ?j s)) ?i (?j - 1)\n  i < j\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "have \"match test (Times r s) i j \\<longleftrightarrow> (\\<exists>k. match test r i k \\<and> match test s k j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match test (Times r s) i j =\n    (\\<exists>k. match test r i k \\<and> match test s k j)", "by auto"], ["proof (state)\nthis:\n  match test (Times r s) i j =\n  (\\<exists>k. match test r i k \\<and> match test s k j)\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "also"], ["proof (state)\nthis:\n  match test (Times r s) i j =\n  (\\<exists>k. match test r i k \\<and> match test s k j)\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "have \"\\<dots> \\<longleftrightarrow> match test r i j \\<and> match test s j j \\<or>\n    (\\<exists>k<j. match test r i k \\<and> match test s k j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>k. match test r i k \\<and> match test s k j) =\n    (match test r i j \\<and> match test s j j \\<or>\n     (\\<exists>k<j. match test r i k \\<and> match test s k j))", "using match_le[of test s _ j] nat_less_le"], ["proof (prove)\nusing this:\n  match test s ?i j \\<Longrightarrow> ?i \\<le> j\n  (?m < ?n) = (?m \\<le> ?n \\<and> ?m \\<noteq> ?n)\n\ngoal (1 subgoal):\n 1. (\\<exists>k. match test r i k \\<and> match test s k j) =\n    (match test r i j \\<and> match test s j j \\<or>\n     (\\<exists>k<j. match test r i k \\<and> match test s k j))", "by auto"], ["proof (state)\nthis:\n  (\\<exists>k. match test r i k \\<and> match test s k j) =\n  (match test r i j \\<and> match test s j j \\<or>\n   (\\<exists>k<j. match test r i k \\<and> match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "also"], ["proof (state)\nthis:\n  (\\<exists>k. match test r i k \\<and> match test s k j) =\n  (match test r i j \\<and> match test s j j \\<or>\n   (\\<exists>k<j. match test r i k \\<and> match test s k j))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "have \"\\<dots> \\<longleftrightarrow> (\\<Squnion>t \\<in> rpd test j r. match test t) i (j - 1) \\<and> match test s j j  \\<or>\n    (\\<exists>k<j. match test r i k \\<and> (\\<Squnion>t \\<in> rpd test j s. match test t) k (j - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match test r i j \\<and> match test s j j \\<or>\n     (\\<exists>k<j. match test r i k \\<and> match test s k j)) =\n    ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k<j.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))", "using Times.IH(1)[OF Times.prems] Times.IH(2)"], ["proof (prove)\nusing this:\n  match test r i j = (\\<Squnion> (match test ` rpd test j r)) i (j - 1)\n  ?i < ?j \\<Longrightarrow>\n  match test s ?i ?j = (\\<Squnion> (match test ` rpd test ?j s)) ?i (?j - 1)\n\ngoal (1 subgoal):\n 1. (match test r i j \\<and> match test s j j \\<or>\n     (\\<exists>k<j. match test r i k \\<and> match test s k j)) =\n    ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k<j.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))", "by metis"], ["proof (state)\nthis:\n  (match test r i j \\<and> match test s j j \\<or>\n   (\\<exists>k<j. match test r i k \\<and> match test s k j)) =\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k<j.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "also"], ["proof (state)\nthis:\n  (match test r i j \\<and> match test s j j \\<or>\n   (\\<exists>k<j. match test r i k \\<and> match test s k j)) =\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k<j.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "have \"\\<dots> \\<longleftrightarrow> (\\<Squnion>t \\<in> rpd test j r. match test t) i (j - 1) \\<and> match test s j j  \\<or>\n    (\\<exists>k. match test r i k \\<and> (\\<Squnion>t \\<in> rpd test j s. match test t) k (j - 1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k<j.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1))) =\n    ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))", "using Times.prems"], ["proof (prove)\nusing this:\n  i < j\n\ngoal (1 subgoal):\n 1. ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k<j.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1))) =\n    ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))", "by (intro disj_cong[OF refl] iff_exI) (auto dest: match_le)"], ["proof (state)\nthis:\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k<j.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1))) =\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "also"], ["proof (state)\nthis:\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k<j.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1))) =\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1)))\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "have \"\\<dots> \\<longleftrightarrow> (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n     match test s j j \\<or>\n     (\\<exists>k.\n         match test r i k \\<and>\n         (\\<Squnion> (match test ` rpd test j s)) k (j - 1))) =\n    (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)", "by (force simp: TimesL_def TimesR_def eps_match)"], ["proof (state)\nthis:\n  ((\\<Squnion> (match test ` rpd test j r)) i (j - 1) \\<and>\n   match test s j j \\<or>\n   (\\<exists>k.\n       match test r i k \\<and>\n       (\\<Squnion> (match test ` rpd test j s)) k (j - 1))) =\n  (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Times r1 r2) i j =\n                         (\\<Squnion> (match test `\nrpd test j (Times r1 r2)))\n                          i (j - 1)\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "finally"], ["proof (chain)\npicking this:\n  match test (Times r s) i j =\n  (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)", "show ?case"], ["proof (prove)\nusing this:\n  match test (Times r s) i j =\n  (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)\n\ngoal (1 subgoal):\n 1. match test (Times r s) i j =\n    (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)", "."], ["proof (state)\nthis:\n  match test (Times r s) i j =\n  (\\<Squnion> (match test ` rpd test j (Times r s))) i (j - 1)\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "case (Star r)"], ["proof (state)\nthis:\n  ?i < ?j \\<Longrightarrow>\n  match test r ?i ?j = (\\<Squnion> (match test ` rpd test ?j r)) ?i (?j - 1)\n  i < j\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "have \"\\<exists>s\\<in>rpd test j r. ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)\" if \"(match test r)\\<^sup>*\\<^sup>* i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>rpd test j r.\n       ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)", "using that Star.prems match_le[of test _ _ \"j - 1\"]"], ["proof (prove)\nusing this:\n  (match test r)\\<^sup>*\\<^sup>* i j\n  i < j\n  match test ?r ?i (j - 1) \\<Longrightarrow> ?i \\<le> j - 1\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>rpd test j r.\n       ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)", "proof (induct rule: rtranclp_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i < i;\n     \\<And>r i.\n        match test r i (i - 1) \\<Longrightarrow> i \\<le> i - 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>rpd test i r.\n                         ((match test r)\\<^sup>*\\<^sup>* OO match test s) i\n                          (i - 1)\n 2. \\<And>y z.\n       \\<lbrakk>(match test r)\\<^sup>*\\<^sup>* i y; match test r y z;\n        \\<lbrakk>i < y;\n         \\<And>r i.\n            match test r i (y - 1) \\<Longrightarrow> i \\<le> y - 1\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s\\<in>rpd test y r.\n                             ((match test r)\\<^sup>*\\<^sup>* OO\n                              match test s)\n                              i (y - 1);\n        i < z;\n        \\<And>r i.\n           match test r i (z - 1) \\<Longrightarrow> i \\<le> z - 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>rpd test z r.\n                            ((match test r)\\<^sup>*\\<^sup>* OO match test s)\n                             i (z - 1)", "case (step k j)"], ["proof (state)\nthis:\n  (match test r)\\<^sup>*\\<^sup>* i k\n  match test r k j\n  \\<lbrakk>i < k;\n   \\<And>r i.\n      match test r i (k - 1) \\<Longrightarrow> i \\<le> k - 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<in>rpd test k r.\n                       ((match test r)\\<^sup>*\\<^sup>* OO match test s) i\n                        (k - 1)\n  i < j\n  match test ?r ?i (j - 1) \\<Longrightarrow> ?i \\<le> j - 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i < i;\n     \\<And>r i.\n        match test r i (i - 1) \\<Longrightarrow> i \\<le> i - 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>rpd test i r.\n                         ((match test r)\\<^sup>*\\<^sup>* OO match test s) i\n                          (i - 1)\n 2. \\<And>y z.\n       \\<lbrakk>(match test r)\\<^sup>*\\<^sup>* i y; match test r y z;\n        \\<lbrakk>i < y;\n         \\<And>r i.\n            match test r i (y - 1) \\<Longrightarrow> i \\<le> y - 1\\<rbrakk>\n        \\<Longrightarrow> \\<exists>s\\<in>rpd test y r.\n                             ((match test r)\\<^sup>*\\<^sup>* OO\n                              match test s)\n                              i (y - 1);\n        i < z;\n        \\<And>r i.\n           match test r i (z - 1) \\<Longrightarrow> i \\<le> z - 1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<in>rpd test z r.\n                            ((match test r)\\<^sup>*\\<^sup>* OO match test s)\n                             i (z - 1)", "then"], ["proof (chain)\npicking this:\n  (match test r)\\<^sup>*\\<^sup>* i k\n  match test r k j\n  \\<lbrakk>i < k;\n   \\<And>r i.\n      match test r i (k - 1) \\<Longrightarrow> i \\<le> k - 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<in>rpd test k r.\n                       ((match test r)\\<^sup>*\\<^sup>* OO match test s) i\n                        (k - 1)\n  i < j\n  match test ?r ?i (j - 1) \\<Longrightarrow> ?i \\<le> j - 1", "show ?case"], ["proof (prove)\nusing this:\n  (match test r)\\<^sup>*\\<^sup>* i k\n  match test r k j\n  \\<lbrakk>i < k;\n   \\<And>r i.\n      match test r i (k - 1) \\<Longrightarrow> i \\<le> k - 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<in>rpd test k r.\n                       ((match test r)\\<^sup>*\\<^sup>* OO match test s) i\n                        (k - 1)\n  i < j\n  match test ?r ?i (j - 1) \\<Longrightarrow> ?i \\<le> j - 1\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<in>rpd test j r.\n       ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)", "by (cases \"k < j\") (auto simp: not_less Star.IH dest: match_le)"], ["proof (state)\nthis:\n  \\<exists>s\\<in>rpd test j r.\n     ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i < i;\n     \\<And>r i.\n        match test r i (i - 1) \\<Longrightarrow> i \\<le> i - 1\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<in>rpd test i r.\n                         ((match test r)\\<^sup>*\\<^sup>* OO match test s) i\n                          (i - 1)", "qed simp"], ["proof (state)\nthis:\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>rpd test j r.\n     ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r i j =\n                   (\\<Squnion> (match test ` rpd test j r)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Star r) i j =\n                         (\\<Squnion> (match test ` rpd test j (Star r))) i\n                          (j - 1)", "with Star.prems"], ["proof (chain)\npicking this:\n  i < j\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>rpd test j r.\n     ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)", "show ?case"], ["proof (prove)\nusing this:\n  i < j\n  (match test r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n  \\<exists>s\\<in>rpd test j r.\n     ((match test r)\\<^sup>*\\<^sup>* OO match test s) i (j - 1)\n\ngoal (1 subgoal):\n 1. match test (Star r) i j =\n    (\\<Squnion> (match test ` rpd test j (Star r))) i (j - 1)", "by (auto 0 3 simp: TimesL_def TimesR_def intro: Star.IH[of _ j, THEN iffD2]\n      elim!: rtranclp.rtrancl_into_rtrancl dest: match_le[of test _ _ \"j - 1\", unfolded One_nat_def])"], ["proof (state)\nthis:\n  match test (Star r) i j =\n  (\\<Squnion> (match test ` rpd test j (Star r))) i (j - 1)\n\ngoal (3 subgoals):\n 1. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Skip x) i j =\n       (\\<Squnion> (match test ` rpd test j (Skip x))) i (j - 1)\n 2. \\<And>x i j.\n       i < j \\<Longrightarrow>\n       match test (Test x) i j =\n       (\\<Squnion> (match test ` rpd test j (Test x))) i (j - 1)\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   i < j \\<Longrightarrow>\n                   match test r1 i j =\n                   (\\<Squnion> (match test ` rpd test j r1)) i (j - 1);\n        \\<And>i j.\n           i < j \\<Longrightarrow>\n           match test r2 i j =\n           (\\<Squnion> (match test ` rpd test j r2)) i (j - 1);\n        i < j\\<rbrakk>\n       \\<Longrightarrow> match test (Plus r1 r2) i j =\n                         (\\<Squnion> (match test ` rpd test j (Plus r1 r2)))\n                          i (j - 1)", "qed (auto split: nat.splits)"], ["", "lemma lpd_fv_regex: \"s \\<in> lpd test i r \\<Longrightarrow> fv_regex fv s \\<subseteq> fv_regex fv r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> lpd test i r \\<Longrightarrow>\n    fv_regex fv s \\<subseteq> fv_regex fv r", "by (induct r arbitrary: s) (auto simp: TimesR_def TimesL_def split: if_splits nat.splits)+"], ["", "lemma rpd_fv_regex: \"s \\<in> rpd test i r \\<Longrightarrow> fv_regex fv s \\<subseteq> fv_regex fv r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> rpd test i r \\<Longrightarrow>\n    fv_regex fv s \\<subseteq> fv_regex fv r", "by (induct r arbitrary: s) (auto simp: TimesR_def TimesL_def split: if_splits nat.splits)+"], ["", "lemma match_fv_cong:\n  \"(\\<And>i x. x \\<in> atms r \\<Longrightarrow> test i x = test' i x) \\<Longrightarrow> match test r = match test' r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i x.\n        x \\<in> atms r \\<Longrightarrow>\n        test i x = test' i x) \\<Longrightarrow>\n    match test r = match test' r", "by (induct r) auto"], ["", "lemma eps_fv_cong:\n  \"(\\<And>i x. x \\<in> atms r \\<Longrightarrow> test i x = test' i x) \\<Longrightarrow> eps test i r = eps test' i r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>i x.\n        x \\<in> atms r \\<Longrightarrow>\n        test i x = test' i x) \\<Longrightarrow>\n    eps test i r = eps test' i r", "by (induct r) auto"], ["", "datatype modality = Past | Futu"], ["", "datatype safety = Strict | Lax"], ["", "context\n  fixes fv :: \"'a \\<Rightarrow> 'b set\"\n  and safe :: \"safety \\<Rightarrow> 'a \\<Rightarrow> bool\"\nbegin"], ["", "qualified"], ["", "fun safe_regex :: \"modality \\<Rightarrow> safety \\<Rightarrow> 'a regex \\<Rightarrow> bool\" where\n  \"safe_regex m _ (Skip n) = True\"\n| \"safe_regex m g (Test \\<phi>) = safe g \\<phi>\"\n| \"safe_regex m g (Plus r s) = ((g = Lax \\<or> fv_regex fv r = fv_regex fv s) \\<and> safe_regex m g r \\<and> safe_regex m g s)\"\n| \"safe_regex Futu g (Times r s) =\n    ((g = Lax \\<or> fv_regex fv r \\<subseteq> fv_regex fv s) \\<and> safe_regex Futu g s \\<and> safe_regex Futu Lax r)\"\n| \"safe_regex Past g (Times r s) =\n    ((g = Lax \\<or> fv_regex fv s \\<subseteq> fv_regex fv r) \\<and> safe_regex Past g r \\<and> safe_regex Past Lax s)\"\n| \"safe_regex m g (Star r) = ((g = Lax \\<or> fv_regex fv r = {}) \\<and> safe_regex m g r)\""], ["", "lemmas safe_regex_induct = safe_regex.induct[case_names Skip Test Plus TimesF TimesP Star]"], ["", "lemma safe_cosafe:\n  \"(\\<And>x. x \\<in> atms r \\<Longrightarrow> safe Strict x \\<Longrightarrow> safe Lax x) \\<Longrightarrow> safe_regex m Strict r \\<Longrightarrow> safe_regex m Lax r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x.\n                \\<lbrakk>x \\<in> atms r; safe Strict x\\<rbrakk>\n                \\<Longrightarrow> safe Lax x;\n     safe_regex m Strict r\\<rbrakk>\n    \\<Longrightarrow> safe_regex m Lax r", "by (induct r; cases m) auto"], ["", "lemma safe_lpd_fv_regex_le: \"safe_regex Futu Strict r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> fv_regex fv r \\<subseteq> fv_regex fv s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n    \\<Longrightarrow> fv_regex fv r \\<subseteq> fv_regex fv s", "by (induct r) (auto simp: TimesR_def split: if_splits)"], ["", "lemma safe_lpd_fv_regex: \"safe_regex Futu Strict r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> fv_regex fv s = fv_regex fv r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n    \\<Longrightarrow> fv_regex fv s = fv_regex fv r", "by (simp add: eq_iff lpd_fv_regex safe_lpd_fv_regex_le)"], ["", "lemma cosafe_lpd: \"safe_regex Futu Lax r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> safe_regex Futu Lax s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex Futu Lax r; s \\<in> lpd test i r\\<rbrakk>\n    \\<Longrightarrow> safe_regex Futu Lax s", "proof (induct r arbitrary: s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Plus r1 r2);\n        s \\<in> lpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r;\n                    s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Star r); s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s", "case (Plus r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>safe_regex Futu Lax r1; ?s \\<in> lpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Lax ?s\n  \\<lbrakk>safe_regex Futu Lax r2; ?s \\<in> lpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Lax ?s\n  safe_regex Futu Lax (Plus r1 r2)\n  s \\<in> lpd test i (Plus r1 r2)\n\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Plus r1 r2);\n        s \\<in> lpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r;\n                    s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Star r); s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s", "from Plus(3,4)"], ["proof (chain)\npicking this:\n  safe_regex Futu Lax (Plus r1 r2)\n  s \\<in> lpd test i (Plus r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Futu Lax (Plus r1 r2)\n  s \\<in> lpd test i (Plus r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Futu Lax s", "by (auto elim: Plus(1,2))"], ["proof (state)\nthis:\n  safe_regex Futu Lax s\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r;\n                    s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Star r); s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r;\n                    s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Star r); s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s", "case (Times r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>safe_regex Futu Lax r1; ?s \\<in> lpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Lax ?s\n  \\<lbrakk>safe_regex Futu Lax r2; ?s \\<in> lpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Lax ?s\n  safe_regex Futu Lax (Times r1 r2)\n  s \\<in> lpd test i (Times r1 r2)\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Futu Lax r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r;\n                    s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Star r); s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s", "from Times(3,4)"], ["proof (chain)\npicking this:\n  safe_regex Futu Lax (Times r1 r2)\n  s \\<in> lpd test i (Times r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Futu Lax (Times r1 r2)\n  s \\<in> lpd test i (Times r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Futu Lax s", "by (auto simp: TimesR_def elim: Times(1,2) split: if_splits)"], ["proof (state)\nthis:\n  safe_regex Futu Lax s\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Futu Lax (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Futu Lax r;\n                    s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Lax s;\n        safe_regex Futu Lax (Star r); s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Lax s", "qed (auto simp: TimesR_def split: nat.splits)"], ["", "lemma safe_lpd: \"(\\<forall>x \\<in> atms r. safe Strict x \\<longrightarrow> safe Lax x) \\<Longrightarrow>\n  safe_regex Futu Strict r \\<Longrightarrow> s \\<in> lpd test i r \\<Longrightarrow> safe_regex Futu Strict s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>atms r.\n                safe Strict x \\<longrightarrow> safe Lax x;\n     safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n    \\<Longrightarrow> safe_regex Futu Strict s", "proof (induct r arbitrary: s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Plus r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Plus r1 r2);\n        s \\<in> lpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "case (Plus r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>atms r1.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Futu Strict r1; ?s \\<in> lpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Strict ?s\n  \\<lbrakk>\\<forall>x\\<in>atms r2.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Futu Strict r2; ?s \\<in> lpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Strict ?s\n  \\<forall>x\\<in>atms (Plus r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Plus r1 r2)\n  s \\<in> lpd test i (Plus r1 r2)\n\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Plus r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Plus r1 r2);\n        s \\<in> lpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "from Plus(3,4,5)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>atms (Plus r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Plus r1 r2)\n  s \\<in> lpd test i (Plus r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>atms (Plus r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Plus r1 r2)\n  s \\<in> lpd test i (Plus r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Futu Strict s", "by (auto elim: Plus(1,2) simp: ball_Un)"], ["proof (state)\nthis:\n  safe_regex Futu Strict s\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "case (Times r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>atms r1.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Futu Strict r1; ?s \\<in> lpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Strict ?s\n  \\<lbrakk>\\<forall>x\\<in>atms r2.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Futu Strict r2; ?s \\<in> lpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Strict ?s\n  \\<forall>x\\<in>atms (Times r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Times r1 r2)\n  s \\<in> lpd test i (Times r1 r2)\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r1;\n                    s \\<in> lpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Futu Strict r2; s \\<in> lpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Times r1 r2);\n        s \\<in> lpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "from Times(3,4,5)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>atms (Times r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Times r1 r2)\n  s \\<in> lpd test i (Times r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>atms (Times r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Times r1 r2)\n  s \\<in> lpd test i (Times r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Futu Strict s", "by (force simp: TimesR_def ball_Un elim: Times(1,2) cosafe_lpd dest: lpd_fv_regex split: if_splits)"], ["proof (state)\nthis:\n  safe_regex Futu Strict s\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "case (Star r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>atms r.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Futu Strict r; ?s \\<in> lpd test i r\\<rbrakk>\n  \\<Longrightarrow> safe_regex Futu Strict ?s\n  \\<forall>x\\<in>atms (Star r). safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Star r)\n  s \\<in> lpd test i (Star r)\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Futu Strict r; s \\<in> lpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Futu Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Star r);\n        s \\<in> lpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "from Star(2,3,4)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>atms (Star r). safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Star r)\n  s \\<in> lpd test i (Star r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>atms (Star r). safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Futu Strict (Star r)\n  s \\<in> lpd test i (Star r)\n\ngoal (1 subgoal):\n 1. safe_regex Futu Strict s", "by (force simp: TimesR_def elim: Star(1) cosafe_lpd\n      dest: safe_cosafe[rotated] lpd_fv_regex[where fv=fv] split: if_splits)"], ["proof (state)\nthis:\n  safe_regex Futu Strict s\n\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Skip x);\n        s \\<in> lpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Futu Strict (Test x);\n        s \\<in> lpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Futu Strict s", "qed (auto split: nat.splits)"], ["", "lemma safe_rpd_fv_regex_le: \"safe_regex Past Strict r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> fv_regex fv r \\<subseteq> fv_regex fv s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n    \\<Longrightarrow> fv_regex fv r \\<subseteq> fv_regex fv s", "by (induct r) (auto simp: TimesL_def split: if_splits)"], ["", "lemma safe_rpd_fv_regex: \"safe_regex Past Strict r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> fv_regex fv s = fv_regex fv r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n    \\<Longrightarrow> fv_regex fv s = fv_regex fv r", "by (simp add: eq_iff rpd_fv_regex safe_rpd_fv_regex_le)"], ["", "lemma cosafe_rpd: \"safe_regex Past Lax r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> safe_regex Past Lax s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex Past Lax r; s \\<in> rpd test i r\\<rbrakk>\n    \\<Longrightarrow> safe_regex Past Lax s", "proof (induct r arbitrary: s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Plus r1 r2);\n        s \\<in> rpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r;\n                    s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Star r); s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s", "case (Plus r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>safe_regex Past Lax r1; ?s \\<in> rpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Lax ?s\n  \\<lbrakk>safe_regex Past Lax r2; ?s \\<in> rpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Lax ?s\n  safe_regex Past Lax (Plus r1 r2)\n  s \\<in> rpd test i (Plus r1 r2)\n\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Plus r1 r2);\n        s \\<in> rpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r;\n                    s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Star r); s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s", "from Plus(3,4)"], ["proof (chain)\npicking this:\n  safe_regex Past Lax (Plus r1 r2)\n  s \\<in> rpd test i (Plus r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Past Lax (Plus r1 r2)\n  s \\<in> rpd test i (Plus r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Past Lax s", "by (auto elim: Plus(1,2))"], ["proof (state)\nthis:\n  safe_regex Past Lax s\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r;\n                    s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Star r); s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r;\n                    s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Star r); s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s", "case (Times r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>safe_regex Past Lax r1; ?s \\<in> rpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Lax ?s\n  \\<lbrakk>safe_regex Past Lax r2; ?s \\<in> rpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Lax ?s\n  safe_regex Past Lax (Times r1 r2)\n  s \\<in> rpd test i (Times r1 r2)\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        \\<And>s.\n           \\<lbrakk>safe_regex Past Lax r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r;\n                    s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Star r); s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s", "from Times(3,4)"], ["proof (chain)\npicking this:\n  safe_regex Past Lax (Times r1 r2)\n  s \\<in> rpd test i (Times r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Past Lax (Times r1 r2)\n  s \\<in> rpd test i (Times r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Past Lax s", "by (auto simp: TimesL_def elim: Times(1,2) split: if_splits)"], ["proof (state)\nthis:\n  safe_regex Past Lax s\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 2. \\<And>x s.\n       \\<lbrakk>safe_regex Past Lax (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>safe_regex Past Lax r;\n                    s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Lax s;\n        safe_regex Past Lax (Star r); s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Lax s", "qed (auto simp: TimesL_def split: nat.splits)"], ["", "lemma safe_rpd: \"(\\<forall>x \\<in> atms r. safe Strict x \\<longrightarrow> safe Lax x) \\<Longrightarrow>\n  safe_regex Past Strict r \\<Longrightarrow> s \\<in> rpd test i r \\<Longrightarrow> safe_regex Past Strict s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>x\\<in>atms r.\n                safe Strict x \\<longrightarrow> safe Lax x;\n     safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n    \\<Longrightarrow> safe_regex Past Strict s", "proof (induct r arbitrary: s)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Plus r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Plus r1 r2);\n        s \\<in> rpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "case (Plus r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>atms r1.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Past Strict r1; ?s \\<in> rpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Strict ?s\n  \\<lbrakk>\\<forall>x\\<in>atms r2.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Past Strict r2; ?s \\<in> rpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Strict ?s\n  \\<forall>x\\<in>atms (Plus r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Plus r1 r2)\n  s \\<in> rpd test i (Plus r1 r2)\n\ngoal (5 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Plus r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Plus r1 r2);\n        s \\<in> rpd test i (Plus r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 4. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 5. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "from Plus(3,4,5)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>atms (Plus r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Plus r1 r2)\n  s \\<in> rpd test i (Plus r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>atms (Plus r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Plus r1 r2)\n  s \\<in> rpd test i (Plus r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Past Strict s", "by (auto elim: Plus(1,2) simp: ball_Un)"], ["proof (state)\nthis:\n  safe_regex Past Strict s\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "case (Times r1 r2)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>atms r1.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Past Strict r1; ?s \\<in> rpd test i r1\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Strict ?s\n  \\<lbrakk>\\<forall>x\\<in>atms r2.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Past Strict r2; ?s \\<in> rpd test i r2\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Strict ?s\n  \\<forall>x\\<in>atms (Times r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Times r1 r2)\n  s \\<in> rpd test i (Times r1 r2)\n\ngoal (4 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r1 r2 s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r1.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r1;\n                    s \\<in> rpd test i r1\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<And>s.\n           \\<lbrakk>\\<forall>x\\<in>atms r2.\n                       safe Strict x \\<longrightarrow> safe Lax x;\n            safe_regex Past Strict r2; s \\<in> rpd test i r2\\<rbrakk>\n           \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Times r1 r2).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Times r1 r2);\n        s \\<in> rpd test i (Times r1 r2)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 4. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "from Times(3,4,5)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>atms (Times r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Times r1 r2)\n  s \\<in> rpd test i (Times r1 r2)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>atms (Times r1 r2).\n     safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Times r1 r2)\n  s \\<in> rpd test i (Times r1 r2)\n\ngoal (1 subgoal):\n 1. safe_regex Past Strict s", "by (force simp: TimesL_def ball_Un elim: Times(1,2) cosafe_rpd dest: rpd_fv_regex split: if_splits)"], ["proof (state)\nthis:\n  safe_regex Past Strict s\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "case (Star r)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>x\\<in>atms r.\n              safe Strict x \\<longrightarrow> safe Lax x;\n   safe_regex Past Strict r; ?s \\<in> rpd test i r\\<rbrakk>\n  \\<Longrightarrow> safe_regex Past Strict ?s\n  \\<forall>x\\<in>atms (Star r). safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Star r)\n  s \\<in> rpd test i (Star r)\n\ngoal (3 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 3. \\<And>r s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>\\<forall>x\\<in>atms r.\n                               safe Strict x \\<longrightarrow> safe Lax x;\n                    safe_regex Past Strict r; s \\<in> rpd test i r\\<rbrakk>\n                   \\<Longrightarrow> safe_regex Past Strict s;\n        \\<forall>x\\<in>atms (Star r).\n           safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Star r);\n        s \\<in> rpd test i (Star r)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "from Star(2,3,4)"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>atms (Star r). safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Star r)\n  s \\<in> rpd test i (Star r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>atms (Star r). safe Strict x \\<longrightarrow> safe Lax x\n  safe_regex Past Strict (Star r)\n  s \\<in> rpd test i (Star r)\n\ngoal (1 subgoal):\n 1. safe_regex Past Strict s", "by (force simp: TimesL_def elim: Star(1) cosafe_rpd\n      dest: safe_cosafe[rotated] rpd_fv_regex[where fv=fv] split: if_splits)"], ["proof (state)\nthis:\n  safe_regex Past Strict s\n\ngoal (2 subgoals):\n 1. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Skip x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Skip x);\n        s \\<in> rpd test i (Skip x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s\n 2. \\<And>x s.\n       \\<lbrakk>\\<forall>x\\<in>atms (Test x).\n                   safe Strict x \\<longrightarrow> safe Lax x;\n        safe_regex Past Strict (Test x);\n        s \\<in> rpd test i (Test x)\\<rbrakk>\n       \\<Longrightarrow> safe_regex Past Strict s", "qed (auto split: nat.splits)"], ["", "lemma safe_regex_safe: \"(\\<And>g r. safe g r \\<Longrightarrow> safe Lax r) \\<Longrightarrow>\n  safe_regex m g r \\<Longrightarrow> x \\<in> atms r \\<Longrightarrow> safe Lax x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g r. safe g r \\<Longrightarrow> safe Lax r;\n     safe_regex m g r; x \\<in> atms r\\<rbrakk>\n    \\<Longrightarrow> safe Lax x", "by (induct m g r rule: safe_regex.induct) auto"], ["", "lemma safe_regex_map_regex:\n  \"(\\<And>g x. x \\<in> atms r \\<Longrightarrow> safe g x \\<Longrightarrow>  safe g (f x)) \\<Longrightarrow> (\\<And>x. x \\<in> atms r \\<Longrightarrow> fv (f x) = fv x) \\<Longrightarrow>\n   safe_regex m g r \\<Longrightarrow> safe_regex m g (map_regex f r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g x.\n                \\<lbrakk>x \\<in> atms r; safe g x\\<rbrakk>\n                \\<Longrightarrow> safe g (f x);\n     \\<And>x. x \\<in> atms r \\<Longrightarrow> fv (f x) = fv x;\n     safe_regex m g r\\<rbrakk>\n    \\<Longrightarrow> safe_regex m g (map_regex f r)", "by (induct m g r rule: safe_regex.induct) (auto simp: fv_regex_alt regex.set_map)"], ["", "end"], ["", "lemma safe_regex_cong[fundef_cong]:\n  \"(\\<And>g x. x \\<in> atms r \\<Longrightarrow> safe g x = safe' g x) \\<Longrightarrow>\n  Regex.safe_regex fv safe m g r = Regex.safe_regex fv safe' m g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g x.\n        x \\<in> atms r \\<Longrightarrow>\n        safe g x = safe' g x) \\<Longrightarrow>\n    Regex.safe_regex fv safe m g r = Regex.safe_regex fv safe' m g r", "by (induct m g r rule: safe_regex.induct) auto"], ["", "lemma safe_regex_mono:\n  \"(\\<And>g x. x \\<in> atms r \\<Longrightarrow> safe g x \\<Longrightarrow> safe' g x) \\<Longrightarrow>\n  Regex.safe_regex fv safe m g r \\<Longrightarrow> Regex.safe_regex fv safe' m g r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>g x.\n                \\<lbrakk>x \\<in> atms r; safe g x\\<rbrakk>\n                \\<Longrightarrow> safe' g x;\n     Regex.safe_regex fv safe m g r\\<rbrakk>\n    \\<Longrightarrow> Regex.safe_regex fv safe' m g r", "by (induct m g r rule: safe_regex.induct) auto"], ["", "lemma match_map_regex: \"match t (map_regex f r) = match (\\<lambda>k z. t k (f z)) r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match t (map_regex f r) = match (\\<lambda>k z. t k (f z)) r", "by (induct r) auto"], ["", "lemma match_cong_strong:\n  \"(\\<And>k z. k \\<in> {i ..< j + 1} \\<Longrightarrow> z \\<in> atms r \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow> match t r i j = match t' r i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k z.\n        \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r\\<rbrakk>\n        \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n    match t r i j = match t' r i j", "proof (induction r arbitrary: i j)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Skip x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Skip x) i j = match t' (Skip x) i j\n 2. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Test x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Test x) i j = match t' (Test x) i j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Plus r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Plus r1 r2) i j =\n                         match t' (Plus r1 r2) i j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Times r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Times r1 r2) i j =\n                         match t' (Times r1 r2) i j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r i j = match t' r i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Star r) i j = match t' (Star r) i j", "case (Times r s)"], ["proof (state)\nthis:\n  (\\<And>k z.\n      \\<lbrakk>k \\<in> {?i3..<?j3 + 1}; z \\<in> atms r\\<rbrakk>\n      \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n  match t r ?i3 ?j3 = match t' r ?i3 ?j3\n  (\\<And>k z.\n      \\<lbrakk>k \\<in> {?i3..<?j3 + 1}; z \\<in> atms s\\<rbrakk>\n      \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n  match t s ?i3 ?j3 = match t' s ?i3 ?j3\n  \\<lbrakk>?k3 \\<in> {i..<j + 1}; ?z3 \\<in> atms (Times r s)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (5 subgoals):\n 1. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Skip x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Skip x) i j = match t' (Skip x) i j\n 2. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Test x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Test x) i j = match t' (Test x) i j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Plus r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Plus r1 r2) i j =\n                         match t' (Plus r1 r2) i j\n 4. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Times r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Times r1 r2) i j =\n                         match t' (Times r1 r2) i j\n 5. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r i j = match t' r i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Star r) i j = match t' (Star r) i j", "from Times.prems"], ["proof (chain)\npicking this:\n  \\<lbrakk>?k3 \\<in> {i..<j + 1}; ?z3 \\<in> atms (Times r s)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?k3 \\<in> {i..<j + 1}; ?z3 \\<in> atms (Times r s)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (1 subgoal):\n 1. match t (Times r s) i j = match t' (Times r s) i j", "by (auto 0 4 simp: relcompp_apply intro: le_less_trans match_le less_Suc_eq_le\n      dest: Times.IH[THEN iffD1, rotated -1] Times.IH[THEN iffD2, rotated -1] match_le)"], ["proof (state)\nthis:\n  match t (Times r s) i j = match t' (Times r s) i j\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Skip x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Skip x) i j = match t' (Skip x) i j\n 2. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Test x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Test x) i j = match t' (Test x) i j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Plus r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Plus r1 r2) i j =\n                         match t' (Plus r1 r2) i j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r i j = match t' r i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Star r) i j = match t' (Star r) i j", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Skip x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Skip x) i j = match t' (Skip x) i j\n 2. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Test x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Test x) i j = match t' (Test x) i j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Plus r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Plus r1 r2) i j =\n                         match t' (Plus r1 r2) i j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r i j = match t' r i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Star r) i j = match t' (Star r) i j", "case (Star r)"], ["proof (state)\nthis:\n  (\\<And>k z.\n      \\<lbrakk>k \\<in> {?i3..<?j3 + 1}; z \\<in> atms r\\<rbrakk>\n      \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n  match t r ?i3 ?j3 = match t' r ?i3 ?j3\n  \\<lbrakk>?k3 \\<in> {i..<j + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (4 subgoals):\n 1. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Skip x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Skip x) i j = match t' (Skip x) i j\n 2. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Test x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Test x) i j = match t' (Test x) i j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Plus r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Plus r1 r2) i j =\n                         match t' (Plus r1 r2) i j\n 4. \\<And>r i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r i j = match t' r i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Star r) i j = match t' (Star r) i j", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. match t (Star r) i j = match t' (Star r) i j", "unfolding match.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. (match t r)\\<^sup>*\\<^sup>* i j = (match t' r)\\<^sup>*\\<^sup>* i j", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. (match t r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t' r)\\<^sup>*\\<^sup>* i j\n 2. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "assume *: \"(match t r)\\<^sup>*\\<^sup>* i j\""], ["proof (state)\nthis:\n  (match t r)\\<^sup>*\\<^sup>* i j\n\ngoal (2 subgoals):\n 1. (match t r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t' r)\\<^sup>*\\<^sup>* i j\n 2. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "then"], ["proof (chain)\npicking this:\n  (match t r)\\<^sup>*\\<^sup>* i j", "have \"i \\<le> j\""], ["proof (prove)\nusing this:\n  (match t r)\\<^sup>*\\<^sup>* i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "unfolding match.simps(5)[symmetric]"], ["proof (prove)\nusing this:\n  match t (Star r) i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by (rule match_le)"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (2 subgoals):\n 1. (match t r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t' r)\\<^sup>*\\<^sup>* i j\n 2. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "with *"], ["proof (chain)\npicking this:\n  (match t r)\\<^sup>*\\<^sup>* i j\n  i \\<le> j", "show \"(match t' r)\\<^sup>*\\<^sup>* i j\""], ["proof (prove)\nusing this:\n  (match t r)\\<^sup>*\\<^sup>* i j\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* i j", "using Star.prems"], ["proof (prove)\nusing this:\n  (match t r)\\<^sup>*\\<^sup>* i j\n  i \\<le> j\n  \\<lbrakk>?k3 \\<in> {i..<j + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* i j", "proof (induction i j rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> a;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<a + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a a\n 2. \\<And>a b c.\n       \\<lbrakk>(match t r)\\<^sup>*\\<^sup>* a b;\n        \\<lbrakk>a \\<le> b;\n         \\<And>k z.\n            \\<lbrakk>k \\<in> {a..<b + 1}; z \\<in> atms (Star r)\\<rbrakk>\n            \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n        \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a b;\n        match t r b c; a \\<le> c;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<c + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a c", "case (rtrancl_into_rtrancl a b c)"], ["proof (state)\nthis:\n  (match t r)\\<^sup>*\\<^sup>* a b\n  match t r b c\n  \\<lbrakk>a \\<le> b;\n   \\<And>k z.\n      \\<lbrakk>k \\<in> {a..<b + 1}; z \\<in> atms (Star r)\\<rbrakk>\n      \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n  \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a b\n  a \\<le> c\n  \\<lbrakk>?k3 \\<in> {a..<c + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> a;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<a + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a a\n 2. \\<And>a b c.\n       \\<lbrakk>(match t r)\\<^sup>*\\<^sup>* a b;\n        \\<lbrakk>a \\<le> b;\n         \\<And>k z.\n            \\<lbrakk>k \\<in> {a..<b + 1}; z \\<in> atms (Star r)\\<rbrakk>\n            \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n        \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a b;\n        match t r b c; a \\<le> c;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<c + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a c", "from rtrancl_into_rtrancl(1,2,4,5)"], ["proof (chain)\npicking this:\n  (match t r)\\<^sup>*\\<^sup>* a b\n  match t r b c\n  a \\<le> c\n  \\<lbrakk>?k3 \\<in> {a..<c + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3", "show ?case"], ["proof (prove)\nusing this:\n  (match t r)\\<^sup>*\\<^sup>* a b\n  match t r b c\n  a \\<le> c\n  \\<lbrakk>?k3 \\<in> {a..<c + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* a c", "by (intro rtranclp.rtrancl_into_rtrancl[OF rtrancl_into_rtrancl.IH])\n          (auto dest!: Star.IH[THEN iffD1, rotated -1]\n            dest: match_le match_rtranclp_le simp: less_Suc_eq_le)"], ["proof (state)\nthis:\n  (match t' r)\\<^sup>*\\<^sup>* a c\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> a;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<a + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t' r)\\<^sup>*\\<^sup>* a a", "qed simp"], ["proof (state)\nthis:\n  (match t' r)\\<^sup>*\\<^sup>* i j\n\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "assume *: \"(match t' r)\\<^sup>*\\<^sup>* i j\""], ["proof (state)\nthis:\n  (match t' r)\\<^sup>*\\<^sup>* i j\n\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "then"], ["proof (chain)\npicking this:\n  (match t' r)\\<^sup>*\\<^sup>* i j", "have \"i \\<le> j\""], ["proof (prove)\nusing this:\n  (match t' r)\\<^sup>*\\<^sup>* i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "unfolding match.simps(5)[symmetric]"], ["proof (prove)\nusing this:\n  match t' (Star r) i j\n\ngoal (1 subgoal):\n 1. i \\<le> j", "by (rule match_le)"], ["proof (state)\nthis:\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. (match t' r)\\<^sup>*\\<^sup>* i j \\<Longrightarrow>\n    (match t r)\\<^sup>*\\<^sup>* i j", "with *"], ["proof (chain)\npicking this:\n  (match t' r)\\<^sup>*\\<^sup>* i j\n  i \\<le> j", "show \"(match t r)\\<^sup>*\\<^sup>* i j\""], ["proof (prove)\nusing this:\n  (match t' r)\\<^sup>*\\<^sup>* i j\n  i \\<le> j\n\ngoal (1 subgoal):\n 1. (match t r)\\<^sup>*\\<^sup>* i j", "using Star.prems"], ["proof (prove)\nusing this:\n  (match t' r)\\<^sup>*\\<^sup>* i j\n  i \\<le> j\n  \\<lbrakk>?k3 \\<in> {i..<j + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (1 subgoal):\n 1. (match t r)\\<^sup>*\\<^sup>* i j", "proof (induction i j rule: rtranclp.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> a;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<a + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a a\n 2. \\<And>a b c.\n       \\<lbrakk>(match t' r)\\<^sup>*\\<^sup>* a b;\n        \\<lbrakk>a \\<le> b;\n         \\<And>k z.\n            \\<lbrakk>k \\<in> {a..<b + 1}; z \\<in> atms (Star r)\\<rbrakk>\n            \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n        \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a b;\n        match t' r b c; a \\<le> c;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<c + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a c", "case (rtrancl_into_rtrancl a b c)"], ["proof (state)\nthis:\n  (match t' r)\\<^sup>*\\<^sup>* a b\n  match t' r b c\n  \\<lbrakk>a \\<le> b;\n   \\<And>k z.\n      \\<lbrakk>k \\<in> {a..<b + 1}; z \\<in> atms (Star r)\\<rbrakk>\n      \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n  \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a b\n  a \\<le> c\n  \\<lbrakk>?k3 \\<in> {a..<c + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (2 subgoals):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> a;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<a + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a a\n 2. \\<And>a b c.\n       \\<lbrakk>(match t' r)\\<^sup>*\\<^sup>* a b;\n        \\<lbrakk>a \\<le> b;\n         \\<And>k z.\n            \\<lbrakk>k \\<in> {a..<b + 1}; z \\<in> atms (Star r)\\<rbrakk>\n            \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n        \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a b;\n        match t' r b c; a \\<le> c;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<c + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a c", "from rtrancl_into_rtrancl(1,2,4,5)"], ["proof (chain)\npicking this:\n  (match t' r)\\<^sup>*\\<^sup>* a b\n  match t' r b c\n  a \\<le> c\n  \\<lbrakk>?k3 \\<in> {a..<c + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3", "show ?case"], ["proof (prove)\nusing this:\n  (match t' r)\\<^sup>*\\<^sup>* a b\n  match t' r b c\n  a \\<le> c\n  \\<lbrakk>?k3 \\<in> {a..<c + 1}; ?z3 \\<in> atms (Star r)\\<rbrakk>\n  \\<Longrightarrow> t ?k3 ?z3 = t' ?k3 ?z3\n\ngoal (1 subgoal):\n 1. (match t r)\\<^sup>*\\<^sup>* a c", "by (intro rtranclp.rtrancl_into_rtrancl[OF rtrancl_into_rtrancl.IH])\n          (auto dest!: Star.IH[THEN iffD2, rotated -1]\n            dest: match_le match_rtranclp_le simp: less_Suc_eq_le)"], ["proof (state)\nthis:\n  (match t r)\\<^sup>*\\<^sup>* a c\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>a \\<le> a;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {a..<a + 1}; z \\<in> atms (Star r)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> (match t r)\\<^sup>*\\<^sup>* a a", "qed simp"], ["proof (state)\nthis:\n  (match t r)\\<^sup>*\\<^sup>* i j\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  match t (Star r) i j = match t' (Star r) i j\n\ngoal (3 subgoals):\n 1. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Skip x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Skip x) i j = match t' (Skip x) i j\n 2. \\<And>x i j.\n       (\\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Test x)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n       match t (Test x) i j = match t' (Test x) i j\n 3. \\<And>r1 r2 i j.\n       \\<lbrakk>\\<And>i j.\n                   (\\<And>k z.\n                       \\<lbrakk>k \\<in> {i..<j + 1};\n                        z \\<in> atms r1\\<rbrakk>\n                       \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n                   match t r1 i j = match t' r1 i j;\n        \\<And>i j.\n           (\\<And>k z.\n               \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms r2\\<rbrakk>\n               \\<Longrightarrow> t k z = t' k z) \\<Longrightarrow>\n           match t r2 i j = match t' r2 i j;\n        \\<And>k z.\n           \\<lbrakk>k \\<in> {i..<j + 1}; z \\<in> atms (Plus r1 r2)\\<rbrakk>\n           \\<Longrightarrow> t k z = t' k z\\<rbrakk>\n       \\<Longrightarrow> match t (Plus r1 r2) i j =\n                         match t' (Plus r1 r2) i j", "qed auto"], ["", "end"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}