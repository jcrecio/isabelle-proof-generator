{"file_name": "/home/qj213/afp-2021-10-22/thys/MFODL_Monitor_Optimized/Formula.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFODL_Monitor_Optimized", "problem_names": ["lemma eval_trm_fv_cong: \"\\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow> eval_trm v t = eval_trm v' t\"", "lemma fv_abbrevs[simp]: \"fv TT = {}\" \"fv FF = {}\"", "lemma fv_subset_Ands: \"\\<phi> \\<in> set \\<phi>s \\<Longrightarrow> fv \\<phi> \\<subseteq> fv (Ands \\<phi>s)\"", "lemma finite_fvi_trm[simp]: \"finite (fvi_trm b t)\"", "lemma finite_fvi[simp]: \"finite (fvi b \\<phi>)\"", "lemma fvi_trm_plus: \"x \\<in> fvi_trm (b + c) t \\<longleftrightarrow> x + c \\<in> fvi_trm b t\"", "lemma fvi_trm_iff_fv_trm: \"x \\<in> fvi_trm b t \\<longleftrightarrow> x + b \\<in> fv_trm t\"", "lemma fvi_plus: \"x \\<in> fvi (b + c) \\<phi> \\<longleftrightarrow> x + c \\<in> fvi b \\<phi>\"", "lemma fvi_Suc: \"x \\<in> fvi (Suc b) \\<phi> \\<longleftrightarrow> Suc x \\<in> fvi b \\<phi>\"", "lemma fvi_plus_bound:\n  assumes \"\\<forall>i\\<in>fvi (b + c) \\<phi>. i < n\"\n  shows \"\\<forall>i\\<in>fvi b \\<phi>. i < c + n\"", "lemma fvi_Suc_bound:\n  assumes \"\\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\"\n  shows \"\\<forall>i\\<in>fvi b \\<phi>. i < Suc n\"", "lemma fvi_iff_fv: \"x \\<in> fvi b \\<phi> \\<longleftrightarrow> x + b \\<in> fv \\<phi>\"", "lemma nfv_simps[simp]:\n  \"nfv (Let p \\<phi> \\<psi>) = nfv \\<psi>\"\n  \"nfv (Neg \\<phi>) = nfv \\<phi>\"\n  \"nfv (Or \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (And \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Prev I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Next I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Since \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Until \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (MatchP I r) = Regex.nfv_regex fv r\"\n  \"nfv (MatchF I r) = Regex.nfv_regex fv r\"\n  \"nfv_regex (Regex.Skip n) = 0\"\n  \"nfv_regex (Regex.Test \\<phi>) = Max (insert 0 (Suc ` fv \\<phi>))\"\n  \"nfv_regex (Regex.Plus r s) = max (nfv_regex r) (nfv_regex s)\"\n  \"nfv_regex (Regex.Times r s) = max (nfv_regex r) (nfv_regex s)\"\n  \"nfv_regex (Regex.Star r) = nfv_regex r\"", "lemma nfv_Ands[simp]: \"nfv (Ands l) = Max (insert 0 (nfv ` set l))\"", "lemma fvi_less_nfv: \"\\<forall>i\\<in>fv \\<phi>. i < nfv \\<phi>\"", "lemma fvi_less_nfv_regex: \"\\<forall>i\\<in>fv_regex \\<phi>. i < nfv_regex \\<phi>\"", "lemma sat_abbrevs[simp]:\n  \"sat \\<sigma> V v i TT\" \"\\<not> sat \\<sigma> V v i FF\"", "lemma sat_Ands: \"sat \\<sigma> V v i (Ands l) \\<longleftrightarrow> (\\<forall>\\<phi>\\<in>set l. sat \\<sigma> V v i \\<phi>)\"", "lemma sat_Until_rec: \"sat \\<sigma> V v i (Until \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  (\\<Delta> \\<sigma> (i + 1) \\<le> right I \\<and> sat \\<sigma> V v i \\<phi> \\<and> sat \\<sigma> V v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")", "lemma sat_Since_rec: \"sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  (i > 0 \\<and> \\<Delta> \\<sigma> i \\<le> right I \\<and> sat \\<sigma> V v i \\<phi> \\<and> sat \\<sigma> V v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")", "lemma sat_MatchF_rec: \"sat \\<sigma> V v i (MatchF I r) \\<longleftrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  \\<Delta> \\<sigma> (i + 1) \\<le> right I \\<and> (\\<exists>s \\<in> Regex.lpd (sat \\<sigma> V v) i r. sat \\<sigma> V v (i + 1) (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\"\n  (is \"?L \\<longleftrightarrow> ?R1 \\<or> ?R2\")", "lemma sat_MatchP_rec: \"sat \\<sigma> V v i (MatchP I r) \\<longleftrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  i > 0 \\<and> \\<Delta> \\<sigma> i \\<le> right I \\<and> (\\<exists>s \\<in> Regex.rpd (sat \\<sigma> V v) i r. sat \\<sigma> V v (i - 1) (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\"\n  (is \"?L \\<longleftrightarrow> ?R1 \\<or> ?R2\")", "lemma sat_Since_0: \"sat \\<sigma> V v 0 (Since \\<phi> I \\<psi>) \\<longleftrightarrow> mem 0 I \\<and> sat \\<sigma> V v 0 \\<psi>\"", "lemma sat_MatchP_0: \"sat \\<sigma> V v 0 (MatchP I r) \\<longleftrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) 0 r\"", "lemma sat_Since_point: \"sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    (\\<And>j. j \\<le> i \\<Longrightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j)) \\<psi>) \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma sat_MatchP_point: \"sat \\<sigma> V v i (MatchP I r) \\<Longrightarrow>\n    (\\<And>j. j \\<le> i \\<Longrightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<Longrightarrow> sat \\<sigma> V v i (MatchP (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j)) r) \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma sat_Since_pointD: \"sat \\<sigma> V v i (Since \\<phi> (point t) \\<psi>) \\<Longrightarrow> mem t I \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\"", "lemma sat_MatchP_pointD: \"sat \\<sigma> V v i (MatchP (point t) r) \\<Longrightarrow> mem t I \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\"", "lemma sat_fv_cong: \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>\"", "lemma match_fv_cong:\n  \"\\<forall>x\\<in>fv_regex r. v!x = v'!x \\<Longrightarrow> Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\"", "lemma eps_fv_cong:\n  \"\\<forall>x\\<in>fv_regex r. v!x = v'!x \\<Longrightarrow> Regex.eps (sat \\<sigma> V v) i r = Regex.eps (sat \\<sigma> V v') i r\"", "lemma past_only_sat:\n  assumes \"prefix_of \\<pi> \\<sigma>\" \"prefix_of \\<pi> \\<sigma>'\"\n  shows \"i < plen \\<pi> \\<Longrightarrow> dom V = dom V' \\<Longrightarrow>\n     (\\<And>p i. p \\<in> dom V \\<Longrightarrow> i < plen \\<pi> \\<Longrightarrow> the (V p) i = the (V' p) i) \\<Longrightarrow>\n     past_only \\<phi> \\<Longrightarrow> sat \\<sigma> V v i \\<phi> = sat \\<sigma>' V' v i \\<phi>\"", "lemma fvi_remove_neg[simp]: \"fvi b (remove_neg \\<phi>) = fvi b \\<phi>\"", "lemma partition_cong[fundef_cong]:\n  \"xs = ys \\<Longrightarrow> (\\<And>x. x\\<in>set xs \\<Longrightarrow> f x = g x) \\<Longrightarrow> partition f xs = partition g ys\"", "lemma size_remove_neg[termination_simp]: \"size (remove_neg \\<phi>) \\<le> size \\<phi>\"", "lemma safe_regex_safe_formula:\n  \"safe_regex m g r \\<Longrightarrow> \\<phi> \\<in> Regex.atms r \\<Longrightarrow> safe_formula \\<phi> \\<or>\n  (\\<exists>\\<psi>. \\<phi> = Neg \\<psi> \\<and> safe_formula \\<psi>)\"", "lemma safe_abbrevs[simp]: \"safe_formula TT\" \"safe_formula FF\"", "lemma atms_simps[simp]:\n  \"atms (Regex.Skip n) = {}\"\n  \"atms (Regex.Test \\<phi>) = (if safe_formula \\<phi> then {\\<phi>} else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'} | _ \\<Rightarrow> {})\"\n  \"atms (Regex.Plus r s) = atms r \\<union> atms s\"\n  \"atms (Regex.Times r s) = atms r \\<union> atms s\"\n  \"atms (Regex.Star r) = atms r\"", "lemma finite_atms[simp]: \"finite (atms r)\"", "lemma disjE_Not2: \"P \\<or> Q \\<Longrightarrow> (P \\<Longrightarrow> R) \\<Longrightarrow> (\\<not>P \\<Longrightarrow> Q \\<Longrightarrow> R) \\<Longrightarrow> R\"", "lemma safe_formula_induct[consumes 1, case_names Eq_Const Eq_Var1 Eq_Var2 neq_Var Pred Let\n    And_assign And_safe And_constraint And_Not Ands Neg Or Exists Agg\n    Prev Next Since Not_Since Until Not_Until MatchP MatchF]:\n  assumes \"safe_formula \\<phi>\"\n    and Eq_Const: \"\\<And>c d. P (Eq (Const c) (Const d))\"\n    and Eq_Var1: \"\\<And>c x. P (Eq (Const c) (Var x))\"\n    and Eq_Var2: \"\\<And>c x. P (Eq (Var x) (Const c))\"\n    and neq_Var: \"\\<And>x. P (Neg (Eq (Var x) (Var x)))\"\n    and Pred: \"\\<And>e ts. \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow> P (Pred e ts)\"\n    and Let: \"\\<And>p \\<phi> \\<psi>. {0..<nfv \\<phi>} \\<subseteq> fv \\<phi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Let p \\<phi> \\<psi>)\"\n    and And_assign: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (And \\<phi> \\<psi>)\"\n    and And_safe: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> \\<not> safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow>\n      P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (And \\<phi> \\<psi>)\"\n    and And_constraint: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> \\<not> safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> \\<not> safe_formula \\<psi> \\<Longrightarrow>\n      fv \\<psi> \\<subseteq> fv \\<phi> \\<Longrightarrow> is_constraint \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (And \\<phi> \\<psi>)\"\n    and And_Not: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>) \\<Longrightarrow> \\<not> safe_formula (Neg \\<psi>) \\<Longrightarrow>\n      fv (Neg \\<psi>) \\<subseteq> fv \\<phi> \\<Longrightarrow> \\<not> is_constraint (Neg \\<psi>) \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (And \\<phi> (Neg \\<psi>))\"\n    and Ands: \"\\<And>l pos neg. (pos, neg) = partition safe_formula l \\<Longrightarrow> pos \\<noteq> [] \\<Longrightarrow>\n      list_all safe_formula pos \\<Longrightarrow> list_all safe_formula (map remove_neg neg) \\<Longrightarrow>\n      (\\<Union>\\<phi>\\<in>set neg. fv \\<phi>) \\<subseteq> (\\<Union>\\<phi>\\<in>set pos. fv \\<phi>) \\<Longrightarrow>\n      list_all P pos \\<Longrightarrow> list_all P (map remove_neg neg) \\<Longrightarrow> P (Ands l)\"\n    and Neg: \"\\<And>\\<phi>. fv \\<phi> = {} \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Neg \\<phi>)\"\n    and Or: \"\\<And>\\<phi> \\<psi>. fv \\<psi> = fv \\<phi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Or \\<phi> \\<psi>)\"\n    and Exists: \"\\<And>\\<phi>. safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Exists \\<phi>)\"\n    and Agg: \"\\<And>y \\<omega> b f \\<phi>. y + b \\<notin> fv \\<phi> \\<Longrightarrow> {0..<b} \\<subseteq> fv \\<phi> \\<Longrightarrow> fv_trm f \\<subseteq> fv \\<phi> \\<Longrightarrow>\n      safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Agg y \\<omega> b f \\<phi>)\"\n    and Prev: \"\\<And>I \\<phi>. safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Prev I \\<phi>)\"\n    and Next: \"\\<And>I \\<phi>. safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Next I \\<phi>)\"\n    and Since: \"\\<And>\\<phi> I \\<psi>. fv \\<phi> \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\"\n    and Not_Since: \"\\<And>\\<phi> I \\<psi>. fv (Neg \\<phi>) \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow>\n      \\<not> safe_formula (Neg \\<phi>) \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Since (Neg \\<phi>) I \\<psi> )\"\n    and Until: \"\\<And>\\<phi> I \\<psi>. fv \\<phi> \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\"\n    and Not_Until: \"\\<And>\\<phi> I \\<psi>. fv (Neg \\<phi>) \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow>\n      \\<not> safe_formula (Neg \\<phi>) \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Until (Neg \\<phi>) I \\<psi>)\"\n    and MatchP: \"\\<And>I r. safe_regex Past Strict r \\<Longrightarrow> \\<forall>\\<phi> \\<in> atms r. P \\<phi> \\<Longrightarrow> P (MatchP I r)\"\n    and MatchF: \"\\<And>I r. safe_regex Futu Strict r \\<Longrightarrow> \\<forall>\\<phi> \\<in> atms r. P \\<phi> \\<Longrightarrow> P (MatchF I r)\"\n  shows \"P \\<phi>\"", "lemma safe_formula_NegD:\n  \"safe_formula (Formula.Neg \\<phi>) \\<Longrightarrow> fv \\<phi> = {} \\<or> (\\<exists>x. \\<phi> = Formula.Eq (Formula.Var x) (Formula.Var x))\"", "lemma matches_cong:\n  \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> matches v \\<phi> e = matches v' \\<phi> e\"", "lemma sat_slice_strong:\n  assumes \"v \\<in> S\" \"dom V = dom V'\"\n    \"\\<And>p v i. p \\<in> dom V \\<Longrightarrow> (p, v) \\<in> relevant_events \\<phi> S \\<Longrightarrow> v \\<in> the (V p) i \\<longleftrightarrow> v \\<in> the (V' p) i\"\n  shows \"relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E \\<Longrightarrow>\n    sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>\"", "lemma fv_get_and: \"(\\<Union>x\\<in>(set (get_and_list \\<phi>)). fvi b x) = fvi b \\<phi>\"", "lemma safe_get_and: \"safe_formula \\<phi> \\<Longrightarrow> list_all safe_neg (get_and_list \\<phi>)\"", "lemma sat_get_and: \"sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> list_all (sat \\<sigma> V v i) (get_and_list \\<phi>)\"", "lemma fv_safe_get_and:\n  \"safe_formula \\<phi> \\<Longrightarrow> fv \\<phi> \\<subseteq> (\\<Union>x\\<in>(set (filter safe_formula (get_and_list \\<phi>))). fv x)\"", "lemma ex_safe_get_and:\n  \"safe_formula \\<phi> \\<Longrightarrow> list_ex safe_formula (get_and_list \\<phi>)\"", "lemma case_NegE: \"(case \\<phi> of Neg \\<phi>' \\<Rightarrow> P \\<phi>' | _ \\<Rightarrow> False) \\<Longrightarrow> (\\<And>\\<phi>'. \\<phi> = Neg \\<phi>' \\<Longrightarrow> P \\<phi>' \\<Longrightarrow> Q) \\<Longrightarrow> Q\"", "lemma convert_multiway_remove_neg: \"safe_formula (remove_neg \\<phi>) \\<Longrightarrow> convert_multiway (remove_neg \\<phi>) = remove_neg (convert_multiway \\<phi>)\"", "lemma fv_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> fvi b (convert_multiway \\<phi>) = fvi b \\<phi>\"", "lemma get_and_nonempty:\n  assumes \"safe_formula \\<phi>\"\n  shows \"get_and_list \\<phi> \\<noteq> []\"", "lemma future_bounded_get_and:\n  \"list_all future_bounded (get_and_list \\<phi>) = future_bounded \\<phi>\"", "lemma safe_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> safe_formula (convert_multiway \\<phi>)\"", "lemma future_bounded_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\"", "lemma sat_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway \\<phi>) \\<longleftrightarrow> sat \\<sigma> V v i \\<phi>\"", "lemma sat_slice_iff:\n  assumes \"v \\<in> S\"\n  shows \"Formula.sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> Formula.sat (Formula_slicer.slice \\<phi> S \\<sigma>) V v i \\<phi>\"", "lemma Neg_splits:\n  \"P (case \\<phi> of formula.Neg \\<psi> \\<Rightarrow> f \\<psi> | \\<phi> \\<Rightarrow> g \\<phi>) =\n   ((\\<forall>\\<psi>. \\<phi> = formula.Neg \\<psi> \\<longrightarrow> P (f \\<psi>)) \\<and> ((\\<not> Formula.is_Neg \\<phi>) \\<longrightarrow> P (g \\<phi>)))\"\n  \"P (case \\<phi> of formula.Neg \\<psi> \\<Rightarrow> f \\<psi> | _ \\<Rightarrow> g \\<phi>) =\n   (\\<not> ((\\<exists>\\<psi>. \\<phi> = formula.Neg \\<psi> \\<and> \\<not> P (f \\<psi>)) \\<or> ((\\<not> Formula.is_Neg \\<phi>) \\<and> \\<not> P (g \\<phi>))))\""], "translations": [["", "lemma eval_trm_fv_cong: \"\\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow> eval_trm v t = eval_trm v' t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_trm t. v ! x = v' ! x \\<Longrightarrow>\n    eval_trm v t = eval_trm v' t", "by (induction t) simp_all"], ["", "qualified"], ["", "datatype agg_type = Agg_Cnt | Agg_Min | Agg_Max | Agg_Sum | Agg_Avg | Agg_Med"], ["", "qualified"], ["", "type_synonym agg_op = \"agg_type \\<times> event_data\""], ["", "definition flatten_multiset :: \"(event_data \\<times> enat) set \\<Rightarrow> event_data list\" where\n  \"flatten_multiset M = concat (map (\\<lambda>(x, c). replicate (the_enat c) x) (csorted_list_of_set M))\""], ["", "fun eval_agg_op :: \"agg_op \\<Rightarrow> (event_data \\<times> enat) set \\<Rightarrow> event_data\" where\n  \"eval_agg_op (Agg_Cnt, y0) M = EInt (integer_of_int (length (flatten_multiset M)))\"\n| \"eval_agg_op (Agg_Min, y0) M = (case flatten_multiset M of\n      [] \\<Rightarrow> y0\n    | x # xs \\<Rightarrow> foldl min x xs)\"\n| \"eval_agg_op (Agg_Max, y0) M = (case flatten_multiset M of\n      [] \\<Rightarrow> y0\n    | x # xs \\<Rightarrow> foldl max x xs)\"\n| \"eval_agg_op (Agg_Sum, y0) M = foldl plus y0 (flatten_multiset M)\"\n| \"eval_agg_op (Agg_Avg, y0) M = EFloat (let xs = flatten_multiset M in case xs of\n      [] \\<Rightarrow> 0\n    | _ \\<Rightarrow> double_of_event_data (foldl plus (EInt 0) xs) / double_of_int (length xs))\"\n| \"eval_agg_op (Agg_Med, y0) M = EFloat (let xs = flatten_multiset M; u = length xs in\n    if u = 0 then 0 else\n      let u' = u div 2 in\n      if even u then\n        (double_of_event_data (xs ! (u'-1)) + double_of_event_data (xs ! u') / double_of_int 2)\n      else double_of_event_data (xs ! u'))\""], ["", "qualified"], ["", "datatype (discs_sels) formula = Pred name \"trm list\"\n  | Let name formula formula\n  | Eq trm trm | Less trm trm | LessEq trm trm\n  | Neg formula | Or formula formula | And formula formula | Ands \"formula list\" | Exists formula\n  | Agg nat agg_op nat trm formula\n  | Prev \\<I> formula | Next \\<I> formula\n  | Since formula \\<I> formula | Until formula \\<I> formula\n  | MatchF \\<I> \"formula Regex.regex\" | MatchP \\<I> \"formula Regex.regex\""], ["", "qualified"], ["", "definition \"FF = Exists (Neg (Eq (Var 0) (Var 0)))\""], ["", "qualified"], ["", "definition \"TT \\<equiv> Neg FF\""], ["", "qualified"], ["", "fun fvi :: \"nat \\<Rightarrow> formula \\<Rightarrow> nat set\" where\n  \"fvi b (Pred r ts) = (\\<Union>t\\<in>set ts. fvi_trm b t)\"\n| \"fvi b (Let p \\<phi> \\<psi>) = fvi b \\<psi>\"\n| \"fvi b (Eq t1 t2) = fvi_trm b t1 \\<union> fvi_trm b t2\"\n| \"fvi b (Less t1 t2) = fvi_trm b t1 \\<union> fvi_trm b t2\"\n| \"fvi b (LessEq t1 t2) = fvi_trm b t1 \\<union> fvi_trm b t2\"\n| \"fvi b (Neg \\<phi>) = fvi b \\<phi>\"\n| \"fvi b (Or \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"\n| \"fvi b (And \\<phi> \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"\n| \"fvi b (Ands \\<phi>s) = (let xs = map (fvi b) \\<phi>s in \\<Union>x\\<in>set xs. x)\"\n| \"fvi b (Exists \\<phi>) = fvi (Suc b) \\<phi>\"\n| \"fvi b (Agg y \\<omega> b' f \\<phi>) = fvi (b + b') \\<phi> \\<union> fvi_trm (b + b') f \\<union> (if b \\<le> y then {y - b} else {})\"\n| \"fvi b (Prev I \\<phi>) = fvi b \\<phi>\"\n| \"fvi b (Next I \\<phi>) = fvi b \\<phi>\"\n| \"fvi b (Since \\<phi> I \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"\n| \"fvi b (Until \\<phi> I \\<psi>) = fvi b \\<phi> \\<union> fvi b \\<psi>\"\n| \"fvi b (MatchF I r) = Regex.fv_regex (fvi b) r\"\n| \"fvi b (MatchP I r) = Regex.fv_regex (fvi b) r\""], ["", "abbreviation \"fv \\<equiv> fvi 0\""], ["", "abbreviation \"fv_regex \\<equiv> Regex.fv_regex fv\""], ["", "lemma fv_abbrevs[simp]: \"fv TT = {}\" \"fv FF = {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv TT = {} &&& fv FF = {}", "unfolding TT_def FF_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (Neg (Exists (Neg (formula.Eq (Var 0) (Var 0))))) = {} &&&\n    fv (Exists (Neg (formula.Eq (Var 0) (Var 0)))) = {}", "by auto"], ["", "lemma fv_subset_Ands: \"\\<phi> \\<in> set \\<phi>s \\<Longrightarrow> fv \\<phi> \\<subseteq> fv (Ands \\<phi>s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<phi> \\<in> set \\<phi>s \\<Longrightarrow>\n    fv \\<phi> \\<subseteq> fv (Ands \\<phi>s)", "by auto"], ["", "lemma finite_fvi_trm[simp]: \"finite (fvi_trm b t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fvi_trm b t)", "by (induction t) simp_all"], ["", "lemma finite_fvi[simp]: \"finite (fvi b \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (fvi b \\<phi>)", "by (induction \\<phi> arbitrary: b) simp_all"], ["", "lemma fvi_trm_plus: \"x \\<in> fvi_trm (b + c) t \\<longleftrightarrow> x + c \\<in> fvi_trm b t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi_trm (b + c) t) = (x + c \\<in> fvi_trm b t)", "by (induction t) auto"], ["", "lemma fvi_trm_iff_fv_trm: \"x \\<in> fvi_trm b t \\<longleftrightarrow> x + b \\<in> fv_trm t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi_trm b t) = (x + b \\<in> fv_trm t)", "using fvi_trm_plus[where b=0 and c=b]"], ["proof (prove)\nusing this:\n  (?x \\<in> fvi_trm (0 + b) ?t) = (?x + b \\<in> fv_trm ?t)\n\ngoal (1 subgoal):\n 1. (x \\<in> fvi_trm b t) = (x + b \\<in> fv_trm t)", "by simp_all"], ["", "lemma fvi_plus: \"x \\<in> fvi (b + c) \\<phi> \\<longleftrightarrow> x + c \\<in> fvi b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi (b + c) \\<phi>) = (x + c \\<in> fvi b \\<phi>)", "proof (induction \\<phi> arbitrary: b rule: formula.induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>xa b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) xa) =\n            (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Exists xa)) = (x + c \\<in> fvi b (Exists xa))\nA total of 17 subgoals...", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  (x \\<in> fvi (?b + c) \\<phi>) = (x + c \\<in> fvi ?b \\<phi>)\n\ngoal (17 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>xa b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) xa) =\n            (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Exists xa)) = (x + c \\<in> fvi b (Exists xa))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  (x \\<in> fvi (?b + c) \\<phi>) = (x + c \\<in> fvi ?b \\<phi>)", "show ?case"], ["proof (prove)\nusing this:\n  (x \\<in> fvi (?b + c) \\<phi>) = (x + c \\<in> fvi ?b \\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> fvi (b + c) (Exists \\<phi>)) =\n    (x + c \\<in> fvi b (Exists \\<phi>))", "by force"], ["proof (state)\nthis:\n  (x \\<in> fvi (b + c) (Exists \\<phi>)) =\n  (x + c \\<in> fvi b (Exists \\<phi>))\n\ngoal (16 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>x1 x2 x3 x4 x5 b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) x5) =\n            (x + c \\<in> fvi b x5)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Agg x1 x2 x3 x4 x5)) =\n        (x + c \\<in> fvi b (Agg x1 x2 x3 x4 x5))\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>x1 x2 x3 x4 x5 b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) x5) =\n            (x + c \\<in> fvi b x5)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Agg x1 x2 x3 x4 x5)) =\n        (x + c \\<in> fvi b (Agg x1 x2 x3 x4 x5))\nA total of 16 subgoals...", "case (Agg y \\<omega> b' f \\<phi>)"], ["proof (state)\nthis:\n  (x \\<in> fvi (?b + c) \\<phi>) = (x + c \\<in> fvi ?b \\<phi>)\n\ngoal (16 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>x1 x2 x3 x4 x5 b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) x5) =\n            (x + c \\<in> fvi b x5)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Agg x1 x2 x3 x4 x5)) =\n        (x + c \\<in> fvi b (Agg x1 x2 x3 x4 x5))\nA total of 16 subgoals...", "have *: \"b + c + b' = b + b' + c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b + c + b' = b + b' + c", "by simp"], ["proof (state)\nthis:\n  b + c + b' = b + b' + c\n\ngoal (16 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>x1 x2 x3 x4 x5 b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) x5) =\n            (x + c \\<in> fvi b x5)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Agg x1 x2 x3 x4 x5)) =\n        (x + c \\<in> fvi b (Agg x1 x2 x3 x4 x5))\nA total of 16 subgoals...", "from Agg"], ["proof (chain)\npicking this:\n  (x \\<in> fvi (?b + c) \\<phi>) = (x + c \\<in> fvi ?b \\<phi>)", "show ?case"], ["proof (prove)\nusing this:\n  (x \\<in> fvi (?b + c) \\<phi>) = (x + c \\<in> fvi ?b \\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> fvi (b + c) (Agg y \\<omega> b' f \\<phi>)) =\n    (x + c \\<in> fvi b (Agg y \\<omega> b' f \\<phi>))", "by (force simp: * fvi_trm_plus)"], ["proof (state)\nthis:\n  (x \\<in> fvi (b + c) (Agg y \\<omega> b' f \\<phi>)) =\n  (x + c \\<in> fvi b (Agg y \\<omega> b' f \\<phi>))\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Pred x1 x2)) = (x + c \\<in> fvi b (Pred x1 x2))\n 2. \\<And>x1 x2 x3 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2);\n        \\<And>b. (x \\<in> fvi (b + c) x3) = (x + c \\<in> fvi b x3)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (formula.Let x1 x2 x3)) =\n                         (x + c \\<in> fvi b (formula.Let x1 x2 x3))\n 3. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (formula.Eq x1 x2)) =\n       (x + c \\<in> fvi b (formula.Eq x1 x2))\n 4. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (Less x1 x2)) = (x + c \\<in> fvi b (Less x1 x2))\n 5. \\<And>x1 x2 b.\n       (x \\<in> fvi (b + c) (LessEq x1 x2)) =\n       (x + c \\<in> fvi b (LessEq x1 x2))\n 6. \\<And>xa b.\n       (\\<And>b.\n           (x \\<in> fvi (b + c) xa) =\n           (x + c \\<in> fvi b xa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Neg xa)) = (x + c \\<in> fvi b (Neg xa))\n 7. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (Or x1 x2)) =\n                         (x + c \\<in> fvi b (Or x1 x2))\n 8. \\<And>x1 x2 b.\n       \\<lbrakk>\\<And>b. (x \\<in> fvi (b + c) x1) = (x + c \\<in> fvi b x1);\n        \\<And>b. (x \\<in> fvi (b + c) x2) = (x + c \\<in> fvi b x2)\\<rbrakk>\n       \\<Longrightarrow> (x \\<in> fvi (b + c) (And x1 x2)) =\n                         (x + c \\<in> fvi b (And x1 x2))\n 9. \\<And>xa b.\n       (\\<And>xaa b.\n           xaa \\<in> set xa \\<Longrightarrow>\n           (x \\<in> fvi (b + c) xaa) =\n           (x + c \\<in> fvi b xaa)) \\<Longrightarrow>\n       (x \\<in> fvi (b + c) (Ands xa)) = (x + c \\<in> fvi b (Ands xa))\n 10. \\<And>x1 x2 b.\n        (\\<And>b.\n            (x \\<in> fvi (b + c) x2) =\n            (x + c \\<in> fvi b x2)) \\<Longrightarrow>\n        (x \\<in> fvi (b + c) (Prev x1 x2)) =\n        (x + c \\<in> fvi b (Prev x1 x2))\nA total of 15 subgoals...", "qed (auto simp add: fvi_trm_plus fv_regex_commute[where g = \"\\<lambda>x. x + c\"])"], ["", "lemma fvi_Suc: \"x \\<in> fvi (Suc b) \\<phi> \\<longleftrightarrow> Suc x \\<in> fvi b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi (Suc b) \\<phi>) = (Suc x \\<in> fvi b \\<phi>)", "using fvi_plus[where c=1]"], ["proof (prove)\nusing this:\n  (?x \\<in> fvi (?b + 1) ?\\<phi>) = (?x + 1 \\<in> fvi ?b ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> fvi (Suc b) \\<phi>) = (Suc x \\<in> fvi b \\<phi>)", "by simp"], ["", "lemma fvi_plus_bound:\n  assumes \"\\<forall>i\\<in>fvi (b + c) \\<phi>. i < n\"\n  shows \"\\<forall>i\\<in>fvi b \\<phi>. i < c + n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fvi b \\<phi>. i < c + n", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> fvi b \\<phi> \\<Longrightarrow> i < c + n", "fix i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> fvi b \\<phi> \\<Longrightarrow> i < c + n", "assume \"i \\<in> fvi b \\<phi>\""], ["proof (state)\nthis:\n  i \\<in> fvi b \\<phi>\n\ngoal (1 subgoal):\n 1. \\<And>i. i \\<in> fvi b \\<phi> \\<Longrightarrow> i < c + n", "show \"i < c + n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < c + n", "proof (cases \"i < c\")"], ["proof (state)\ngoal (2 subgoals):\n 1. i < c \\<Longrightarrow> i < c + n\n 2. \\<not> i < c \\<Longrightarrow> i < c + n", "case True"], ["proof (state)\nthis:\n  i < c\n\ngoal (2 subgoals):\n 1. i < c \\<Longrightarrow> i < c + n\n 2. \\<not> i < c \\<Longrightarrow> i < c + n", "then"], ["proof (chain)\npicking this:\n  i < c", "show ?thesis"], ["proof (prove)\nusing this:\n  i < c\n\ngoal (1 subgoal):\n 1. i < c + n", "by simp"], ["proof (state)\nthis:\n  i < c + n\n\ngoal (1 subgoal):\n 1. \\<not> i < c \\<Longrightarrow> i < c + n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> i < c \\<Longrightarrow> i < c + n", "case False"], ["proof (state)\nthis:\n  \\<not> i < c\n\ngoal (1 subgoal):\n 1. \\<not> i < c \\<Longrightarrow> i < c + n", "then"], ["proof (chain)\npicking this:\n  \\<not> i < c", "obtain i' where \"i = i' + c\""], ["proof (prove)\nusing this:\n  \\<not> i < c\n\ngoal (1 subgoal):\n 1. (\\<And>i'. i = i' + c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using nat_le_iff_add"], ["proof (prove)\nusing this:\n  \\<not> i < c\n  (?m \\<le> ?n) = (\\<exists>k. ?n = ?m + k)\n\ngoal (1 subgoal):\n 1. (\\<And>i'. i = i' + c \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (auto simp: not_less)"], ["proof (state)\nthis:\n  i = i' + c\n\ngoal (1 subgoal):\n 1. \\<not> i < c \\<Longrightarrow> i < c + n", "with assms \\<open>i \\<in> fvi b \\<phi>\\<close>"], ["proof (chain)\npicking this:\n  \\<forall>i\\<in>fvi (b + c) \\<phi>. i < n\n  i \\<in> fvi b \\<phi>\n  i = i' + c", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>fvi (b + c) \\<phi>. i < n\n  i \\<in> fvi b \\<phi>\n  i = i' + c\n\ngoal (1 subgoal):\n 1. i < c + n", "by (simp add: fvi_plus)"], ["proof (state)\nthis:\n  i < c + n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  i < c + n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fvi_Suc_bound:\n  assumes \"\\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\"\n  shows \"\\<forall>i\\<in>fvi b \\<phi>. i < Suc n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fvi b \\<phi>. i < Suc n", "using assms fvi_plus_bound[where c=1]"], ["proof (prove)\nusing this:\n  \\<forall>i\\<in>fvi (Suc b) \\<phi>. i < n\n  \\<forall>i\\<in>fvi (?b + 1) ?\\<phi>. i < ?n \\<Longrightarrow>\n  \\<forall>i\\<in>fvi ?b ?\\<phi>. i < 1 + ?n\n\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fvi b \\<phi>. i < Suc n", "by simp"], ["", "lemma fvi_iff_fv: \"x \\<in> fvi b \\<phi> \\<longleftrightarrow> x + b \\<in> fv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> fvi b \\<phi>) = (x + b \\<in> fv \\<phi>)", "using fvi_plus[where b=0 and c=b]"], ["proof (prove)\nusing this:\n  (?x \\<in> fvi (0 + b) ?\\<phi>) = (?x + b \\<in> fv ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (x \\<in> fvi b \\<phi>) = (x + b \\<in> fv \\<phi>)", "by simp_all"], ["", "qualified"], ["", "definition nfv :: \"formula \\<Rightarrow> nat\" where\n  \"nfv \\<phi> = Max (insert 0 (Suc ` fv \\<phi>))\""], ["", "qualified"], ["", "abbreviation nfv_regex where\n  \"nfv_regex \\<equiv> Regex.nfv_regex fv\""], ["", "qualified"], ["", "definition envs :: \"formula \\<Rightarrow> env set\" where\n  \"envs \\<phi> = {v. length v = nfv \\<phi>}\""], ["", "lemma nfv_simps[simp]:\n  \"nfv (Let p \\<phi> \\<psi>) = nfv \\<psi>\"\n  \"nfv (Neg \\<phi>) = nfv \\<phi>\"\n  \"nfv (Or \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (And \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Prev I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Next I \\<phi>) = nfv \\<phi>\"\n  \"nfv (Since \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (Until \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)\"\n  \"nfv (MatchP I r) = Regex.nfv_regex fv r\"\n  \"nfv (MatchF I r) = Regex.nfv_regex fv r\"\n  \"nfv_regex (Regex.Skip n) = 0\"\n  \"nfv_regex (Regex.Test \\<phi>) = Max (insert 0 (Suc ` fv \\<phi>))\"\n  \"nfv_regex (Regex.Plus r s) = max (nfv_regex r) (nfv_regex s)\"\n  \"nfv_regex (Regex.Times r s) = max (nfv_regex r) (nfv_regex s)\"\n  \"nfv_regex (Regex.Star r) = nfv_regex r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((nfv (formula.Let p \\<phi> \\<psi>) = nfv \\<psi> &&&\n      nfv (Neg \\<phi>) = nfv \\<phi> &&&\n      nfv (Or \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)) &&&\n     (nfv (And \\<phi> \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>) &&&\n      nfv (Prev I \\<phi>) = nfv \\<phi>) &&&\n     nfv (Next I \\<phi>) = nfv \\<phi> &&&\n     nfv (Since \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>)) &&&\n    ((nfv (Until \\<phi> I \\<psi>) = max (nfv \\<phi>) (nfv \\<psi>) &&&\n      nfv (MatchP I r) = nfv_regex r) &&&\n     nfv (MatchF I r) = nfv_regex r &&& nfv_regex (regex.Skip n) = 0) &&&\n    (nfv_regex (regex.Test \\<phi>) = Max (insert 0 (Suc ` fv \\<phi>)) &&&\n     nfv_regex (regex.Plus r s) = max (nfv_regex r) (nfv_regex s)) &&&\n    nfv_regex (regex.Times r s) = max (nfv_regex r) (nfv_regex s) &&&\n    nfv_regex (regex.Star r) = nfv_regex r", "unfolding nfv_def Regex.nfv_regex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((Max (insert 0 (Suc ` fv (formula.Let p \\<phi> \\<psi>))) =\n      Max (insert 0 (Suc ` fv \\<psi>)) &&&\n      Max (insert 0 (Suc ` fv (Neg \\<phi>))) =\n      Max (insert 0 (Suc ` fv \\<phi>)) &&&\n      Max (insert 0 (Suc ` fv (Or \\<phi> \\<psi>))) =\n      max (Max (insert 0 (Suc ` fv \\<phi>)))\n       (Max (insert 0 (Suc ` fv \\<psi>)))) &&&\n     (Max (insert 0 (Suc ` fv (And \\<phi> \\<psi>))) =\n      max (Max (insert 0 (Suc ` fv \\<phi>)))\n       (Max (insert 0 (Suc ` fv \\<psi>))) &&&\n      Max (insert 0 (Suc ` fv (Prev I \\<phi>))) =\n      Max (insert 0 (Suc ` fv \\<phi>))) &&&\n     Max (insert 0 (Suc ` fv (Next I \\<phi>))) =\n     Max (insert 0 (Suc ` fv \\<phi>)) &&&\n     Max (insert 0 (Suc ` fv (Since \\<phi> I \\<psi>))) =\n     max (Max (insert 0 (Suc ` fv \\<phi>)))\n      (Max (insert 0 (Suc ` fv \\<psi>)))) &&&\n    ((Max (insert 0 (Suc ` fv (Until \\<phi> I \\<psi>))) =\n      max (Max (insert 0 (Suc ` fv \\<phi>)))\n       (Max (insert 0 (Suc ` fv \\<psi>))) &&&\n      Max (insert 0 (Suc ` fv (MatchP I r))) =\n      Max (insert 0 (Suc ` fv_regex r))) &&&\n     Max (insert 0 (Suc ` fv (MatchF I r))) =\n     Max (insert 0 (Suc ` fv_regex r)) &&&\n     Max (insert 0 (Suc ` fv_regex (regex.Skip n))) = 0) &&&\n    (Max (insert 0 (Suc ` fv_regex (regex.Test \\<phi>))) =\n     Max (insert 0 (Suc ` fv \\<phi>)) &&&\n     Max (insert 0 (Suc ` fv_regex (regex.Plus r s))) =\n     max (Max (insert 0 (Suc ` fv_regex r)))\n      (Max (insert 0 (Suc ` fv_regex s)))) &&&\n    Max (insert 0 (Suc ` fv_regex (regex.Times r s))) =\n    max (Max (insert 0 (Suc ` fv_regex r)))\n     (Max (insert 0 (Suc ` fv_regex s))) &&&\n    Max (insert 0 (Suc ` fv_regex (regex.Star r))) =\n    Max (insert 0 (Suc ` fv_regex r))", "by (simp_all add: image_Un Max_Un[symmetric])"], ["", "lemma nfv_Ands[simp]: \"nfv (Ands l) = Max (insert 0 (nfv ` set l))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. nfv (Ands l) = Max (insert 0 (nfv ` set l))", "proof (induction l)"], ["proof (state)\ngoal (2 subgoals):\n 1. nfv (Ands []) = Max (insert 0 (nfv ` set []))\n 2. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. nfv (Ands []) = Max (insert 0 (nfv ` set []))\n 2. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. nfv (Ands []) = Max (insert 0 (nfv ` set []))", "unfolding nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Max (insert 0 (Suc ` fv (Ands []))) =\n    Max (insert 0 ((\\<lambda>a. Max (insert 0 (Suc ` fv a))) ` set []))", "by simp"], ["proof (state)\nthis:\n  nfv (Ands []) = Max (insert 0 (nfv ` set []))\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "case (Cons a l)"], ["proof (state)\nthis:\n  nfv (Ands l) = Max (insert 0 (nfv ` set l))\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "have \"fv (Ands (a # l)) = fv a \\<union> fv (Ands l)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (Ands (a # l)) = fv a \\<union> fv (Ands l)", "by simp"], ["proof (state)\nthis:\n  fv (Ands (a # l)) = fv a \\<union> fv (Ands l)\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "then"], ["proof (chain)\npicking this:\n  fv (Ands (a # l)) = fv a \\<union> fv (Ands l)", "have \"nfv (Ands (a # l)) = max (nfv a) (nfv (Ands l))\""], ["proof (prove)\nusing this:\n  fv (Ands (a # l)) = fv a \\<union> fv (Ands l)\n\ngoal (1 subgoal):\n 1. nfv (Ands (a # l)) = max (nfv a) (nfv (Ands l))", "unfolding nfv_def"], ["proof (prove)\nusing this:\n  fv (Ands (a # l)) = fv a \\<union> fv (Ands l)\n\ngoal (1 subgoal):\n 1. Max (insert 0 (Suc ` fv (Ands (a # l)))) =\n    max (Max (insert 0 (Suc ` fv a))) (Max (insert 0 (Suc ` fv (Ands l))))", "by (auto simp: image_Un Max.union[symmetric])"], ["proof (state)\nthis:\n  nfv (Ands (a # l)) = max (nfv a) (nfv (Ands l))\n\ngoal (1 subgoal):\n 1. \\<And>a l.\n       nfv (Ands l) = Max (insert 0 (nfv ` set l)) \\<Longrightarrow>\n       nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "with Cons.IH"], ["proof (chain)\npicking this:\n  nfv (Ands l) = Max (insert 0 (nfv ` set l))\n  nfv (Ands (a # l)) = max (nfv a) (nfv (Ands l))", "show ?case"], ["proof (prove)\nusing this:\n  nfv (Ands l) = Max (insert 0 (nfv ` set l))\n  nfv (Ands (a # l)) = max (nfv a) (nfv (Ands l))\n\ngoal (1 subgoal):\n 1. nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))", "by (cases l) auto"], ["proof (state)\nthis:\n  nfv (Ands (a # l)) = Max (insert 0 (nfv ` set (a # l)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fvi_less_nfv: \"\\<forall>i\\<in>fv \\<phi>. i < nfv \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fv \\<phi>. i < nfv \\<phi>", "unfolding nfv_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fv \\<phi>. i < Max (insert 0 (Suc ` fv \\<phi>))", "by (auto simp add: Max_gr_iff intro: max.strict_coboundedI2)"], ["", "lemma fvi_less_nfv_regex: \"\\<forall>i\\<in>fv_regex \\<phi>. i < nfv_regex \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fv_regex \\<phi>. i < nfv_regex \\<phi>", "unfolding Regex.nfv_regex_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i\\<in>fv_regex \\<phi>.\n       i < Max (insert 0 (Suc ` fv_regex \\<phi>))", "by (auto simp add: Max_gr_iff intro: max.strict_coboundedI2)"], ["", "subsubsection \\<open>Future reach\\<close>"], ["", "qualified"], ["", "fun future_bounded :: \"formula \\<Rightarrow> bool\" where\n  \"future_bounded (Pred _ _) = True\"\n| \"future_bounded (Let p \\<phi> \\<psi>) = (future_bounded \\<phi> \\<and> future_bounded \\<psi>)\"\n| \"future_bounded (Eq _ _) = True\"\n| \"future_bounded (Less _ _) = True\"\n| \"future_bounded (LessEq _ _) = True\"\n| \"future_bounded (Neg \\<phi>) = future_bounded \\<phi>\"\n| \"future_bounded (Or \\<phi> \\<psi>) = (future_bounded \\<phi> \\<and> future_bounded \\<psi>)\"\n| \"future_bounded (And \\<phi> \\<psi>) = (future_bounded \\<phi> \\<and> future_bounded \\<psi>)\"\n| \"future_bounded (Ands l) = list_all future_bounded l\"\n| \"future_bounded (Exists \\<phi>) = future_bounded \\<phi>\"\n| \"future_bounded (Agg y \\<omega> b f \\<phi>) = future_bounded \\<phi>\"\n| \"future_bounded (Prev I \\<phi>) = future_bounded \\<phi>\"\n| \"future_bounded (Next I \\<phi>) = future_bounded \\<phi>\"\n| \"future_bounded (Since \\<phi> I \\<psi>) = (future_bounded \\<phi> \\<and> future_bounded \\<psi>)\"\n| \"future_bounded (Until \\<phi> I \\<psi>) = (future_bounded \\<phi> \\<and> future_bounded \\<psi> \\<and> right I \\<noteq> \\<infinity>)\"\n| \"future_bounded (MatchP I r) = Regex.pred_regex future_bounded r\"\n| \"future_bounded (MatchF I r) = (Regex.pred_regex future_bounded r \\<and> right I \\<noteq> \\<infinity>)\""], ["", "subsubsection \\<open>Semantics\\<close>"], ["", "definition \"ecard A = (if finite A then card A else \\<infinity>)\""], ["", "qualified"], ["", "fun sat :: \"trace \\<Rightarrow> (name \\<rightharpoonup> nat \\<Rightarrow> event_data list set) \\<Rightarrow> env \\<Rightarrow> nat \\<Rightarrow> formula \\<Rightarrow> bool\" where\n  \"sat \\<sigma> V v i (Pred r ts) = (case V r of\n       None \\<Rightarrow> (r, map (eval_trm v) ts) \\<in> \\<Gamma> \\<sigma> i\n     | Some X \\<Rightarrow> map (eval_trm v) ts \\<in> X i)\"\n| \"sat \\<sigma> V v i (Let p \\<phi> \\<psi>) =\n    sat \\<sigma> (V(p \\<mapsto> \\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>})) v i \\<psi>\"\n| \"sat \\<sigma> V v i (Eq t1 t2) = (eval_trm v t1 = eval_trm v t2)\"\n| \"sat \\<sigma> V v i (Less t1 t2) = (eval_trm v t1 < eval_trm v t2)\"\n| \"sat \\<sigma> V v i (LessEq t1 t2) = (eval_trm v t1 \\<le> eval_trm v t2)\"\n| \"sat \\<sigma> V v i (Neg \\<phi>) = (\\<not> sat \\<sigma> V v i \\<phi>)\"\n| \"sat \\<sigma> V v i (Or \\<phi> \\<psi>) = (sat \\<sigma> V v i \\<phi> \\<or> sat \\<sigma> V v i \\<psi>)\"\n| \"sat \\<sigma> V v i (And \\<phi> \\<psi>) = (sat \\<sigma> V v i \\<phi> \\<and> sat \\<sigma> V v i \\<psi>)\"\n| \"sat \\<sigma> V v i (Ands l) = (\\<forall>\\<phi> \\<in> set l. sat \\<sigma> V v i \\<phi>)\"\n| \"sat \\<sigma> V v i (Exists \\<phi>) = (\\<exists>z. sat \\<sigma> V (z # v) i \\<phi>)\"\n| \"sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>) =\n    (let M = {(x, ecard Zs) | x Zs. Zs = {zs. length zs = b \\<and> sat \\<sigma> V (zs @ v) i \\<phi> \\<and> eval_trm (zs @ v) f = x} \\<and> Zs \\<noteq> {}}\n    in (M = {} \\<longrightarrow> fv \\<phi> \\<subseteq> {0..<b}) \\<and> v ! y = eval_agg_op \\<omega> M)\"\n| \"sat \\<sigma> V v i (Prev I \\<phi>) = (case i of 0 \\<Rightarrow> False | Suc j \\<Rightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<and> sat \\<sigma> V v j \\<phi>)\"\n| \"sat \\<sigma> V v i (Next I \\<phi>) = (mem (\\<tau> \\<sigma> (Suc i) - \\<tau> \\<sigma> i) I \\<and> sat \\<sigma> V v (Suc i) \\<phi>)\"\n| \"sat \\<sigma> V v i (Since \\<phi> I \\<psi>) = (\\<exists>j\\<le>i. mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<and> sat \\<sigma> V v j \\<psi> \\<and> (\\<forall>k \\<in> {j <.. i}. sat \\<sigma> V v k \\<phi>))\"\n| \"sat \\<sigma> V v i (Until \\<phi> I \\<psi>) = (\\<exists>j\\<ge>i. mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I \\<and> sat \\<sigma> V v j \\<psi> \\<and> (\\<forall>k \\<in> {i ..< j}. sat \\<sigma> V v k \\<phi>))\"\n| \"sat \\<sigma> V v i (MatchP I r) = (\\<exists>j\\<le>i. mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<and> Regex.match (sat \\<sigma> V v) r j i)\"\n| \"sat \\<sigma> V v i (MatchF I r) = (\\<exists>j\\<ge>i. mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I \\<and> Regex.match (sat \\<sigma> V v) r i j)\""], ["", "lemma sat_abbrevs[simp]:\n  \"sat \\<sigma> V v i TT\" \"\\<not> sat \\<sigma> V v i FF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i TT &&& \\<not> sat \\<sigma> V v i FF", "unfolding TT_def FF_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Neg (Exists (Neg (formula.Eq (Var 0) (Var 0))))) &&&\n    \\<not> sat \\<sigma> V v i (Exists (Neg (formula.Eq (Var 0) (Var 0))))", "by auto"], ["", "lemma sat_Ands: \"sat \\<sigma> V v i (Ands l) \\<longleftrightarrow> (\\<forall>\\<phi>\\<in>set l. sat \\<sigma> V v i \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Ands l) =\n    (\\<forall>\\<phi>\\<in>set l. sat \\<sigma> V v i \\<phi>)", "by (simp add: list_all_iff)"], ["", "lemma sat_Until_rec: \"sat \\<sigma> V v i (Until \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  (\\<Delta> \\<sigma> (i + 1) \\<le> right I \\<and> sat \\<sigma> V v i \\<phi> \\<and> sat \\<sigma> V v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>) =\n    (mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n     enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n     sat \\<sigma> V v i \\<phi> \\<and>\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>))", "proof (rule iffI; (elim disjE conjE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 3. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "assume ?L"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 3. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "obtain j where j: \"i \\<le> j\" \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\" \"sat \\<sigma> V v j \\<psi>\" \"\\<forall>k \\<in> {i ..< j}. sat \\<sigma> V v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n         sat \\<sigma> V v j \\<psi>;\n         \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 3. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>", "show ?R"], ["proof (prove)\nusing this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "proof (cases \"i = j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "with j(1,2)"], ["proof (chain)\npicking this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  i \\<noteq> j", "have \"\\<Delta> \\<sigma> (i + 1) \\<le> right I\""], ["proof (prove)\nusing this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I", "by (auto elim: order_trans[rotated] simp: diff_le_mono)"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "moreover"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "from False j(1,4)"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  i \\<le> j\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>", "have \"sat \\<sigma> V v i \\<phi>\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  i \\<le> j\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi>", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "moreover"], ["proof (state)\nthis:\n  sat \\<sigma> V v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "from False j"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>", "have \"sat \\<sigma> V v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "by (cases \"right I\") (auto simp: le_diff_conv le_diff_conv2 intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "ultimately"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  sat \\<sigma> V v i \\<phi>\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  sat \\<sigma> V v i \\<phi>\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i + 1)\n     (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "by blast"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  sat \\<sigma> V v i \\<phi> \\<and>\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{i..<j}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i + 1)\n                       (Until \\<phi>\n                         (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "qed simp"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  sat \\<sigma> V v i \\<phi> \\<and>\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "assume \\<Delta>: \"\\<Delta> \\<sigma> (i + 1) \\<le> right I\" and now: \"sat \\<sigma> V v i \\<phi>\" and\n   \"next\": \"sat \\<sigma> V v (i + 1) (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\""], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  sat \\<sigma> V v i \\<phi>\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "from \"next\""], ["proof (chain)\npicking this:\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)", "obtain j where j: \"i + 1 \\<le> j\" \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1)) ((subtract (\\<Delta> \\<sigma> (i + 1)) I))\"\n      \"sat \\<sigma> V v j \\<psi>\" \"\\<forall>k \\<in> {i + 1 ..< j}. sat \\<sigma> V v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> V v (i + 1)\n   (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i + 1 \\<le> j;\n         mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n          (subtract (\\<Delta> \\<sigma> (i + 1)) I);\n         sat \\<sigma> V v j \\<psi>;\n         \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> V v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i + 1 \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> V v k \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "from \\<Delta> j(1,2)"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  i + 1 \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)", "have \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\""], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  i + 1 \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (i + 1))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n\ngoal (1 subgoal):\n 1. mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I", "by (cases \"right I\") (auto simp: le_diff_conv2)"], ["proof (state)\nthis:\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n 2. \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i + 1)\n      (Until \\<phi> (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n        \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "with now j(1,3,4)"], ["proof (chain)\npicking this:\n  sat \\<sigma> V v i \\<phi>\n  i + 1 \\<le> j\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> V v k \\<phi>\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I", "show ?L"], ["proof (prove)\nusing this:\n  sat \\<sigma> V v i \\<phi>\n  i + 1 \\<le> j\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{i + 1..<j}. sat \\<sigma> V v k \\<phi>\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "by (auto simp: le_eq_less_or_eq[of i] intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi> I \\<psi>)", "qed auto"], ["", "lemma sat_Since_rec: \"sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<longleftrightarrow>\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  (i > 0 \\<and> \\<Delta> \\<sigma> i \\<le> right I \\<and> sat \\<sigma> V v i \\<phi> \\<and> sat \\<sigma> V v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>))\"\n  (is \"?L \\<longleftrightarrow> ?R\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>) =\n    (mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n     0 < i \\<and>\n     enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n     sat \\<sigma> V v i \\<phi> \\<and>\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>))", "proof (rule iffI; (elim disjE conjE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 3. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "assume ?L"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 3. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "obtain j where j: \"j \\<le> i\" \"mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\" \"sat \\<sigma> V v j \\<psi>\" \"\\<forall>k \\<in> {j <.. i}. sat \\<sigma> V v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n         sat \\<sigma> V v j \\<psi>;\n         \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n 2. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 3. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "then"], ["proof (chain)\npicking this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>", "show ?R"], ["proof (prove)\nusing this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "proof (cases \"i = j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "case False"], ["proof (state)\nthis:\n  i \\<noteq> j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "with j(1)"], ["proof (chain)\npicking this:\n  j \\<le> i\n  i \\<noteq> j", "obtain k where [simp]: \"i = k + 1\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  i \\<noteq> j\n\ngoal (1 subgoal):\n 1. (\\<And>k. i = k + 1 \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by (cases i) auto"], ["proof (state)\nthis:\n  i = k + 1\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "with j(1,2) False"], ["proof (chain)\npicking this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  i \\<noteq> j\n  i = k + 1", "have \"\\<Delta> \\<sigma> i \\<le> right I\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  i \\<noteq> j\n  i = k + 1\n\ngoal (1 subgoal):\n 1. enat (\\<Delta> \\<sigma> i) \\<le> right I", "by (auto elim: order_trans[rotated] simp: diff_le_mono2 le_Suc_eq)"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "moreover"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "from False j(1,4)"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  j \\<le> i\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>", "have \"sat \\<sigma> V v i \\<phi>\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  j \\<le> i\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi>", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "moreover"], ["proof (state)\nthis:\n  sat \\<sigma> V v i \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "from False j"], ["proof (chain)\npicking this:\n  i \\<noteq> j\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>", "have \"sat \\<sigma> V v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\""], ["proof (prove)\nusing this:\n  i \\<noteq> j\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "by (cases \"right I\") (auto simp: le_diff_conv le_diff_conv2 intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>;\n     i \\<noteq> j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "ultimately"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  sat \\<sigma> V v i \\<phi>\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  sat \\<sigma> V v i \\<phi>\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    sat \\<sigma> V v i \\<phi> \\<and>\n    sat \\<sigma> V v (i - 1)\n     (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "by auto"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  sat \\<sigma> V v i \\<phi> \\<and>\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     sat \\<sigma> V v j \\<psi>;\n     \\<forall>k\\<in>{j<..i}. sat \\<sigma> V v k \\<phi>; i = j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      sat \\<sigma> V v i \\<phi> \\<and>\n                      sat \\<sigma> V v (i - 1)\n                       (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I)\n                         \\<psi>)", "qed simp"], ["proof (state)\nthis:\n  mem 0 I \\<and> sat \\<sigma> V v i \\<psi> \\<or>\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  sat \\<sigma> V v i \\<phi> \\<and>\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "assume i: \"0 < i\" and \\<Delta>: \"\\<Delta> \\<sigma> i \\<le> right I\" and now: \"sat \\<sigma> V v i \\<phi>\" and\n   \"prev\": \"sat \\<sigma> V v (i - 1) (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\""], ["proof (state)\nthis:\n  0 < i\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  sat \\<sigma> V v i \\<phi>\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "from \"prev\""], ["proof (chain)\npicking this:\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)", "obtain j where j: \"j \\<le> i - 1\" \"mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j) ((subtract (\\<Delta> \\<sigma> i) I))\"\n      \"sat \\<sigma> V v j \\<psi>\" \"\\<forall>k \\<in> {j <.. i - 1}. sat \\<sigma> V v k \\<phi>\""], ["proof (prove)\nusing this:\n  sat \\<sigma> V v (i - 1)\n   (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> i - 1;\n         mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n          (subtract (\\<Delta> \\<sigma> i) I);\n         sat \\<sigma> V v j \\<psi>;\n         \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> V v k \\<phi>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> i - 1\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> V v k \\<phi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "from \\<Delta> i j(1,2)"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  0 < i\n  j \\<le> i - 1\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)", "have \"mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\""], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  0 < i\n  j \\<le> i - 1\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)\n\ngoal (1 subgoal):\n 1. mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I", "by (cases \"right I\") (auto simp: le_diff_conv2)"], ["proof (state)\nthis:\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n 2. \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n     sat \\<sigma> V v i \\<phi>;\n     sat \\<sigma> V v (i - 1)\n      (Since \\<phi> (subtract (\\<Delta> \\<sigma> i) I) \\<psi>)\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "with now i j(1,3,4)"], ["proof (chain)\npicking this:\n  sat \\<sigma> V v i \\<phi>\n  0 < i\n  j \\<le> i - 1\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> V v k \\<phi>\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I", "show ?L"], ["proof (prove)\nusing this:\n  sat \\<sigma> V v i \\<phi>\n  0 < i\n  j \\<le> i - 1\n  sat \\<sigma> V v j \\<psi>\n  \\<forall>k\\<in>{j<..i - 1}. sat \\<sigma> V v k \\<phi>\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "by (auto simp: le_Suc_eq gr0_conv_Suc intro!: exI[of _ j])"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> V v i \\<psi>; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "qed auto"], ["", "lemma sat_MatchF_rec: \"sat \\<sigma> V v i (MatchF I r) \\<longleftrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  \\<Delta> \\<sigma> (i + 1) \\<le> right I \\<and> (\\<exists>s \\<in> Regex.lpd (sat \\<sigma> V v) i r. sat \\<sigma> V v (i + 1) (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\"\n  (is \"?L \\<longleftrightarrow> ?R1 \\<or> ?R2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchF I r) =\n    (mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n     enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n     (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n         sat \\<sigma> V v (i + 1)\n          (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)))", "proof (rule iffI; (elim disjE conjE bexE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (MatchF I r) \\<Longrightarrow>\n    mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n 2. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 3. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "assume ?L"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchF I r)\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (MatchF I r) \\<Longrightarrow>\n    mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n 2. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 3. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> V v i (MatchF I r)", "obtain j where j: \"j \\<ge> i\" \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\" and \"Regex.match (sat \\<sigma> V v) r i j\""], ["proof (prove)\nusing this:\n  sat \\<sigma> V v i (MatchF I r)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n         Regex.match (sat \\<sigma> V v) r i j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  Regex.match (sat \\<sigma> V v) r i j\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (MatchF I r) \\<Longrightarrow>\n    mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n 2. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 3. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "then"], ["proof (chain)\npicking this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  Regex.match (sat \\<sigma> V v) r i j", "show \"?R1 \\<or> ?R2\""], ["proof (prove)\nusing this:\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  Regex.match (sat \\<sigma> V v) r i j\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))", "proof (cases \"i < j\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))", "case True"], ["proof (state)\nthis:\n  i < j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))", "with \\<open>Regex.match (sat \\<sigma> V v) r i j\\<close> lpd_match[of i j \"sat \\<sigma> V v\" r]"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) r i j\n  i < j \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r i j =\n  (\\<Squnion> (Regex.match (sat \\<sigma> V v) `\n               Regex.lpd (sat \\<sigma> V v) i r))\n   (i + 1) j\n  i < j", "obtain s where \"s \\<in> Regex.lpd (sat \\<sigma> V v) i r\" \"Regex.match (sat \\<sigma> V v) s (i + 1) j\""], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) r i j\n  i < j \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r i j =\n  (\\<Squnion> (Regex.match (sat \\<sigma> V v) `\n               Regex.lpd (sat \\<sigma> V v) i r))\n   (i + 1) j\n  i < j\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n         Regex.match (sat \\<sigma> V v) s (i + 1) j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> Regex.lpd (sat \\<sigma> V v) i r\n  Regex.match (sat \\<sigma> V v) s (i + 1) j\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))", "with True j"], ["proof (chain)\npicking this:\n  i < j\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  s \\<in> Regex.lpd (sat \\<sigma> V v) i r\n  Regex.match (sat \\<sigma> V v) s (i + 1) j", "have ?R2"], ["proof (prove)\nusing this:\n  i < j\n  i \\<le> j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I\n  s \\<in> Regex.lpd (sat \\<sigma> V v) i r\n  Regex.match (sat \\<sigma> V v) s (i + 1) j\n\ngoal (1 subgoal):\n 1. enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))", "by (cases \"right I\")\n        (auto simp: le_diff_conv le_diff_conv2 intro!: exI[of _ j] elim: le_trans[rotated])"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i + 1)\n       (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))\n 2. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))", "then"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i + 1)\n       (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))", "show ?thesis"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i + 1)\n       (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))", "by blast"], ["proof (state)\nthis:\n  mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i + 1)\n       (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>i \\<le> j; mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> i) I;\n     Regex.match (sat \\<sigma> V v) r i j; \\<not> i < j\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i + 1)\n                           (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n                             s))", "qed (auto simp: eps_match)"], ["proof (state)\nthis:\n  mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.lpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i + 1)\n       (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "assume \"enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\""], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "moreover"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "assume [simp]: \"s \\<in> Regex.lpd (sat \\<sigma> V v) i r\" and \"sat \\<sigma> V v (i + 1) (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\""], ["proof (state)\nthis:\n  s \\<in> Regex.lpd (sat \\<sigma> V v) i r\n  sat \\<sigma> V v (i + 1)\n   (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "then"], ["proof (chain)\npicking this:\n  s \\<in> Regex.lpd (sat \\<sigma> V v) i r\n  sat \\<sigma> V v (i + 1)\n   (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)", "obtain j where \"j > i\" \"Regex.match (sat \\<sigma> V v) s (i + 1) j\"\n    \"mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (Suc i)) (subtract (\\<Delta> \\<sigma> (i + 1)) I)\""], ["proof (prove)\nusing this:\n  s \\<in> Regex.lpd (sat \\<sigma> V v) i r\n  sat \\<sigma> V v (i + 1)\n   (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>i < j; Regex.match (sat \\<sigma> V v) s (i + 1) j;\n         mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (Suc i))\n          (subtract (\\<Delta> \\<sigma> (i + 1)) I)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: Suc_le_eq)"], ["proof (state)\nthis:\n  i < j\n  Regex.match (sat \\<sigma> V v) s (i + 1) j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (Suc i))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)\n 2. \\<And>s.\n       \\<lbrakk>enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I;\n        s \\<in> Regex.lpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i + 1)\n         (MatchF (subtract (\\<Delta> \\<sigma> (i + 1)) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "ultimately"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  i < j\n  Regex.match (sat \\<sigma> V v) s (i + 1) j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (Suc i))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)", "show ?L"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> (i + 1)) \\<le> right I\n  i < j\n  Regex.match (sat \\<sigma> V v) s (i + 1) j\n  mem (\\<tau> \\<sigma> j - \\<tau> \\<sigma> (Suc i))\n   (subtract (\\<Delta> \\<sigma> (i + 1)) I)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchF I r)", "by (cases \"right I\")\n      (auto simp: le_diff_conv lpd_match intro!: exI[of _ j] bexI[of _ s])"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchF I r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchF I r)", "qed (auto simp: eps_match intro!: exI[of _ i])"], ["", "lemma sat_MatchP_rec: \"sat \\<sigma> V v i (MatchP I r) \\<longleftrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  i > 0 \\<and> \\<Delta> \\<sigma> i \\<le> right I \\<and> (\\<exists>s \\<in> Regex.rpd (sat \\<sigma> V v) i r. sat \\<sigma> V v (i - 1) (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\"\n  (is \"?L \\<longleftrightarrow> ?R1 \\<or> ?R2\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchP I r) =\n    (mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n     0 < i \\<and>\n     enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n     (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n         sat \\<sigma> V v (i - 1)\n          (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)))", "proof (rule iffI; (elim disjE conjE bexE)?)"], ["proof (state)\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (MatchP I r) \\<Longrightarrow>\n    mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 3. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "assume ?L"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchP I r)\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (MatchP I r) \\<Longrightarrow>\n    mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 3. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> V v i (MatchP I r)", "obtain j where j: \"j \\<le> i\" \"mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\" and \"Regex.match (sat \\<sigma> V v) r j i\""], ["proof (prove)\nusing this:\n  sat \\<sigma> V v i (MatchP I r)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n         Regex.match (sat \\<sigma> V v) r j i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  Regex.match (sat \\<sigma> V v) r j i\n\ngoal (3 subgoals):\n 1. sat \\<sigma> V v i (MatchP I r) \\<Longrightarrow>\n    mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 3. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "then"], ["proof (chain)\npicking this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  Regex.match (sat \\<sigma> V v) r j i", "show \"?R1 \\<or> ?R2\""], ["proof (prove)\nusing this:\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  Regex.match (sat \\<sigma> V v) r j i\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "proof (cases \"j < i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; \\<not> j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "case True"], ["proof (state)\nthis:\n  j < i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; \\<not> j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "with \\<open>Regex.match (sat \\<sigma> V v) r j i\\<close> rpd_match[of j i \"sat \\<sigma> V v\" r]"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) r j i\n  j < i \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r j i =\n  (\\<Squnion> (Regex.match (sat \\<sigma> V v) `\n               Regex.rpd (sat \\<sigma> V v) i r))\n   j (i - 1)\n  j < i", "obtain s where \"s \\<in> Regex.rpd (sat \\<sigma> V v) i r\" \"Regex.match (sat \\<sigma> V v) s j (i - 1)\""], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) r j i\n  j < i \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r j i =\n  (\\<Squnion> (Regex.match (sat \\<sigma> V v) `\n               Regex.rpd (sat \\<sigma> V v) i r))\n   j (i - 1)\n  j < i\n\ngoal (1 subgoal):\n 1. (\\<And>s.\n        \\<lbrakk>s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n         Regex.match (sat \\<sigma> V v) s j (i - 1)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  s \\<in> Regex.rpd (sat \\<sigma> V v) i r\n  Regex.match (sat \\<sigma> V v) s j (i - 1)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; \\<not> j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "with True j"], ["proof (chain)\npicking this:\n  j < i\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  s \\<in> Regex.rpd (sat \\<sigma> V v) i r\n  Regex.match (sat \\<sigma> V v) s j (i - 1)", "have ?R2"], ["proof (prove)\nusing this:\n  j < i\n  j \\<le> i\n  mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I\n  s \\<in> Regex.rpd (sat \\<sigma> V v) i r\n  Regex.match (sat \\<sigma> V v) s j (i - 1)\n\ngoal (1 subgoal):\n 1. 0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "by (cases \"right I\")\n        (auto simp: le_diff_conv le_diff_conv2 intro!: exI[of _ j] elim: le_trans)"], ["proof (state)\nthis:\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i - 1)\n       (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n 2. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; \\<not> j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "then"], ["proof (chain)\npicking this:\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i - 1)\n       (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "show ?thesis"], ["proof (prove)\nusing this:\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i - 1)\n       (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n\ngoal (1 subgoal):\n 1. mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n    0 < i \\<and>\n    enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n    (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "by blast"], ["proof (state)\nthis:\n  mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i - 1)\n       (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n     Regex.match (sat \\<sigma> V v) r j i; \\<not> j < i\\<rbrakk>\n    \\<Longrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n                      0 < i \\<and>\n                      enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n                      (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n                          sat \\<sigma> V v (i - 1)\n                           (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))", "qed (auto simp: eps_match)"], ["proof (state)\nthis:\n  mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) i r \\<or>\n  0 < i \\<and>\n  enat (\\<Delta> \\<sigma> i) \\<le> right I \\<and>\n  (\\<exists>s\\<in>Regex.rpd (sat \\<sigma> V v) i r.\n      sat \\<sigma> V v (i - 1)\n       (MatchP (subtract (\\<Delta> \\<sigma> i) I) s))\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "assume \"enat (\\<Delta> \\<sigma> i) \\<le> right I\""], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "moreover"], ["proof (state)\nthis:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "assume [simp]: \"s \\<in> Regex.rpd (sat \\<sigma> V v) i r\" and \"sat \\<sigma> V v (i - 1) (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\" \"i > 0\""], ["proof (state)\nthis:\n  s \\<in> Regex.rpd (sat \\<sigma> V v) i r\n  sat \\<sigma> V v (i - 1) (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\n  0 < i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "then"], ["proof (chain)\npicking this:\n  s \\<in> Regex.rpd (sat \\<sigma> V v) i r\n  sat \\<sigma> V v (i - 1) (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\n  0 < i", "obtain j where \"j < i\" \"Regex.match (sat \\<sigma> V v) s j (i - 1)\"\n    \"mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j) (subtract (\\<Delta> \\<sigma> i) I)\""], ["proof (prove)\nusing this:\n  s \\<in> Regex.rpd (sat \\<sigma> V v) i r\n  sat \\<sigma> V v (i - 1) (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\n  0 < i\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < i; Regex.match (sat \\<sigma> V v) s j (i - 1);\n         mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n          (subtract (\\<Delta> \\<sigma> i) I)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: gr0_conv_Suc less_Suc_eq_le)"], ["proof (state)\nthis:\n  j < i\n  Regex.match (sat \\<sigma> V v) s j (i - 1)\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\n 2. \\<And>s.\n       \\<lbrakk>0 < i; enat (\\<Delta> \\<sigma> i) \\<le> right I;\n        s \\<in> Regex.rpd (sat \\<sigma> V v) i r;\n        sat \\<sigma> V v (i - 1)\n         (MatchP (subtract (\\<Delta> \\<sigma> i) I) s)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "ultimately"], ["proof (chain)\npicking this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  j < i\n  Regex.match (sat \\<sigma> V v) s j (i - 1)\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)", "show ?L"], ["proof (prove)\nusing this:\n  enat (\\<Delta> \\<sigma> i) \\<le> right I\n  j < i\n  Regex.match (sat \\<sigma> V v) s j (i - 1)\n  mem (\\<tau> \\<sigma> (i - 1) - \\<tau> \\<sigma> j)\n   (subtract (\\<Delta> \\<sigma> i) I)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchP I r)", "by (cases \"right I\")\n      (auto simp: le_diff_conv rpd_match intro!: exI[of _ j] bexI[of _ s])"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchP I r)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>Regex.eps (sat \\<sigma> V v) i r; left I \\<le> 0;\n     enat 0 \\<le> right I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "qed (auto simp: eps_match intro!: exI[of _ i])"], ["", "lemma sat_Since_0: \"sat \\<sigma> V v 0 (Since \\<phi> I \\<psi>) \\<longleftrightarrow> mem 0 I \\<and> sat \\<sigma> V v 0 \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v 0 (Since \\<phi> I \\<psi>) =\n    (mem 0 I \\<and> sat \\<sigma> V v 0 \\<psi>)", "by auto"], ["", "lemma sat_MatchP_0: \"sat \\<sigma> V v 0 (MatchP I r) \\<longleftrightarrow> mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) 0 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v 0 (MatchP I r) =\n    (mem 0 I \\<and> Regex.eps (sat \\<sigma> V v) 0 r)", "by (auto simp: eps_match)"], ["", "lemma sat_Since_point: \"sat \\<sigma> V v i (Since \\<phi> I \\<psi>) \\<Longrightarrow>\n    (\\<And>j. j \\<le> i \\<Longrightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j)) \\<psi>) \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> V v i (Since \\<phi> I \\<psi>);\n     \\<And>j.\n        \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n         sat \\<sigma> V v i\n          (Since \\<phi> (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j))\n            \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto intro: diff_le_self)"], ["", "lemma sat_MatchP_point: \"sat \\<sigma> V v i (MatchP I r) \\<Longrightarrow>\n    (\\<And>j. j \\<le> i \\<Longrightarrow> mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I \\<Longrightarrow> sat \\<sigma> V v i (MatchP (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j)) r) \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> V v i (MatchP I r);\n     \\<And>j.\n        \\<lbrakk>j \\<le> i; mem (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j) I;\n         sat \\<sigma> V v i\n          (MatchP (point (\\<tau> \\<sigma> i - \\<tau> \\<sigma> j))\n            r)\\<rbrakk>\n        \\<Longrightarrow> P\\<rbrakk>\n    \\<Longrightarrow> P", "by (auto intro: diff_le_self)"], ["", "lemma sat_Since_pointD: \"sat \\<sigma> V v i (Since \\<phi> (point t) \\<psi>) \\<Longrightarrow> mem t I \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> V v i (Since \\<phi> (point t) \\<psi>);\n     mem t I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi> I \\<psi>)", "by auto"], ["", "lemma sat_MatchP_pointD: \"sat \\<sigma> V v i (MatchP (point t) r) \\<Longrightarrow> mem t I \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sat \\<sigma> V v i (MatchP (point t) r); mem t I\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i (MatchP I r)", "by auto"], ["", "lemma sat_fv_cong: \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x \\<Longrightarrow>\n    sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "proof (induct \\<phi> arbitrary: V v v' i rule: formula.induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred x1 x2) = sat \\<sigma> V v' i (Pred x1 x2)\n 2. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (formula.Let x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Let x1 x2 x3) =\n                         sat \\<sigma> V v' i (formula.Let x1 x2 x3)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 9. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 10. \\<And>x V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n         \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                          sat \\<sigma> V v' i (Exists x)\nA total of 17 subgoals...", "case (Pred n ts)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (Pred n ts). v ! x = v' ! x\n\ngoal (17 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred x1 x2) = sat \\<sigma> V v' i (Pred x1 x2)\n 2. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (formula.Let x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Let x1 x2 x3) =\n                         sat \\<sigma> V v' i (formula.Let x1 x2 x3)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 9. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 10. \\<And>x V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n         \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                          sat \\<sigma> V v' i (Exists x)\nA total of 17 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred n ts) = sat \\<sigma> V v' i (Pred n ts)", "by (simp cong: map_cong eval_trm_fv_cong[OF Pred[simplified, THEN bspec]] split: option.splits)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred n ts) = sat \\<sigma> V v' i (Pred n ts)\n\ngoal (16 subgoals):\n 1. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (formula.Let x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Let x1 x2 x3) =\n                         sat \\<sigma> V v' i (formula.Let x1 x2 x3)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 8. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 9. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 10. \\<And>x1 x2 x3 x4 x5 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n         \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                          sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (formula.Let x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Let x1 x2 x3) =\n                         sat \\<sigma> V v' i (formula.Let x1 x2 x3)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 8. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 9. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 10. \\<And>x1 x2 x3 x4 x5 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n         \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                          sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\nA total of 16 subgoals...", "case (Let p b \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv b. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i b = sat \\<sigma> ?V ?v' ?i b\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (formula.Let p b \\<phi>). v ! x = v' ! x\n\ngoal (16 subgoals):\n 1. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (formula.Let x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Let x1 x2 x3) =\n                         sat \\<sigma> V v' i (formula.Let x1 x2 x3)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 8. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 9. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 10. \\<And>x1 x2 x3 x4 x5 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n         \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                          sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv b. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i b = sat \\<sigma> ?V ?v' ?i b\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (formula.Let p b \\<phi>). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv b. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i b = sat \\<sigma> ?V ?v' ?i b\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (formula.Let p b \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> \\<psi> v i (formula.Let p b \\<phi>) =\n    sat \\<sigma> \\<psi> v' i (formula.Let p b \\<phi>)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> \\<psi> v i (formula.Let p b \\<phi>) =\n  sat \\<sigma> \\<psi> v' i (formula.Let p b \\<phi>)\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 7. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 8. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 9. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n         \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                          sat \\<sigma> V v' i (Prev x1 x2)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 7. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 8. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 9. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n         \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                          sat \\<sigma> V v' i (Prev x1 x2)\nA total of 15 subgoals...", "case (Eq x1 x2)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (formula.Eq x1 x2). v ! x = v' ! x\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (formula.Eq x1 x2) =\n       sat \\<sigma> V v' i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 7. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 8. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 9. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n         \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                          sat \\<sigma> V v' i (Prev x1 x2)\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv (formula.Eq x1 x2). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv (formula.Eq x1 x2). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (formula.Eq x1 x2) =\n    sat \\<sigma> V v' i (formula.Eq x1 x2)", "unfolding fvi.simps sat.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv_trm x1 \\<union> fv_trm x2. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (eval_trm v x1 = eval_trm v x2) = (eval_trm v' x1 = eval_trm v' x2)", "by (metis UnCI eval_trm_fv_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (formula.Eq x1 x2) =\n  sat \\<sigma> V v' i (formula.Eq x1 x2)\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 3. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 7. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 8. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n         \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                          sat \\<sigma> V v' i (Next x1 x2)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 3. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 7. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 8. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n         \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                          sat \\<sigma> V v' i (Next x1 x2)\nA total of 14 subgoals...", "case (Less x1 x2)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n 2. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 3. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 7. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 8. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n         \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                          sat \\<sigma> V v' i (Next x1 x2)\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)", "unfolding fvi.simps sat.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv_trm x1 \\<union> fv_trm x2. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (eval_trm v x1 < eval_trm v x2) = (eval_trm v' x1 < eval_trm v' x2)", "by (metis UnCI eval_trm_fv_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Less x1 x2) = sat \\<sigma> V v' i (Less x1 x2)\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 2. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 7. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                          sat \\<sigma> V v' i (Since x1 x2 x3)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 2. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 7. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                          sat \\<sigma> V v' i (Since x1 x2 x3)\nA total of 13 subgoals...", "case (LessEq x1 x2)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V v v' i.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       sat \\<sigma> V v i (LessEq x1 x2) =\n       sat \\<sigma> V v' i (LessEq x1 x2)\n 2. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 6. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 7. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                          sat \\<sigma> V v' i (Since x1 x2 x3)\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (LessEq x1 x2) = sat \\<sigma> V v' i (LessEq x1 x2)", "unfolding fvi.simps sat.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv_trm x1 \\<union> fv_trm x2. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (eval_trm v x1 \\<le> eval_trm v x2) =\n    (eval_trm v' x1 \\<le> eval_trm v' x2)", "by (metis UnCI eval_trm_fv_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (LessEq x1 x2) = sat \\<sigma> V v' i (LessEq x1 x2)\n\ngoal (12 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 6. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                          sat \\<sigma> V v' i (Until x1 x2 x3)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 6. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                          sat \\<sigma> V v' i (Until x1 x2 x3)\nA total of 12 subgoals...", "case (Ands l)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> set l; \\<forall>x\\<in>fv ?xa. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?xa = sat \\<sigma> ?V ?v' ?i ?xa\n  \\<forall>x\\<in>fv (Ands l). v ! x = v' ! x\n\ngoal (12 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 6. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                          sat \\<sigma> V v' i (Until x1 x2 x3)\nA total of 12 subgoals...", "have \"\\<And>\\<phi>. \\<phi> \\<in> set l \\<Longrightarrow> sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "fix \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "assume \"\\<phi> \\<in> set l\""], ["proof (state)\nthis:\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<in> set l", "have \"fv \\<phi> \\<subseteq> fv (Ands l)\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. fv \\<phi> \\<subseteq> fv (Ands l)", "using fv_subset_Ands"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> set l\n  ?\\<phi> \\<in> set ?\\<phi>s \\<Longrightarrow>\n  fv ?\\<phi> \\<subseteq> fv (Ands ?\\<phi>s)\n\ngoal (1 subgoal):\n 1. fv \\<phi> \\<subseteq> fv (Ands l)", "by blast"], ["proof (state)\nthis:\n  fv \\<phi> \\<subseteq> fv (Ands l)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "then"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv (Ands l)", "have \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x\""], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv (Ands l)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x", "using Ands.prems"], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv (Ands l)\n  \\<forall>x\\<in>fv (Ands l). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x", "show \"sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "using Ands.hyps \\<open>\\<phi> \\<in> set l\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x\n  \\<lbrakk>?xa \\<in> set l; \\<forall>x\\<in>fv ?xa. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?xa = sat \\<sigma> ?V ?v' ?i ?xa\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>", "by blast"], ["proof (state)\nthis:\n  sat \\<sigma> V v i \\<phi> = sat \\<sigma> V v' i \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  sat \\<sigma> V v i ?\\<phi> = sat \\<sigma> V v' i ?\\<phi>\n\ngoal (12 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>xa V v v' i.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma> V v' i xa;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma> V v' i (Ands x)\n 5. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 6. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 10. \\<And>x1 x2 x3 V v v' i.\n        \\<lbrakk>\\<And>V v v' i.\n                    \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                    sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n         \\<And>V v v' i.\n            \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n            sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n         \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                          sat \\<sigma> V v' i (Until x1 x2 x3)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  sat \\<sigma> V v i ?\\<phi> = sat \\<sigma> V v' i ?\\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  sat \\<sigma> V v i ?\\<phi> = sat \\<sigma> V v' i ?\\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Ands l) = sat \\<sigma> V v' i (Ands l)", "using sat_Ands"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  sat \\<sigma> V v i ?\\<phi> = sat \\<sigma> V v' i ?\\<phi>\n  sat ?\\<sigma> ?V ?v ?i (Ands ?l) =\n  (\\<forall>\\<phi>\\<in>set ?l. sat ?\\<sigma> ?V ?v ?i \\<phi>)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Ands l) = sat \\<sigma> V v' i (Ands l)", "by blast"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Ands l) = sat \\<sigma> V v' i (Ands l)\n\ngoal (11 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 5. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat \\<sigma> V v' i (MatchF x1 x2)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 5. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat \\<sigma> V v' i (MatchF x1 x2)\nA total of 11 subgoals...", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (11 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Exists x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists x) =\n                         sat \\<sigma> V v' i (Exists x)\n 5. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 7. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 9. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat \\<sigma> V v' i (MatchF x1 x2)\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Exists \\<phi>) = sat \\<sigma> V v' i (Exists \\<phi>)", "unfolding sat.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (\\<exists>z. sat \\<sigma> V (z # v) i \\<phi>) =\n    (\\<exists>z. sat \\<sigma> V (z # v') i \\<phi>)", "by (intro iff_exI) (simp add: fvi_Suc nth_Cons')"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Exists \\<phi>) = sat \\<sigma> V v' i (Exists \\<phi>)\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "case (Agg y \\<omega> b f \\<phi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  sat \\<sigma> ?V ?v ?i \\<phi> = sat \\<sigma> ?V ?v' ?i \\<phi>\n  \\<forall>x\\<in>fv (Agg y \\<omega> b f \\<phi>). v ! x = v' ! x\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "have \"v ! y = v' ! y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v ! y = v' ! y", "using Agg.prems"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv (Agg y \\<omega> b f \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. v ! y = v' ! y", "by simp"], ["proof (state)\nthis:\n  v ! y = v' ! y\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "moreover"], ["proof (state)\nthis:\n  v ! y = v' ! y\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "have \"sat \\<sigma> V (zs @ v) i \\<phi> = sat \\<sigma> V (zs @ v') i \\<phi>\" if \"length zs = b\" for zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V (zs @ v) i \\<phi> = sat \\<sigma> V (zs @ v') i \\<phi>", "using that Agg.prems"], ["proof (prove)\nusing this:\n  length zs = b\n  \\<forall>x\\<in>fv (Agg y \\<omega> b f \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V (zs @ v) i \\<phi> = sat \\<sigma> V (zs @ v') i \\<phi>", "by (simp add: Agg.hyps[where v=\"zs @ v\" and v'=\"zs @ v'\"]\n        nth_append fvi_iff_fv(1)[where b=b])"], ["proof (state)\nthis:\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> = sat \\<sigma> V (?zs @ v') i \\<phi>\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "moreover"], ["proof (state)\nthis:\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> = sat \\<sigma> V (?zs @ v') i \\<phi>\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "have \"eval_trm (zs @ v) f = eval_trm (zs @ v') f\" if \"length zs = b\" for zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. eval_trm (zs @ v) f = eval_trm (zs @ v') f", "using that Agg.prems"], ["proof (prove)\nusing this:\n  length zs = b\n  \\<forall>x\\<in>fv (Agg y \\<omega> b f \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. eval_trm (zs @ v) f = eval_trm (zs @ v') f", "by (auto intro!: eval_trm_fv_cong[where v=\"zs @ v\" and v'=\"zs @ v'\"]\n        simp: nth_append fvi_iff_fv(1)[where b=b] fvi_trm_iff_fv_trm[where b=\"length zs\"])"], ["proof (state)\nthis:\n  length ?zs = b \\<Longrightarrow>\n  eval_trm (?zs @ v) f = eval_trm (?zs @ v') f\n\ngoal (10 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 x3 x4 x5 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x5. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x5 = sat \\<sigma> V v' i x5;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 x5). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 x5) =\n                         sat \\<sigma> V v' i (Agg x1 x2 x3 x4 x5)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 6. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 8. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 10. \\<And>x1 x2 V v v' i.\n        \\<lbrakk>\\<And>x2a V v v' i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat \\<sigma> V v' i x2a;\n         \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat \\<sigma> V v' i (MatchP x1 x2)", "ultimately"], ["proof (chain)\npicking this:\n  v ! y = v' ! y\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> = sat \\<sigma> V (?zs @ v') i \\<phi>\n  length ?zs = b \\<Longrightarrow>\n  eval_trm (?zs @ v) f = eval_trm (?zs @ v') f", "show ?case"], ["proof (prove)\nusing this:\n  v ! y = v' ! y\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> = sat \\<sigma> V (?zs @ v') i \\<phi>\n  length ?zs = b \\<Longrightarrow>\n  eval_trm (?zs @ v) f = eval_trm (?zs @ v') f\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>) =\n    sat \\<sigma> V v' i (Agg y \\<omega> b f \\<phi>)", "by (simp cong: conj_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>) =\n  sat \\<sigma> V v' i (Agg y \\<omega> b f \\<phi>)\n\ngoal (9 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "case (MatchF I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   \\<forall>x\\<in>fv ?x2a. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a = sat \\<sigma> ?V ?v' ?i ?x2a\n  \\<forall>x\\<in>fv (MatchF I r). v ! x = v' ! x\n\ngoal (9 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   \\<forall>x\\<in>fv ?x2a. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a = sat \\<sigma> ?V ?v' ?i ?x2a\n  \\<forall>x\\<in>fv (MatchF I r). v ! x = v' ! x", "have \"Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   \\<forall>x\\<in>fv ?x2a. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a = sat \\<sigma> ?V ?v' ?i ?x2a\n  \\<forall>x\\<in>fv (MatchF I r). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r", "by (intro match_fv_cong) (auto simp: fv_regex_alt)"], ["proof (state)\nthis:\n  Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\n\ngoal (9 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchF x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat \\<sigma> V v' i (MatchF x1 x2)\n 9. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r", "show ?case"], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchF I r) = sat \\<sigma> V v' i (MatchF I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchF I r) = sat \\<sigma> V v' i (MatchF I r)\n\ngoal (8 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "case (MatchP I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   \\<forall>x\\<in>fv ?x2a. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a = sat \\<sigma> ?V ?v' ?i ?x2a\n  \\<forall>x\\<in>fv (MatchP I r). v ! x = v' ! x\n\ngoal (8 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   \\<forall>x\\<in>fv ?x2a. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a = sat \\<sigma> ?V ?v' ?i ?x2a\n  \\<forall>x\\<in>fv (MatchP I r). v ! x = v' ! x", "have \"Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   \\<forall>x\\<in>fv ?x2a. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a = sat \\<sigma> ?V ?v' ?i ?x2a\n  \\<forall>x\\<in>fv (MatchP I r). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r", "by (intro match_fv_cong) (auto simp: fv_regex_alt)"], ["proof (state)\nthis:\n  Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\n\ngoal (8 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)\n 8. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>x2a V v v' i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    \\<forall>x\\<in>fv x2a. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat \\<sigma> V v' i x2a;\n        \\<forall>x\\<in>fv (MatchP x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat \\<sigma> V v' i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r", "show ?case"], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchP I r) = sat \\<sigma> V v' i (MatchP I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchP I r) = sat \\<sigma> V v' i (MatchP I r)\n\ngoal (7 subgoals):\n 1. \\<And>x V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x = sat \\<sigma> V v' i x;\n        \\<forall>x\\<in>fv (Neg x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg x) =\n                         sat \\<sigma> V v' i (Neg x)\n 2. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Or x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or x1 x2) =\n                         sat \\<sigma> V v' i (Or x1 x2)\n 3. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (And x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And x1 x2) =\n                         sat \\<sigma> V v' i (And x1 x2)\n 4. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Prev x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 x2) =\n                         sat \\<sigma> V v' i (Prev x1 x2)\n 5. \\<And>x1 x2 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x2. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x2 = sat \\<sigma> V v' i x2;\n        \\<forall>x\\<in>fv (Next x1 x2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 x2) =\n                         sat \\<sigma> V v' i (Next x1 x2)\n 6. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Since x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since x1 x2 x3) =\n                         sat \\<sigma> V v' i (Since x1 x2 x3)\n 7. \\<And>x1 x2 x3 V v v' i.\n       \\<lbrakk>\\<And>V v v' i.\n                   \\<forall>x\\<in>fv x1. v ! x = v' ! x \\<Longrightarrow>\n                   sat \\<sigma> V v i x1 = sat \\<sigma> V v' i x1;\n        \\<And>V v v' i.\n           \\<forall>x\\<in>fv x3. v ! x = v' ! x \\<Longrightarrow>\n           sat \\<sigma> V v i x3 = sat \\<sigma> V v' i x3;\n        \\<forall>x\\<in>fv (Until x1 x2 x3). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until x1 x2 x3) =\n                         sat \\<sigma> V v' i (Until x1 x2 x3)", "qed (auto 10 0 split: nat.splits intro!: iff_exI)"], ["", "lemma match_fv_cong:\n  \"\\<forall>x\\<in>fv_regex r. v!x = v'!x \\<Longrightarrow> Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_regex r. v ! x = v' ! x \\<Longrightarrow>\n    Regex.match (sat \\<sigma> V v) r = Regex.match (sat \\<sigma> V v') r", "by (rule match_fv_cong, rule sat_fv_cong) (auto simp: fv_regex_alt)"], ["", "lemma eps_fv_cong:\n  \"\\<forall>x\\<in>fv_regex r. v!x = v'!x \\<Longrightarrow> Regex.eps (sat \\<sigma> V v) i r = Regex.eps (sat \\<sigma> V v') i r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_regex r. v ! x = v' ! x \\<Longrightarrow>\n    Regex.eps (sat \\<sigma> V v) i r = Regex.eps (sat \\<sigma> V v') i r", "unfolding eps_match"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv_regex r. v ! x = v' ! x \\<Longrightarrow>\n    Regex.match (sat \\<sigma> V v) r i i =\n    Regex.match (sat \\<sigma> V v') r i i", "by (erule match_fv_cong[THEN fun_cong, THEN fun_cong])"], ["", "subsection \\<open>Past-only formulas\\<close>"], ["", "fun past_only :: \"formula \\<Rightarrow> bool\" where\n  \"past_only (Pred _ _) = True\"\n| \"past_only (Eq _ _) = True\"\n| \"past_only (Less _ _) = True\"\n| \"past_only (LessEq _ _) = True\"\n| \"past_only (Let _ \\<alpha> \\<beta>) = (past_only \\<alpha> \\<and> past_only \\<beta>)\"\n| \"past_only (Neg \\<psi>) = past_only \\<psi>\"\n| \"past_only (Or \\<alpha> \\<beta>) = (past_only \\<alpha> \\<and> past_only \\<beta>)\"\n| \"past_only (And \\<alpha> \\<beta>) = (past_only \\<alpha> \\<and> past_only \\<beta>)\"\n| \"past_only (Ands l) = (\\<forall>\\<alpha>\\<in>set l. past_only \\<alpha>)\"\n| \"past_only (Exists \\<psi>) = past_only \\<psi>\"\n| \"past_only (Agg _ _ _ _ \\<psi>) = past_only \\<psi>\"\n| \"past_only (Prev _ \\<psi>) = past_only \\<psi>\"\n| \"past_only (Next _ _) = False\"\n| \"past_only (Since \\<alpha> _ \\<beta>) = (past_only \\<alpha> \\<and> past_only \\<beta>)\"\n| \"past_only (Until \\<alpha> _ \\<beta>) = False\"\n| \"past_only (MatchP _ r) = Regex.pred_regex past_only r\"\n| \"past_only (MatchF _ _) = False\""], ["", "lemma past_only_sat:\n  assumes \"prefix_of \\<pi> \\<sigma>\" \"prefix_of \\<pi> \\<sigma>'\"\n  shows \"i < plen \\<pi> \\<Longrightarrow> dom V = dom V' \\<Longrightarrow>\n     (\\<And>p i. p \\<in> dom V \\<Longrightarrow> i < plen \\<pi> \\<Longrightarrow> the (V p) i = the (V' p) i) \\<Longrightarrow>\n     past_only \\<phi> \\<Longrightarrow> sat \\<sigma> V v i \\<phi> = sat \\<sigma>' V' v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n     \\<And>p i.\n        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n        \\<Longrightarrow> the (V p) i = the (V' p) i;\n     past_only \\<phi>\\<rbrakk>\n    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                      sat \\<sigma>' V' v i \\<phi>", "proof (induction \\<phi> arbitrary: V V' v i)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Pred x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Pred x1 x2) =\n                         sat \\<sigma>' V' v i (Pred x1 x2)\n 2. \\<And>x1 \\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Let x1 \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 4. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 5. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 6. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 8. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 9. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 10. \\<And>\\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Exists \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                          sat \\<sigma>' V' v i (Exists \\<phi>)\nA total of 17 subgoals...", "case (Pred e ts)"], ["proof (state)\nthis:\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Pred e ts)\n\ngoal (17 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Pred x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Pred x1 x2) =\n                         sat \\<sigma>' V' v i (Pred x1 x2)\n 2. \\<And>x1 \\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Let x1 \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 4. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 5. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 6. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 8. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 9. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 10. \\<And>\\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Exists \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                          sat \\<sigma>' V' v i (Exists \\<phi>)\nA total of 17 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "proof (cases \"V e\")"], ["proof (state)\ngoal (2 subgoals):\n 1. V e = None \\<Longrightarrow>\n    sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)\n 2. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "case None"], ["proof (state)\nthis:\n  V e = None\n\ngoal (2 subgoals):\n 1. V e = None \\<Longrightarrow>\n    sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)\n 2. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "then"], ["proof (chain)\npicking this:\n  V e = None", "have \"V' e = None\""], ["proof (prove)\nusing this:\n  V e = None\n\ngoal (1 subgoal):\n 1. V' e = None", "using \\<open>dom V = dom V'\\<close>"], ["proof (prove)\nusing this:\n  V e = None\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. V' e = None", "by auto"], ["proof (state)\nthis:\n  V' e = None\n\ngoal (2 subgoals):\n 1. V e = None \\<Longrightarrow>\n    sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)\n 2. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "with None \\<Gamma>_prefix_conv[OF assms(1,2) Pred(1)]"], ["proof (chain)\npicking this:\n  V e = None\n  \\<Gamma> \\<sigma> i = \\<Gamma> \\<sigma>' i\n  V' e = None", "show ?thesis"], ["proof (prove)\nusing this:\n  V e = None\n  \\<Gamma> \\<sigma> i = \\<Gamma> \\<sigma>' i\n  V' e = None\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "case (Some a)"], ["proof (state)\nthis:\n  V e = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "moreover"], ["proof (state)\nthis:\n  V e = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "obtain a' where \"V' e = Some a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'. V' e = Some a' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Some \\<open>dom V = dom V'\\<close>"], ["proof (prove)\nusing this:\n  V e = Some a\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. (\\<And>a'. V' e = Some a' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  V' e = Some a'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "moreover"], ["proof (state)\nthis:\n  V' e = Some a'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "have \"the (V e) i = the (V' e) i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the (V e) i = the (V' e) i", "using Some Pred(1,3)"], ["proof (prove)\nusing this:\n  V e = Some a\n  i < plen \\<pi>\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n\ngoal (1 subgoal):\n 1. the (V e) i = the (V' e) i", "by (fastforce intro: domI)"], ["proof (state)\nthis:\n  the (V e) i = the (V' e) i\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V e = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "ultimately"], ["proof (chain)\npicking this:\n  V e = Some a\n  V' e = Some a'\n  the (V e) i = the (V' e) i", "show ?thesis"], ["proof (prove)\nusing this:\n  V e = Some a\n  V' e = Some a'\n  the (V e) i = the (V' e) i\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred e ts) = sat \\<sigma>' V' v i (Pred e ts)\n\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Let x1 \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Let x1 \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "case (Let p \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<psi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<psi>\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)\n\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Let x1 \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "let ?V = \"\\<lambda>V \\<sigma>. (V(p \\<mapsto> \\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\""], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Let x1 \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>) =\n    sat \\<sigma>' V' v i (formula.Let p \\<phi> \\<psi>)", "unfolding sat.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma>\n     (V(p \\<mapsto>\n      \\<lambda>i.\n         {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n     v i \\<psi> =\n    sat \\<sigma>'\n     (V'(p \\<mapsto>\n      \\<lambda>i.\n         {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n     v i \\<psi>", "proof (rule Let.IH(2))"], ["proof (state)\ngoal (4 subgoals):\n 1. i < plen \\<pi>\n 2. dom (V(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>})) =\n    dom (V'(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n 3. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i\n 4. past_only \\<psi>", "show \"i < plen \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i < plen \\<pi>", "by fact"], ["proof (state)\nthis:\n  i < plen \\<pi>\n\ngoal (3 subgoals):\n 1. dom (V(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>})) =\n    dom (V'(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n 2. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i\n 3. past_only \\<psi>", "from Let.prems"], ["proof (chain)\npicking this:\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)", "show \"past_only \\<psi>\""], ["proof (prove)\nusing this:\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. past_only \\<psi>", "by simp"], ["proof (state)\nthis:\n  past_only \\<psi>\n\ngoal (2 subgoals):\n 1. dom (V(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>})) =\n    dom (V'(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n 2. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i", "from Let.prems"], ["proof (chain)\npicking this:\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)", "show \"dom (?V V \\<sigma>) = dom (?V V' \\<sigma>')\""], ["proof (prove)\nusing this:\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. dom (V(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>})) =\n    dom (V'(p \\<mapsto>\n         \\<lambda>i.\n            {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))", "by (simp del: fun_upd_apply)"], ["proof (state)\nthis:\n  dom (V(p \\<mapsto>\n       \\<lambda>i.\n          {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>})) =\n  dom (V'(p \\<mapsto>\n       \\<lambda>i.\n          {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n\ngoal (1 subgoal):\n 1. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i", "fix p' i"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i", "assume *: \"p' \\<in> dom (?V V \\<sigma>)\" \"i < plen \\<pi>\""], ["proof (state)\nthis:\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  i < plen \\<pi>\n\ngoal (1 subgoal):\n 1. \\<And>pa i.\n       \\<lbrakk>pa \\<in> dom (V(p \\<mapsto>\n                              \\<lambda>i.\n                                 {v. length v = nfv \\<phi> \\<and>\n                                     sat \\<sigma> V v i \\<phi>}));\n        i < plen \\<pi>\\<rbrakk>\n       \\<Longrightarrow> the ((V(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma> V v i \\<phi>}))\n                               pa)\n                          i =\n                         the ((V'(p \\<mapsto>\n                               \\<lambda>i.\n                                  {v. length v = nfv \\<phi> \\<and>\nsat \\<sigma>' V' v i \\<phi>}))\n                               pa)\n                          i", "show \"the (?V V \\<sigma> p') i = the (?V V' \\<sigma>' p') i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "proof (cases \"p' = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. p' = p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i\n 2. p' \\<noteq> p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "case True"], ["proof (state)\nthis:\n  p' = p\n\ngoal (2 subgoals):\n 1. p' = p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i\n 2. p' \\<noteq> p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "with Let \\<open>i < plen \\<pi>\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<psi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<psi>\n  ia__ < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)\n  i < plen \\<pi>\n  p' = p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<psi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<psi>\n  ia__ < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (formula.Let p \\<phi> \\<psi>)\n  i < plen \\<pi>\n  p' = p\n\ngoal (1 subgoal):\n 1. the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "by auto"], ["proof (state)\nthis:\n  the ((V(p \\<mapsto>\n        \\<lambda>i.\n           {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n        p')\n   i =\n  the ((V'(p \\<mapsto>\n        \\<lambda>i.\n           {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n        p')\n   i\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. p' \\<noteq> p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "case False"], ["proof (state)\nthis:\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. p' \\<noteq> p \\<Longrightarrow>\n    the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "with *"], ["proof (chain)\npicking this:\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  i < plen \\<pi>\n  p' \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  i < plen \\<pi>\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. the ((V(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n          p')\n     i =\n    the ((V'(p \\<mapsto>\n          \\<lambda>i.\n             {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n          p')\n     i", "by (auto intro!: Let.prems(3))"], ["proof (state)\nthis:\n  the ((V(p \\<mapsto>\n        \\<lambda>i.\n           {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n        p')\n   i =\n  the ((V'(p \\<mapsto>\n        \\<lambda>i.\n           {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n        p')\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  the ((V(p \\<mapsto>\n        \\<lambda>i.\n           {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n        p')\n   i =\n  the ((V'(p \\<mapsto>\n        \\<lambda>i.\n           {v. length v = nfv \\<phi> \\<and> sat \\<sigma>' V' v i \\<phi>}))\n        p')\n   i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>) =\n  sat \\<sigma>' V' v i (formula.Let p \\<phi> \\<psi>)\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 8. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 9. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Prev x1 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                          sat \\<sigma>' V' v i (Prev x1 \\<phi>)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 8. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 9. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Prev x1 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                          sat \\<sigma>' V' v i (Prev x1 \\<phi>)\nA total of 15 subgoals...", "case (Ands l)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> set l; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?xa\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?xa = sat \\<sigma>' ?V' ?v ?i ?xa\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Ands l)\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>x V V' v i.\n       \\<lbrakk>\\<And>xa V V' v i.\n                   \\<lbrakk>xa \\<in> set x; i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only xa\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat \\<sigma>' V' v i xa;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Ands x)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat \\<sigma>' V' v i (Ands x)\n 8. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 9. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Prev x1 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                          sat \\<sigma>' V' v i (Prev x1 \\<phi>)\nA total of 15 subgoals...", "with \\<Gamma>_prefix_conv[OF assms]"], ["proof (chain)\npicking this:\n  ?i < plen \\<pi> \\<Longrightarrow>\n  \\<Gamma> \\<sigma> ?i = \\<Gamma> \\<sigma>' ?i\n  \\<lbrakk>?xa \\<in> set l; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?xa\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?xa = sat \\<sigma>' ?V' ?v ?i ?xa\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Ands l)", "show ?case"], ["proof (prove)\nusing this:\n  ?i < plen \\<pi> \\<Longrightarrow>\n  \\<Gamma> \\<sigma> ?i = \\<Gamma> \\<sigma>' ?i\n  \\<lbrakk>?xa \\<in> set l; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?xa\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?xa = sat \\<sigma>' ?V' ?v ?i ?xa\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Ands l)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Ands l) = sat \\<sigma>' V' v i (Ands l)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Ands l) = sat \\<sigma>' V' v i (Ands l)\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Prev x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Prev x1 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Next x1 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                          sat \\<sigma>' V' v i (Next x1 \\<phi>)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Prev x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Prev x1 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Next x1 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                          sat \\<sigma>' V' v i (Next x1 \\<phi>)\nA total of 14 subgoals...", "case (Prev I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Prev I \\<phi>)\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Prev x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Prev x1 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat \\<sigma>' V' v i \\<phi>;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Next x1 \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                          sat \\<sigma>' V' v i (Next x1 \\<phi>)\nA total of 14 subgoals...", "with \\<tau>_prefix_conv[OF assms]"], ["proof (chain)\npicking this:\n  ?i < plen \\<pi> \\<Longrightarrow> \\<tau> \\<sigma> ?i = \\<tau> \\<sigma>' ?i\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Prev I \\<phi>)", "show ?case"], ["proof (prove)\nusing this:\n  ?i < plen \\<pi> \\<Longrightarrow> \\<tau> \\<sigma> ?i = \\<tau> \\<sigma>' ?i\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Prev I \\<phi>)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Prev I \\<phi>) =\n    sat \\<sigma>' V' v i (Prev I \\<phi>)", "by (simp split: nat.split)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Prev I \\<phi>) = sat \\<sigma>' V' v i (Prev I \\<phi>)\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Since \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Since \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "case (Since \\<phi>1 I \\<phi>2)"], ["proof (state)\nthis:\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi>1 =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>1\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi>2 =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>2\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Since \\<phi>1 I \\<phi>2)\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Since \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "with \\<tau>_prefix_conv[OF assms]"], ["proof (chain)\npicking this:\n  ?i < plen \\<pi> \\<Longrightarrow> \\<tau> \\<sigma> ?i = \\<tau> \\<sigma>' ?i\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi>1 =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>1\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi>2 =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>2\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Since \\<phi>1 I \\<phi>2)", "show ?case"], ["proof (prove)\nusing this:\n  ?i < plen \\<pi> \\<Longrightarrow> \\<tau> \\<sigma> ?i = \\<tau> \\<sigma>' ?i\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>1\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi>1 =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>1\n  \\<lbrakk>?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only \\<phi>2\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi>2 =\n                    sat \\<sigma>' ?V' ?v ?i \\<phi>2\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (Since \\<phi>1 I \\<phi>2)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Since \\<phi>1 I \\<phi>2) =\n    sat \\<sigma>' V' v i (Since \\<phi>1 I \\<phi>2)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Since \\<phi>1 I \\<phi>2) =\n  sat \\<sigma>' V' v i (Since \\<phi>1 I \\<phi>2)\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Until \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Until \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "case (MatchP I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> regex.atms r; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?x2a\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a =\n                    sat \\<sigma>' ?V' ?v ?i ?x2a\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (MatchP I r)\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Until \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x2a \\<in> regex.atms r; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?x2a\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a =\n                    sat \\<sigma>' ?V' ?v ?i ?x2a\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (MatchP I r)", "have \"Regex.match (sat \\<sigma> V v) r a b = Regex.match (sat \\<sigma>' V' v) r a b\" if \"b < plen \\<pi>\" for a b"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a \\<in> regex.atms r; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?x2a\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a =\n                    sat \\<sigma>' ?V' ?v ?i ?x2a\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (MatchP I r)\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) r a b =\n    Regex.match (sat \\<sigma>' V' v) r a b", "using that"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x2a \\<in> regex.atms r; ?i < plen \\<pi>; dom ?V = dom ?V';\n   \\<And>p i.\n      \\<lbrakk>p \\<in> dom ?V; i < plen \\<pi>\\<rbrakk>\n      \\<Longrightarrow> the (?V p) i = the (?V' p) i;\n   past_only ?x2a\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a =\n                    sat \\<sigma>' ?V' ?v ?i ?x2a\n  i < plen \\<pi>\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; ?i < plen \\<pi>\\<rbrakk>\n  \\<Longrightarrow> the (V ?p) ?i = the (V' ?p) ?i\n  past_only (MatchP I r)\n  b < plen \\<pi>\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) r a b =\n    Regex.match (sat \\<sigma>' V' v) r a b", "by (intro Regex.match_cong_strong) (auto simp: regex.pred_set)"], ["proof (state)\nthis:\n  ?b < plen \\<pi> \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r ?a ?b =\n  Regex.match (sat \\<sigma>' V' v) r ?a ?b\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Until \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "with \\<tau>_prefix_conv[OF assms] MatchP(2)"], ["proof (chain)\npicking this:\n  ?i < plen \\<pi> \\<Longrightarrow> \\<tau> \\<sigma> ?i = \\<tau> \\<sigma>' ?i\n  i < plen \\<pi>\n  ?b < plen \\<pi> \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r ?a ?b =\n  Regex.match (sat \\<sigma>' V' v) r ?a ?b", "show ?case"], ["proof (prove)\nusing this:\n  ?i < plen \\<pi> \\<Longrightarrow> \\<tau> \\<sigma> ?i = \\<tau> \\<sigma>' ?i\n  i < plen \\<pi>\n  ?b < plen \\<pi> \\<Longrightarrow>\n  Regex.match (sat \\<sigma> V v) r ?a ?b =\n  Regex.match (sat \\<sigma>' V' v) r ?a ?b\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchP I r) = sat \\<sigma>' V' v i (MatchP I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchP I r) = sat \\<sigma>' V' v i (MatchP I r)\n\ngoal (11 subgoals):\n 1. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (formula.Eq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat \\<sigma>' V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Less x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat \\<sigma>' V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v i.\n       \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (LessEq x1 x2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat \\<sigma>' V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Neg \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat \\<sigma>' V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Or \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>1\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat \\<sigma>' V' v i \\<phi>1;\n        \\<And>V V' v i.\n           \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n            \\<And>p i.\n               \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n               \\<Longrightarrow> the (V p) i = the (V' p) i;\n            past_only \\<phi>2\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat \\<sigma>' V' v i \\<phi>2;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (And \\<phi>1 \\<phi>2)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat \\<sigma>' V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Exists \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat \\<sigma>' V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Agg x1 x2 x3 x4 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat \\<sigma>' V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v i.\n       \\<lbrakk>\\<And>V V' v i.\n                   \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                    \\<And>p i.\n                       \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                       \\<Longrightarrow> the (V p) i = the (V' p) i;\n                    past_only \\<phi>\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat \\<sigma>' V' v i \\<phi>;\n        i < plen \\<pi>; dom V = dom V';\n        \\<And>p i.\n           \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n           \\<Longrightarrow> the (V p) i = the (V' p) i;\n        past_only (Next x1 \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat \\<sigma>' V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v i.\n        \\<lbrakk>\\<And>V V' v i.\n                    \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n                     \\<And>p i.\n                        \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                        \\<Longrightarrow> the (V p) i = the (V' p) i;\n                     past_only \\<phi>1\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat \\<sigma>' V' v i \\<phi>1;\n         \\<And>V V' v i.\n            \\<lbrakk>i < plen \\<pi>; dom V = dom V';\n             \\<And>p i.\n                \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n                \\<Longrightarrow> the (V p) i = the (V' p) i;\n             past_only \\<phi>2\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat \\<sigma>' V' v i \\<phi>2;\n         i < plen \\<pi>; dom V = dom V';\n         \\<And>p i.\n            \\<lbrakk>p \\<in> dom V; i < plen \\<pi>\\<rbrakk>\n            \\<Longrightarrow> the (V p) i = the (V' p) i;\n         past_only (Until \\<phi>1 x2 \\<phi>2)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat \\<sigma>' V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 11 subgoals...", "qed auto"], ["", "subsection \\<open>Safe formulas\\<close>"], ["", "fun remove_neg :: \"formula \\<Rightarrow> formula\" where\n  \"remove_neg (Neg \\<phi>) = \\<phi>\"\n| \"remove_neg \\<phi> = \\<phi>\""], ["", "lemma fvi_remove_neg[simp]: \"fvi b (remove_neg \\<phi>) = fvi b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (remove_neg \\<phi>) = fvi b \\<phi>", "by (cases \\<phi>) simp_all"], ["", "lemma partition_cong[fundef_cong]:\n  \"xs = ys \\<Longrightarrow> (\\<And>x. x\\<in>set xs \\<Longrightarrow> f x = g x) \\<Longrightarrow> partition f xs = partition g ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>xs = ys;\n     \\<And>x. x \\<in> set xs \\<Longrightarrow> f x = g x\\<rbrakk>\n    \\<Longrightarrow> partition f xs = partition g ys", "by (induction xs arbitrary: ys) auto"], ["", "lemma size_remove_neg[termination_simp]: \"size (remove_neg \\<phi>) \\<le> size \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (remove_neg \\<phi>) \\<le> size \\<phi>", "by (cases \\<phi>) simp_all"], ["", "fun is_constraint :: \"formula \\<Rightarrow> bool\" where\n  \"is_constraint (Eq t1 t2) = True\"\n| \"is_constraint (Less t1 t2) = True\"\n| \"is_constraint (LessEq t1 t2) = True\"\n| \"is_constraint (Neg (Eq t1 t2)) = True\"\n| \"is_constraint (Neg (Less t1 t2)) = True\"\n| \"is_constraint (Neg (LessEq t1 t2)) = True\"\n| \"is_constraint _ = False\""], ["", "definition safe_assignment :: \"nat set \\<Rightarrow> formula \\<Rightarrow> bool\" where\n  \"safe_assignment X \\<phi> = (case \\<phi> of\n       Eq (Var x) (Var y) \\<Rightarrow> (x \\<notin> X \\<longleftrightarrow> y \\<in> X)\n     | Eq (Var x) t \\<Rightarrow> (x \\<notin> X \\<and> fv_trm t \\<subseteq> X)\n     | Eq t (Var x) \\<Rightarrow> (x \\<notin> X \\<and> fv_trm t \\<subseteq> X)\n     | _ \\<Rightarrow> False)\""], ["", "fun safe_formula :: \"formula \\<Rightarrow> bool\" where\n  \"safe_formula (Eq t1 t2) = (is_Const t1 \\<and> (is_Const t2 \\<or> is_Var t2) \\<or> is_Var t1 \\<and> is_Const t2)\"\n| \"safe_formula (Neg (Eq (Var x) (Var y))) = (x = y)\"\n| \"safe_formula (Less t1 t2) = False\"\n| \"safe_formula (LessEq t1 t2) = False\"\n| \"safe_formula (Pred e ts) = (\\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t)\"\n| \"safe_formula (Let p \\<phi> \\<psi>) = ({0..<nfv \\<phi>} \\<subseteq> fv \\<phi> \\<and> safe_formula \\<phi> \\<and> safe_formula \\<psi>)\"\n| \"safe_formula (Neg \\<phi>) = (fv \\<phi> = {} \\<and> safe_formula \\<phi>)\"\n| \"safe_formula (Or \\<phi> \\<psi>) = (fv \\<psi> = fv \\<phi> \\<and> safe_formula \\<phi> \\<and> safe_formula \\<psi>)\"\n| \"safe_formula (And \\<phi> \\<psi>) = (safe_formula \\<phi> \\<and>\n    (safe_assignment (fv \\<phi>) \\<psi> \\<or> safe_formula \\<psi> \\<or>\n      fv \\<psi> \\<subseteq> fv \\<phi> \\<and> (is_constraint \\<psi> \\<or> (case \\<psi> of Neg \\<psi>' \\<Rightarrow> safe_formula \\<psi>' | _ \\<Rightarrow> False))))\"\n| \"safe_formula (Ands l) = (let (pos, neg) = partition safe_formula l in pos \\<noteq> [] \\<and>\n    list_all safe_formula (map remove_neg neg) \\<and> \\<Union>(set (map fv neg)) \\<subseteq> \\<Union>(set (map fv pos)))\"\n| \"safe_formula (Exists \\<phi>) = (safe_formula \\<phi>)\"\n| \"safe_formula (Agg y \\<omega> b f \\<phi>) = (safe_formula \\<phi> \\<and> y + b \\<notin> fv \\<phi> \\<and> {0..<b} \\<subseteq> fv \\<phi> \\<and> fv_trm f \\<subseteq> fv \\<phi>)\"\n| \"safe_formula (Prev I \\<phi>) = (safe_formula \\<phi>)\"\n| \"safe_formula (Next I \\<phi>) = (safe_formula \\<phi>)\"\n| \"safe_formula (Since \\<phi> I \\<psi>) = (fv \\<phi> \\<subseteq> fv \\<psi> \\<and>\n    (safe_formula \\<phi> \\<or> (case \\<phi> of Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False)) \\<and> safe_formula \\<psi>)\"\n| \"safe_formula (Until \\<phi> I \\<psi>) = (fv \\<phi> \\<subseteq> fv \\<psi> \\<and>\n    (safe_formula \\<phi> \\<or> (case \\<phi> of Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False)) \\<and> safe_formula \\<psi>)\"\n| \"safe_formula (MatchP I r) = Regex.safe_regex fv (\\<lambda>g \\<phi>. safe_formula \\<phi> \\<or>\n     (g = Lax \\<and> (case \\<phi> of Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False))) Past Strict r\"\n| \"safe_formula (MatchF I r) = Regex.safe_regex fv (\\<lambda>g \\<phi>. safe_formula \\<phi> \\<or>\n     (g = Lax \\<and> (case \\<phi> of Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False))) Futu Strict r\""], ["", "abbreviation \"safe_regex \\<equiv> Regex.safe_regex fv (\\<lambda>g \\<phi>. safe_formula \\<phi> \\<or>\n  (g = Lax \\<and> (case \\<phi> of Neg \\<phi>' \\<Rightarrow> safe_formula \\<phi>' | _ \\<Rightarrow> False)))\""], ["", "lemma safe_regex_safe_formula:\n  \"safe_regex m g r \\<Longrightarrow> \\<phi> \\<in> Regex.atms r \\<Longrightarrow> safe_formula \\<phi> \\<or>\n  (\\<exists>\\<psi>. \\<phi> = Neg \\<psi> \\<and> safe_formula \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_regex m g r; \\<phi> \\<in> regex.atms r\\<rbrakk>\n    \\<Longrightarrow> safe_formula \\<phi> \\<or>\n                      (\\<exists>\\<psi>.\n                          \\<phi> = Neg \\<psi> \\<and> safe_formula \\<psi>)", "by (cases g) (auto dest!: safe_regex_safe[rotated] split: formula.splits[where formula=\\<phi>])"], ["", "lemma safe_abbrevs[simp]: \"safe_formula TT\" \"safe_formula FF\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula TT &&& safe_formula FF", "unfolding TT_def FF_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula (Neg (Exists (Neg (formula.Eq (Var 0) (Var 0))))) &&&\n    safe_formula (Exists (Neg (formula.Eq (Var 0) (Var 0))))", "by auto"], ["", "definition safe_neg :: \"formula \\<Rightarrow> bool\" where\n  \"safe_neg \\<phi> \\<longleftrightarrow> (\\<not> safe_formula \\<phi> \\<longrightarrow> safe_formula (remove_neg \\<phi>))\""], ["", "definition atms :: \"formula Regex.regex \\<Rightarrow> formula set\" where\n  \"atms r = (\\<Union>\\<phi> \\<in> Regex.atms r.\n     if safe_formula \\<phi> then {\\<phi>} else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'} | _ \\<Rightarrow> {})\""], ["", "lemma atms_simps[simp]:\n  \"atms (Regex.Skip n) = {}\"\n  \"atms (Regex.Test \\<phi>) = (if safe_formula \\<phi> then {\\<phi>} else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'} | _ \\<Rightarrow> {})\"\n  \"atms (Regex.Plus r s) = atms r \\<union> atms s\"\n  \"atms (Regex.Times r s) = atms r \\<union> atms s\"\n  \"atms (Regex.Star r) = atms r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (atms (regex.Skip n) = {} &&&\n     atms (regex.Test \\<phi>) =\n     (if safe_formula \\<phi> then {\\<phi>}\n      else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n           | _ \\<Rightarrow> {})) &&&\n    atms (regex.Plus r s) = atms r \\<union> atms s &&&\n    atms (regex.Times r s) = atms r \\<union> atms s &&&\n    atms (regex.Star r) = atms r", "unfolding atms_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<Union>\\<phi>\\<in>regex.atms (regex.Skip n).\n         if safe_formula \\<phi> then {\\<phi>}\n         else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n              | _ \\<Rightarrow> {}) =\n     {} &&&\n     (\\<Union>\\<phi>\\<in>regex.atms (regex.Test \\<phi>).\n         if safe_formula \\<phi> then {\\<phi>}\n         else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n              | _ \\<Rightarrow> {}) =\n     (if safe_formula \\<phi> then {\\<phi>}\n      else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n           | _ \\<Rightarrow> {})) &&&\n    (\\<Union>\\<phi>\\<in>regex.atms (regex.Plus r s).\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) =\n    (\\<Union>\\<phi>\\<in>regex.atms r.\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) \\<union>\n    (\\<Union>\\<phi>\\<in>regex.atms s.\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) &&&\n    (\\<Union>\\<phi>\\<in>regex.atms (regex.Times r s).\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) =\n    (\\<Union>\\<phi>\\<in>regex.atms r.\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) \\<union>\n    (\\<Union>\\<phi>\\<in>regex.atms s.\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) &&&\n    (\\<Union>\\<phi>\\<in>regex.atms (regex.Star r).\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {}) =\n    (\\<Union>\\<phi>\\<in>regex.atms r.\n        if safe_formula \\<phi> then {\\<phi>}\n        else case \\<phi> of Neg \\<phi>' \\<Rightarrow> {\\<phi>'}\n             | _ \\<Rightarrow> {})", "by auto"], ["", "lemma finite_atms[simp]: \"finite (atms r)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (atms r)", "by (induct r) (auto split: formula.splits)"], ["", "lemma disjE_Not2: \"P \\<or> Q \\<Longrightarrow> (P \\<Longrightarrow> R) \\<Longrightarrow> (\\<not>P \\<Longrightarrow> Q \\<Longrightarrow> R) \\<Longrightarrow> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<or> Q; P \\<Longrightarrow> R;\n     \\<lbrakk>\\<not> P; Q\\<rbrakk> \\<Longrightarrow> R\\<rbrakk>\n    \\<Longrightarrow> R", "by blast"], ["", "lemma safe_formula_induct[consumes 1, case_names Eq_Const Eq_Var1 Eq_Var2 neq_Var Pred Let\n    And_assign And_safe And_constraint And_Not Ands Neg Or Exists Agg\n    Prev Next Since Not_Since Until Not_Until MatchP MatchF]:\n  assumes \"safe_formula \\<phi>\"\n    and Eq_Const: \"\\<And>c d. P (Eq (Const c) (Const d))\"\n    and Eq_Var1: \"\\<And>c x. P (Eq (Const c) (Var x))\"\n    and Eq_Var2: \"\\<And>c x. P (Eq (Var x) (Const c))\"\n    and neq_Var: \"\\<And>x. P (Neg (Eq (Var x) (Var x)))\"\n    and Pred: \"\\<And>e ts. \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow> P (Pred e ts)\"\n    and Let: \"\\<And>p \\<phi> \\<psi>. {0..<nfv \\<phi>} \\<subseteq> fv \\<phi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Let p \\<phi> \\<psi>)\"\n    and And_assign: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (And \\<phi> \\<psi>)\"\n    and And_safe: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> \\<not> safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow>\n      P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (And \\<phi> \\<psi>)\"\n    and And_constraint: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> \\<not> safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> \\<not> safe_formula \\<psi> \\<Longrightarrow>\n      fv \\<psi> \\<subseteq> fv \\<phi> \\<Longrightarrow> is_constraint \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (And \\<phi> \\<psi>)\"\n    and And_Not: \"\\<And>\\<phi> \\<psi>. safe_formula \\<phi> \\<Longrightarrow> \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>) \\<Longrightarrow> \\<not> safe_formula (Neg \\<psi>) \\<Longrightarrow>\n      fv (Neg \\<psi>) \\<subseteq> fv \\<phi> \\<Longrightarrow> \\<not> is_constraint (Neg \\<psi>) \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (And \\<phi> (Neg \\<psi>))\"\n    and Ands: \"\\<And>l pos neg. (pos, neg) = partition safe_formula l \\<Longrightarrow> pos \\<noteq> [] \\<Longrightarrow>\n      list_all safe_formula pos \\<Longrightarrow> list_all safe_formula (map remove_neg neg) \\<Longrightarrow>\n      (\\<Union>\\<phi>\\<in>set neg. fv \\<phi>) \\<subseteq> (\\<Union>\\<phi>\\<in>set pos. fv \\<phi>) \\<Longrightarrow>\n      list_all P pos \\<Longrightarrow> list_all P (map remove_neg neg) \\<Longrightarrow> P (Ands l)\"\n    and Neg: \"\\<And>\\<phi>. fv \\<phi> = {} \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Neg \\<phi>)\"\n    and Or: \"\\<And>\\<phi> \\<psi>. fv \\<psi> = fv \\<phi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Or \\<phi> \\<psi>)\"\n    and Exists: \"\\<And>\\<phi>. safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Exists \\<phi>)\"\n    and Agg: \"\\<And>y \\<omega> b f \\<phi>. y + b \\<notin> fv \\<phi> \\<Longrightarrow> {0..<b} \\<subseteq> fv \\<phi> \\<Longrightarrow> fv_trm f \\<subseteq> fv \\<phi> \\<Longrightarrow>\n      safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Agg y \\<omega> b f \\<phi>)\"\n    and Prev: \"\\<And>I \\<phi>. safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Prev I \\<phi>)\"\n    and Next: \"\\<And>I \\<phi>. safe_formula \\<phi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P (Next I \\<phi>)\"\n    and Since: \"\\<And>\\<phi> I \\<psi>. fv \\<phi> \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\"\n    and Not_Since: \"\\<And>\\<phi> I \\<psi>. fv (Neg \\<phi>) \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow>\n      \\<not> safe_formula (Neg \\<phi>) \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Since (Neg \\<phi>) I \\<psi> )\"\n    and Until: \"\\<And>\\<phi> I \\<psi>. fv \\<phi> \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\"\n    and Not_Until: \"\\<And>\\<phi> I \\<psi>. fv (Neg \\<phi>) \\<subseteq> fv \\<psi> \\<Longrightarrow> safe_formula \\<phi> \\<Longrightarrow>\n      \\<not> safe_formula (Neg \\<phi>) \\<Longrightarrow> safe_formula \\<psi> \\<Longrightarrow> P \\<phi> \\<Longrightarrow> P \\<psi> \\<Longrightarrow> P (Until (Neg \\<phi>) I \\<psi>)\"\n    and MatchP: \"\\<And>I r. safe_regex Past Strict r \\<Longrightarrow> \\<forall>\\<phi> \\<in> atms r. P \\<phi> \\<Longrightarrow> P (MatchP I r)\"\n    and MatchF: \"\\<And>I r. safe_regex Futu Strict r \\<Longrightarrow> \\<forall>\\<phi> \\<in> atms r. P \\<phi> \\<Longrightarrow> P (MatchF I r)\"\n  shows \"P \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<phi>", "using assms(1)"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. P \\<phi>", "proof (induction \\<phi> rule: safe_formula.induct)"], ["proof (state)\ngoal (51 subgoals):\n 1. \\<And>t1 t2.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       P (formula.Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 4. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 5. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 8. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 9. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\nA total of 51 subgoals...", "case (1 t1 t2)"], ["proof (state)\nthis:\n  safe_formula (formula.Eq t1 t2)\n\ngoal (51 subgoals):\n 1. \\<And>t1 t2.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       P (formula.Eq t1 t2)\n 2. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 4. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 5. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 8. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 9. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\nA total of 51 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula (formula.Eq t1 t2)", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula (formula.Eq t1 t2)\n\ngoal (1 subgoal):\n 1. P (formula.Eq t1 t2)", "using Eq_Const Eq_Var1 Eq_Var2"], ["proof (prove)\nusing this:\n  safe_formula (formula.Eq t1 t2)\n  P (formula.Eq (Const ?c) (Const ?d))\n  P (formula.Eq (Const ?c) (Var ?x))\n  P (formula.Eq (Var ?x) (Const ?c))\n\ngoal (1 subgoal):\n 1. P (formula.Eq t1 t2)", "by (auto simp: trm.is_Const_def trm.is_Var_def)"], ["proof (state)\nthis:\n  P (formula.Eq t1 t2)\n\ngoal (50 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 50 subgoals...", "next"], ["proof (state)\ngoal (50 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 50 subgoals...", "case (9 \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (And \\<phi> \\<psi>)\n\ngoal (50 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 50 subgoals...", "from \\<open>safe_formula (And \\<phi> \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  safe_formula (And \\<phi> \\<psi>)", "have \"safe_formula \\<phi>\""], ["proof (prove)\nusing this:\n  safe_formula (And \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. safe_formula \\<phi>", "by simp"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n\ngoal (50 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 50 subgoals...", "from \\<open>safe_formula (And \\<phi> \\<psi>)\\<close>"], ["proof (chain)\npicking this:\n  safe_formula (And \\<phi> \\<psi>)", "consider\n    (a) \"safe_assignment (fv \\<phi>) \\<psi>\"\n    | (b) \"\\<not> safe_assignment (fv \\<phi>) \\<psi>\" \"safe_formula \\<psi>\"\n    | (c) \"fv \\<psi> \\<subseteq> fv \\<phi>\" \"\\<not> safe_assignment (fv \\<phi>) \\<psi>\" \"\\<not> safe_formula \\<psi>\" \"is_constraint \\<psi>\"\n    | (d) \\<psi>' where \"fv \\<psi> \\<subseteq> fv \\<phi>\" \"\\<not> safe_assignment (fv \\<phi>) \\<psi>\" \"\\<not> safe_formula \\<psi>\" \"\\<not> is_constraint \\<psi>\"\n        \"\\<psi> = Neg \\<psi>'\" \"safe_formula \\<psi>'\""], ["proof (prove)\nusing this:\n  safe_formula (And \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> thesis;\n     \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n      safe_formula \\<psi>\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n      \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n      is_constraint \\<psi>\\<rbrakk>\n     \\<Longrightarrow> thesis;\n     \\<And>\\<psi>'.\n        \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n         \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n         \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n        \\<Longrightarrow> thesis\\<rbrakk>\n    \\<Longrightarrow> thesis", "by (cases \\<psi>) auto"], ["proof (state)\nthis:\n  \\<lbrakk>safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n    safe_formula \\<psi>\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n    \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n    is_constraint \\<psi>\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<And>\\<psi>'.\n      \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n       \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n       \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n       \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (50 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 50 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n    safe_formula \\<psi>\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n    \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n    is_constraint \\<psi>\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<And>\\<psi>'.\n      \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n       \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n       \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n       \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow> ?thesis;\n   \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n    safe_formula \\<psi>\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n    \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n    is_constraint \\<psi>\\<rbrakk>\n   \\<Longrightarrow> ?thesis;\n   \\<And>\\<psi>'.\n      \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n       \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n       \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n       \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n      \\<Longrightarrow> ?thesis\\<rbrakk>\n  \\<Longrightarrow> ?thesis\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "proof cases"], ["proof (state)\ngoal (4 subgoals):\n 1. safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow>\n    P (And \\<phi> \\<psi>)\n 2. \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n     safe_formula \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 3. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 4. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "case a"], ["proof (state)\nthis:\n  safe_assignment (fv \\<phi>) \\<psi>\n\ngoal (4 subgoals):\n 1. safe_assignment (fv \\<phi>) \\<psi> \\<Longrightarrow>\n    P (And \\<phi> \\<psi>)\n 2. \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n     safe_formula \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 3. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 4. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "then"], ["proof (chain)\npicking this:\n  safe_assignment (fv \\<phi>) \\<psi>", "show ?thesis"], ["proof (prove)\nusing this:\n  safe_assignment (fv \\<phi>) \\<psi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "using \"9.IH\" \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "by (intro And_assign)"], ["proof (state)\nthis:\n  P (And \\<phi> \\<psi>)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n     safe_formula \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 2. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 3. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n     safe_formula \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 2. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 3. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "case b"], ["proof (state)\nthis:\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n\ngoal (3 subgoals):\n 1. \\<lbrakk>\\<not> safe_assignment (fv \\<phi>) \\<psi>;\n     safe_formula \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 2. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 3. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "then"], ["proof (chain)\npicking this:\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "using \"9.IH\" \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "by (intro And_safe)"], ["proof (state)\nthis:\n  P (And \\<phi> \\<psi>)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 2. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 2. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "case c"], ["proof (state)\nthis:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  is_constraint \\<psi>\n\ngoal (2 subgoals):\n 1. \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n     \\<not> safe_assignment (fv \\<phi>) \\<psi>; \\<not> safe_formula \\<psi>;\n     is_constraint \\<psi>\\<rbrakk>\n    \\<Longrightarrow> P (And \\<phi> \\<psi>)\n 2. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "then"], ["proof (chain)\npicking this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  is_constraint \\<psi>", "show ?thesis"], ["proof (prove)\nusing this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  is_constraint \\<psi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "using \"9.IH\" \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  is_constraint \\<psi>\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "by (intro And_constraint)"], ["proof (state)\nthis:\n  P (And \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "case d"], ["proof (state)\nthis:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  \\<not> is_constraint \\<psi>\n  \\<psi> = Neg \\<psi>'\n  safe_formula \\<psi>'\n\ngoal (1 subgoal):\n 1. \\<And>\\<psi>'.\n       \\<lbrakk>fv \\<psi> \\<subseteq> fv \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; \\<not> is_constraint \\<psi>;\n        \\<psi> = Neg \\<psi>'; safe_formula \\<psi>'\\<rbrakk>\n       \\<Longrightarrow> P (And \\<phi> \\<psi>)", "then"], ["proof (chain)\npicking this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  \\<not> is_constraint \\<psi>\n  \\<psi> = Neg \\<psi>'\n  safe_formula \\<psi>'", "show ?thesis"], ["proof (prove)\nusing this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  \\<not> is_constraint \\<psi>\n  \\<psi> = Neg \\<psi>'\n  safe_formula \\<psi>'\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "using \"9.IH\" \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  fv \\<psi> \\<subseteq> fv \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  \\<not> safe_formula \\<psi>\n  \\<not> is_constraint \\<psi>\n  \\<psi> = Neg \\<psi>'\n  safe_formula \\<psi>'\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. P (And \\<phi> \\<psi>)", "by (blast intro!: And_Not)"], ["proof (state)\nthis:\n  P (And \\<phi> \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (And \\<phi> \\<psi>)\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "next"], ["proof (state)\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "case (10 l)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> set l; safe_formula ?x\\<rbrakk> \\<Longrightarrow> P ?x\n  \\<lbrakk>?x = partition safe_formula l; (?xa, ?y) = ?x;\n   ?z \\<in> set (map remove_neg ?y); safe_formula ?z\\<rbrakk>\n  \\<Longrightarrow> P ?z\n  safe_formula (Ands l)\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "obtain pos neg where posneg: \"(pos, neg) = partition safe_formula l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pos neg.\n        (pos, neg) = partition safe_formula l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (pos, neg) = partition safe_formula l\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "have \"pos \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "using \"10.prems\" posneg"], ["proof (prove)\nusing this:\n  safe_formula (Ands l)\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "moreover"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "have \"list_all safe_formula pos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all safe_formula pos", "using posneg"], ["proof (prove)\nusing this:\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. list_all safe_formula pos", "by (simp add: list.pred_set)"], ["proof (state)\nthis:\n  list_all safe_formula pos\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "moreover"], ["proof (state)\nthis:\n  list_all safe_formula pos\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "have safe_remove_neg: \"list_all safe_formula (map remove_neg neg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "using \"10.prems\" posneg"], ["proof (prove)\nusing this:\n  safe_formula (Ands l)\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "by auto"], ["proof (state)\nthis:\n  list_all safe_formula (map remove_neg neg)\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "moreover"], ["proof (state)\nthis:\n  list_all safe_formula (map remove_neg neg)\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "have \"list_all P pos\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P pos", "using posneg \"10.IH\"(1)"], ["proof (prove)\nusing this:\n  (pos, neg) = partition safe_formula l\n  \\<lbrakk>?x \\<in> set l; safe_formula ?x\\<rbrakk> \\<Longrightarrow> P ?x\n\ngoal (1 subgoal):\n 1. list_all P pos", "by (simp add: list_all_iff)"], ["proof (state)\nthis:\n  list_all P pos\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "moreover"], ["proof (state)\nthis:\n  list_all P pos\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "have \"list_all P (map remove_neg neg)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all P (map remove_neg neg)", "using \"10.IH\"(2)[OF posneg] safe_remove_neg"], ["proof (prove)\nusing this:\n  \\<lbrakk>(?xa, ?y) = (pos, neg); ?z \\<in> set (map remove_neg ?y);\n   safe_formula ?z\\<rbrakk>\n  \\<Longrightarrow> P ?z\n  list_all safe_formula (map remove_neg neg)\n\ngoal (1 subgoal):\n 1. list_all P (map remove_neg neg)", "by (simp add: list_all_iff)"], ["proof (state)\nthis:\n  list_all P (map remove_neg neg)\n\ngoal (49 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 49 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  pos \\<noteq> []\n  list_all safe_formula pos\n  list_all safe_formula (map remove_neg neg)\n  list_all P pos\n  list_all P (map remove_neg neg)", "show ?case"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n  list_all safe_formula pos\n  list_all safe_formula (map remove_neg neg)\n  list_all P pos\n  list_all P (map remove_neg neg)\n\ngoal (1 subgoal):\n 1. P (Ands l)", "using \"10.IH\"(1) \"10.prems\" Ands posneg"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n  list_all safe_formula pos\n  list_all safe_formula (map remove_neg neg)\n  list_all P pos\n  list_all P (map remove_neg neg)\n  \\<lbrakk>?x \\<in> set l; safe_formula ?x\\<rbrakk> \\<Longrightarrow> P ?x\n  safe_formula (Ands l)\n  \\<lbrakk>(?pos, ?neg) = partition safe_formula ?l; ?pos \\<noteq> [];\n   list_all safe_formula ?pos; list_all safe_formula (map remove_neg ?neg);\n   \\<Union> (fv ` set ?neg) \\<subseteq> \\<Union> (fv ` set ?pos);\n   list_all P ?pos; list_all P (map remove_neg ?neg)\\<rbrakk>\n  \\<Longrightarrow> P (Ands ?l)\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. P (Ands l)", "by simp"], ["proof (state)\nthis:\n  P (Ands l)\n\ngoal (48 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 48 subgoals...", "next"], ["proof (state)\ngoal (48 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 48 subgoals...", "case (15 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n\ngoal (48 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 48 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. P (Since \\<phi> I \\<psi>)", "proof (cases \\<phi>)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Pred x11 x12\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 2. \\<And>x21 x22 x23.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = formula.Let x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 3. \\<And>x31 x32.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = formula.Eq x31 x32\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 4. \\<And>x41 x42.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Less x41 x42\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 5. \\<And>x51 x52.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = LessEq x51 x52\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 6. \\<And>x6.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Neg x6\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 7. \\<And>x71 x72.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Or x71 x72\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 8. \\<And>x81 x82.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = And x81 x82\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 9. \\<And>x9.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Ands x9\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 10. \\<And>x10.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x6.\n            \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n            \\<Longrightarrow> P x6;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Exists x10\\<rbrakk>\n        \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\nA total of 17 subgoals...", "case (Ands l)"], ["proof (state)\nthis:\n  \\<phi> = Ands l\n\ngoal (17 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Pred x11 x12\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 2. \\<And>x21 x22 x23.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = formula.Let x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 3. \\<And>x31 x32.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = formula.Eq x31 x32\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 4. \\<And>x41 x42.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Less x41 x42\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 5. \\<And>x51 x52.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = LessEq x51 x52\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 6. \\<And>x6.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Neg x6\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 7. \\<And>x71 x72.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Or x71 x72\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 8. \\<And>x81 x82.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = And x81 x82\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 9. \\<And>x9.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Ands x9\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 10. \\<And>x10.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x6.\n            \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n            \\<Longrightarrow> P x6;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Exists x10\\<rbrakk>\n        \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<phi> = Ands l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> = Ands l\n\ngoal (1 subgoal):\n 1. P (Since \\<phi> I \\<psi>)", "using \"15.IH\"(1) \"15.IH\"(3) \"15.prems\" Since"], ["proof (prove)\nusing this:\n  \\<phi> = Ands l\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n  \\<lbrakk>fv ?\\<phi> \\<subseteq> fv ?\\<psi>; safe_formula ?\\<phi>;\n   safe_formula ?\\<psi>; P ?\\<phi>; P ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> P (Since ?\\<phi> ?I ?\\<psi>)\n\ngoal (1 subgoal):\n 1. P (Since \\<phi> I \\<psi>)", "by auto"], ["proof (state)\nthis:\n  P (Since \\<phi> I \\<psi>)\n\ngoal (16 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Pred x11 x12\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 2. \\<And>x21 x22 x23.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = formula.Let x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 3. \\<And>x31 x32.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = formula.Eq x31 x32\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 4. \\<And>x41 x42.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Less x41 x42\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 5. \\<And>x51 x52.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>);\n        \\<phi> = LessEq x51 x52\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 6. \\<And>x6.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Neg x6\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 7. \\<And>x71 x72.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Or x71 x72\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 8. \\<And>x81 x82.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = And x81 x82\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 9. \\<And>x10.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Since \\<phi> I \\<psi>); \\<phi> = Exists x10\\<rbrakk>\n       \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\n 10. \\<And>x111 x112 x113 x114 x115.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x6.\n            \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n            \\<Longrightarrow> P x6;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Since \\<phi> I \\<psi>);\n         \\<phi> = Agg x111 x112 x113 x114 x115\\<rbrakk>\n        \\<Longrightarrow> P (Since \\<phi> I \\<psi>)\nA total of 16 subgoals...", "qed (auto 0 3 elim!: disjE_Not2 intro: Since Not_Since)"], ["proof (state)\nthis:\n  P (Since \\<phi> I \\<psi>)\n\ngoal (47 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 47 subgoals...", "(*SLOW*)"], ["proof (state)\nthis:\n  P (Since \\<phi> I \\<psi>)\n\ngoal (47 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 47 subgoals...", "next"], ["proof (state)\ngoal (47 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 47 subgoals...", "case (16 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n\ngoal (47 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 47 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. P (Until \\<phi> I \\<psi>)", "proof (cases \\<phi>)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Pred x11 x12\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 2. \\<And>x21 x22 x23.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = formula.Let x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 3. \\<And>x31 x32.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = formula.Eq x31 x32\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 4. \\<And>x41 x42.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Less x41 x42\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 5. \\<And>x51 x52.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = LessEq x51 x52\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 6. \\<And>x6.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Neg x6\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 7. \\<And>x71 x72.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Or x71 x72\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 8. \\<And>x81 x82.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = And x81 x82\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 9. \\<And>x9.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Ands x9\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 10. \\<And>x10.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x6.\n            \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n            \\<Longrightarrow> P x6;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Exists x10\\<rbrakk>\n        \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\nA total of 17 subgoals...", "case (Ands l)"], ["proof (state)\nthis:\n  \\<phi> = Ands l\n\ngoal (17 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Pred x11 x12\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 2. \\<And>x21 x22 x23.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = formula.Let x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 3. \\<And>x31 x32.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = formula.Eq x31 x32\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 4. \\<And>x41 x42.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Less x41 x42\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 5. \\<And>x51 x52.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = LessEq x51 x52\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 6. \\<And>x6.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Neg x6\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 7. \\<And>x71 x72.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Or x71 x72\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 8. \\<And>x81 x82.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = And x81 x82\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 9. \\<And>x9.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Ands x9\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 10. \\<And>x10.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x6.\n            \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n            \\<Longrightarrow> P x6;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Exists x10\\<rbrakk>\n        \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<phi> = Ands l", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<phi> = Ands l\n\ngoal (1 subgoal):\n 1. P (Until \\<phi> I \\<psi>)", "using \"16.IH\"(1) \"16.IH\"(3) \"16.prems\" Until"], ["proof (prove)\nusing this:\n  \\<phi> = Ands l\n  safe_formula \\<phi> \\<Longrightarrow> P \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow> P \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n  \\<lbrakk>fv ?\\<phi> \\<subseteq> fv ?\\<psi>; safe_formula ?\\<phi>;\n   safe_formula ?\\<psi>; P ?\\<phi>; P ?\\<psi>\\<rbrakk>\n  \\<Longrightarrow> P (Until ?\\<phi> ?I ?\\<psi>)\n\ngoal (1 subgoal):\n 1. P (Until \\<phi> I \\<psi>)", "by auto"], ["proof (state)\nthis:\n  P (Until \\<phi> I \\<psi>)\n\ngoal (16 subgoals):\n 1. \\<And>x11 x12.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Pred x11 x12\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 2. \\<And>x21 x22 x23.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = formula.Let x21 x22 x23\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 3. \\<And>x31 x32.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = formula.Eq x31 x32\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 4. \\<And>x41 x42.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Less x41 x42\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 5. \\<And>x51 x52.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>);\n        \\<phi> = LessEq x51 x52\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 6. \\<And>x6.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Neg x6\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 7. \\<And>x71 x72.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Or x71 x72\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 8. \\<And>x81 x82.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = And x81 x82\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 9. \\<And>x10.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        \\<And>x6.\n           \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n           \\<Longrightarrow> P x6;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (Until \\<phi> I \\<psi>); \\<phi> = Exists x10\\<rbrakk>\n       \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\n 10. \\<And>x111 x112 x113 x114 x115.\n        \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n         \\<And>x6.\n            \\<lbrakk>\\<phi> = Neg x6; safe_formula x6\\<rbrakk>\n            \\<Longrightarrow> P x6;\n         safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n         safe_formula (Until \\<phi> I \\<psi>);\n         \\<phi> = Agg x111 x112 x113 x114 x115\\<rbrakk>\n        \\<Longrightarrow> P (Until \\<phi> I \\<psi>)\nA total of 16 subgoals...", "qed (auto 0 3 elim!: disjE_Not2 intro: Until Not_Until)"], ["proof (state)\nthis:\n  P (Until \\<phi> I \\<psi>)\n\ngoal (46 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 46 subgoals...", "(*SLOW*)"], ["proof (state)\nthis:\n  P (Until \\<phi> I \\<psi>)\n\ngoal (46 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 46 subgoals...", "next"], ["proof (state)\ngoal (46 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 46 subgoals...", "case (17 I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> P ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (MatchP I r)\n\ngoal (46 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 46 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> P ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (MatchP I r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> P ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (MatchP I r)\n\ngoal (1 subgoal):\n 1. P (MatchP I r)", "by (intro MatchP) (auto simp: atms_def dest: safe_regex_safe_formula split: if_splits)"], ["proof (state)\nthis:\n  P (MatchP I r)\n\ngoal (45 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 45 subgoals...", "next"], ["proof (state)\ngoal (45 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 45 subgoals...", "case (18 I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> P ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (MatchF I r)\n\ngoal (45 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 45 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> P ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (MatchF I r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> P ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> P ?x6.0\n  safe_formula (MatchF I r)\n\ngoal (1 subgoal):\n 1. P (MatchF I r)", "by (intro MatchF) (auto simp: atms_def dest: safe_regex_safe_formula split: if_splits)"], ["proof (state)\nthis:\n  P (MatchF I r)\n\ngoal (44 subgoals):\n 1. \\<And>x y.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       P (Neg (formula.Eq (Var x) (Var y)))\n 2. \\<And>t1 t2. safe_formula (Less t1 t2) \\<Longrightarrow> P (Less t1 t2)\n 3. \\<And>t1 t2.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow> P (LessEq t1 t2)\n 4. \\<And>e ts. safe_formula (Pred e ts) \\<Longrightarrow> P (Pred e ts)\n 5. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi> \\<Longrightarrow> P \\<phi>;\n        safe_formula \\<psi> \\<Longrightarrow> P \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> P (formula.Let p \\<phi> \\<psi>)\n 6. \\<And>v va.\n       \\<lbrakk>safe_formula (Pred v va) \\<Longrightarrow> P (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (Pred v va))\n 7. \\<And>v va vb.\n       \\<lbrakk>safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                P (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Let v va vb))\n 8. \\<And>vb va.\n       \\<lbrakk>safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                P (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Const vb) va))\n 9. \\<And>vb vc va.\n       \\<lbrakk>safe_formula (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                P (formula.Eq (Plus vb vc) va);\n        safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n       \\<Longrightarrow> P (Neg (formula.Eq (Plus vb vc) va))\n 10. \\<And>vb vc va.\n        \\<lbrakk>safe_formula\n                  (formula.Eq (Minus vb vc) va) \\<Longrightarrow>\n                 P (formula.Eq (Minus vb vc) va);\n         safe_formula (Neg (formula.Eq (Minus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> P (Neg (formula.Eq (Minus vb vc) va))\nA total of 44 subgoals...", "qed (auto simp: assms)"], ["", "lemma safe_formula_NegD:\n  \"safe_formula (Formula.Neg \\<phi>) \\<Longrightarrow> fv \\<phi> = {} \\<or> (\\<exists>x. \\<phi> = Formula.Eq (Formula.Var x) (Formula.Var x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula (Neg \\<phi>) \\<Longrightarrow>\n    fv \\<phi> = {} \\<or> (\\<exists>x. \\<phi> = formula.Eq (Var x) (Var x))", "by (induct \"Formula.Neg \\<phi>\" rule: safe_formula_induct) auto"], ["", "subsection \\<open>Slicing traces\\<close>"], ["", "qualified"], ["", "fun matches ::\n  \"env \\<Rightarrow> formula \\<Rightarrow> name \\<times> event_data list \\<Rightarrow> bool\" where\n  \"matches v (Pred r ts) e = (fst e = r \\<and> map (eval_trm v) ts = snd e)\"\n| \"matches v (Let p \\<phi> \\<psi>) e =\n    ((\\<exists>v'. matches v' \\<phi> e \\<and> matches v \\<psi> (p, v')) \\<or>\n    fst e \\<noteq> p \\<and> matches v \\<psi> e)\"\n| \"matches v (Eq _ _) e = False\"\n| \"matches v (Less _ _) e = False\"\n| \"matches v (LessEq _ _) e = False\"\n| \"matches v (Neg \\<phi>) e = matches v \\<phi> e\"\n| \"matches v (Or \\<phi> \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\"\n| \"matches v (And \\<phi> \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\"\n| \"matches v (Ands l) e = (\\<exists>\\<phi>\\<in>set l. matches v \\<phi> e)\"\n| \"matches v (Exists \\<phi>) e = (\\<exists>z. matches (z # v) \\<phi> e)\"\n| \"matches v (Agg y \\<omega> b f \\<phi>) e = (\\<exists>zs. length zs = b \\<and> matches (zs @ v) \\<phi> e)\"\n| \"matches v (Prev I \\<phi>) e = matches v \\<phi> e\"\n| \"matches v (Next I \\<phi>) e = matches v \\<phi> e\"\n| \"matches v (Since \\<phi> I \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\"\n| \"matches v (Until \\<phi> I \\<psi>) e = (matches v \\<phi> e \\<or> matches v \\<psi> e)\"\n| \"matches v (MatchP I r) e = (\\<exists>\\<phi> \\<in> Regex.atms r. matches v \\<phi> e)\"\n| \"matches v (MatchF I r) e = (\\<exists>\\<phi> \\<in> Regex.atms r. matches v \\<phi> e)\""], ["", "lemma matches_cong:\n  \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x \\<Longrightarrow> matches v \\<phi> e = matches v' \\<phi> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x \\<Longrightarrow>\n    matches v \\<phi> e = matches v' \\<phi> e", "proof (induct \\<phi> arbitrary: v v' e)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Pred x1 x2) e = matches v' (Pred x1 x2) e\n 2. \\<And>x1 \\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (formula.Let x1 \\<phi>1 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (formula.Let x1 \\<phi>1 \\<phi>2) e =\n                         matches v' (formula.Let x1 \\<phi>1 \\<phi>2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 4. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 5. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 6. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 7. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 8. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 9. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 10. \\<And>\\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                          matches v' (Exists \\<phi>) e\nA total of 17 subgoals...", "case (Pred n ts)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv (Pred n ts). v ! x = v' ! x\n\ngoal (17 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Pred x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Pred x1 x2) e = matches v' (Pred x1 x2) e\n 2. \\<And>x1 \\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (formula.Let x1 \\<phi>1 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (formula.Let x1 \\<phi>1 \\<phi>2) e =\n                         matches v' (formula.Let x1 \\<phi>1 \\<phi>2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 4. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 5. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 6. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 7. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 8. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 9. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 10. \\<And>\\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                          matches v' (Exists \\<phi>) e\nA total of 17 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches v (Pred n ts) e = matches v' (Pred n ts) e", "by (simp cong: map_cong eval_trm_fv_cong[OF Pred(1)[simplified, THEN bspec]])"], ["proof (state)\nthis:\n  matches v (Pred n ts) e = matches v' (Pred n ts) e\n\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (formula.Let x1 \\<phi>1 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (formula.Let x1 \\<phi>1 \\<phi>2) e =\n                         matches v' (formula.Let x1 \\<phi>1 \\<phi>2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 4. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 5. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 7. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 8. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 9. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 10. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                          matches v' (Agg x1 x2 x3 x4 \\<phi>) e\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (formula.Let x1 \\<phi>1 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (formula.Let x1 \\<phi>1 \\<phi>2) e =\n                         matches v' (formula.Let x1 \\<phi>1 \\<phi>2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 4. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 5. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 7. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 8. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 9. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 10. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                          matches v' (Agg x1 x2 x3 x4 \\<phi>) e\nA total of 16 subgoals...", "case (Let p b \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv b. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v b ?e = matches ?v' b ?e\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (formula.Let p b \\<phi>). \\<psi> ! x = v' ! x\n\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (formula.Let x1 \\<phi>1 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (formula.Let x1 \\<phi>1 \\<phi>2) e =\n                         matches v' (formula.Let x1 \\<phi>1 \\<phi>2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 4. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 5. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 7. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 8. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 9. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 10. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                          matches v' (Agg x1 x2 x3 x4 \\<phi>) e\nA total of 16 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv b. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v b ?e = matches ?v' b ?e\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (formula.Let p b \\<phi>). \\<psi> ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv b. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v b ?e = matches ?v' b ?e\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (formula.Let p b \\<phi>). \\<psi> ! x = v' ! x\n\ngoal (1 subgoal):\n 1. matches \\<psi> (formula.Let p b \\<phi>) e =\n    matches v' (formula.Let p b \\<phi>) e", "by (cases e) (auto 11 0)"], ["proof (state)\nthis:\n  matches \\<psi> (formula.Let p b \\<phi>) e =\n  matches v' (formula.Let p b \\<phi>) e\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 8. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 9. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                          matches v' (Prev x1 \\<phi>) e\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 8. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 9. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                          matches v' (Prev x1 \\<phi>) e\nA total of 15 subgoals...", "case (Ands l)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> set l; \\<forall>x\\<in>fv ?xa. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> matches ?v ?xa ?e = matches ?v' ?xa ?e\n  \\<forall>x\\<in>fv (Ands l). v ! x = v' ! x\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 8. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 9. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                          matches v' (Prev x1 \\<phi>) e\nA total of 15 subgoals...", "have \"\\<And>\\<phi>. \\<phi> \\<in> (set l) \\<Longrightarrow> matches v \\<phi> e = matches v' \\<phi> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       matches v \\<phi> e = matches v' \\<phi> e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       matches v \\<phi> e = matches v' \\<phi> e", "fix \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       matches v \\<phi> e = matches v' \\<phi> e", "assume \"\\<phi> \\<in> (set l)\""], ["proof (state)\nthis:\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       matches v \\<phi> e = matches v' \\<phi> e", "then"], ["proof (chain)\npicking this:\n  \\<phi> \\<in> set l", "have \"fv \\<phi> \\<subseteq> fv (Ands l)\""], ["proof (prove)\nusing this:\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. fv \\<phi> \\<subseteq> fv (Ands l)", "using fv_subset_Ands"], ["proof (prove)\nusing this:\n  \\<phi> \\<in> set l\n  ?\\<phi> \\<in> set ?\\<phi>s \\<Longrightarrow>\n  fv ?\\<phi> \\<subseteq> fv (Ands ?\\<phi>s)\n\ngoal (1 subgoal):\n 1. fv \\<phi> \\<subseteq> fv (Ands l)", "by blast"], ["proof (state)\nthis:\n  fv \\<phi> \\<subseteq> fv (Ands l)\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       matches v \\<phi> e = matches v' \\<phi> e", "then"], ["proof (chain)\npicking this:\n  fv \\<phi> \\<subseteq> fv (Ands l)", "have \"\\<forall>x\\<in>fv \\<phi>. v!x = v'!x\""], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv (Ands l)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x", "using Ands.prems"], ["proof (prove)\nusing this:\n  fv \\<phi> \\<subseteq> fv (Ands l)\n  \\<forall>x\\<in>fv (Ands l). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       matches v \\<phi> e = matches v' \\<phi> e", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x", "show \"matches v \\<phi> e = matches v' \\<phi> e\""], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. matches v \\<phi> e = matches v' \\<phi> e", "using Ands.hyps \\<open>\\<phi> \\<in> set l\\<close>"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. v ! x = v' ! x\n  \\<lbrakk>?xa \\<in> set l; \\<forall>x\\<in>fv ?xa. ?v ! x = ?v' ! x\\<rbrakk>\n  \\<Longrightarrow> matches ?v ?xa ?e = matches ?v' ?xa ?e\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. matches v \\<phi> e = matches v' \\<phi> e", "by blast"], ["proof (state)\nthis:\n  matches v \\<phi> e = matches v' \\<phi> e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  matches v ?\\<phi> e = matches v' ?\\<phi> e\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x v v' e.\n       \\<lbrakk>\\<And>xa v v' e.\n                   \\<lbrakk>xa \\<in> set x;\n                    \\<forall>x\\<in>fv xa. v ! x = v' ! x\\<rbrakk>\n                   \\<Longrightarrow> matches v xa e = matches v' xa e;\n        \\<forall>x\\<in>fv (Ands x). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Ands x) e = matches v' (Ands x) e\n 8. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 9. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                          matches v' (Prev x1 \\<phi>) e\nA total of 15 subgoals...", "then"], ["proof (chain)\npicking this:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  matches v ?\\<phi> e = matches v' ?\\<phi> e", "show ?case"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  matches v ?\\<phi> e = matches v' ?\\<phi> e\n\ngoal (1 subgoal):\n 1. matches v (Ands l) e = matches v' (Ands l) e", "by simp"], ["proof (state)\nthis:\n  matches v (Ands l) e = matches v' (Ands l) e\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 8. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                          matches v' (Next x1 \\<phi>) e\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 8. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                          matches v' (Next x1 \\<phi>) e\nA total of 14 subgoals...", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Exists \\<phi>) e =\n                         matches v' (Exists \\<phi>) e\n 8. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 10. \\<And>x1 \\<phi> v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi> e = matches v' \\<phi> e;\n         \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                          matches v' (Next x1 \\<phi>) e\nA total of 14 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. matches v (Exists \\<phi>) e = matches v' (Exists \\<phi>) e", "unfolding matches.simps"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (Exists \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. (\\<exists>z. matches (z # v) \\<phi> e) =\n    (\\<exists>z. matches (z # v') \\<phi> e)", "by (intro iff_exI) (simp add: fvi_Suc nth_Cons')"], ["proof (state)\nthis:\n  matches v (Exists \\<phi>) e = matches v' (Exists \\<phi>) e\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 8. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 10. \\<And>\\<phi>1 x2 \\<phi>2 v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>1.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi>1 e = matches v' \\<phi>1 e;\n         \\<And>v v' e.\n            \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n            matches v \\<phi>2 e = matches v' \\<phi>2 e;\n         \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n            v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                          matches v' (Since \\<phi>1 x2 \\<phi>2) e\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 8. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 10. \\<And>\\<phi>1 x2 \\<phi>2 v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>1.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi>1 e = matches v' \\<phi>1 e;\n         \\<And>v v' e.\n            \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n            matches v \\<phi>2 e = matches v' \\<phi>2 e;\n         \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n            v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                          matches v' (Since \\<phi>1 x2 \\<phi>2) e\nA total of 13 subgoals...", "case (Agg y \\<omega> b f \\<phi>)"], ["proof (state)\nthis:\n  \\<forall>x\\<in>fv \\<phi>. ?v ! x = ?v' ! x \\<Longrightarrow>\n  matches ?v \\<phi> ?e = matches ?v' \\<phi> ?e\n  \\<forall>x\\<in>fv (Agg y \\<omega> b f \\<phi>). v ! x = v' ! x\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 8. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 10. \\<And>\\<phi>1 x2 \\<phi>2 v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>1.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi>1 e = matches v' \\<phi>1 e;\n         \\<And>v v' e.\n            \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n            matches v \\<phi>2 e = matches v' \\<phi>2 e;\n         \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n            v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                          matches v' (Since \\<phi>1 x2 \\<phi>2) e\nA total of 13 subgoals...", "have \"matches (zs @ v) \\<phi> e = matches (zs @ v') \\<phi> e\" if \"length zs = b\" for zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. matches (zs @ v) \\<phi> e = matches (zs @ v') \\<phi> e", "using that Agg.prems"], ["proof (prove)\nusing this:\n  length zs = b\n  \\<forall>x\\<in>fv (Agg y \\<omega> b f \\<phi>). v ! x = v' ! x\n\ngoal (1 subgoal):\n 1. matches (zs @ v) \\<phi> e = matches (zs @ v') \\<phi> e", "by (simp add: Agg.hyps[where v=\"zs @ v\" and v'=\"zs @ v'\"]\n        nth_append fvi_iff_fv(1)[where b=b])"], ["proof (state)\nthis:\n  length ?zs = b \\<Longrightarrow>\n  matches (?zs @ v) \\<phi> e = matches (?zs @ v') \\<phi> e\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x1 x2 x3 x4 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Agg x1 x2 x3 x4 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Agg x1 x2 x3 x4 \\<phi>) e =\n                         matches v' (Agg x1 x2 x3 x4 \\<phi>) e\n 8. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 9. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 10. \\<And>\\<phi>1 x2 \\<phi>2 v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>1.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi>1 e = matches v' \\<phi>1 e;\n         \\<And>v v' e.\n            \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n            matches v \\<phi>2 e = matches v' \\<phi>2 e;\n         \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n            v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                          matches v' (Since \\<phi>1 x2 \\<phi>2) e\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  length ?zs = b \\<Longrightarrow>\n  matches (?zs @ v) \\<phi> e = matches (?zs @ v') \\<phi> e", "show ?case"], ["proof (prove)\nusing this:\n  length ?zs = b \\<Longrightarrow>\n  matches (?zs @ v) \\<phi> e = matches (?zs @ v') \\<phi> e\n\ngoal (1 subgoal):\n 1. matches v (Agg y \\<omega> b f \\<phi>) e =\n    matches v' (Agg y \\<omega> b f \\<phi>) e", "by auto"], ["proof (state)\nthis:\n  matches v (Agg y \\<omega> b f \\<phi>) e =\n  matches v' (Agg y \\<omega> b f \\<phi>) e\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (formula.Eq x1 x2).\n          v ! x = v' ! x \\<Longrightarrow>\n       matches v (formula.Eq x1 x2) e = matches v' (formula.Eq x1 x2) e\n 2. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (Less x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (Less x1 x2) e = matches v' (Less x1 x2) e\n 3. \\<And>x1 x2 v v' e.\n       \\<forall>x\\<in>fv (LessEq x1 x2). v ! x = v' ! x \\<Longrightarrow>\n       matches v (LessEq x1 x2) e = matches v' (LessEq x1 x2) e\n 4. \\<And>\\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Neg \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Neg \\<phi>) e =\n                         matches v' (Neg \\<phi>) e\n 5. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Or \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Or \\<phi>1 \\<phi>2) e =\n                         matches v' (Or \\<phi>1 \\<phi>2) e\n 6. \\<And>\\<phi>1 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (And \\<phi>1 \\<phi>2). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (And \\<phi>1 \\<phi>2) e =\n                         matches v' (And \\<phi>1 \\<phi>2) e\n 7. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Prev x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Prev x1 \\<phi>) e =\n                         matches v' (Prev x1 \\<phi>) e\n 8. \\<And>x1 \\<phi> v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi> e = matches v' \\<phi> e;\n        \\<forall>x\\<in>fv (Next x1 \\<phi>). v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Next x1 \\<phi>) e =\n                         matches v' (Next x1 \\<phi>) e\n 9. \\<And>\\<phi>1 x2 \\<phi>2 v v' e.\n       \\<lbrakk>\\<And>v v' e.\n                   \\<forall>x\\<in>fv \\<phi>1.\n                      v ! x = v' ! x \\<Longrightarrow>\n                   matches v \\<phi>1 e = matches v' \\<phi>1 e;\n        \\<And>v v' e.\n           \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n           matches v \\<phi>2 e = matches v' \\<phi>2 e;\n        \\<forall>x\\<in>fv (Since \\<phi>1 x2 \\<phi>2).\n           v ! x = v' ! x\\<rbrakk>\n       \\<Longrightarrow> matches v (Since \\<phi>1 x2 \\<phi>2) e =\n                         matches v' (Since \\<phi>1 x2 \\<phi>2) e\n 10. \\<And>\\<phi>1 x2 \\<phi>2 v v' e.\n        \\<lbrakk>\\<And>v v' e.\n                    \\<forall>x\\<in>fv \\<phi>1.\n                       v ! x = v' ! x \\<Longrightarrow>\n                    matches v \\<phi>1 e = matches v' \\<phi>1 e;\n         \\<And>v v' e.\n            \\<forall>x\\<in>fv \\<phi>2. v ! x = v' ! x \\<Longrightarrow>\n            matches v \\<phi>2 e = matches v' \\<phi>2 e;\n         \\<forall>x\\<in>fv (Until \\<phi>1 x2 \\<phi>2).\n            v ! x = v' ! x\\<rbrakk>\n        \\<Longrightarrow> matches v (Until \\<phi>1 x2 \\<phi>2) e =\n                          matches v' (Until \\<phi>1 x2 \\<phi>2) e\nA total of 12 subgoals...", "qed (auto 9 0 simp add: nth_Cons' fv_regex_alt)"], ["", "abbreviation relevant_events where \"relevant_events \\<phi> S \\<equiv> {e. S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}}\""], ["", "lemma sat_slice_strong:\n  assumes \"v \\<in> S\" \"dom V = dom V'\"\n    \"\\<And>p v i. p \\<in> dom V \\<Longrightarrow> (p, v) \\<in> relevant_events \\<phi> S \\<Longrightarrow> v \\<in> the (V p) i \\<longleftrightarrow> v \\<in> the (V' p) i\"\n  shows \"relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E \\<Longrightarrow>\n    sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relevant_events \\<phi> S - {e. fst e \\<in> dom V}\n    \\<subseteq> E \\<Longrightarrow>\n    sat \\<sigma> V v i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V; (?p, ?v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. relevant_events \\<phi> S - {e. fst e \\<in> dom V}\n    \\<subseteq> E \\<Longrightarrow>\n    sat \\<sigma> V v i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "proof (induction \\<phi> arbitrary: V V' v S i)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Pred x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Pred x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Pred x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Pred x1 x2)\n 2. \\<And>x1 \\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (formula.Let x1 \\<phi>1 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (formula.Let x1 \\<phi>1 \\<phi>2)\n                   S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Let x1 \\<phi>1 \\<phi>2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 4. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 8. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 9. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 10. \\<And>\\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Exists \\<phi>)\nA total of 17 subgoals...", "case (Pred r ts)"], ["proof (state)\nthis:\n  relevant_events (Pred r ts) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Pred r ts) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (17 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Pred x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Pred x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Pred x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Pred x1 x2)\n 2. \\<And>x1 \\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (formula.Let x1 \\<phi>1 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (formula.Let x1 \\<phi>1 \\<phi>2)\n                   S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Let x1 \\<phi>1 \\<phi>2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 4. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 8. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 9. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 10. \\<And>\\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Exists \\<phi>)\nA total of 17 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Pred r ts)", "proof (cases \"V r\")"], ["proof (state)\ngoal (2 subgoals):\n 1. V r = None \\<Longrightarrow>\n    sat \\<sigma> V v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Pred r ts)\n 2. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "case None"], ["proof (state)\nthis:\n  V r = None\n\ngoal (2 subgoals):\n 1. V r = None \\<Longrightarrow>\n    sat \\<sigma> V v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Pred r ts)\n 2. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "then"], ["proof (chain)\npicking this:\n  V r = None", "have \"V' r = None\""], ["proof (prove)\nusing this:\n  V r = None\n\ngoal (1 subgoal):\n 1. V' r = None", "using \\<open>dom V = dom V'\\<close>"], ["proof (prove)\nusing this:\n  V r = None\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. V' r = None", "by auto"], ["proof (state)\nthis:\n  V' r = None\n\ngoal (2 subgoals):\n 1. V r = None \\<Longrightarrow>\n    sat \\<sigma> V v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Pred r ts)\n 2. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "with None Pred(1,2)"], ["proof (chain)\npicking this:\n  V r = None\n  relevant_events (Pred r ts) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  V' r = None", "show ?thesis"], ["proof (prove)\nusing this:\n  V r = None\n  relevant_events (Pred r ts) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  V' r = None\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Pred r ts)", "by (auto simp: domIff dest!: subsetD)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred r ts) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (Pred r ts)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "case (Some a)"], ["proof (state)\nthis:\n  V r = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "moreover"], ["proof (state)\nthis:\n  V r = Some a\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "obtain a' where \"V' r = Some a'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a'. V' r = Some a' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Some \\<open>dom V = dom V'\\<close>"], ["proof (prove)\nusing this:\n  V r = Some a\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. (\\<And>a'. V' r = Some a' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  V' r = Some a'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "moreover"], ["proof (state)\nthis:\n  V' r = Some a'\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "have \"(map (eval_trm v) ts \\<in> the (V r) i) = (map (eval_trm v) ts \\<in> the (V' r) i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (map (eval_trm v) ts \\<in> the (V r) i) =\n    (map (eval_trm v) ts \\<in> the (V' r) i)", "using Some Pred(2,4)"], ["proof (prove)\nusing this:\n  V r = Some a\n  v \\<in> S\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Pred r ts) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. (map (eval_trm v) ts \\<in> the (V r) i) =\n    (map (eval_trm v) ts \\<in> the (V' r) i)", "by (fastforce intro: domI)"], ["proof (state)\nthis:\n  (map (eval_trm v) ts \\<in> the (V r) i) =\n  (map (eval_trm v) ts \\<in> the (V' r) i)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       V r = Some a \\<Longrightarrow>\n       sat \\<sigma> V v i (Pred r ts) =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        (Pred r ts)", "ultimately"], ["proof (chain)\npicking this:\n  V r = Some a\n  V' r = Some a'\n  (map (eval_trm v) ts \\<in> the (V r) i) =\n  (map (eval_trm v) ts \\<in> the (V' r) i)", "show ?thesis"], ["proof (prove)\nusing this:\n  V r = Some a\n  V' r = Some a'\n  (map (eval_trm v) ts \\<in> the (V r) i) =\n  (map (eval_trm v) ts \\<in> the (V' r) i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Pred r ts) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Pred r ts)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred r ts) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (Pred r ts)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Pred r ts) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (Pred r ts)\n\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (formula.Let x1 \\<phi>1 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (formula.Let x1 \\<phi>1 \\<phi>2)\n                   S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "next"], ["proof (state)\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (formula.Let x1 \\<phi>1 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (formula.Let x1 \\<phi>1 \\<phi>2)\n                   S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "case (Let p \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<psi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (16 subgoals):\n 1. \\<And>x1 \\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (formula.Let x1 \\<phi>1 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (formula.Let x1 \\<phi>1 \\<phi>2)\n                   S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (formula.Let x1 \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Let x1 \\<phi>1 \\<phi>2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 4. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 7. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 8. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 9. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 10. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Agg x1 x2 x3 x4 \\<phi>)\nA total of 16 subgoals...", "from Let.prems"], ["proof (chain)\npicking this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)", "show ?case"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (formula.Let p \\<phi> \\<psi>)", "unfolding sat.simps"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma>\n     (V(p \\<mapsto>\n      \\<lambda>i.\n         {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n     v i \\<psi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n     (V'(p \\<mapsto>\n      \\<lambda>i.\n         {v. length v = nfv \\<phi> \\<and>\n             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n              \\<phi>}))\n     v i \\<psi>", "proof (intro Let(2)[of S], goal_cases relevant v dom V)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> relevant_events \\<psi> S -\n                      {e. fst e\n                          \\<in> dom (V(p \\<mapsto>\n                                     \\<lambda>i.\n  {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))}\n                      \\<subseteq> E\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> v \\<in> S\n 3. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> dom (V(p \\<mapsto>\n                           \\<lambda>i.\n                              {v. length v = nfv \\<phi> \\<and>\n                                  sat \\<sigma> V v i \\<phi>})) =\n                      dom (V'(p \\<mapsto>\n                           \\<lambda>i.\n                              {v. length v = nfv \\<phi> \\<and>\n                                  sat (map_\\<Gamma>\n  (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                                   V' v i \\<phi>}))\n 4. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            (pa, v)\n            \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        pa \\<in> dom (V(p \\<mapsto>\n                      \\<lambda>i.\n                         {v. length v = nfv \\<phi> \\<and>\n                             sat \\<sigma> V v i \\<phi>}));\n        (pa, v) \\<in> relevant_events \\<psi> S\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the ((V(p \\<mapsto>\n  \\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n  pa)\n                                   i) =\n                         (v \\<in> the ((V'(p \\<mapsto>\n  \\<lambda>i.\n     {v. length v = nfv \\<phi> \\<and>\n         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n          \\<phi>}))\n  pa)\n                                   i)", "case (V p' v' i)"], ["proof (state)\nthis:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S\n\ngoal (4 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> relevant_events \\<psi> S -\n                      {e. fst e\n                          \\<in> dom (V(p \\<mapsto>\n                                     \\<lambda>i.\n  {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))}\n                      \\<subseteq> E\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> v \\<in> S\n 3. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> dom (V(p \\<mapsto>\n                           \\<lambda>i.\n                              {v. length v = nfv \\<phi> \\<and>\n                                  sat \\<sigma> V v i \\<phi>})) =\n                      dom (V'(p \\<mapsto>\n                           \\<lambda>i.\n                              {v. length v = nfv \\<phi> \\<and>\n                                  sat (map_\\<Gamma>\n  (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                                   V' v i \\<phi>}))\n 4. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            (pa, v)\n            \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        pa \\<in> dom (V(p \\<mapsto>\n                      \\<lambda>i.\n                         {v. length v = nfv \\<phi> \\<and>\n                             sat \\<sigma> V v i \\<phi>}));\n        (pa, v) \\<in> relevant_events \\<psi> S\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the ((V(p \\<mapsto>\n  \\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\n  pa)\n                                   i) =\n                         (v \\<in> the ((V'(p \\<mapsto>\n  \\<lambda>i.\n     {v. length v = nfv \\<phi> \\<and>\n         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n          \\<phi>}))\n  pa)\n                                   i)", "then"], ["proof (chain)\npicking this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S", "show ?case"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S\n\ngoal (1 subgoal):\n 1. (v' \\<in> the ((V(p \\<mapsto>\n                    \\<lambda>i.\n                       {v. length v = nfv \\<phi> \\<and>\n                           sat \\<sigma> V v i \\<phi>}))\n                    p')\n               i) =\n    (v' \\<in> the ((V'(p \\<mapsto>\n                    \\<lambda>i.\n                       {v. length v = nfv \\<phi> \\<and>\n                           sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                 \\<sigma>)\n                            V' v i \\<phi>}))\n                    p')\n               i)", "proof (cases \"p' = p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' = p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)", "case [simp]: True"], ["proof (state)\nthis:\n  p' = p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' = p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)", "with V"], ["proof (chain)\npicking this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S\n  p' = p", "show ?thesis"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S\n  p' = p\n\ngoal (1 subgoal):\n 1. (v' \\<in> the ((V(p \\<mapsto>\n                    \\<lambda>i.\n                       {v. length v = nfv \\<phi> \\<and>\n                           sat \\<sigma> V v i \\<phi>}))\n                    p')\n               i) =\n    (v' \\<in> the ((V'(p \\<mapsto>\n                    \\<lambda>i.\n                       {v. length v = nfv \\<phi> \\<and>\n                           sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                 \\<sigma>)\n                            V' v i \\<phi>}))\n                    p')\n               i)", "unfolding fun_upd_apply eqTrueI[OF True] if_True option.sel mem_Collect_eq"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a)\n  S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}\n  True\n\ngoal (1 subgoal):\n 1. (length v' = nfv \\<phi> \\<and> sat \\<sigma> V v' i \\<phi>) =\n    (length v' = nfv \\<phi> \\<and>\n     sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v' i \\<phi>)", "proof (intro ex_cong conj_cong refl Let(1)[where\n        S=\"{v'. (\\<exists>v \\<in> S. matches v \\<psi> (p, v'))}\" and V=V],\n        goal_cases relevant' v' dom' V')"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> relevant_events \\<phi>\n                       {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')} -\n                      {e. fst e \\<in> dom V}\n                      \\<subseteq> E\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> v' \\<in> {v'.\n                                \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n 3. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> dom V = dom V'\n 4. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            S \\<inter>\n            {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n            {}\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        p' \\<in> dom (\\<lambda>a.\n                         if a = p\n                         then Some\n                               (\\<lambda>i.\n                                   {v. length v = nfv \\<phi> \\<and>\n sat \\<sigma> V v i \\<phi>})\n                         else V a);\n        S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n        length v' = nfv \\<phi>; pa \\<in> dom V;\n        (pa, v)\n        \\<in> relevant_events \\<phi>\n               {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i)", "case relevant'"], ["proof (state)\nthis:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a)\n  S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}\n  True\n  length v' = nfv \\<phi>\n\ngoal (4 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> relevant_events \\<phi>\n                       {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')} -\n                      {e. fst e \\<in> dom V}\n                      \\<subseteq> E\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> v' \\<in> {v'.\n                                \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n 3. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> dom V = dom V'\n 4. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            S \\<inter>\n            {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n            {}\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        p' \\<in> dom (\\<lambda>a.\n                         if a = p\n                         then Some\n                               (\\<lambda>i.\n                                   {v. length v = nfv \\<phi> \\<and>\n sat \\<sigma> V v i \\<phi>})\n                         else V a);\n        S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n        length v' = nfv \\<phi>; pa \\<in> dom V;\n        (pa, v)\n        \\<in> relevant_events \\<phi>\n               {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i)", "then"], ["proof (chain)\npicking this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a)\n  S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}\n  True\n  length v' = nfv \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p' \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a)\n  S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}\n  True\n  length v' = nfv \\<phi>\n\ngoal (1 subgoal):\n 1. relevant_events \\<phi>\n     {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')} -\n    {e. fst e \\<in> dom V}\n    \\<subseteq> E", "by (elim subset_trans[rotated]) (auto simp: set_eq_iff)"], ["proof (state)\nthis:\n  relevant_events \\<phi> {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')} -\n  {e. fst e \\<in> dom V}\n  \\<subseteq> E\n\ngoal (3 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> v' \\<in> {v'.\n                                \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> dom V = dom V'\n 3. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            S \\<inter>\n            {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n            {}\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        p' \\<in> dom (\\<lambda>a.\n                         if a = p\n                         then Some\n                               (\\<lambda>i.\n                                   {v. length v = nfv \\<phi> \\<and>\n sat \\<sigma> V v i \\<phi>})\n                         else V a);\n        S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n        length v' = nfv \\<phi>; pa \\<in> dom V;\n        (pa, v)\n        \\<in> relevant_events \\<phi>\n               {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> v' \\<in> {v'.\n                                \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n     S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n     length v' = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> dom V = dom V'\n 3. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            S \\<inter>\n            {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n            {}\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        p' \\<in> dom (\\<lambda>a.\n                         if a = p\n                         then Some\n                               (\\<lambda>i.\n                                   {v. length v = nfv \\<phi> \\<and>\n sat \\<sigma> V v i \\<phi>})\n                         else V a);\n        S \\<inter> {v. matches v \\<psi> (p', v')} \\<noteq> {}; True;\n        length v' = nfv \\<phi>; pa \\<in> dom V;\n        (pa, v)\n        \\<in> relevant_events \\<phi>\n               {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i)", "case (V' p' v' i)"], ["proof (state)\nthis:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p'__\n  \\<in> dom (\\<lambda>a.\n                if a = p\n                then Some\n                      (\\<lambda>i.\n                          {v. length v = nfv \\<phi> \\<and>\n                              sat \\<sigma> V v i \\<phi>})\n                else V a)\n  S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}\n  True\n  length v'__ = nfv \\<phi>\n  p' \\<in> dom V\n  (p', v')\n  \\<in> relevant_events \\<phi>\n         {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n\ngoal (3 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p'__\n     \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a);\n     S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}; True;\n     length v'__ = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> v'__\n                      \\<in> {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p'__\n     \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a);\n     S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}; True;\n     length v'__ = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> dom V = dom V'\n 3. \\<And>pa v i.\n       \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>pa v i.\n           \\<lbrakk>pa \\<in> dom V;\n            S \\<inter>\n            {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n            {}\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                             (v \\<in> the (V' pa) i);\n        p'__\n        \\<in> dom (\\<lambda>a.\n                      if a = p\n                      then Some\n                            (\\<lambda>i.\n                                {v. length v = nfv \\<phi> \\<and>\n                                    sat \\<sigma> V v i \\<phi>})\n                      else V a);\n        S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}; True;\n        length v'__ = nfv \\<phi>; pa \\<in> dom V;\n        (pa, v)\n        \\<in> relevant_events \\<phi>\n               {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\\<rbrakk>\n       \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i)", "then"], ["proof (chain)\npicking this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p'__\n  \\<in> dom (\\<lambda>a.\n                if a = p\n                then Some\n                      (\\<lambda>i.\n                          {v. length v = nfv \\<phi> \\<and>\n                              sat \\<sigma> V v i \\<phi>})\n                else V a)\n  S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}\n  True\n  length v'__ = nfv \\<phi>\n  p' \\<in> dom V\n  (p', v')\n  \\<in> relevant_events \\<phi>\n         {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}", "show ?case"], ["proof (prove)\nusing this:\n  relevant_events (formula.Let p \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   S \\<inter> {v. matches v (formula.Let p \\<phi> \\<psi>) (?p, ?v)} \\<noteq>\n   {}\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n  p'__\n  \\<in> dom (\\<lambda>a.\n                if a = p\n                then Some\n                      (\\<lambda>i.\n                          {v. length v = nfv \\<phi> \\<and>\n                              sat \\<sigma> V v i \\<phi>})\n                else V a)\n  S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}\n  True\n  length v'__ = nfv \\<phi>\n  p' \\<in> dom V\n  (p', v')\n  \\<in> relevant_events \\<phi>\n         {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n\ngoal (1 subgoal):\n 1. (v' \\<in> the (V p') i) = (v' \\<in> the (V' p') i)", "by (intro V(4)) (auto simp: set_eq_iff)"], ["proof (state)\nthis:\n  (v' \\<in> the (V p') i) = (v' \\<in> the (V' p') i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p'__\n     \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a);\n     S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}; True;\n     length v'__ = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> v'__\n                      \\<in> {v'. \\<exists>v\\<in>S. matches v \\<psi> (p, v')}\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         S \\<inter>\n         {va. matches va (formula.Let p \\<phi> \\<psi>) (pa, v)} \\<noteq>\n         {}\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p'__\n     \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a);\n     S \\<inter> {v. matches v \\<psi> (p'__, v'__)} \\<noteq> {}; True;\n     length v'__ = nfv \\<phi>\\<rbrakk>\n    \\<Longrightarrow> dom V = dom V'", "qed auto"], ["proof (state)\nthis:\n  (v' \\<in> the ((V(p \\<mapsto>\n                  \\<lambda>i.\n                     {v. length v = nfv \\<phi> \\<and>\n                         sat \\<sigma> V v i \\<phi>}))\n                  p')\n             i) =\n  (v' \\<in> the ((V'(p \\<mapsto>\n                  \\<lambda>i.\n                     {v. length v = nfv \\<phi> \\<and>\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i \\<phi>}))\n                  p')\n             i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)", "case False"], ["proof (state)\nthis:\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) = (v \\<in> the (V' pa) i);\n     p' \\<in> dom (V(p \\<mapsto>\n                   \\<lambda>i.\n                      {v. length v = nfv \\<phi> \\<and>\n                          sat \\<sigma> V v i \\<phi>}));\n     (p', v') \\<in> relevant_events \\<psi> S; p' \\<noteq> p\\<rbrakk>\n    \\<Longrightarrow> (v' \\<in> the ((V(p \\<mapsto>\n\\<lambda>i. {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))\np')\n                                 i) =\n                      (v' \\<in> the ((V'(p \\<mapsto>\n\\<lambda>i.\n   {v. length v = nfv \\<phi> \\<and>\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n        \\<phi>}))\np')\n                                 i)", "with V(2,3,5,6)"], ["proof (chain)\npicking this:\n  v \\<in> S\n  dom V = dom V'\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S\n  p' \\<noteq> p", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> S\n  dom V = dom V'\n  p' \\<in> dom (V(p \\<mapsto>\n                \\<lambda>i.\n                   {v. length v = nfv \\<phi> \\<and>\n                       sat \\<sigma> V v i \\<phi>}))\n  (p', v') \\<in> relevant_events \\<psi> S\n  p' \\<noteq> p\n\ngoal (1 subgoal):\n 1. (v' \\<in> the ((V(p \\<mapsto>\n                    \\<lambda>i.\n                       {v. length v = nfv \\<phi> \\<and>\n                           sat \\<sigma> V v i \\<phi>}))\n                    p')\n               i) =\n    (v' \\<in> the ((V'(p \\<mapsto>\n                    \\<lambda>i.\n                       {v. length v = nfv \\<phi> \\<and>\n                           sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                 \\<sigma>)\n                            V' v i \\<phi>}))\n                    p')\n               i)", "unfolding fun_upd_apply eq_False[THEN iffD2, OF False] if_False"], ["proof (prove)\nusing this:\n  v \\<in> S\n  dom V = dom V'\n  p' \\<in> dom (\\<lambda>a.\n                   if a = p\n                   then Some\n                         (\\<lambda>i.\n                             {v. length v = nfv \\<phi> \\<and>\n                                 sat \\<sigma> V v i \\<phi>})\n                   else V a)\n  (p', v') \\<in> relevant_events \\<psi> S\n  \\<not> False\n\ngoal (1 subgoal):\n 1. (v' \\<in> the (V p') i) = (v' \\<in> the (V' p') i)", "by (intro V(4)) (auto simp: False)"], ["proof (state)\nthis:\n  (v' \\<in> the ((V(p \\<mapsto>\n                  \\<lambda>i.\n                     {v. length v = nfv \\<phi> \\<and>\n                         sat \\<sigma> V v i \\<phi>}))\n                  p')\n             i) =\n  (v' \\<in> the ((V'(p \\<mapsto>\n                  \\<lambda>i.\n                     {v. length v = nfv \\<phi> \\<and>\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i \\<phi>}))\n                  p')\n             i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (v' \\<in> the ((V(p \\<mapsto>\n                  \\<lambda>i.\n                     {v. length v = nfv \\<phi> \\<and>\n                         sat \\<sigma> V v i \\<phi>}))\n                  p')\n             i) =\n  (v' \\<in> the ((V'(p \\<mapsto>\n                  \\<lambda>i.\n                     {v. length v = nfv \\<phi> \\<and>\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i \\<phi>}))\n                  p')\n             i)\n\ngoal (3 subgoals):\n 1. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> relevant_events \\<psi> S -\n                      {e. fst e\n                          \\<in> dom (V(p \\<mapsto>\n                                     \\<lambda>i.\n  {v. length v = nfv \\<phi> \\<and> sat \\<sigma> V v i \\<phi>}))}\n                      \\<subseteq> E\n 2. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> v \\<in> S\n 3. \\<lbrakk>relevant_events (formula.Let p \\<phi> \\<psi>) S -\n             {e. fst e \\<in> dom V}\n             \\<subseteq> E;\n     v \\<in> S; dom V = dom V';\n     \\<And>pa v i.\n        \\<lbrakk>pa \\<in> dom V;\n         (pa, v)\n         \\<in> relevant_events (formula.Let p \\<phi> \\<psi>) S\\<rbrakk>\n        \\<Longrightarrow> (v \\<in> the (V pa) i) =\n                          (v \\<in> the (V' pa) i)\\<rbrakk>\n    \\<Longrightarrow> dom (V(p \\<mapsto>\n                           \\<lambda>i.\n                              {v. length v = nfv \\<phi> \\<and>\n                                  sat \\<sigma> V v i \\<phi>})) =\n                      dom (V'(p \\<mapsto>\n                           \\<lambda>i.\n                              {v. length v = nfv \\<phi> \\<and>\n                                  sat (map_\\<Gamma>\n  (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                                   V' v i \\<phi>}))", "qed (auto simp: dom_def)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (formula.Let p \\<phi> \\<psi>)\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 8. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 9. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Prev x1 \\<phi>)\nA total of 15 subgoals...", "next"], ["proof (state)\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 8. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 9. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Prev x1 \\<phi>)\nA total of 15 subgoals...", "case (Or \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<psi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (Or \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Or \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (15 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Or \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Or \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Or \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Or \\<phi>1 \\<phi>2)\n 6. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 7. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 8. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 9. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Prev x1 \\<phi>)\nA total of 15 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Or \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Or \\<phi> \\<psi>)", "using Or.IH[of S V v V'] Or.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   v \\<in> S; dom V = dom V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     V' v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   v \\<in> S; dom V = dom V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<psi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     V' v ?i \\<psi>\n  relevant_events (Or \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Or \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Or \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Or \\<phi> \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Or \\<phi> \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Or \\<phi> \\<psi>)\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 6. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 7. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Next x1 \\<phi>)\nA total of 14 subgoals...", "next"], ["proof (state)\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 6. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 7. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Next x1 \\<phi>)\nA total of 14 subgoals...", "case (And \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<psi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (And \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (And \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (14 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (And \\<phi>1 \\<phi>2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (And \\<phi>1 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (And \\<phi>1 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (And \\<phi>1 \\<phi>2)\n 6. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 7. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 8. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 10. \\<And>x1 \\<phi> V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi> S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n         relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Next x1 \\<phi>)\nA total of 14 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (And \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (And \\<phi> \\<psi>)", "using And.IH[of S V v V'] And.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   v \\<in> S; dom V = dom V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     V' v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   v \\<in> S; dom V = dom V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<psi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     V' v ?i \\<psi>\n  relevant_events (And \\<phi> \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (And \\<phi> \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (And \\<phi> \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (And \\<phi> \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (And \\<phi> \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (And \\<phi> \\<psi>)\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 7. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "next"], ["proof (state)\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 7. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "case (Ands l)"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<in> set l;\n   relevant_events ?xa ?S - {e. fst e \\<in> dom ?V} \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V; (p, v) \\<in> relevant_events ?xa ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?xa =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i ?xa\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Ands l) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 7. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "obtain \"relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\" \"v \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>relevant_events (Ands l) S - {e. fst e \\<in> dom V}\n              \\<subseteq> E;\n      v \\<in> S\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Ands.prems(1) Ands.prems(2)"], ["proof (prove)\nusing this:\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>relevant_events (Ands l) S - {e. fst e \\<in> dom V}\n              \\<subseteq> E;\n      v \\<in> S\\<rbrakk>\n     \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 7. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "then"], ["proof (chain)\npicking this:\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S", "have \"{e. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}} - {e. fst e \\<in> dom V} \\<subseteq> E\""], ["proof (prove)\nusing this:\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n\ngoal (1 subgoal):\n 1. relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E", "by simp"], ["proof (state)\nthis:\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 7. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "have \"\\<And>\\<phi>. \\<phi> \\<in> set l \\<Longrightarrow> sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "fix \\<phi>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "assume \"\\<phi> \\<in> set l\""], ["proof (state)\nthis:\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "have \"relevant_events \\<phi> S = {e. S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. relevant_events \\<phi> S = relevant_events \\<phi> S", "by simp"], ["proof (state)\nthis:\n  relevant_events \\<phi> S = relevant_events \\<phi> S\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "have \"{e. S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}} \\<subseteq> {e. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}}\" (is \"?A \\<subseteq> ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. relevant_events \\<phi> S \\<subseteq> relevant_events (Ands l) S", "proof (rule subsetI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> relevant_events \\<phi> S \\<Longrightarrow>\n       x \\<in> relevant_events (Ands l) S", "fix e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> relevant_events \\<phi> S \\<Longrightarrow>\n       x \\<in> relevant_events (Ands l) S", "assume \"e \\<in> ?A\""], ["proof (state)\nthis:\n  e \\<in> relevant_events \\<phi> S\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> relevant_events \\<phi> S \\<Longrightarrow>\n       x \\<in> relevant_events (Ands l) S", "then"], ["proof (chain)\npicking this:\n  e \\<in> relevant_events \\<phi> S", "have \"S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}\""], ["proof (prove)\nusing this:\n  e \\<in> relevant_events \\<phi> S\n\ngoal (1 subgoal):\n 1. S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}", "by blast"], ["proof (state)\nthis:\n  S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> relevant_events \\<phi> S \\<Longrightarrow>\n       x \\<in> relevant_events (Ands l) S", "moreover"], ["proof (state)\nthis:\n  S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> relevant_events \\<phi> S \\<Longrightarrow>\n       x \\<in> relevant_events (Ands l) S", "have \"S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}", "obtain v where \"v \\<in> S\" \"matches v \\<phi> e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> S; matches v \\<phi> e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using calculation"], ["proof (prove)\nusing this:\n  S \\<inter> {v. matches v \\<phi> e} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>v \\<in> S; matches v \\<phi> e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  v \\<in> S\n  matches v \\<phi> e\n\ngoal (1 subgoal):\n 1. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}", "then"], ["proof (chain)\npicking this:\n  v \\<in> S\n  matches v \\<phi> e", "show ?thesis"], ["proof (prove)\nusing this:\n  v \\<in> S\n  matches v \\<phi> e\n\ngoal (1 subgoal):\n 1. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}", "using \\<open>\\<phi> \\<in> set l\\<close>"], ["proof (prove)\nusing this:\n  v \\<in> S\n  matches v \\<phi> e\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> relevant_events \\<phi> S \\<Longrightarrow>\n       x \\<in> relevant_events (Ands l) S", "then"], ["proof (chain)\npicking this:\n  S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}", "show \"e \\<in> ?B\""], ["proof (prove)\nusing this:\n  S \\<inter> {v. matches v (Ands l) e} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. e \\<in> relevant_events (Ands l) S", "by blast"], ["proof (state)\nthis:\n  e \\<in> relevant_events (Ands l) S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  relevant_events \\<phi> S \\<subseteq> relevant_events (Ands l) S\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "then"], ["proof (chain)\npicking this:\n  relevant_events \\<phi> S \\<subseteq> relevant_events (Ands l) S", "have \"relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E\""], ["proof (prove)\nusing this:\n  relevant_events \\<phi> S \\<subseteq> relevant_events (Ands l) S\n\ngoal (1 subgoal):\n 1. relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E", "using Ands.prems(1)"], ["proof (prove)\nusing this:\n  relevant_events \\<phi> S \\<subseteq> relevant_events (Ands l) S\n  relevant_events (Ands l) S - {e. fst e \\<in> dom V} \\<subseteq> E\n\ngoal (1 subgoal):\n 1. relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E", "by auto"], ["proof (state)\nthis:\n  relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E\n\ngoal (1 subgoal):\n 1. \\<And>\\<phi>.\n       \\<phi> \\<in> set l \\<Longrightarrow>\n       sat \\<sigma> V v i \\<phi> =\n       sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "then"], ["proof (chain)\npicking this:\n  relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E", "show \"sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>\""], ["proof (prove)\nusing this:\n  relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "using Ands.prems(2,3) \\<open>\\<phi> \\<in> set l\\<close>"], ["proof (prove)\nusing this:\n  relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<phi> \\<in> set l\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>", "by (intro Ands.IH[of \\<phi> S V v V' i] Ands.prems(4)) auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  sat \\<sigma> V v i ?\\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i ?\\<phi>\n\ngoal (13 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x V V' v S i.\n       \\<lbrakk>\\<And>xa V V' v S i.\n                   \\<lbrakk>xa \\<in> set x;\n                    relevant_events xa S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events xa S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i xa =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i xa;\n        relevant_events (Ands x) S - {e. fst e \\<in> dom V} \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Ands x) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Ands x) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Ands x)\n 6. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 7. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 9. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Since \\<phi>1 x2 \\<phi>2)\nA total of 13 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Ands l) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (Ands l)", "using \\<open>\\<And>\\<phi>. \\<phi> \\<in> set l \\<Longrightarrow> sat \\<sigma> V v i \\<phi> = sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>\\<close> sat_Ands"], ["proof (prove)\nusing this:\n  ?\\<phi> \\<in> set l \\<Longrightarrow>\n  sat \\<sigma> V v i ?\\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i ?\\<phi>\n  sat ?\\<sigma> ?V ?v ?i (Ands ?l) =\n  (\\<forall>\\<phi>\\<in>set ?l. sat ?\\<sigma> ?V ?v ?i \\<phi>)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Ands l) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (Ands l)", "by blast"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Ands l) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (Ands l)\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 6. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "next"], ["proof (state)\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 6. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "case (Exists \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 6. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "have \"sat \\<sigma> V (z # v) i \\<phi> = sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (z # v) i \\<phi>\" for z"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V (z # v) i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (z # v) i\n     \\<phi>", "using Exists.prems(1-3)"], ["proof (prove)\nusing this:\n  relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V (z # v) i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (z # v) i\n     \\<phi>", "by (intro Exists.IH[where S=\"{z # v | v. v \\<in> S}\"] Exists.prems(4)) auto"], ["proof (state)\nthis:\n  sat \\<sigma> V (?z # v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (?z # v) i\n   \\<phi>\n\ngoal (12 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Exists \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Exists \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Exists \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Exists \\<phi>)\n 6. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 8. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 10. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n        \\<lbrakk>\\<And>V V' v S i.\n                    \\<lbrakk>relevant_events \\<phi>1 S -\n                             {e. fst e \\<in> dom V}\n                             \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n         \\<And>V V' v S i.\n            \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n             v \\<in> S; dom V = dom V';\n             \\<And>p v i.\n                \\<lbrakk>p \\<in> dom V;\n                 (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n                \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                  (v \\<in> the (V' p) i)\\<rbrakk>\n            \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                              sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                    \\<sigma>)\n                               V' v i \\<phi>2;\n         relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n         {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v)\n             \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (Until \\<phi>1 x2 \\<phi>2)\nA total of 12 subgoals...", "then"], ["proof (chain)\npicking this:\n  sat \\<sigma> V (?z # v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (?z # v) i\n   \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  sat \\<sigma> V (?z # v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (?z # v) i\n   \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Exists \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Exists \\<phi>)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Exists \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Exists \\<phi>)\n\ngoal (11 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchF x1 x2)\nA total of 11 subgoals...", "next"], ["proof (state)\ngoal (11 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchF x1 x2)\nA total of 11 subgoals...", "case (Agg y \\<omega> b f \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Agg y \\<omega> b f \\<phi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Agg y \\<omega> b f \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (11 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchF x1 x2)\nA total of 11 subgoals...", "have \"sat \\<sigma> V (zs @ v) i \\<phi> = sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (zs @ v) i \\<phi>\" if \"length zs = b\" for zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V (zs @ v) i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (zs @ v) i\n     \\<phi>", "using that Agg.prems(1-3)"], ["proof (prove)\nusing this:\n  length zs = b\n  relevant_events (Agg y \\<omega> b f \\<phi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V (zs @ v) i \\<phi> =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (zs @ v) i\n     \\<phi>", "by (intro Agg.IH[where S=\"{zs @ v | v. v \\<in> S}\"] Agg.prems(4)) auto"], ["proof (state)\nthis:\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (?zs @ v) i\n   \\<phi>\n\ngoal (11 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 x3 x4 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Agg x1 x2 x3 x4 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Agg x1 x2 x3 x4 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Agg x1 x2 x3 x4 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Agg x1 x2 x3 x4 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 7. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 9. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchF x1 x2)\nA total of 11 subgoals...", "then"], ["proof (chain)\npicking this:\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (?zs @ v) i\n   \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  length ?zs = b \\<Longrightarrow>\n  sat \\<sigma> V (?zs @ v) i \\<phi> =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' (?zs @ v) i\n   \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Agg y \\<omega> b f \\<phi>)", "by (simp cong: conj_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Agg y \\<omega> b f \\<phi>)\n\ngoal (10 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 9. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (10 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 9. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchP x1 x2)", "case (Prev I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Prev I \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Prev I \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (10 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Prev x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Prev x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Prev x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Prev x1 \\<phi>)\n 6. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 8. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 9. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 10. \\<And>x1 x2 V V' v S i.\n        \\<lbrakk>\\<And>x2a V V' v S i.\n                    \\<lbrakk>x2a \\<in> regex.atms x2;\n                     relevant_events x2a S - {e. fst e \\<in> dom V}\n                     \\<subseteq> E;\n                     v \\<in> S; dom V = dom V';\n                     \\<And>p v i.\n                        \\<lbrakk>p \\<in> dom V;\n                         (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                        \\<Longrightarrow> (v \\<in> the (V p) i) =\n    (v \\<in> the (V' p) i)\\<rbrakk>\n                    \\<Longrightarrow> sat \\<sigma> V v i x2a =\nsat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n         relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n         \\<subseteq> E;\n         v \\<in> S; dom V = dom V';\n         \\<And>p v i.\n            \\<lbrakk>p \\<in> dom V;\n             (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n            \\<Longrightarrow> (v \\<in> the (V p) i) =\n                              (v \\<in> the (V' p) i)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                          sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                \\<sigma>)\n                           V' v i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Prev I \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Prev I \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Prev I \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Prev I \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Prev I \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Prev I \\<phi>)", "by (auto cong: nat.case_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Prev I \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Prev I \\<phi>)\n\ngoal (9 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 8. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 9. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 8. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 9. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "case (Next I \\<phi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Next I \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Next I \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (9 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 \\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Next x1 \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Next x1 \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Next x1 \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Next x1 \\<phi>)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 7. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 8. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 9. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Next I \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Next I \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  relevant_events (Next I \\<phi>) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Next I \\<phi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Next I \\<phi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Next I \\<phi>)", "by simp"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Next I \\<phi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Next I \\<phi>)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 7. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 8. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 7. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 8. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "case (Since \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<psi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (Since \\<phi> I \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Since \\<phi> I \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (8 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Since \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Since \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Since \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Since \\<phi>1 x2 \\<phi>2)\n 6. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 7. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 8. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Since \\<phi> I \\<psi>)", "using Since.IH[of S V] Since.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   ?v \\<in> S; dom V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   ?v \\<in> S; dom V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<psi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (Since \\<phi> I \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Since \\<phi> I \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Since \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Since \\<phi> I \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Since \\<phi> I \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Since \\<phi> I \\<psi>)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 7. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 7. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "case (Until \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  \\<lbrakk>relevant_events \\<phi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<phi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> ?S - {e. fst e \\<in> dom ?V}\n           \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V;\n       (p, v) \\<in> relevant_events \\<psi> ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (Until \\<phi> I \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Until \\<phi> I \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (7 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>\\<phi>1 x2 \\<phi>2 V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi>1 S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi>1 S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi>1 =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>1;\n        \\<And>V V' v S i.\n           \\<lbrakk>relevant_events \\<phi>2 S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n            v \\<in> S; dom V = dom V';\n            \\<And>p v i.\n               \\<lbrakk>p \\<in> dom V;\n                (p, v) \\<in> relevant_events \\<phi>2 S\\<rbrakk>\n               \\<Longrightarrow> (v \\<in> the (V p) i) =\n                                 (v \\<in> the (V' p) i)\\<rbrakk>\n           \\<Longrightarrow> sat \\<sigma> V v i \\<phi>2 =\n                             sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                                   \\<sigma>)\n                              V' v i \\<phi>2;\n        relevant_events (Until \\<phi>1 x2 \\<phi>2) S -\n        {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v)\n            \\<in> relevant_events (Until \\<phi>1 x2 \\<phi>2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Until \\<phi>1 x2 \\<phi>2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Until \\<phi>1 x2 \\<phi>2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 7. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Until \\<phi> I \\<psi>)", "using Until.IH[of S V] Until.prems"], ["proof (prove)\nusing this:\n  \\<lbrakk>relevant_events \\<phi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   ?v \\<in> S; dom V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V ?v ?i \\<phi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<phi>\n  \\<lbrakk>relevant_events \\<psi> S - {e. fst e \\<in> dom V} \\<subseteq> E;\n   ?v \\<in> S; dom V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom V; (p, v) \\<in> relevant_events \\<psi> S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> V ?v ?i \\<psi> =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i \\<psi>\n  relevant_events (Until \\<phi> I \\<psi>) S - {e. fst e \\<in> dom V}\n  \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (Until \\<phi> I \\<psi>) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (Until \\<phi> I \\<psi>) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (Until \\<phi> I \\<psi>)", "by (auto simp: Collect_disj_eq Int_Un_distrib subset_iff)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (Until \\<phi> I \\<psi>) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n   (Until \\<phi> I \\<psi>)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "case (MatchP I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   relevant_events ?x2a ?S - {e. fst e \\<in> dom ?V} \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V; (p, v) \\<in> relevant_events ?x2a ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i ?x2a\n  relevant_events (MatchP I r) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (MatchP I r) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "from MatchP.prems(1-3)"], ["proof (chain)\npicking this:\n  relevant_events (MatchP I r) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'", "have \"Regex.match (sat \\<sigma> V v) r = Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v) r\""], ["proof (prove)\nusing this:\n  relevant_events (MatchP I r) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) r =\n    Regex.match\n     (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v) r", "by (intro Regex.match_fv_cong MatchP(1)[of _ S V v] MatchP.prems(4)) auto"], ["proof (state)\nthis:\n  Regex.match (sat \\<sigma> V v) r =\n  Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v)\n   r\n\ngoal (6 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)\n 6. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchP x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchP x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchP x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchP x1 x2)", "then"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) r =\n  Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v)\n   r", "show ?case"], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) r =\n  Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v)\n   r\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchP I r) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (MatchP I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchP I r) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (MatchP I r)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)", "case (MatchF I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x2a \\<in> regex.atms r;\n   relevant_events ?x2a ?S - {e. fst e \\<in> dom ?V} \\<subseteq> E;\n   ?v \\<in> ?S; dom ?V = dom ?V';\n   \\<And>p v i.\n      \\<lbrakk>p \\<in> dom ?V; (p, v) \\<in> relevant_events ?x2a ?S\\<rbrakk>\n      \\<Longrightarrow> (v \\<in> the (?V p) i) =\n                        (v \\<in> the (?V' p) i)\\<rbrakk>\n  \\<Longrightarrow> sat \\<sigma> ?V ?v ?i ?x2a =\n                    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>)\n                     ?V' ?v ?i ?x2a\n  relevant_events (MatchF I r) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n  \\<lbrakk>?p \\<in> dom V;\n   (?p, ?v) \\<in> relevant_events (MatchF I r) S\\<rbrakk>\n  \\<Longrightarrow> (?v \\<in> the (V ?p) ?i) = (?v \\<in> the (V' ?p) ?i)\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)", "from MatchF.prems(1-3)"], ["proof (chain)\npicking this:\n  relevant_events (MatchF I r) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'", "have \"Regex.match (sat \\<sigma> V v) r = Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v) r\""], ["proof (prove)\nusing this:\n  relevant_events (MatchF I r) S - {e. fst e \\<in> dom V} \\<subseteq> E\n  v \\<in> S\n  dom V = dom V'\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) r =\n    Regex.match\n     (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v) r", "by (intro Regex.match_fv_cong MatchF(1)[of _ S V v] MatchF.prems(4)) auto"], ["proof (state)\nthis:\n  Regex.match (sat \\<sigma> V v) r =\n  Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v)\n   r\n\ngoal (5 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)\n 5. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>\\<And>x2a V V' v S i.\n                   \\<lbrakk>x2a \\<in> regex.atms x2;\n                    relevant_events x2a S - {e. fst e \\<in> dom V}\n                    \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events x2a S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i x2a =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i x2a;\n        relevant_events (MatchF x1 x2) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (MatchF x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (MatchF x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (MatchF x1 x2)", "then"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) r =\n  Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v)\n   r", "show ?case"], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) r =\n  Regex.match (sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v)\n   r\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (MatchF I r) =\n    sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i\n     (MatchF I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (MatchF I r) =\n  sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i (MatchF I r)\n\ngoal (4 subgoals):\n 1. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (formula.Eq x1 x2) S -\n                {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (formula.Eq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (formula.Eq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (formula.Eq x1 x2)\n 2. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (Less x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Less x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Less x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Less x1 x2)\n 3. \\<And>x1 x2 V V' v S i.\n       \\<lbrakk>relevant_events (LessEq x1 x2) S - {e. fst e \\<in> dom V}\n                \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (LessEq x1 x2) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (LessEq x1 x2) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (LessEq x1 x2)\n 4. \\<And>\\<phi> V V' v S i.\n       \\<lbrakk>\\<And>V V' v S i.\n                   \\<lbrakk>relevant_events \\<phi> S -\n                            {e. fst e \\<in> dom V}\n                            \\<subseteq> E;\n                    v \\<in> S; dom V = dom V';\n                    \\<And>p v i.\n                       \\<lbrakk>p \\<in> dom V;\n                        (p, v) \\<in> relevant_events \\<phi> S\\<rbrakk>\n                       \\<Longrightarrow> (v \\<in> the (V p) i) =\n   (v \\<in> the (V' p) i)\\<rbrakk>\n                   \\<Longrightarrow> sat \\<sigma> V v i \\<phi> =\n                                     sat\n(map_\\<Gamma> (\\<lambda>D. D \\<inter> E) \\<sigma>) V' v i \\<phi>;\n        relevant_events (Neg \\<phi>) S - {e. fst e \\<in> dom V}\n        \\<subseteq> E;\n        v \\<in> S; dom V = dom V';\n        \\<And>p v i.\n           \\<lbrakk>p \\<in> dom V;\n            (p, v) \\<in> relevant_events (Neg \\<phi>) S\\<rbrakk>\n           \\<Longrightarrow> (v \\<in> the (V p) i) =\n                             (v \\<in> the (V' p) i)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (Neg \\<phi>) =\n                         sat (map_\\<Gamma> (\\<lambda>D. D \\<inter> E)\n                               \\<sigma>)\n                          V' v i (Neg \\<phi>)", "qed simp_all"], ["", "subsection \\<open>Translation to n-ary conjunction\\<close>"], ["", "fun get_and_list :: \"formula \\<Rightarrow> formula list\" where\n  \"get_and_list (Ands l) = l\"\n| \"get_and_list \\<phi> = [\\<phi>]\""], ["", "lemma fv_get_and: \"(\\<Union>x\\<in>(set (get_and_list \\<phi>)). fvi b x) = fvi b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fvi b ` set (get_and_list \\<phi>)) = fvi b \\<phi>", "by (induction \\<phi> rule: get_and_list.induct) simp_all"], ["", "lemma safe_get_and: \"safe_formula \\<phi> \\<Longrightarrow> list_all safe_neg (get_and_list \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    list_all safe_neg (get_and_list \\<phi>)", "by (induction \\<phi> rule: get_and_list.induct) (simp_all add: safe_neg_def list_all_iff)"], ["", "lemma sat_get_and: \"sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> list_all (sat \\<sigma> V v i) (get_and_list \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i \\<phi> =\n    list_all (sat \\<sigma> V v i) (get_and_list \\<phi>)", "by (induction \\<phi> rule: get_and_list.induct) (simp_all add: list_all_iff)"], ["", "fun convert_multiway :: \"formula \\<Rightarrow> formula\" where\n  \"convert_multiway (Neg \\<phi>) = Neg (convert_multiway \\<phi>)\"\n| \"convert_multiway (Or \\<phi> \\<psi>) = Or (convert_multiway \\<phi>) (convert_multiway \\<psi>)\"\n| \"convert_multiway (And \\<phi> \\<psi>) = (if safe_assignment (fv \\<phi>) \\<psi> then\n      And (convert_multiway \\<phi>) \\<psi>\n    else if safe_formula \\<psi> then\n      Ands (get_and_list (convert_multiway \\<phi>) @ get_and_list (convert_multiway \\<psi>))\n    else if is_constraint \\<psi> then\n      And (convert_multiway \\<phi>) \\<psi>\n    else Ands (convert_multiway \\<psi> # get_and_list (convert_multiway \\<phi>)))\"\n| \"convert_multiway (Exists \\<phi>) = Exists (convert_multiway \\<phi>)\"\n| \"convert_multiway (Agg y \\<omega> b f \\<phi>) = Agg y \\<omega> b f (convert_multiway \\<phi>)\"\n| \"convert_multiway (Prev I \\<phi>) = Prev I (convert_multiway \\<phi>)\"\n| \"convert_multiway (Next I \\<phi>) = Next I (convert_multiway \\<phi>)\"\n| \"convert_multiway (Since \\<phi> I \\<psi>) = Since (convert_multiway \\<phi>) I (convert_multiway \\<psi>)\"\n| \"convert_multiway (Until \\<phi> I \\<psi>) = Until (convert_multiway \\<phi>) I (convert_multiway \\<psi>)\"\n| \"convert_multiway (MatchP I r) = MatchP I (Regex.map_regex convert_multiway r)\"\n| \"convert_multiway (MatchF I r) = MatchF I (Regex.map_regex convert_multiway r)\"\n| \"convert_multiway \\<phi> = \\<phi>\""], ["", "abbreviation \"convert_multiway_regex \\<equiv> Regex.map_regex convert_multiway\""], ["", "lemma fv_safe_get_and:\n  \"safe_formula \\<phi> \\<Longrightarrow> fv \\<phi> \\<subseteq> (\\<Union>x\\<in>(set (filter safe_formula (get_and_list \\<phi>))). fv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    fv \\<phi>\n    \\<subseteq> \\<Union>\n                 (fv ` set (filter safe_formula (get_and_list \\<phi>)))", "proof (induction \\<phi> rule: get_and_list.induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       fv (Ands l)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Ands l))))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        fv (Exists v)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula (get_and_list (Exists v))))\nA total of 17 subgoals...", "case (1 l)"], ["proof (state)\nthis:\n  safe_formula (Ands l)\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       fv (Ands l)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Ands l))))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        fv (Exists v)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula (get_and_list (Exists v))))\nA total of 17 subgoals...", "obtain pos neg where posneg: \"(pos, neg) = partition safe_formula l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pos neg.\n        (pos, neg) = partition safe_formula l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (pos, neg) = partition safe_formula l\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       fv (Ands l)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Ands l))))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        fv (Exists v)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula (get_and_list (Exists v))))\nA total of 17 subgoals...", "have \"get_and_list (Ands l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_and_list (Ands l) = l", "by simp"], ["proof (state)\nthis:\n  get_and_list (Ands l) = l\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       fv (Ands l)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Ands l))))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        fv (Exists v)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula (get_and_list (Exists v))))\nA total of 17 subgoals...", "have sub: \"(\\<Union>x\\<in>set neg. fv x) \\<subseteq> (\\<Union>x\\<in>set pos. fv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "using \"1.prems\" posneg"], ["proof (prove)\nusing this:\n  safe_formula (Ands l)\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "by simp"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       fv (Ands l)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Ands l))))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        fv (Exists v)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula (get_and_list (Exists v))))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have \"fv (Ands l) \\<subseteq> (\\<Union>x\\<in>set pos. fv x)\""], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (1 subgoal):\n 1. fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union> (fv ` set pos) \\<Longrightarrow>\n    fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)", "have \"fv (Ands l) = (\\<Union>x\\<in>set pos. fv x) \\<union> (\\<Union>x\\<in>set neg. fv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (Ands l) = \\<Union> (fv ` set pos) \\<union> \\<Union> (fv ` set neg)", "using posneg"], ["proof (prove)\nusing this:\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. fv (Ands l) = \\<Union> (fv ` set pos) \\<union> \\<Union> (fv ` set neg)", "by auto"], ["proof (state)\nthis:\n  fv (Ands l) = \\<Union> (fv ` set pos) \\<union> \\<Union> (fv ` set neg)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union> (fv ` set pos) \\<Longrightarrow>\n    fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)", "then"], ["proof (chain)\npicking this:\n  fv (Ands l) = \\<Union> (fv ` set pos) \\<union> \\<Union> (fv ` set neg)", "show ?thesis"], ["proof (prove)\nusing this:\n  fv (Ands l) = \\<Union> (fv ` set pos) \\<union> \\<Union> (fv ` set neg)\n\ngoal (1 subgoal):\n 1. fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)", "using sub"], ["proof (prove)\nusing this:\n  fv (Ands l) = \\<Union> (fv ` set pos) \\<union> \\<Union> (fv ` set neg)\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (1 subgoal):\n 1. fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)", "by simp"], ["proof (state)\nthis:\n  fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       fv (Ands l)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Ands l))))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        fv (Exists v)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula (get_and_list (Exists v))))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)", "show ?case"], ["proof (prove)\nusing this:\n  fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (1 subgoal):\n 1. fv (Ands l)\n    \\<subseteq> \\<Union>\n                 (fv ` set (filter safe_formula (get_and_list (Ands l))))", "using posneg"], ["proof (prove)\nusing this:\n  fv (Ands l) \\<subseteq> \\<Union> (fv ` set pos)\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. fv (Ands l)\n    \\<subseteq> \\<Union>\n                 (fv ` set (filter safe_formula (get_and_list (Ands l))))", "by auto"], ["proof (state)\nthis:\n  fv (Ands l)\n  \\<subseteq> \\<Union>\n               (fv ` set (filter safe_formula (get_and_list (Ands l))))\n\ngoal (16 subgoals):\n 1. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       fv (Pred v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Pred v va))))\n 2. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       fv (formula.Let v va vb)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Let v va vb))))\n 3. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       fv (formula.Eq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula\n                           (get_and_list (formula.Eq v va))))\n 4. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       fv (Less v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Less v va))))\n 5. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       fv (LessEq v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (LessEq v va))))\n 6. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       fv (Neg v)\n       \\<subseteq> \\<Union>\n                    (fv ` set (filter safe_formula (get_and_list (Neg v))))\n 7. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       fv (Or v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Or v va))))\n 8. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       fv (And v va)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (And v va))))\n 9. \\<And>v.\n       safe_formula (Exists v) \\<Longrightarrow>\n       fv (Exists v)\n       \\<subseteq> \\<Union>\n                    (fv `\n                     set (filter safe_formula (get_and_list (Exists v))))\n 10. \\<And>v va vb vc vd.\n        safe_formula (Agg v va vb vc vd) \\<Longrightarrow>\n        fv (Agg v va vb vc vd)\n        \\<subseteq> \\<Union>\n                     (fv `\n                      set (filter safe_formula\n                            (get_and_list (Agg v va vb vc vd))))\nA total of 16 subgoals...", "qed auto"], ["", "lemma ex_safe_get_and:\n  \"safe_formula \\<phi> \\<Longrightarrow> list_ex safe_formula (get_and_list \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    list_ex safe_formula (get_and_list \\<phi>)", "proof (induction \\<phi> rule: get_and_list.induct)"], ["proof (state)\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Ands l))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Exists v))\nA total of 17 subgoals...", "case (1 l)"], ["proof (state)\nthis:\n  safe_formula (Ands l)\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Ands l))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Exists v))\nA total of 17 subgoals...", "have \"get_and_list (Ands l) = l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_and_list (Ands l) = l", "by simp"], ["proof (state)\nthis:\n  get_and_list (Ands l) = l\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Ands l))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Exists v))\nA total of 17 subgoals...", "obtain pos neg where posneg: \"(pos, neg) = partition safe_formula l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pos neg.\n        (pos, neg) = partition safe_formula l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (pos, neg) = partition safe_formula l\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Ands l))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Exists v))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  (pos, neg) = partition safe_formula l", "have \"pos \\<noteq> []\""], ["proof (prove)\nusing this:\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "using \"1.prems\""], ["proof (prove)\nusing this:\n  (pos, neg) = partition safe_formula l\n  safe_formula (Ands l)\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "by simp"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Ands l))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Exists v))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  pos \\<noteq> []", "obtain x where \"x \\<in> set pos\""], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> set pos \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> set pos\n\ngoal (17 subgoals):\n 1. \\<And>l.\n       safe_formula (Ands l) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Ands l))\n 2. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 3. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 4. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 5. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 6. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 7. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 8. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 9. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 10. \\<And>v.\n        safe_formula (Exists v) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Exists v))\nA total of 17 subgoals...", "then"], ["proof (chain)\npicking this:\n  x \\<in> set pos", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> set pos\n\ngoal (1 subgoal):\n 1. list_ex safe_formula (get_and_list (Ands l))", "using posneg"], ["proof (prove)\nusing this:\n  x \\<in> set pos\n  (pos, neg) = partition safe_formula l\n\ngoal (1 subgoal):\n 1. list_ex safe_formula (get_and_list (Ands l))", "using Bex_set_list_ex"], ["proof (prove)\nusing this:\n  x \\<in> set pos\n  (pos, neg) = partition safe_formula l\n  Bex (set ?xs) ?P = list_ex ?P ?xs\n\ngoal (1 subgoal):\n 1. list_ex safe_formula (get_and_list (Ands l))", "by fastforce"], ["proof (state)\nthis:\n  list_ex safe_formula (get_and_list (Ands l))\n\ngoal (16 subgoals):\n 1. \\<And>v va.\n       safe_formula (Pred v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Pred v va))\n 2. \\<And>v va vb.\n       safe_formula (formula.Let v va vb) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Let v va vb))\n 3. \\<And>v va.\n       safe_formula (formula.Eq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (formula.Eq v va))\n 4. \\<And>v va.\n       safe_formula (Less v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Less v va))\n 5. \\<And>v va.\n       safe_formula (LessEq v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (LessEq v va))\n 6. \\<And>v.\n       safe_formula (Neg v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Neg v))\n 7. \\<And>v va.\n       safe_formula (Or v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Or v va))\n 8. \\<And>v va.\n       safe_formula (And v va) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (And v va))\n 9. \\<And>v.\n       safe_formula (Exists v) \\<Longrightarrow>\n       list_ex safe_formula (get_and_list (Exists v))\n 10. \\<And>v va vb vc vd.\n        safe_formula (Agg v va vb vc vd) \\<Longrightarrow>\n        list_ex safe_formula (get_and_list (Agg v va vb vc vd))\nA total of 16 subgoals...", "qed simp_all"], ["", "lemma case_NegE: \"(case \\<phi> of Neg \\<phi>' \\<Rightarrow> P \\<phi>' | _ \\<Rightarrow> False) \\<Longrightarrow> (\\<And>\\<phi>'. \\<phi> = Neg \\<phi>' \\<Longrightarrow> P \\<phi>' \\<Longrightarrow> Q) \\<Longrightarrow> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>case \\<phi> of Neg \\<phi>' \\<Rightarrow> P \\<phi>'\n             | _ \\<Rightarrow> False;\n     \\<And>\\<phi>'.\n        \\<lbrakk>\\<phi> = Neg \\<phi>'; P \\<phi>'\\<rbrakk>\n        \\<Longrightarrow> Q\\<rbrakk>\n    \\<Longrightarrow> Q", "by (cases \\<phi>) simp_all"], ["", "lemma convert_multiway_remove_neg: \"safe_formula (remove_neg \\<phi>) \\<Longrightarrow> convert_multiway (remove_neg \\<phi>) = remove_neg (convert_multiway \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula (remove_neg \\<phi>) \\<Longrightarrow>\n    convert_multiway (remove_neg \\<phi>) =\n    remove_neg (convert_multiway \\<phi>)", "by (cases \\<phi>) (auto elim: case_NegE)"], ["", "lemma fv_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> fvi b (convert_multiway \\<phi>) = fvi b \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway \\<phi>) = fvi b \\<phi>", "proof (induction \\<phi> arbitrary: b rule: safe_formula.induct)"], ["proof (state)\ngoal (51 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 51 subgoals...", "case (9 \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (And \\<phi> \\<psi>)\n\ngoal (51 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 51 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (And \\<phi> \\<psi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  \\<lbrakk>\\<psi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (And \\<phi> \\<psi>)\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (And \\<phi> \\<psi>)) = fvi b (And \\<phi> \\<psi>)", "by (cases \\<psi>) (auto simp: fv_get_and Un_commute)"], ["proof (state)\nthis:\n  fvi b (convert_multiway (And \\<phi> \\<psi>)) = fvi b (And \\<phi> \\<psi>)\n\ngoal (50 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 50 subgoals...", "next"], ["proof (state)\ngoal (50 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 50 subgoals...", "case (15 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n\ngoal (50 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 50 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "proof (cases \"safe_formula \\<phi>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)\n 2. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "case True"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n\ngoal (2 subgoals):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)\n 2. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "with 15"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n  safe_formula \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "by simp"], ["proof (state)\nthis:\n  fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n  fvi b (Since \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "case False"], ["proof (state)\nthis:\n  \\<not> safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "with \"15.prems\""], ["proof (chain)\npicking this:\n  safe_formula (Since \\<phi> I \\<psi>)\n  \\<not> safe_formula \\<phi>", "obtain \\<phi>' where \"\\<phi> = Neg \\<phi>'\""], ["proof (prove)\nusing this:\n  safe_formula (Since \\<phi> I \\<psi>)\n  \\<not> safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>''.\n        \\<phi> = Neg \\<phi>'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp split: formula.splits)"], ["proof (state)\nthis:\n  \\<phi> = Neg \\<phi>'\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "with False 15"], ["proof (chain)\npicking this:\n  \\<not> safe_formula \\<phi>\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n  \\<phi> = Neg \\<phi>'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> safe_formula \\<phi>\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Since \\<phi> I \\<psi>)\n  \\<phi> = Neg \\<phi>'\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n    fvi b (Since \\<phi> I \\<psi>)", "by simp"], ["proof (state)\nthis:\n  fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n  fvi b (Since \\<phi> I \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fvi b (convert_multiway (Since \\<phi> I \\<psi>)) =\n  fvi b (Since \\<phi> I \\<psi>)\n\ngoal (49 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 49 subgoals...", "next"], ["proof (state)\ngoal (49 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 49 subgoals...", "case (16 \\<phi> I \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n\ngoal (49 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 49 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "proof (cases \"safe_formula \\<phi>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)\n 2. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "case True"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n\ngoal (2 subgoals):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)\n 2. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "with 16"], ["proof (chain)\npicking this:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n  safe_formula \\<phi>", "show ?thesis"], ["proof (prove)\nusing this:\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "by simp"], ["proof (state)\nthis:\n  fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n  fvi b (Until \\<phi> I \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "case False"], ["proof (state)\nthis:\n  \\<not> safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "with \"16.prems\""], ["proof (chain)\npicking this:\n  safe_formula (Until \\<phi> I \\<psi>)\n  \\<not> safe_formula \\<phi>", "obtain \\<phi>' where \"\\<phi> = Neg \\<phi>'\""], ["proof (prove)\nusing this:\n  safe_formula (Until \\<phi> I \\<psi>)\n  \\<not> safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. (\\<And>\\<phi>''.\n        \\<phi> = Neg \\<phi>'' \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (simp split: formula.splits)"], ["proof (state)\nthis:\n  \\<phi> = Neg \\<phi>'\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula \\<phi> \\<Longrightarrow>\n    fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "with False 16"], ["proof (chain)\npicking this:\n  \\<not> safe_formula \\<phi>\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n  \\<phi> = Neg \\<phi>'", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<not> safe_formula \\<phi>\n  safe_formula \\<phi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<phi>) = fvi ?b \\<phi>\n  \\<lbrakk>\\<phi> = Neg ?x6.0; safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula \\<psi> \\<Longrightarrow>\n  fvi ?b (convert_multiway \\<psi>) = fvi ?b \\<psi>\n  safe_formula (Until \\<phi> I \\<psi>)\n  \\<phi> = Neg \\<phi>'\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n    fvi b (Until \\<phi> I \\<psi>)", "by simp"], ["proof (state)\nthis:\n  fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n  fvi b (Until \\<phi> I \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  fvi b (convert_multiway (Until \\<phi> I \\<psi>)) =\n  fvi b (Until \\<phi> I \\<psi>)\n\ngoal (48 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 48 subgoals...", "next"], ["proof (state)\ngoal (48 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 48 subgoals...", "case (17 I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchP I r)\n\ngoal (48 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 48 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchP I r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchP I r)\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (MatchP I r)) = fvi b (MatchP I r)", "unfolding convert_multiway.simps fvi.simps fv_regex_alt regex.set_map image_image"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchP I r)\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>regex.atms r. fvi b (convert_multiway x)) =\n    \\<Union> (fvi b ` regex.atms r)", "by (intro arg_cong[where f=Union, OF image_cong[OF refl]])\n      (auto dest!: safe_regex_safe_formula)"], ["proof (state)\nthis:\n  fvi b (convert_multiway (MatchP I r)) = fvi b (MatchP I r)\n\ngoal (47 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 47 subgoals...", "next"], ["proof (state)\ngoal (47 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 47 subgoals...", "case (18 I r)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchF I r)\n\ngoal (47 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 47 subgoals...", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchF I r)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchF I r)\n\ngoal (1 subgoal):\n 1. fvi b (convert_multiway (MatchF I r)) = fvi b (MatchF I r)", "unfolding convert_multiway.simps fvi.simps fv_regex_alt regex.set_map image_image"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<in> regex.atms r; safe_formula ?x\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x) = fvi ?b ?x\n  \\<lbrakk>?x \\<in> regex.atms r; ?x = Neg ?x6.0;\n   safe_formula ?x6.0\\<rbrakk>\n  \\<Longrightarrow> fvi ?b (convert_multiway ?x6.0) = fvi ?b ?x6.0\n  safe_formula (MatchF I r)\n\ngoal (1 subgoal):\n 1. (\\<Union>x\\<in>regex.atms r. fvi b (convert_multiway x)) =\n    \\<Union> (fvi b ` regex.atms r)", "by (intro arg_cong[where f=Union, OF image_cong[OF refl]])\n      (auto dest!: safe_regex_safe_formula)"], ["proof (state)\nthis:\n  fvi b (convert_multiway (MatchF I r)) = fvi b (MatchF I r)\n\ngoal (46 subgoals):\n 1. \\<And>t1 t2 b.\n       safe_formula (formula.Eq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (formula.Eq t1 t2)) =\n       fvi b (formula.Eq t1 t2)\n 2. \\<And>x y b.\n       safe_formula (Neg (formula.Eq (Var x) (Var y))) \\<Longrightarrow>\n       fvi b (convert_multiway (Neg (formula.Eq (Var x) (Var y)))) =\n       fvi b (Neg (formula.Eq (Var x) (Var y)))\n 3. \\<And>t1 t2 b.\n       safe_formula (Less t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (Less t1 t2)) = fvi b (Less t1 t2)\n 4. \\<And>t1 t2 b.\n       safe_formula (LessEq t1 t2) \\<Longrightarrow>\n       fvi b (convert_multiway (LessEq t1 t2)) = fvi b (LessEq t1 t2)\n 5. \\<And>e ts b.\n       safe_formula (Pred e ts) \\<Longrightarrow>\n       fvi b (convert_multiway (Pred e ts)) = fvi b (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula \\<phi> \\<Longrightarrow>\n                   fvi b (convert_multiway \\<phi>) = fvi b \\<phi>;\n        \\<And>b.\n           safe_formula \\<psi> \\<Longrightarrow>\n           fvi b (convert_multiway \\<psi>) = fvi b \\<psi>;\n        safe_formula (formula.Let p \\<phi> \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         fvi b (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>v va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (Pred v va) \\<Longrightarrow>\n                   fvi b (convert_multiway (Pred v va)) = fvi b (Pred v va);\n        safe_formula (Neg (Pred v va))\\<rbrakk>\n       \\<Longrightarrow> fvi b (convert_multiway (Neg (Pred v va))) =\n                         fvi b (Neg (Pred v va))\n 8. \\<And>v va vb b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Let v va vb) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Let v va vb)) =\n                   fvi b (formula.Let v va vb);\n        safe_formula (Neg (formula.Let v va vb))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway (Neg (formula.Let v va vb))) =\n                         fvi b (Neg (formula.Let v va vb))\n 9. \\<And>vb va b.\n       \\<lbrakk>\\<And>b.\n                   safe_formula (formula.Eq (Const vb) va) \\<Longrightarrow>\n                   fvi b (convert_multiway (formula.Eq (Const vb) va)) =\n                   fvi b (formula.Eq (Const vb) va);\n        safe_formula (Neg (formula.Eq (Const vb) va))\\<rbrakk>\n       \\<Longrightarrow> fvi b\n                          (convert_multiway\n                            (Neg (formula.Eq (Const vb) va))) =\n                         fvi b (Neg (formula.Eq (Const vb) va))\n 10. \\<And>vb vc va b.\n        \\<lbrakk>\\<And>b.\n                    safe_formula\n                     (formula.Eq (Plus vb vc) va) \\<Longrightarrow>\n                    fvi b (convert_multiway (formula.Eq (Plus vb vc) va)) =\n                    fvi b (formula.Eq (Plus vb vc) va);\n         safe_formula (Neg (formula.Eq (Plus vb vc) va))\\<rbrakk>\n        \\<Longrightarrow> fvi b\n                           (convert_multiway\n                             (Neg (formula.Eq (Plus vb vc) va))) =\n                          fvi b (Neg (formula.Eq (Plus vb vc) va))\nA total of 46 subgoals...", "qed (auto simp del: convert_multiway.simps(3))"], ["", "lemma get_and_nonempty:\n  assumes \"safe_formula \\<phi>\"\n  shows \"get_and_list \\<phi> \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. get_and_list \\<phi> \\<noteq> []", "using assms"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. get_and_list \\<phi> \\<noteq> []", "by (induction \\<phi>) auto"], ["", "lemma future_bounded_get_and:\n  \"list_all future_bounded (get_and_list \\<phi>) = future_bounded \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all future_bounded (get_and_list \\<phi>) = future_bounded \\<phi>", "by (induction \\<phi>) simp_all"], ["", "lemma safe_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> safe_formula (convert_multiway \\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    safe_formula (convert_multiway \\<phi>)", "proof (induction \\<phi> rule: safe_formula_induct)"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "case (And_safe \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "let ?a = \"And \\<phi> \\<psi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "let ?b = \"convert_multiway ?a\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "let ?c\\<phi> = \"convert_multiway \\<phi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "let ?c\\<psi> = \"convert_multiway \\<psi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "have b_def: \"?b = Ands (get_and_list ?c\\<phi> @ get_and_list ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> \\<psi>) =\n    Ands\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "using And_safe"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> \\<psi>) =\n    Ands\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  convert_multiway (And \\<phi> \\<psi>) =\n  Ands\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula\n                           (convert_multiway (And \\<phi> (Neg \\<psi>)))\nA total of 23 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "let ?l = \"get_and_list ?c\\<phi> @ get_and_list ?c\\<psi>\""], ["proof (state)\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "obtain pos neg where posneg: \"(pos, neg) = partition safe_formula ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pos neg.\n        (pos, neg) =\n        partition safe_formula\n         (get_and_list (convert_multiway \\<phi>) @\n          get_and_list (convert_multiway \\<psi>)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (pos, neg) =\n  partition safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "then"], ["proof (chain)\npicking this:\n  (pos, neg) =\n  partition safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))", "have \"list_all safe_formula pos\""], ["proof (prove)\nusing this:\n  (pos, neg) =\n  partition safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. list_all safe_formula pos", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  list_all safe_formula pos\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "have lsafe_neg: \"list_all safe_neg ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all safe_neg\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "using And_safe \\<open>safe_formula \\<phi>\\<close> \\<open>safe_formula \\<psi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n  safe_formula \\<phi>\n  safe_formula \\<psi>\n\ngoal (1 subgoal):\n 1. list_all safe_neg\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "by (simp add: safe_get_and)"], ["proof (state)\nthis:\n  list_all safe_neg\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "then"], ["proof (chain)\npicking this:\n  list_all safe_neg\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))", "have \"list_all safe_formula (map remove_neg neg)\""], ["proof (prove)\nusing this:\n  list_all safe_neg\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all safe_neg\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>)) \\<Longrightarrow>\n    list_all safe_formula (map remove_neg neg)", "have \"\\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "assume \"x \\<in> set neg\""], ["proof (state)\nthis:\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set neg", "have \"\\<not> safe_formula x\""], ["proof (prove)\nusing this:\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula x", "using posneg"], ["proof (prove)\nusing this:\n  x \\<in> set neg\n  (pos, neg) =\n  partition safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula x", "by auto"], ["proof (state)\nthis:\n  \\<not> safe_formula x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "moreover"], ["proof (state)\nthis:\n  \\<not> safe_formula x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "have \"safe_neg x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_neg x", "using lsafe_neg \\<open>x \\<in> set neg\\<close>"], ["proof (prove)\nusing this:\n  list_all safe_neg\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. safe_neg x", "unfolding safe_neg_def list_all_iff partition_set[OF posneg[symmetric], symmetric]"], ["proof (prove)\nusing this:\n  \\<forall>\\<phi>\\<in>set pos \\<union> set neg.\n     \\<not> safe_formula \\<phi> \\<longrightarrow>\n     safe_formula (remove_neg \\<phi>)\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula x \\<longrightarrow> safe_formula (remove_neg x)", "by simp"], ["proof (state)\nthis:\n  safe_neg x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> safe_formula x\n  safe_neg x", "show \"safe_formula (remove_neg x)\""], ["proof (prove)\nusing this:\n  \\<not> safe_formula x\n  safe_neg x\n\ngoal (1 subgoal):\n 1. safe_formula (remove_neg x)", "using safe_neg_def"], ["proof (prove)\nusing this:\n  \\<not> safe_formula x\n  safe_neg x\n  safe_neg ?\\<phi> =\n  (\\<not> safe_formula ?\\<phi> \\<longrightarrow>\n   safe_formula (remove_neg ?\\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (remove_neg x)", "by blast"], ["proof (state)\nthis:\n  safe_formula (remove_neg x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)\n\ngoal (1 subgoal):\n 1. list_all safe_neg\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>)) \\<Longrightarrow>\n    list_all safe_formula (map remove_neg neg)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)\n\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  list_all safe_formula (map remove_neg neg)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all safe_formula (map remove_neg neg)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "have pos_filter: \"pos = filter safe_formula (get_and_list ?c\\<phi> @ get_and_list ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos =\n    filter safe_formula\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "using posneg"], ["proof (prove)\nusing this:\n  (pos, neg) =\n  partition safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. pos =\n    filter safe_formula\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  pos =\n  filter safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "have \"(\\<Union>x\\<in>set neg. fv x) \\<subseteq> (\\<Union>x\\<in>set pos. fv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have 1: \"fv ?c\\<phi> \\<subseteq> (\\<Union>x\\<in>(set (filter safe_formula (get_and_list ?c\\<phi>))). fv x)\" (is \"_ \\<subseteq> ?fv\\<phi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (convert_multiway \\<phi>)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<phi>))))", "using And_safe \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. fv (convert_multiway \\<phi>)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<phi>))))", "by (blast intro!: fv_safe_get_and)"], ["proof (state)\nthis:\n  fv (convert_multiway \\<phi>)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have 2: \"fv ?c\\<psi> \\<subseteq> (\\<Union>x\\<in>(set (filter safe_formula (get_and_list ?c\\<psi>))). fv x)\" (is \"_ \\<subseteq> ?fv\\<psi>\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (convert_multiway \\<psi>)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<psi>))))", "using And_safe \\<open>safe_formula \\<psi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n  safe_formula \\<psi>\n\ngoal (1 subgoal):\n 1. fv (convert_multiway \\<psi>)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<psi>))))", "by (blast intro!: fv_safe_get_and)"], ["proof (state)\nthis:\n  fv (convert_multiway \\<psi>)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<psi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have \"(\\<Union>x\\<in>set neg. fv x) \\<subseteq> fv ?c\\<phi> \\<union> fv ?c\\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "have \"\\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` (set pos \\<union> set neg))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union> (fv ` (set pos \\<union> set neg))", "by simp"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union> (fv ` (set pos \\<union> set neg))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "also"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union> (fv ` (set pos \\<union> set neg))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "have \"... \\<subseteq> fv (convert_multiway \\<phi>) \\<union> fv (convert_multiway \\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` (set pos \\<union> set neg))\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "unfolding partition_set[OF posneg[symmetric], simplified]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (fv `\n      (set (get_and_list (convert_multiway \\<phi>)) \\<union>\n       set (get_and_list (convert_multiway \\<psi>))))\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "by (simp add: fv_get_and)"], ["proof (state)\nthis:\n  \\<Union> (fv ` (set pos \\<union> set neg))\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "finally"], ["proof (chain)\npicking this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "."], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "then"], ["proof (chain)\npicking this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)", "have \"(\\<Union>x\\<in>set neg. fv x) \\<subseteq> ?fv\\<phi> \\<union> ?fv\\<psi>\""], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<phi>)))) \\<union>\n                \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<psi>))))", "using 1 2"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n  fv (convert_multiway \\<phi>)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>))))\n  fv (convert_multiway \\<psi>)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<psi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<phi>)))) \\<union>\n                \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<psi>))))", "by blast"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>)))) \\<union>\n              \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<psi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "then"], ["proof (chain)\npicking this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>)))) \\<union>\n              \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<psi>))))", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>)))) \\<union>\n              \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<psi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "unfolding pos_filter"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>)))) \\<union>\n              \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<psi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (get_and_list (convert_multiway \\<phi>) @\n                         get_and_list (convert_multiway \\<psi>))))", "by simp"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "have \"pos \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "obtain x where \"x \\<in> set (get_and_list ?c\\<phi>)\" \"safe_formula x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set (get_and_list (convert_multiway \\<phi>));\n         safe_formula x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using And_safe \\<open>safe_formula \\<phi>\\<close> ex_safe_get_and"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n  safe_formula \\<phi>\n  safe_formula ?\\<phi> \\<Longrightarrow>\n  list_ex safe_formula (get_and_list ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set (get_and_list (convert_multiway \\<phi>));\n         safe_formula x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: list_ex_iff)"], ["proof (state)\nthis:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "unfolding pos_filter"], ["proof (prove)\nusing this:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x\n\ngoal (1 subgoal):\n 1. filter safe_formula\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>)) \\<noteq>\n    []", "by (auto simp: filter_empty_conv)"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "then"], ["proof (chain)\npicking this:\n  pos \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> \\<psi>))", "unfolding b_def"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. safe_formula\n     (Ands\n       (get_and_list (convert_multiway \\<phi>) @\n        get_and_list (convert_multiway \\<psi>)))", "using \\<open>\\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\\<close> \\<open>list_all safe_formula (map remove_neg neg)\\<close>\n        \\<open>list_all safe_formula pos\\<close> posneg"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n  list_all safe_formula (map remove_neg neg)\n  list_all safe_formula pos\n  (pos, neg) =\n  partition safe_formula\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. safe_formula\n     (Ands\n       (get_and_list (convert_multiway \\<phi>) @\n        get_and_list (convert_multiway \\<psi>)))", "by simp"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (And \\<phi> \\<psi>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (And \\<phi> \\<psi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "case (And_Not \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "let ?a = \"And \\<phi> (Neg \\<psi>)\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "let ?b = \"convert_multiway ?a\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "let ?c\\<phi> = \"convert_multiway \\<phi>\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "let ?c\\<psi> = \"convert_multiway \\<psi>\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "have b_def: \"?b = Ands (Neg ?c\\<psi> # get_and_list ?c\\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> (Neg \\<psi>)) =\n    Ands\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "using And_Not"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> (Neg \\<psi>)) =\n    Ands\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by simp"], ["proof (state)\nthis:\n  convert_multiway (And \\<phi> (Neg \\<psi>)) =\n  Ands\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (And \\<phi> (Neg \\<psi>)))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n         list_all (\\<lambda>a. safe_formula (convert_multiway a))\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\nA total of 22 subgoals...", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "let ?l = \"Neg ?c\\<psi> # get_and_list ?c\\<phi>\""], ["proof (state)\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "note \\<open>safe_formula ?c\\<phi>\\<close>"], ["proof (state)\nthis:\n  safe_formula (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  safe_formula (convert_multiway \\<phi>)", "have \"list_all safe_neg (get_and_list ?c\\<phi>)\""], ["proof (prove)\nusing this:\n  safe_formula (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. list_all safe_neg (get_and_list (convert_multiway \\<phi>))", "by (simp add: safe_get_and)"], ["proof (state)\nthis:\n  list_all safe_neg (get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "moreover"], ["proof (state)\nthis:\n  list_all safe_neg (get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "have \"safe_neg (Neg ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_neg (Neg (convert_multiway \\<psi>))", "using \\<open>safe_formula ?c\\<psi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. safe_neg (Neg (convert_multiway \\<psi>))", "by (simp add: safe_neg_def)"], ["proof (state)\nthis:\n  safe_neg (Neg (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  safe_neg (Neg (convert_multiway \\<psi>))", "have lsafe_neg: \"list_all safe_neg ?l\""], ["proof (prove)\nusing this:\n  safe_neg (Neg (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. list_all safe_neg\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "using calculation"], ["proof (prove)\nusing this:\n  safe_neg (Neg (convert_multiway \\<psi>))\n  list_all safe_neg (get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. list_all safe_neg\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by simp"], ["proof (state)\nthis:\n  list_all safe_neg\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "obtain pos neg where posneg: \"(pos, neg) = partition safe_formula ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>pos neg.\n        (pos, neg) =\n        partition safe_formula\n         (Neg (convert_multiway \\<psi>) #\n          get_and_list (convert_multiway \\<phi>)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by simp"], ["proof (state)\nthis:\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))", "have \"list_all safe_formula pos\""], ["proof (prove)\nusing this:\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. list_all safe_formula pos", "by (auto simp: list_all_iff)"], ["proof (state)\nthis:\n  list_all safe_formula pos\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  list_all safe_formula pos", "have \"list_all safe_formula (map remove_neg neg)\""], ["proof (prove)\nusing this:\n  list_all safe_formula pos\n\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. list_all safe_formula pos \\<Longrightarrow>\n    list_all safe_formula (map remove_neg neg)", "have \"\\<And>x. x \\<in> (set neg) \\<Longrightarrow> safe_formula (remove_neg x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "assume \"x \\<in> set neg\""], ["proof (state)\nthis:\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "then"], ["proof (chain)\npicking this:\n  x \\<in> set neg", "have \"\\<not> safe_formula x\""], ["proof (prove)\nusing this:\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula x", "using posneg"], ["proof (prove)\nusing this:\n  x \\<in> set neg\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula x", "by (auto simp del: filter.simps)"], ["proof (state)\nthis:\n  \\<not> safe_formula x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "moreover"], ["proof (state)\nthis:\n  \\<not> safe_formula x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "have \"safe_neg x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_neg x", "using lsafe_neg \\<open>x \\<in> set neg\\<close>"], ["proof (prove)\nusing this:\n  list_all safe_neg\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. safe_neg x", "unfolding safe_neg_def list_all_iff partition_set[OF posneg[symmetric], symmetric]"], ["proof (prove)\nusing this:\n  \\<forall>\\<phi>\\<in>set pos \\<union> set neg.\n     \\<not> safe_formula \\<phi> \\<longrightarrow>\n     safe_formula (remove_neg \\<phi>)\n  x \\<in> set neg\n\ngoal (1 subgoal):\n 1. \\<not> safe_formula x \\<longrightarrow> safe_formula (remove_neg x)", "by simp"], ["proof (state)\nthis:\n  safe_neg x\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg x)", "ultimately"], ["proof (chain)\npicking this:\n  \\<not> safe_formula x\n  safe_neg x", "show \"safe_formula (remove_neg x)\""], ["proof (prove)\nusing this:\n  \\<not> safe_formula x\n  safe_neg x\n\ngoal (1 subgoal):\n 1. safe_formula (remove_neg x)", "using safe_neg_def"], ["proof (prove)\nusing this:\n  \\<not> safe_formula x\n  safe_neg x\n  safe_neg ?\\<phi> =\n  (\\<not> safe_formula ?\\<phi> \\<longrightarrow>\n   safe_formula (remove_neg ?\\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (remove_neg x)", "by blast"], ["proof (state)\nthis:\n  safe_formula (remove_neg x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)\n\ngoal (1 subgoal):\n 1. list_all safe_formula pos \\<Longrightarrow>\n    list_all safe_formula (map remove_neg neg)", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)", "show ?thesis"], ["proof (prove)\nusing this:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)\n\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "using Ball_set_list_all"], ["proof (prove)\nusing this:\n  ?x \\<in> set neg \\<Longrightarrow> safe_formula (remove_neg ?x)\n  Ball (set ?xs) ?P = list_all ?P ?xs\n\ngoal (1 subgoal):\n 1. list_all safe_formula (map remove_neg neg)", "by force"], ["proof (state)\nthis:\n  list_all safe_formula (map remove_neg neg)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  list_all safe_formula (map remove_neg neg)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "have pos_filter: \"pos = filter safe_formula ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos =\n    filter safe_formula\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "using posneg"], ["proof (prove)\nusing this:\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. pos =\n    filter safe_formula\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by simp"], ["proof (state)\nthis:\n  pos =\n  filter safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "have neg_filter: \"neg = filter (Not \\<circ> safe_formula) ?l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. neg =\n    filter (Not \\<circ> safe_formula)\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "using posneg"], ["proof (prove)\nusing this:\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. neg =\n    filter (Not \\<circ> safe_formula)\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by simp"], ["proof (state)\nthis:\n  neg =\n  filter (Not \\<circ> safe_formula)\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "have \"(\\<Union>x\\<in>(set neg). fv x) \\<subseteq> (\\<Union>x\\<in>(set pos). fv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have fv_neg: \"(\\<Union>x\\<in>(set neg). fv x) \\<subseteq> (\\<Union>x\\<in>(set ?l). fv x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (Neg (convert_multiway \\<psi>) #\n                       get_and_list (convert_multiway \\<phi>)))", "using posneg"], ["proof (prove)\nusing this:\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (Neg (convert_multiway \\<psi>) #\n                       get_and_list (convert_multiway \\<phi>)))", "by auto"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (Neg (convert_multiway \\<psi>) #\n                     get_and_list (convert_multiway \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have \"(\\<Union>x\\<in>(set ?l). fv x) \\<subseteq> fv ?c\\<phi> \\<union> fv ?c\\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union>\n     (fv `\n      set (Neg (convert_multiway \\<psi>) #\n           get_and_list (convert_multiway \\<phi>)))\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "using \\<open>safe_formula \\<phi>\\<close> \\<open>safe_formula \\<psi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  safe_formula \\<psi>\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (fv `\n      set (Neg (convert_multiway \\<psi>) #\n           get_and_list (convert_multiway \\<phi>)))\n    \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n                fv (convert_multiway \\<psi>)", "by (simp add: fv_get_and fv_convert_multiway)"], ["proof (state)\nthis:\n  \\<Union>\n   (fv `\n    set (Neg (convert_multiway \\<psi>) #\n         get_and_list (convert_multiway \\<phi>)))\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "also"], ["proof (state)\nthis:\n  \\<Union>\n   (fv `\n    set (Neg (convert_multiway \\<psi>) #\n         get_and_list (convert_multiway \\<phi>)))\n  \\<subseteq> fv (convert_multiway \\<phi>) \\<union>\n              fv (convert_multiway \\<psi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "have \"fv ?c\\<phi> \\<union> fv ?c\\<psi> \\<subseteq> fv ?c\\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fv (convert_multiway \\<phi>) \\<union> fv (convert_multiway \\<psi>)\n    \\<subseteq> fv (convert_multiway \\<phi>)", "using \\<open>safe_formula \\<phi>\\<close> \\<open>safe_formula \\<psi>\\<close> \\<open>fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  safe_formula \\<psi>\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n\ngoal (1 subgoal):\n 1. fv (convert_multiway \\<phi>) \\<union> fv (convert_multiway \\<psi>)\n    \\<subseteq> fv (convert_multiway \\<phi>)", "by (simp add: fv_convert_multiway[symmetric])"], ["proof (state)\nthis:\n  fv (convert_multiway \\<phi>) \\<union> fv (convert_multiway \\<psi>)\n  \\<subseteq> fv (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "finally"], ["proof (chain)\npicking this:\n  \\<Union>\n   (fv `\n    set (Neg (convert_multiway \\<psi>) #\n         get_and_list (convert_multiway \\<phi>)))\n  \\<subseteq> fv (convert_multiway \\<phi>)", "have \"(\\<Union>x\\<in>(set neg). fv x) \\<subseteq> fv ?c\\<phi>\""], ["proof (prove)\nusing this:\n  \\<Union>\n   (fv `\n    set (Neg (convert_multiway \\<psi>) #\n         get_and_list (convert_multiway \\<phi>)))\n  \\<subseteq> fv (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)", "using fv_neg"], ["proof (prove)\nusing this:\n  \\<Union>\n   (fv `\n    set (Neg (convert_multiway \\<psi>) #\n         get_and_list (convert_multiway \\<phi>)))\n  \\<subseteq> fv (convert_multiway \\<phi>)\n  \\<Union> (fv ` set neg)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (Neg (convert_multiway \\<psi>) #\n                     get_and_list (convert_multiway \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)", "unfolding neg_filter"], ["proof (prove)\nusing this:\n  \\<Union>\n   (fv `\n    set (Neg (convert_multiway \\<psi>) #\n         get_and_list (convert_multiway \\<phi>)))\n  \\<subseteq> fv (convert_multiway \\<phi>)\n  \\<Union>\n   (fv `\n    set (filter (Not \\<circ> safe_formula)\n          (Neg (convert_multiway \\<psi>) #\n           get_and_list (convert_multiway \\<phi>))))\n  \\<subseteq> \\<Union>\n               (fv `\n                set (Neg (convert_multiway \\<psi>) #\n                     get_and_list (convert_multiway \\<phi>)))\n\ngoal (1 subgoal):\n 1. \\<Union>\n     (fv `\n      set (filter (Not \\<circ> safe_formula)\n            (Neg (convert_multiway \\<psi>) #\n             get_and_list (convert_multiway \\<phi>))))\n    \\<subseteq> fv (convert_multiway \\<phi>)", "by blast"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "then"], ["proof (chain)\npicking this:\n  \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)", "unfolding pos_filter"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (Neg (convert_multiway \\<psi>) #\n                         get_and_list (convert_multiway \\<phi>))))", "using fv_safe_get_and[OF And_Not.IH(1)]"], ["proof (prove)\nusing this:\n  \\<Union> (fv ` set neg) \\<subseteq> fv (convert_multiway \\<phi>)\n  fv (convert_multiway \\<phi>)\n  \\<subseteq> \\<Union>\n               (fv `\n                set (filter safe_formula\n                      (get_and_list (convert_multiway \\<phi>))))\n\ngoal (1 subgoal):\n 1. \\<Union> (fv ` set neg)\n    \\<subseteq> \\<Union>\n                 (fv `\n                  set (filter safe_formula\n                        (Neg (convert_multiway \\<psi>) #\n                         get_and_list (convert_multiway \\<phi>))))", "by auto"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "have \"pos \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "obtain x where \"x \\<in> set (get_and_list ?c\\<phi>)\" \"safe_formula x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set (get_and_list (convert_multiway \\<phi>));\n         safe_formula x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using And_Not.IH \\<open>safe_formula \\<phi>\\<close> ex_safe_get_and"], ["proof (prove)\nusing this:\n  safe_formula (convert_multiway \\<phi>)\n  safe_formula (convert_multiway \\<psi>)\n  safe_formula \\<phi>\n  safe_formula ?\\<phi> \\<Longrightarrow>\n  list_ex safe_formula (get_and_list ?\\<phi>)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> set (get_and_list (convert_multiway \\<phi>));\n         safe_formula x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: list_ex_iff)"], ["proof (state)\nthis:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "then"], ["proof (chain)\npicking this:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x\n\ngoal (1 subgoal):\n 1. pos \\<noteq> []", "unfolding pos_filter"], ["proof (prove)\nusing this:\n  x \\<in> set (get_and_list (convert_multiway \\<phi>))\n  safe_formula x\n\ngoal (1 subgoal):\n 1. filter safe_formula\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>)) \\<noteq>\n    []", "by (auto simp: filter_empty_conv)"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "then"], ["proof (chain)\npicking this:\n  pos \\<noteq> []", "show ?thesis"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))", "unfolding b_def"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n\ngoal (1 subgoal):\n 1. safe_formula\n     (Ands\n       (Neg (convert_multiway \\<psi>) #\n        get_and_list (convert_multiway \\<phi>)))", "using \\<open>\\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\\<close> \\<open>list_all safe_formula (map remove_neg neg)\\<close>\n        \\<open>list_all safe_formula pos\\<close> posneg"], ["proof (prove)\nusing this:\n  pos \\<noteq> []\n  \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos)\n  list_all safe_formula (map remove_neg neg)\n  list_all safe_formula pos\n  (pos, neg) =\n  partition safe_formula\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. safe_formula\n     (Ands\n       (Neg (convert_multiway \\<psi>) #\n        get_and_list (convert_multiway \\<phi>)))", "by simp"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (And \\<phi> (Neg \\<psi>)))\n\ngoal (21 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Neg \\<phi>))\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Neg \\<phi>))\nA total of 21 subgoals...", "case (Neg \\<phi>)"], ["proof (state)\nthis:\n  fv \\<phi> = {}\n  safe_formula \\<phi>\n  safe_formula (convert_multiway \\<phi>)\n\ngoal (21 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Neg \\<phi>))\nA total of 21 subgoals...", "have \"safe_formula (Neg \\<phi>') \\<longleftrightarrow> safe_formula \\<phi>'\" if \"fv \\<phi>' = {}\" for \\<phi>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula (Neg \\<phi>') = safe_formula \\<phi>'", "using that"], ["proof (prove)\nusing this:\n  fv \\<phi>' = {}\n\ngoal (1 subgoal):\n 1. safe_formula (Neg \\<phi>') = safe_formula \\<phi>'", "by (cases \"Neg \\<phi>'\" rule: safe_formula.cases) simp_all"], ["proof (state)\nthis:\n  fv ?\\<phi>' = {} \\<Longrightarrow>\n  safe_formula (Neg ?\\<phi>') = safe_formula ?\\<phi>'\n\ngoal (21 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Neg \\<phi>))\nA total of 21 subgoals...", "with Neg"], ["proof (chain)\npicking this:\n  fv \\<phi> = {}\n  safe_formula \\<phi>\n  safe_formula (convert_multiway \\<phi>)\n  fv ?\\<phi>' = {} \\<Longrightarrow>\n  safe_formula (Neg ?\\<phi>') = safe_formula ?\\<phi>'", "show ?case"], ["proof (prove)\nusing this:\n  fv \\<phi> = {}\n  safe_formula \\<phi>\n  safe_formula (convert_multiway \\<phi>)\n  fv ?\\<phi>' = {} \\<Longrightarrow>\n  safe_formula (Neg ?\\<phi>') = safe_formula ?\\<phi>'\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (Neg \\<phi>))", "by (simp add: fv_convert_multiway)"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (Neg \\<phi>))\n\ngoal (20 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 20 subgoals...", "case (MatchP I r)"], ["proof (state)\nthis:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r. safe_formula (convert_multiway \\<phi>)\n\ngoal (20 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 20 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r. safe_formula (convert_multiway \\<phi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r. safe_formula (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (MatchP I r))", "by (auto 0 3 simp: atms_def fv_convert_multiway intro!: safe_regex_map_regex\n      elim!: disjE_Not2 case_NegE\n      dest: safe_regex_safe_formula split: if_splits)"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (MatchP I r))\n\ngoal (19 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 19 subgoals...", "case (MatchF I r)"], ["proof (state)\nthis:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r. safe_formula (convert_multiway \\<phi>)\n\ngoal (19 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 19 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r. safe_formula (convert_multiway \\<phi>)", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r. safe_formula (convert_multiway \\<phi>)\n\ngoal (1 subgoal):\n 1. safe_formula (convert_multiway (MatchF I r))", "by (auto 0 3 simp: atms_def fv_convert_multiway intro!: safe_regex_map_regex\n      elim!: disjE_Not2 case_NegE\n      dest: safe_regex_safe_formula split: if_splits)"], ["proof (state)\nthis:\n  safe_formula (convert_multiway (MatchF I r))\n\ngoal (18 subgoals):\n 1. \\<And>c d.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Const d)))\n 2. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Const c) (Var x)))\n 3. \\<And>c x.\n       safe_formula (convert_multiway (formula.Eq (Var x) (Const c)))\n 4. \\<And>x.\n       safe_formula (convert_multiway (Neg (formula.Eq (Var x) (Var x))))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       safe_formula (convert_multiway (Pred e ts))\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n        safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>))\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        safe_formula (convert_multiway \\<phi>)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (And \\<phi> \\<psi>))\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all (\\<lambda>a. safe_formula (convert_multiway a)) pos;\n        list_all (\\<lambda>a. safe_formula (convert_multiway a))\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> safe_formula (convert_multiway (Ands l))\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>fv \\<psi> = fv \\<phi>; safe_formula \\<phi>;\n         safe_formula \\<psi>; safe_formula (convert_multiway \\<phi>);\n         safe_formula (convert_multiway \\<psi>)\\<rbrakk>\n        \\<Longrightarrow> safe_formula (convert_multiway (Or \\<phi> \\<psi>))\nA total of 18 subgoals...", "qed (auto simp: fv_convert_multiway)"], ["", "lemma future_bounded_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>", "proof (induction \\<phi> rule: safe_formula_induct)"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "case (And_safe \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n  future_bounded (convert_multiway \\<psi>) = future_bounded \\<psi>\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?a = \"And \\<phi> \\<psi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?b = \"convert_multiway ?a\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?c\\<phi> = \"convert_multiway \\<phi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?c\\<psi> = \"convert_multiway \\<psi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have b_def: \"?b = Ands (get_and_list ?c\\<phi> @ get_and_list ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> \\<psi>) =\n    Ands\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "using And_safe"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n  future_bounded (convert_multiway \\<psi>) = future_bounded \\<psi>\n\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> \\<psi>) =\n    Ands\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  convert_multiway (And \\<phi> \\<psi>) =\n  Ands\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have \"future_bounded ?a = (future_bounded ?c\\<phi> \\<and> future_bounded ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (And \\<phi> \\<psi>) =\n    (future_bounded (convert_multiway \\<phi>) \\<and>\n     future_bounded (convert_multiway \\<psi>))", "using And_safe"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n  future_bounded (convert_multiway \\<psi>) = future_bounded \\<psi>\n\ngoal (1 subgoal):\n 1. future_bounded (And \\<phi> \\<psi>) =\n    (future_bounded (convert_multiway \\<phi>) \\<and>\n     future_bounded (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  future_bounded (And \\<phi> \\<psi>) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "moreover"], ["proof (state)\nthis:\n  future_bounded (And \\<phi> \\<psi>) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have \"future_bounded ?c\\<phi> = list_all future_bounded (get_and_list ?c\\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway \\<phi>) =\n    list_all future_bounded (get_and_list (convert_multiway \\<phi>))", "using \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway \\<phi>) =\n    list_all future_bounded (get_and_list (convert_multiway \\<phi>))", "by (simp add: future_bounded_get_and safe_convert_multiway)"], ["proof (state)\nthis:\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "moreover"], ["proof (state)\nthis:\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have \"future_bounded ?c\\<psi> = list_all future_bounded (get_and_list ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway \\<psi>) =\n    list_all future_bounded (get_and_list (convert_multiway \\<psi>))", "using \\<open>safe_formula \\<psi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<psi>\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway \\<psi>) =\n    list_all future_bounded (get_and_list (convert_multiway \\<psi>))", "by (simp add: future_bounded_get_and safe_convert_multiway)"], ["proof (state)\nthis:\n  future_bounded (convert_multiway \\<psi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "moreover"], ["proof (state)\nthis:\n  future_bounded (convert_multiway \\<psi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have \"future_bounded ?b = list_all future_bounded (get_and_list ?c\\<phi> @ get_and_list ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway (And \\<phi> \\<psi>)) =\n    list_all future_bounded\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "unfolding b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded\n     (Ands\n       (get_and_list (convert_multiway \\<phi>) @\n        get_and_list (convert_multiway \\<psi>))) =\n    list_all future_bounded\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  future_bounded (convert_multiway (And \\<phi> \\<psi>)) =\n  list_all future_bounded\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi>.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n         future_bounded (convert_multiway \\<psi>) =\n         future_bounded \\<psi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          future_bounded (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  future_bounded (And \\<phi> \\<psi>) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n  future_bounded (convert_multiway \\<psi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<psi>))\n  future_bounded (convert_multiway (And \\<phi> \\<psi>)) =\n  list_all future_bounded\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))", "show ?case"], ["proof (prove)\nusing this:\n  future_bounded (And \\<phi> \\<psi>) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n  future_bounded (convert_multiway \\<psi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<psi>))\n  future_bounded (convert_multiway (And \\<phi> \\<psi>)) =\n  list_all future_bounded\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway (And \\<phi> \\<psi>)) =\n    future_bounded (And \\<phi> \\<psi>)", "by simp"], ["proof (state)\nthis:\n  future_bounded (convert_multiway (And \\<phi> \\<psi>)) =\n  future_bounded (And \\<phi> \\<psi>)\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "case (And_Not \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n  future_bounded (convert_multiway \\<psi>) = future_bounded \\<psi>\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "let ?a = \"And \\<phi> (Neg \\<psi>)\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "let ?b = \"convert_multiway ?a\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "let ?c\\<phi> = \"convert_multiway \\<phi>\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "let ?c\\<psi> = \"convert_multiway \\<psi>\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "have b_def: \"?b = Ands (Neg ?c\\<psi> # get_and_list ?c\\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> (Neg \\<psi>)) =\n    Ands\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "using And_Not"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n  future_bounded (convert_multiway \\<psi>) = future_bounded \\<psi>\n\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> (Neg \\<psi>)) =\n    Ands\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by simp"], ["proof (state)\nthis:\n  convert_multiway (And \\<phi> (Neg \\<psi>)) =\n  Ands\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "have \"future_bounded ?a = (future_bounded ?c\\<phi> \\<and> future_bounded ?c\\<psi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (And \\<phi> (Neg \\<psi>)) =\n    (future_bounded (convert_multiway \\<phi>) \\<and>\n     future_bounded (convert_multiway \\<psi>))", "using And_Not"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n  future_bounded (convert_multiway \\<psi>) = future_bounded \\<psi>\n\ngoal (1 subgoal):\n 1. future_bounded (And \\<phi> (Neg \\<psi>)) =\n    (future_bounded (convert_multiway \\<phi>) \\<and>\n     future_bounded (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  future_bounded (And \\<phi> (Neg \\<psi>)) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "moreover"], ["proof (state)\nthis:\n  future_bounded (And \\<phi> (Neg \\<psi>)) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "have \"future_bounded ?c\\<phi> = list_all future_bounded (get_and_list ?c\\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway \\<phi>) =\n    list_all future_bounded (get_and_list (convert_multiway \\<phi>))", "using \\<open>safe_formula \\<phi>\\<close>"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway \\<phi>) =\n    list_all future_bounded (get_and_list (convert_multiway \\<phi>))", "by (simp add: future_bounded_get_and safe_convert_multiway)"], ["proof (state)\nthis:\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "moreover"], ["proof (state)\nthis:\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "have \"future_bounded ?b = list_all future_bounded (Neg ?c\\<psi> # get_and_list ?c\\<phi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n    list_all future_bounded\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "unfolding b_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. future_bounded\n     (Ands\n       (Neg (convert_multiway \\<psi>) #\n        get_and_list (convert_multiway \\<phi>))) =\n    list_all future_bounded\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by (simp add: list.pred_map o_def)"], ["proof (state)\nthis:\n  future_bounded (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n  list_all future_bounded\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         future_bounded (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              future_bounded (convert_multiway a) = future_bounded a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                          future_bounded (Ands l)\nA total of 22 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  future_bounded (And \\<phi> (Neg \\<psi>)) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n  future_bounded (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n  list_all future_bounded\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))", "show ?case"], ["proof (prove)\nusing this:\n  future_bounded (And \\<phi> (Neg \\<psi>)) =\n  (future_bounded (convert_multiway \\<phi>) \\<and>\n   future_bounded (convert_multiway \\<psi>))\n  future_bounded (convert_multiway \\<phi>) =\n  list_all future_bounded (get_and_list (convert_multiway \\<phi>))\n  future_bounded (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n  list_all future_bounded\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n    future_bounded (And \\<phi> (Neg \\<psi>))", "by auto"], ["proof (state)\nthis:\n  future_bounded (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n  future_bounded (And \\<phi> (Neg \\<psi>))\n\ngoal (21 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 21 subgoals...", "case (MatchP I r)"], ["proof (state)\nthis:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n\ngoal (21 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 21 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway (MatchP I r)) =\n    future_bounded (MatchP I r)", "by (fastforce simp: atms_def regex.pred_set regex.set_map ball_Un\n        elim: safe_regex_safe_formula[THEN disjE_Not2])"], ["proof (state)\nthis:\n  future_bounded (convert_multiway (MatchP I r)) =\n  future_bounded (MatchP I r)\n\ngoal (20 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 20 subgoals...", "case (MatchF I r)"], ["proof (state)\nthis:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n\ngoal (20 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 20 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>\n\ngoal (1 subgoal):\n 1. future_bounded (convert_multiway (MatchF I r)) =\n    future_bounded (MatchF I r)", "by (fastforce simp: atms_def regex.pred_set regex.set_map ball_Un\n        elim: safe_regex_safe_formula[THEN disjE_Not2])"], ["proof (state)\nthis:\n  future_bounded (convert_multiway (MatchF I r)) =\n  future_bounded (MatchF I r)\n\ngoal (19 subgoals):\n 1. \\<And>c d.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Const d))) =\n       future_bounded (formula.Eq (Const c) (Const d))\n 2. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Const c) (Var x))) =\n       future_bounded (formula.Eq (Const c) (Var x))\n 3. \\<And>c x.\n       future_bounded (convert_multiway (formula.Eq (Var x) (Const c))) =\n       future_bounded (formula.Eq (Var x) (Const c))\n 4. \\<And>x.\n       future_bounded\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       future_bounded (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       future_bounded (convert_multiway (Pred e ts)) =\n       future_bounded (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi>.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        future_bounded (convert_multiway \\<phi>) = future_bounded \\<phi>;\n        future_bounded (convert_multiway \\<psi>) =\n        future_bounded \\<psi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         future_bounded (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi>.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        future_bounded (convert_multiway \\<phi>) =\n        future_bounded \\<phi>\\<rbrakk>\n       \\<Longrightarrow> future_bounded\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         future_bounded (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             future_bounded (convert_multiway a) = future_bounded a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> future_bounded (convert_multiway (Ands l)) =\n                         future_bounded (Ands l)\n 10. \\<And>\\<phi>.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         future_bounded (convert_multiway \\<phi>) =\n         future_bounded \\<phi>\\<rbrakk>\n        \\<Longrightarrow> future_bounded (convert_multiway (Neg \\<phi>)) =\n                          future_bounded (Neg \\<phi>)\nA total of 19 subgoals...", "qed auto"], ["", "lemma sat_convert_multiway: \"safe_formula \\<phi> \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway \\<phi>) \\<longleftrightarrow> sat \\<sigma> V v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. safe_formula \\<phi> \\<Longrightarrow>\n    sat \\<sigma> V v i (convert_multiway \\<phi>) = sat \\<sigma> V v i \\<phi>", "proof (induction \\<phi> arbitrary: v i rule: safe_formula_induct)"], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "case (And_safe \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?a = \"And \\<phi> \\<psi>\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?b = \"convert_multiway ?a\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?la = \"get_and_list (convert_multiway \\<phi>)\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?lb = \"get_and_list (convert_multiway \\<psi>)\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "let ?sat = \"sat \\<sigma> V v i\""], ["proof (state)\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have b_def: \"?b = Ands (?la @ ?lb)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> \\<psi>) =\n    Ands\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "using And_safe"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> \\<psi>) =\n    Ands\n     (get_and_list (convert_multiway \\<phi>) @\n      get_and_list (convert_multiway \\<psi>))", "by simp"], ["proof (state)\nthis:\n  convert_multiway (And \\<phi> \\<psi>) =\n  Ands\n   (get_and_list (convert_multiway \\<phi>) @\n    get_and_list (convert_multiway \\<psi>))\n\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have \"list_all ?sat ?la \\<longleftrightarrow> ?sat \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n    sat \\<sigma> V v i \\<phi>", "using And_safe sat_get_and"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n  sat ?\\<sigma> ?V ?v ?i ?\\<phi> =\n  list_all (sat ?\\<sigma> ?V ?v ?i) (get_and_list ?\\<phi>)\n\ngoal (1 subgoal):\n 1. list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n    sat \\<sigma> V v i \\<phi>", "by blast"], ["proof (state)\nthis:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "moreover"], ["proof (state)\nthis:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "have \"list_all ?sat ?lb \\<longleftrightarrow> ?sat \\<psi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<psi>)) =\n    sat \\<sigma> V v i \\<psi>", "using And_safe sat_get_and"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n  sat ?\\<sigma> ?V ?v ?i ?\\<phi> =\n  list_all (sat ?\\<sigma> ?V ?v ?i) (get_and_list ?\\<phi>)\n\ngoal (1 subgoal):\n 1. list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<psi>)) =\n    sat \\<sigma> V v i \\<psi>", "by blast"], ["proof (state)\nthis:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<psi>)) =\n  sat \\<sigma> V v i \\<psi>\n\ngoal (23 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>; safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 10. \\<And>\\<phi> \\<psi> v i.\n        \\<lbrakk>safe_formula \\<phi>;\n         \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n         \\<not> safe_formula (Neg \\<psi>);\n         fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n         \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<psi>) =\n            sat \\<sigma> V v i \\<psi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                          sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\nA total of 23 subgoals...", "ultimately"], ["proof (chain)\npicking this:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<psi>)) =\n  sat \\<sigma> V v i \\<psi>", "show ?case"], ["proof (prove)\nusing this:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<psi>)) =\n  sat \\<sigma> V v i \\<psi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (And \\<phi> \\<psi>)) =\n    sat \\<sigma> V v i (And \\<phi> \\<psi>)", "using And_safe"], ["proof (prove)\nusing this:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<psi>)) =\n  sat \\<sigma> V v i \\<psi>\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) \\<psi>\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (And \\<phi> \\<psi>)) =\n    sat \\<sigma> V v i (And \\<phi> \\<psi>)", "by (auto simp: list.pred_set)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (convert_multiway (And \\<phi> \\<psi>)) =\n  sat \\<sigma> V v i (And \\<phi> \\<psi>)\n\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "next"], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "case (And_Not \\<phi> \\<psi>)"], ["proof (state)\nthis:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "let ?a = \"And \\<phi> (Neg \\<psi>)\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "let ?b = \"convert_multiway ?a\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "let ?la = \"get_and_list (convert_multiway \\<phi>)\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "let ?lb = \"convert_multiway \\<psi>\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "let ?sat = \"sat \\<sigma> V v i\""], ["proof (state)\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "have b_def: \"?b = Ands (Neg ?lb # ?la)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> (Neg \\<psi>)) =\n    Ands\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "using And_Not"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n\ngoal (1 subgoal):\n 1. convert_multiway (And \\<phi> (Neg \\<psi>)) =\n    Ands\n     (Neg (convert_multiway \\<psi>) #\n      get_and_list (convert_multiway \\<phi>))", "by simp"], ["proof (state)\nthis:\n  convert_multiway (And \\<phi> (Neg \\<psi>)) =\n  Ands\n   (Neg (convert_multiway \\<psi>) # get_and_list (convert_multiway \\<phi>))\n\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "have \"list_all ?sat ?la \\<longleftrightarrow> ?sat \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n    sat \\<sigma> V v i \\<phi>", "using And_Not sat_get_and"], ["proof (prove)\nusing this:\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n  sat ?\\<sigma> ?V ?v ?i ?\\<phi> =\n  list_all (sat ?\\<sigma> ?V ?v ?i) (get_and_list ?\\<phi>)\n\ngoal (1 subgoal):\n 1. list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n    sat \\<sigma> V v i \\<phi>", "by blast"], ["proof (state)\nthis:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n\ngoal (22 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>);\n        \\<not> safe_formula (Neg \\<psi>);\n        fv (Neg \\<psi>) \\<subseteq> fv \\<phi>;\n        \\<not> is_constraint (Neg \\<psi>); safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n                         sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n 10. \\<And>l pos neg v i.\n        \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n         list_all safe_formula pos;\n         list_all safe_formula (map remove_neg neg);\n         \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          pos;\n         list_all\n          (\\<lambda>a.\n              \\<forall>x xa.\n                 sat \\<sigma> V x xa (convert_multiway a) =\n                 sat \\<sigma> V x xa a)\n          (map remove_neg neg)\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                          sat \\<sigma> V v i (Ands l)\nA total of 22 subgoals...", "then"], ["proof (chain)\npicking this:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n    sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))", "using And_Not"], ["proof (prove)\nusing this:\n  list_all (sat \\<sigma> V v i) (get_and_list (convert_multiway \\<phi>)) =\n  sat \\<sigma> V v i \\<phi>\n  safe_formula \\<phi>\n  \\<not> safe_assignment (fv \\<phi>) (Neg \\<psi>)\n  \\<not> safe_formula (Neg \\<psi>)\n  fv (Neg \\<psi>) \\<subseteq> fv \\<phi>\n  \\<not> is_constraint (Neg \\<psi>)\n  safe_formula \\<psi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<psi>) =\n  sat \\<sigma> V ?v ?i \\<psi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n    sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))", "by (auto simp: list.pred_set)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (convert_multiway (And \\<phi> (Neg \\<psi>))) =\n  sat \\<sigma> V v i (And \\<phi> (Neg \\<psi>))\n\ngoal (21 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 21 subgoals...", "next"], ["proof (state)\ngoal (21 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 21 subgoals...", "case (Agg y \\<omega> b f \\<phi>)"], ["proof (state)\nthis:\n  y + b \\<notin> fv \\<phi>\n  {0..<b} \\<subseteq> fv \\<phi>\n  fv_trm f \\<subseteq> fv \\<phi>\n  safe_formula \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n\ngoal (21 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 21 subgoals...", "then"], ["proof (chain)\npicking this:\n  y + b \\<notin> fv \\<phi>\n  {0..<b} \\<subseteq> fv \\<phi>\n  fv_trm f \\<subseteq> fv \\<phi>\n  safe_formula \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>", "show ?case"], ["proof (prove)\nusing this:\n  y + b \\<notin> fv \\<phi>\n  {0..<b} \\<subseteq> fv \\<phi>\n  fv_trm f \\<subseteq> fv \\<phi>\n  safe_formula \\<phi>\n  sat \\<sigma> V ?v ?i (convert_multiway \\<phi>) =\n  sat \\<sigma> V ?v ?i \\<phi>\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (Agg y \\<omega> b f \\<phi>)) =\n    sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>)", "by (simp add: nfv_def fv_convert_multiway cong: conj_cong)"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (convert_multiway (Agg y \\<omega> b f \\<phi>)) =\n  sat \\<sigma> V v i (Agg y \\<omega> b f \\<phi>)\n\ngoal (20 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 20 subgoals...", "next"], ["proof (state)\ngoal (20 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 20 subgoals...", "case (MatchP I r)"], ["proof (state)\nthis:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>\n\ngoal (20 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 20 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>", "have \"Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) = Regex.match (sat \\<sigma> V v) r\""], ["proof (prove)\nusing this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n    Regex.match (sat \\<sigma> V v) r", "unfolding match_map_regex"], ["proof (prove)\nusing this:\n  safe_regex Past Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>\n\ngoal (1 subgoal):\n 1. Regex.match (\\<lambda>k z. sat \\<sigma> V v k (convert_multiway z)) r =\n    Regex.match (sat \\<sigma> V v) r", "by (intro Regex.match_fv_cong)\n      (auto 0 4 simp: atms_def elim!: disjE_Not2 dest!: safe_regex_safe_formula)"], ["proof (state)\nthis:\n  Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n  Regex.match (sat \\<sigma> V v) r\n\ngoal (20 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 20 subgoals...", "then"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n  Regex.match (sat \\<sigma> V v) r", "show ?case"], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n  Regex.match (sat \\<sigma> V v) r\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (MatchP I r)) =\n    sat \\<sigma> V v i (MatchP I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (convert_multiway (MatchP I r)) =\n  sat \\<sigma> V v i (MatchP I r)\n\ngoal (19 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 19 subgoals...", "next"], ["proof (state)\ngoal (19 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 19 subgoals...", "case (MatchF I r)"], ["proof (state)\nthis:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>\n\ngoal (19 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 19 subgoals...", "then"], ["proof (chain)\npicking this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>", "have \"Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) = Regex.match (sat \\<sigma> V v) r\""], ["proof (prove)\nusing this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>\n\ngoal (1 subgoal):\n 1. Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n    Regex.match (sat \\<sigma> V v) r", "unfolding match_map_regex"], ["proof (prove)\nusing this:\n  safe_regex Futu Strict r\n  \\<forall>\\<phi>\\<in>atms r.\n     \\<forall>x xa.\n        sat \\<sigma> V x xa (convert_multiway \\<phi>) =\n        sat \\<sigma> V x xa \\<phi>\n\ngoal (1 subgoal):\n 1. Regex.match (\\<lambda>k z. sat \\<sigma> V v k (convert_multiway z)) r =\n    Regex.match (sat \\<sigma> V v) r", "by (intro Regex.match_fv_cong)\n      (auto 0 4 simp: atms_def elim!: disjE_Not2 dest!: safe_regex_safe_formula)"], ["proof (state)\nthis:\n  Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n  Regex.match (sat \\<sigma> V v) r\n\ngoal (19 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 19 subgoals...", "then"], ["proof (chain)\npicking this:\n  Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n  Regex.match (sat \\<sigma> V v) r", "show ?case"], ["proof (prove)\nusing this:\n  Regex.match (sat \\<sigma> V v) (convert_multiway_regex r) =\n  Regex.match (sat \\<sigma> V v) r\n\ngoal (1 subgoal):\n 1. sat \\<sigma> V v i (convert_multiway (MatchF I r)) =\n    sat \\<sigma> V v i (MatchF I r)", "by auto"], ["proof (state)\nthis:\n  sat \\<sigma> V v i (convert_multiway (MatchF I r)) =\n  sat \\<sigma> V v i (MatchF I r)\n\ngoal (18 subgoals):\n 1. \\<And>c d v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Const d))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Const d))\n 2. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Const c) (Var x))) =\n       sat \\<sigma> V v i (formula.Eq (Const c) (Var x))\n 3. \\<And>c x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (formula.Eq (Var x) (Const c))) =\n       sat \\<sigma> V v i (formula.Eq (Var x) (Const c))\n 4. \\<And>x v i.\n       sat \\<sigma> V v i\n        (convert_multiway (Neg (formula.Eq (Var x) (Var x)))) =\n       sat \\<sigma> V v i (Neg (formula.Eq (Var x) (Var x)))\n 5. \\<And>e ts v i.\n       \\<forall>t\\<in>set ts. is_Var t \\<or> is_Const t \\<Longrightarrow>\n       sat \\<sigma> V v i (convert_multiway (Pred e ts)) =\n       sat \\<sigma> V v i (Pred e ts)\n 6. \\<And>p \\<phi> \\<psi> v i.\n       \\<lbrakk>{0..<nfv \\<phi>} \\<subseteq> fv \\<phi>; safe_formula \\<phi>;\n        safe_formula \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<psi>) =\n           sat \\<sigma> V v i \\<psi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (formula.Let p \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (formula.Let p \\<phi> \\<psi>)\n 7. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>; safe_assignment (fv \\<phi>) \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 8. \\<And>\\<phi> \\<psi> v i.\n       \\<lbrakk>safe_formula \\<phi>;\n        \\<not> safe_assignment (fv \\<phi>) \\<psi>;\n        \\<not> safe_formula \\<psi>; fv \\<psi> \\<subseteq> fv \\<phi>;\n        is_constraint \\<psi>;\n        \\<And>v i.\n           sat \\<sigma> V v i (convert_multiway \\<phi>) =\n           sat \\<sigma> V v i \\<phi>\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i\n                          (convert_multiway (And \\<phi> \\<psi>)) =\n                         sat \\<sigma> V v i (And \\<phi> \\<psi>)\n 9. \\<And>l pos neg v i.\n       \\<lbrakk>(pos, neg) = partition safe_formula l; pos \\<noteq> [];\n        list_all safe_formula pos;\n        list_all safe_formula (map remove_neg neg);\n        \\<Union> (fv ` set neg) \\<subseteq> \\<Union> (fv ` set pos);\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         pos;\n        list_all\n         (\\<lambda>a.\n             \\<forall>x xa.\n                sat \\<sigma> V x xa (convert_multiway a) =\n                sat \\<sigma> V x xa a)\n         (map remove_neg neg)\\<rbrakk>\n       \\<Longrightarrow> sat \\<sigma> V v i (convert_multiway (Ands l)) =\n                         sat \\<sigma> V v i (Ands l)\n 10. \\<And>\\<phi> v i.\n        \\<lbrakk>fv \\<phi> = {}; safe_formula \\<phi>;\n         \\<And>v i.\n            sat \\<sigma> V v i (convert_multiway \\<phi>) =\n            sat \\<sigma> V v i \\<phi>\\<rbrakk>\n        \\<Longrightarrow> sat \\<sigma> V v i\n                           (convert_multiway (Neg \\<phi>)) =\n                          sat \\<sigma> V v i (Neg \\<phi>)\nA total of 18 subgoals...", "qed (auto cong: nat.case_cong)"], ["", "end"], ["", "(*context*)"], ["", "interpretation Formula_slicer: abstract_slicer \"relevant_events \\<phi>\" for \\<phi>"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "lemma sat_slice_iff:\n  assumes \"v \\<in> S\"\n  shows \"Formula.sat \\<sigma> V v i \\<phi> \\<longleftrightarrow> Formula.sat (Formula_slicer.slice \\<phi> S \\<sigma>) V v i \\<phi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Formula.sat \\<sigma> V v i \\<phi> =\n    Formula.sat\n     (map_\\<Gamma> (\\<lambda>D. D \\<inter> relevant_events \\<phi> S)\n       \\<sigma>)\n     V v i \\<phi>", "by (rule sat_slice_strong[OF assms]) auto"], ["", "lemma Neg_splits:\n  \"P (case \\<phi> of formula.Neg \\<psi> \\<Rightarrow> f \\<psi> | \\<phi> \\<Rightarrow> g \\<phi>) =\n   ((\\<forall>\\<psi>. \\<phi> = formula.Neg \\<psi> \\<longrightarrow> P (f \\<psi>)) \\<and> ((\\<not> Formula.is_Neg \\<phi>) \\<longrightarrow> P (g \\<phi>)))\"\n  \"P (case \\<phi> of formula.Neg \\<psi> \\<Rightarrow> f \\<psi> | _ \\<Rightarrow> g \\<phi>) =\n   (\\<not> ((\\<exists>\\<psi>. \\<phi> = formula.Neg \\<psi> \\<and> \\<not> P (f \\<psi>)) \\<or> ((\\<not> Formula.is_Neg \\<phi>) \\<and> \\<not> P (g \\<phi>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (case \\<phi> of\n       formula.Pred literal list \\<Rightarrow> g (formula.Pred literal list)\n       | formula.Let literal formula1 formula2 \\<Rightarrow>\n           g (formula.Let literal formula1 formula2)\n       | formula.Eq trm1 trm2 \\<Rightarrow> g (formula.Eq trm1 trm2)\n       | formula.Less trm1 trm2 \\<Rightarrow> g (formula.Less trm1 trm2)\n       | formula.LessEq trm1 trm2 \\<Rightarrow> g (formula.LessEq trm1 trm2)\n       | formula.Neg \\<psi> \\<Rightarrow> f \\<psi>\n       | formula.Or formula1 formula2 \\<Rightarrow>\n           g (formula.Or formula1 formula2)\n       | formula.And formula1 formula2 \\<Rightarrow>\n           g (formula.And formula1 formula2)\n       | formula.Ands list \\<Rightarrow> g (formula.Ands list)\n       | formula.Exists formula \\<Rightarrow> g (formula.Exists formula)\n       | formula.Agg nat1 prod nat2 trm formula \\<Rightarrow>\n           g (formula.Agg nat1 prod nat2 trm formula)\n       | formula.Prev \\<I> formula \\<Rightarrow>\n           g (formula.Prev \\<I> formula)\n       | formula.Next \\<I> formula \\<Rightarrow>\n           g (formula.Next \\<I> formula)\n       | formula.Since formula1 \\<I> formula2 \\<Rightarrow>\n           g (formula.Since formula1 \\<I> formula2)\n       | formula.Until formula1 \\<I> formula2 \\<Rightarrow>\n           g (formula.Until formula1 \\<I> formula2)\n       | formula.MatchF \\<I> regex \\<Rightarrow>\n           g (formula.MatchF \\<I> regex)\n       | formula.MatchP \\<I> regex \\<Rightarrow>\n           g (formula.MatchP \\<I> regex)) =\n    ((\\<forall>\\<psi>.\n         \\<phi> = formula.Neg \\<psi> \\<longrightarrow> P (f \\<psi>)) \\<and>\n     (\\<not> formula.is_Neg \\<phi> \\<longrightarrow> P (g \\<phi>))) &&&\n    P (case \\<phi> of formula.Neg \\<psi> \\<Rightarrow> f \\<psi>\n       | _ \\<Rightarrow> g \\<phi>) =\n    (\\<not> ((\\<exists>\\<psi>.\n                 \\<phi> = formula.Neg \\<psi> \\<and>\n                 \\<not> P (f \\<psi>)) \\<or>\n             \\<not> formula.is_Neg \\<phi> \\<and> \\<not> P (g \\<phi>)))", "by (cases \\<phi>; auto simp: Formula.is_Neg_def)+"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}