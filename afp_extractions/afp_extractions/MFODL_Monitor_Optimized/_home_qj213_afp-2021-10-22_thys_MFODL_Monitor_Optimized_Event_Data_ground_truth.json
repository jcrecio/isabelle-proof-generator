{"file_name": "/home/qj213/afp-2021-10-22/thys/MFODL_Monitor_Optimized/Event_Data.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/MFODL_Monitor_Optimized", "problem_names": ["lemma \"b \\<noteq> 0 \\<Longrightarrow> div_to_zero a b * b + mod_to_zero a b = a\""], "translations": [["", "lemma \"b \\<noteq> 0 \\<Longrightarrow> div_to_zero a b * b + mod_to_zero a b = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow> div_to_zero a b * b + mod_to_zero a b = a", "unfolding div_to_zero_def mod_to_zero_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. b \\<noteq> 0 \\<Longrightarrow>\n    (if (a < 0) \\<noteq> (b < 0) then - fst (Code_Numeral.divmod_abs a b)\n     else fst (Code_Numeral.divmod_abs a b)) *\n    b +\n    (if a < 0 then - snd (Code_Numeral.divmod_abs a b)\n     else snd (Code_Numeral.divmod_abs a b)) =\n    a", "by (auto simp: minus_mod_eq_mult_div[symmetric] div_minus_right mod_minus_right ac_simps)"], ["", "datatype event_data = EInt integer | EFloat double | EString String.literal"], ["", "derive (eq) ceq event_data"], ["", "derive ccompare event_data"], ["", "instantiation event_data :: \"{ord, plus, minus, uminus, times, divide, modulo}\"\nbegin"], ["", "fun less_eq_event_data where\n  \"EInt x \\<le> EInt y \\<longleftrightarrow> x \\<le> y\"\n| \"EInt x \\<le> EFloat y \\<longleftrightarrow> double_of_integer x \\<le> y\"\n| \"EInt _ \\<le> EString _ \\<longleftrightarrow> False\"\n| \"EFloat x \\<le> EInt y \\<longleftrightarrow> x \\<le> double_of_integer y\"\n| \"EFloat x \\<le> EFloat y \\<longleftrightarrow> x \\<le> y\"\n| \"EFloat _ \\<le> EString _ \\<longleftrightarrow> False\"\n| \"EString x \\<le> EString y \\<longleftrightarrow> lexordp_eq (String.explode x) (String.explode y)\"\n| \"EString _ \\<le> _ \\<longleftrightarrow> False\""], ["", "definition less_event_data :: \"event_data \\<Rightarrow> event_data \\<Rightarrow> bool\"  where\n  \"less_event_data x y \\<longleftrightarrow> x \\<le> y \\<and> \\<not> y \\<le> x\""], ["", "fun plus_event_data where\n  \"EInt x + EInt y = EInt (x + y)\"\n| \"EInt x + EFloat y = EFloat (double_of_integer x + y)\"\n| \"EFloat x + EInt y = EFloat (x + double_of_integer y)\"\n| \"EFloat x + EFloat y = EFloat (x + y)\"\n| \"(_::event_data) + _ = EFloat nan\""], ["", "fun minus_event_data where\n  \"EInt x - EInt y = EInt (x - y)\"\n| \"EInt x - EFloat y = EFloat (double_of_integer x - y)\"\n| \"EFloat x - EInt y = EFloat (x - double_of_integer y)\"\n| \"EFloat x - EFloat y = EFloat (x - y)\"\n| \"(_::event_data) - _ = EFloat nan\""], ["", "fun uminus_event_data where\n  \"- EInt x = EInt (- x)\"\n| \"- EFloat x = EFloat (- x)\"\n| \"- (_::event_data) = EFloat nan\""], ["", "fun times_event_data where\n  \"EInt x * EInt y = EInt (x * y)\"\n| \"EInt x * EFloat y = EFloat (double_of_integer x * y)\"\n| \"EFloat x * EInt y = EFloat (x * double_of_integer y)\"\n| \"EFloat x * EFloat y = EFloat (x * y)\"\n| \"(_::event_data) * _ = EFloat nan\""], ["", "fun divide_event_data where\n  \"EInt x div EInt y = EInt (div_to_zero x y)\"\n| \"EInt x div EFloat y = EFloat (double_of_integer x div y)\"\n| \"EFloat x div EInt y = EFloat (x div double_of_integer y)\"\n| \"EFloat x div EFloat y = EFloat (x div y)\"\n| \"(_::event_data) div _ = EFloat nan\""], ["", "fun modulo_event_data where\n  \"EInt x mod EInt y = EInt (mod_to_zero x y)\"\n| \"(_::event_data) mod _ = EFloat nan\""], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. (OFCLASS(event_data, minus_class) &&&\n     OFCLASS(event_data, plus_class)) &&&\n    OFCLASS(event_data, uminus_class) &&&\n    OFCLASS(event_data, ord_class) &&& OFCLASS(event_data, modulo_class)", ".."], ["", "end"], ["", "primrec integer_of_event_data :: \"event_data \\<Rightarrow> integer\" where\n  \"integer_of_event_data (EInt x) = x\"\n| \"integer_of_event_data (EFloat x) = integer_of_double x\"\n| \"integer_of_event_data (EString _) = 0\""], ["", "primrec double_of_event_data :: \"event_data \\<Rightarrow> double\" where\n  \"double_of_event_data (EInt x) = double_of_integer x\"\n| \"double_of_event_data (EFloat x) = x\"\n| \"double_of_event_data (EString _) = nan\""], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}