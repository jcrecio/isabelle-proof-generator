{"file_name": "/home/qj213/afp-2021-10-22/thys/Logging_Independent_Anonymity/Anonymity.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Logging_Independent_Anonymity", "problem_names": ["lemma parts_union_1:\n \"parts (H \\<union> H') \\<subseteq> parts H \\<union> parts H'\"", "lemma parts_union_2:\n \"parts H \\<union> parts H' \\<subseteq> parts (H \\<union> H')\"", "lemma parts_crypt_1:\n \"parts {Crypt K X} \\<subseteq> insert (Crypt K X) (parts {X})\"", "lemma parts_crypt_2:\n \"insert (Crypt K X) (parts {X}) \\<subseteq> parts {Crypt K X}\"", "lemma parts_mpair_1:\n \"parts {\\<lbrace>X, Y\\<rbrace>} \\<subseteq> insert \\<lbrace>X, Y\\<rbrace> (parts {X} \\<union> parts {Y})\"", "lemma parts_mpair_2:\n \"insert \\<lbrace>X, Y\\<rbrace> (parts {X} \\<union> parts {Y}) \\<subseteq> parts {\\<lbrace>X, Y\\<rbrace>}\"", "theorem id_anonymous [rotated]:\n \"\\<lbrakk>m \\<notin> bad_sec_prik \\<or> \\<not> (\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id);\n    s\\<^sub>0 \\<Turnstile> s; (n, m) \\<notin> bad_id; n \\<notin> bad_tok_prik\\<rbrakk> \\<Longrightarrow>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<notin> spied s\""], "translations": [["", "lemma parts_union_1:\n \"parts (H \\<union> H') \\<subseteq> parts H \\<union> parts H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (H \\<union> H') \\<subseteq> parts H \\<union> parts H'", "by (rule subsetI, erule parts.induct, auto)"], ["", "lemma parts_union_2:\n \"parts H \\<union> parts H' \\<subseteq> parts (H \\<union> H')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts H \\<union> parts H' \\<subseteq> parts (H \\<union> H')", "by (rule subsetI, erule UnE, erule_tac [!] parts.induct, auto)"], ["", "proposition parts_union [simp]:\n \"parts (H \\<union> H') = parts H \\<union> parts H'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (H \\<union> H') = parts H \\<union> parts H'", "by (rule equalityI, rule parts_union_1, rule parts_union_2)"], ["", "proposition parts_insert:\n \"parts (insert X H) = parts_msg X \\<union> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts (insert X H) = parts_msg X \\<union> parts H", "by (simp only: insert_def parts_union, subst parts_msg_def, simp)"], ["", "proposition parts_msg_mono:\n \"X \\<in> H \\<Longrightarrow> parts_msg X \\<subseteq> parts H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> H \\<Longrightarrow> parts_msg X \\<subseteq> parts H", "by (subgoal_tac \"{X} \\<subseteq> H\", subst parts_msg_def, erule parts_mono, simp)"], ["", "proposition parts_msg_agrkey [simp]:\n \"parts_msg (AgrKey K) = {AgrKey K}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts_msg (AgrKey K) = {AgrKey K}", "by (subst parts_msg_def, rule equalityI, rule subsetI, erule parts.induct, auto)"], ["", "proposition parts_msg_hash [simp]:\n \"parts_msg (Hash X) = {Hash X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts_msg (Hash X) = {Hash X}", "by (subst parts_msg_def, rule equalityI, rule subsetI, erule parts.induct, auto)"], ["", "lemma parts_crypt_1:\n \"parts {Crypt K X} \\<subseteq> insert (Crypt K X) (parts {X})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts {Crypt K X} \\<subseteq> insert (Crypt K X) (parts {X})", "by (rule subsetI, erule parts.induct, auto)"], ["", "lemma parts_crypt_2:\n \"insert (Crypt K X) (parts {X}) \\<subseteq> parts {Crypt K X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert (Crypt K X) (parts {X}) \\<subseteq> parts {Crypt K X}", "by (rule subsetI, simp, erule disjE, blast, erule parts.induct, auto)"], ["", "proposition parts_msg_crypt [simp]:\n \"parts_msg (Crypt K X) = insert (Crypt K X) (parts_msg X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts_msg (Crypt K X) = insert (Crypt K X) (parts_msg X)", "by (simp add: parts_msg_def, rule equalityI, rule parts_crypt_1, rule parts_crypt_2)"], ["", "lemma parts_mpair_1:\n \"parts {\\<lbrace>X, Y\\<rbrace>} \\<subseteq> insert \\<lbrace>X, Y\\<rbrace> (parts {X} \\<union> parts {Y})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts {\\<lbrace>X, Y\\<rbrace>}\n    \\<subseteq> insert \\<lbrace>X, Y\\<rbrace> (parts {X} \\<union> parts {Y})", "by (rule subsetI, erule parts.induct, auto)"], ["", "lemma parts_mpair_2:\n \"insert \\<lbrace>X, Y\\<rbrace> (parts {X} \\<union> parts {Y}) \\<subseteq> parts {\\<lbrace>X, Y\\<rbrace>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert \\<lbrace>X, Y\\<rbrace> (parts {X} \\<union> parts {Y})\n    \\<subseteq> parts {\\<lbrace>X, Y\\<rbrace>}", "by (rule subsetI, simp, erule disjE, blast, erule disjE, erule_tac [!] parts.induct,\n auto)"], ["", "proposition parts_msg_mpair [simp]:\n \"parts_msg \\<lbrace>X, Y\\<rbrace> = insert \\<lbrace>X, Y\\<rbrace> (parts_msg X \\<union> parts_msg Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts_msg \\<lbrace>X, Y\\<rbrace> =\n    insert \\<lbrace>X, Y\\<rbrace> (parts_msg X \\<union> parts_msg Y)", "by (simp add: parts_msg_def, rule equalityI, rule parts_mpair_1, rule parts_mpair_2)"], ["", "proposition parts_msg_idinfo [simp]:\n \"parts_msg \\<langle>n, X\\<rangle> = {\\<langle>n, X\\<rangle>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. parts_msg \\<langle>n, X\\<rangle> = {\\<langle>n, X\\<rangle>}", "by (subst parts_msg_def, rule equalityI, rule subsetI, erule parts.induct, auto)"], ["", "proposition parts_msg_parts:\n \"\\<lbrakk>(A, X) \\<in> s; Y \\<in> parts_msg X\\<rbrakk> \\<Longrightarrow> Y \\<in> parts (used s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(A, X) \\<in> s; Y \\<in> parts_msg X\\<rbrakk>\n    \\<Longrightarrow> Y \\<in> parts (used s)", "by (subgoal_tac \"X \\<in> parts (used s)\", drule parts_msg_mono [of X], auto)"], ["", "proposition prikey_spied:\n \"\\<lbrakk>s\\<^sub>0 \\<Turnstile> s; PriKey K \\<in> parts (used s)\\<rbrakk> \\<Longrightarrow> PriKey K \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>0 \\<Turnstile> s;\n     PriKey K \\<in> parts (used s)\\<rbrakk>\n    \\<Longrightarrow> PriKey K \\<in> spied s", "by (induction rule: rtrancl_induct, subst (asm) parts_init,\n auto simp: rel_def parts_insert dest!: parts_msg_parts)"], ["", "proposition prikey_crypt [simplified]:\n \"\\<lbrakk>(Spy, Crypt K (PriKey K')) \\<in> s; s\\<^sub>0 \\<Turnstile> s\\<rbrakk> \\<Longrightarrow> PriKey K' \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, Crypt K (PriKey K')) \\<in> s;\n     s\\<^sub>0 \\<Turnstile> s\\<rbrakk>\n    \\<Longrightarrow> PriKey K' \\<in> spied s", "by (erule prikey_spied, blast)"], ["", "proposition prikey_mpair_fst [simplified]:\n \"\\<lbrakk>(Spy, \\<lbrace>PriKey K, Y\\<rbrace>) \\<in> s; s\\<^sub>0 \\<Turnstile> s\\<rbrakk> \\<Longrightarrow> PriKey K \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, \\<lbrace>PriKey K, Y\\<rbrace>) \\<in> s;\n     s\\<^sub>0 \\<Turnstile> s\\<rbrakk>\n    \\<Longrightarrow> PriKey K \\<in> spied s", "by (erule prikey_spied, blast)"], ["", "proposition prikey_mpair_snd [simplified]:\n \"\\<lbrakk>(Spy, \\<lbrace>Y, PriKey K\\<rbrace>) \\<in> s; s\\<^sub>0 \\<Turnstile> s\\<rbrakk> \\<Longrightarrow> PriKey K \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, \\<lbrace>Y, PriKey K\\<rbrace>) \\<in> s;\n     s\\<^sub>0 \\<Turnstile> s\\<rbrakk>\n    \\<Longrightarrow> PriKey K \\<in> spied s", "by (erule prikey_spied, blast)"], ["", "proposition rev_prikey_secret:\n \"s\\<^sub>0 \\<Turnstile> s \\<Longrightarrow> Rev_PriKey \\<notin> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>0 \\<Turnstile> s \\<Longrightarrow> Rev_PriKey \\<notin> spied s", "by (induction rule: rtrancl_induct, insert sec_prik_rev tok_prik_rev,\n auto simp: rel_def dest: prikey_crypt prikey_mpair_fst prikey_mpair_snd)"], ["", "proposition sec_prikey_secret:\n \"\\<lbrakk>s\\<^sub>0 \\<Turnstile> s; n \\<notin> bad_sec_prik\\<rbrakk> \\<Longrightarrow> Sec_PriKey n \\<notin> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>0 \\<Turnstile> s; n \\<notin> bad_sec_prik\\<rbrakk>\n    \\<Longrightarrow> Sec_PriKey n \\<notin> spied s", "by (induction rule: rtrancl_induct, insert sec_prik_inj sec_prik_tok_prik, auto simp:\n rel_def inj_on_def image_def dest: prikey_crypt prikey_mpair_fst prikey_mpair_snd)"], ["", "proposition tok_prikey_secret:\n \"\\<lbrakk>s\\<^sub>0 \\<Turnstile> s; n \\<notin> bad_tok_prik\\<rbrakk> \\<Longrightarrow> Tok_PriKey n \\<notin> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>0 \\<Turnstile> s; n \\<notin> bad_tok_prik\\<rbrakk>\n    \\<Longrightarrow> Tok_PriKey n \\<notin> spied s", "by (induction rule: rtrancl_induct, insert tok_prik_inj sec_prik_tok_prik, auto simp:\n rel_def inj_on_def image_def dest: prikey_crypt prikey_mpair_fst prikey_mpair_snd)"], ["", "proposition idinfo_spied:\n \"\\<lbrakk>s\\<^sub>0 \\<Turnstile> s; \\<langle>n, X\\<rangle> \\<in> parts (used s)\\<rbrakk> \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>0 \\<Turnstile> s;\n     \\<langle>n, X\\<rangle> \\<in> parts (used s)\\<rbrakk>\n    \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s", "by (induction rule: rtrancl_induct, subst (asm) parts_init,\n auto simp: rel_def parts_insert dest!: parts_msg_parts)"], ["", "proposition idinfo_crypt:\n \"\\<lbrakk>(Spy, Crypt K \\<langle>n, X\\<rangle>) \\<in> s; s\\<^sub>0 \\<Turnstile> s\\<rbrakk> \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, Crypt K \\<langle>n, X\\<rangle>) \\<in> s;\n     s\\<^sub>0 \\<Turnstile> s\\<rbrakk>\n    \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s", "by (erule idinfo_spied, blast)"], ["", "proposition idinfo_mpair_fst:\n \"\\<lbrakk>(Spy, \\<lbrace>\\<langle>n, X\\<rangle>, Y\\<rbrace>) \\<in> s; s\\<^sub>0 \\<Turnstile> s\\<rbrakk> \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, \\<lbrace>\\<langle>n, X\\<rangle>, Y\\<rbrace>) \\<in> s;\n     s\\<^sub>0 \\<Turnstile> s\\<rbrakk>\n    \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s", "by (erule idinfo_spied, blast)"], ["", "proposition idinfo_mpair_snd:\n \"\\<lbrakk>(Spy, \\<lbrace>Y, \\<langle>n, X\\<rangle>\\<rbrace>) \\<in> s; s\\<^sub>0 \\<Turnstile> s\\<rbrakk> \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, \\<lbrace>Y, \\<langle>n, X\\<rangle>\\<rbrace>) \\<in> s;\n     s\\<^sub>0 \\<Turnstile> s\\<rbrakk>\n    \\<Longrightarrow> \\<langle>n, X\\<rangle> \\<in> spied s", "by (erule idinfo_spied, blast)"], ["", "proposition idinfo_hash_hash [rotated]:\n \"\\<lbrakk>s\\<^sub>0 \\<Turnstile> s; (Spy, \\<langle>n, Hash (Hash X)\\<rangle>) \\<in> s\\<rbrakk> \\<Longrightarrow> \\<langle>n, Hash X\\<rangle> \\<in> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>0 \\<Turnstile> s;\n     (Spy, \\<langle>n, Hash (Hash X)\\<rangle>) \\<in> s\\<rbrakk>\n    \\<Longrightarrow> \\<langle>n, Hash X\\<rangle> \\<in> spied s", "by (induction arbitrary: X rule: rtrancl_induct, auto simp: rel_def\n dest: idinfo_crypt idinfo_mpair_fst idinfo_mpair_snd)"], ["", "proposition sec_prik_eq:\n \"{Tok_PriK n, Sec_PriK m, Rev_PriK} =\n    {Tok_PriK n, Sec_PriK m', Rev_PriK} \\<Longrightarrow> m' = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {Tok_PriK n, Sec_PriK m, Rev_PriK} =\n    {Tok_PriK n, Sec_PriK m', Rev_PriK} \\<Longrightarrow>\n    m' = m", "by (erule equalityE, drule subsetD [where c = \"Sec_PriK m\"], simp, insert\n sec_prik_inj sec_prik_rev sec_prik_tok_prik, auto simp: inj_on_def image_def)"], ["", "proposition id_identified:\n  assumes\n    A: \"s\\<^sub>0 \\<Turnstile> s\" and\n    B: \"(n, m) \\<notin> bad_id\" and\n    C: \"n \\<notin> bad_tok_prik\" and\n    D: \"\\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied s\"\n  shows \"m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "let ?P\\<^sub>1 = \"\\<lambda>s. \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied s\""], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "let ?P\\<^sub>2 = \"\\<lambda>s. \\<exists>S. \\<langle>n, PubKey S\\<rangle> \\<in> spied s \\<and> Sec_PriK m \\<in> S\""], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "let ?P\\<^sub>3 = \"\\<lambda>S s. \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied s\""], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "let ?P\\<^sub>4 = \"\\<lambda>S s. \\<langle>n, PubKey S\\<rangle> \\<in> spied s \\<and> Rev_PriK \\<in> S \\<and>\n    (\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\""], ["proof (state)\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "have E: \"\\<forall>m. Sec_PriK m \\<noteq> Rev_PriK\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>m. Sec_PriK m \\<noteq> Rev_PriK", "by (rule allI, rule notI, subgoal_tac \"Rev_PriK \\<in> range Sec_PriK\",\n     simp add: sec_prik_rev, rule range_eqI, rule sym)"], ["proof (state)\nthis:\n  \\<forall>m. Sec_PriK m \\<noteq> Rev_PriK\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "have \"\\<exists>u v. s\\<^sub>0 \\<Turnstile> u \\<and> u \\<turnstile> v \\<and> v \\<Turnstile> s \\<and> \\<not> ?P\\<^sub>1 u \\<and> ?P\\<^sub>1 v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> s \\<and>\n       \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n       \\<notin> spied u \\<and>\n       \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v", "using A and B and D"], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> s\n  (n, m) \\<notin> bad_id\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied s\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> s \\<and>\n       \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n       \\<notin> spied u \\<and>\n       \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v", "by (rule_tac rtrancl_start, auto dest: sec_prik_eq)"], ["proof (state)\nthis:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> s \\<and>\n     \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "then"], ["proof (chain)\npicking this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> s \\<and>\n     \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v", "obtain u\\<^sub>1 v\\<^sub>1 where F: \"s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and> u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and> \\<not> ?P\\<^sub>1 u\\<^sub>1 \\<and> ?P\\<^sub>1 v\\<^sub>1\""], ["proof (prove)\nusing this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> s \\<and>\n     \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\n\ngoal (1 subgoal):\n 1. (\\<And>u\\<^sub>1 v\\<^sub>1.\n        s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n        u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n        \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n        \\<notin> spied u\\<^sub>1 \\<and>\n        \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n        \\<in> spied v\\<^sub>1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "moreover"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "from this"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1", "have G: \"\\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1", "by (auto simp: rel_def dest: idinfo_crypt idinfo_mpair_fst idinfo_mpair_snd\n     idinfo_hash_hash)"], ["proof (state)\nthis:\n  \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "ultimately"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n  \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1", "have \"\\<exists>u v. s\\<^sub>0 \\<Turnstile> u \\<and> u \\<turnstile> v \\<and> v \\<Turnstile> u\\<^sub>1 \\<and> \\<not> ?P\\<^sub>2 u \\<and> ?P\\<^sub>2 v\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n  \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>1 \\<and>\n       (\\<nexists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n           Sec_PriK m \\<in> S) \\<and>\n       (\\<exists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n           Sec_PriK m \\<in> S)", "using B and E"], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n  \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1\n  (n, m) \\<notin> bad_id\n  \\<forall>m. Sec_PriK m \\<noteq> Rev_PriK\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>1 \\<and>\n       (\\<nexists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n           Sec_PriK m \\<in> S) \\<and>\n       (\\<exists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n           Sec_PriK m \\<in> S)", "by (rule_tac rtrancl_start, insert\n     sec_prik_inj sec_prik_tok_prik, auto simp: inj_on_def image_def)"], ["proof (state)\nthis:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>1 \\<and>\n     (\\<nexists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n         Sec_PriK m \\<in> S) \\<and>\n     (\\<exists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n         Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "then"], ["proof (chain)\npicking this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>1 \\<and>\n     (\\<nexists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n         Sec_PriK m \\<in> S) \\<and>\n     (\\<exists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n         Sec_PriK m \\<in> S)", "obtain u\\<^sub>2 v\\<^sub>2 where H: \"s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and> u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and> \\<not> ?P\\<^sub>2 u\\<^sub>2 \\<and> ?P\\<^sub>2 v\\<^sub>2\""], ["proof (prove)\nusing this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>1 \\<and>\n     (\\<nexists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n         Sec_PriK m \\<in> S) \\<and>\n     (\\<exists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n         Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. (\\<And>u\\<^sub>2 v\\<^sub>2.\n        s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n        u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n        (\\<nexists>S.\n            \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n            Sec_PriK m \\<in> S) \\<and>\n        (\\<exists>S.\n            \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n            Sec_PriK m \\<in> S) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "moreover"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "from this"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)", "have \"Tok_PriKey n \\<notin> spied u\\<^sub>2\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. Tok_PriKey n \\<notin> spied u\\<^sub>2", "using C"], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n  n \\<notin> bad_tok_prik\n\ngoal (1 subgoal):\n 1. Tok_PriKey n \\<notin> spied u\\<^sub>2", "by (rule_tac tok_prikey_secret, simp)"], ["proof (state)\nthis:\n  Tok_PriKey n \\<notin> spied u\\<^sub>2\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "ultimately"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n  Tok_PriKey n \\<notin> spied u\\<^sub>2", "have \"Sec_PriKey m \\<in> spied u\\<^sub>2\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n  Tok_PriKey n \\<notin> spied u\\<^sub>2\n\ngoal (1 subgoal):\n 1. Sec_PriKey m \\<in> spied u\\<^sub>2", "proof (auto simp: rel_def dest: idinfo_crypt idinfo_mpair_fst idinfo_mpair_snd)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "fix S"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "assume \"(Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>) \\<in> u\\<^sub>2\""], ["proof (state)\nthis:\n  (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>) \\<in> u\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>) \\<in> u\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "assume I: \"Sec_PriK m \\<in> S\""], ["proof (state)\nthis:\n  Sec_PriK m \\<in> S\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "hence \"\\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\""], ["proof (prove)\nusing this:\n  Sec_PriK m \\<in> S\n\ngoal (1 subgoal):\n 1. \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0", "using B and E"], ["proof (prove)\nusing this:\n  Sec_PriK m \\<in> S\n  (n, m) \\<notin> bad_id\n  \\<forall>m. Sec_PriK m \\<noteq> Rev_PriK\n\ngoal (1 subgoal):\n 1. \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0", "by (insert sec_prik_inj sec_prik_tok_prik,\n       auto simp: inj_on_def image_def)"], ["proof (state)\nthis:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>) \\<in> u\\<^sub>2\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0", "have \"\\<exists>u v. s\\<^sub>0 \\<Turnstile> u \\<and> u \\<turnstile> v \\<and> v \\<Turnstile> u\\<^sub>2 \\<and> \\<not> ?P\\<^sub>3 S u \\<and> ?P\\<^sub>3 S v\""], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>) \\<in> u\\<^sub>2\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>2 \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v", "using H"], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>) \\<in> u\\<^sub>2\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>2 \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v", "by (rule_tac rtrancl_start, simp_all)"], ["proof (state)\nthis:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>2 \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "then"], ["proof (chain)\npicking this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>2 \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v", "obtain u\\<^sub>3 v\\<^sub>3 where \"s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and> u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and> v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n      \\<not> ?P\\<^sub>3 S u\\<^sub>3 \\<and> ?P\\<^sub>3 S v\\<^sub>3\""], ["proof (prove)\nusing this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>2 \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\n\ngoal (1 subgoal):\n 1. (\\<And>u\\<^sub>3 v\\<^sub>3.\n        s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n        u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n        v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n        \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n        \\<langle>n, Hash (PubKey S)\\<rangle>\n        \\<in> spied v\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "moreover"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "from this"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3", "have \"\\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>3\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>3", "by (auto simp: rel_def dest: idinfo_crypt idinfo_mpair_fst idinfo_mpair_snd\n       idinfo_hash_hash)"], ["proof (state)\nthis:\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "ultimately"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>3", "have \"\\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>2 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2", "by (rule_tac subsetD [of \"spied v\\<^sub>3\"], rule_tac spied_subset, simp)"], ["proof (state)\nthis:\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "hence \"Sec_PriK m \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2\n\ngoal (1 subgoal):\n 1. Sec_PriK m \\<notin> S", "using H"], ["proof (prove)\nusing this:\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. Sec_PriK m \\<notin> S", "by simp"], ["proof (state)\nthis:\n  Sec_PriK m \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<And>S.\n       \\<lbrakk>(Spy, AgrKey (PriK (Tok_PriK n))) \\<notin> u\\<^sub>2;\n        (insert (Spy, AgrKey (PubK {}))\n          (insert (Spy, AgrKey (PubK {Rev_PriK}))\n            ({Spy} \\<times>\n             ((\\<lambda>x. EncKey (SigK x)) ` bad_sigk \\<union>\n              (\\<lambda>x. AgrKey (PriK (Sec_PriK x))) `\n              bad_sec_prik \\<union>\n              (\\<lambda>x. AgrKey (PriK (Tok_PriK x))) `\n              bad_tok_prik \\<union>\n              range (\\<lambda>x. EncKey (VerK x)) \\<union>\n              range\n               (\\<lambda>x. AgrKey (PubK {Sec_PriK x, Rev_PriK})) \\<union>\n              range (\\<lambda>x. AgrKey (PubK {Tok_PriK x})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     AgrKey\n                      (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})) \\<union>\n              range\n               (\\<lambda>x.\n                   case x of\n                   (n, m) \\<Rightarrow>\n                     Hash\n                      (AgrKey\n                        (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))) \\<union>\n              range\n               (\\<lambda>x.\n                   \\<langle>x, AgrKey (PubK {Tok_PriK x})\\<rangle>) \\<union>\n              {\\<langle>n, AgrKey (PriK (Tok_PriK n))\\<rangle> |n.\n               n \\<in> bad_tok_prik} \\<union>\n              {\\<langle>n,\n                 AgrKey (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK})\\<rangle> |\n               n m. (n, m) \\<in> bad_id} \\<union>\n              {\\<langle>n,\n                 Hash\n                  (AgrKey\n                    (PubK {Tok_PriK n, Sec_PriK m, Rev_PriK}))\\<rangle> |\n               n m. (n, m) \\<in> bad_id}))),\n         u\\<^sub>2)\n        \\<in> ({(s, s').\n                \\<exists>m.\n                   s' =\n                   insert\n                    (Sector m,\n                     \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                       Sign m\n                        (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                    (insert\n                      (Spy,\n                       \\<lbrace>AgrKey (PubK {Sec_PriK m, Rev_PriK}),\n                         Sign m\n                          (AgrKey (PubK {Sec_PriK m, Rev_PriK}))\\<rbrace>)\n                      s)} \\<union>\n               {(s, s').\n                \\<exists>m n S.\n                   s' =\n                   insert\n                    (Token n, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                    (insert\n                      (Spy, Hash (AgrKey (PubK (insert (Tok_PriK n) S))))\n                      s) \\<and>\n                   \\<lbrace>AgrKey (PubK S),\n                     Sign m (AgrKey (PubK S))\\<rbrace>\n                   \\<in> used s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (S - {A}))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>A S.\n                   s' = insert (Spy, AgrKey (PubK (insert A S))) s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X.\n                   s' = insert (Spy, Hash X) s \\<and>\n                   (Spy, X) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, X) s \\<and>\n                   (Spy, Crypt K X) \\<in> s \\<and>\n                   (Spy, EncKey (InvK K)) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>K X.\n                   s' = insert (Spy, Crypt K X) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, EncKey K) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, X) (insert (Spy, Y) s) \\<and>\n                   (Spy, \\<lbrace>X, Y\\<rbrace>) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>X Y.\n                   s' = insert (Spy, \\<lbrace>X, Y\\<rbrace>) s \\<and>\n                   (Spy, X) \\<in> s \\<and> (Spy, Y) \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (S - {A}))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (S - {A}))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s \\<and>\n                   Tok_PriK n \\<in> S \\<and> Tok_PriK n \\<noteq> A} \\<union>\n               {(s, s').\n                \\<exists>n A S.\n                   s' =\n                   insert\n                    (Spy, \\<langle>n, AgrKey (PubK (insert A S))\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK A)) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK (insert A S))) \\<in> s \\<and>\n                   (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                   \\<in> s} \\<union>\n               {(s, s').\n                \\<exists>n S.\n                   s' =\n                   insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n                    s \\<and>\n                   (Spy, AgrKey (PriK (Tok_PriK n))) \\<in> s \\<and>\n                   (Spy, AgrKey (PubK S)) \\<in> s \\<and>\n                   Tok_PriK n \\<in> S} \\<union>\n               {(s, s').\n                \\<exists>n X.\n                   s' =\n                   insert (Spy, \\<langle>n, X\\<rangle>)\n                    (insert (Spy, \\<langle>n, Hash X\\<rangle>) s) \\<and>\n                   (Spy, X) \\<in> s \\<and>\n                   (Spy, Hash X) \\<in> s \\<and>\n                   ((Spy, \\<langle>n, X\\<rangle>) \\<in> s \\<or>\n                    (Spy, \\<langle>n, Hash X\\<rangle>) \\<in> s)})\\<^sup>*;\n        \\<forall>S.\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>2 \\<longrightarrow>\n           Sec_PriK m \\<notin> S;\n        Sec_PriK m \\<in> S;\n        v\\<^sub>2 =\n        insert (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n         (insert (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n           u\\<^sub>2);\n        (Spy, AgrKey (PubK S)) \\<in> u\\<^sub>2;\n        (Spy, Hash (AgrKey (PubK S))) \\<in> u\\<^sub>2;\n        (Spy, \\<langle>n, Hash (AgrKey (PubK S))\\<rangle>)\n        \\<in> u\\<^sub>2\\<rbrakk>\n       \\<Longrightarrow> (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "thus \"(Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2\""], ["proof (prove)\nusing this:\n  Sec_PriK m \\<notin> S\n\ngoal (1 subgoal):\n 1. (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "using I"], ["proof (prove)\nusing this:\n  Sec_PriK m \\<notin> S\n  Sec_PriK m \\<in> S\n\ngoal (1 subgoal):\n 1. (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2", "by contradiction"], ["proof (state)\nthis:\n  (Spy, AgrKey (PriK (Sec_PriK m))) \\<in> u\\<^sub>2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  Sec_PriKey m \\<in> spied u\\<^sub>2\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "hence I: \"m \\<in> bad_sec_prik\""], ["proof (prove)\nusing this:\n  Sec_PriKey m \\<in> spied u\\<^sub>2\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik", "using H"], ["proof (prove)\nusing this:\n  Sec_PriKey m \\<in> spied u\\<^sub>2\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>2 \\<and>\n  u\\<^sub>2 \\<turnstile> v\\<^sub>2 \\<and>\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S) \\<and>\n  (\\<exists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>2 \\<and>\n      Sec_PriK m \\<in> S)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik", "by (erule_tac contrapos_pp, rule_tac sec_prikey_secret, simp)"], ["proof (state)\nthis:\n  m \\<in> bad_sec_prik\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "from B and E and G"], ["proof (chain)\npicking this:\n  (n, m) \\<notin> bad_id\n  \\<forall>m. Sec_PriK m \\<noteq> Rev_PriK\n  \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1", "have \"\\<exists>S. ?P\\<^sub>4 S u\\<^sub>1\""], ["proof (prove)\nusing this:\n  (n, m) \\<notin> bad_id\n  \\<forall>m. Sec_PriK m \\<noteq> Rev_PriK\n  \\<langle>n, ID n (Sec_PubKey m)\\<rangle> \\<in> spied u\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>S.\n       \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>1 \\<and>\n       Rev_PriK \\<in> S \\<and>\n       (\\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)", "by (rule_tac exI [of _ \"{Tok_PriK n, Sec_PriK m, Rev_PriK}\"],\n     insert sec_prik_inj sec_prik_tok_prik, auto simp: inj_on_def image_def)"], ["proof (state)\nthis:\n  \\<exists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>1 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "moreover"], ["proof (state)\nthis:\n  \\<exists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>1 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "have \"\\<not> (\\<exists>S. ?P\\<^sub>4 S s\\<^sub>0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>S.\n       \\<langle>n, PubKey S\\<rangle> \\<in> spied s\\<^sub>0 \\<and>\n       Rev_PriK \\<in> S \\<and>\n       (\\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)", "by (insert tok_prik_rev, auto)"], ["proof (state)\nthis:\n  \\<nexists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied s\\<^sub>0 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>1 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n  \\<nexists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied s\\<^sub>0 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)", "have \"\\<exists>u v. s\\<^sub>0 \\<Turnstile> u \\<and> u \\<turnstile> v \\<and> v \\<Turnstile> u\\<^sub>1 \\<and>\n    \\<not> (\\<exists>S. ?P\\<^sub>4 S u) \\<and> (\\<exists>S. ?P\\<^sub>4 S v)\""], ["proof (prove)\nusing this:\n  \\<exists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>1 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n  \\<nexists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied s\\<^sub>0 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>1 \\<and>\n       (\\<nexists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n           Rev_PriK \\<in> S \\<and>\n           (\\<forall>m.\n               Sec_PriK m \\<in> S \\<longrightarrow>\n               (n, m) \\<notin> bad_id)) \\<and>\n       (\\<exists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n           Rev_PriK \\<in> S \\<and>\n           (\\<forall>m.\n               Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id))", "using F"], ["proof (prove)\nusing this:\n  \\<exists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>1 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n  \\<nexists>S.\n     \\<langle>n, PubKey S\\<rangle> \\<in> spied s\\<^sub>0 \\<and>\n     Rev_PriK \\<in> S \\<and>\n     (\\<forall>m.\n         Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>1 \\<and>\n  u\\<^sub>1 \\<turnstile> v\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n  \\<notin> spied u\\<^sub>1 \\<and>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<in> spied v\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>1 \\<and>\n       (\\<nexists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n           Rev_PriK \\<in> S \\<and>\n           (\\<forall>m.\n               Sec_PriK m \\<in> S \\<longrightarrow>\n               (n, m) \\<notin> bad_id)) \\<and>\n       (\\<exists>S.\n           \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n           Rev_PriK \\<in> S \\<and>\n           (\\<forall>m.\n               Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id))", "by (rule_tac rtrancl_start, simp)"], ["proof (state)\nthis:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>1 \\<and>\n     (\\<nexists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow>\n             (n, m) \\<notin> bad_id)) \\<and>\n     (\\<exists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id))\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "then"], ["proof (chain)\npicking this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>1 \\<and>\n     (\\<nexists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow>\n             (n, m) \\<notin> bad_id)) \\<and>\n     (\\<exists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id))", "obtain u\\<^sub>4 v\\<^sub>4 S where\n    J: \"s\\<^sub>0 \\<Turnstile> u\\<^sub>4\" and K: \"u\\<^sub>4 \\<turnstile> v\\<^sub>4\" and L: \"\\<not> (\\<exists>S. ?P\\<^sub>4 S u\\<^sub>4) \\<and> ?P\\<^sub>4 S v\\<^sub>4\""], ["proof (prove)\nusing this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>1 \\<and>\n     (\\<nexists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied u \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow>\n             (n, m) \\<notin> bad_id)) \\<and>\n     (\\<exists>S.\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id))\n\ngoal (1 subgoal):\n 1. (\\<And>u\\<^sub>4 v\\<^sub>4 S.\n        \\<lbrakk>s\\<^sub>0 \\<Turnstile> u\\<^sub>4;\n         u\\<^sub>4 \\<turnstile> v\\<^sub>4;\n         (\\<nexists>S.\n             \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>4 \\<and>\n             Rev_PriK \\<in> S \\<and>\n             (\\<forall>m.\n                 Sec_PriK m \\<in> S \\<longrightarrow>\n                 (n, m) \\<notin> bad_id)) \\<and>\n         \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>4 \\<and>\n         Rev_PriK \\<in> S \\<and>\n         (\\<forall>m.\n             Sec_PriK m \\<in> S \\<longrightarrow>\n             (n, m) \\<notin> bad_id)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>4\n  u\\<^sub>4 \\<turnstile> v\\<^sub>4\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>4 \\<and>\n      Rev_PriK \\<in> S \\<and>\n      (\\<forall>m.\n          Sec_PriK m \\<in> S \\<longrightarrow>\n          (n, m) \\<notin> bad_id)) \\<and>\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>4 \\<and>\n  Rev_PriK \\<in> S \\<and>\n  (\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "have M: \"\\<lbrakk>(Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4; Rev_PriK \\<in> S;\n    \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n    \\<forall>S. Rev_PriK \\<in> S \\<longrightarrow> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4 \\<longrightarrow>\n      (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\\<rbrakk> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n     Rev_PriK \\<in> S;\n     \\<forall>m.\n        Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n     \\<forall>S.\n        Rev_PriK \\<in> S \\<longrightarrow>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n        \\<in> u\\<^sub>4 \\<longrightarrow>\n        (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\\<rbrakk>\n    \\<Longrightarrow> False", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>(Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n   Rev_PriK \\<in> S;\n   \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n   \\<forall>S.\n      Rev_PriK \\<in> S \\<longrightarrow>\n      (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n      \\<in> u\\<^sub>4 \\<longrightarrow>\n      (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\\<rbrakk>\n  \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "from K and L"], ["proof (chain)\npicking this:\n  u\\<^sub>4 \\<turnstile> v\\<^sub>4\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>4 \\<and>\n      Rev_PriK \\<in> S \\<and>\n      (\\<forall>m.\n          Sec_PriK m \\<in> S \\<longrightarrow>\n          (n, m) \\<notin> bad_id)) \\<and>\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>4 \\<and>\n  Rev_PriK \\<in> S \\<and>\n  (\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)", "have \"\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\""], ["proof (prove)\nusing this:\n  u\\<^sub>4 \\<turnstile> v\\<^sub>4\n  (\\<nexists>S.\n      \\<langle>n, PubKey S\\<rangle> \\<in> spied u\\<^sub>4 \\<and>\n      Rev_PriK \\<in> S \\<and>\n      (\\<forall>m.\n          Sec_PriK m \\<in> S \\<longrightarrow>\n          (n, m) \\<notin> bad_id)) \\<and>\n  \\<langle>n, PubKey S\\<rangle> \\<in> spied v\\<^sub>4 \\<and>\n  Rev_PriK \\<in> S \\<and>\n  (\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id)\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id", "proof (simp add: rel_def, (erule_tac disjE, (clarsimp, (erule_tac disjE,\n   drule_tac sym, simp, (drule_tac idinfo_crypt [OF _ J] | drule_tac\n   idinfo_mpair_fst [OF _ J] | drule_tac idinfo_mpair_snd [OF _ J]), blast)+)?,\n   blast)+, (erule_tac disjE, erule_tac [2] disjE, erule_tac [3] disjE; clarsimp))"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa - {A} \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (Sa - {A}))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa; Tok_PriK na \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 4. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "fix n' S' A"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa - {A} \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (Sa - {A}))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa; Tok_PriK na \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 4. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume\n      N: \"\\<forall>S. Rev_PriK \\<in> S \\<longrightarrow> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4 \\<longrightarrow>\n        (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\" and\n      O: \"\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\" and\n      P: \"Rev_PriK \\<in> S\" and\n      Q: \"(Spy, \\<langle>n', AgrKey (PubK S')\\<rangle>) \\<in> u\\<^sub>4\" and\n      R: \"(Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  \\<forall>S.\n     Rev_PriK \\<in> S \\<longrightarrow>\n     (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n     \\<in> u\\<^sub>4 \\<longrightarrow>\n     (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n  Rev_PriK \\<in> S\n  (Spy, \\<langle>n', AgrKey (PubK S')\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4\n\ngoal (4 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa - {A} \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (Sa - {A}))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa; Tok_PriK na \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 4. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume \"n = n' \\<and> S = S' - {A} \\<or> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  n = n' \\<and> S = S' - {A} \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (4 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa - {A} \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (Sa - {A}))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (Sa - {A}))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa; Tok_PriK na \\<noteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 4. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<and> S = S' - {A} \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id", "proof (rule disjE, drule_tac [2] M [OF _ P O N]; clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "assume S: \"n = n'\" and \"S = S' - {A}\""], ["proof (state)\nthis:\n  n = n'\n  S = S' - {A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "moreover"], ["proof (state)\nthis:\n  n = n'\n  S = S' - {A}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "from this"], ["proof (chain)\npicking this:\n  n = n'\n  S = S' - {A}", "obtain m' where\n       \"Sec_PriK m' \\<in> S'\" and T: \"(n, m') \\<in> bad_id\""], ["proof (prove)\nusing this:\n  n = n'\n  S = S' - {A}\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>Sec_PriK m' \\<in> S'; (n, m') \\<in> bad_id\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using N and P and Q"], ["proof (prove)\nusing this:\n  n = n'\n  S = S' - {A}\n  \\<forall>S.\n     Rev_PriK \\<in> S \\<longrightarrow>\n     (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n     \\<in> u\\<^sub>4 \\<longrightarrow>\n     (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\n  Rev_PriK \\<in> S\n  (Spy, \\<langle>n', AgrKey (PubK S')\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>Sec_PriK m' \\<in> S'; (n, m') \\<in> bad_id\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "ultimately"], ["proof (chain)\npicking this:\n  n = n'\n  S = S' - {A}\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id", "have \"A = Sec_PriK m'\""], ["proof (prove)\nusing this:\n  n = n'\n  S = S' - {A}\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. A = Sec_PriK m'", "using O"], ["proof (prove)\nusing this:\n  n = n'\n  S = S' - {A}\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n\ngoal (1 subgoal):\n 1. A = Sec_PriK m'", "by (rule_tac ccontr, simp)"], ["proof (state)\nthis:\n  A = Sec_PriK m'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "hence \"Sec_PriKey m' \\<in> spied u\\<^sub>4\""], ["proof (prove)\nusing this:\n  A = Sec_PriK m'\n\ngoal (1 subgoal):\n 1. Sec_PriKey m' \\<in> spied u\\<^sub>4", "using R"], ["proof (prove)\nusing this:\n  A = Sec_PriK m'\n  (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. Sec_PriKey m' \\<in> spied u\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  Sec_PriKey m' \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "hence \"m' \\<in> bad_sec_prik\""], ["proof (prove)\nusing this:\n  Sec_PriKey m' \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. m' \\<in> bad_sec_prik", "by (rule contrapos_pp, rule_tac sec_prikey_secret [OF J])"], ["proof (state)\nthis:\n  m' \\<in> bad_sec_prik\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = S' - {A}\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "thus \"\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id\""], ["proof (prove)\nusing this:\n  m' \\<in> bad_sec_prik\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "using B and S and T"], ["proof (prove)\nusing this:\n  m' \\<in> bad_sec_prik\n  (n, m) \\<notin> bad_id\n  n = n'\n  (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "by auto"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n\ngoal (3 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "fix n' S' A"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume\n      N: \"\\<forall>S. Rev_PriK \\<in> S \\<longrightarrow> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4 \\<longrightarrow>\n        (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\" and\n      O: \"\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\" and\n      P: \"Rev_PriK \\<in> S\" and\n      Q: \"(Spy, \\<langle>n', AgrKey (PubK S')\\<rangle>) \\<in> u\\<^sub>4\" and\n      R: \"(Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  \\<forall>S.\n     Rev_PriK \\<in> S \\<longrightarrow>\n     (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n     \\<in> u\\<^sub>4 \\<longrightarrow>\n     (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n  Rev_PriK \\<in> S\n  (Spy, \\<langle>n', AgrKey (PubK S')\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4\n\ngoal (3 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume \"n = n' \\<and> S = insert A S' \\<or> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  n = n' \\<and> S = insert A S' \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (3 subgoals):\n 1. \\<And>na A Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert\n                 (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = insert A Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK (insert A Sa))\\<rangle>)\n         u\\<^sub>4;\n        (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK (insert A Sa))) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n        \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 3. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<and> S = insert A S' \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id", "proof (rule disjE, drule_tac [2] M [OF _ P O N]; clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = insert A S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "assume \"n = n'\" and S: \"S = insert A S'\""], ["proof (state)\nthis:\n  n = n'\n  S = insert A S'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = insert A S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "moreover"], ["proof (state)\nthis:\n  n = n'\n  S = insert A S'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = insert A S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "have \"A \\<noteq> Rev_PriK\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> Rev_PriK", "using R"], ["proof (prove)\nusing this:\n  (Spy, AgrKey (PriK A)) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. A \\<noteq> Rev_PriK", "by (rule contrapos_pn, insert rev_prikey_secret [OF J], simp)"], ["proof (state)\nthis:\n  A \\<noteq> Rev_PriK\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = insert A S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "ultimately"], ["proof (chain)\npicking this:\n  n = n'\n  S = insert A S'\n  A \\<noteq> Rev_PriK", "obtain m' where \"Sec_PriK m' \\<in> S'\" and T: \"(n, m') \\<in> bad_id\""], ["proof (prove)\nusing this:\n  n = n'\n  S = insert A S'\n  A \\<noteq> Rev_PriK\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>Sec_PriK m' \\<in> S'; (n, m') \\<in> bad_id\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using N and P and Q"], ["proof (prove)\nusing this:\n  n = n'\n  S = insert A S'\n  A \\<noteq> Rev_PriK\n  \\<forall>S.\n     Rev_PriK \\<in> S \\<longrightarrow>\n     (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n     \\<in> u\\<^sub>4 \\<longrightarrow>\n     (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\n  Rev_PriK \\<in> S\n  (Spy, \\<langle>n', AgrKey (PubK S')\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. (\\<And>m'.\n        \\<lbrakk>Sec_PriK m' \\<in> S'; (n, m') \\<in> bad_id\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = insert A S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "hence \"(n, m') \\<notin> bad_id\""], ["proof (prove)\nusing this:\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. (n, m') \\<notin> bad_id", "using O and S"], ["proof (prove)\nusing this:\n  Sec_PriK m' \\<in> S'\n  (n, m') \\<in> bad_id\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n  S = insert A S'\n\ngoal (1 subgoal):\n 1. (n, m') \\<notin> bad_id", "by simp"], ["proof (state)\nthis:\n  (n, m') \\<notin> bad_id\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; S = insert A S'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "thus \"\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id\""], ["proof (prove)\nusing this:\n  (n, m') \\<notin> bad_id\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "using T"], ["proof (prove)\nusing this:\n  (n, m') \\<notin> bad_id\n  (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "by contradiction"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n\ngoal (2 subgoals):\n 1. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "fix n' S'"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume\n      N: \"\\<forall>S. Rev_PriK \\<in> S \\<longrightarrow> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4 \\<longrightarrow>\n        (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\" and\n      O: \"\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\" and\n      P: \"Rev_PriK \\<in> S\""], ["proof (state)\nthis:\n  \\<forall>S.\n     Rev_PriK \\<in> S \\<longrightarrow>\n     (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n     \\<in> u\\<^sub>4 \\<longrightarrow>\n     (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n  Rev_PriK \\<in> S\n\ngoal (2 subgoals):\n 1. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume \"n = n' \\<and> S = S' \\<or> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\" and\n      \"(Spy, AgrKey (PriK (Tok_PriK n'))) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  n = n' \\<and> S = S' \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, AgrKey (PriK (Tok_PriK n'))) \\<in> u\\<^sub>4\n\ngoal (2 subgoals):\n 1. \\<And>na Sa.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>)\n                 u\\<^sub>4;\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> S = Sa \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, AgrKey (PubK Sa)\\<rangle>) u\\<^sub>4;\n        (Spy, AgrKey (PriK (Tok_PriK na))) \\<in> u\\<^sub>4;\n        (Spy, AgrKey (PubK Sa)) \\<in> u\\<^sub>4;\n        Tok_PriK na \\<in> Sa\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id\n 2. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<and> S = S' \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, AgrKey (PriK (Tok_PriK n'))) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id", "by (erule_tac disjE, drule_tac [2] M [OF _ P O N],\n       insert tok_prikey_secret [OF J C], simp_all)"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "fix n' X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume\n      N: \"\\<forall>S. Rev_PriK \\<in> S \\<longrightarrow> (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4 \\<longrightarrow>\n        (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\" and\n      O: \"\\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\" and\n      P: \"Rev_PriK \\<in> S\" and\n      Q: \"(Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<or> (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  \\<forall>S.\n     Rev_PriK \\<in> S \\<longrightarrow>\n     (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n     \\<in> u\\<^sub>4 \\<longrightarrow>\n     (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id)\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n  Rev_PriK \\<in> S\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "assume \"n = n' \\<and> AgrKey (PubK S) = X \\<or>\n      (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  n = n' \\<and> AgrKey (PubK S) = X \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<And>na X.\n       \\<lbrakk>u\\<^sub>4 \\<turnstile>\n                insert (Spy, \\<langle>na, X\\<rangle>)\n                 (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        \\<forall>S.\n           Rev_PriK \\<in> S \\<longrightarrow>\n           (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>)\n           \\<in> u\\<^sub>4 \\<longrightarrow>\n           (\\<exists>m. Sec_PriK m \\<in> S \\<and> (n, m) \\<in> bad_id);\n        n = na \\<and> AgrKey (PubK S) = X \\<or>\n        (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4;\n        Rev_PriK \\<in> S;\n        \\<forall>m.\n           Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id;\n        v\\<^sub>4 =\n        insert (Spy, \\<langle>na, X\\<rangle>)\n         (insert (Spy, \\<langle>na, Hash X\\<rangle>) u\\<^sub>4);\n        (Spy, X) \\<in> u\\<^sub>4; (Spy, Hash X) \\<in> u\\<^sub>4;\n        (Spy, \\<langle>na, X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n        (Spy, \\<langle>na, Hash X\\<rangle>) \\<in> u\\<^sub>4\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m'.\n                            m' \\<noteq> m \\<and>\n                            m' \\<in> bad_sec_prik \\<and>\n                            (n, m') \\<in> bad_id", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = n' \\<and> AgrKey (PubK S) = X \\<or>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id", "proof (rule disjE, drule_tac [2] M [OF _ P O N]; clarsimp)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "assume R: \"n = n'\" and S: \"X = AgrKey (PubK S)\""], ["proof (state)\nthis:\n  n = n'\n  X = AgrKey (PubK S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "{"], ["proof (state)\nthis:\n  n = n'\n  X = AgrKey (PubK S)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "assume \"(Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "hence \"(Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4", "using R and S"], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4\n  n = n'\n  X = AgrKey (PubK S)\n\ngoal (1 subgoal):\n 1. (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "}"], ["proof (state)\nthis:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "moreover"], ["proof (state)\nthis:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "{"], ["proof (state)\nthis:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "assume \"(Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (state)\nthis:\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "hence \"?P\\<^sub>3 S u\\<^sub>4\""], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4", "using R and S"], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\n  n = n'\n  X = AgrKey (PubK S)\n\ngoal (1 subgoal):\n 1. \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4", "by simp"], ["proof (state)\nthis:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "moreover"], ["proof (state)\nthis:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "have \"\\<not> ?P\\<^sub>3 S s\\<^sub>0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0", "using O"], ["proof (prove)\nusing this:\n  \\<forall>m. Sec_PriK m \\<in> S \\<longrightarrow> (n, m) \\<notin> bad_id\n\ngoal (1 subgoal):\n 1. \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0", "by auto"], ["proof (state)\nthis:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "ultimately"], ["proof (chain)\npicking this:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0", "have \"\\<exists>u v. s\\<^sub>0 \\<Turnstile> u \\<and> u \\<turnstile> v \\<and> v \\<Turnstile> u\\<^sub>4 \\<and> \\<not> ?P\\<^sub>3 S u \\<and> ?P\\<^sub>3 S v\""], ["proof (prove)\nusing this:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>4 \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v", "using J"], ["proof (prove)\nusing this:\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied u\\<^sub>4\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied s\\<^sub>0\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>u v.\n       s\\<^sub>0 \\<Turnstile> u \\<and>\n       u \\<turnstile> v \\<and>\n       v \\<Turnstile> u\\<^sub>4 \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n       \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v", "by (rule_tac rtrancl_start)"], ["proof (state)\nthis:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>4 \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "then"], ["proof (chain)\npicking this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>4 \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v", "obtain u\\<^sub>3 v\\<^sub>3 where \"s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and> u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and> v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n          \\<not> ?P\\<^sub>3 S u\\<^sub>3 \\<and> ?P\\<^sub>3 S v\\<^sub>3\""], ["proof (prove)\nusing this:\n  \\<exists>u v.\n     s\\<^sub>0 \\<Turnstile> u \\<and>\n     u \\<turnstile> v \\<and>\n     v \\<Turnstile> u\\<^sub>4 \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u \\<and>\n     \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\n\ngoal (1 subgoal):\n 1. (\\<And>u\\<^sub>3 v\\<^sub>3.\n        s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n        u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n        v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n        \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n        \\<langle>n, Hash (PubKey S)\\<rangle>\n        \\<in> spied v\\<^sub>3 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "moreover"], ["proof (state)\nthis:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "from this"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3", "have \"\\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied v\\<^sub>3\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied v\\<^sub>3", "by (auto simp: rel_def dest: idinfo_crypt idinfo_mpair_fst idinfo_mpair_snd\n           idinfo_hash_hash)"], ["proof (state)\nthis:\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "ultimately"], ["proof (chain)\npicking this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied v\\<^sub>3", "have \"\\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4\""], ["proof (prove)\nusing this:\n  s\\<^sub>0 \\<Turnstile> u\\<^sub>3 \\<and>\n  u\\<^sub>3 \\<turnstile> v\\<^sub>3 \\<and>\n  v\\<^sub>3 \\<Turnstile> u\\<^sub>4 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<notin> spied u\\<^sub>3 \\<and>\n  \\<langle>n, Hash (PubKey S)\\<rangle> \\<in> spied v\\<^sub>3\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied v\\<^sub>3\n\ngoal (1 subgoal):\n 1. \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4", "by (rule_tac subsetD [of \"spied v\\<^sub>3\"], rule_tac spied_subset, simp)"], ["proof (state)\nthis:\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "}"], ["proof (state)\nthis:\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "ultimately"], ["proof (chain)\npicking this:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4", "have \"(Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\""], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4\n\ngoal (1 subgoal):\n 1. (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4", "using Q"], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4 \\<Longrightarrow>\n  \\<langle>n, AgrKey (PubK S)\\<rangle> \\<in> spied u\\<^sub>4\n  (Spy, \\<langle>n', X\\<rangle>) \\<in> u\\<^sub>4 \\<or>\n  (Spy, \\<langle>n', Hash X\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4", "by blast"], ["proof (state)\nthis:\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<lbrakk>n = n'; X = AgrKey (PubK S)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>m'.\n                         m' \\<noteq> m \\<and>\n                         m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "thus \"\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id\""], ["proof (prove)\nusing this:\n  (Spy, \\<langle>n, AgrKey (PubK S)\\<rangle>) \\<in> u\\<^sub>4\n\ngoal (1 subgoal):\n 1. \\<exists>m'.\n       m' \\<noteq> m \\<and>\n       m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id", "by (drule_tac M [OF _ P O N], simp)"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n', m') \\<in> bad_id\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "using I"], ["proof (prove)\nusing this:\n  \\<exists>m'.\n     m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id\n  m \\<in> bad_sec_prik\n\ngoal (1 subgoal):\n 1. m \\<in> bad_sec_prik \\<and>\n    (\\<exists>m'.\n        m' \\<noteq> m \\<and>\n        m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)", "by simp"], ["proof (state)\nthis:\n  m \\<in> bad_sec_prik \\<and>\n  (\\<exists>m'.\n      m' \\<noteq> m \\<and>\n      m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem id_anonymous [rotated]:\n \"\\<lbrakk>m \\<notin> bad_sec_prik \\<or> \\<not> (\\<exists>m'. m' \\<noteq> m \\<and> m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id);\n    s\\<^sub>0 \\<Turnstile> s; (n, m) \\<notin> bad_id; n \\<notin> bad_tok_prik\\<rbrakk> \\<Longrightarrow>\n  \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle> \\<notin> spied s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<notin> bad_sec_prik \\<or>\n             (\\<nexists>m'.\n                 m' \\<noteq> m \\<and>\n                 m' \\<in> bad_sec_prik \\<and> (n, m') \\<in> bad_id);\n     s\\<^sub>0 \\<Turnstile> s; (n, m) \\<notin> bad_id;\n     n \\<notin> bad_tok_prik\\<rbrakk>\n    \\<Longrightarrow> \\<langle>n, Hash (ID n (Sec_PubKey m))\\<rangle>\n                      \\<notin> spied s", "by (erule contrapos_pn, drule id_identified, blast+)"], ["", "end"]]}