{"file_name": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus/Strong_Late_Bisim_Subst_Pres.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus", "problem_names": ["lemma tauPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"\\<tau>.(P) \\<sim>\\<^sup>s \\<tau>.(Q)\"", "lemma inputPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   x :: name\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"a<x>.P \\<sim>\\<^sup>s a<x>.Q\"", "lemma outputPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"a{b}.P \\<sim>\\<^sup>s a{b}.Q\"", "lemma matchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"[a\\<frown>b]P \\<sim>\\<^sup>s [a\\<frown>b]Q\"", "lemma mismatchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"[a\\<noteq>b]P \\<sim>\\<^sup>s [a\\<noteq>b]Q\"", "lemma sumPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"P \\<oplus> R \\<sim>\\<^sup>s Q \\<oplus> R\"", "lemma parPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"P \\<parallel> R \\<sim>\\<^sup>s Q \\<parallel> R\"", "lemma resPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   x :: name\n\n  assumes PeqQ: \"P \\<sim>\\<^sup>s Q\"\n  \n  shows \"<\\<nu>x>P \\<sim>\\<^sup>s <\\<nu>x>Q\"", "lemma bangPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"!P \\<sim>\\<^sup>s !Q\""], "translations": [["", "lemma tauPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"\\<tau>.(P) \\<sim>\\<^sup>s \\<tau>.(Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>.P \\<sim>\\<^sup>s \\<tau>.Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. \\<tau>.P \\<sim>\\<^sup>s \\<tau>.Q", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.tauPres)"], ["", "lemma inputPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   x :: name\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"a<x>.P \\<sim>\\<^sup>s a<x>.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a<x>.P \\<sim>\\<^sup>s a<x>.Q", "proof(auto simp add: substClosed_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "fix \\<sigma> :: \"(name \\<times> name) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "fix P Q a x \\<sigma>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "assume \"P \\<sim>\\<^sup>s Q\""], ["proof (state)\nthis:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  P \\<sim>\\<^sup>s Q", "have \"P[<\\<sigma>>] \\<sim>\\<^sup>s Q[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<\\<sigma>>] \\<sim>\\<^sup>s Q[<\\<sigma>>]", "by(rule partUnfold)"], ["proof (state)\nthis:\n  P[<\\<sigma>>] \\<sim>\\<^sup>s Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  P[<\\<sigma>>] \\<sim>\\<^sup>s Q[<\\<sigma>>]", "have \"\\<forall>y. (P[<\\<sigma>>])[x::=y] \\<sim> (Q[<\\<sigma>>])[x::=y]\""], ["proof (prove)\nusing this:\n  P[<\\<sigma>>] \\<sim>\\<^sup>s Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<forall>y. P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]", "apply(auto simp add: substClosed_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>][<\\<sigma>>] \\<sim>\n          Q[<\\<sigma>>][<\\<sigma>>] \\<Longrightarrow>\n       P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]", "by(erule_tac x=\"[(x, y)]\" in allE) auto"], ["proof (state)\nthis:\n  \\<forall>y. P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  \\<forall>y. P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "assume \"x \\<sharp> \\<sigma>\""], ["proof (state)\nthis:\n  x \\<sharp> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>y. P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]\n  x \\<sharp> \\<sigma>", "have \"(a<x>.P)[<\\<sigma>>] \\<sim> (a<x>.Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  \\<forall>y. P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]\n  x \\<sharp> \\<sigma>\n\ngoal (1 subgoal):\n 1. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "using bisimEqvt"], ["proof (prove)\nusing this:\n  \\<forall>y. P[<\\<sigma>>][x::=y] \\<sim> Q[<\\<sigma>>][x::=y]\n  x \\<sharp> \\<sigma>\n  eqvt bisim\n\ngoal (1 subgoal):\n 1. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "by(force intro: Strong_Late_Bisim_Pres.inputPres)"], ["proof (state)\nthis:\n  a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?Pa2 \\<sim>\\<^sup>s ?Qa2; ?xa2 \\<sharp> ?\\<sigma>'2\\<rbrakk>\n  \\<Longrightarrow> ?aa2<?xa2>.?Pa2[<?\\<sigma>'2>] \\<sim>\n                    ?aa2<?xa2>.?Qa2[<?\\<sigma>'2>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "note Goal = this"], ["proof (state)\nthis:\n  \\<lbrakk>?Pa2 \\<sim>\\<^sup>s ?Qa2; ?xa2 \\<sharp> ?\\<sigma>'2\\<rbrakk>\n  \\<Longrightarrow> ?aa2<?xa2>.?Pa2[<?\\<sigma>'2>] \\<sim>\n                    ?aa2<?xa2>.?Qa2[<?\\<sigma>'2>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "obtain y::name where \"y \\<sharp> P\" and \"y \\<sharp> Q\" and \"y \\<sharp> \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<sharp> P; y \\<sharp> Q; y \\<sharp> \\<sigma>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(generate_fresh \"name\") auto"], ["proof (state)\nthis:\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "from \\<open>P \\<sim>\\<^sup>s Q\\<close>"], ["proof (chain)\npicking this:\n  P \\<sim>\\<^sup>s Q", "have \"([(x, y)] \\<bullet> P) \\<sim>\\<^sup>s ([(x, y)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. [(x, y)] \\<bullet> P \\<sim>\\<^sup>s [(x, y)] \\<bullet> Q", "by(rule eqClosed)"], ["proof (state)\nthis:\n  [(x, y)] \\<bullet> P \\<sim>\\<^sup>s [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "hence \"(a<y>.([(x, y)] \\<bullet> P))[<\\<sigma>>] \\<sim> (a<y>.([(x, y)] \\<bullet> Q))[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  [(x, y)] \\<bullet> P \\<sim>\\<^sup>s [(x, y)] \\<bullet> Q\n\ngoal (1 subgoal):\n 1. a<y>.([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<sim>\n    a<y>.([(x, y)] \\<bullet> Q)[<\\<sigma>>]", "using \\<open>y \\<sharp> \\<sigma>\\<close>"], ["proof (prove)\nusing this:\n  [(x, y)] \\<bullet> P \\<sim>\\<^sup>s [(x, y)] \\<bullet> Q\n  y \\<sharp> \\<sigma>\n\ngoal (1 subgoal):\n 1. a<y>.([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<sim>\n    a<y>.([(x, y)] \\<bullet> Q)[<\\<sigma>>]", "by(rule Goal)"], ["proof (state)\nthis:\n  a<y>.([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<sim>\n  a<y>.([(x, y)] \\<bullet> Q)[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  a<y>.([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<sim>\n  a<y>.([(x, y)] \\<bullet> Q)[<\\<sigma>>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "from \\<open>y \\<sharp> P\\<close> \\<open>y \\<sharp> Q\\<close>"], ["proof (chain)\npicking this:\n  y \\<sharp> P\n  y \\<sharp> Q", "have \"a<x>.P = a<y>.([(x, y)] \\<bullet> P)\" and \"a<x>.Q = a<y>.([(x, y)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  y \\<sharp> P\n  y \\<sharp> Q\n\ngoal (1 subgoal):\n 1. a<x>.P = a<y>.([(x, y)] \\<bullet> P) &&&\n    a<x>.Q = a<y>.([(x, y)] \\<bullet> Q)", "by(simp add: alphaInput)+"], ["proof (state)\nthis:\n  a<x>.P = a<y>.([(x, y)] \\<bullet> P)\n  a<x>.Q = a<y>.([(x, y)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  a<y>.([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<sim>\n  a<y>.([(x, y)] \\<bullet> Q)[<\\<sigma>>]\n  a<x>.P = a<y>.([(x, y)] \\<bullet> P)\n  a<x>.Q = a<y>.([(x, y)] \\<bullet> Q)", "show \"(a<x>.P)[<\\<sigma>>] \\<sim> (a<x>.Q)[<\\<sigma>>]\""], ["proof (prove)\nusing this:\n  a<y>.([(x, y)] \\<bullet> P)[<\\<sigma>>] \\<sim>\n  a<y>.([(x, y)] \\<bullet> Q)[<\\<sigma>>]\n  a<x>.P = a<y>.([(x, y)] \\<bullet> P)\n  a<x>.Q = a<y>.([(x, y)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]", "by simp"], ["proof (state)\nthis:\n  a<x>.P[<\\<sigma>>] \\<sim> a<x>.Q[<\\<sigma>>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outputPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"a{b}.P \\<sim>\\<^sup>s a{b}.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a{b}.P \\<sim>\\<^sup>s a{b}.Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. a{b}.P \\<sim>\\<^sup>s a{b}.Q", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.outputPres)"], ["", "lemma matchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"[a\\<frown>b]P \\<sim>\\<^sup>s [a\\<frown>b]Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a\\<frown>b]P \\<sim>\\<^sup>s [a\\<frown>b]Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. [a\\<frown>b]P \\<sim>\\<^sup>s [a\\<frown>b]Q", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.matchPres)"], ["", "lemma mismatchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"[a\\<noteq>b]P \\<sim>\\<^sup>s [a\\<noteq>b]Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a\\<noteq>b]P \\<sim>\\<^sup>s [a\\<noteq>b]Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. [a\\<noteq>b]P \\<sim>\\<^sup>s [a\\<noteq>b]Q", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.mismatchPres)"], ["", "lemma sumPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"P \\<oplus> R \\<sim>\\<^sup>s Q \\<oplus> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus> R \\<sim>\\<^sup>s Q \\<oplus> R", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<oplus> R \\<sim>\\<^sup>s Q \\<oplus> R", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.sumPres)"], ["", "lemma parPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"P \\<parallel> R \\<sim>\\<^sup>s Q \\<parallel> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> R \\<sim>\\<^sup>s Q \\<parallel> R", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<parallel> R \\<sim>\\<^sup>s Q \\<parallel> R", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.parPres)"], ["", "lemma resPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   x :: name\n\n  assumes PeqQ: \"P \\<sim>\\<^sup>s Q\"\n  \n  shows \"<\\<nu>x>P \\<sim>\\<^sup>s <\\<nu>x>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>x>P \\<sim>\\<^sup>s <\\<nu>x>Q", "proof(auto simp add: substClosed_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "fix s::\"(name \\<times> name) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "have Res: \"\\<And>P Q x s. \\<lbrakk>P[<s>] \\<sim> Q[<s>]; x \\<sharp> s\\<rbrakk> \\<Longrightarrow> (<\\<nu>x>P)[<s>] \\<sim> (<\\<nu>x>Q)[<s>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q x s.\n       \\<lbrakk>P[<s>] \\<sim> Q[<s>]; x \\<sharp> s\\<rbrakk>\n       \\<Longrightarrow> <\\<nu>x>P[<s>] \\<sim> <\\<nu>x>Q[<s>]", "by(force intro: Strong_Late_Bisim_Pres.resPres)"], ["proof (state)\nthis:\n  \\<lbrakk>?P[<?s>] \\<sim> ?Q[<?s>]; ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> <\\<nu>?x>?P[<?s>] \\<sim> <\\<nu>?x>?Q[<?s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "have \"\\<exists>c::name. c \\<sharp> (P, Q, s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>c. c \\<sharp> (P, Q, s)", "by(blast intro: name_exists_fresh)"], ["proof (state)\nthis:\n  \\<exists>c. c \\<sharp> (P, Q, s)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  \\<exists>c. c \\<sharp> (P, Q, s)", "obtain c::name where cFreshP: \"c \\<sharp> P\" and cFreshQ: \"c \\<sharp> Q\" and cFreshs: \"c \\<sharp> s\""], ["proof (prove)\nusing this:\n  \\<exists>c. c \\<sharp> (P, Q, s)\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<sharp> P; c \\<sharp> Q; c \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(force simp add: fresh_prod)"], ["proof (state)\nthis:\n  c \\<sharp> P\n  c \\<sharp> Q\n  c \\<sharp> s\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "from PeqQ"], ["proof (chain)\npicking this:\n  P \\<sim>\\<^sup>s Q", "have \"P[<([(x, c)] \\<bullet> s)>] \\<sim> Q[<([(x, c)] \\<bullet> s)>]\""], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<([(x, c)] \\<bullet> s)>] \\<sim> Q[<([(x, c)] \\<bullet> s)>]", "by(simp add: substClosed_def)"], ["proof (state)\nthis:\n  P[<([(x, c)] \\<bullet> s)>] \\<sim> Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "hence \"([(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>]) \\<sim> ([(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>])\""], ["proof (prove)\nusing this:\n  P[<([(x, c)] \\<bullet> s)>] \\<sim> Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. [(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>] \\<sim>\n    [(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>]", "by(rule bisimClosed)"], ["proof (state)\nthis:\n  [(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>] \\<sim>\n  [(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "hence \"([(x, c)] \\<bullet> P)[<s>] \\<sim> ([(x, c)] \\<bullet> Q)[<s>]\""], ["proof (prove)\nusing this:\n  [(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>] \\<sim>\n  [(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. ([(x, c)] \\<bullet> P)[<s>] \\<sim> ([(x, c)] \\<bullet> Q)[<s>]", "by simp"], ["proof (state)\nthis:\n  ([(x, c)] \\<bullet> P)[<s>] \\<sim> ([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "hence \"(<\\<nu>c>([(x, c)] \\<bullet> P))[<s>] \\<sim> (<\\<nu>c>([(x, c)] \\<bullet> Q))[<s>]\""], ["proof (prove)\nusing this:\n  ([(x, c)] \\<bullet> P)[<s>] \\<sim> ([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. <\\<nu>c>([(x, c)] \\<bullet> P)[<s>] \\<sim>\n    <\\<nu>c>([(x, c)] \\<bullet> Q)[<s>]", "using cFreshs"], ["proof (prove)\nusing this:\n  ([(x, c)] \\<bullet> P)[<s>] \\<sim> ([(x, c)] \\<bullet> Q)[<s>]\n  c \\<sharp> s\n\ngoal (1 subgoal):\n 1. <\\<nu>c>([(x, c)] \\<bullet> P)[<s>] \\<sim>\n    <\\<nu>c>([(x, c)] \\<bullet> Q)[<s>]", "by(rule Res)"], ["proof (state)\nthis:\n  <\\<nu>c>([(x, c)] \\<bullet> P)[<s>] \\<sim>\n  <\\<nu>c>([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  <\\<nu>c>([(x, c)] \\<bullet> P)[<s>] \\<sim>\n  <\\<nu>c>([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "from cFreshP cFreshQ"], ["proof (chain)\npicking this:\n  c \\<sharp> P\n  c \\<sharp> Q", "have \"<\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\" and \"<\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  c \\<sharp> P\n  c \\<sharp> Q\n\ngoal (1 subgoal):\n 1. <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P) &&&\n    <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)", "by(simp add: alphaRes)+"], ["proof (state)\nthis:\n  <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\n  <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<sim> <\\<nu>x>Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  <\\<nu>c>([(x, c)] \\<bullet> P)[<s>] \\<sim>\n  <\\<nu>c>([(x, c)] \\<bullet> Q)[<s>]\n  <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\n  <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)", "show \"(<\\<nu>x>P)[<s>] \\<sim> (<\\<nu>x>Q)[<s>]\""], ["proof (prove)\nusing this:\n  <\\<nu>c>([(x, c)] \\<bullet> P)[<s>] \\<sim>\n  <\\<nu>c>([(x, c)] \\<bullet> Q)[<s>]\n  <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\n  <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. <\\<nu>x>P[<s>] \\<sim> <\\<nu>x>Q[<s>]", "by simp"], ["proof (state)\nthis:\n  <\\<nu>x>P[<s>] \\<sim> <\\<nu>x>Q[<s>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bangPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"!P \\<sim>\\<^sup>s !Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. !P \\<sim>\\<^sup>s !Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. !P \\<sim>\\<^sup>s !Q", "by(force simp add: substClosed_def intro: Strong_Late_Bisim_Pres.bangPres)"], ["", "end"]]}