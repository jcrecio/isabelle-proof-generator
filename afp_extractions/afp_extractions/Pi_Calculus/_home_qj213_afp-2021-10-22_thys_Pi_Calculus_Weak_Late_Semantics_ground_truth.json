{"file_name": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus/Weak_Late_Semantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus", "problem_names": ["lemma transitionI:\n  fixes P  :: pi\n  and   Rs :: residual\n  and   P' :: pi\n\n  shows \"P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P\"", "lemma transitionCases[consumes 1, case_names Step Stay]:\n  fixes P  :: pi\n  and   Rs :: residual\n  and   P' :: pi\n\n  assumes \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n  and     \"P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow> F Rs\"\n  and     \"Rs = \\<tau> \\<prec> P \\<Longrightarrow> F (\\<tau> \\<prec> P)\"\n\n  shows \"F Rs\"", "lemma singleActionChain:\n  fixes P  :: pi\n  and   \\<alpha>  :: freeRes\n  and   P' :: pi\n  \n  assumes \"P \\<longmapsto>\\<alpha> \\<prec> P'\"\n  \n  shows \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^(\\<alpha> \\<prec> P')\"", "lemma Tau:\n  fixes P :: pi\n\n  shows \"\\<tau>.(P) \\<Longrightarrow>\\<^sub>l\\<^sup>^ \\<tau> \\<prec>  P\"", "lemma Output:\n  fixes a :: name\n  and   b :: name\n  and   P :: pi\n\n  shows \"a{b}.P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P\"", "lemma Match:\n  fixes a  :: name\n  and   P  :: pi\n  and   b  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   \\<alpha>  :: freeRes\n\n  shows \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P' \\<Longrightarrow> [a\\<frown>a]P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P'\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P' \\<Longrightarrow> P \\<noteq> P' \\<Longrightarrow> [a\\<frown>a]P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"", "lemma Mismatch:\n  fixes a  :: name\n  and   c  :: name\n  and   P  :: pi\n  and   b  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   \\<alpha>  :: freeRes\n\n  shows \"\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P'; a \\<noteq> c\\<rbrakk> \\<Longrightarrow> [a\\<noteq>c]P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P'\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P' \\<Longrightarrow> P \\<noteq> P' \\<Longrightarrow> a \\<noteq> c \\<Longrightarrow> [a\\<noteq>c]P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"", "lemma Open:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P' :: pi\n\n  assumes Trans:  \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\"\n  and     aInEqb: \"a \\<noteq> b\"\n\n  shows \"<\\<nu>b>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>b> \\<prec> P'\"", "lemma Par1B:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and     xFreshQ: \"x \\<sharp> Q\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> (P' \\<parallel> Q)\"", "lemma Par1F:\n  fixes P  :: pi\n  and   \\<alpha>  :: freeRes\n  and   P' :: pi\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> (P' \\<parallel> Q)\"", "lemma Par2B:\n  fixes Q  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   Q' :: pi\n\n  assumes QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> Q'\"\n  and     xFreshP: \"x \\<sharp> P\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> (P \\<parallel> Q')\"", "lemma Par2F:\n  fixes Q :: pi\n  and   \\<alpha>  :: freeRes\n  and   Q' :: pi\n\n  assumes QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> Q'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> (P \\<parallel> Q')\"", "lemma Comm1:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P'' :: pi\n  and   P' :: pi\n  and   Q  :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>lb in P''\\<rightarrow>a<x> \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> Q'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'\"", "lemma Comm2:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   Q'' :: pi\n  and   P' :: pi\n  and   Q  :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>lb in Q''\\<rightarrow>a<x> \\<prec> Q'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'\"", "lemma Close1:\n  fixes P  :: pi\n  and   y  :: name\n  and   P'' :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   Q  :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>ly in P''\\<rightarrow>a<x> \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>y> \\<prec> Q'\"\n  and     xFreshP: \"y \\<sharp> P\"\n  and     xFreshQ: \"y \\<sharp> Q\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel> Q')\"", "lemma Close2:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   Q  :: pi\n  and   y  :: name\n  and   Q'' :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>y> \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>ly in Q''\\<rightarrow>a<x> \\<prec> Q'\"\n  and     xFreshP: \"y \\<sharp> P\"\n  and     xFreshQ: \"y \\<sharp> Q\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel> Q')\"", "lemma ResF:\n  fixes P  :: pi\n  and   \\<alpha>  :: freeRes\n  and   P' :: pi\n  and   x  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"\n  and     xFreshAlpha: \"x \\<sharp> \\<alpha>\"\n\n  shows \"<\\<nu>x>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> <\\<nu>x>P'\"", "lemma ResB:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   y  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and     yineqa: \"y \\<noteq> a\"\n  and     yineqx: \"y \\<noteq> x\"\n  and     xFreshP: \"x \\<sharp> P\"\n\n  shows \"<\\<nu>y>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> (<\\<nu>y>P')\"", "lemma Bang:\n  fixes P  :: pi\n  and   Rs :: residual\n\n  assumes \"P \\<parallel> !P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n  and     \"Rs \\<noteq> \\<tau> \\<prec> P \\<parallel> !P\"\n  \n  shows \"!P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"", "lemma tauTransitionChain:\n  fixes P  :: pi\n  and   P' :: pi\n\n  assumes \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P'\"\n\n  shows \"P \\<Longrightarrow>\\<^sub>\\<tau> P'\"", "lemma chainTransitionAppend:\n  fixes P   :: pi\n  and   P'  :: pi\n  and   Rs  :: residual\n  and   a   :: name\n  and   x   :: name\n  and   P'' :: pi\n  and   \\<alpha>   :: freeRes\n\n  shows \"P \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> P' \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'' \\<Longrightarrow> P'' \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> x \\<sharp> P \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'' \\<Longrightarrow> P'' \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"", "lemma weakEqWeakTransitionAppend:\n  fixes P   :: pi\n  and   P'  :: pi\n  and   \\<alpha>   :: freeRes\n  and   P'' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<tau> \\<prec> P'\"\n  and     P'Trans: \"P' \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\"\n  \n  shows \"P \\<Longrightarrow>\\<^sub>l\\<alpha> \\<prec> P''\"", "lemma freshBoundOutputTransition:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   c  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n  and     cineqx: \"c \\<noteq> x\"\n\n  shows \"c \\<sharp> P'\"", "lemma freshTauTransition:\n  fixes P :: pi\n  and   c :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n\n  shows \"c \\<sharp> P'\"", "lemma freshOutputTransition:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P' :: pi\n  and   c  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n\n  shows \"c \\<sharp> P'\"", "lemma eqvtI:\n  fixes P    :: pi\n  and   Rs   :: residual\n  and   perm :: \"name prm\"\n\n  assumes \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n\n  shows \"(perm \\<bullet> P) \\<Longrightarrow>\\<^sub>l\\<^sup>^ (perm \\<bullet> Rs)\"", "lemma freshInputTransition:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P' :: pi\n  and   c  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<b> \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n  and     cineqb: \"c \\<noteq> b\"\n\n  shows \"c \\<sharp> P'\"", "lemmas freshTransition = freshBoundOutputTransition freshOutputTransition\n                         freshInputTransition freshTauTransition"], "translations": [["", "lemma transitionI:\n  fixes P  :: pi\n  and   Rs :: residual\n  and   P' :: pi\n\n  shows \"P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow>\n     P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs) &&&\n    P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n 2. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "assume \"P \\<Longrightarrow>\\<^sub>l Rs\""], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l Rs\n\ngoal (2 subgoals):\n 1. P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n 2. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "thus \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\""], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l Rs\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs", "by(simp add: weakTransition_def)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "show \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "by(simp add: weakTransition_def)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma transitionCases[consumes 1, case_names Step Stay]:\n  fixes P  :: pi\n  and   Rs :: residual\n  and   P' :: pi\n\n  assumes \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n  and     \"P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow> F Rs\"\n  and     \"Rs = \\<tau> \\<prec> P \\<Longrightarrow> F (\\<tau> \\<prec> P)\"\n\n  shows \"F Rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F Rs", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n  P \\<Longrightarrow>\\<^sub>l Rs \\<Longrightarrow> F Rs\n  Rs = \\<tau> \\<prec> P \\<Longrightarrow> F (\\<tau> \\<prec> P)\n\ngoal (1 subgoal):\n 1. F Rs", "by(auto simp add: weakTransition_def)"], ["", "lemma singleActionChain:\n  fixes P  :: pi\n  and   \\<alpha>  :: freeRes\n  and   P' :: pi\n  \n  assumes \"P \\<longmapsto>\\<alpha> \\<prec> P'\"\n  \n  shows \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^(\\<alpha> \\<prec> P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<longmapsto> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "by(auto intro: Weak_Late_Step_Semantics.singleActionChain\n  simp add: weakTransition_def)"], ["", "lemma Tau:\n  fixes P :: pi\n\n  shows \"\\<tau>.(P) \\<Longrightarrow>\\<^sub>l\\<^sup>^ \\<tau> \\<prec>  P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>.P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P", "by(auto intro: Weak_Late_Step_Semantics.Tau\n   simp add: weakTransition_def)"], ["", "lemma Output:\n  fixes a :: name\n  and   b :: name\n  and   P :: pi\n\n  shows \"a{b}.P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a{b}.P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P", "by(auto intro: Weak_Late_Step_Semantics.Output\n   simp add: weakTransition_def)"], ["", "lemma Match:\n  fixes a  :: name\n  and   P  :: pi\n  and   b  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   \\<alpha>  :: freeRes\n\n  shows \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P' \\<Longrightarrow> [a\\<frown>a]P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P'\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P' \\<Longrightarrow> P \\<noteq> P' \\<Longrightarrow> [a\\<frown>a]P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P' \\<Longrightarrow>\n     [a\\<frown>a]P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P') &&&\n    (\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P';\n      P \\<noteq> P'\\<rbrakk>\n     \\<Longrightarrow> [a\\<frown>a]P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P')", "by(auto simp add: residual.inject weakTransition_def intro: Weak_Late_Step_Semantics.Match)"], ["", "lemma Mismatch:\n  fixes a  :: name\n  and   c  :: name\n  and   P  :: pi\n  and   b  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   \\<alpha>  :: freeRes\n\n  shows \"\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P'; a \\<noteq> c\\<rbrakk> \\<Longrightarrow> [a\\<noteq>c]P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P'\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P' \\<Longrightarrow> P \\<noteq> P' \\<Longrightarrow> a \\<noteq> c \\<Longrightarrow> [a\\<noteq>c]P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P';\n      a \\<noteq> c\\<rbrakk>\n     \\<Longrightarrow> [a\\<noteq>c]P \\<Longrightarrow>\\<^sub>l\\<^sup>^b<\\<nu>x> \\<prec> P') &&&\n    (\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P';\n      P \\<noteq> P'; a \\<noteq> c\\<rbrakk>\n     \\<Longrightarrow> [a\\<noteq>c]P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P')", "by(auto simp add: residual.inject weakTransition_def intro: Weak_Late_Step_Semantics.Mismatch)"], ["", "lemma Open:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P' :: pi\n\n  assumes Trans:  \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\"\n  and     aInEqb: \"a \\<noteq> b\"\n\n  shows \"<\\<nu>b>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>b> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>b>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>b> \\<prec> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\n  a \\<noteq> b\n\ngoal (1 subgoal):\n 1. <\\<nu>b>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>b> \\<prec> P'", "by(auto intro: Weak_Late_Step_Semantics.Open\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Par1B:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and     xFreshQ: \"x \\<sharp> Q\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> (P' \\<parallel> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P' \\<parallel> Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n  x \\<sharp> Q\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P' \\<parallel> Q", "by(auto intro: Weak_Late_Step_Semantics.Par1B\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Par1F:\n  fixes P  :: pi\n  and   \\<alpha>  :: freeRes\n  and   P' :: pi\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> (P' \\<parallel> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P' \\<parallel> Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P' \\<parallel> Q", "by(auto intro: Weak_Late_Step_Semantics.Par1F\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Par2B:\n  fixes Q  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   Q' :: pi\n\n  assumes QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> Q'\"\n  and     xFreshP: \"x \\<sharp> P\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> (P \\<parallel> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P \\<parallel> Q'", "using assms"], ["proof (prove)\nusing this:\n  Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> Q'\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P \\<parallel> Q'", "by(auto intro: Weak_Late_Step_Semantics.Par2B\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Par2F:\n  fixes Q :: pi\n  and   \\<alpha>  :: freeRes\n  and   Q' :: pi\n\n  assumes QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> Q'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> (P \\<parallel> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P \\<parallel> Q'", "using assms"], ["proof (prove)\nusing this:\n  Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P \\<parallel> Q'", "by(auto intro: Weak_Late_Step_Semantics.Par2F\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Comm1:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P'' :: pi\n  and   P' :: pi\n  and   Q  :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>lb in P''\\<rightarrow>a<x> \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> Q'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>lb in P''\\<rightarrow>a<x> \\<prec> P'\n  Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> Q'\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'", "by(auto intro: Weak_Late_Step_Semantics.Comm1\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Comm2:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   Q'' :: pi\n  and   P' :: pi\n  and   Q  :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>lb in Q''\\<rightarrow>a<x> \\<prec> Q'\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\n  Q \\<Longrightarrow>\\<^sub>lb in Q''\\<rightarrow>a<x> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P' \\<parallel> Q'", "by(auto intro: Weak_Late_Step_Semantics.Comm2\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Close1:\n  fixes P  :: pi\n  and   y  :: name\n  and   P'' :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   Q  :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>ly in P''\\<rightarrow>a<x> \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>y> \\<prec> Q'\"\n  and     xFreshP: \"y \\<sharp> P\"\n  and     xFreshQ: \"y \\<sharp> Q\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel>\n                         Q')", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>ly in P''\\<rightarrow>a<x> \\<prec> P'\n  Q \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>y> \\<prec> Q'\n  y \\<sharp> P\n  y \\<sharp> Q\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel>\n                         Q')", "by(auto intro: Weak_Late_Step_Semantics.Close1\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Close2:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   Q  :: pi\n  and   y  :: name\n  and   Q'' :: pi\n  and   Q' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>y> \\<prec> P'\"\n  and     QTrans: \"Q \\<Longrightarrow>\\<^sub>ly in Q''\\<rightarrow>a<x> \\<prec> Q'\"\n  and     xFreshP: \"y \\<sharp> P\"\n  and     xFreshQ: \"y \\<sharp> Q\"\n\n  shows \"P \\<parallel> Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel> Q')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel>\n                         Q')", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>y> \\<prec> P'\n  Q \\<Longrightarrow>\\<^sub>ly in Q''\\<rightarrow>a<x> \\<prec> Q'\n  y \\<sharp> P\n  y \\<sharp> Q\n\ngoal (1 subgoal):\n 1. P \\<parallel>\n    Q \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> <\\<nu>y>(P' \\<parallel>\n                         Q')", "by(auto intro: Weak_Late_Step_Semantics.Close2\n  simp add: weakTransition_def residual.inject)"], ["", "lemma ResF:\n  fixes P  :: pi\n  and   \\<alpha>  :: freeRes\n  and   P' :: pi\n  and   x  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\"\n  and     xFreshAlpha: \"x \\<sharp> \\<alpha>\"\n\n  shows \"<\\<nu>x>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> <\\<nu>x>P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>x>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> <\\<nu>x>P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\n  x \\<sharp> \\<alpha>\n\ngoal (1 subgoal):\n 1. <\\<nu>x>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> <\\<nu>x>P'", "by(auto intro: Weak_Late_Step_Semantics.ResF\n  simp add: weakTransition_def residual.inject)"], ["", "lemma ResB:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   y  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and     yineqa: \"y \\<noteq> a\"\n  and     yineqx: \"y \\<noteq> x\"\n  and     xFreshP: \"x \\<sharp> P\"\n\n  shows \"<\\<nu>y>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> (<\\<nu>y>P')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>y>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> <\\<nu>y>P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n  y \\<noteq> a\n  y \\<noteq> x\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. <\\<nu>y>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> <\\<nu>y>P'", "by(auto intro: Weak_Late_Step_Semantics.ResB\n  simp add: weakTransition_def residual.inject)"], ["", "lemma Bang:\n  fixes P  :: pi\n  and   Rs :: residual\n\n  assumes \"P \\<parallel> !P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n  and     \"Rs \\<noteq> \\<tau> \\<prec> P \\<parallel> !P\"\n  \n  shows \"!P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. !P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs", "using assms"], ["proof (prove)\nusing this:\n  P \\<parallel> !P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n  Rs \\<noteq> \\<tau> \\<prec> P \\<parallel> !P\n\ngoal (1 subgoal):\n 1. !P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs", "by(auto intro: Weak_Late_Step_Semantics.Bang\n  simp add: weakTransition_def residual.inject)"], ["", "lemma tauTransitionChain:\n  fixes P  :: pi\n  and   P' :: pi\n\n  assumes \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P'\"\n\n  shows \"P \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>\\<tau> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P'\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(auto intro: Weak_Late_Step_Semantics.tauTransitionChain\n  simp add: weakTransition_def residual.inject transition_def)"], ["", "lemma chainTransitionAppend:\n  fixes P   :: pi\n  and   P'  :: pi\n  and   Rs  :: residual\n  and   a   :: name\n  and   x   :: name\n  and   P'' :: pi\n  and   \\<alpha>   :: freeRes\n\n  shows \"P \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> P' \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'' \\<Longrightarrow> P'' \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> x \\<sharp> P \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and   \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'' \\<Longrightarrow> P'' \\<Longrightarrow>\\<^sub>\\<tau> P' \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>P \\<Longrightarrow>\\<^sub>\\<tau> P';\n      P' \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\\<rbrakk>\n     \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs) &&&\n    (\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'';\n      P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; x \\<sharp> P\\<rbrakk>\n     \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P') &&&\n    (\\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n      P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n     \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P')", "proof -"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>\\<tau> P';\n     P' \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n 2. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; x \\<sharp> P\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n 3. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "assume \"P \\<Longrightarrow>\\<^sub>\\<tau> P'\" and \"P' \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\""], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  P' \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n\ngoal (3 subgoals):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>\\<tau> P';\n     P' \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n 2. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; x \\<sharp> P\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n 3. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "thus \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\""], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  P' \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs", "by(auto intro: Weak_Late_Step_Semantics.chainTransitionAppend\n                   Weak_Late_Step_Semantics.tauActionChain\n       simp add: weakTransition_def residual.inject)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; x \\<sharp> P\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n 2. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; x \\<sharp> P\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n 2. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "assume \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P''\" and \"P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\" and \"x \\<sharp> P\""], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P''\n  P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\n  x \\<sharp> P\n\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; x \\<sharp> P\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n 2. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "thus \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\""], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P''\n  P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'", "by(auto intro: Weak_Late_Step_Semantics.chainTransitionAppend\n       simp add: weakTransition_def residual.inject)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "assume \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\" and \"P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\n  P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "thus \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\""], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\n  P'' \\<Longrightarrow>\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "apply(case_tac \"P''=P'\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; P'' = P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\n 2. \\<lbrakk>P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'';\n     P'' \\<Longrightarrow>\\<^sub>\\<tau> P'; P'' \\<noteq> P'\\<rbrakk>\n    \\<Longrightarrow> P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'", "by(auto dest: Weak_Late_Step_Semantics.chainTransitionAppend\n                     Weak_Late_Step_Semantics.tauActionChain\n       simp add: weakTransition_def residual.inject)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma weakEqWeakTransitionAppend:\n  fixes P   :: pi\n  and   P'  :: pi\n  and   \\<alpha>   :: freeRes\n  and   P'' :: pi\n  \n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<tau> \\<prec> P'\"\n  and     P'Trans: \"P' \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\"\n  \n  shows \"P \\<Longrightarrow>\\<^sub>l\\<alpha> \\<prec> P''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "proof(cases \"\\<alpha>=\\<tau>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> = \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n 2. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "assume alphaEqTau: \"\\<alpha> = \\<tau>\""], ["proof (state)\nthis:\n  \\<alpha> = \\<tau>\n\ngoal (2 subgoals):\n 1. \\<alpha> = \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n 2. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "with P'Trans"], ["proof (chain)\npicking this:\n  P' \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\n  \\<alpha> = \\<tau>", "have \"P' \\<Longrightarrow>\\<^sub>\\<tau> P''\""], ["proof (prove)\nusing this:\n  P' \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\n  \\<alpha> = \\<tau>\n\ngoal (1 subgoal):\n 1. P' \\<Longrightarrow>\\<^sub>\\<tau> P''", "by(blast intro: tauTransitionChain)"], ["proof (state)\nthis:\n  P' \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (2 subgoals):\n 1. \\<alpha> = \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n 2. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "with PTrans alphaEqTau"], ["proof (chain)\npicking this:\n  P \\<Longrightarrow>\\<^sub>l \\<tau> \\<prec> P'\n  \\<alpha> = \\<tau>\n  P' \\<Longrightarrow>\\<^sub>\\<tau> P''", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l \\<tau> \\<prec> P'\n  \\<alpha> = \\<tau>\n  P' \\<Longrightarrow>\\<^sub>\\<tau> P''\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "by(blast intro: Weak_Late_Step_Semantics.chainTransitionAppend)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "assume alphaIneqTau: \"\\<alpha> \\<noteq> \\<tau>\""], ["proof (state)\nthis:\n  \\<alpha> \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "from PTrans"], ["proof (chain)\npicking this:\n  P \\<Longrightarrow>\\<^sub>l \\<tau> \\<prec> P'", "have \"P \\<Longrightarrow>\\<^sub>\\<tau> P'\""], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l \\<tau> \\<prec> P'\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>\\<tau> P'", "by(rule Weak_Late_Step_Semantics.tauTransitionChain)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "moreover"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>\\<tau> P'\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "from P'Trans alphaIneqTau"], ["proof (chain)\npicking this:\n  P' \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\n  \\<alpha> \\<noteq> \\<tau>", "have \"P' \\<Longrightarrow>\\<^sub>l\\<alpha> \\<prec> P''\""], ["proof (prove)\nusing this:\n  P' \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<alpha> \\<prec> P''\n  \\<alpha> \\<noteq> \\<tau>\n\ngoal (1 subgoal):\n 1. P' \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "by(auto simp add: weakTransition_def residual.inject)"], ["proof (state)\nthis:\n  P' \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n\ngoal (1 subgoal):\n 1. \\<alpha> \\<noteq> \\<tau> \\<Longrightarrow>\n    P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "ultimately"], ["proof (chain)\npicking this:\n  P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  P' \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "show ?thesis"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>\\<tau> P'\n  P' \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n\ngoal (1 subgoal):\n 1. P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''", "by(rule Weak_Late_Step_Semantics.chainTransitionAppend)"], ["proof (state)\nthis:\n  P \\<Longrightarrow>\\<^sub>l \\<alpha> \\<prec> P''\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma freshBoundOutputTransition:\n  fixes P  :: pi\n  and   a  :: name\n  and   x  :: name\n  and   P' :: pi\n  and   c  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n  and     cineqx: \"c \\<noteq> x\"\n\n  shows \"c \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<\\<nu>x> \\<prec> P'\n  c \\<sharp> P\n  c \\<noteq> x\n\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "by(auto intro: Weak_Late_Step_Semantics.freshBoundOutputTransition\n  simp add: weakTransition_def residual.inject)"], ["", "lemma freshTauTransition:\n  fixes P :: pi\n  and   c :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n\n  shows \"c \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^\\<tau> \\<prec> P'\n  c \\<sharp> P\n\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "by(auto intro: Weak_Late_Step_Semantics.freshTauTransition\n  simp add: weakTransition_def residual.inject)"], ["", "lemma freshOutputTransition:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P' :: pi\n  and   c  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n\n  shows \"c \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a[b] \\<prec> P'\n  c \\<sharp> P\n\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "by(auto intro: Weak_Late_Step_Semantics.freshOutputTransition\n  simp add: weakTransition_def residual.inject)"], ["", "lemma eqvtI:\n  fixes P    :: pi\n  and   Rs   :: residual\n  and   perm :: \"name prm\"\n\n  assumes \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^ Rs\"\n\n  shows \"(perm \\<bullet> P) \\<Longrightarrow>\\<^sub>l\\<^sup>^ (perm \\<bullet> Rs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm \\<bullet> P \\<Longrightarrow>\\<^sub>l\\<^sup>^perm \\<bullet> Rs", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^Rs\n\ngoal (1 subgoal):\n 1. perm \\<bullet> P \\<Longrightarrow>\\<^sub>l\\<^sup>^perm \\<bullet> Rs", "by(auto intro: Weak_Late_Step_Semantics.eqvtI\n  simp add: weakTransition_def residual.inject)"], ["", "lemma freshInputTransition:\n  fixes P  :: pi\n  and   a  :: name\n  and   b  :: name\n  and   P' :: pi\n  and   c  :: name\n\n  assumes PTrans: \"P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<b> \\<prec> P'\"\n  and     cFreshP: \"c \\<sharp> P\"\n  and     cineqb: \"c \\<noteq> b\"\n\n  shows \"c \\<sharp> P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<Longrightarrow>\\<^sub>l\\<^sup>^a<b> \\<prec> P'\n  c \\<sharp> P\n  c \\<noteq> b\n\ngoal (1 subgoal):\n 1. c \\<sharp> P'", "by(auto intro: Weak_Late_Step_Semantics.freshInputTransition\n  simp add: weakTransition_def residual.inject)"], ["", "lemmas freshTransition = freshBoundOutputTransition freshOutputTransition\n                         freshInputTransition freshTauTransition"], ["", "end"]]}