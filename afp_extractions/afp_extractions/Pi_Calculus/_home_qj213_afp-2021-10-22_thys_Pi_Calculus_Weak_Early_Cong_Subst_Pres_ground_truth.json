{"file_name": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus/Weak_Early_Cong_Subst_Pres.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus", "problem_names": ["lemma weakCongStructCong:\n  fixes P :: pi\n  and   Q :: pi\n\n  assumes \"P \\<equiv>\\<^sub>s Q\"\n\n  shows \"P \\<simeq>\\<^sup>s Q\"", "lemma tauPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"\\<tau>.(P) \\<simeq>\\<^sup>s \\<tau>.(Q)\"", "lemma inputPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   x :: name\n\n  assumes PeqQ: \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"a<x>.P \\<simeq>\\<^sup>s a<x>.Q\"", "lemma outputPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"a{b}.P \\<simeq>\\<^sup>s a{b}.Q\"", "lemma matchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"[a\\<frown>b]P \\<simeq>\\<^sup>s [a\\<frown>b]Q\"", "lemma mismatchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"[a\\<noteq>b]P \\<simeq>\\<^sup>s [a\\<noteq>b]Q\"", "lemma sumPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<oplus> R \\<simeq>\\<^sup>s Q \\<oplus> R\"", "lemma parPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<parallel> R \\<simeq>\\<^sup>s Q \\<parallel> R\"", "lemma resPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   x :: name\n\n  assumes PeqQ: \"P \\<simeq>\\<^sup>s Q\"\n  \n  shows \"<\\<nu>x>P \\<simeq>\\<^sup>s <\\<nu>x>Q\"", "lemma bangPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"!P \\<simeq>\\<^sup>s !Q\""], "translations": [["", "lemma weakCongStructCong:\n  fixes P :: pi\n  and   Q :: pi\n\n  assumes \"P \\<equiv>\\<^sub>s Q\"\n\n  shows \"P \\<simeq>\\<^sup>s Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<equiv>\\<^sub>s Q\n\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s Q", "by(metis earlyCongStructCong strongEqWeakCong)"], ["", "lemma tauPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"\\<tau>.(P) \\<simeq>\\<^sup>s \\<tau>.(Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<tau>.P \\<simeq>\\<^sup>s \\<tau>.Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. \\<tau>.P \\<simeq>\\<^sup>s \\<tau>.Q", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.tauPres)"], ["", "lemma inputPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   x :: name\n\n  assumes PeqQ: \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"a<x>.P \\<simeq>\\<^sup>s a<x>.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a<x>.P \\<simeq>\\<^sup>s a<x>.Q", "proof(auto simp add: weakCongruenceSubst_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "fix s::\"(name \\<times> name) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "from congruenceWeakBisim"], ["proof (chain)\npicking this:\n  ?P \\<simeq> ?Q \\<Longrightarrow> ?P \\<approx> ?Q", "have Input: \"\\<And>P Q a x s. \\<lbrakk>P[<s>] \\<simeq>\\<^sup>s Q[<s>]; x \\<sharp> s\\<rbrakk> \\<Longrightarrow> (a<x>.P)[<s>] \\<simeq> (a<x>.Q)[<s>]\""], ["proof (prove)\nusing this:\n  ?P \\<simeq> ?Q \\<Longrightarrow> ?P \\<approx> ?Q\n\ngoal (1 subgoal):\n 1. \\<And>P Q a x s.\n       \\<lbrakk>P[<s>] \\<simeq>\\<^sup>s Q[<s>]; x \\<sharp> s\\<rbrakk>\n       \\<Longrightarrow> a<x>.P[<s>] \\<simeq> a<x>.Q[<s>]", "apply(auto simp add: weakCongruenceSubst_def weakCongruence_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P Q a x s.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>][<\\<sigma>>] \\<and>\n                   Q[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>][<\\<sigma>>];\n        x \\<sharp> s;\n        \\<And>P Q.\n           P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n           Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P \\<Longrightarrow>\n           P \\<approx> Q\\<rbrakk>\n       \\<Longrightarrow> seq_subst_name a\n                          s<x>.(P[<s>]) \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> seq_subst_name\n                  a s<x>.(Q[<s>])\n 2. \\<And>P Q a x s.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>][<\\<sigma>>] \\<and>\n                   Q[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>][<\\<sigma>>];\n        x \\<sharp> s;\n        \\<And>P Q.\n           P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n           Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P \\<Longrightarrow>\n           P \\<approx> Q\\<rbrakk>\n       \\<Longrightarrow> seq_subst_name a\n                          s<x>.(Q[<s>]) \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> seq_subst_name\n                  a s<x>.(P[<s>])", "apply(rule Weak_Early_Step_Sim_Pres.inputPres, auto)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P Q x s y.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>][<\\<sigma>>] \\<and>\n                   Q[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>][<\\<sigma>>];\n        x \\<sharp> s;\n        \\<And>P Q.\n           P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n           Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P \\<Longrightarrow>\n           P \\<approx> Q\\<rbrakk>\n       \\<Longrightarrow> P[<s>][x::=y] \\<approx> Q[<s>][x::=y]\n 2. \\<And>P Q a x s.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>][<\\<sigma>>] \\<and>\n                   Q[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>][<\\<sigma>>];\n        x \\<sharp> s;\n        \\<And>P Q.\n           P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n           Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P \\<Longrightarrow>\n           P \\<approx> Q\\<rbrakk>\n       \\<Longrightarrow> seq_subst_name a\n                          s<x>.(Q[<s>]) \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> seq_subst_name\n                  a s<x>.(P[<s>])", "apply(erule_tac x=\"[(x, y)]\" in allE, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q a x s.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>][<\\<sigma>>] \\<and>\n                   Q[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>][<\\<sigma>>];\n        x \\<sharp> s;\n        \\<And>P Q.\n           P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n           Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P \\<Longrightarrow>\n           P \\<approx> Q\\<rbrakk>\n       \\<Longrightarrow> seq_subst_name a\n                          s<x>.(Q[<s>]) \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> seq_subst_name\n                  a s<x>.(P[<s>])", "apply(rule Weak_Early_Step_Sim_Pres.inputPres, auto)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q x s y.\n       \\<lbrakk>\\<forall>\\<sigma>.\n                   P[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>][<\\<sigma>>] \\<and>\n                   Q[<s>][<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>][<\\<sigma>>];\n        x \\<sharp> s;\n        \\<And>P Q.\n           P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n           Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P \\<Longrightarrow>\n           P \\<approx> Q\\<rbrakk>\n       \\<Longrightarrow> Q[<s>][x::=y] \\<approx> P[<s>][x::=y]", "by(erule_tac x=\"[(x, y)]\" in allE, auto)"], ["proof (state)\nthis:\n  \\<lbrakk>?P[<?s>] \\<simeq>\\<^sup>s ?Q[<?s>]; ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> ?a<?x>.?P[<?s>] \\<simeq> ?a<?x>.?Q[<?s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?P[<?s>] \\<simeq>\\<^sup>s ?Q[<?s>]; ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> ?a<?x>.?P[<?s>] \\<simeq> ?a<?x>.?Q[<?s>]", "obtain c::name where cFreshP: \"c \\<sharp> P\" and cFreshQ: \"c \\<sharp> Q\" and cFreshs: \"c \\<sharp> s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?P[<?s>] \\<simeq>\\<^sup>s ?Q[<?s>]; ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> ?a<?x>.?P[<?s>] \\<simeq> ?a<?x>.?Q[<?s>]\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<sharp> P; c \\<sharp> Q; c \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(force intro: name_exists_fresh[of \"(P, Q, s)\"])"], ["proof (state)\nthis:\n  c \\<sharp> P\n  c \\<sharp> Q\n  c \\<sharp> s\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "from PeqQ"], ["proof (chain)\npicking this:\n  P \\<simeq>\\<^sup>s Q", "have \"P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s Q[<([(x, c)] \\<bullet> s)>]\""], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s Q[<([(x, c)] \\<bullet> s)>]", "by(rule partUnfold)"], ["proof (state)\nthis:\n  P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "hence \"([(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>]) \\<simeq>\\<^sup>s  ([(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>])\""], ["proof (prove)\nusing this:\n  P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. [(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s\n    [(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>]", "by(rule Weak_Early_Cong_Subst.eqvtI)"], ["proof (state)\nthis:\n  [(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s\n  [(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "hence \"([(x, c)] \\<bullet> P)[<s>] \\<simeq>\\<^sup>s ([(x, c)] \\<bullet> Q)[<s>]\""], ["proof (prove)\nusing this:\n  [(x, c)] \\<bullet> P[<([(x, c)] \\<bullet> s)>] \\<simeq>\\<^sup>s\n  [(x, c)] \\<bullet> Q[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. ([(x, c)] \\<bullet> P)[<s>] \\<simeq>\\<^sup>s ([(x, c)] \\<bullet> Q)[<s>]", "by simp"], ["proof (state)\nthis:\n  ([(x, c)] \\<bullet> P)[<s>] \\<simeq>\\<^sup>s ([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "hence \"(a<c>.([(x, c)] \\<bullet> P))[<s>] \\<simeq> (a<c>.([(x, c)] \\<bullet> Q))[<s>]\""], ["proof (prove)\nusing this:\n  ([(x, c)] \\<bullet> P)[<s>] \\<simeq>\\<^sup>s ([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. a<c>.([(x, c)] \\<bullet> P)[<s>] \\<simeq>\n    a<c>.([(x, c)] \\<bullet> Q)[<s>]", "using cFreshs"], ["proof (prove)\nusing this:\n  ([(x, c)] \\<bullet> P)[<s>] \\<simeq>\\<^sup>s ([(x, c)] \\<bullet> Q)[<s>]\n  c \\<sharp> s\n\ngoal (1 subgoal):\n 1. a<c>.([(x, c)] \\<bullet> P)[<s>] \\<simeq>\n    a<c>.([(x, c)] \\<bullet> Q)[<s>]", "by(rule Input)"], ["proof (state)\nthis:\n  a<c>.([(x, c)] \\<bullet> P)[<s>] \\<simeq> a<c>.([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  a<c>.([(x, c)] \\<bullet> P)[<s>] \\<simeq> a<c>.([(x, c)] \\<bullet> Q)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "from cFreshP cFreshQ"], ["proof (chain)\npicking this:\n  c \\<sharp> P\n  c \\<sharp> Q", "have \"a<x>.P = a<c>.([(x, c)] \\<bullet> P)\" and \"a<x>.Q = a<c>.([(x, c)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  c \\<sharp> P\n  c \\<sharp> Q\n\ngoal (1 subgoal):\n 1. a<x>.P = a<c>.([(x, c)] \\<bullet> P) &&&\n    a<x>.Q = a<c>.([(x, c)] \\<bullet> Q)", "by(simp add: Agent.alphaInput)+"], ["proof (state)\nthis:\n  a<x>.P = a<c>.([(x, c)] \\<bullet> P)\n  a<x>.Q = a<c>.([(x, c)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. a<x>.P[<\\<sigma>>] \\<simeq> a<x>.Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  a<c>.([(x, c)] \\<bullet> P)[<s>] \\<simeq> a<c>.([(x, c)] \\<bullet> Q)[<s>]\n  a<x>.P = a<c>.([(x, c)] \\<bullet> P)\n  a<x>.Q = a<c>.([(x, c)] \\<bullet> Q)", "show \"(a<x>.P)[<s>] \\<simeq> (a<x>.Q)[<s>]\""], ["proof (prove)\nusing this:\n  a<c>.([(x, c)] \\<bullet> P)[<s>] \\<simeq> a<c>.([(x, c)] \\<bullet> Q)[<s>]\n  a<x>.P = a<c>.([(x, c)] \\<bullet> P)\n  a<x>.Q = a<c>.([(x, c)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. a<x>.P[<s>] \\<simeq> a<x>.Q[<s>]", "by simp"], ["proof (state)\nthis:\n  a<x>.P[<s>] \\<simeq> a<x>.Q[<s>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma outputPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"a{b}.P \\<simeq>\\<^sup>s a{b}.Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a{b}.P \\<simeq>\\<^sup>s a{b}.Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. a{b}.P \\<simeq>\\<^sup>s a{b}.Q", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.outputPres)"], ["", "lemma matchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"[a\\<frown>b]P \\<simeq>\\<^sup>s [a\\<frown>b]Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a\\<frown>b]P \\<simeq>\\<^sup>s [a\\<frown>b]Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. [a\\<frown>b]P \\<simeq>\\<^sup>s [a\\<frown>b]Q", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.matchPres)"], ["", "lemma mismatchPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   a :: name\n  and   b :: name\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"[a\\<noteq>b]P \\<simeq>\\<^sup>s [a\\<noteq>b]Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. [a\\<noteq>b]P \\<simeq>\\<^sup>s [a\\<noteq>b]Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. [a\\<noteq>b]P \\<simeq>\\<^sup>s [a\\<noteq>b]Q", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.mismatchPres)"], ["", "lemma sumPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<oplus> R \\<simeq>\\<^sup>s Q \\<oplus> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<oplus> R \\<simeq>\\<^sup>s Q \\<oplus> R", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<oplus> R \\<simeq>\\<^sup>s Q \\<oplus> R", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.sumPres)"], ["", "lemma parPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<parallel> R \\<simeq>\\<^sup>s Q \\<parallel> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<parallel> R \\<simeq>\\<^sup>s Q \\<parallel> R", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<parallel> R \\<simeq>\\<^sup>s Q \\<parallel> R", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.parPres)"], ["", "lemma resPres:\n  fixes P :: pi\n  and   Q :: pi\n  and   x :: name\n\n  assumes PeqQ: \"P \\<simeq>\\<^sup>s Q\"\n  \n  shows \"<\\<nu>x>P \\<simeq>\\<^sup>s <\\<nu>x>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>x>P \\<simeq>\\<^sup>s <\\<nu>x>Q", "proof(auto simp add: weakCongruenceSubst_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "fix s::\"(name \\<times> name) list\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "have Goal: \"\\<And>P Q x s. \\<lbrakk>P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]; x \\<sharp> s\\<rbrakk> \\<Longrightarrow> (<\\<nu>x>P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> (<\\<nu>x>Q)[<s>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P Q x s.\n       \\<lbrakk>P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>];\n        x \\<sharp> s\\<rbrakk>\n       \\<Longrightarrow> <\\<nu>x>P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>x>Q[<s>]", "by(force intro: Weak_Early_Step_Sim_Pres.resPres Weak_Early_Bisim_Pres.resPres Weak_Early_Bisim.eqvt)"], ["proof (state)\nthis:\n  \\<lbrakk>?P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ?Q[<?s>];\n   ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> <\\<nu>?x>?P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>?x>?Q[<?s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ?Q[<?s>];\n   ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> <\\<nu>?x>?P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>?x>?Q[<?s>]", "obtain c::name where cFreshP: \"c \\<sharp> P\" and cFreshQ: \"c \\<sharp> Q\" and cFreshs: \"c \\<sharp> s\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ?Q[<?s>];\n   ?x \\<sharp> ?s\\<rbrakk>\n  \\<Longrightarrow> <\\<nu>?x>?P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>?x>?Q[<?s>]\n\ngoal (1 subgoal):\n 1. (\\<And>c.\n        \\<lbrakk>c \\<sharp> P; c \\<sharp> Q; c \\<sharp> s\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(force intro: name_exists_fresh[of \"(P, Q, s)\"])"], ["proof (state)\nthis:\n  c \\<sharp> P\n  c \\<sharp> Q\n  c \\<sharp> s\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "from PeqQ"], ["proof (chain)\npicking this:\n  P \\<simeq>\\<^sup>s Q", "have \"P[<([(x, c)] \\<bullet> s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<([(x, c)] \\<bullet> s)>]\" and \n                 \"Q[<([(x, c)] \\<bullet> s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<([(x, c)] \\<bullet> s)>]\""], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<([(x, c)] \\<bullet>\n        s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<([(x,\n                                  c)] \\<bullet>\n                                s)>] &&&\n    Q[<([(x, c)] \\<bullet>\n        s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<([(x,\n                                  c)] \\<bullet>\n                                s)>]", "by(force simp add: weakCongruenceSubst_def weakCongruence_def)+"], ["proof (state)\nthis:\n  P[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<([(x,\n                                c)] \\<bullet>\n                              s)>]\n  Q[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<([(x,\n                                c)] \\<bullet>\n                              s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "hence \"([(x, c)] \\<bullet> (P[<([(x, c)] \\<bullet> s)>])) \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x, c)] \\<bullet> (Q[<([(x, c)] \\<bullet> s)>]))\" and \n        \"([(x, c)] \\<bullet> (Q[<([(x, c)] \\<bullet> s)>])) \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x, c)] \\<bullet> (P[<([(x, c)] \\<bullet> s)>]))\""], ["proof (prove)\nusing this:\n  P[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<([(x,\n                                c)] \\<bullet>\n                              s)>]\n  Q[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<([(x,\n                                c)] \\<bullet>\n                              s)>]\n\ngoal (1 subgoal):\n 1. [(x, c)] \\<bullet>\n    P[<([(x, c)] \\<bullet>\n        s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> [(x,\n                              c)] \\<bullet>\n                            Q[<([(x, c)] \\<bullet> s)>] &&&\n    [(x, c)] \\<bullet>\n    Q[<([(x, c)] \\<bullet>\n        s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> [(x,\n                              c)] \\<bullet>\n                            P[<([(x, c)] \\<bullet> s)>]", "by(blast intro: Weak_Early_Step_Sim.eqvtI Weak_Early_Bisim.eqvt)+"], ["proof (state)\nthis:\n  [(x, c)] \\<bullet>\n  P[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> [(x,\n                            c)] \\<bullet>\n                          Q[<([(x, c)] \\<bullet> s)>]\n  [(x, c)] \\<bullet>\n  Q[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> [(x,\n                            c)] \\<bullet>\n                          P[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "hence \"([(x, c)] \\<bullet> P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x, c)] \\<bullet> Q)[<s>]\" and\n        \"([(x, c)] \\<bullet> Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x, c)] \\<bullet> P)[<s>]\""], ["proof (prove)\nusing this:\n  [(x, c)] \\<bullet>\n  P[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> [(x,\n                            c)] \\<bullet>\n                          Q[<([(x, c)] \\<bullet> s)>]\n  [(x, c)] \\<bullet>\n  Q[<([(x, c)] \\<bullet>\n      s)>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> [(x,\n                            c)] \\<bullet>\n                          P[<([(x, c)] \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. ([(x, c)] \\<bullet>\n     P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                               c)] \\<bullet>\n                             Q)[<s>] &&&\n    ([(x, c)] \\<bullet>\n     Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                               c)] \\<bullet>\n                             P)[<s>]", "by simp+"], ["proof (state)\nthis:\n  ([(x, c)] \\<bullet>\n   P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                             c)] \\<bullet>\n                           Q)[<s>]\n  ([(x, c)] \\<bullet>\n   Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                             c)] \\<bullet>\n                           P)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "with cFreshs"], ["proof (chain)\npicking this:\n  c \\<sharp> s\n  ([(x, c)] \\<bullet>\n   P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                             c)] \\<bullet>\n                           Q)[<s>]\n  ([(x, c)] \\<bullet>\n   Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                             c)] \\<bullet>\n                           P)[<s>]", "have \"(<\\<nu>c>([(x, c)] \\<bullet> P))[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> (<\\<nu>c>([(x, c)] \\<bullet> Q))[<s>]\" and\n                    \"(<\\<nu>c>([(x, c)] \\<bullet> Q))[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> (<\\<nu>c>([(x, c)] \\<bullet> P))[<s>]\""], ["proof (prove)\nusing this:\n  c \\<sharp> s\n  ([(x, c)] \\<bullet>\n   P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                             c)] \\<bullet>\n                           Q)[<s>]\n  ([(x, c)] \\<bullet>\n   Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ([(x,\n                             c)] \\<bullet>\n                           P)[<s>]\n\ngoal (1 subgoal):\n 1. <\\<nu>c>([(x, c)] \\<bullet>\n             P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n         c)] \\<bullet>\n       Q)[<s>] &&&\n    <\\<nu>c>([(x, c)] \\<bullet>\n             Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n         c)] \\<bullet>\n       P)[<s>]", "by(blast intro: Goal)+"], ["proof (state)\nthis:\n  <\\<nu>c>([(x, c)] \\<bullet>\n           P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     Q)[<s>]\n  <\\<nu>c>([(x, c)] \\<bullet>\n           Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     P)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  <\\<nu>c>([(x, c)] \\<bullet>\n           P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     Q)[<s>]\n  <\\<nu>c>([(x, c)] \\<bullet>\n           Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     P)[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "from cFreshP cFreshQ"], ["proof (chain)\npicking this:\n  c \\<sharp> P\n  c \\<sharp> Q", "have \"<\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\" and \"<\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)\""], ["proof (prove)\nusing this:\n  c \\<sharp> P\n  c \\<sharp> Q\n\ngoal (1 subgoal):\n 1. <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P) &&&\n    <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)", "by(simp add: alphaRes)+"], ["proof (state)\nthis:\n  <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\n  <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>. <\\<nu>x>P[<\\<sigma>>] \\<simeq> <\\<nu>x>Q[<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  <\\<nu>c>([(x, c)] \\<bullet>\n           P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     Q)[<s>]\n  <\\<nu>c>([(x, c)] \\<bullet>\n           Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     P)[<s>]\n  <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\n  <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)", "show \"(<\\<nu>x>P)[<s>] \\<simeq> (<\\<nu>x>Q)[<s>]\""], ["proof (prove)\nusing this:\n  <\\<nu>c>([(x, c)] \\<bullet>\n           P)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     Q)[<s>]\n  <\\<nu>c>([(x, c)] \\<bullet>\n           Q)[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> <\\<nu>c>([(x,\n       c)] \\<bullet>\n     P)[<s>]\n  <\\<nu>x>P = <\\<nu>c>([(x, c)] \\<bullet> P)\n  <\\<nu>x>Q = <\\<nu>c>([(x, c)] \\<bullet> Q)\n\ngoal (1 subgoal):\n 1. <\\<nu>x>P[<s>] \\<simeq> <\\<nu>x>Q[<s>]", "by(simp add: weakCongruence_def)"], ["proof (state)\nthis:\n  <\\<nu>x>P[<s>] \\<simeq> <\\<nu>x>Q[<s>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bangPres:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"!P \\<simeq>\\<^sup>s !Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. !P \\<simeq>\\<^sup>s !Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. !P \\<simeq>\\<^sup>s !Q", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong_Pres.bangPres)"], ["", "end"]]}