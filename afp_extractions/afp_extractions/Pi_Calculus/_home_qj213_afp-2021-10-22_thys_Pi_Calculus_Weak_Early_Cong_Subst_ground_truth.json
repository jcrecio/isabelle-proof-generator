{"file_name": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus/Weak_Early_Cong_Subst.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus", "problem_names": ["lemma unfoldE:\n  fixes P :: pi\n  and   Q :: pi\n  and   s :: \"(name \\<times> name) list\"\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\"\n  and   \"Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]\"", "lemma unfoldI:\n  fixes P :: pi\n  and   Q :: pi\n\n  assumes \"\\<And>s. P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\"\n  and     \"\\<And>s. Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]\"\n\n  shows \"P \\<simeq>\\<^sup>s Q\"", "lemma weakCongWeakEq:\n  fixes P :: pi\n  and   Q :: pi\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<simeq> Q\"", "lemma eqvtI:\n  fixes P :: pi\n  and   Q :: pi\n  and   p :: \"name prm\"\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"(p \\<bullet> P) \\<simeq>\\<^sup>s (p \\<bullet> Q)\"", "lemma strongEqWeakCong:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"P \\<simeq>\\<^sup>s Q\"", "lemma congSubstBisimSubst:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<approx>\\<^sup>s Q\"", "lemma reflexive:\n  fixes P :: pi\n  \n  shows \"P \\<simeq>\\<^sup>s P\"", "lemma symetric:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n  \n  shows \"Q \\<simeq>\\<^sup>s P\"", "lemma transitive:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n  and     \"Q \\<simeq>\\<^sup>s R\"\n  \n  shows \"P \\<simeq>\\<^sup>s R\"", "lemma partUnfold:\n  fixes P :: pi\n  and   Q :: pi\n  and   s :: \"(name \\<times> name) list\"\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P[<s>] \\<simeq>\\<^sup>s Q[<s>]\""], "translations": [["", "lemma unfoldE:\n  fixes P :: pi\n  and   Q :: pi\n  and   s :: \"(name \\<times> name) list\"\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\"\n  and   \"Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>] &&&\n    Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\n 2. Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]", "from assms"], ["proof (chain)\npicking this:\n  P \\<simeq>\\<^sup>s Q", "show \"P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\""], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]", "by(simp add: weakCongruenceSubst_def weakCongruence_def)"], ["proof (state)\nthis:\n  P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\n\ngoal (1 subgoal):\n 1. Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]", "from assms"], ["proof (chain)\npicking this:\n  P \\<simeq>\\<^sup>s Q", "show \"Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]\""], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]", "by(simp add: weakCongruenceSubst_def weakCongruence_def)"], ["proof (state)\nthis:\n  Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma unfoldI:\n  fixes P :: pi\n  and   Q :: pi\n\n  assumes \"\\<And>s. P[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<s>]\"\n  and     \"\\<And>s. Q[<s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<s>]\"\n\n  shows \"P \\<simeq>\\<^sup>s Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s Q", "using assms"], ["proof (prove)\nusing this:\n  P[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<?s>]\n  Q[<?s>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<?s>]\n\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s Q", "by(simp add: weakCongruenceSubst_def weakCongruence_def)"], ["", "lemma weakCongWeakEq:\n  fixes P :: pi\n  and   Q :: pi\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<simeq> Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<simeq> Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<simeq> Q", "apply(simp add: weakCongruenceSubst_def weakCongruence_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<sigma>.\n       P[<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<\\<sigma>>] \\<and>\n       Q[<\\<sigma>>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<\\<sigma>>] \\<Longrightarrow>\n    P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n    Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P", "apply(erule_tac x=\"[]\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. P[<[]>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q[<[]>] \\<and>\n    Q[<[]>] \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P[<[]>] \\<Longrightarrow>\n    P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> Q \\<and>\n    Q \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P", "by auto"], ["", "lemma eqvtI:\n  fixes P :: pi\n  and   Q :: pi\n  and   p :: \"name prm\"\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"(p \\<bullet> P) \\<simeq>\\<^sup>s (p \\<bullet> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p \\<bullet> P \\<simeq>\\<^sup>s p \\<bullet> Q", "proof(simp add: weakCongruenceSubst_def, rule allI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (p \\<bullet> P)[<\\<sigma>>] \\<simeq> (p \\<bullet> Q)[<\\<sigma>>]", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (p \\<bullet> P)[<\\<sigma>>] \\<simeq> (p \\<bullet> Q)[<\\<sigma>>]", "from assms"], ["proof (chain)\npicking this:\n  P \\<simeq>\\<^sup>s Q", "have \"P[<(rev p \\<bullet> s)>] \\<simeq> Q[<(rev p \\<bullet> s)>]\""], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<(rev p \\<bullet> s)>] \\<simeq> Q[<(rev p \\<bullet> s)>]", "by(auto simp add: weakCongruenceSubst_def)"], ["proof (state)\nthis:\n  P[<(rev p \\<bullet> s)>] \\<simeq> Q[<(rev p \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       (p \\<bullet> P)[<\\<sigma>>] \\<simeq> (p \\<bullet> Q)[<\\<sigma>>]", "thus \"(p \\<bullet> P)[<s>] \\<simeq> (p \\<bullet> Q)[<s>]\""], ["proof (prove)\nusing this:\n  P[<(rev p \\<bullet> s)>] \\<simeq> Q[<(rev p \\<bullet> s)>]\n\ngoal (1 subgoal):\n 1. (p \\<bullet> P)[<s>] \\<simeq> (p \\<bullet> Q)[<s>]", "by(drule_tac p=p in Weak_Early_Cong.eqvtI) (simp add: eqvts name_per_rev)"], ["proof (state)\nthis:\n  (p \\<bullet> P)[<s>] \\<simeq> (p \\<bullet> Q)[<s>]\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma strongEqWeakCong:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<sim>\\<^sup>s Q\"\n\n  shows \"P \\<simeq>\\<^sup>s Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<sim>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s Q", "by(auto intro: strongBisimWeakCong simp add: substClosed_def weakCongruenceSubst_def)"], ["", "lemma congSubstBisimSubst:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P \\<approx>\\<^sup>s Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<approx>\\<^sup>s Q", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P \\<approx>\\<^sup>s Q", "by(auto intro: congruenceWeakBisim simp add: substClosed_def weakCongruenceSubst_def)"], ["", "lemma reflexive:\n  fixes P :: pi\n  \n  shows \"P \\<simeq>\\<^sup>s P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s P", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s P", "from Weak_Early_Bisim.reflexive"], ["proof (chain)\npicking this:\n  ?P \\<approx> ?P", "have \"\\<And>P. P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P\""], ["proof (prove)\nusing this:\n  ?P \\<approx> ?P\n\ngoal (1 subgoal):\n 1. \\<And>P. P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> P", "by(blast intro: Weak_Early_Step_Sim.reflexive)"], ["proof (state)\nthis:\n  ?P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ?P\n\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s P", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?P \\<leadsto>\\<guillemotleft>weakBisim\\<guillemotright> ?P\n\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s P", "by(force simp add: weakCongruenceSubst_def weakCongruence_def)"], ["proof (state)\nthis:\n  P \\<simeq>\\<^sup>s P\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma symetric:\n  fixes P :: pi\n  and   Q :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n  \n  shows \"Q \\<simeq>\\<^sup>s P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<simeq>\\<^sup>s P", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. Q \\<simeq>\\<^sup>s P", "by(auto simp add: weakCongruenceSubst_def weakCongruence_def)"], ["", "lemma transitive:\n  fixes P :: pi\n  and   Q :: pi\n  and   R :: pi\n  \n  assumes \"P \\<simeq>\\<^sup>s Q\"\n  and     \"Q \\<simeq>\\<^sup>s R\"\n  \n  shows \"P \\<simeq>\\<^sup>s R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s R", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n  Q \\<simeq>\\<^sup>s R\n\ngoal (1 subgoal):\n 1. P \\<simeq>\\<^sup>s R", "by(auto simp add: weakCongruenceSubst_def intro: Weak_Early_Cong.transitive)"], ["", "lemma partUnfold:\n  fixes P :: pi\n  and   Q :: pi\n  and   s :: \"(name \\<times> name) list\"\n\n  assumes \"P \\<simeq>\\<^sup>s Q\"\n\n  shows \"P[<s>] \\<simeq>\\<^sup>s Q[<s>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P[<s>] \\<simeq>\\<^sup>s Q[<s>]", "using assms"], ["proof (prove)\nusing this:\n  P \\<simeq>\\<^sup>s Q\n\ngoal (1 subgoal):\n 1. P[<s>] \\<simeq>\\<^sup>s Q[<s>]", "proof(auto simp add: weakCongruenceSubst_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "fix s'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "assume \"\\<forall>s. P[<s>] \\<simeq> Q[<s>]\""], ["proof (state)\nthis:\n  \\<forall>s. P[<s>] \\<simeq> Q[<s>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "hence \"P[<(s@s')>] \\<simeq> Q[<(s@s')>]\""], ["proof (prove)\nusing this:\n  \\<forall>s. P[<s>] \\<simeq> Q[<s>]\n\ngoal (1 subgoal):\n 1. P[<(s @ s')>] \\<simeq> Q[<(s @ s')>]", "by blast"], ["proof (state)\nthis:\n  P[<(s @ s')>] \\<simeq> Q[<(s @ s')>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  P[<(s @ s')>] \\<simeq> Q[<(s @ s')>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "have \"P[<(s@s')>] = (P[<s>])[<s'>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P[<(s @ s')>] = P[<s>][<s'>]", "by(induct s', auto)"], ["proof (state)\nthis:\n  P[<(s @ s')>] = P[<s>][<s'>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "moreover"], ["proof (state)\nthis:\n  P[<(s @ s')>] = P[<s>][<s'>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "have \"Q[<(s@s')>] = (Q[<s>])[<s'>]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q[<(s @ s')>] = Q[<s>][<s'>]", "by(induct s', auto)"], ["proof (state)\nthis:\n  Q[<(s @ s')>] = Q[<s>][<s'>]\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>.\n       \\<forall>\\<sigma>.\n          P[<\\<sigma>>] \\<simeq> Q[<\\<sigma>>] \\<Longrightarrow>\n       P[<s>][<\\<sigma>>] \\<simeq> Q[<s>][<\\<sigma>>]", "ultimately"], ["proof (chain)\npicking this:\n  P[<(s @ s')>] \\<simeq> Q[<(s @ s')>]\n  P[<(s @ s')>] = P[<s>][<s'>]\n  Q[<(s @ s')>] = Q[<s>][<s'>]", "show \"(P[<s>])[<s'>] \\<simeq> (Q[<s>])[<s'>]\""], ["proof (prove)\nusing this:\n  P[<(s @ s')>] \\<simeq> Q[<(s @ s')>]\n  P[<(s @ s')>] = P[<s>][<s'>]\n  Q[<(s @ s')>] = Q[<s>][<s'>]\n\ngoal (1 subgoal):\n 1. P[<s>][<s'>] \\<simeq> Q[<s>][<s'>]", "by simp"], ["proof (state)\nthis:\n  P[<s>][<s'>] \\<simeq> Q[<s>][<s'>]\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}