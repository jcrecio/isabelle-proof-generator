{"file_name": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus/Strong_Late_Sim.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Pi_Calculus", "problem_names": ["lemma monotonic: \n  fixes A  :: \"(pi \\<times> pi) set\"\n  and   B  :: \"(pi \\<times> pi) set\"\n  and   P  :: pi\n  and   P' :: pi\n\n  assumes \"P \\<leadsto>[A] P'\"\n  and     \"A \\<subseteq> B\"\n\n  shows \"P \\<leadsto>[B] P'\"", "lemma derivativeMonotonic:\n  fixes A :: \"(pi \\<times> pi) set\"\n  and   B :: \"(pi \\<times> pi) set\"\n  and   P :: pi\n  and   Q :: pi\n  and   a :: subject\n  and   x :: name\n\n  assumes \"derivative P Q a x A\"\n  and     \"A \\<subseteq> B\"\n  \n  shows \"derivative P Q a x B\"", "lemma derivativeEqvtI:\n  fixes P    :: pi\n  and   Q    :: pi\n  and   a    :: subject\n  and   x    :: name\n  and   Rel  :: \"(pi \\<times> pi) set\"\n  and   perm :: \"name prm\"\n\n  assumes Der: \"derivative P Q a x Rel\"\n  and     Eqvt: \"eqvt Rel\"\n  \n  shows \"derivative (perm \\<bullet> P) (perm \\<bullet> Q) (perm \\<bullet> a) (perm \\<bullet> x) Rel\"", "lemma derivativeEqvtI2:\n  fixes P    :: pi\n  and   Q    :: pi\n  and   a    :: subject\n  and   x    :: name\n  and   Rel  :: \"(pi \\<times> pi) set\"\n  and   perm :: \"name prm\"\n\n  assumes Der: \"derivative P Q a x Rel\"\n  and     Eqvt: \"eqvt Rel\"\n  \n  shows \"derivative (perm \\<bullet> P) (perm \\<bullet> Q) a (perm \\<bullet> x) Rel\"", "lemma freshUnit[simp]:\n  fixes y :: name\n\n  shows \"y \\<sharp> ()\"", "lemma simCasesCont[consumes 1, case_names Bound Free]:\n  fixes P   :: pi\n  and   Q   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n  and   C   :: \"'a::fs_name\"\n\n  assumes Eqvt:  \"eqvt Rel\"\n  and     Bound: \"\\<And>a x Q'. \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'; x \\<sharp> P; x \\<sharp> Q; x \\<sharp> a; x \\<sharp> C\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and> derivative P' Q' a x Rel\"\n  and     Free:  \"\\<And>\\<alpha> Q'. Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] Q\"", "lemma simCases[case_names Bound Free]:\n  fixes P   :: pi\n  and   Q   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n\n  assumes Bound: \"\\<And>a y Q'. \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'; y \\<sharp> P\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and> derivative P' Q' a y Rel\"\n  and     Free:  \"\\<And>\\<alpha> Q'. Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] Q\"", "lemma resSimCases[consumes 1, case_names BoundOutput BoundR FreeR]:\n  fixes x   :: name\n  and   P   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n  and   Q   :: pi\n  and   C   :: \"'a::fs_name\"\n\n  assumes Eqvt:    \"eqvt Rel\"\n  and     BoundO:  \"\\<And>Q' a. \\<lbrakk>Q \\<longmapsto>a[x] \\<prec> Q'; a \\<noteq> x\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto>a<\\<nu>x> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n  and     BR:      \"\\<And>Q' a y. \\<lbrakk>Q \\<longmapsto>a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'; x \\<sharp> a; x \\<noteq> y; y \\<sharp> C\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto>a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and> derivative P' (<\\<nu>x>Q') a y Rel\"\n  and     BF:      \"\\<And>Q' \\<alpha>. \\<lbrakk>Q \\<longmapsto>\\<alpha> \\<prec> Q'; x \\<sharp> \\<alpha>\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto>\\<alpha> \\<prec> P' \\<and> (P', <\\<nu>x>Q') \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] <\\<nu>x>Q\"", "lemma simE:\n  fixes P   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n  and   Q   :: pi\n  and   a   :: subject\n  and   x   :: name\n  and   Q'  :: pi\n\n  assumes \"P \\<leadsto>[Rel] Q\"\n\n  shows \"Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q' \\<Longrightarrow> x \\<sharp> P \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and> (derivative P' Q' a x Rel)\"\n  and   \"Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"", "lemma eqvtI:\n  fixes P    :: pi\n  and   Q    :: pi\n  and   Rel  :: \"(pi \\<times> pi) set\"\n  and   perm :: \"name prm\"\n\n  assumes Sim: \"P \\<leadsto>[Rel] Q\"\n  and     RelRel': \"Rel \\<subseteq> Rel'\"\n  and     EqvtRel': \"eqvt Rel'\"\n\n  shows \"(perm \\<bullet> P) \\<leadsto>[Rel'] (perm \\<bullet> Q)\"", "lemma derivativeReflexive:\n  fixes P   :: pi\n  and   a   :: subject\n  and   x   :: name\n  and   Rel :: \"(pi \\<times> pi) set\"\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"derivative P P a x Rel\"", "lemma reflexive:\n  fixes P   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<leadsto>[Rel] P\"", "lemma transitive:\n  fixes P     :: pi\n  and   Q     :: pi\n  and   R     :: pi\n  and   Rel   :: \"(pi \\<times> pi) set\"\n  and   Rel'  :: \"(pi \\<times> pi) set\"\n  and   Rel'' :: \"(pi \\<times> pi) set\"\n\n  assumes PSimQ: \"P \\<leadsto>[Rel] Q\"\n  and     QSimR: \"Q \\<leadsto>[Rel'] R\"\n  and     Eqvt': \"eqvt Rel''\"\n  and     Trans: \"Rel O Rel' \\<subseteq> Rel''\"\n\n  shows \"P \\<leadsto>[Rel''] R\""], "translations": [["", "lemma monotonic: \n  fixes A  :: \"(pi \\<times> pi) set\"\n  and   B  :: \"(pi \\<times> pi) set\"\n  and   P  :: pi\n  and   P' :: pi\n\n  assumes \"P \\<leadsto>[A] P'\"\n  and     \"A \\<subseteq> B\"\n\n  shows \"P \\<leadsto>[B] P'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[B] P'", "using assms"], ["proof (prove)\nusing this:\n  P \\<leadsto>[A] P'\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[B] P'", "apply(auto simp add: simulation_def derivative_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>A \\<subseteq> B;\n        \\<forall>a x Q'.\n           P' \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q' \\<and>\n           x \\<sharp> P \\<longrightarrow>\n           (\\<exists>P'.\n               P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n               (case a of\n                InputS b \\<Rightarrow>\n                  \\<forall>u. (P'[x::=u], Q'[x::=u]) \\<in> A\n                | BoundOutputS b \\<Rightarrow> (P', Q') \\<in> A));\n        \\<forall>\\<alpha> Q'.\n           P' \\<longmapsto> \\<alpha> \\<prec> Q' \\<longrightarrow>\n           (\\<exists>P'.\n               P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> A);\n        P' \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            (case a of\n                             InputS b \\<Rightarrow>\n                               \\<forall>u. (P'[x::=u], Q'[x::=u]) \\<in> B\n                             | BoundOutputS b \\<Rightarrow>\n                                 (P', Q') \\<in> B)\n 2. \\<And>\\<alpha> Q'.\n       \\<lbrakk>A \\<subseteq> B;\n        \\<forall>a x Q'.\n           P' \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q' \\<and>\n           x \\<sharp> P \\<longrightarrow>\n           (\\<exists>P'.\n               P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n               (case a of\n                InputS b \\<Rightarrow>\n                  \\<forall>u. (P'[x::=u], Q'[x::=u]) \\<in> A\n                | BoundOutputS b \\<Rightarrow> (P', Q') \\<in> A));\n        \\<forall>\\<alpha> Q'.\n           P' \\<longmapsto> \\<alpha> \\<prec> Q' \\<longrightarrow>\n           (\\<exists>P'.\n               P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> A);\n        P' \\<longmapsto> \\<alpha> \\<prec> Q'\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                            (P', Q') \\<in> B", "by(case_tac a) fastforce+"], ["", "lemma derivativeMonotonic:\n  fixes A :: \"(pi \\<times> pi) set\"\n  and   B :: \"(pi \\<times> pi) set\"\n  and   P :: pi\n  and   Q :: pi\n  and   a :: subject\n  and   x :: name\n\n  assumes \"derivative P Q a x A\"\n  and     \"A \\<subseteq> B\"\n  \n  shows \"derivative P Q a x B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivative P Q a x B", "using assms"], ["proof (prove)\nusing this:\n  derivative P Q a x A\n  A \\<subseteq> B\n\ngoal (1 subgoal):\n 1. derivative P Q a x B", "by(case_tac a, auto simp add: derivative_def)"], ["", "lemma derivativeEqvtI:\n  fixes P    :: pi\n  and   Q    :: pi\n  and   a    :: subject\n  and   x    :: name\n  and   Rel  :: \"(pi \\<times> pi) set\"\n  and   perm :: \"name prm\"\n\n  assumes Der: \"derivative P Q a x Rel\"\n  and     Eqvt: \"eqvt Rel\"\n  \n  shows \"derivative (perm \\<bullet> P) (perm \\<bullet> Q) (perm \\<bullet> a) (perm \\<bullet> x) Rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P) (perm \\<bullet> Q) (perm \\<bullet> a)\n     (perm \\<bullet> x) Rel", "using assms"], ["proof (prove)\nusing this:\n  derivative P Q a x Rel\n  eqvt Rel\n\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P) (perm \\<bullet> Q) (perm \\<bullet> a)\n     (perm \\<bullet> x) Rel", "apply(case_tac a, auto simp add: derivative_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>\\<forall>u. (P[x::=u], Q[x::=u]) \\<in> Rel; a = InputS x1;\n        eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 2. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(erule_tac x=\"rev perm \\<bullet> u\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1; eqvt Rel;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 2. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(drule_tac perm=perm in eqvtRelI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> (?P9 x1 u, ?Q9 x1 u) \\<in> Rel\n 2. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel;\n        (perm \\<bullet> ?P9 x1 u, perm \\<bullet> ?Q9 x1 u)\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 3. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel;\n        (perm \\<bullet> P[x::=(rev perm \\<bullet> u)],\n         perm \\<bullet> Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 2. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(force simp add: eqvt_subs name_per_rev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "by(force simp add: eqvt_def)"], ["", "lemma derivativeEqvtI2:\n  fixes P    :: pi\n  and   Q    :: pi\n  and   a    :: subject\n  and   x    :: name\n  and   Rel  :: \"(pi \\<times> pi) set\"\n  and   perm :: \"name prm\"\n\n  assumes Der: \"derivative P Q a x Rel\"\n  and     Eqvt: \"eqvt Rel\"\n  \n  shows \"derivative (perm \\<bullet> P) (perm \\<bullet> Q) a (perm \\<bullet> x) Rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P) (perm \\<bullet> Q) a (perm \\<bullet> x)\n     Rel", "using assms"], ["proof (prove)\nusing this:\n  derivative P Q a x Rel\n  eqvt Rel\n\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P) (perm \\<bullet> Q) a (perm \\<bullet> x)\n     Rel", "apply(case_tac a, auto simp add: derivative_def)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>\\<forall>u. (P[x::=u], Q[x::=u]) \\<in> Rel; a = InputS x1;\n        eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 2. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(erule_tac x=\"rev perm \\<bullet> u\" in allE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1; eqvt Rel;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 2. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(drule_tac perm=perm in eqvtRelI)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> (?P9 x1 u, ?Q9 x1 u) \\<in> Rel\n 2. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel;\n        (perm \\<bullet> ?P9 x1 u, perm \\<bullet> ?Q9 x1 u)\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 3. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(blast)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1 u.\n       \\<lbrakk>a = InputS x1;\n        (P[x::=(rev perm \\<bullet> u)], Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel;\n        (perm \\<bullet> P[x::=(rev perm \\<bullet> u)],\n         perm \\<bullet> Q[x::=(rev perm \\<bullet> u)])\n        \\<in> Rel\\<rbrakk>\n       \\<Longrightarrow> ((perm \\<bullet> P)[(perm \\<bullet> x)::=u],\n                          (perm \\<bullet> Q)[(perm \\<bullet> x)::=u])\n                         \\<in> Rel\n 2. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "apply(force simp add: eqvt_subs name_per_rev)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<lbrakk>(P, Q) \\<in> Rel; a = BoundOutputS x2; eqvt Rel\\<rbrakk>\n       \\<Longrightarrow> (perm \\<bullet> P, perm \\<bullet> Q) \\<in> Rel", "by(force simp add: eqvt_def)"], ["", "lemma freshUnit[simp]:\n  fixes y :: name\n\n  shows \"y \\<sharp> ()\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sharp> ()", "by(auto simp add: fresh_def supp_unit)"], ["", "lemma simCasesCont[consumes 1, case_names Bound Free]:\n  fixes P   :: pi\n  and   Q   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n  and   C   :: \"'a::fs_name\"\n\n  assumes Eqvt:  \"eqvt Rel\"\n  and     Bound: \"\\<And>a x Q'. \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'; x \\<sharp> P; x \\<sharp> Q; x \\<sharp> a; x \\<sharp> C\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and> derivative P' Q' a x Rel\"\n  and     Free:  \"\\<And>\\<alpha> Q'. Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] Q", "using Free"], ["proof (prove)\nusing this:\n  Q \\<longmapsto> ?\\<alpha> \\<prec> ?Q' \\<Longrightarrow>\n  \\<exists>P'.\n     P \\<longmapsto> ?\\<alpha> \\<prec> P' \\<and> (P', ?Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] Q", "proof(auto simp add: simulation_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "fix a x Q'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "assume \"(x::name) \\<sharp> P\""], ["proof (state)\nthis:\n  x \\<sharp> P\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "assume Trans: \"Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\""], ["proof (state)\nthis:\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "obtain y::name where \"y \\<sharp> P\" and \"y \\<sharp> Q\" and \"y \\<sharp> a\" and \"y \\<sharp> C\" and \"y \\<sharp> Q'\" and \"y \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<sharp> P; y \\<sharp> Q; y \\<sharp> a; y \\<sharp> C;\n         y \\<sharp> Q'; y \\<noteq> x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(generate_fresh \"name\") auto"], ["proof (state)\nthis:\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> a\n  y \\<sharp> C\n  y \\<sharp> Q'\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "from Trans \\<open>y \\<sharp> Q'\\<close>"], ["proof (chain)\npicking this:\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  y \\<sharp> Q'", "have \"Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> [(x, y)] \\<bullet> Q'\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  y \\<sharp> Q'\n\ngoal (1 subgoal):\n 1. Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> [(x,\n                            y)] \\<bullet>\n                          Q'", "by(simp add: alphaBoundResidual)"], ["proof (state)\nthis:\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        Q'\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "hence \"\\<exists>P'. P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and> derivative P' ([(x, y)] \\<bullet> Q') a y Rel\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        Q'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' ([(x, y)] \\<bullet> Q') a y Rel", "using \\<open>y \\<sharp> P\\<close> \\<open>y \\<sharp> Q\\<close> \\<open>y \\<sharp> a\\<close> \\<open>y \\<sharp> C\\<close>"], ["proof (prove)\nusing this:\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        Q'\n  y \\<sharp> P\n  y \\<sharp> Q\n  y \\<sharp> a\n  y \\<sharp> C\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' ([(x, y)] \\<bullet> Q') a y Rel", "by(rule Bound)"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' ([(x, y)] \\<bullet> Q') a y Rel\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "then"], ["proof (chain)\npicking this:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' ([(x, y)] \\<bullet> Q') a y Rel", "obtain P' where PTrans: \"P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'\" and PDer: \"derivative P' ([(x, y)] \\<bullet> Q') a y Rel\""], ["proof (prove)\nusing this:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' ([(x, y)] \\<bullet> Q') a y Rel\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n         derivative P' ([(x, y)] \\<bullet> Q') a y Rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'\n  derivative P' ([(x, y)] \\<bullet> Q') a y Rel\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "from PTrans \\<open>x \\<sharp> P\\<close> \\<open>y \\<noteq> x\\<close>"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'\n  x \\<sharp> P\n  y \\<noteq> x", "have \"x \\<sharp> P'\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'\n  x \\<sharp> P\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. x \\<sharp> P'", "by(force intro: freshBoundDerivative)"], ["proof (state)\nthis:\n  x \\<sharp> P'\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "with PTrans"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'\n  x \\<sharp> P'", "have \"P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> [(x, y)] \\<bullet> P'\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'\n  x \\<sharp> P'\n\ngoal (1 subgoal):\n 1. P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> [(x,\n                            y)] \\<bullet>\n                          P'", "by(simp add: alphaBoundResidual name_swap)"], ["proof (state)\nthis:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        P'\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "moreover"], ["proof (state)\nthis:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        P'\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "have \"derivative ([(x, y)] \\<bullet> P') Q' a x Rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivative ([(x, y)] \\<bullet> P') Q' a x Rel", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. derivative ([(x, y)] \\<bullet> P') Q' a x Rel", "from PDer Eqvt"], ["proof (chain)\npicking this:\n  derivative P' ([(x, y)] \\<bullet> Q') a y Rel\n  eqvt Rel", "have \"derivative ([(x, y)] \\<bullet> P') ([(x, y)] \\<bullet> [(x, y)] \\<bullet> Q') a ([(x, y)] \\<bullet> y) Rel\""], ["proof (prove)\nusing this:\n  derivative P' ([(x, y)] \\<bullet> Q') a y Rel\n  eqvt Rel\n\ngoal (1 subgoal):\n 1. derivative ([(x, y)] \\<bullet> P')\n     ([(x, y)] \\<bullet> [(x, y)] \\<bullet> Q') a ([(x, y)] \\<bullet> y) Rel", "by(rule derivativeEqvtI2)"], ["proof (state)\nthis:\n  derivative ([(x, y)] \\<bullet> P')\n   ([(x, y)] \\<bullet> [(x, y)] \\<bullet> Q') a ([(x, y)] \\<bullet> y) Rel\n\ngoal (1 subgoal):\n 1. derivative ([(x, y)] \\<bullet> P') Q' a x Rel", "with \\<open>y \\<noteq> x\\<close>"], ["proof (chain)\npicking this:\n  y \\<noteq> x\n  derivative ([(x, y)] \\<bullet> P')\n   ([(x, y)] \\<bullet> [(x, y)] \\<bullet> Q') a ([(x, y)] \\<bullet> y) Rel", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  derivative ([(x, y)] \\<bullet> P')\n   ([(x, y)] \\<bullet> [(x, y)] \\<bullet> Q') a ([(x, y)] \\<bullet> y) Rel\n\ngoal (1 subgoal):\n 1. derivative ([(x, y)] \\<bullet> P') Q' a x Rel", "by(simp add: name_calc)"], ["proof (state)\nthis:\n  derivative ([(x, y)] \\<bullet> P') Q' a x Rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  derivative ([(x, y)] \\<bullet> P') Q' a x Rel\n\ngoal (1 subgoal):\n 1. \\<And>a x Q'.\n       \\<lbrakk>\\<And>\\<alpha> Q'.\n                   Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n                   \\<exists>P'.\n                      P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n                      (P', Q') \\<in> Rel;\n        Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel", "ultimately"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        P'\n  derivative ([(x, y)] \\<bullet> P') Q' a x Rel", "show \"\\<exists>P'. P \\<longmapsto>a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and> derivative P' Q' a x Rel\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> [(x,\n                          y)] \\<bullet>\n                        P'\n  derivative ([(x, y)] \\<bullet> P') Q' a x Rel\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' Q' a x Rel", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' Q' a x Rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simCases[case_names Bound Free]:\n  fixes P   :: pi\n  and   Q   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n\n  assumes Bound: \"\\<And>a y Q'. \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'; y \\<sharp> P\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and> derivative P' Q' a y Rel\"\n  and     Free:  \"\\<And>\\<alpha> Q'. Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] Q", "using assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>Q \\<longmapsto> ?a\\<guillemotleft>?y\\<guillemotright> \\<prec> ?Q';\n   ?y \\<sharp> P\\<rbrakk>\n  \\<Longrightarrow> \\<exists>P'.\n                       P \\<longmapsto> ?a\\<guillemotleft>?y\\<guillemotright> \\<prec> P' \\<and>\n                       derivative P' ?Q' ?a ?y Rel\n  Q \\<longmapsto> ?\\<alpha> \\<prec> ?Q' \\<Longrightarrow>\n  \\<exists>P'.\n     P \\<longmapsto> ?\\<alpha> \\<prec> P' \\<and> (P', ?Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] Q", "by(auto simp add: simulation_def)"], ["", "lemma resSimCases[consumes 1, case_names BoundOutput BoundR FreeR]:\n  fixes x   :: name\n  and   P   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n  and   Q   :: pi\n  and   C   :: \"'a::fs_name\"\n\n  assumes Eqvt:    \"eqvt Rel\"\n  and     BoundO:  \"\\<And>Q' a. \\<lbrakk>Q \\<longmapsto>a[x] \\<prec> Q'; a \\<noteq> x\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto>a<\\<nu>x> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n  and     BR:      \"\\<And>Q' a y. \\<lbrakk>Q \\<longmapsto>a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'; x \\<sharp> a; x \\<noteq> y; y \\<sharp> C\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto>a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and> derivative P' (<\\<nu>x>Q') a y Rel\"\n  and     BF:      \"\\<And>Q' \\<alpha>. \\<lbrakk>Q \\<longmapsto>\\<alpha> \\<prec> Q'; x \\<sharp> \\<alpha>\\<rbrakk> \\<Longrightarrow> \\<exists>P'. P \\<longmapsto>\\<alpha> \\<prec> P' \\<and> (P', <\\<nu>x>Q') \\<in> Rel\"\n\n  shows \"P \\<leadsto>[Rel] <\\<nu>x>Q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] <\\<nu>x>Q", "using Eqvt"], ["proof (prove)\nusing this:\n  eqvt Rel\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] <\\<nu>x>Q", "proof(induct rule: simCasesCont[where C=\"(C, x, Q)\"])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a xa Q'.\n       \\<lbrakk><\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> Q';\n        xa \\<sharp> P; xa \\<sharp> <\\<nu>x>Q; xa \\<sharp> a;\n        xa \\<sharp> (C, x, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a xa Rel\n 2. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "case(Bound a y Q')"], ["proof (state)\nthis:\n  <\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  y \\<sharp> P\n  y \\<sharp> <\\<nu>x>Q\n  y \\<sharp> a\n  y \\<sharp> (C, x, Q)\n\ngoal (2 subgoals):\n 1. \\<And>a xa Q'.\n       \\<lbrakk><\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> Q';\n        xa \\<sharp> P; xa \\<sharp> <\\<nu>x>Q; xa \\<sharp> a;\n        xa \\<sharp> (C, x, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a xa Rel\n 2. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "have \"y \\<sharp> (C, x, Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<sharp> (C, x, Q)", "by fact"], ["proof (state)\nthis:\n  y \\<sharp> (C, x, Q)\n\ngoal (2 subgoals):\n 1. \\<And>a xa Q'.\n       \\<lbrakk><\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> Q';\n        xa \\<sharp> P; xa \\<sharp> <\\<nu>x>Q; xa \\<sharp> a;\n        xa \\<sharp> (C, x, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a xa Rel\n 2. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "hence yFreshC: \"y \\<sharp> C\" and yineqx: \"y \\<noteq> x\" and \"y \\<sharp> Q\""], ["proof (prove)\nusing this:\n  y \\<sharp> (C, x, Q)\n\ngoal (1 subgoal):\n 1. y \\<sharp> C &&& y \\<noteq> x &&& y \\<sharp> Q", "by(simp add: fresh_prod)+"], ["proof (state)\nthis:\n  y \\<sharp> C\n  y \\<noteq> x\n  y \\<sharp> Q\n\ngoal (2 subgoals):\n 1. \\<And>a xa Q'.\n       \\<lbrakk><\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> Q';\n        xa \\<sharp> P; xa \\<sharp> <\\<nu>x>Q; xa \\<sharp> a;\n        xa \\<sharp> (C, x, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a xa Rel\n 2. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "have \"<\\<nu>x>Q \\<longmapsto>a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'", "by fact"], ["proof (state)\nthis:\n  <\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n\ngoal (2 subgoals):\n 1. \\<And>a xa Q'.\n       \\<lbrakk><\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> Q';\n        xa \\<sharp> P; xa \\<sharp> <\\<nu>x>Q; xa \\<sharp> a;\n        xa \\<sharp> (C, x, Q)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>xa\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a xa Rel\n 2. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "thus ?case"], ["proof (prove)\nusing this:\n  <\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' Q' a y Rel", "using yineqx \\<open>y \\<sharp> Q\\<close>"], ["proof (prove)\nusing this:\n  <\\<nu>x>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  y \\<noteq> x\n  y \\<sharp> Q\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' Q' a y Rel", "proof(induct rule: resCasesB)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "case(cOpen a' Q')"], ["proof (state)\nthis:\n  Q \\<longmapsto> a'[x] \\<prec> Q'\n  a' \\<noteq> x\n  a = BoundOutputS a'\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "have \"Q \\<longmapsto>a'[x] \\<prec> Q'\" and \"a' \\<noteq> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<longmapsto> a'[x] \\<prec> Q' &&& a' \\<noteq> x", "by fact+"], ["proof (state)\nthis:\n  Q \\<longmapsto> a'[x] \\<prec> Q'\n  a' \\<noteq> x\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "then"], ["proof (chain)\npicking this:\n  Q \\<longmapsto> a'[x] \\<prec> Q'\n  a' \\<noteq> x", "obtain P' where PTrans: \"P \\<longmapsto>a'<\\<nu>x> \\<prec> P'\" and P'RelQ': \"(P', Q') \\<in> Rel\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto> a'[x] \\<prec> Q'\n  a' \\<noteq> x\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<longmapsto> a'<\\<nu>x> \\<prec> P';\n         (P', Q') \\<in> Rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(force dest: BoundO)"], ["proof (state)\nthis:\n  P \\<longmapsto> a'<\\<nu>x> \\<prec> P'\n  (P', Q') \\<in> Rel\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "from PTrans \\<open>y \\<sharp> P\\<close> yineqx"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a'<\\<nu>x> \\<prec> P'\n  y \\<sharp> P\n  y \\<noteq> x", "have \"y \\<sharp> P'\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> a'<\\<nu>x> \\<prec> P'\n  y \\<sharp> P\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. y \\<sharp> P'", "by(force dest: freshBoundDerivative)"], ["proof (state)\nthis:\n  y \\<sharp> P'\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "with PTrans"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a'<\\<nu>x> \\<prec> P'\n  y \\<sharp> P'", "have \"P \\<longmapsto>a'<\\<nu>y> \\<prec> ([(x, y)] \\<bullet> P')\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> a'<\\<nu>x> \\<prec> P'\n  y \\<sharp> P'\n\ngoal (1 subgoal):\n 1. P \\<longmapsto> a'<\\<nu>y> \\<prec> [(x, y)] \\<bullet> P'", "by(simp add: alphaBoundResidual)"], ["proof (state)\nthis:\n  P \\<longmapsto> a'<\\<nu>y> \\<prec> [(x, y)] \\<bullet> P'\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "moreover"], ["proof (state)\nthis:\n  P \\<longmapsto> a'<\\<nu>y> \\<prec> [(x, y)] \\<bullet> P'\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "from P'RelQ' Eqvt"], ["proof (chain)\npicking this:\n  (P', Q') \\<in> Rel\n  eqvt Rel", "have \"([(x, y)] \\<bullet> P', [(x, y)] \\<bullet> Q') \\<in> Rel\""], ["proof (prove)\nusing this:\n  (P', Q') \\<in> Rel\n  eqvt Rel\n\ngoal (1 subgoal):\n 1. ([(x, y)] \\<bullet> P', [(x, y)] \\<bullet> Q') \\<in> Rel", "by(auto simp add: eqvt_def)"], ["proof (state)\nthis:\n  ([(x, y)] \\<bullet> P', [(x, y)] \\<bullet> Q') \\<in> Rel\n\ngoal (2 subgoals):\n 1. \\<And>b P'.\n       \\<lbrakk>Q \\<longmapsto> b[x] \\<prec> P'; b \\<noteq> x;\n        a = BoundOutputS b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> b<\\<nu>y> \\<prec> P'a \\<and>\n                            derivative P'a ([(y, x)] \\<bullet> P')\n                             (BoundOutputS b) y Rel\n 2. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "ultimately"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a'<\\<nu>y> \\<prec> [(x, y)] \\<bullet> P'\n  ([(x, y)] \\<bullet> P', [(x, y)] \\<bullet> Q') \\<in> Rel", "show ?case"], ["proof (prove)\nusing this:\n  P \\<longmapsto> a'<\\<nu>y> \\<prec> [(x, y)] \\<bullet> P'\n  ([(x, y)] \\<bullet> P', [(x, y)] \\<bullet> Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a'<\\<nu>y> \\<prec> P' \\<and>\n       derivative P' ([(y, x)] \\<bullet> Q') (BoundOutputS a') y Rel", "by(force simp add: derivative_def name_swap)"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> a'<\\<nu>y> \\<prec> P' \\<and>\n     derivative P' ([(y, x)] \\<bullet> Q') (BoundOutputS a') y Rel\n\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "case(cRes Q')"], ["proof (state)\nthis:\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  x \\<sharp> a\n\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "have \"Q \\<longmapsto>a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\" and \"x \\<sharp> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q' &&&\n    x \\<sharp> a", "by fact+"], ["proof (state)\nthis:\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  x \\<sharp> a\n\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P';\n        x \\<sharp> a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P'a \\<and>\n                            derivative P'a (<\\<nu>x>P') a y Rel", "with yineqx yFreshC"], ["proof (chain)\npicking this:\n  y \\<noteq> x\n  y \\<sharp> C\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  x \\<sharp> a", "show ?case"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  y \\<sharp> C\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  x \\<sharp> a\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' (<\\<nu>x>Q') a y Rel", "by(force dest: BR)"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' (<\\<nu>x>Q') a y Rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' Q' a y Rel\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "case(Free \\<alpha> Q')"], ["proof (state)\nthis:\n  <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "have \"<\\<nu>x>Q \\<longmapsto>\\<alpha> \\<prec> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q'", "by fact"], ["proof (state)\nthis:\n  <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "thus ?case"], ["proof (prove)\nusing this:\n  <\\<nu>x>Q \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel", "proof(induct rule: resCasesF)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> \\<alpha> \\<prec> P';\n        x \\<sharp> \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> \\<alpha> \\<prec> P'a \\<and>\n                            (P'a, <\\<nu>x>P') \\<in> Rel", "case(cRes Q')"], ["proof (state)\nthis:\n  Q \\<longmapsto> \\<alpha> \\<prec> Q'\n  x \\<sharp> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> \\<alpha> \\<prec> P';\n        x \\<sharp> \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> \\<alpha> \\<prec> P'a \\<and>\n                            (P'a, <\\<nu>x>P') \\<in> Rel", "have \"Q \\<longmapsto>\\<alpha> \\<prec> Q'\" and \"x \\<sharp> \\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Q \\<longmapsto> \\<alpha> \\<prec> Q' &&& x \\<sharp> \\<alpha>", "by fact+"], ["proof (state)\nthis:\n  Q \\<longmapsto> \\<alpha> \\<prec> Q'\n  x \\<sharp> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<And>P'.\n       \\<lbrakk>Q \\<longmapsto> \\<alpha> \\<prec> P';\n        x \\<sharp> \\<alpha>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'a.\n                            P \\<longmapsto> \\<alpha> \\<prec> P'a \\<and>\n                            (P'a, <\\<nu>x>P') \\<in> Rel", "thus ?case"], ["proof (prove)\nusing this:\n  Q \\<longmapsto> \\<alpha> \\<prec> Q'\n  x \\<sharp> \\<alpha>\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', <\\<nu>x>Q') \\<in> Rel", "by(rule BF)"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', <\\<nu>x>Q') \\<in> Rel\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma simE:\n  fixes P   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n  and   Q   :: pi\n  and   a   :: subject\n  and   x   :: name\n  and   Q'  :: pi\n\n  assumes \"P \\<leadsto>[Rel] Q\"\n\n  shows \"Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q' \\<Longrightarrow> x \\<sharp> P \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and> (derivative P' Q' a x Rel)\"\n  and   \"Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow> \\<exists>P'. P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n      x \\<sharp> P\\<rbrakk>\n     \\<Longrightarrow> \\<exists>P'.\n                          P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                          derivative P' Q' a x Rel) &&&\n    (Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n     \\<exists>P'.\n        P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel)", "using assms"], ["proof (prove)\nusing this:\n  P \\<leadsto>[Rel] Q\n\ngoal (1 subgoal):\n 1. (\\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n      x \\<sharp> P\\<rbrakk>\n     \\<Longrightarrow> \\<exists>P'.\n                          P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                          derivative P' Q' a x Rel) &&&\n    (Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n     \\<exists>P'.\n        P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel)", "by(simp add: simulation_def)+"], ["", "lemma eqvtI:\n  fixes P    :: pi\n  and   Q    :: pi\n  and   Rel  :: \"(pi \\<times> pi) set\"\n  and   perm :: \"name prm\"\n\n  assumes Sim: \"P \\<leadsto>[Rel] Q\"\n  and     RelRel': \"Rel \\<subseteq> Rel'\"\n  and     EqvtRel': \"eqvt Rel'\"\n\n  shows \"(perm \\<bullet> P) \\<leadsto>[Rel'] (perm \\<bullet> Q)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm \\<bullet> P \\<leadsto>[Rel'] perm \\<bullet> Q", "proof(induct rule: simCases)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "case(Bound a y Q')"], ["proof (state)\nthis:\n  perm \\<bullet>\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  y \\<sharp> perm \\<bullet> P\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "have QTrans: \"(perm \\<bullet> Q) \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\" and yFreshP: \"y \\<sharp> perm \\<bullet> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm \\<bullet>\n    Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q' &&&\n    y \\<sharp> perm \\<bullet> P", "by fact+"], ["proof (state)\nthis:\n  perm \\<bullet>\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n  y \\<sharp> perm \\<bullet> P\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "from QTrans"], ["proof (chain)\npicking this:\n  perm \\<bullet>\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'", "have \"(rev perm \\<bullet> (perm \\<bullet> Q)) \\<longmapsto> rev perm \\<bullet> (a\\<guillemotleft>y\\<guillemotright> \\<prec> Q')\""], ["proof (prove)\nusing this:\n  perm \\<bullet>\n  Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. rev perm \\<bullet>\n    perm \\<bullet>\n    Q \\<longmapsto> rev perm \\<bullet>\n                    a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'", "by(rule transitions.eqvt)"], ["proof (state)\nthis:\n  rev perm \\<bullet>\n  perm \\<bullet>\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence \"Q \\<longmapsto> (rev perm \\<bullet> a)\\<guillemotleft>(rev perm \\<bullet> y)\\<guillemotright> \\<prec> (rev perm \\<bullet> Q')\""], ["proof (prove)\nusing this:\n  rev perm \\<bullet>\n  perm \\<bullet>\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>y\\<guillemotright> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. Q \\<longmapsto> rev perm \\<bullet>\n                    a\\<guillemotleft>rev perm \\<bullet>\n                                     y\\<guillemotright> \\<prec> rev\n                           perm \\<bullet>\n                          Q'", "by(simp add: name_rev_per)"], ["proof (state)\nthis:\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> rev\n                         perm \\<bullet>\n                        Q'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "moreover"], ["proof (state)\nthis:\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> rev\n                         perm \\<bullet>\n                        Q'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "from yFreshP"], ["proof (chain)\npicking this:\n  y \\<sharp> perm \\<bullet> P", "have \"(rev perm \\<bullet> y) \\<sharp> P\""], ["proof (prove)\nusing this:\n  y \\<sharp> perm \\<bullet> P\n\ngoal (1 subgoal):\n 1. rev perm \\<bullet> y \\<sharp> P", "by(simp add: name_fresh_left)"], ["proof (state)\nthis:\n  rev perm \\<bullet> y \\<sharp> P\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "ultimately"], ["proof (chain)\npicking this:\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> rev\n                         perm \\<bullet>\n                        Q'\n  rev perm \\<bullet> y \\<sharp> P", "have \"\\<exists>P'. P \\<longmapsto> (rev perm \\<bullet> a)\\<guillemotleft>rev perm \\<bullet> y\\<guillemotright> \\<prec> P' \\<and> derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a) (rev perm \\<bullet> y) Rel\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> rev\n                         perm \\<bullet>\n                        Q'\n  rev perm \\<bullet> y \\<sharp> P\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> rev perm \\<bullet>\n                       a\\<guillemotleft>rev perm \\<bullet>\n  y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n        (rev perm \\<bullet> y) Rel", "using Sim"], ["proof (prove)\nusing this:\n  Q \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> rev\n                         perm \\<bullet>\n                        Q'\n  rev perm \\<bullet> y \\<sharp> P\n  P \\<leadsto>[Rel] Q\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> rev perm \\<bullet>\n                       a\\<guillemotleft>rev perm \\<bullet>\n  y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n        (rev perm \\<bullet> y) Rel", "by(force intro: simE)"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> rev perm \\<bullet>\n                     a\\<guillemotleft>rev perm \\<bullet>\ny\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n      (rev perm \\<bullet> y) Rel\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "then"], ["proof (chain)\npicking this:\n  \\<exists>P'.\n     P \\<longmapsto> rev perm \\<bullet>\n                     a\\<guillemotleft>rev perm \\<bullet>\ny\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n      (rev perm \\<bullet> y) Rel", "obtain P' where PTrans: \"P \\<longmapsto> (rev perm \\<bullet> a)\\<guillemotleft>rev perm \\<bullet> y\\<guillemotright> \\<prec> P'\" and Pderivative: \"derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a) (rev perm \\<bullet> y) Rel\""], ["proof (prove)\nusing this:\n  \\<exists>P'.\n     P \\<longmapsto> rev perm \\<bullet>\n                     a\\<guillemotleft>rev perm \\<bullet>\ny\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n      (rev perm \\<bullet> y) Rel\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<longmapsto> rev perm \\<bullet>\n                                 a\\<guillemotleft>rev perm \\<bullet>\n            y\\<guillemotright> \\<prec> P';\n         derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n          (rev perm \\<bullet> y) Rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> P'\n  derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n   (rev perm \\<bullet> y) Rel\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "from PTrans"], ["proof (chain)\npicking this:\n  P \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> P'", "have \"(perm \\<bullet> P) \\<longmapsto> perm \\<bullet> ((rev perm \\<bullet> a)\\<guillemotleft>rev perm \\<bullet> y\\<guillemotright> \\<prec> P')\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> P'\n\ngoal (1 subgoal):\n 1. perm \\<bullet>\n    P \\<longmapsto> perm \\<bullet>\n                    rev perm \\<bullet>\n                    a\\<guillemotleft>rev perm \\<bullet>\n                                     y\\<guillemotright> \\<prec> P'", "by(rule transitions.eqvt)"], ["proof (state)\nthis:\n  perm \\<bullet>\n  P \\<longmapsto> perm \\<bullet>\n                  rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> P'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence L1: \"(perm \\<bullet> P) \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> (perm \\<bullet> P')\""], ["proof (prove)\nusing this:\n  perm \\<bullet>\n  P \\<longmapsto> perm \\<bullet>\n                  rev perm \\<bullet>\n                  a\\<guillemotleft>rev perm \\<bullet>\n                                   y\\<guillemotright> \\<prec> P'\n\ngoal (1 subgoal):\n 1. perm \\<bullet>\n    P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> perm \\<bullet>\n                          P'", "by(simp add: name_per_rev)"], ["proof (state)\nthis:\n  perm \\<bullet>\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> perm \\<bullet>\n                        P'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "from Pderivative RelRel'"], ["proof (chain)\npicking this:\n  derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n   (rev perm \\<bullet> y) Rel\n  Rel \\<subseteq> Rel'", "have \"derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a) (rev perm \\<bullet> y) Rel'\""], ["proof (prove)\nusing this:\n  derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n   (rev perm \\<bullet> y) Rel\n  Rel \\<subseteq> Rel'\n\ngoal (1 subgoal):\n 1. derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n     (rev perm \\<bullet> y) Rel'", "by(rule derivativeMonotonic)"], ["proof (state)\nthis:\n  derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n   (rev perm \\<bullet> y) Rel'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence \"derivative (perm \\<bullet> P') (perm \\<bullet> (rev perm \\<bullet> Q')) (perm \\<bullet> (rev perm \\<bullet> a)) (perm \\<bullet> (rev perm \\<bullet> y)) Rel'\""], ["proof (prove)\nusing this:\n  derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n   (rev perm \\<bullet> y) Rel'\n\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P') (perm \\<bullet> rev perm \\<bullet> Q')\n     (perm \\<bullet> rev perm \\<bullet> a)\n     (perm \\<bullet> rev perm \\<bullet> y) Rel'", "using EqvtRel'"], ["proof (prove)\nusing this:\n  derivative P' (rev perm \\<bullet> Q') (rev perm \\<bullet> a)\n   (rev perm \\<bullet> y) Rel'\n  eqvt Rel'\n\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P') (perm \\<bullet> rev perm \\<bullet> Q')\n     (perm \\<bullet> rev perm \\<bullet> a)\n     (perm \\<bullet> rev perm \\<bullet> y) Rel'", "by(rule derivativeEqvtI)"], ["proof (state)\nthis:\n  derivative (perm \\<bullet> P') (perm \\<bullet> rev perm \\<bullet> Q')\n   (perm \\<bullet> rev perm \\<bullet> a)\n   (perm \\<bullet> rev perm \\<bullet> y) Rel'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence \"derivative (perm \\<bullet> P') Q' a y Rel'\""], ["proof (prove)\nusing this:\n  derivative (perm \\<bullet> P') (perm \\<bullet> rev perm \\<bullet> Q')\n   (perm \\<bullet> rev perm \\<bullet> a)\n   (perm \\<bullet> rev perm \\<bullet> y) Rel'\n\ngoal (1 subgoal):\n 1. derivative (perm \\<bullet> P') Q' a y Rel'", "by(simp add: name_per_rev)"], ["proof (state)\nthis:\n  derivative (perm \\<bullet> P') Q' a y Rel'\n\ngoal (2 subgoals):\n 1. \\<And>a y Q'.\n       \\<lbrakk>perm \\<bullet>\n                Q \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> Q';\n        y \\<sharp> perm \\<bullet> P\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            perm \\<bullet>\n                            P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a y Rel'\n 2. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "with L1"], ["proof (chain)\npicking this:\n  perm \\<bullet>\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> perm \\<bullet>\n                        P'\n  derivative (perm \\<bullet> P') Q' a y Rel'", "show ?case"], ["proof (prove)\nusing this:\n  perm \\<bullet>\n  P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> perm \\<bullet>\n                        P'\n  derivative (perm \\<bullet> P') Q' a y Rel'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       perm \\<bullet>\n       P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' Q' a y Rel'", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     perm \\<bullet>\n     P \\<longmapsto> a\\<guillemotleft>y\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' Q' a y Rel'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "case(Free \\<alpha> Q')"], ["proof (state)\nthis:\n  perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "have \"(perm \\<bullet> Q) \\<longmapsto> \\<alpha> \\<prec> Q'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q'", "by fact"], ["proof (state)\nthis:\n  perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence \"(rev perm \\<bullet> (perm \\<bullet> Q)) \\<longmapsto> rev perm \\<bullet> (\\<alpha> \\<prec> Q')\""], ["proof (prove)\nusing this:\n  perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. rev perm \\<bullet>\n    perm \\<bullet> Q \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> Q'", "by(rule transitions.eqvt)"], ["proof (state)\nthis:\n  rev perm \\<bullet>\n  perm \\<bullet> Q \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence \"Q \\<longmapsto> (rev perm \\<bullet> \\<alpha>) \\<prec> (rev perm \\<bullet> Q')\""], ["proof (prove)\nusing this:\n  rev perm \\<bullet>\n  perm \\<bullet> Q \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> Q'\n\ngoal (1 subgoal):\n 1. Q \\<longmapsto> rev perm \\<bullet>\n                    \\<alpha> \\<prec> rev perm \\<bullet> Q'", "by(simp add: name_rev_per)"], ["proof (state)\nthis:\n  Q \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> rev perm \\<bullet> Q'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "with Sim"], ["proof (chain)\npicking this:\n  P \\<leadsto>[Rel] Q\n  Q \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> rev perm \\<bullet> Q'", "have \"\\<exists>P'. P \\<longmapsto> (rev perm \\<bullet> \\<alpha>) \\<prec> P' \\<and> (P', (rev perm \\<bullet> Q')) \\<in> Rel\""], ["proof (prove)\nusing this:\n  P \\<leadsto>[Rel] Q\n  Q \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> rev perm \\<bullet> Q'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P' \\<and>\n       (P', rev perm \\<bullet> Q') \\<in> Rel", "by(force intro: simE)"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P' \\<and>\n     (P', rev perm \\<bullet> Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "then"], ["proof (chain)\npicking this:\n  \\<exists>P'.\n     P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P' \\<and>\n     (P', rev perm \\<bullet> Q') \\<in> Rel", "obtain P' where PTrans: \"P \\<longmapsto> (rev perm \\<bullet> \\<alpha>) \\<prec> P'\" and PRel: \"(P', (rev perm \\<bullet> Q')) \\<in> Rel\""], ["proof (prove)\nusing this:\n  \\<exists>P'.\n     P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P' \\<and>\n     (P', rev perm \\<bullet> Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P';\n         (P', rev perm \\<bullet> Q') \\<in> Rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P'\n  (P', rev perm \\<bullet> Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "from PTrans"], ["proof (chain)\npicking this:\n  P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P'", "have \"(perm \\<bullet> P) \\<longmapsto> perm \\<bullet> ((rev perm \\<bullet> \\<alpha>)\\<prec> P')\""], ["proof (prove)\nusing this:\n  P \\<longmapsto> rev perm \\<bullet> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. perm \\<bullet>\n    P \\<longmapsto> perm \\<bullet> rev perm \\<bullet> \\<alpha> \\<prec> P'", "by(rule transitions.eqvt)"], ["proof (state)\nthis:\n  perm \\<bullet>\n  P \\<longmapsto> perm \\<bullet> rev perm \\<bullet> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence L1: \"(perm \\<bullet> P) \\<longmapsto> \\<alpha> \\<prec> (perm \\<bullet> P')\""], ["proof (prove)\nusing this:\n  perm \\<bullet>\n  P \\<longmapsto> perm \\<bullet> rev perm \\<bullet> \\<alpha> \\<prec> P'\n\ngoal (1 subgoal):\n 1. perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> perm \\<bullet> P'", "by(simp add: name_per_rev)"], ["proof (state)\nthis:\n  perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> perm \\<bullet> P'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "from PRel EqvtRel' RelRel'"], ["proof (chain)\npicking this:\n  (P', rev perm \\<bullet> Q') \\<in> Rel\n  eqvt Rel'\n  Rel \\<subseteq> Rel'", "have \"((perm \\<bullet> P'), (perm \\<bullet> (rev perm \\<bullet> Q'))) \\<in> Rel'\""], ["proof (prove)\nusing this:\n  (P', rev perm \\<bullet> Q') \\<in> Rel\n  eqvt Rel'\n  Rel \\<subseteq> Rel'\n\ngoal (1 subgoal):\n 1. (perm \\<bullet> P', perm \\<bullet> rev perm \\<bullet> Q') \\<in> Rel'", "by(force intro: eqvtRelI)"], ["proof (state)\nthis:\n  (perm \\<bullet> P', perm \\<bullet> rev perm \\<bullet> Q') \\<in> Rel'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "hence \"((perm \\<bullet> P'), Q') \\<in> Rel'\""], ["proof (prove)\nusing this:\n  (perm \\<bullet> P', perm \\<bullet> rev perm \\<bullet> Q') \\<in> Rel'\n\ngoal (1 subgoal):\n 1. (perm \\<bullet> P', Q') \\<in> Rel'", "by(simp add: name_per_rev)"], ["proof (state)\nthis:\n  (perm \\<bullet> P', Q') \\<in> Rel'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       perm \\<bullet> Q \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n          (P', Q') \\<in> Rel'", "with L1"], ["proof (chain)\npicking this:\n  perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> perm \\<bullet> P'\n  (perm \\<bullet> P', Q') \\<in> Rel'", "show \"\\<exists>P'. (perm \\<bullet> P) \\<longmapsto>\\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel'\""], ["proof (prove)\nusing this:\n  perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> perm \\<bullet> P'\n  (perm \\<bullet> P', Q') \\<in> Rel'\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n       (P', Q') \\<in> Rel'", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     perm \\<bullet> P \\<longmapsto> \\<alpha> \\<prec> P' \\<and>\n     (P', Q') \\<in> Rel'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma derivativeReflexive:\n  fixes P   :: pi\n  and   a   :: subject\n  and   x   :: name\n  and   Rel :: \"(pi \\<times> pi) set\"\n  \n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"derivative P P a x Rel\""], ["proof (prove)\ngoal (1 subgoal):\n 1. derivative P P a x Rel", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. derivative P P a x Rel", "apply(cases a)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>Id \\<subseteq> Rel; a = InputS x1\\<rbrakk>\n       \\<Longrightarrow> derivative P P a x Rel\n 2. \\<And>x2.\n       \\<lbrakk>Id \\<subseteq> Rel; a = BoundOutputS x2\\<rbrakk>\n       \\<Longrightarrow> derivative P P a x Rel", "by(auto simp add: derivative_def)"], ["", "(*\nlemma simActFreeCases[consumes 0, case_names Der]:\n  fixes P   :: pi\n  and   \\<alpha>   :: freeRes\n  and   Q'  :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n\n  assumes \"\\<exists>P'. P \\<longmapsto>\\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel\"\n\n  shows \"simAct P (\\<alpha> \\<prec> Q') P Rel\"\nusing assms\nby(simp add: simAct_def residualInject)\n*)\n(*****************Reflexivity and transitivity*********************)"], ["", "lemma reflexive:\n  fixes P   :: pi\n  and   Rel :: \"(pi \\<times> pi) set\"\n\n  assumes \"Id \\<subseteq> Rel\"\n\n  shows \"P \\<leadsto>[Rel] P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] P", "using assms"], ["proof (prove)\nusing this:\n  Id \\<subseteq> Rel\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel] P", "by(auto simp add: simulation_def derivativeReflexive)"], ["", "lemma transitive:\n  fixes P     :: pi\n  and   Q     :: pi\n  and   R     :: pi\n  and   Rel   :: \"(pi \\<times> pi) set\"\n  and   Rel'  :: \"(pi \\<times> pi) set\"\n  and   Rel'' :: \"(pi \\<times> pi) set\"\n\n  assumes PSimQ: \"P \\<leadsto>[Rel] Q\"\n  and     QSimR: \"Q \\<leadsto>[Rel'] R\"\n  and     Eqvt': \"eqvt Rel''\"\n  and     Trans: \"Rel O Rel' \\<subseteq> Rel''\"\n\n  shows \"P \\<leadsto>[Rel''] R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel''] R", "using Eqvt'"], ["proof (prove)\nusing this:\n  eqvt Rel''\n\ngoal (1 subgoal):\n 1. P \\<leadsto>[Rel''] R", "proof(induct rule: simCasesCont[where C=Q])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "case(Bound a x R')"], ["proof (state)\nthis:\n  R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> R'\n  x \\<sharp> P\n  x \\<sharp> R\n  x \\<sharp> a\n  x \\<sharp> Q\n\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "have RTrans: \"R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> R'", "by fact"], ["proof (state)\nthis:\n  R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> R'\n\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "from \\<open>x \\<sharp> Q\\<close> QSimR RTrans"], ["proof (chain)\npicking this:\n  x \\<sharp> Q\n  Q \\<leadsto>[Rel'] R\n  R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> R'", "obtain Q' where QTrans: \"Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\"\n                                        and QDer: \"derivative Q' R' a x Rel'\""], ["proof (prove)\nusing this:\n  x \\<sharp> Q\n  Q \\<leadsto>[Rel'] R\n  R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> R'\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n         derivative Q' R' a x Rel'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: simE)"], ["proof (state)\nthis:\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  derivative Q' R' a x Rel'\n\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "with QTrans \\<open>x \\<sharp> P\\<close> PSimQ"], ["proof (chain)\npicking this:\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  x \\<sharp> P\n  P \\<leadsto>[Rel] Q\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  derivative Q' R' a x Rel'", "obtain P' where PTrans: \"P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P'\"\n                                        and PDer: \"derivative P' Q' a x Rel\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  x \\<sharp> P\n  P \\<leadsto>[Rel] Q\n  Q \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q'\n  derivative Q' R' a x Rel'\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P';\n         derivative P' Q' a x Rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: simE)"], ["proof (state)\nthis:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P'\n  derivative P' Q' a x Rel\n\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "moreover"], ["proof (state)\nthis:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P'\n  derivative P' Q' a x Rel\n\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "from PDer QDer Trans"], ["proof (chain)\npicking this:\n  derivative P' Q' a x Rel\n  derivative Q' R' a x Rel'\n  Rel O Rel' \\<subseteq> Rel''", "have \"derivative P' R' a x Rel''\""], ["proof (prove)\nusing this:\n  derivative P' Q' a x Rel\n  derivative Q' R' a x Rel'\n  Rel O Rel' \\<subseteq> Rel''\n\ngoal (1 subgoal):\n 1. derivative P' R' a x Rel''", "by(cases a) (auto simp add: derivative_def)"], ["proof (state)\nthis:\n  derivative P' R' a x Rel''\n\ngoal (2 subgoals):\n 1. \\<And>a x Q'.\n       \\<lbrakk>R \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> Q';\n        x \\<sharp> P; x \\<sharp> R; x \\<sharp> a; x \\<sharp> Q\\<rbrakk>\n       \\<Longrightarrow> \\<exists>P'.\n                            P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n                            derivative P' Q' a x Rel''\n 2. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "ultimately"], ["proof (chain)\npicking this:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P'\n  derivative P' Q' a x Rel\n  derivative P' R' a x Rel''", "show ?case"], ["proof (prove)\nusing this:\n  P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P'\n  derivative P' Q' a x Rel\n  derivative P' R' a x Rel''\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n       derivative P' R' a x Rel''", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> a\\<guillemotleft>x\\<guillemotright> \\<prec> P' \\<and>\n     derivative P' R' a x Rel''\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "case(Free \\<alpha> R')"], ["proof (state)\nthis:\n  R \\<longmapsto> \\<alpha> \\<prec> R'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "have RTrans: \"R \\<longmapsto> \\<alpha> \\<prec> R'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R \\<longmapsto> \\<alpha> \\<prec> R'", "by fact"], ["proof (state)\nthis:\n  R \\<longmapsto> \\<alpha> \\<prec> R'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "with QSimR"], ["proof (chain)\npicking this:\n  Q \\<leadsto>[Rel'] R\n  R \\<longmapsto> \\<alpha> \\<prec> R'", "obtain Q' where QTrans: \"Q \\<longmapsto> \\<alpha> \\<prec> Q'\" \n                         and Q'RelR': \"(Q', R') \\<in> Rel'\""], ["proof (prove)\nusing this:\n  Q \\<leadsto>[Rel'] R\n  R \\<longmapsto> \\<alpha> \\<prec> R'\n\ngoal (1 subgoal):\n 1. (\\<And>Q'.\n        \\<lbrakk>Q \\<longmapsto> \\<alpha> \\<prec> Q';\n         (Q', R') \\<in> Rel'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: simE)"], ["proof (state)\nthis:\n  Q \\<longmapsto> \\<alpha> \\<prec> Q'\n  (Q', R') \\<in> Rel'\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "from QTrans PSimQ"], ["proof (chain)\npicking this:\n  Q \\<longmapsto> \\<alpha> \\<prec> Q'\n  P \\<leadsto>[Rel] Q", "obtain P' where PTrans: \"P \\<longmapsto> \\<alpha> \\<prec> P'\"\n                                and P'RelQ': \"(P', Q') \\<in> Rel\""], ["proof (prove)\nusing this:\n  Q \\<longmapsto> \\<alpha> \\<prec> Q'\n  P \\<leadsto>[Rel] Q\n\ngoal (1 subgoal):\n 1. (\\<And>P'.\n        \\<lbrakk>P \\<longmapsto> \\<alpha> \\<prec> P';\n         (P', Q') \\<in> Rel\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(blast dest: simE)"], ["proof (state)\nthis:\n  P \\<longmapsto> \\<alpha> \\<prec> P'\n  (P', Q') \\<in> Rel\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "from P'RelQ' Q'RelR' Trans"], ["proof (chain)\npicking this:\n  (P', Q') \\<in> Rel\n  (Q', R') \\<in> Rel'\n  Rel O Rel' \\<subseteq> Rel''", "have \"(P', R') \\<in> Rel''\""], ["proof (prove)\nusing this:\n  (P', Q') \\<in> Rel\n  (Q', R') \\<in> Rel'\n  Rel O Rel' \\<subseteq> Rel''\n\ngoal (1 subgoal):\n 1. (P', R') \\<in> Rel''", "by blast"], ["proof (state)\nthis:\n  (P', R') \\<in> Rel''\n\ngoal (1 subgoal):\n 1. \\<And>\\<alpha> Q'.\n       R \\<longmapsto> \\<alpha> \\<prec> Q' \\<Longrightarrow>\n       \\<exists>P'.\n          P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', Q') \\<in> Rel''", "with PTrans"], ["proof (chain)\npicking this:\n  P \\<longmapsto> \\<alpha> \\<prec> P'\n  (P', R') \\<in> Rel''", "show ?case"], ["proof (prove)\nusing this:\n  P \\<longmapsto> \\<alpha> \\<prec> P'\n  (P', R') \\<in> Rel''\n\ngoal (1 subgoal):\n 1. \\<exists>P'.\n       P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', R') \\<in> Rel''", "by blast"], ["proof (state)\nthis:\n  \\<exists>P'.\n     P \\<longmapsto> \\<alpha> \\<prec> P' \\<and> (P', R') \\<in> Rel''\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}