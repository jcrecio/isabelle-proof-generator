{"file_name": "/home/qj213/afp-2021-10-22/thys/Simple_Firewall/Primitives/Iface.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simple_Firewall", "problem_names": ["lemma Iface_less_eq_empty: \"Iface x \\<le> Iface [] \\<Longrightarrow> x = []\"", "lemma less_eq_empty: \"Iface [] \\<le> q\"", "lemma iface_cons_less_eq_i:\n    \"Iface (b # bs) \\<le> i \\<Longrightarrow> \\<exists> q qs. i=Iface (q#qs) \\<and> (b < q \\<or> (Iface bs) \\<le> (Iface qs))\"", "lemma \"internal_iface_name_match ''lo'' ''lo''\"", "lemma \"internal_iface_name_match ''lo+'' ''lo''\"", "lemma \"internal_iface_name_match ''l+'' ''lo''\"", "lemma \"internal_iface_name_match ''+'' ''lo''\"", "lemma \"\\<not> internal_iface_name_match ''lo++'' ''lo''\"", "lemma \"\\<not> internal_iface_name_match ''lo+++'' ''lo''\"", "lemma \"\\<not> internal_iface_name_match ''lo1+'' ''lo''\"", "lemma \"\\<not> internal_iface_name_match ''lo1'' ''lo''\"", "lemma \"internal_iface_name_match ''+'' ''''\"", "lemma iface_name_is_wildcard_alt: \"iface_name_is_wildcard eth \\<longleftrightarrow> eth \\<noteq> [] \\<and> last eth = CHR ''+''\"", "lemma iface_name_is_wildcard_alt': \"iface_name_is_wildcard eth \\<longleftrightarrow> eth \\<noteq> [] \\<and> hd (rev eth) = CHR ''+''\"", "lemma iface_name_is_wildcard_fst: \"iface_name_is_wildcard (i # is) \\<Longrightarrow> is \\<noteq> [] \\<Longrightarrow> iface_name_is_wildcard is\"", "lemma \"{(butlast i)@cs | cs. True} = (\\<lambda>s. (butlast i)@s) ` (UNIV::string set)\"", "lemma internal_iface_name_to_set: \"internal_iface_name_match i p_iface \\<longleftrightarrow> p_iface \\<in> internal_iface_name_to_set i\"", "lemma internal_iface_name_to_set2: \"internal_iface_name_to_set ifce = {i. internal_iface_name_match ifce i}\"", "lemma internal_iface_name_match_refl: \"internal_iface_name_match i i\"", "lemma \"  match_iface (Iface ''lo'')    ''lo''\"\n            \"  match_iface (Iface ''lo+'')   ''lo''\"\n            \"  match_iface (Iface ''l+'')    ''lo''\"\n            \"  match_iface (Iface ''+'')     ''lo''\"\n            \"\\<not> match_iface (Iface ''lo++'')  ''lo''\"\n            \"\\<not> match_iface (Iface ''lo+++'') ''lo''\"\n            \"\\<not> match_iface (Iface ''lo1+'')  ''lo''\"\n            \"\\<not> match_iface (Iface ''lo1'')   ''lo''\"\n            \"  match_iface (Iface ''+'')     ''eth0''\"\n            \"  match_iface (Iface ''+'')     ''eth0''\"\n            \"  match_iface (Iface ''eth+'')  ''eth0''\"\n            \"\\<not> match_iface (Iface ''lo+'')   ''eth0''\"\n            \"  match_iface (Iface ''lo+'')   ''loX''\"\n            \"\\<not> match_iface (Iface '''')      ''loX''\"", "lemma match_ifaceAny: \"match_iface ifaceAny i\"", "lemma match_IfaceFalse: \"\\<not>(\\<exists> IfaceFalse. (\\<forall>i. \\<not> match_iface IfaceFalse i))\"", "lemma match_iface_case_nowildcard: \"\\<not> iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<longleftrightarrow> i = p_i\"", "lemma match_iface_case_wildcard_prefix:\n      \"iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<longleftrightarrow> butlast i = take (length i - 1) p_i\"", "lemma match_iface_case_wildcard_length: \"iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<Longrightarrow> length p_i \\<ge> (length i - 1)\"", "lemma match_iface_set: \"match_iface (Iface i) p_iface \\<longleftrightarrow> p_iface \\<in> internal_iface_name_to_set i\"", "lemma \"internal_iface_name_wildcard_longest ''eth+'' ''eth3+'' = Some ''eth3+''\"", "lemma \"internal_iface_name_wildcard_longest ''eth+'' ''e+'' = Some ''eth+''\"", "lemma \"internal_iface_name_wildcard_longest ''eth+'' ''lo'' = None\"", "lemma internal_iface_name_wildcard_longest_commute: \"iface_name_is_wildcard i1 \\<Longrightarrow> iface_name_is_wildcard i2 \\<Longrightarrow> \n      internal_iface_name_wildcard_longest i1 i2 = internal_iface_name_wildcard_longest i2 i1\"", "lemma internal_iface_name_wildcard_longest_refl: \"internal_iface_name_wildcard_longest i i = Some i\"", "lemma internal_iface_name_wildcard_longest_correct:\n      \"iface_name_is_wildcard i1 \\<Longrightarrow> iface_name_is_wildcard i2 \\<Longrightarrow> \n       match_iface (Iface i1) p_i \\<and> match_iface (Iface i2) p_i \\<longleftrightarrow>\n       (case internal_iface_name_wildcard_longest i1 i2 of None \\<Rightarrow> False | Some x \\<Rightarrow> match_iface (Iface x) p_i)\"", "lemma iface_conjunct_Some: \"iface_conjunct i1 i2 = Some x \\<Longrightarrow> \n          match_iface x p_i \\<longleftrightarrow> match_iface i1 p_i \\<and> match_iface i2 p_i\"", "lemma iface_conjunct_None: \"iface_conjunct i1 i2 = None \\<Longrightarrow> \\<not> (match_iface i1 p_i \\<and> match_iface i2 p_i)\"", "lemma iface_conjunct: \"match_iface i1 p_i \\<and> match_iface i2 p_i \\<longleftrightarrow>\n           (case iface_conjunct i1 i2 of None \\<Rightarrow> False | Some x \\<Rightarrow> match_iface x p_i)\"", "lemma match_iface_refl: \"match_iface (Iface x) x\"", "lemma match_iface_eqI: assumes \"x = Iface y\" shows \"match_iface x y\"", "lemma iface_conjunct_ifaceAny: \"iface_conjunct ifaceAny i = Some i\"", "lemma iface_conjunct_commute: \"iface_conjunct i1 i2 = iface_conjunct i2 i1\"", "lemma butlast_take_length_helper:\n      fixes x ::\"char list\"\n      assumes a1: \"length i2 \\<le> length i1\"\n      assumes a2: \"take (length i2 - Suc 0) i1 = butlast i2\"\n      assumes a3: \"butlast i1 = take (length i1 - Suc 0) x\"\n      shows \"butlast i2 = take (length i2 - Suc 0) x\"", "lemma internal_iface_name_subset: \"internal_iface_name_subset i1 i2 \\<longleftrightarrow> \n        {i. internal_iface_name_match i1 i} \\<subseteq> {i. internal_iface_name_match i2 i}\"", "lemma iface_subset: \"iface_subset i1 i2 \\<longleftrightarrow> {i. match_iface i1 i} \\<subseteq> {i. match_iface i2 i}\"", "lemma iface_is_wildcard_ifaceAny: \"iface_is_wildcard ifaceAny\"", "lemma all_chars: \"set all_chars = (UNIV::char set)\"", "lemma strings_of_length_n: \"set (List.n_lists n all_chars) = {s::string. length s = n}\"", "lemma \"non_wildcard_ifaces 0 = ['''']\"", "lemma non_wildcard_ifaces: \"set (non_wildcard_ifaces n) = {s::string. length s = n \\<and> \\<not> iface_name_is_wildcard s}\"", "lemma \"(\\<Union> i \\<in> set (non_wildcard_ifaces n). internal_iface_name_to_set i) = {s::string. length s = n \\<and> \\<not> iface_name_is_wildcard s}\"", "lemma non_wildcard_ifaces_upto: \"set (non_wildcard_ifaces_upto n) = {s::string. length s \\<le> n \\<and> \\<not> iface_name_is_wildcard s}\"", "lemma inv_iface_name_set: \"- (internal_iface_name_to_set i) = (\n      if iface_name_is_wildcard i\n      then\n        {c |c. length c < length (butlast i)} \\<union> {c @ cs |c cs. length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n      else\n        {c | c. length c < length i} \\<union> {c@cs | c cs. length c \\<ge> length i \\<and> c \\<noteq> i}\n    )\"", "lemma \"''et'' \\<in> - (internal_iface_name_to_set ''eth+'')\"", "lemma \"''et+'' \\<in> - (internal_iface_name_to_set ''eth+'')\"", "lemma \"''+'' \\<in> - (internal_iface_name_to_set ''eth+'')\"", "lemma \"\\<not> {i. match_iface (Iface ''et+'') i} \\<subseteq> - (internal_iface_name_to_set ''eth+'')\"", "lemma \"''+'' \\<in> - (internal_iface_name_to_set ''eth+'')\"", "lemma compress_pos_interfaces_Some: \"compress_pos_interfaces ifces = Some ifce \\<Longrightarrow> \n          match_iface ifce p_i \\<longleftrightarrow> (\\<forall> i\\<in> set ifces. match_iface i p_i)\"", "lemma compress_pos_interfaces_None: \"compress_pos_interfaces ifces = None \\<Longrightarrow> \n          \\<not> (\\<forall> i\\<in> set ifces. match_iface i p_i)\""], "translations": [["", "lemma Iface_less_eq_empty: \"Iface x \\<le> Iface [] \\<Longrightarrow> x = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Iface x \\<le> Iface [] \\<Longrightarrow> x = []", "by(induction \"Iface x\" \"Iface []\" rule: less_eq_iface.induct) auto"], ["", "lemma less_eq_empty: \"Iface [] \\<le> q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Iface [] \\<le> q", "by(induction \"Iface []\" q rule: less_eq_iface.induct) auto"], ["", "lemma iface_cons_less_eq_i:\n    \"Iface (b # bs) \\<le> i \\<Longrightarrow> \\<exists> q qs. i=Iface (q#qs) \\<and> (b < q \\<or> (Iface bs) \\<le> (Iface qs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Iface (b # bs) \\<le> i \\<Longrightarrow>\n    \\<exists>q qs.\n       i = Iface (q # qs) \\<and> (b < q \\<or> Iface bs \\<le> Iface qs)", "apply(induction \"Iface (b # bs)\" i rule: less_eq_iface.induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. Iface (b # bs) \\<le> Iface [] \\<Longrightarrow>\n    \\<exists>q qs.\n       Iface [] = Iface (q # qs) \\<and>\n       (b < q \\<or> Iface bs \\<le> Iface qs)\n 2. \\<And>ba bsa.\n       \\<lbrakk>\\<lbrakk>b = ba; bs = b # bs;\n                 Iface (b # bs) \\<le> Iface bsa\\<rbrakk>\n                \\<Longrightarrow> \\<exists>q qs.\n                                     Iface bsa = Iface (q # qs) \\<and>\n                                     (b < q \\<or> Iface bs \\<le> Iface qs);\n        Iface (b # bs) \\<le> Iface (ba # bsa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>q qs.\n                            Iface (ba # bsa) = Iface (q # qs) \\<and>\n                            (b < q \\<or> Iface bs \\<le> Iface qs)", "apply(simp_all split: if_split_asm)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba bsa.\n       \\<lbrakk>b \\<noteq> ba; b \\<le> ba\\<rbrakk>\n       \\<Longrightarrow> b < ba \\<or> Iface bs \\<le> Iface bsa", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>ba bsa.\n       \\<lbrakk>b \\<noteq> ba; b \\<le> ba;\n        \\<not> Iface bs \\<le> Iface bsa\\<rbrakk>\n       \\<Longrightarrow> b < ba", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "function (sequential) less_iface :: \"iface \\<Rightarrow> iface \\<Rightarrow> bool\" where\n    \"(Iface []) < (Iface []) \\<longleftrightarrow> False\" |\n    \"(Iface []) < (Iface _) \\<longleftrightarrow> True\" |\n    \"(Iface _) < (Iface []) \\<longleftrightarrow> False\" |\n    \"(Iface (a#as)) < (Iface (b#bs)) \\<longleftrightarrow> (if a = b then Iface as < Iface bs else a < b)\""], ["proof (prove)\ngoal (11 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>x = (Iface [], Iface []) \\<Longrightarrow> P;\n        \\<And>v va. x = (Iface [], Iface (v # va)) \\<Longrightarrow> P;\n        \\<And>v va. x = (Iface (v # va), Iface []) \\<Longrightarrow> P;\n        \\<And>a as b bs.\n           x = (Iface (a # as), Iface (b # bs)) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. (Iface [], Iface []) = (Iface [], Iface []) \\<Longrightarrow>\n    False = False\n 3. \\<And>v va.\n       (Iface [], Iface []) = (Iface [], Iface (v # va)) \\<Longrightarrow>\n       False = True\n 4. \\<And>v va.\n       (Iface [], Iface []) = (Iface (v # va), Iface []) \\<Longrightarrow>\n       False = False\n 5. \\<And>a as b bs.\n       (Iface [], Iface []) =\n       (Iface (a # as), Iface (b # bs)) \\<Longrightarrow>\n       False =\n       (if a = b then less_iface_sumC (Iface as, Iface bs) else a < b)\n 6. \\<And>v va vb vaa.\n       (Iface [], Iface (v # va)) =\n       (Iface [], Iface (vb # vaa)) \\<Longrightarrow>\n       True = True\n 7. \\<And>v va vb vaa.\n       (Iface [], Iface (v # va)) =\n       (Iface (vb # vaa), Iface []) \\<Longrightarrow>\n       True = False\n 8. \\<And>v va a as b bs.\n       (Iface [], Iface (v # va)) =\n       (Iface (a # as), Iface (b # bs)) \\<Longrightarrow>\n       True =\n       (if a = b then less_iface_sumC (Iface as, Iface bs) else a < b)\n 9. \\<And>v va vb vaa.\n       (Iface (v # va), Iface []) =\n       (Iface (vb # vaa), Iface []) \\<Longrightarrow>\n       False = False\n 10. \\<And>v va a as b bs.\n        (Iface (v # va), Iface []) =\n        (Iface (a # as), Iface (b # bs)) \\<Longrightarrow>\n        False =\n        (if a = b then less_iface_sumC (Iface as, Iface bs) else a < b)\nA total of 11 subgoals...", "by(pat_completeness) auto"], ["", "termination \"less :: iface \\<Rightarrow> _ \\<Rightarrow> bool\""], ["proof (prove)\ngoal (1 subgoal):\n 1. All less_iface_dom", "apply(relation \"measure (\\<lambda>is. size (iface_sel (fst is)) + size (iface_sel (snd is)))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf (measure\n         (\\<lambda>is.\n             length (iface_sel (fst is)) + length (iface_sel (snd is))))\n 2. \\<And>a as b bs.\n       a = b \\<Longrightarrow>\n       ((Iface as, Iface bs), Iface (a # as), Iface (b # bs))\n       \\<in> measure\n              (\\<lambda>is.\n                  length (iface_sel (fst is)) + length (iface_sel (snd is)))", "apply(rule wf_measure, unfold in_measure comp_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as b bs.\n       a = b \\<Longrightarrow>\n       length (iface_sel (fst (Iface as, Iface bs))) +\n       length (iface_sel (snd (Iface as, Iface bs)))\n       < length (iface_sel (fst (Iface (a # as), Iface (b # bs)))) +\n         length (iface_sel (snd (Iface (a # as), Iface (b # bs))))", "apply(simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "instance"], ["proof (prove)\ngoal (1 subgoal):\n 1. OFCLASS(iface, linorder_class)", "proof"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix n m :: iface"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>x y. (x < y) = (x \\<le> y \\<and> \\<not> y \\<le> x)\n 2. \\<And>x. x \\<le> x\n 3. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 4. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 5. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"n < m \\<longleftrightarrow> n \\<le> m \\<and> \\<not> m \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (n < m) = (n \\<le> m \\<and> \\<not> m \\<le> n)", "proof(induction rule: less_iface.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. (Iface [] < Iface []) =\n    (Iface [] \\<le> Iface [] \\<and> \\<not> Iface [] \\<le> Iface [])\n 2. \\<And>v va.\n       (Iface (v # va) < Iface []) =\n       (Iface (v # va) \\<le> Iface [] \\<and>\n        \\<not> Iface [] \\<le> Iface (v # va))\n 3. \\<And>v va.\n       (Iface [] < Iface (v # va)) =\n       (Iface [] \\<le> Iface (v # va) \\<and>\n        \\<not> Iface (v # va) \\<le> Iface [])\n 4. \\<And>a as b bs.\n       (a = b \\<Longrightarrow>\n        (Iface bs < Iface as) =\n        (Iface bs \\<le> Iface as \\<and>\n         \\<not> Iface as \\<le> Iface bs)) \\<Longrightarrow>\n       (Iface (b # bs) < Iface (a # as)) =\n       (Iface (b # bs) \\<le> Iface (a # as) \\<and>\n        \\<not> Iface (a # as) \\<le> Iface (b # bs))", "case 4"], ["proof (state)\nthis:\n  a_ = b_ \\<Longrightarrow>\n  (Iface bs_ < Iface as_) =\n  (Iface bs_ \\<le> Iface as_ \\<and> \\<not> Iface as_ \\<le> Iface bs_)\n\ngoal (4 subgoals):\n 1. (Iface [] < Iface []) =\n    (Iface [] \\<le> Iface [] \\<and> \\<not> Iface [] \\<le> Iface [])\n 2. \\<And>v va.\n       (Iface (v # va) < Iface []) =\n       (Iface (v # va) \\<le> Iface [] \\<and>\n        \\<not> Iface [] \\<le> Iface (v # va))\n 3. \\<And>v va.\n       (Iface [] < Iface (v # va)) =\n       (Iface [] \\<le> Iface (v # va) \\<and>\n        \\<not> Iface (v # va) \\<le> Iface [])\n 4. \\<And>a as b bs.\n       (a = b \\<Longrightarrow>\n        (Iface bs < Iface as) =\n        (Iface bs \\<le> Iface as \\<and>\n         \\<not> Iface as \\<le> Iface bs)) \\<Longrightarrow>\n       (Iface (b # bs) < Iface (a # as)) =\n       (Iface (b # bs) \\<le> Iface (a # as) \\<and>\n        \\<not> Iface (a # as) \\<le> Iface (b # bs))", "thus ?case"], ["proof (prove)\nusing this:\n  a_ = b_ \\<Longrightarrow>\n  (Iface bs_ < Iface as_) =\n  (Iface bs_ \\<le> Iface as_ \\<and> \\<not> Iface as_ \\<le> Iface bs_)\n\ngoal (1 subgoal):\n 1. (Iface (b_ # bs_) < Iface (a_ # as_)) =\n    (Iface (b_ # bs_) \\<le> Iface (a_ # as_) \\<and>\n     \\<not> Iface (a_ # as_) \\<le> Iface (b_ # bs_))", "by simp fastforce"], ["proof (state)\nthis:\n  (Iface (b_ # bs_) < Iface (a_ # as_)) =\n  (Iface (b_ # bs_) \\<le> Iface (a_ # as_) \\<and>\n   \\<not> Iface (a_ # as_) \\<le> Iface (b_ # bs_))\n\ngoal (3 subgoals):\n 1. (Iface [] < Iface []) =\n    (Iface [] \\<le> Iface [] \\<and> \\<not> Iface [] \\<le> Iface [])\n 2. \\<And>v va.\n       (Iface (v # va) < Iface []) =\n       (Iface (v # va) \\<le> Iface [] \\<and>\n        \\<not> Iface [] \\<le> Iface (v # va))\n 3. \\<And>v va.\n       (Iface [] < Iface (v # va)) =\n       (Iface [] \\<le> Iface (v # va) \\<and>\n        \\<not> Iface (v # va) \\<le> Iface [])", "qed(simp+)"], ["proof (state)\nthis:\n  (n < m) = (n \\<le> m \\<and> \\<not> m \\<le> n)\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix n :: iface"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "have \"n = m \\<Longrightarrow> n \\<le> m\" for m"], ["proof (prove)\ngoal (1 subgoal):\n 1. n = m \\<Longrightarrow> n \\<le> m", "by(induction n m rule: less_eq_iface.induct) simp+"], ["proof (state)\nthis:\n  n = ?m \\<Longrightarrow> n \\<le> ?m\n\ngoal (4 subgoals):\n 1. \\<And>x. x \\<le> x\n 2. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 3. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 4. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "thus \"n \\<le> n\""], ["proof (prove)\nusing this:\n  n = ?m \\<Longrightarrow> n \\<le> ?m\n\ngoal (1 subgoal):\n 1. n \\<le> n", "by simp"], ["proof (state)\nthis:\n  n \\<le> n\n\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix n m :: iface"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y.\n       \\<lbrakk>x \\<le> y; y \\<le> x\\<rbrakk> \\<Longrightarrow> x = y\n 3. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"n \\<le> m \\<Longrightarrow> m \\<le> n \\<Longrightarrow> n = m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; m \\<le> n\\<rbrakk> \\<Longrightarrow> n = m", "proof(induction n m rule: less_eq_iface.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>Iface [] \\<le> Iface uu_; Iface uu_ \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface [] = Iface uu_\n 2. \\<And>v va.\n       \\<lbrakk>Iface (v # va) \\<le> Iface [];\n        Iface [] \\<le> Iface (v # va)\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) = Iface []\n 3. \\<And>a as b bs.\n       \\<lbrakk>\\<lbrakk>a = b; Iface as \\<le> Iface bs;\n                 Iface bs \\<le> Iface as\\<rbrakk>\n                \\<Longrightarrow> Iface as = Iface bs;\n        Iface (a # as) \\<le> Iface (b # bs);\n        Iface (b # bs) \\<le> Iface (a # as)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) = Iface (b # bs)", "case 1"], ["proof (state)\nthis:\n  Iface [] \\<le> Iface uu_\n  Iface uu_ \\<le> Iface []\n\ngoal (3 subgoals):\n 1. \\<And>uu_.\n       \\<lbrakk>Iface [] \\<le> Iface uu_; Iface uu_ \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface [] = Iface uu_\n 2. \\<And>v va.\n       \\<lbrakk>Iface (v # va) \\<le> Iface [];\n        Iface [] \\<le> Iface (v # va)\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) = Iface []\n 3. \\<And>a as b bs.\n       \\<lbrakk>\\<lbrakk>a = b; Iface as \\<le> Iface bs;\n                 Iface bs \\<le> Iface as\\<rbrakk>\n                \\<Longrightarrow> Iface as = Iface bs;\n        Iface (a # as) \\<le> Iface (b # bs);\n        Iface (b # bs) \\<le> Iface (a # as)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) = Iface (b # bs)", "thus ?case"], ["proof (prove)\nusing this:\n  Iface [] \\<le> Iface uu_\n  Iface uu_ \\<le> Iface []\n\ngoal (1 subgoal):\n 1. Iface [] = Iface uu_", "using Iface_less_eq_empty"], ["proof (prove)\nusing this:\n  Iface [] \\<le> Iface uu_\n  Iface uu_ \\<le> Iface []\n  Iface ?x \\<le> Iface [] \\<Longrightarrow> ?x = []\n\ngoal (1 subgoal):\n 1. Iface [] = Iface uu_", "by blast"], ["proof (state)\nthis:\n  Iface [] = Iface uu_\n\ngoal (2 subgoals):\n 1. \\<And>v va.\n       \\<lbrakk>Iface (v # va) \\<le> Iface [];\n        Iface [] \\<le> Iface (v # va)\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) = Iface []\n 2. \\<And>a as b bs.\n       \\<lbrakk>\\<lbrakk>a = b; Iface as \\<le> Iface bs;\n                 Iface bs \\<le> Iface as\\<rbrakk>\n                \\<Longrightarrow> Iface as = Iface bs;\n        Iface (a # as) \\<le> Iface (b # bs);\n        Iface (b # bs) \\<le> Iface (a # as)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) = Iface (b # bs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v va.\n       \\<lbrakk>Iface (v # va) \\<le> Iface [];\n        Iface [] \\<le> Iface (v # va)\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) = Iface []\n 2. \\<And>a as b bs.\n       \\<lbrakk>\\<lbrakk>a = b; Iface as \\<le> Iface bs;\n                 Iface bs \\<le> Iface as\\<rbrakk>\n                \\<Longrightarrow> Iface as = Iface bs;\n        Iface (a # as) \\<le> Iface (b # bs);\n        Iface (b # bs) \\<le> Iface (a # as)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) = Iface (b # bs)", "case 3"], ["proof (state)\nthis:\n  \\<lbrakk>a_ = b_; Iface as_ \\<le> Iface bs_;\n   Iface bs_ \\<le> Iface as_\\<rbrakk>\n  \\<Longrightarrow> Iface as_ = Iface bs_\n  Iface (a_ # as_) \\<le> Iface (b_ # bs_)\n  Iface (b_ # bs_) \\<le> Iface (a_ # as_)\n\ngoal (2 subgoals):\n 1. \\<And>v va.\n       \\<lbrakk>Iface (v # va) \\<le> Iface [];\n        Iface [] \\<le> Iface (v # va)\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) = Iface []\n 2. \\<And>a as b bs.\n       \\<lbrakk>\\<lbrakk>a = b; Iface as \\<le> Iface bs;\n                 Iface bs \\<le> Iface as\\<rbrakk>\n                \\<Longrightarrow> Iface as = Iface bs;\n        Iface (a # as) \\<le> Iface (b # bs);\n        Iface (b # bs) \\<le> Iface (a # as)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) = Iface (b # bs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>a_ = b_; Iface as_ \\<le> Iface bs_;\n   Iface bs_ \\<le> Iface as_\\<rbrakk>\n  \\<Longrightarrow> Iface as_ = Iface bs_\n  Iface (a_ # as_) \\<le> Iface (b_ # bs_)\n  Iface (b_ # bs_) \\<le> Iface (a_ # as_)\n\ngoal (1 subgoal):\n 1. Iface (a_ # as_) = Iface (b_ # bs_)", "by (simp split: if_split_asm)"], ["proof (state)\nthis:\n  Iface (a_ # as_) = Iface (b_ # bs_)\n\ngoal (1 subgoal):\n 1. \\<And>v va.\n       \\<lbrakk>Iface (v # va) \\<le> Iface [];\n        Iface [] \\<le> Iface (v # va)\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) = Iface []", "qed(simp)+"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<le> m; m \\<le> n\\<rbrakk> \\<Longrightarrow> n = m\n\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix n m q :: iface"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x y z.\n       \\<lbrakk>x \\<le> y; y \\<le> z\\<rbrakk> \\<Longrightarrow> x \\<le> z\n 2. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"n \\<le> m \\<Longrightarrow> m \\<le> q \\<Longrightarrow> n \\<le> q\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>n \\<le> m; m \\<le> q\\<rbrakk> \\<Longrightarrow> n \\<le> q", "proof(induction n q arbitrary: m rule: less_eq_iface.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>uu_ m.\n       \\<lbrakk>Iface [] \\<le> m; m \\<le> Iface uu_\\<rbrakk>\n       \\<Longrightarrow> Iface [] \\<le> Iface uu_\n 2. \\<And>v va m.\n       \\<lbrakk>Iface (v # va) \\<le> m; m \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) \\<le> Iface []\n 3. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "case 1"], ["proof (state)\nthis:\n  Iface [] \\<le> m\n  m \\<le> Iface uu_\n\ngoal (3 subgoals):\n 1. \\<And>uu_ m.\n       \\<lbrakk>Iface [] \\<le> m; m \\<le> Iface uu_\\<rbrakk>\n       \\<Longrightarrow> Iface [] \\<le> Iface uu_\n 2. \\<And>v va m.\n       \\<lbrakk>Iface (v # va) \\<le> m; m \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) \\<le> Iface []\n 3. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "thus ?case"], ["proof (prove)\nusing this:\n  Iface [] \\<le> m\n  m \\<le> Iface uu_\n\ngoal (1 subgoal):\n 1. Iface [] \\<le> Iface uu_", "by simp"], ["proof (state)\nthis:\n  Iface [] \\<le> Iface uu_\n\ngoal (2 subgoals):\n 1. \\<And>v va m.\n       \\<lbrakk>Iface (v # va) \\<le> m; m \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) \\<le> Iface []\n 2. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>v va m.\n       \\<lbrakk>Iface (v # va) \\<le> m; m \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) \\<le> Iface []\n 2. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "case 2"], ["proof (state)\nthis:\n  Iface (v_ # va_) \\<le> m\n  m \\<le> Iface []\n\ngoal (2 subgoals):\n 1. \\<And>v va m.\n       \\<lbrakk>Iface (v # va) \\<le> m; m \\<le> Iface []\\<rbrakk>\n       \\<Longrightarrow> Iface (v # va) \\<le> Iface []\n 2. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "thus ?case"], ["proof (prove)\nusing this:\n  Iface (v_ # va_) \\<le> m\n  m \\<le> Iface []\n\ngoal (1 subgoal):\n 1. Iface (v_ # va_) \\<le> Iface []", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>Iface (v_ # va_) \\<le> m; m \\<le> Iface []\\<rbrakk>\n    \\<Longrightarrow> False", "apply(drule iface_cons_less_eq_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> Iface [];\n     \\<exists>q qs.\n        m = Iface (q # qs) \\<and>\n        (v_ < q \\<or> Iface va_ \\<le> Iface qs)\\<rbrakk>\n    \\<Longrightarrow> False", "apply(elim exE conjE disjE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>q qs.\n       \\<lbrakk>m \\<le> Iface []; m = Iface (q # qs); v_ < q\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>q qs.\n       \\<lbrakk>m \\<le> Iface []; m = Iface (q # qs);\n        Iface va_ \\<le> Iface qs\\<rbrakk>\n       \\<Longrightarrow> False", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>q qs.\n       \\<lbrakk>m \\<le> Iface []; m = Iface (q # qs);\n        Iface va_ \\<le> Iface qs\\<rbrakk>\n       \\<Longrightarrow> False", "by fastforce"], ["proof (state)\nthis:\n  Iface (v_ # va_) \\<le> Iface []\n\ngoal (1 subgoal):\n 1. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "case 3"], ["proof (state)\nthis:\n  \\<lbrakk>a_ = b_; Iface as_ \\<le> ?m; ?m \\<le> Iface bs_\\<rbrakk>\n  \\<Longrightarrow> Iface as_ \\<le> Iface bs_\n  Iface (a_ # as_) \\<le> m\n  m \\<le> Iface (b_ # bs_)\n\ngoal (1 subgoal):\n 1. \\<And>a as b bs m.\n       \\<lbrakk>\\<And>m.\n                   \\<lbrakk>a = b; Iface as \\<le> m;\n                    m \\<le> Iface bs\\<rbrakk>\n                   \\<Longrightarrow> Iface as \\<le> Iface bs;\n        Iface (a # as) \\<le> m; m \\<le> Iface (b # bs)\\<rbrakk>\n       \\<Longrightarrow> Iface (a # as) \\<le> Iface (b # bs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>a_ = b_; Iface as_ \\<le> ?m; ?m \\<le> Iface bs_\\<rbrakk>\n  \\<Longrightarrow> Iface as_ \\<le> Iface bs_\n  Iface (a_ # as_) \\<le> m\n  m \\<le> Iface (b_ # bs_)\n\ngoal (1 subgoal):\n 1. Iface (a_ # as_) \\<le> Iface (b_ # bs_)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m.\n                \\<lbrakk>a_ = b_; Iface as_ \\<le> m;\n                 m \\<le> Iface bs_\\<rbrakk>\n                \\<Longrightarrow> Iface as_ \\<le> Iface bs_;\n     Iface (a_ # as_) \\<le> m; m \\<le> Iface (b_ # bs_)\\<rbrakk>\n    \\<Longrightarrow> (a_ = b_ \\<longrightarrow>\n                       Iface as_ \\<le> Iface bs_) \\<and>\n                      (a_ \\<noteq> b_ \\<longrightarrow> a_ \\<le> b_)", "apply(frule iface_cons_less_eq_i)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>m.\n                \\<lbrakk>a_ = b_; Iface as_ \\<le> m;\n                 m \\<le> Iface bs_\\<rbrakk>\n                \\<Longrightarrow> Iface as_ \\<le> Iface bs_;\n     Iface (a_ # as_) \\<le> m; m \\<le> Iface (b_ # bs_);\n     \\<exists>q qs.\n        m = Iface (q # qs) \\<and>\n        (a_ < q \\<or> Iface as_ \\<le> Iface qs)\\<rbrakk>\n    \\<Longrightarrow> (a_ = b_ \\<longrightarrow>\n                       Iface as_ \\<le> Iface bs_) \\<and>\n                      (a_ \\<noteq> b_ \\<longrightarrow> a_ \\<le> b_)", "by(auto split: if_split_asm)"], ["proof (state)\nthis:\n  Iface (a_ # as_) \\<le> Iface (b_ # bs_)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>n \\<le> m; m \\<le> q\\<rbrakk> \\<Longrightarrow> n \\<le> q\n\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "fix n m :: iface"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x y. x \\<le> y \\<or> y \\<le> x", "show \"n \\<le> m \\<or> m \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<or> m \\<le> n", "apply(induction n m rule: less_eq_iface.induct)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>uu_. Iface [] \\<le> Iface uu_ \\<or> Iface uu_ \\<le> Iface []\n 2. \\<And>v va.\n       Iface (v # va) \\<le> Iface [] \\<or> Iface [] \\<le> Iface (v # va)\n 3. \\<And>a as b bs.\n       (a = b \\<Longrightarrow>\n        Iface as \\<le> Iface bs \\<or>\n        Iface bs \\<le> Iface as) \\<Longrightarrow>\n       Iface (a # as) \\<le> Iface (b # bs) \\<or>\n       Iface (b # bs) \\<le> Iface (a # as)", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as b bs.\n       (a = b \\<Longrightarrow>\n        Iface as \\<le> Iface bs \\<or>\n        Iface bs \\<le> Iface as) \\<Longrightarrow>\n       b \\<noteq> a \\<longrightarrow> a \\<le> b \\<or> b \\<le> a", "by fastforce"], ["proof (state)\nthis:\n  n \\<le> m \\<or> m \\<le> n\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "definition ifaceAny :: iface where\n  \"ifaceAny \\<equiv> Iface ''+''\""], ["", "(* there is no IfaceFalse, proof below *)"], ["", "text\\<open>If the interface name ends in a ``+'', then any interface which begins with this name will match.\n  (man iptables)\n\nHere is how iptables handles this wildcard on my system.\nA packet for the loopback interface \\texttt{lo} is matched by the following expressions\n  \\<^item> lo\n  \\<^item> lo+\n  \\<^item> l+\n  \\<^item> +\n\nIt is not matched by the following expressions\n  \\<^item> lo++\n  \\<^item> lo+++\n  \\<^item> lo1+\n  \\<^item> lo1\n\nBy the way: \\texttt{Warning: weird characters in interface ` ' ('/' and ' ' are not allowed by the kernel).}\nHowever, happy snowman and shell colors are fine.\n\\<close>"], ["", "context\nbegin"], ["", "subsection\\<open>Helpers for the interface name (@{typ string})\\<close>"], ["", "(*Do not use outside this thy! Type is really misleading.*)"], ["", "text\\<open>\n      argument 1: interface as in firewall rule - Wildcard support\n      argument 2: interface a packet came from - No wildcard support\\<close>"], ["", "fun internal_iface_name_match :: \"string \\<Rightarrow> string \\<Rightarrow> bool\" where\n      \"internal_iface_name_match []     []         \\<longleftrightarrow> True\" |\n      \"internal_iface_name_match (i#is) []         \\<longleftrightarrow> (i = CHR ''+'' \\<and> is = [])\" |\n      \"internal_iface_name_match []     (_#_)      \\<longleftrightarrow> False\" |\n      \"internal_iface_name_match (i#is) (p_i#p_is) \\<longleftrightarrow> (if (i = CHR ''+'' \\<and> is = []) then True else (\n            (p_i = i) \\<and> internal_iface_name_match is p_is\n      ))\"\n    \n    (*<*)\n    \\<comment> \\<open>Examples\\<close>"], ["", "lemma \"internal_iface_name_match ''lo'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match ''lo'' ''lo''", "by eval"], ["", "lemma \"internal_iface_name_match ''lo+'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match ''lo+'' ''lo''", "by eval"], ["", "lemma \"internal_iface_name_match ''l+'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match ''l+'' ''lo''", "by eval"], ["", "lemma \"internal_iface_name_match ''+'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match ''+'' ''lo''", "by eval"], ["", "lemma \"\\<not> internal_iface_name_match ''lo++'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> internal_iface_name_match ''lo++'' ''lo''", "by eval"], ["", "lemma \"\\<not> internal_iface_name_match ''lo+++'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> internal_iface_name_match ''lo+++'' ''lo''", "by eval"], ["", "lemma \"\\<not> internal_iface_name_match ''lo1+'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> internal_iface_name_match ''lo1+'' ''lo''", "by eval"], ["", "lemma \"\\<not> internal_iface_name_match ''lo1'' ''lo''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> internal_iface_name_match ''lo1'' ''lo''", "by eval"], ["", "text\\<open>The wildcard interface name\\<close>"], ["", "lemma \"internal_iface_name_match ''+'' ''''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match ''+'' []", "by eval"], ["", "(*>*)"], ["", "fun iface_name_is_wildcard :: \"string \\<Rightarrow> bool\" where\n      \"iface_name_is_wildcard [] \\<longleftrightarrow> False\" |\n      \"iface_name_is_wildcard [s] \\<longleftrightarrow> s = CHR ''+''\" |\n      \"iface_name_is_wildcard (_#ss) \\<longleftrightarrow> iface_name_is_wildcard ss\""], ["", "private"], ["", "lemma iface_name_is_wildcard_alt: \"iface_name_is_wildcard eth \\<longleftrightarrow> eth \\<noteq> [] \\<and> last eth = CHR ''+''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_name_is_wildcard eth =\n    (eth \\<noteq> [] \\<and> last eth = CHR ''+'')", "proof(induction eth rule: iface_name_is_wildcard.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. iface_name_is_wildcard [] = ([] \\<noteq> [] \\<and> last [] = CHR ''+'')\n 2. \\<And>s.\n       iface_name_is_wildcard [s] =\n       ([s] \\<noteq> [] \\<and> last [s] = CHR ''+'')\n 3. \\<And>uu_ v va.\n       iface_name_is_wildcard (v # va) =\n       (v # va \\<noteq> [] \\<and>\n        last (v # va) = CHR ''+'') \\<Longrightarrow>\n       iface_name_is_wildcard (uu_ # v # va) =\n       (uu_ # v # va \\<noteq> [] \\<and> last (uu_ # v # va) = CHR ''+'')", "qed(simp_all)"], ["", "private"], ["", "lemma iface_name_is_wildcard_alt': \"iface_name_is_wildcard eth \\<longleftrightarrow> eth \\<noteq> [] \\<and> hd (rev eth) = CHR ''+''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_name_is_wildcard eth =\n    (eth \\<noteq> [] \\<and> hd (rev eth) = CHR ''+'')", "unfolding iface_name_is_wildcard_alt"], ["proof (prove)\ngoal (1 subgoal):\n 1. (eth \\<noteq> [] \\<and> last eth = CHR ''+'') =\n    (eth \\<noteq> [] \\<and> hd (rev eth) = CHR ''+'')", "using hd_rev"], ["proof (prove)\nusing this:\n  ?xs \\<noteq> [] \\<Longrightarrow> hd (rev ?xs) = last ?xs\n\ngoal (1 subgoal):\n 1. (eth \\<noteq> [] \\<and> last eth = CHR ''+'') =\n    (eth \\<noteq> [] \\<and> hd (rev eth) = CHR ''+'')", "by fastforce"], ["", "private"], ["", "lemma iface_name_is_wildcard_fst: \"iface_name_is_wildcard (i # is) \\<Longrightarrow> is \\<noteq> [] \\<Longrightarrow> iface_name_is_wildcard is\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard (i # is); is \\<noteq> []\\<rbrakk>\n    \\<Longrightarrow> iface_name_is_wildcard is", "by(simp add: iface_name_is_wildcard_alt)"], ["", "private"], ["", "fun internal_iface_name_to_set :: \"string \\<Rightarrow> string set\" where\n      \"internal_iface_name_to_set i = (if \\<not> iface_name_is_wildcard i\n        then\n          {i}\n        else\n          {(butlast i)@cs | cs. True})\""], ["", "private"], ["", "lemma \"{(butlast i)@cs | cs. True} = (\\<lambda>s. (butlast i)@s) ` (UNIV::string set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {butlast i @ cs |cs. True} = range ((@) (butlast i))", "by fastforce"], ["", "private"], ["", "lemma internal_iface_name_to_set: \"internal_iface_name_match i p_iface \\<longleftrightarrow> p_iface \\<in> internal_iface_name_to_set i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match i p_iface =\n    (p_iface \\<in> internal_iface_name_to_set i)", "proof(induction i p_iface rule: internal_iface_name_match.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. internal_iface_name_match [] [] =\n    ([] \\<in> internal_iface_name_to_set [])\n 2. \\<And>i is.\n       internal_iface_name_match (i # is) [] =\n       ([] \\<in> internal_iface_name_to_set (i # is))\n 3. \\<And>uu_ uv_.\n       internal_iface_name_match [] (uu_ # uv_) =\n       (uu_ # uv_ \\<in> internal_iface_name_to_set [])\n 4. \\<And>i is p_i p_is.\n       (\\<not> (i = CHR ''+'' \\<and> is = []) \\<Longrightarrow>\n        internal_iface_name_match is p_is =\n        (p_is \\<in> internal_iface_name_to_set is)) \\<Longrightarrow>\n       internal_iface_name_match (i # is) (p_i # p_is) =\n       (p_i # p_is \\<in> internal_iface_name_to_set (i # is))", "case 4"], ["proof (state)\nthis:\n  \\<not> (i_ = CHR ''+'' \\<and> is_ = []) \\<Longrightarrow>\n  internal_iface_name_match is_ p_is_ =\n  (p_is_ \\<in> internal_iface_name_to_set is_)\n\ngoal (4 subgoals):\n 1. internal_iface_name_match [] [] =\n    ([] \\<in> internal_iface_name_to_set [])\n 2. \\<And>i is.\n       internal_iface_name_match (i # is) [] =\n       ([] \\<in> internal_iface_name_to_set (i # is))\n 3. \\<And>uu_ uv_.\n       internal_iface_name_match [] (uu_ # uv_) =\n       (uu_ # uv_ \\<in> internal_iface_name_to_set [])\n 4. \\<And>i is p_i p_is.\n       (\\<not> (i = CHR ''+'' \\<and> is = []) \\<Longrightarrow>\n        internal_iface_name_match is p_is =\n        (p_is \\<in> internal_iface_name_to_set is)) \\<Longrightarrow>\n       internal_iface_name_match (i # is) (p_i # p_is) =\n       (p_i # p_is \\<in> internal_iface_name_to_set (i # is))", "thus ?case"], ["proof (prove)\nusing this:\n  \\<not> (i_ = CHR ''+'' \\<and> is_ = []) \\<Longrightarrow>\n  internal_iface_name_match is_ p_is_ =\n  (p_is_ \\<in> internal_iface_name_to_set is_)\n\ngoal (1 subgoal):\n 1. internal_iface_name_match (i_ # is_) (p_i_ # p_is_) =\n    (p_i_ # p_is_ \\<in> internal_iface_name_to_set (i_ # is_))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (i_ = CHR ''+'' \\<longrightarrow> is_ \\<noteq> [] \\<Longrightarrow>\n     internal_iface_name_match is_ p_is_ =\n     (p_is_\n      \\<in> (if \\<not> iface_name_is_wildcard is_ then {is_}\n             else {butlast is_ @ cs |cs. True}))) \\<Longrightarrow>\n    is_ \\<noteq> [] \\<longrightarrow>\n    (\\<not> iface_name_is_wildcard is_ \\<longrightarrow>\n     iface_name_is_wildcard (i_ # is_) \\<longrightarrow>\n     (p_i_ = i_ \\<and> p_is_ = is_) =\n     (p_i_ = i_ \\<and> (\\<exists>cs. p_is_ = butlast is_ @ cs))) \\<and>\n    (iface_name_is_wildcard is_ \\<longrightarrow>\n     \\<not> iface_name_is_wildcard (i_ # is_) \\<longrightarrow>\n     (p_i_ = i_ \\<and> (\\<exists>cs. p_is_ = butlast is_ @ cs)) =\n     (p_i_ = i_ \\<and> p_is_ = is_))", "apply(safe)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>i_ = CHR ''+'' \\<longrightarrow>\n             is_ \\<noteq> [] \\<Longrightarrow>\n             internal_iface_name_match is_ is_ =\n             (is_\n              \\<in> (if \\<not> iface_name_is_wildcard is_ then {is_}\n                     else {butlast is_ @ cs |cs. True}));\n     is_ \\<noteq> []; \\<not> iface_name_is_wildcard is_;\n     iface_name_is_wildcard (i_ # is_); p_is_ = is_; p_i_ = i_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>cs. is_ = butlast is_ @ cs\n 2. \\<And>cs.\n       \\<lbrakk>i_ = CHR ''+'' \\<longrightarrow>\n                is_ \\<noteq> [] \\<Longrightarrow>\n                internal_iface_name_match is_ (butlast is_ @ cs) =\n                (butlast is_ @ cs\n                 \\<in> (if \\<not> iface_name_is_wildcard is_ then {is_}\n                        else {butlast is_ @ cs |cs. True}));\n        is_ \\<noteq> []; \\<not> iface_name_is_wildcard is_;\n        iface_name_is_wildcard (i_ # is_); p_i_ = i_;\n        p_is_ = butlast is_ @ cs\\<rbrakk>\n       \\<Longrightarrow> butlast is_ @ cs = is_\n 3. \\<And>cs.\n       \\<lbrakk>i_ = CHR ''+'' \\<longrightarrow>\n                is_ \\<noteq> [] \\<Longrightarrow>\n                internal_iface_name_match is_ (butlast is_ @ cs) =\n                (butlast is_ @ cs\n                 \\<in> (if \\<not> iface_name_is_wildcard is_ then {is_}\n                        else {butlast is_ @ cs |cs. True}));\n        is_ \\<noteq> []; iface_name_is_wildcard is_;\n        \\<not> iface_name_is_wildcard (i_ # is_); p_i_ = i_;\n        p_is_ = butlast is_ @ cs\\<rbrakk>\n       \\<Longrightarrow> butlast is_ @ cs = is_\n 4. \\<lbrakk>i_ = CHR ''+'' \\<longrightarrow>\n             is_ \\<noteq> [] \\<Longrightarrow>\n             internal_iface_name_match is_ is_ =\n             (is_\n              \\<in> (if \\<not> iface_name_is_wildcard is_ then {is_}\n                     else {butlast is_ @ cs |cs. True}));\n     is_ \\<noteq> []; iface_name_is_wildcard is_;\n     \\<not> iface_name_is_wildcard (i_ # is_); p_is_ = is_;\n     p_i_ = i_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>cs. is_ = butlast is_ @ cs", "apply(simp_all add: iface_name_is_wildcard_fst)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>cs.\n       \\<lbrakk>internal_iface_name_match is_ (butlast is_ @ cs);\n        is_ \\<noteq> []; iface_name_is_wildcard is_;\n        \\<not> iface_name_is_wildcard (i_ # is_); p_i_ = i_;\n        p_is_ = butlast is_ @ cs\\<rbrakk>\n       \\<Longrightarrow> butlast is_ @ cs = is_\n 2. \\<lbrakk>internal_iface_name_match is_ is_ =\n             (\\<exists>cs. is_ = butlast is_ @ cs);\n     is_ \\<noteq> []; iface_name_is_wildcard is_;\n     \\<not> iface_name_is_wildcard (i_ # is_); p_is_ = is_;\n     p_i_ = i_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>cs. is_ = butlast is_ @ cs", "apply (metis (full_types) iface_name_is_wildcard.simps(3) list.exhaust)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>internal_iface_name_match is_ is_ =\n             (\\<exists>cs. is_ = butlast is_ @ cs);\n     is_ \\<noteq> []; iface_name_is_wildcard is_;\n     \\<not> iface_name_is_wildcard (i_ # is_); p_is_ = is_;\n     p_i_ = i_\\<rbrakk>\n    \\<Longrightarrow> \\<exists>cs. is_ = butlast is_ @ cs", "by (metis append_butlast_last_id)"], ["proof (state)\nthis:\n  internal_iface_name_match (i_ # is_) (p_i_ # p_is_) =\n  (p_i_ # p_is_ \\<in> internal_iface_name_to_set (i_ # is_))\n\ngoal (3 subgoals):\n 1. internal_iface_name_match [] [] =\n    ([] \\<in> internal_iface_name_to_set [])\n 2. \\<And>i is.\n       internal_iface_name_match (i # is) [] =\n       ([] \\<in> internal_iface_name_to_set (i # is))\n 3. \\<And>uu_ uv_.\n       internal_iface_name_match [] (uu_ # uv_) =\n       (uu_ # uv_ \\<in> internal_iface_name_to_set [])", "qed(simp_all)"], ["", "private"], ["", "lemma internal_iface_name_to_set2: \"internal_iface_name_to_set ifce = {i. internal_iface_name_match ifce i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_to_set ifce = {i. internal_iface_name_match ifce i}", "by (simp add: internal_iface_name_to_set)"], ["", "private"], ["", "lemma internal_iface_name_match_refl: \"internal_iface_name_match i i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "fix i j"], ["proof (state)\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "have \"i=j \\<Longrightarrow> internal_iface_name_match i j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. i = j \\<Longrightarrow> internal_iface_name_match i j", "by(induction i j rule: internal_iface_name_match.induct)(simp_all)"], ["proof (state)\nthis:\n  i = j \\<Longrightarrow> internal_iface_name_match i j\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "}"], ["proof (state)\nthis:\n  ?ia2 = ?j2 \\<Longrightarrow> internal_iface_name_match ?ia2 ?j2\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "thus ?thesis"], ["proof (prove)\nusing this:\n  ?ia2 = ?j2 \\<Longrightarrow> internal_iface_name_match ?ia2 ?j2\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i i", "by simp"], ["proof (state)\nthis:\n  internal_iface_name_match i i\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Matching\\<close>"], ["", "fun match_iface :: \"iface \\<Rightarrow> string \\<Rightarrow> bool\" where\n      \"match_iface (Iface i) p_iface \\<longleftrightarrow> internal_iface_name_match i p_iface\"\n    \n    \\<comment> \\<open>Examples\\<close>"], ["", "lemma \"  match_iface (Iface ''lo'')    ''lo''\"\n            \"  match_iface (Iface ''lo+'')   ''lo''\"\n            \"  match_iface (Iface ''l+'')    ''lo''\"\n            \"  match_iface (Iface ''+'')     ''lo''\"\n            \"\\<not> match_iface (Iface ''lo++'')  ''lo''\"\n            \"\\<not> match_iface (Iface ''lo+++'') ''lo''\"\n            \"\\<not> match_iface (Iface ''lo1+'')  ''lo''\"\n            \"\\<not> match_iface (Iface ''lo1'')   ''lo''\"\n            \"  match_iface (Iface ''+'')     ''eth0''\"\n            \"  match_iface (Iface ''+'')     ''eth0''\"\n            \"  match_iface (Iface ''eth+'')  ''eth0''\"\n            \"\\<not> match_iface (Iface ''lo+'')   ''eth0''\"\n            \"  match_iface (Iface ''lo+'')   ''loX''\"\n            \"\\<not> match_iface (Iface '''')      ''loX''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((match_iface (Iface ''lo'') ''lo'' &&&\n      match_iface (Iface ''lo+'') ''lo'' &&&\n      match_iface (Iface ''l+'') ''lo'') &&&\n     (match_iface (Iface ''+'') ''lo'' &&&\n      \\<not> match_iface (Iface ''lo++'') ''lo'') &&&\n     \\<not> match_iface (Iface ''lo+++'') ''lo'' &&&\n     \\<not> match_iface (Iface ''lo1+'') ''lo'') &&&\n    (\\<not> match_iface (Iface ''lo1'') ''lo'' &&&\n     match_iface (Iface ''+'') ''eth0'' &&&\n     match_iface (Iface ''+'') ''eth0'') &&&\n    (match_iface (Iface ''eth+'') ''eth0'' &&&\n     \\<not> match_iface (Iface ''lo+'') ''eth0'') &&&\n    match_iface (Iface ''lo+'') ''loX'' &&&\n    \\<not> match_iface (Iface []) ''loX''", "(*<*)"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((match_iface (Iface ''lo'') ''lo'' &&&\n      match_iface (Iface ''lo+'') ''lo'' &&&\n      match_iface (Iface ''l+'') ''lo'') &&&\n     (match_iface (Iface ''+'') ''lo'' &&&\n      \\<not> match_iface (Iface ''lo++'') ''lo'') &&&\n     \\<not> match_iface (Iface ''lo+++'') ''lo'' &&&\n     \\<not> match_iface (Iface ''lo1+'') ''lo'') &&&\n    (\\<not> match_iface (Iface ''lo1'') ''lo'' &&&\n     match_iface (Iface ''+'') ''eth0'' &&&\n     match_iface (Iface ''+'') ''eth0'') &&&\n    (match_iface (Iface ''eth+'') ''eth0'' &&&\n     \\<not> match_iface (Iface ''lo+'') ''eth0'') &&&\n    match_iface (Iface ''lo+'') ''loX'' &&&\n    \\<not> match_iface (Iface []) ''loX''", "by eval+"], ["", "(*>*)"], ["", "lemma match_ifaceAny: \"match_iface ifaceAny i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_iface ifaceAny i", "by(cases i, simp_all add: ifaceAny_def)"], ["", "lemma match_IfaceFalse: \"\\<not>(\\<exists> IfaceFalse. (\\<forall>i. \\<not> match_iface IfaceFalse i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>IfaceFalse. \\<forall>i. \\<not> match_iface IfaceFalse i", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>IfaceFalse. \\<exists>i. match_iface IfaceFalse i", "apply(intro allI, rename_tac IfaceFalse)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>IfaceFalse. \\<exists>i. match_iface IfaceFalse i", "apply(case_tac IfaceFalse, rename_tac name)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>IfaceFalse name.\n       IfaceFalse = Iface name \\<Longrightarrow>\n       \\<exists>i. match_iface IfaceFalse i", "apply(rule_tac x=\"name\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>IfaceFalse name.\n       IfaceFalse = Iface name \\<Longrightarrow> match_iface IfaceFalse name", "by(simp add: internal_iface_name_match_refl)\n      \n\n    \\<comment> \\<open>@{const match_iface} explained by the individual cases\\<close>"], ["", "lemma match_iface_case_nowildcard: \"\\<not> iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<longleftrightarrow> i = p_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> iface_name_is_wildcard i \\<Longrightarrow>\n    match_iface (Iface i) p_i = (i = p_i)", "proof(induction i p_i rule: internal_iface_name_match.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<not> iface_name_is_wildcard [] \\<Longrightarrow>\n    match_iface (Iface []) [] = ([] = [])\n 2. \\<And>i is.\n       \\<not> iface_name_is_wildcard (i # is) \\<Longrightarrow>\n       match_iface (Iface (i # is)) [] = (i # is = [])\n 3. \\<And>uu_ uv_.\n       \\<not> iface_name_is_wildcard [] \\<Longrightarrow>\n       match_iface (Iface []) (uu_ # uv_) = ([] = uu_ # uv_)\n 4. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = CHR ''+'' \\<and> is = []);\n                 \\<not> iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> match_iface (Iface is) p_is = (is = p_is);\n        \\<not> iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> match_iface (Iface (i # is)) (p_i # p_is) =\n                         (i # is = p_i # p_is)", "qed(auto simp add: iface_name_is_wildcard_alt split: if_split_asm)"], ["", "lemma match_iface_case_wildcard_prefix:\n      \"iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<longleftrightarrow> butlast i = take (length i - 1) p_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_name_is_wildcard i \\<Longrightarrow>\n    match_iface (Iface i) p_i = (butlast i = take (length i - 1) p_i)", "apply(induction i p_i rule: internal_iface_name_match.induct)"], ["proof (prove)\ngoal (4 subgoals):\n 1. iface_name_is_wildcard [] \\<Longrightarrow>\n    match_iface (Iface []) [] = (butlast [] = take (length [] - 1) [])\n 2. \\<And>i is.\n       iface_name_is_wildcard (i # is) \\<Longrightarrow>\n       match_iface (Iface (i # is)) [] =\n       (butlast (i # is) = take (length (i # is) - 1) [])\n 3. \\<And>uu_ uv_.\n       iface_name_is_wildcard [] \\<Longrightarrow>\n       match_iface (Iface []) (uu_ # uv_) =\n       (butlast [] = take (length [] - 1) (uu_ # uv_))\n 4. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = CHR ''+'' \\<and> is = []);\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> match_iface (Iface is) p_is =\n                                  (butlast is = take (length is - 1) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> match_iface (Iface (i # is)) (p_i # p_is) =\n                         (butlast (i # is) =\n                          take (length (i # is) - 1) (p_i # p_is))", "apply(simp; fail)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i is.\n       iface_name_is_wildcard (i # is) \\<Longrightarrow>\n       match_iface (Iface (i # is)) [] =\n       (butlast (i # is) = take (length (i # is) - 1) [])\n 2. \\<And>uu_ uv_.\n       iface_name_is_wildcard [] \\<Longrightarrow>\n       match_iface (Iface []) (uu_ # uv_) =\n       (butlast [] = take (length [] - 1) (uu_ # uv_))\n 3. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = CHR ''+'' \\<and> is = []);\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> match_iface (Iface is) p_is =\n                                  (butlast is = take (length is - 1) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> match_iface (Iface (i # is)) (p_i # p_is) =\n                         (butlast (i # is) =\n                          take (length (i # is) - 1) (p_i # p_is))", "apply(simp add: iface_name_is_wildcard_alt split: if_split_asm; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>uu_ uv_.\n       iface_name_is_wildcard [] \\<Longrightarrow>\n       match_iface (Iface []) (uu_ # uv_) =\n       (butlast [] = take (length [] - 1) (uu_ # uv_))\n 2. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = CHR ''+'' \\<and> is = []);\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> match_iface (Iface is) p_is =\n                                  (butlast is = take (length is - 1) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> match_iface (Iface (i # is)) (p_i # p_is) =\n                         (butlast (i # is) =\n                          take (length (i # is) - 1) (p_i # p_is))", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = CHR ''+'' \\<and> is = []);\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> match_iface (Iface is) p_is =\n                                  (butlast is = take (length is - 1) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> match_iface (Iface (i # is)) (p_i # p_is) =\n                         (butlast (i # is) =\n                          take (length (i # is) - 1) (p_i # p_is))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>i = CHR ''+'' \\<longrightarrow> is \\<noteq> [];\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> internal_iface_name_match is p_is =\n                                  (butlast is =\n                                   take (length is - Suc 0) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> (is = [] \\<longrightarrow>\n                          i \\<noteq> CHR ''+'' \\<longrightarrow>\n                          p_i = i \\<and>\n                          internal_iface_name_match [] p_is) \\<and>\n                         (is \\<noteq> [] \\<longrightarrow>\n                          (p_i = i \\<and>\n                           internal_iface_name_match is p_is) =\n                          (i # butlast is = take (length is) (p_i # p_is)))", "apply(intro conjI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>i = CHR ''+'' \\<longrightarrow> is \\<noteq> [];\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> internal_iface_name_match is p_is =\n                                  (butlast is =\n                                   take (length is - Suc 0) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> is = [] \\<longrightarrow>\n                         i \\<noteq> CHR ''+'' \\<longrightarrow>\n                         p_i = i \\<and> internal_iface_name_match [] p_is\n 2. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>i = CHR ''+'' \\<longrightarrow> is \\<noteq> [];\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> internal_iface_name_match is p_is =\n                                  (butlast is =\n                                   take (length is - Suc 0) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> is \\<noteq> [] \\<longrightarrow>\n                         (p_i = i \\<and>\n                          internal_iface_name_match is p_is) =\n                         (i # butlast is = take (length is) (p_i # p_is))", "apply(simp add: iface_name_is_wildcard_alt split: if_split_asm; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>i = CHR ''+'' \\<longrightarrow> is \\<noteq> [];\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> internal_iface_name_match is p_is =\n                                  (butlast is =\n                                   take (length is - Suc 0) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> is \\<noteq> [] \\<longrightarrow>\n                         (p_i = i \\<and>\n                          internal_iface_name_match is p_is) =\n                         (i # butlast is = take (length is) (p_i # p_is))", "apply(simp add: iface_name_is_wildcard_fst)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>i = CHR ''+'' \\<longrightarrow> is \\<noteq> [];\n                 iface_name_is_wildcard is\\<rbrakk>\n                \\<Longrightarrow> internal_iface_name_match is p_is =\n                                  (butlast is =\n                                   take (length is - Suc 0) p_is);\n        iface_name_is_wildcard (i # is)\\<rbrakk>\n       \\<Longrightarrow> is \\<noteq> [] \\<longrightarrow>\n                         (p_i = i \\<and>\n                          butlast is = take (length is - Suc 0) p_is) =\n                         (i # butlast is = take (length is) (p_i # p_is))", "by (metis One_nat_def length_0_conv list.sel(1) list.sel(3) take_Cons')"], ["", "lemma match_iface_case_wildcard_length: \"iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<Longrightarrow> length p_i \\<ge> (length i - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i; match_iface (Iface i) p_i\\<rbrakk>\n    \\<Longrightarrow> length i - 1 \\<le> length p_i", "proof(induction i p_i rule: internal_iface_name_match.induct)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard []; match_iface (Iface []) []\\<rbrakk>\n    \\<Longrightarrow> length [] - 1 \\<le> length []\n 2. \\<And>i is.\n       \\<lbrakk>iface_name_is_wildcard (i # is);\n        match_iface (Iface (i # is)) []\\<rbrakk>\n       \\<Longrightarrow> length (i # is) - 1 \\<le> length []\n 3. \\<And>uu_ uv_.\n       \\<lbrakk>iface_name_is_wildcard [];\n        match_iface (Iface []) (uu_ # uv_)\\<rbrakk>\n       \\<Longrightarrow> length [] - 1 \\<le> length (uu_ # uv_)\n 4. \\<And>i is p_i p_is.\n       \\<lbrakk>\\<lbrakk>\\<not> (i = CHR ''+'' \\<and> is = []);\n                 iface_name_is_wildcard is;\n                 match_iface (Iface is) p_is\\<rbrakk>\n                \\<Longrightarrow> length is - 1 \\<le> length p_is;\n        iface_name_is_wildcard (i # is);\n        match_iface (Iface (i # is)) (p_i # p_is)\\<rbrakk>\n       \\<Longrightarrow> length (i # is) - 1 \\<le> length (p_i # p_is)", "qed(simp_all add: iface_name_is_wildcard_alt split: if_split_asm)"], ["", "corollary match_iface_case_wildcard:\n      \"iface_name_is_wildcard i \\<Longrightarrow> match_iface (Iface i) p_i \\<longleftrightarrow> butlast i = take (length i - 1) p_i \\<and> length p_i \\<ge> (length i - 1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_name_is_wildcard i \\<Longrightarrow>\n    match_iface (Iface i) p_i =\n    (butlast i = take (length i - 1) p_i \\<and>\n     length i - 1 \\<le> length p_i)", "using match_iface_case_wildcard_length match_iface_case_wildcard_prefix"], ["proof (prove)\nusing this:\n  \\<lbrakk>iface_name_is_wildcard ?i; match_iface (Iface ?i) ?p_i\\<rbrakk>\n  \\<Longrightarrow> length ?i - 1 \\<le> length ?p_i\n  iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (butlast ?i = take (length ?i - 1) ?p_i)\n\ngoal (1 subgoal):\n 1. iface_name_is_wildcard i \\<Longrightarrow>\n    match_iface (Iface i) p_i =\n    (butlast i = take (length i - 1) p_i \\<and>\n     length i - 1 \\<le> length p_i)", "by blast"], ["", "lemma match_iface_set: \"match_iface (Iface i) p_iface \\<longleftrightarrow> p_iface \\<in> internal_iface_name_to_set i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_iface (Iface i) p_iface =\n    (p_iface \\<in> internal_iface_name_to_set i)", "using internal_iface_name_to_set"], ["proof (prove)\nusing this:\n  internal_iface_name_match ?i ?p_iface =\n  (?p_iface \\<in> internal_iface_name_to_set ?i)\n\ngoal (1 subgoal):\n 1. match_iface (Iface i) p_iface =\n    (p_iface \\<in> internal_iface_name_to_set i)", "by simp"], ["", "private"], ["", "definition internal_iface_name_wildcard_longest :: \"string \\<Rightarrow> string \\<Rightarrow> string option\" where\n      \"internal_iface_name_wildcard_longest i1 i2 = (\n        if \n          take (min (length i1 - 1) (length i2 - 1)) i1 = take (min (length i1 - 1) (length i2 - 1)) i2\n        then\n          Some (if length i1 \\<le> length i2 then i2 else i1)\n        else\n          None)\""], ["", "private"], ["", "lemma \"internal_iface_name_wildcard_longest ''eth+'' ''eth3+'' = Some ''eth3+''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_wildcard_longest ''eth+'' ''eth3+'' = Some ''eth3+''", "by eval"], ["", "private"], ["", "lemma \"internal_iface_name_wildcard_longest ''eth+'' ''e+'' = Some ''eth+''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_wildcard_longest ''eth+'' ''e+'' = Some ''eth+''", "by eval"], ["", "private"], ["", "lemma \"internal_iface_name_wildcard_longest ''eth+'' ''lo'' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_wildcard_longest ''eth+'' ''lo'' = None", "by eval"], ["", "private"], ["", "lemma internal_iface_name_wildcard_longest_commute: \"iface_name_is_wildcard i1 \\<Longrightarrow> iface_name_is_wildcard i2 \\<Longrightarrow> \n      internal_iface_name_wildcard_longest i1 i2 = internal_iface_name_wildcard_longest i2 i1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> internal_iface_name_wildcard_longest i1 i2 =\n                      internal_iface_name_wildcard_longest i2 i1", "apply(simp add: internal_iface_name_wildcard_longest_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (length i1 = length i2 \\<longrightarrow>\n                       take (length i2 - Suc 0) i1 =\n                       take (length i2 - Suc 0) i2 \\<longrightarrow>\n                       i2 = i1) \\<and>\n                      (length i1 \\<noteq> length i2 \\<longrightarrow>\n                       (take (min (length i1 - Suc 0) (length i2 - Suc 0))\n                         i1 =\n                        take (min (length i1 - Suc 0) (length i2 - Suc 0))\n                         i2 \\<longrightarrow>\n                        take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                         i2 =\n                        take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                         i1) \\<and>\n                       (take (min (length i1 - Suc 0) (length i2 - Suc 0))\n                         i1 \\<noteq>\n                        take (min (length i1 - Suc 0) (length i2 - Suc 0))\n                         i2 \\<longrightarrow>\n                        take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                         i2 \\<noteq>\n                        take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                         i1))", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     length i1 = length i2;\n     take (length i2 - Suc 0) i1 = take (length i2 - Suc 0) i2\\<rbrakk>\n    \\<Longrightarrow> i2 = i1\n 2. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     length i1 \\<noteq> length i2;\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i1 =\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i2\\<rbrakk>\n    \\<Longrightarrow> take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                       i2 =\n                      take (min (length i2 - Suc 0) (length i1 - Suc 0)) i1\n 3. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     length i1 \\<noteq> length i2;\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i1 \\<noteq>\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i2;\n     take (min (length i2 - Suc 0) (length i1 - Suc 0)) i2 =\n     take (min (length i2 - Suc 0) (length i1 - Suc 0)) i1\\<rbrakk>\n    \\<Longrightarrow> False", "apply(simp_all add: iface_name_is_wildcard_alt)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<lbrakk>i1 \\<noteq> [] \\<and> last i1 = CHR ''+'';\n     i2 \\<noteq> [] \\<and> last i2 = CHR ''+''; length i1 = length i2;\n     take (length i2 - Suc 0) i1 = take (length i2 - Suc 0) i2\\<rbrakk>\n    \\<Longrightarrow> i2 = i1\n 2. \\<lbrakk>i1 \\<noteq> [] \\<and> last i1 = CHR ''+'';\n     i2 \\<noteq> [] \\<and> last i2 = CHR ''+'';\n     length i1 \\<noteq> length i2;\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i1 =\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i2\\<rbrakk>\n    \\<Longrightarrow> take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                       i2 =\n                      take (min (length i2 - Suc 0) (length i1 - Suc 0)) i1\n 3. \\<lbrakk>i1 \\<noteq> [] \\<and> last i1 = CHR ''+'';\n     i2 \\<noteq> [] \\<and> last i2 = CHR ''+'';\n     length i1 \\<noteq> length i2;\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i1 \\<noteq>\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i2;\n     take (min (length i2 - Suc 0) (length i1 - Suc 0)) i2 =\n     take (min (length i2 - Suc 0) (length i1 - Suc 0)) i1\\<rbrakk>\n    \\<Longrightarrow> False", "apply (metis One_nat_def append_butlast_last_id butlast_conv_take)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>i1 \\<noteq> [] \\<and> last i1 = CHR ''+'';\n     i2 \\<noteq> [] \\<and> last i2 = CHR ''+'';\n     length i1 \\<noteq> length i2;\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i1 =\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i2\\<rbrakk>\n    \\<Longrightarrow> take (min (length i2 - Suc 0) (length i1 - Suc 0))\n                       i2 =\n                      take (min (length i2 - Suc 0) (length i1 - Suc 0)) i1\n 2. \\<lbrakk>i1 \\<noteq> [] \\<and> last i1 = CHR ''+'';\n     i2 \\<noteq> [] \\<and> last i2 = CHR ''+'';\n     length i1 \\<noteq> length i2;\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i1 \\<noteq>\n     take (min (length i1 - Suc 0) (length i2 - Suc 0)) i2;\n     take (min (length i2 - Suc 0) (length i1 - Suc 0)) i2 =\n     take (min (length i2 - Suc 0) (length i1 - Suc 0)) i1\\<rbrakk>\n    \\<Longrightarrow> False", "by (metis min.commute)+"], ["", "private"], ["", "lemma internal_iface_name_wildcard_longest_refl: \"internal_iface_name_wildcard_longest i i = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_wildcard_longest i i = Some i", "by(simp add: internal_iface_name_wildcard_longest_def)"], ["", "private"], ["", "lemma internal_iface_name_wildcard_longest_correct:\n      \"iface_name_is_wildcard i1 \\<Longrightarrow> iface_name_is_wildcard i2 \\<Longrightarrow> \n       match_iface (Iface i1) p_i \\<and> match_iface (Iface i2) p_i \\<longleftrightarrow>\n       (case internal_iface_name_wildcard_longest i1 i2 of None \\<Rightarrow> False | Some x \\<Rightarrow> match_iface (Iface x) p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "assume assm1: \"iface_name_is_wildcard i1\"\n         and assm2: \"iface_name_is_wildcard i2\""], ["proof (state)\nthis:\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "{"], ["proof (state)\nthis:\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "assume assm3: \"internal_iface_name_wildcard_longest i1 i2 = None\""], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = None\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "have \"\\<not> (internal_iface_name_match i1 p_i \\<and> internal_iface_name_match i2 p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "from match_iface_case_wildcard_prefix[OF assm1]"], ["proof (chain)\npicking this:\n  match_iface (Iface i1) ?p_i = (butlast i1 = take (length i1 - 1) ?p_i)", "have 1:\n            \"internal_iface_name_match i1 p_i = (take (length i1 - 1) i1 = take (length i1 - 1) p_i)\""], ["proof (prove)\nusing this:\n  match_iface (Iface i1) ?p_i = (butlast i1 = take (length i1 - 1) ?p_i)\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i1 p_i =\n    (take (length i1 - 1) i1 = take (length i1 - 1) p_i)", "by(simp add: butlast_conv_take)"], ["proof (state)\nthis:\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) i1 = take (length i1 - 1) p_i)\n\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "from match_iface_case_wildcard_prefix[OF assm2]"], ["proof (chain)\npicking this:\n  match_iface (Iface i2) ?p_i = (butlast i2 = take (length i2 - 1) ?p_i)", "have 2:\n            \"internal_iface_name_match i2 p_i = (take (length i2 - 1) i2 = take (length i2 - 1) p_i)\""], ["proof (prove)\nusing this:\n  match_iface (Iface i2) ?p_i = (butlast i2 = take (length i2 - 1) ?p_i)\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i2 p_i =\n    (take (length i2 - 1) i2 = take (length i2 - 1) p_i)", "by(simp add: butlast_conv_take)"], ["proof (state)\nthis:\n  internal_iface_name_match i2 p_i =\n  (take (length i2 - 1) i2 = take (length i2 - 1) p_i)\n\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "from assm3"], ["proof (chain)\npicking this:\n  internal_iface_name_wildcard_longest i1 i2 = None", "have 3: \"take (min (length i1 - 1) (length i2 - 1)) i1 \\<noteq> take (min (length i1 - 1) (length i2 - 1)) i2\""], ["proof (prove)\nusing this:\n  internal_iface_name_wildcard_longest i1 i2 = None\n\ngoal (1 subgoal):\n 1. take (min (length i1 - 1) (length i2 - 1)) i1 \\<noteq>\n    take (min (length i1 - 1) (length i2 - 1)) i2", "by(simp add: internal_iface_name_wildcard_longest_def split: if_split_asm)"], ["proof (state)\nthis:\n  take (min (length i1 - 1) (length i2 - 1)) i1 \\<noteq>\n  take (min (length i1 - 1) (length i2 - 1)) i2\n\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "from 3"], ["proof (chain)\npicking this:\n  take (min (length i1 - 1) (length i2 - 1)) i1 \\<noteq>\n  take (min (length i1 - 1) (length i2 - 1)) i2", "show ?thesis"], ["proof (prove)\nusing this:\n  take (min (length i1 - 1) (length i2 - 1)) i1 \\<noteq>\n  take (min (length i1 - 1) (length i2 - 1)) i2\n\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "using 1 2 min.commute take_take"], ["proof (prove)\nusing this:\n  take (min (length i1 - 1) (length i2 - 1)) i1 \\<noteq>\n  take (min (length i1 - 1) (length i2 - 1)) i2\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) i1 = take (length i1 - 1) p_i)\n  internal_iface_name_match i2 p_i =\n  (take (length i2 - 1) i2 = take (length i2 - 1) p_i)\n  min ?a ?b = min ?b ?a\n  take ?n (take ?m ?xs) = take (min ?n ?m) ?xs\n\ngoal (1 subgoal):\n 1. \\<not> (internal_iface_name_match i1 p_i \\<and>\n            internal_iface_name_match i2 p_i)", "by metis"], ["proof (state)\nthis:\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "}"], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = None \\<Longrightarrow>\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "note internal_iface_name_wildcard_longest_correct_None=this"], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = None \\<Longrightarrow>\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "{"], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = None \\<Longrightarrow>\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "fix X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "assume assm3: \"internal_iface_name_wildcard_longest i1 i2 = Some X\""], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = Some X\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "have \"(internal_iface_name_match i1 p_i \\<and> internal_iface_name_match i2 p_i) \\<longleftrightarrow> internal_iface_name_match X p_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from assm3"], ["proof (chain)\npicking this:\n  internal_iface_name_wildcard_longest i1 i2 = Some X", "have assm3': \"take (min (length i1 - 1) (length i2 - 1)) i1 = take (min (length i1 - 1) (length i2 - 1)) i2\""], ["proof (prove)\nusing this:\n  internal_iface_name_wildcard_longest i1 i2 = Some X\n\ngoal (1 subgoal):\n 1. take (min (length i1 - 1) (length i2 - 1)) i1 =\n    take (min (length i1 - 1) (length i2 - 1)) i2", "unfolding internal_iface_name_wildcard_longest_def"], ["proof (prove)\nusing this:\n  (if take (min (length i1 - 1) (length i2 - 1)) i1 =\n      take (min (length i1 - 1) (length i2 - 1)) i2\n   then Some (if length i1 \\<le> length i2 then i2 else i1) else None) =\n  Some X\n\ngoal (1 subgoal):\n 1. take (min (length i1 - 1) (length i2 - 1)) i1 =\n    take (min (length i1 - 1) (length i2 - 1)) i2", "by(simp split: if_split_asm)"], ["proof (state)\nthis:\n  take (min (length i1 - 1) (length i2 - 1)) i1 =\n  take (min (length i1 - 1) (length i2 - 1)) i2\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "{"], ["proof (state)\nthis:\n  take (min (length i1 - 1) (length i2 - 1)) i1 =\n  take (min (length i1 - 1) (length i2 - 1)) i2\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "fix i1 i2"], ["proof (state)\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "assume iw1: \"iface_name_is_wildcard i1\" and iw2: \"iface_name_is_wildcard i2\" and len: \"length i1 \\<le> length i2\" and\n                   take_i1i2: \"take (length i1 - 1) i1 = take (length i1 - 1) i2\""], ["proof (state)\nthis:\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2\n  length i1 \\<le> length i2\n  take (length i1 - 1) i1 = take (length i1 - 1) i2\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from len"], ["proof (chain)\npicking this:\n  length i1 \\<le> length i2", "have len': \"length i1 - 1 \\<le> length i2 - 1\""], ["proof (prove)\nusing this:\n  length i1 \\<le> length i2\n\ngoal (1 subgoal):\n 1. length i1 - 1 \\<le> length i2 - 1", "by fastforce"], ["proof (state)\nthis:\n  length i1 - 1 \\<le> length i2 - 1\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "{"], ["proof (state)\nthis:\n  length i1 - 1 \\<le> length i2 - 1\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "fix x::string"], ["proof (state)\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from len'"], ["proof (chain)\npicking this:\n  length i1 - 1 \\<le> length i2 - 1", "have \"take (length i1 - 1) x = take (length i1 - 1) (take (length i2 - 1) x)\""], ["proof (prove)\nusing this:\n  length i1 - 1 \\<le> length i2 - 1\n\ngoal (1 subgoal):\n 1. take (length i1 - 1) x = take (length i1 - 1) (take (length i2 - 1) x)", "by(simp add: min_def)"], ["proof (state)\nthis:\n  take (length i1 - 1) x = take (length i1 - 1) (take (length i2 - 1) x)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "}"], ["proof (state)\nthis:\n  take (length i1 - 1) ?x2 = take (length i1 - 1) (take (length i2 - 1) ?x2)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "note takei1=this"], ["proof (state)\nthis:\n  take (length i1 - 1) ?x2 = take (length i1 - 1) (take (length i2 - 1) ?x2)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "{"], ["proof (state)\nthis:\n  take (length i1 - 1) ?x2 = take (length i1 - 1) (take (length i2 - 1) ?x2)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "fix m::nat and n::nat and a::string and b c"], ["proof (state)\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "have \"m \\<le> n \\<Longrightarrow> take n a = take n b \\<Longrightarrow> take m a = take m c \\<Longrightarrow> take m c = take m b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n; take n a = take n b; take m a = take m c\\<rbrakk>\n    \\<Longrightarrow> take m c = take m b", "by (metis min_absorb1 take_take)"], ["proof (state)\nthis:\n  \\<lbrakk>m \\<le> n; take n a = take n b; take m a = take m c\\<rbrakk>\n  \\<Longrightarrow> take m c = take m b\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "}"], ["proof (state)\nthis:\n  \\<lbrakk>?m2 \\<le> ?n2; take ?n2 ?a2 = take ?n2 ?b2;\n   take ?m2 ?a2 = take ?m2 ?c2\\<rbrakk>\n  \\<Longrightarrow> take ?m2 ?c2 = take ?m2 ?b2\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "note takesmaller=this"], ["proof (state)\nthis:\n  \\<lbrakk>?m2 \\<le> ?n2; take ?n2 ?a2 = take ?n2 ?b2;\n   take ?m2 ?a2 = take ?m2 ?c2\\<rbrakk>\n  \\<Longrightarrow> take ?m2 ?c2 = take ?m2 ?b2\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from match_iface_case_wildcard_prefix[OF iw1, simplified]"], ["proof (chain)\npicking this:\n  internal_iface_name_match i1 ?p_i =\n  (butlast i1 = take (length i1 - Suc 0) ?p_i)", "have 1:\n                \"internal_iface_name_match i1 p_i \\<longleftrightarrow> take (length i1 - 1) i1 = take (length i1 - 1) p_i\""], ["proof (prove)\nusing this:\n  internal_iface_name_match i1 ?p_i =\n  (butlast i1 = take (length i1 - Suc 0) ?p_i)\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i1 p_i =\n    (take (length i1 - 1) i1 = take (length i1 - 1) p_i)", "by(simp add: butlast_conv_take)"], ["proof (state)\nthis:\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) i1 = take (length i1 - 1) p_i)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "also"], ["proof (state)\nthis:\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) i1 = take (length i1 - 1) p_i)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "have \"\\<dots> \\<longleftrightarrow> take (length i1 - 1) (take (length i2 - 1) i1) = take (length i1 - 1) (take (length i2 - 1) p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (take (length i1 - 1) i1 = take (length i1 - 1) p_i) =\n    (take (length i1 - 1) (take (length i2 - 1) i1) =\n     take (length i1 - 1) (take (length i2 - 1) p_i))", "using takei1"], ["proof (prove)\nusing this:\n  take (length i1 - 1) ?x2 = take (length i1 - 1) (take (length i2 - 1) ?x2)\n\ngoal (1 subgoal):\n 1. (take (length i1 - 1) i1 = take (length i1 - 1) p_i) =\n    (take (length i1 - 1) (take (length i2 - 1) i1) =\n     take (length i1 - 1) (take (length i2 - 1) p_i))", "by simp"], ["proof (state)\nthis:\n  (take (length i1 - 1) i1 = take (length i1 - 1) p_i) =\n  (take (length i1 - 1) (take (length i2 - 1) i1) =\n   take (length i1 - 1) (take (length i2 - 1) p_i))\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "finally"], ["proof (chain)\npicking this:\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) (take (length i2 - 1) i1) =\n   take (length i1 - 1) (take (length i2 - 1) p_i))", "have  \"internal_iface_name_match i1 p_i = (take (length i1 - 1) (take (length i2 - 1) i1) = take (length i1 - 1) (take (length i2 - 1) p_i))\""], ["proof (prove)\nusing this:\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) (take (length i2 - 1) i1) =\n   take (length i1 - 1) (take (length i2 - 1) p_i))\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i1 p_i =\n    (take (length i1 - 1) (take (length i2 - 1) i1) =\n     take (length i1 - 1) (take (length i2 - 1) p_i))", "."], ["proof (state)\nthis:\n  internal_iface_name_match i1 p_i =\n  (take (length i1 - 1) (take (length i2 - 1) i1) =\n   take (length i1 - 1) (take (length i2 - 1) p_i))\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from match_iface_case_wildcard_prefix[OF iw2, simplified]"], ["proof (chain)\npicking this:\n  internal_iface_name_match i2 ?p_i =\n  (butlast i2 = take (length i2 - Suc 0) ?p_i)", "have 2:\n                \"internal_iface_name_match i2 p_i \\<longleftrightarrow> take (length i2 - 1) i2 = take (length i2 - 1) p_i\""], ["proof (prove)\nusing this:\n  internal_iface_name_match i2 ?p_i =\n  (butlast i2 = take (length i2 - Suc 0) ?p_i)\n\ngoal (1 subgoal):\n 1. internal_iface_name_match i2 p_i =\n    (take (length i2 - 1) i2 = take (length i2 - 1) p_i)", "by(simp add: butlast_conv_take)"], ["proof (state)\nthis:\n  internal_iface_name_match i2 p_i =\n  (take (length i2 - 1) i2 = take (length i2 - 1) p_i)\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "have \"internal_iface_name_match i2 p_i \\<Longrightarrow> internal_iface_name_match i1 p_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_match i2 p_i \\<Longrightarrow>\n    internal_iface_name_match i1 p_i", "unfolding 1 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i1 - 1) i1 = take (length i1 - 1) p_i", "apply(rule takesmaller[of \"(length i1 - 1)\" \"(length i2 - 1)\" i2 p_i])"], ["proof (prove)\ngoal (3 subgoals):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    length i1 - 1 \\<le> length i2 - 1\n 2. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i2 - 1) i2 = take (length i2 - 1) p_i\n 3. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i1 - 1) i2 = take (length i1 - 1) i1", "using len'"], ["proof (prove)\nusing this:\n  length i1 - 1 \\<le> length i2 - 1\n\ngoal (3 subgoals):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    length i1 - 1 \\<le> length i2 - 1\n 2. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i2 - 1) i2 = take (length i2 - 1) p_i\n 3. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i1 - 1) i2 = take (length i1 - 1) i1", "apply (simp; fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i2 - 1) i2 = take (length i2 - 1) p_i\n 2. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i1 - 1) i2 = take (length i1 - 1) i1", "apply (simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i1 - 1) i2 = take (length i1 - 1) i1", "using take_i1i2"], ["proof (prove)\nusing this:\n  take (length i1 - 1) i1 = take (length i1 - 1) i2\n\ngoal (1 subgoal):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) p_i \\<Longrightarrow>\n    take (length i1 - 1) i2 = take (length i1 - 1) i1", "by simp"], ["proof (state)\nthis:\n  internal_iface_name_match i2 p_i \\<Longrightarrow>\n  internal_iface_name_match i1 p_i\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "}"], ["proof (state)\nthis:\n  \\<lbrakk>iface_name_is_wildcard ?i1a2; iface_name_is_wildcard ?i2a2;\n   length ?i1a2 \\<le> length ?i2a2;\n   take (length ?i1a2 - 1) ?i1a2 = take (length ?i1a2 - 1) ?i2a2;\n   internal_iface_name_match ?i2a2 p_i\\<rbrakk>\n  \\<Longrightarrow> internal_iface_name_match ?i1a2 p_i\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "note longer_iface_imp_shorter=this"], ["proof (state)\nthis:\n  \\<lbrakk>iface_name_is_wildcard ?i1a2; iface_name_is_wildcard ?i2a2;\n   length ?i1a2 \\<le> length ?i2a2;\n   take (length ?i1a2 - 1) ?i1a2 = take (length ?i1a2 - 1) ?i2a2;\n   internal_iface_name_match ?i2a2 p_i\\<rbrakk>\n  \\<Longrightarrow> internal_iface_name_match ?i1a2 p_i\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "proof(cases \"length i1 \\<le> length i2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i\n 2. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "case True"], ["proof (state)\nthis:\n  length i1 \\<le> length i2\n\ngoal (2 subgoals):\n 1. length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i\n 2. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "with assm3"], ["proof (chain)\npicking this:\n  internal_iface_name_wildcard_longest i1 i2 = Some X\n  length i1 \\<le> length i2", "have \"X = i2\""], ["proof (prove)\nusing this:\n  internal_iface_name_wildcard_longest i1 i2 = Some X\n  length i1 \\<le> length i2\n\ngoal (1 subgoal):\n 1. X = i2", "unfolding internal_iface_name_wildcard_longest_def"], ["proof (prove)\nusing this:\n  (if take (min (length i1 - 1) (length i2 - 1)) i1 =\n      take (min (length i1 - 1) (length i2 - 1)) i2\n   then Some (if length i1 \\<le> length i2 then i2 else i1) else None) =\n  Some X\n  length i1 \\<le> length i2\n\ngoal (1 subgoal):\n 1. X = i2", "by(simp split: if_split_asm)"], ["proof (state)\nthis:\n  X = i2\n\ngoal (2 subgoals):\n 1. length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i\n 2. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from True assm3'"], ["proof (chain)\npicking this:\n  length i1 \\<le> length i2\n  take (min (length i1 - 1) (length i2 - 1)) i1 =\n  take (min (length i1 - 1) (length i2 - 1)) i2", "have take_i1i2: \"take (length i1 - 1) i1 = take (length i1 - 1) i2\""], ["proof (prove)\nusing this:\n  length i1 \\<le> length i2\n  take (min (length i1 - 1) (length i2 - 1)) i1 =\n  take (min (length i1 - 1) (length i2 - 1)) i2\n\ngoal (1 subgoal):\n 1. take (length i1 - 1) i1 = take (length i1 - 1) i2", "by linarith"], ["proof (state)\nthis:\n  take (length i1 - 1) i1 = take (length i1 - 1) i2\n\ngoal (2 subgoals):\n 1. length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i\n 2. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from longer_iface_imp_shorter[OF assm1 assm2 True take_i1i2] \\<open>X = i2\\<close>"], ["proof (chain)\npicking this:\n  internal_iface_name_match i2 p_i \\<Longrightarrow>\n  internal_iface_name_match i1 p_i\n  X = i2", "show \"(internal_iface_name_match i1 p_i \\<and> internal_iface_name_match i2 p_i) \\<longleftrightarrow> internal_iface_name_match X p_i\""], ["proof (prove)\nusing this:\n  internal_iface_name_match i2 p_i \\<Longrightarrow>\n  internal_iface_name_match i1 p_i\n  X = i2\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "by fastforce"], ["proof (state)\nthis:\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match X p_i\n\ngoal (1 subgoal):\n 1. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "case False"], ["proof (state)\nthis:\n  \\<not> length i1 \\<le> length i2\n\ngoal (1 subgoal):\n 1. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "with assm3"], ["proof (chain)\npicking this:\n  internal_iface_name_wildcard_longest i1 i2 = Some X\n  \\<not> length i1 \\<le> length i2", "have \"X = i1\""], ["proof (prove)\nusing this:\n  internal_iface_name_wildcard_longest i1 i2 = Some X\n  \\<not> length i1 \\<le> length i2\n\ngoal (1 subgoal):\n 1. X = i1", "unfolding internal_iface_name_wildcard_longest_def"], ["proof (prove)\nusing this:\n  (if take (min (length i1 - 1) (length i2 - 1)) i1 =\n      take (min (length i1 - 1) (length i2 - 1)) i2\n   then Some (if length i1 \\<le> length i2 then i2 else i1) else None) =\n  Some X\n  \\<not> length i1 \\<le> length i2\n\ngoal (1 subgoal):\n 1. X = i1", "by(simp split: if_split_asm)"], ["proof (state)\nthis:\n  X = i1\n\ngoal (1 subgoal):\n 1. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from False assm3'"], ["proof (chain)\npicking this:\n  \\<not> length i1 \\<le> length i2\n  take (min (length i1 - 1) (length i2 - 1)) i1 =\n  take (min (length i1 - 1) (length i2 - 1)) i2", "have take_i1i2: \"take (length i2 - 1) i2 = take (length i2 - 1) i1\""], ["proof (prove)\nusing this:\n  \\<not> length i1 \\<le> length i2\n  take (min (length i1 - 1) (length i2 - 1)) i1 =\n  take (min (length i1 - 1) (length i2 - 1)) i2\n\ngoal (1 subgoal):\n 1. take (length i2 - 1) i2 = take (length i2 - 1) i1", "by (metis min_def min_diff)"], ["proof (state)\nthis:\n  take (length i2 - 1) i2 = take (length i2 - 1) i1\n\ngoal (1 subgoal):\n 1. \\<not> length i1 \\<le> length i2 \\<Longrightarrow>\n    (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "from longer_iface_imp_shorter[OF assm2 assm1 _ take_i1i2] False \\<open>X = i1\\<close>"], ["proof (chain)\npicking this:\n  \\<lbrakk>length i2 \\<le> length i1;\n   internal_iface_name_match i1 p_i\\<rbrakk>\n  \\<Longrightarrow> internal_iface_name_match i2 p_i\n  \\<not> length i1 \\<le> length i2\n  X = i1", "show \"(internal_iface_name_match i1 p_i \\<and> internal_iface_name_match i2 p_i) \\<longleftrightarrow> internal_iface_name_match X p_i\""], ["proof (prove)\nusing this:\n  \\<lbrakk>length i2 \\<le> length i1;\n   internal_iface_name_match i1 p_i\\<rbrakk>\n  \\<Longrightarrow> internal_iface_name_match i2 p_i\n  \\<not> length i1 \\<le> length i2\n  X = i1\n\ngoal (1 subgoal):\n 1. (internal_iface_name_match i1 p_i \\<and>\n     internal_iface_name_match i2 p_i) =\n    internal_iface_name_match X p_i", "by auto"], ["proof (state)\nthis:\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match X p_i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match X p_i\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match X p_i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "}"], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = Some ?X2 \\<Longrightarrow>\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match ?X2 p_i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "note internal_iface_name_wildcard_longest_correct_Some=this"], ["proof (state)\nthis:\n  internal_iface_name_wildcard_longest i1 i2 = Some ?X2 \\<Longrightarrow>\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match ?X2 p_i\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (match_iface (Iface i1) p_i \\<and>\n                       match_iface (Iface i2) p_i) =\n                      (case internal_iface_name_wildcard_longest i1 i2 of\n                       None \\<Rightarrow> False\n                       | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "from internal_iface_name_wildcard_longest_correct_None internal_iface_name_wildcard_longest_correct_Some"], ["proof (chain)\npicking this:\n  internal_iface_name_wildcard_longest i1 i2 = None \\<Longrightarrow>\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n  internal_iface_name_wildcard_longest i1 i2 = Some ?X2 \\<Longrightarrow>\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match ?X2 p_i", "show ?thesis"], ["proof (prove)\nusing this:\n  internal_iface_name_wildcard_longest i1 i2 = None \\<Longrightarrow>\n  \\<not> (internal_iface_name_match i1 p_i \\<and>\n          internal_iface_name_match i2 p_i)\n  internal_iface_name_wildcard_longest i1 i2 = Some ?X2 \\<Longrightarrow>\n  (internal_iface_name_match i1 p_i \\<and>\n   internal_iface_name_match i2 p_i) =\n  internal_iface_name_match ?X2 p_i\n\ngoal (1 subgoal):\n 1. (match_iface (Iface i1) p_i \\<and> match_iface (Iface i2) p_i) =\n    (case internal_iface_name_wildcard_longest i1 i2 of\n     None \\<Rightarrow> False\n     | Some x \\<Rightarrow> match_iface (Iface x) p_i)", "by(simp split:option.split)"], ["proof (state)\nthis:\n  (match_iface (Iface i1) p_i \\<and> match_iface (Iface i2) p_i) =\n  (case internal_iface_name_wildcard_longest i1 i2 of\n   None \\<Rightarrow> False\n   | Some x \\<Rightarrow> match_iface (Iface x) p_i)\n\ngoal:\nNo subgoals!", "qed"], ["", "fun iface_conjunct :: \"iface \\<Rightarrow> iface \\<Rightarrow> iface option\" where\n      \"iface_conjunct (Iface i1) (Iface i2) = (case (iface_name_is_wildcard i1, iface_name_is_wildcard i2) of\n        (True,  True) \\<Rightarrow> map_option Iface  (internal_iface_name_wildcard_longest i1 i2) |\n        (True,  False) \\<Rightarrow> (if match_iface (Iface i1) i2 then Some (Iface i2) else None) |\n        (False, True) \\<Rightarrow> (if match_iface (Iface i2) i1 then Some (Iface i1) else None) |\n        (False, False) \\<Rightarrow> (if i1 = i2 then Some (Iface i1) else None))\""], ["", "lemma iface_conjunct_Some: \"iface_conjunct i1 i2 = Some x \\<Longrightarrow> \n          match_iface x p_i \\<longleftrightarrow> match_iface i1 p_i \\<and> match_iface i2 p_i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_conjunct i1 i2 = Some x \\<Longrightarrow>\n    match_iface x p_i = (match_iface i1 p_i \\<and> match_iface i2 p_i)", "apply(cases i1, cases i2, rename_tac i1name i2name)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>iface_conjunct i1 i2 = Some x; i1 = Iface i1name;\n        i2 = Iface i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (match_iface i1 p_i \\<and> match_iface i2 p_i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "apply(case_tac \"iface_name_is_wildcard i1name\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        iface_name_is_wildcard i1name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 2. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "apply(case_tac [!] \"iface_name_is_wildcard i2name\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 2. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 3. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 4. \\<And>i1name i2name.\n       \\<lbrakk>(case iface_name_is_wildcard i1name of\n                 True \\<Rightarrow>\n                   case iface_name_is_wildcard i2name of\n                   True \\<Rightarrow>\n                     map_option Iface\n                      (internal_iface_name_wildcard_longest i1name i2name)\n                   | False \\<Rightarrow>\n                       if match_iface (Iface i1name) i2name\n                       then Some (Iface i2name) else None\n                 | False \\<Rightarrow>\n                     case iface_name_is_wildcard i2name of\n                     True \\<Rightarrow>\n                       if match_iface (Iface i2name) i1name\n                       then Some (Iface i1name) else None\n                     | False \\<Rightarrow>\n                         if i1name = i2name then Some (Iface i1name)\n                         else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "apply(simp_all)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>\\<exists>z.\n                   internal_iface_name_wildcard_longest i1name i2name =\n                   Some z \\<and>\n                   Iface z = x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 2. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i1name i2name\n                 then Some (Iface i2name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 3. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i2name i1name\n                 then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 4. \\<And>i1name i2name.\n       \\<lbrakk>(if i1name = i2name then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "using internal_iface_name_wildcard_longest_correct"], ["proof (prove)\nusing this:\n  \\<lbrakk>iface_name_is_wildcard ?i1.0;\n   iface_name_is_wildcard ?i2.0\\<rbrakk>\n  \\<Longrightarrow> (match_iface (Iface ?i1.0) ?p_i \\<and>\n                     match_iface (Iface ?i2.0) ?p_i) =\n                    (case internal_iface_name_wildcard_longest ?i1.0\n                           ?i2.0 of\n                     None \\<Rightarrow> False\n                     | Some x \\<Rightarrow> match_iface (Iface x) ?p_i)\n\ngoal (4 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>\\<exists>z.\n                   internal_iface_name_wildcard_longest i1name i2name =\n                   Some z \\<and>\n                   Iface z = x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 2. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i1name i2name\n                 then Some (Iface i2name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 3. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i2name i1name\n                 then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 4. \\<And>i1name i2name.\n       \\<lbrakk>(if i1name = i2name then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "apply auto[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i1name i2name\n                 then Some (Iface i2name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name; iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 2. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i2name i1name\n                 then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 3. \\<And>i1name i2name.\n       \\<lbrakk>(if i1name = i2name then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "apply (metis match_iface.simps match_iface_case_nowildcard option.distinct(1) option.sel)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>(if internal_iface_name_match i2name i1name\n                 then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)\n 2. \\<And>i1name i2name.\n       \\<lbrakk>(if i1name = i2name then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "apply (metis match_iface.simps match_iface_case_nowildcard option.distinct(1) option.sel)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>(if i1name = i2name then Some (Iface i1name) else None) =\n                Some x;\n        i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name\\<rbrakk>\n       \\<Longrightarrow> match_iface x p_i =\n                         (internal_iface_name_match i1name p_i \\<and>\n                          internal_iface_name_match i2name p_i)", "by (metis match_iface.simps option.distinct(1) option.inject)"], ["", "lemma iface_conjunct_None: \"iface_conjunct i1 i2 = None \\<Longrightarrow> \\<not> (match_iface i1 p_i \\<and> match_iface i2 p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_conjunct i1 i2 = None \\<Longrightarrow>\n    \\<not> (match_iface i1 p_i \\<and> match_iface i2 p_i)", "apply(cases i1, cases i2, rename_tac i1name i2name)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>iface_conjunct i1 i2 = None; i1 = Iface i1name;\n        i2 = Iface i2name\\<rbrakk>\n       \\<Longrightarrow> \\<not> (match_iface i1 p_i \\<and>\n                                 match_iface i2 p_i)", "apply(simp split: bool.split_asm if_split_asm)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        iface_name_is_wildcard i1name; iface_name_is_wildcard i2name;\n        internal_iface_name_wildcard_longest i1name i2name = None\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 2. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        iface_name_is_wildcard i1name; \\<not> iface_name_is_wildcard i2name;\n        \\<not> internal_iface_name_match i1name i2name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 3. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name; iface_name_is_wildcard i2name;\n        \\<not> internal_iface_name_match i2name i1name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 4. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name;\n        i1name \\<noteq> i2name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i", "using internal_iface_name_wildcard_longest_correct"], ["proof (prove)\nusing this:\n  \\<lbrakk>iface_name_is_wildcard ?i1.0;\n   iface_name_is_wildcard ?i2.0\\<rbrakk>\n  \\<Longrightarrow> (match_iface (Iface ?i1.0) ?p_i \\<and>\n                     match_iface (Iface ?i2.0) ?p_i) =\n                    (case internal_iface_name_wildcard_longest ?i1.0\n                           ?i2.0 of\n                     None \\<Rightarrow> False\n                     | Some x \\<Rightarrow> match_iface (Iface x) ?p_i)\n\ngoal (4 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        iface_name_is_wildcard i1name; iface_name_is_wildcard i2name;\n        internal_iface_name_wildcard_longest i1name i2name = None\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 2. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        iface_name_is_wildcard i1name; \\<not> iface_name_is_wildcard i2name;\n        \\<not> internal_iface_name_match i1name i2name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 3. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name; iface_name_is_wildcard i2name;\n        \\<not> internal_iface_name_match i2name i1name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 4. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name;\n        i1name \\<noteq> i2name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i", "apply fastforce"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        iface_name_is_wildcard i1name; \\<not> iface_name_is_wildcard i2name;\n        \\<not> internal_iface_name_match i1name i2name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 2. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name; iface_name_is_wildcard i2name;\n        \\<not> internal_iface_name_match i2name i1name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i\n 3. \\<And>i1name i2name.\n       \\<lbrakk>i1 = Iface i1name; i2 = Iface i2name;\n        \\<not> iface_name_is_wildcard i1name;\n        \\<not> iface_name_is_wildcard i2name;\n        i1name \\<noteq> i2name\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i1name\n                          p_i \\<longrightarrow>\n                         \\<not> internal_iface_name_match i2name p_i", "apply (metis match_iface.simps match_iface_case_nowildcard)+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma iface_conjunct: \"match_iface i1 p_i \\<and> match_iface i2 p_i \\<longleftrightarrow>\n           (case iface_conjunct i1 i2 of None \\<Rightarrow> False | Some x \\<Rightarrow> match_iface x p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (match_iface i1 p_i \\<and> match_iface i2 p_i) =\n    (case iface_conjunct i1 i2 of None \\<Rightarrow> False\n     | Some x \\<Rightarrow> match_iface x p_i)", "apply(simp split: option.split)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (iface_conjunct i1 i2 = None \\<longrightarrow>\n     match_iface i1 p_i \\<longrightarrow> \\<not> match_iface i2 p_i) \\<and>\n    (\\<forall>x2.\n        iface_conjunct i1 i2 = Some x2 \\<longrightarrow>\n        (match_iface i1 p_i \\<and> match_iface i2 p_i) = match_iface x2 p_i)", "by(blast dest: iface_conjunct_Some iface_conjunct_None)"], ["", "lemma match_iface_refl: \"match_iface (Iface x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_iface (Iface x) x", "by (simp add: internal_iface_name_match_refl)"], ["", "lemma match_iface_eqI: assumes \"x = Iface y\" shows \"match_iface x y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. match_iface x y", "unfolding assms"], ["proof (prove)\ngoal (1 subgoal):\n 1. match_iface (Iface y) y", "using match_iface_refl"], ["proof (prove)\nusing this:\n  match_iface (Iface ?x) ?x\n\ngoal (1 subgoal):\n 1. match_iface (Iface y) y", "."], ["", "lemma iface_conjunct_ifaceAny: \"iface_conjunct ifaceAny i = Some i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_conjunct ifaceAny i = Some i", "apply(simp add: ifaceAny_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_conjunct (Iface ''+'') i = Some i", "apply(case_tac i, rename_tac iname)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iname.\n       i = Iface iname \\<Longrightarrow>\n       iface_conjunct (Iface ''+'') i = Some i", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iname.\n       i = Iface iname \\<Longrightarrow>\n       (internal_iface_name_match ''+'' iname \\<longrightarrow>\n        (case iface_name_is_wildcard iname of\n         True \\<Rightarrow>\n           map_option Iface\n            (internal_iface_name_wildcard_longest ''+'' iname)\n         | False \\<Rightarrow> Some (Iface iname)) =\n        Some (Iface iname)) \\<and>\n       (\\<not> internal_iface_name_match ''+'' iname \\<longrightarrow>\n        (case iface_name_is_wildcard iname of\n         True \\<Rightarrow>\n           map_option Iface\n            (internal_iface_name_wildcard_longest ''+'' iname)\n         | False \\<Rightarrow> None) =\n        Some (Iface iname))", "apply(case_tac \"iface_name_is_wildcard iname\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>iname.\n       \\<lbrakk>i = Iface iname; iface_name_is_wildcard iname\\<rbrakk>\n       \\<Longrightarrow> (internal_iface_name_match ''+''\n                           iname \\<longrightarrow>\n                          (case iface_name_is_wildcard iname of\n                           True \\<Rightarrow>\n                             map_option Iface\n                              (internal_iface_name_wildcard_longest ''+''\n                                iname)\n                           | False \\<Rightarrow> Some (Iface iname)) =\n                          Some (Iface iname)) \\<and>\n                         (\\<not> internal_iface_name_match ''+''\n                                  iname \\<longrightarrow>\n                          (case iface_name_is_wildcard iname of\n                           True \\<Rightarrow>\n                             map_option Iface\n                              (internal_iface_name_wildcard_longest ''+''\n                                iname)\n                           | False \\<Rightarrow> None) =\n                          Some (Iface iname))\n 2. \\<And>iname.\n       \\<lbrakk>i = Iface iname;\n        \\<not> iface_name_is_wildcard iname\\<rbrakk>\n       \\<Longrightarrow> (internal_iface_name_match ''+''\n                           iname \\<longrightarrow>\n                          (case iface_name_is_wildcard iname of\n                           True \\<Rightarrow>\n                             map_option Iface\n                              (internal_iface_name_wildcard_longest ''+''\n                                iname)\n                           | False \\<Rightarrow> Some (Iface iname)) =\n                          Some (Iface iname)) \\<and>\n                         (\\<not> internal_iface_name_match ''+''\n                                  iname \\<longrightarrow>\n                          (case iface_name_is_wildcard iname of\n                           True \\<Rightarrow>\n                             map_option Iface\n                              (internal_iface_name_wildcard_longest ''+''\n                                iname)\n                           | False \\<Rightarrow> None) =\n                          Some (Iface iname))", "apply(simp add: internal_iface_name_wildcard_longest_def iface_name_is_wildcard_alt Suc_leI; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iname.\n       \\<lbrakk>i = Iface iname;\n        \\<not> iface_name_is_wildcard iname\\<rbrakk>\n       \\<Longrightarrow> (internal_iface_name_match ''+''\n                           iname \\<longrightarrow>\n                          (case iface_name_is_wildcard iname of\n                           True \\<Rightarrow>\n                             map_option Iface\n                              (internal_iface_name_wildcard_longest ''+''\n                                iname)\n                           | False \\<Rightarrow> Some (Iface iname)) =\n                          Some (Iface iname)) \\<and>\n                         (\\<not> internal_iface_name_match ''+''\n                                  iname \\<longrightarrow>\n                          (case iface_name_is_wildcard iname of\n                           True \\<Rightarrow>\n                             map_option Iface\n                              (internal_iface_name_wildcard_longest ''+''\n                                iname)\n                           | False \\<Rightarrow> None) =\n                          Some (Iface iname))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>iname.\n       \\<lbrakk>i = Iface iname;\n        \\<not> iface_name_is_wildcard iname\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match ''+'' iname", "using internal_iface_name_match.elims(3)"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<not> internal_iface_name_match ?x ?xa;\n   \\<And>i is.\n      \\<lbrakk>?x = i # is; ?xa = [];\n       \\<not> (i = CHR ''+'' \\<and> is = [])\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>uu_ uv_.\n      \\<lbrakk>?x = []; ?xa = uu_ # uv_\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>i is p_i p_is.\n      \\<lbrakk>?x = i # is; ?xa = p_i # p_is;\n       \\<not> (if i = CHR ''+'' \\<and> is = [] then True\n               else p_i = i \\<and>\n                    internal_iface_name_match is p_is)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<And>iname.\n       \\<lbrakk>i = Iface iname;\n        \\<not> iface_name_is_wildcard iname\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match ''+'' iname", "by fastforce"], ["", "lemma iface_conjunct_commute: \"iface_conjunct i1 i2 = iface_conjunct i2 i1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_conjunct i1 i2 = iface_conjunct i2 i1", "apply(induction i1 i2 rule: iface_conjunct.induct)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       iface_conjunct (Iface i1) (Iface i2) =\n       iface_conjunct (Iface i2) (Iface i1)", "apply(rename_tac i1 i2, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       (i1 = i2 \\<longrightarrow>\n        (internal_iface_name_match i2 i2 \\<longrightarrow>\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i2 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n            | False \\<Rightarrow> Some (Iface i2)\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i2 of\n              True \\<Rightarrow> Some (Iface i1)\n              | _ \\<Rightarrow> Some (Iface i1)) =\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i1 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n            | False \\<Rightarrow> Some (Iface i1)\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i1 of\n              True \\<Rightarrow> Some (Iface i2)\n              | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n        (\\<not> internal_iface_name_match i2 i2 \\<longrightarrow>\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i2 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n            | False \\<Rightarrow> None\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n              | False \\<Rightarrow> Some (Iface i1)) =\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i1 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n            | False \\<Rightarrow> None\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n              | False \\<Rightarrow> Some (Iface i2)))) \\<and>\n       (i1 \\<noteq> i2 \\<longrightarrow>\n        (internal_iface_name_match i2 i1 \\<longrightarrow>\n         (internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> Some (Iface i2)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of\n               True \\<Rightarrow> Some (Iface i1)\n               | False \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> Some (Iface i1)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of\n               True \\<Rightarrow> Some (Iface i2)\n               | False \\<Rightarrow> None)) \\<and>\n         (\\<not> internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of\n               True \\<Rightarrow> Some (Iface i1)\n               | False \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> Some (Iface i1)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None))) \\<and>\n        (\\<not> internal_iface_name_match i2 i1 \\<longrightarrow>\n         (internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> Some (Iface i2)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of\n               True \\<Rightarrow> Some (Iface i2)\n               | False \\<Rightarrow> None)) \\<and>\n         (\\<not> internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None))))", "apply(case_tac \"iface_name_is_wildcard i1\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i1 i2.\n       iface_name_is_wildcard i1 \\<Longrightarrow>\n       (i1 = i2 \\<longrightarrow>\n        (internal_iface_name_match i2 i2 \\<longrightarrow>\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i2 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n            | False \\<Rightarrow> Some (Iface i2)\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i2 of\n              True \\<Rightarrow> Some (Iface i1)\n              | _ \\<Rightarrow> Some (Iface i1)) =\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i1 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n            | False \\<Rightarrow> Some (Iface i1)\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i1 of\n              True \\<Rightarrow> Some (Iface i2)\n              | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n        (\\<not> internal_iface_name_match i2 i2 \\<longrightarrow>\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i2 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n            | False \\<Rightarrow> None\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n              | False \\<Rightarrow> Some (Iface i1)) =\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i1 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n            | False \\<Rightarrow> None\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n              | False \\<Rightarrow> Some (Iface i2)))) \\<and>\n       (i1 \\<noteq> i2 \\<longrightarrow>\n        (internal_iface_name_match i2 i1 \\<longrightarrow>\n         (internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> Some (Iface i2)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of\n               True \\<Rightarrow> Some (Iface i1)\n               | False \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> Some (Iface i1)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of\n               True \\<Rightarrow> Some (Iface i2)\n               | False \\<Rightarrow> None)) \\<and>\n         (\\<not> internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of\n               True \\<Rightarrow> Some (Iface i1)\n               | False \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> Some (Iface i1)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None))) \\<and>\n        (\\<not> internal_iface_name_match i2 i1 \\<longrightarrow>\n         (internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> Some (Iface i2)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of\n               True \\<Rightarrow> Some (Iface i2)\n               | False \\<Rightarrow> None)) \\<and>\n         (\\<not> internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None))))\n 2. \\<And>i1 i2.\n       \\<not> iface_name_is_wildcard i1 \\<Longrightarrow>\n       (i1 = i2 \\<longrightarrow>\n        (internal_iface_name_match i2 i2 \\<longrightarrow>\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i2 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n            | False \\<Rightarrow> Some (Iface i2)\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i2 of\n              True \\<Rightarrow> Some (Iface i1)\n              | _ \\<Rightarrow> Some (Iface i1)) =\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i1 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n            | False \\<Rightarrow> Some (Iface i1)\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i1 of\n              True \\<Rightarrow> Some (Iface i2)\n              | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n        (\\<not> internal_iface_name_match i2 i2 \\<longrightarrow>\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i2 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n            | False \\<Rightarrow> None\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n              | False \\<Rightarrow> Some (Iface i1)) =\n         (case iface_name_is_wildcard i2 of\n          True \\<Rightarrow>\n            case iface_name_is_wildcard i1 of\n            True \\<Rightarrow>\n              map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n            | False \\<Rightarrow> None\n          | False \\<Rightarrow>\n              case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n              | False \\<Rightarrow> Some (Iface i2)))) \\<and>\n       (i1 \\<noteq> i2 \\<longrightarrow>\n        (internal_iface_name_match i2 i1 \\<longrightarrow>\n         (internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> Some (Iface i2)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of\n               True \\<Rightarrow> Some (Iface i1)\n               | False \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> Some (Iface i1)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of\n               True \\<Rightarrow> Some (Iface i2)\n               | False \\<Rightarrow> None)) \\<and>\n         (\\<not> internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of\n               True \\<Rightarrow> Some (Iface i1)\n               | False \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> Some (Iface i1)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None))) \\<and>\n        (\\<not> internal_iface_name_match i2 i1 \\<longrightarrow>\n         (internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> Some (Iface i2)\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of\n               True \\<Rightarrow> Some (Iface i2)\n               | False \\<Rightarrow> None)) \\<and>\n         (\\<not> internal_iface_name_match i1 i2 \\<longrightarrow>\n          (case iface_name_is_wildcard i1 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i2 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i1 i2)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i2 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None) =\n          (case iface_name_is_wildcard i2 of\n           True \\<Rightarrow>\n             case iface_name_is_wildcard i1 of\n             True \\<Rightarrow>\n               map_option Iface (internal_iface_name_wildcard_longest i2 i1)\n             | False \\<Rightarrow> None\n           | False \\<Rightarrow>\n               case iface_name_is_wildcard i1 of True \\<Rightarrow> None\n               | _ \\<Rightarrow> None))))", "apply(case_tac [!] \"iface_name_is_wildcard i2\")"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>i1 i2.\n       \\<lbrakk>iface_name_is_wildcard i1;\n        iface_name_is_wildcard i2\\<rbrakk>\n       \\<Longrightarrow> (i1 = i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> Some (Iface i2)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> Some (Iface i1)\n                                | _ \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> Some (Iface i1)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> Some (Iface i2)\n                                | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow>\n                                    Some (Iface i2)))) \\<and>\n                         (i1 \\<noteq> i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))))\n 2. \\<And>i1 i2.\n       \\<lbrakk>iface_name_is_wildcard i1;\n        \\<not> iface_name_is_wildcard i2\\<rbrakk>\n       \\<Longrightarrow> (i1 = i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> Some (Iface i2)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> Some (Iface i1)\n                                | _ \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> Some (Iface i1)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> Some (Iface i2)\n                                | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow>\n                                    Some (Iface i2)))) \\<and>\n                         (i1 \\<noteq> i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))))\n 3. \\<And>i1 i2.\n       \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n        iface_name_is_wildcard i2\\<rbrakk>\n       \\<Longrightarrow> (i1 = i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> Some (Iface i2)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> Some (Iface i1)\n                                | _ \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> Some (Iface i1)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> Some (Iface i2)\n                                | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow>\n                                    Some (Iface i2)))) \\<and>\n                         (i1 \\<noteq> i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))))\n 4. \\<And>i1 i2.\n       \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n        \\<not> iface_name_is_wildcard i2\\<rbrakk>\n       \\<Longrightarrow> (i1 = i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> Some (Iface i2)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> Some (Iface i1)\n                                | _ \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> Some (Iface i1)\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> Some (Iface i2)\n                                | _ \\<Rightarrow> Some (Iface i2))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i2 \\<longrightarrow>\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i2 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i1\n                                   i2)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i2 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow> Some (Iface i1)) =\n                           (case iface_name_is_wildcard i2 of\n                            True \\<Rightarrow>\n                              case iface_name_is_wildcard i1 of\n                              True \\<Rightarrow>\n                                map_option Iface\n                                 (internal_iface_name_wildcard_longest i2\n                                   i1)\n                              | False \\<Rightarrow> None\n                            | False \\<Rightarrow>\n                                case iface_name_is_wildcard i1 of\n                                True \\<Rightarrow> None\n                                | False \\<Rightarrow>\n                                    Some (Iface i2)))) \\<and>\n                         (i1 \\<noteq> i2 \\<longrightarrow>\n                          (internal_iface_name_match i2 i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> Some (Iface i1)\n                                 | False \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> Some (Iface i1)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))) \\<and>\n                          (\\<not> internal_iface_name_match i2\n                                   i1 \\<longrightarrow>\n                           (internal_iface_name_match i1\n                             i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> Some (Iface i2)\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> Some (Iface i2)\n                                 | False \\<Rightarrow> None)) \\<and>\n                           (\\<not> internal_iface_name_match i1\n                                    i2 \\<longrightarrow>\n                            (case iface_name_is_wildcard i1 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i2 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i1\n                                    i2)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i2 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None) =\n                            (case iface_name_is_wildcard i2 of\n                             True \\<Rightarrow>\n                               case iface_name_is_wildcard i1 of\n                               True \\<Rightarrow>\n                                 map_option Iface\n                                  (internal_iface_name_wildcard_longest i2\n                                    i1)\n                               | False \\<Rightarrow> None\n                             | False \\<Rightarrow>\n                                 case iface_name_is_wildcard i1 of\n                                 True \\<Rightarrow> None\n                                 | _ \\<Rightarrow> None))))", "apply(simp_all)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<lbrakk>iface_name_is_wildcard i1;\n        iface_name_is_wildcard i2\\<rbrakk>\n       \\<Longrightarrow> i1 \\<noteq> i2 \\<longrightarrow>\n                         map_option Iface\n                          (internal_iface_name_wildcard_longest i1 i2) =\n                         map_option Iface\n                          (internal_iface_name_wildcard_longest i2 i1)", "by (simp add: internal_iface_name_wildcard_longest_commute)"], ["", "private"], ["", "definition internal_iface_name_subset :: \"string \\<Rightarrow> string \\<Rightarrow> bool\" where\n      \"internal_iface_name_subset i1 i2 = (case (iface_name_is_wildcard i1, iface_name_is_wildcard i2) of\n        (True,  True) \\<Rightarrow> length i1 \\<ge> length i2 \\<and> take ((length i2) - 1) i1 = butlast i2 |\n        (True,  False) \\<Rightarrow> False |\n        (False, True) \\<Rightarrow> take (length i2 - 1) i1 = butlast i2 |\n        (False, False) \\<Rightarrow> i1 = i2\n        )\""], ["", "private"], ["", "lemma butlast_take_length_helper:\n      fixes x ::\"char list\"\n      assumes a1: \"length i2 \\<le> length i1\"\n      assumes a2: \"take (length i2 - Suc 0) i1 = butlast i2\"\n      assumes a3: \"butlast i1 = take (length i1 - Suc 0) x\"\n      shows \"butlast i2 = take (length i2 - Suc 0) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "(*sledgehammer spass Isar proof*)"], ["proof (state)\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "have f4: \"List.gen_length 0 i2 \\<le> List.gen_length 0 i1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.gen_length 0 i2 \\<le> List.gen_length 0 i1", "using a1"], ["proof (prove)\nusing this:\n  length i2 \\<le> length i1\n\ngoal (1 subgoal):\n 1. List.gen_length 0 i2 \\<le> List.gen_length 0 i1", "by (simp add: length_code)"], ["proof (state)\nthis:\n  List.gen_length 0 i2 \\<le> List.gen_length 0 i1\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "have f5: \"\\<And>cs. List.gen_length 0 (cs::char list) - Suc 0 = List.gen_length 0 (tl cs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>cs. List.gen_length 0 cs - Suc 0 = List.gen_length 0 (tl cs)", "by (metis (no_types) One_nat_def length_code length_tl)"], ["proof (state)\nthis:\n  List.gen_length 0 ?cs - Suc 0 = List.gen_length 0 (tl ?cs)\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "obtain nn :: \"(nat \\<Rightarrow> nat) \\<Rightarrow> nat\" where\n        \"\\<And>f. \\<not> f (nn f) \\<le> f (Suc (nn f)) \\<or> f (List.gen_length 0 i2) \\<le> f (List.gen_length 0 i1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>nn.\n        (\\<And>f.\n            \\<not> f (nn f) \\<le> f (Suc (nn f)) \\<or>\n            f (List.gen_length 0 i2)\n            \\<le> f (List.gen_length 0 i1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using f4"], ["proof (prove)\nusing this:\n  List.gen_length 0 i2 \\<le> List.gen_length 0 i1\n\ngoal (1 subgoal):\n 1. (\\<And>nn.\n        (\\<And>f.\n            \\<not> f (nn f) \\<le> f (Suc (nn f)) \\<or>\n            f (List.gen_length 0 i2)\n            \\<le> f (List.gen_length 0 i1)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson lift_Suc_mono_le)"], ["proof (state)\nthis:\n  \\<not> ?f (nn ?f) \\<le> ?f (Suc (nn ?f)) \\<or>\n  ?f (List.gen_length 0 i2) \\<le> ?f (List.gen_length 0 i1)\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "hence \"\\<not> nn (\\<lambda>n. n - Suc 0) - Suc 0 \\<le> nn (\\<lambda>n. n - Suc 0) \\<or> List.gen_length 0 (tl i2) \\<le> List.gen_length 0 (tl i1)\""], ["proof (prove)\nusing this:\n  \\<not> ?f (nn ?f) \\<le> ?f (Suc (nn ?f)) \\<or>\n  ?f (List.gen_length 0 i2) \\<le> ?f (List.gen_length 0 i1)\n\ngoal (1 subgoal):\n 1. \\<not> nn (\\<lambda>n. n - Suc 0) - Suc 0\n           \\<le> nn (\\<lambda>n. n - Suc 0) \\<or>\n    List.gen_length 0 (tl i2) \\<le> List.gen_length 0 (tl i1)", "using f5"], ["proof (prove)\nusing this:\n  \\<not> ?f (nn ?f) \\<le> ?f (Suc (nn ?f)) \\<or>\n  ?f (List.gen_length 0 i2) \\<le> ?f (List.gen_length 0 i1)\n  List.gen_length 0 ?cs - Suc 0 = List.gen_length 0 (tl ?cs)\n\ngoal (1 subgoal):\n 1. \\<not> nn (\\<lambda>n. n - Suc 0) - Suc 0\n           \\<le> nn (\\<lambda>n. n - Suc 0) \\<or>\n    List.gen_length 0 (tl i2) \\<le> List.gen_length 0 (tl i1)", "by (metis (lifting) diff_Suc_Suc diff_zero)"], ["proof (state)\nthis:\n  \\<not> nn (\\<lambda>n. n - Suc 0) - Suc 0\n         \\<le> nn (\\<lambda>n. n - Suc 0) \\<or>\n  List.gen_length 0 (tl i2) \\<le> List.gen_length 0 (tl i1)\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "hence f6: \"min (List.gen_length 0 (tl i2)) (List.gen_length 0 (tl i1)) = List.gen_length 0 (tl i2)\""], ["proof (prove)\nusing this:\n  \\<not> nn (\\<lambda>n. n - Suc 0) - Suc 0\n         \\<le> nn (\\<lambda>n. n - Suc 0) \\<or>\n  List.gen_length 0 (tl i2) \\<le> List.gen_length 0 (tl i1)\n\ngoal (1 subgoal):\n 1. min (List.gen_length 0 (tl i2)) (List.gen_length 0 (tl i1)) =\n    List.gen_length 0 (tl i2)", "using diff_le_self min.absorb1"], ["proof (prove)\nusing this:\n  \\<not> nn (\\<lambda>n. n - Suc 0) - Suc 0\n         \\<le> nn (\\<lambda>n. n - Suc 0) \\<or>\n  List.gen_length 0 (tl i2) \\<le> List.gen_length 0 (tl i1)\n  ?m - ?n \\<le> ?m\n  ?a \\<le> ?b \\<Longrightarrow> min ?a ?b = ?a\n\ngoal (1 subgoal):\n 1. min (List.gen_length 0 (tl i2)) (List.gen_length 0 (tl i1)) =\n    List.gen_length 0 (tl i2)", "by blast"], ["proof (state)\nthis:\n  min (List.gen_length 0 (tl i2)) (List.gen_length 0 (tl i1)) =\n  List.gen_length 0 (tl i2)\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "{"], ["proof (state)\nthis:\n  min (List.gen_length 0 (tl i2)) (List.gen_length 0 (tl i1)) =\n  List.gen_length 0 (tl i2)\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "assume \"take (List.gen_length 0 (tl i2)) i1 \\<noteq> take (List.gen_length 0 (tl i2)) x\""], ["proof (state)\nthis:\n  take (List.gen_length 0 (tl i2)) i1 \\<noteq>\n  take (List.gen_length 0 (tl i2)) x\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "have \"List.gen_length 0 (tl i2) = 0 \\<or> take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. List.gen_length 0 (tl i2) = 0 \\<or>\n    take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x", "using f6 f5 a3"], ["proof (prove)\nusing this:\n  min (List.gen_length 0 (tl i2)) (List.gen_length 0 (tl i1)) =\n  List.gen_length 0 (tl i2)\n  List.gen_length 0 ?cs - Suc 0 = List.gen_length 0 (tl ?cs)\n  butlast i1 = take (length i1 - Suc 0) x\n\ngoal (1 subgoal):\n 1. List.gen_length 0 (tl i2) = 0 \\<or>\n    take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x", "by (metis (lifting) One_nat_def butlast_conv_take length_code take_take)"], ["proof (state)\nthis:\n  List.gen_length 0 (tl i2) = 0 \\<or>\n  take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "hence \"take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\""], ["proof (prove)\nusing this:\n  List.gen_length 0 (tl i2) = 0 \\<or>\n  take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\n\ngoal (1 subgoal):\n 1. take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x", "by force"], ["proof (state)\nthis:\n  take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "}"], ["proof (state)\nthis:\n  take (List.gen_length 0 (tl i2)) i1 \\<noteq>\n  take (List.gen_length 0 (tl i2)) x \\<Longrightarrow>\n  take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "thus \"butlast i2 = take (length i2 - Suc 0) x\""], ["proof (prove)\nusing this:\n  take (List.gen_length 0 (tl i2)) i1 \\<noteq>\n  take (List.gen_length 0 (tl i2)) x \\<Longrightarrow>\n  take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "using f5 a2"], ["proof (prove)\nusing this:\n  take (List.gen_length 0 (tl i2)) i1 \\<noteq>\n  take (List.gen_length 0 (tl i2)) x \\<Longrightarrow>\n  take (List.gen_length 0 (tl i2)) i1 = take (List.gen_length 0 (tl i2)) x\n  List.gen_length 0 ?cs - Suc 0 = List.gen_length 0 (tl ?cs)\n  take (length i2 - Suc 0) i1 = butlast i2\n\ngoal (1 subgoal):\n 1. butlast i2 = take (length i2 - Suc 0) x", "by (metis (full_types) length_code)"], ["proof (state)\nthis:\n  butlast i2 = take (length i2 - Suc 0) x\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma internal_iface_name_subset: \"internal_iface_name_subset i1 i2 \\<longleftrightarrow> \n        {i. internal_iface_name_match i1 i} \\<subseteq> {i. internal_iface_name_match i2 i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_subset i1 i2 =\n    ({i. internal_iface_name_match i1 i}\n     \\<subseteq> {i. internal_iface_name_match i2 i})", "unfolding internal_iface_name_subset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (iface_name_is_wildcard i1, iface_name_is_wildcard i2) of\n     (True, True) \\<Rightarrow>\n       length i2 \\<le> length i1 \\<and> take (length i2 - 1) i1 = butlast i2\n     | (True, False) \\<Rightarrow> False\n     | (False, True) \\<Rightarrow> take (length i2 - 1) i1 = butlast i2\n     | (False, False) \\<Rightarrow> i1 = i2) =\n    ({i. internal_iface_name_match i1 i}\n     \\<subseteq> {i. internal_iface_name_match i2 i})", "proof(cases \"iface_name_is_wildcard i1\", case_tac [!] \"iface_name_is_wildcard i2\", simp_all)"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (length i2 \\<le> length i1 \\<and>\n                       take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 2. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)\n 3. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 4. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "assume a1: \"iface_name_is_wildcard i1\""], ["proof (state)\nthis:\n  iface_name_is_wildcard i1\n\ngoal (4 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (length i2 \\<le> length i1 \\<and>\n                       take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 2. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)\n 3. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 4. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "assume a2: \"iface_name_is_wildcard i2\""], ["proof (state)\nthis:\n  iface_name_is_wildcard i2\n\ngoal (4 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (length i2 \\<le> length i1 \\<and>\n                       take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 2. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)\n 3. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 4. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "show \"(length i2 \\<le> length i1 \\<and> take (length i2 - Suc 0) i1 = butlast i2) \\<longleftrightarrow>\n            ({i. internal_iface_name_match i1 i} \\<subseteq> {i. internal_iface_name_match i2 i})\" (is \"?l \\<longleftrightarrow> ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length i2 \\<le> length i1 \\<and>\n     take (length i2 - Suc 0) i1 = butlast i2) =\n    ({i. internal_iface_name_match i1 i}\n     \\<subseteq> {i. internal_iface_name_match i2 i})", "proof(rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2 \\<Longrightarrow>\n    {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i}\n 2. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "assume ?l"], ["proof (state)\nthis:\n  length i2 \\<le> length i1 \\<and> take (length i2 - Suc 0) i1 = butlast i2\n\ngoal (2 subgoals):\n 1. length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2 \\<Longrightarrow>\n    {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i}\n 2. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "with a1 a2"], ["proof (chain)\npicking this:\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2\n  length i2 \\<le> length i1 \\<and> take (length i2 - Suc 0) i1 = butlast i2", "show ?r"], ["proof (prove)\nusing this:\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2\n  length i2 \\<le> length i1 \\<and> take (length i2 - Suc 0) i1 = butlast i2\n\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i}", "apply(clarify, rename_tac x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n        internal_iface_name_match i1 x; length i2 \\<le> length i1;\n        take (length i2 - Suc 0) i1 = butlast i2; iface_name_is_wildcard i1;\n        iface_name_is_wildcard i2;\n        length i2 \\<le> length i1 \\<and>\n        take (length i2 - Suc 0) i1 = butlast i2\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i2 x", "apply(drule_tac p_i=x in match_iface_case_wildcard_prefix)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>internal_iface_name_match i1 x; length i2 \\<le> length i1;\n        take (length i2 - Suc 0) i1 = butlast i2;\n        length i2 \\<le> length i1 \\<and>\n        take (length i2 - Suc 0) i1 = butlast i2;\n        match_iface (Iface i1) x = (butlast i1 = take (length i1 - 1) x);\n        match_iface (Iface i2) x = (butlast i2 = take (length i2 - 1) x);\n        match_iface (Iface i1) x = (butlast i1 = take (length i1 - 1) x);\n        match_iface (Iface i2) x =\n        (butlast i2 = take (length i2 - 1) x)\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_match i2 x", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>internal_iface_name_match i1 x;\n        length i2 \\<le> length i1 \\<and>\n        take (length i2 - Suc 0) i1 = butlast i2;\n        butlast i1 = take (length i1 - Suc 0) x;\n        internal_iface_name_match i2 x =\n        (butlast i2 = take (length i2 - Suc 0) x)\\<rbrakk>\n       \\<Longrightarrow> butlast i2 = take (length i2 - Suc 0) x", "using butlast_take_length_helper"], ["proof (prove)\nusing this:\n  \\<lbrakk>length ?i2.0 \\<le> length ?i1.0;\n   take (length ?i2.0 - Suc 0) ?i1.0 = butlast ?i2.0;\n   butlast ?i1.0 = take (length ?i1.0 - Suc 0) ?x\\<rbrakk>\n  \\<Longrightarrow> butlast ?i2.0 = take (length ?i2.0 - Suc 0) ?x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>internal_iface_name_match i1 x;\n        length i2 \\<le> length i1 \\<and>\n        take (length i2 - Suc 0) i1 = butlast i2;\n        butlast i1 = take (length i1 - Suc 0) x;\n        internal_iface_name_match i2 x =\n        (butlast i2 = take (length i2 - Suc 0) x)\\<rbrakk>\n       \\<Longrightarrow> butlast i2 = take (length i2 - Suc 0) x", "by blast"], ["proof (state)\nthis:\n  {i. internal_iface_name_match i1 i}\n  \\<subseteq> {i. internal_iface_name_match i2 i}\n\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "assume ?r"], ["proof (state)\nthis:\n  {i. internal_iface_name_match i1 i}\n  \\<subseteq> {i. internal_iface_name_match i2 i}\n\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "hence r': \"internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2 \""], ["proof (prove)\nusing this:\n  {i. internal_iface_name_match i1 i}\n  \\<subseteq> {i. internal_iface_name_match i2 i}\n\ngoal (1 subgoal):\n 1. internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2", "apply(subst(asm) internal_iface_name_to_set2[symmetric])+"], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_to_set i1\n    \\<subseteq> internal_iface_name_to_set i2 \\<Longrightarrow>\n    internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2", "by assumption"], ["proof (state)\nthis:\n  internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2\n\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "have hlp1: \"\\<And>i1 i2. {x. \\<exists>cs. x = i1 @ cs} \\<subseteq> {x. \\<exists>cs. x = i2 @ cs} \\<Longrightarrow> length i2 \\<le> length i1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       {x. \\<exists>cs. x = i1 @ cs}\n       \\<subseteq> {x. \\<exists>cs. x = i2 @ cs} \\<Longrightarrow>\n       length i2 \\<le> length i1", "apply(simp add: Set.Collect_mono_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<forall>x.\n          (\\<exists>cs. x = i1 @ cs) \\<longrightarrow>\n          (\\<exists>cs. x = i2 @ cs) \\<Longrightarrow>\n       length i2 \\<le> length i1", "by force"], ["proof (state)\nthis:\n  {x. \\<exists>cs. x = ?i1.0 @ cs}\n  \\<subseteq> {x. \\<exists>cs. x = ?i2.0 @ cs} \\<Longrightarrow>\n  length ?i2.0 \\<le> length ?i1.0\n\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "have hlp2: \"\\<And>i1 i2. {x. \\<exists>cs. x = i1 @ cs} \\<subseteq> {x. \\<exists>cs. x = i2 @ cs} \\<Longrightarrow> take (length i2) i1 = i2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       {x. \\<exists>cs. x = i1 @ cs}\n       \\<subseteq> {x. \\<exists>cs. x = i2 @ cs} \\<Longrightarrow>\n       take (length i2) i1 = i2", "apply(simp add: Set.Collect_mono_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i1 i2.\n       \\<forall>x.\n          (\\<exists>cs. x = i1 @ cs) \\<longrightarrow>\n          (\\<exists>cs. x = i2 @ cs) \\<Longrightarrow>\n       take (length i2) i1 = i2", "by force"], ["proof (state)\nthis:\n  {x. \\<exists>cs. x = ?i1.1 @ cs}\n  \\<subseteq> {x. \\<exists>cs. x = ?i2.1 @ cs} \\<Longrightarrow>\n  take (length ?i2.1) ?i1.1 = ?i2.1\n\ngoal (1 subgoal):\n 1. {i. internal_iface_name_match i1 i}\n    \\<subseteq> {i. internal_iface_name_match i2 i} \\<Longrightarrow>\n    length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "from r' a1 a2"], ["proof (chain)\npicking this:\n  internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2", "show ?l"], ["proof (prove)\nusing this:\n  internal_iface_name_to_set i1 \\<subseteq> internal_iface_name_to_set i2\n  iface_name_is_wildcard i1\n  iface_name_is_wildcard i2\n\ngoal (1 subgoal):\n 1. length i2 \\<le> length i1 \\<and>\n    take (length i2 - Suc 0) i1 = butlast i2", "apply(simp add: internal_iface_name_to_set)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{uu_. \\<exists>cs. uu_ = butlast i1 @ cs}\n             \\<subseteq> {uu_. \\<exists>cs. uu_ = butlast i2 @ cs};\n     iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> length i2 \\<le> length i1 \\<and>\n                      take (length i2 - Suc 0) i1 = butlast i2", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>{uu_. \\<exists>cs. uu_ = butlast i1 @ cs}\n             \\<subseteq> {uu_. \\<exists>cs. uu_ = butlast i2 @ cs};\n     iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> length i2 \\<le> length i1\n 2. \\<lbrakk>{uu_. \\<exists>cs. uu_ = butlast i1 @ cs}\n             \\<subseteq> {uu_. \\<exists>cs. uu_ = butlast i2 @ cs};\n     iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> take (length i2 - Suc 0) i1 = butlast i2", "apply(drule hlp1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     length (butlast i2) \\<le> length (butlast i1)\\<rbrakk>\n    \\<Longrightarrow> length i2 \\<le> length i1\n 2. \\<lbrakk>{uu_. \\<exists>cs. uu_ = butlast i1 @ cs}\n             \\<subseteq> {uu_. \\<exists>cs. uu_ = butlast i2 @ cs};\n     iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> take (length i2 - Suc 0) i1 = butlast i2", "apply(simp)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     length i2 - Suc 0 \\<le> length i1 - Suc 0\\<rbrakk>\n    \\<Longrightarrow> length i2 \\<le> length i1\n 2. \\<lbrakk>{uu_. \\<exists>cs. uu_ = butlast i1 @ cs}\n             \\<subseteq> {uu_. \\<exists>cs. uu_ = butlast i2 @ cs};\n     iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> take (length i2 - Suc 0) i1 = butlast i2", "apply (metis One_nat_def Suc_pred diff_Suc_eq_diff_pred diff_is_0_eq iface_name_is_wildcard.simps(1) length_greater_0_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>{uu_. \\<exists>cs. uu_ = butlast i1 @ cs}\n             \\<subseteq> {uu_. \\<exists>cs. uu_ = butlast i2 @ cs};\n     iface_name_is_wildcard i1; iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> take (length i2 - Suc 0) i1 = butlast i2", "apply(drule hlp2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     take (length (butlast i2)) (butlast i1) = butlast i2\\<rbrakk>\n    \\<Longrightarrow> take (length i2 - Suc 0) i1 = butlast i2", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1; iface_name_is_wildcard i2;\n     take (length i2 - Suc 0) (butlast i1) = butlast i2\\<rbrakk>\n    \\<Longrightarrow> take (length i2 - Suc 0) i1 = butlast i2", "by (metis One_nat_def butlast_conv_take length_butlast length_take take_take)"], ["proof (state)\nthis:\n  length i2 \\<le> length i1 \\<and> take (length i2 - Suc 0) i1 = butlast i2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (length i2 \\<le> length i1 \\<and>\n   take (length i2 - Suc 0) i1 = butlast i2) =\n  ({i. internal_iface_name_match i1 i}\n   \\<subseteq> {i. internal_iface_name_match i2 i})\n\ngoal (3 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)\n 2. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 3. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)\n 2. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 3. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "show \"iface_name_is_wildcard i1 \\<Longrightarrow> \\<not> iface_name_is_wildcard i2 \\<Longrightarrow>\n            \\<not> Collect (internal_iface_name_match i1) \\<subseteq> Collect (internal_iface_name_match i2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)", "using internal_iface_name_match_refl match_iface_case_nowildcard"], ["proof (prove)\nusing this:\n  internal_iface_name_match ?i ?i\n  \\<not> iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (?i = ?p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                             \\<subseteq> Collect\n    (internal_iface_name_match i2)", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>iface_name_is_wildcard i1;\n   \\<not> iface_name_is_wildcard i2\\<rbrakk>\n  \\<Longrightarrow> \\<not> Collect (internal_iface_name_match i1)\n                           \\<subseteq> Collect\n  (internal_iface_name_match i2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 2. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})\n 2. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "show \"\\<not> iface_name_is_wildcard i1 \\<Longrightarrow> iface_name_is_wildcard i2 \\<Longrightarrow>\n            (take (length i2 - Suc 0) i1 = butlast i2) \\<longleftrightarrow> ({i. internal_iface_name_match i1 i} \\<subseteq> {i. internal_iface_name_match i2 i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "using match_iface_case_nowildcard match_iface_case_wildcard_prefix"], ["proof (prove)\nusing this:\n  \\<not> iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (?i = ?p_i)\n  iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (butlast ?i = take (length ?i - 1) ?p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n   iface_name_is_wildcard i2\\<rbrakk>\n  \\<Longrightarrow> (take (length i2 - Suc 0) i1 = butlast i2) =\n                    ({i. internal_iface_name_match i1 i}\n                     \\<subseteq> {i. internal_iface_name_match i2 i})\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "show \" \\<not> iface_name_is_wildcard i1 \\<Longrightarrow> \\<not> iface_name_is_wildcard i2 \\<Longrightarrow>\n           (i1 = i2) \\<longleftrightarrow> ({i. internal_iface_name_match i1 i} \\<subseteq> {i. internal_iface_name_match i2 i})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "using match_iface_case_nowildcard"], ["proof (prove)\nusing this:\n  \\<not> iface_name_is_wildcard ?i \\<Longrightarrow>\n  match_iface (Iface ?i) ?p_i = (?i = ?p_i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n     \\<not> iface_name_is_wildcard i2\\<rbrakk>\n    \\<Longrightarrow> (i1 = i2) =\n                      ({i. internal_iface_name_match i1 i}\n                       \\<subseteq> {i. internal_iface_name_match i2 i})", "by force"], ["proof (state)\nthis:\n  \\<lbrakk>\\<not> iface_name_is_wildcard i1;\n   \\<not> iface_name_is_wildcard i2\\<rbrakk>\n  \\<Longrightarrow> (i1 = i2) =\n                    ({i. internal_iface_name_match i1 i}\n                     \\<subseteq> {i. internal_iface_name_match i2 i})\n\ngoal:\nNo subgoals!", "qed"], ["", "definition iface_subset :: \"iface \\<Rightarrow> iface \\<Rightarrow> bool\" where\n      \"iface_subset i1 i2 \\<longleftrightarrow> internal_iface_name_subset (iface_sel i1) (iface_sel i2)\""], ["", "lemma iface_subset: \"iface_subset i1 i2 \\<longleftrightarrow> {i. match_iface i1 i} \\<subseteq> {i. match_iface i2 i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_subset i1 i2 =\n    ({i. match_iface i1 i} \\<subseteq> {i. match_iface i2 i})", "unfolding iface_subset_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. internal_iface_name_subset (iface_sel i1) (iface_sel i2) =\n    ({i. match_iface i1 i} \\<subseteq> {i. match_iface i2 i})", "apply(cases i1, cases i2)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>i1 = Iface x; i2 = Iface xa\\<rbrakk>\n       \\<Longrightarrow> internal_iface_name_subset (iface_sel i1)\n                          (iface_sel i2) =\n                         ({i. match_iface i1 i}\n                          \\<subseteq> {i. match_iface i2 i})", "by(simp add: internal_iface_name_subset)"], ["", "definition iface_is_wildcard :: \"iface \\<Rightarrow> bool\" where\n      \"iface_is_wildcard ifce \\<equiv> iface_name_is_wildcard (iface_sel ifce)\""], ["", "lemma iface_is_wildcard_ifaceAny: \"iface_is_wildcard ifaceAny\""], ["proof (prove)\ngoal (1 subgoal):\n 1. iface_is_wildcard ifaceAny", "by(simp add: iface_is_wildcard_def ifaceAny_def)"], ["", "subsection\\<open>Enumerating Interfaces\\<close>"], ["", "private"], ["", "definition all_chars :: \"char list\" where\n      \"all_chars \\<equiv> Enum.enum\""], ["", "private"], ["", "lemma all_chars: \"set all_chars = (UNIV::char set)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set all_chars = UNIV", "by(simp add: all_chars_def enum_UNIV)"], ["", "text\\<open>we can compute this, but its horribly inefficient!\\<close>"], ["", "(*valid chars in an interface are NOT limited to the printable ones!*)\n    private"], ["", "lemma strings_of_length_n: \"set (List.n_lists n all_chars) = {s::string. length s = n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (List.n_lists n all_chars) = {s. length s = n}", "apply(induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (List.n_lists 0 all_chars) = {s. length s = 0}\n 2. \\<And>n.\n       set (List.n_lists n all_chars) = {s. length s = n} \\<Longrightarrow>\n       set (List.n_lists (Suc n) all_chars) = {s. length s = Suc n}", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       set (List.n_lists n all_chars) = {s. length s = n} \\<Longrightarrow>\n       set (List.n_lists (Suc n) all_chars) = {s. length s = Suc n}", "apply(simp add: all_chars)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       set (List.n_lists n all_chars) = {s. length s = n} \\<Longrightarrow>\n       (\\<Union>x\\<in>{s. length s = n}. range (\\<lambda>xa. xa # x)) =\n       {s. length s = Suc n}", "apply(safe)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x xa xb.\n       \\<lbrakk>set (List.n_lists (length xa) all_chars) =\n                {s. length s = length xa};\n        xb \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> length (xb # xa) = Suc (length xa)\n 2. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<Union>x\\<in>{s. length s = n}.\n                                     range (\\<lambda>xa. xa # x))", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (\\<Union>x\\<in>{s. length s = n}.\n                                     range (\\<lambda>xa. xa # x))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            length xa = n \\<and>\n                            x \\<in> range (\\<lambda>x. x # xa)", "apply(rename_tac n x)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa.\n                            length xa = n \\<and>\n                            x \\<in> range (\\<lambda>x. x # xa)", "apply(rule_tac x=\"drop 1 x\" in exI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n\\<rbrakk>\n       \\<Longrightarrow> length (drop 1 x) = n \\<and>\n                         x \\<in> range (\\<lambda>xa. xa # drop 1 x)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> range (\\<lambda>xa. xa # drop (Suc 0) x)", "apply(case_tac x)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>n x.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n; x = []\\<rbrakk>\n       \\<Longrightarrow> x \\<in> range (\\<lambda>xa. xa # drop (Suc 0) x)\n 2. \\<And>n x a list.\n       \\<lbrakk>set (List.n_lists n all_chars) = {s. length s = n};\n        length x = Suc n; x = a # list\\<rbrakk>\n       \\<Longrightarrow> x \\<in> range (\\<lambda>xa. xa # drop (Suc 0) x)", "apply(simp_all)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "text\\<open>Non-wildacrd interfaces of length @{term n}\\<close>"], ["", "private"], ["", "definition non_wildcard_ifaces :: \"nat \\<Rightarrow> string list\" where\n     \"non_wildcard_ifaces n \\<equiv> filter (\\<lambda>i. \\<not> iface_name_is_wildcard i) (List.n_lists n all_chars)\""], ["", "text\\<open>Example: (any number higher than zero are probably too inefficient)\\<close>"], ["", "private"], ["", "lemma \"non_wildcard_ifaces 0 = ['''']\""], ["proof (prove)\ngoal (1 subgoal):\n 1. non_wildcard_ifaces 0 = [[]]", "by eval"], ["", "private"], ["", "lemma non_wildcard_ifaces: \"set (non_wildcard_ifaces n) = {s::string. length s = n \\<and> \\<not> iface_name_is_wildcard s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (non_wildcard_ifaces n) =\n    {s. length s = n \\<and> \\<not> iface_name_is_wildcard s}", "using strings_of_length_n non_wildcard_ifaces_def"], ["proof (prove)\nusing this:\n  set (List.n_lists ?n all_chars) = {s. length s = ?n}\n  non_wildcard_ifaces ?n \\<equiv>\n  filter (\\<lambda>i. \\<not> iface_name_is_wildcard i)\n   (List.n_lists ?n all_chars)\n\ngoal (1 subgoal):\n 1. set (non_wildcard_ifaces n) =\n    {s. length s = n \\<and> \\<not> iface_name_is_wildcard s}", "by auto"], ["", "private"], ["", "lemma \"(\\<Union> i \\<in> set (non_wildcard_ifaces n). internal_iface_name_to_set i) = {s::string. length s = n \\<and> \\<not> iface_name_is_wildcard s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (internal_iface_name_to_set ` set (non_wildcard_ifaces n)) =\n    {s. length s = n \\<and> \\<not> iface_name_is_wildcard s}", "by(simp add: non_wildcard_ifaces)"], ["", "text\\<open>Non-wildacrd interfaces up to length @{term n}\\<close>"], ["", "private"], ["", "fun non_wildcard_ifaces_upto :: \"nat \\<Rightarrow> string list\" where\n      \"non_wildcard_ifaces_upto 0 = [[]]\" |\n      \"non_wildcard_ifaces_upto (Suc n) = (non_wildcard_ifaces (Suc n)) @ non_wildcard_ifaces_upto n\""], ["", "private"], ["", "lemma non_wildcard_ifaces_upto: \"set (non_wildcard_ifaces_upto n) = {s::string. length s \\<le> n \\<and> \\<not> iface_name_is_wildcard s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (non_wildcard_ifaces_upto n) =\n    {s. length s \\<le> n \\<and> \\<not> iface_name_is_wildcard s}", "apply(induction n)"], ["proof (prove)\ngoal (2 subgoals):\n 1. set (non_wildcard_ifaces_upto 0) =\n    {s. length s \\<le> 0 \\<and> \\<not> iface_name_is_wildcard s}\n 2. \\<And>n.\n       set (non_wildcard_ifaces_upto n) =\n       {s. length s \\<le> n \\<and>\n           \\<not> iface_name_is_wildcard s} \\<Longrightarrow>\n       set (non_wildcard_ifaces_upto (Suc n)) =\n       {s. length s \\<le> Suc n \\<and> \\<not> iface_name_is_wildcard s}", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       set (non_wildcard_ifaces_upto n) =\n       {s. length s \\<le> n \\<and>\n           \\<not> iface_name_is_wildcard s} \\<Longrightarrow>\n       set (non_wildcard_ifaces_upto (Suc n)) =\n       {s. length s \\<le> Suc n \\<and> \\<not> iface_name_is_wildcard s}", "using non_wildcard_ifaces"], ["proof (prove)\nusing this:\n  set (non_wildcard_ifaces ?n) =\n  {s. length s = ?n \\<and> \\<not> iface_name_is_wildcard s}\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       set (non_wildcard_ifaces_upto n) =\n       {s. length s \\<le> n \\<and>\n           \\<not> iface_name_is_wildcard s} \\<Longrightarrow>\n       set (non_wildcard_ifaces_upto (Suc n)) =\n       {s. length s \\<le> Suc n \\<and> \\<not> iface_name_is_wildcard s}", "by fastforce"], ["", "subsection\\<open>Negating Interfaces\\<close>"], ["", "private"], ["", "lemma inv_iface_name_set: \"- (internal_iface_name_to_set i) = (\n      if iface_name_is_wildcard i\n      then\n        {c |c. length c < length (butlast i)} \\<union> {c @ cs |c cs. length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n      else\n        {c | c. length c < length i} \\<union> {c@cs | c cs. length c \\<ge> length i \\<and> c \\<noteq> i}\n    )\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "fix i::string"], ["proof (state)\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "have inv_i_wildcard: \"- {i@cs | cs. True} = {c | c. length c < length i} \\<union> {c@cs | c cs. length c = length i \\<and> c \\<noteq> i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - {i @ cs |cs. True} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}", "apply(rule Set.equalityI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. - {i @ cs |cs. True}\n    \\<subseteq> {c |c. length c < length i} \\<union>\n                {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}\n 2. {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}\n    \\<subseteq> - {i @ cs |cs. True}", "prefer 2"], ["proof (prove)\ngoal (2 subgoals):\n 1. {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}\n    \\<subseteq> - {i @ cs |cs. True}\n 2. - {i @ cs |cs. True}\n    \\<subseteq> {c |c. length c < length i} \\<union>\n                {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}", "apply(safe)[1]"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x cs c.\n       \\<lbrakk>True; length (i @ cs) < length i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. \\<And>x cs c csa.\n       \\<lbrakk>True; i @ cs = c @ csa; length c = length i;\n        c \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> False\n 3. - {i @ cs |cs. True}\n    \\<subseteq> {c |c. length c < length i} \\<union>\n                {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}", "apply(simp;fail)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x cs c csa.\n       \\<lbrakk>True; i @ cs = c @ csa; length c = length i;\n        c \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> False\n 2. - {i @ cs |cs. True}\n    \\<subseteq> {c |c. length c < length i} \\<union>\n                {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - {i @ cs |cs. True}\n    \\<subseteq> {c |c. length c < length i} \\<union>\n                {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. - {uu_. \\<exists>cs. uu_ = i @ cs}\n    \\<subseteq> {uu_. length uu_ < length i} \\<union>\n                {uu_.\n                 \\<exists>c.\n                    (\\<exists>cs. uu_ = c @ cs) \\<and>\n                    length c = length i \\<and> c \\<noteq> i}", "apply(rule Compl_anti_mono[where B=\"{i @ cs |cs. True}\" and A=\"- ({c | c. length c < length i} \\<union> {c@cs | c cs. length c = length i \\<and> c \\<noteq> i})\", simplified])"], ["proof (prove)\ngoal (1 subgoal):\n 1. - {uu_. length uu_ < length i} \\<inter>\n    - {uu_.\n       \\<exists>c.\n          (\\<exists>cs. uu_ = c @ cs) \\<and>\n          length c = length i \\<and> c \\<noteq> i}\n    \\<subseteq> {uu_. \\<exists>cs. uu_ = i @ cs}", "apply(safe)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i;\n        \\<nexists>c.\n           (\\<exists>cs. x = c @ cs) \\<and>\n           length c = length i \\<and> c \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i;\n        \\<forall>c.\n           length c = length i \\<longrightarrow>\n           (\\<forall>cs. x \\<noteq> c @ cs) \\<or> c = i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs", "apply(case_tac \"(length i) = length x\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i;\n        \\<forall>c.\n           length c = length i \\<longrightarrow>\n           (\\<forall>cs. x \\<noteq> c @ cs) \\<or> c = i;\n        length i = length x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs\n 2. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i;\n        \\<forall>c.\n           length c = length i \\<longrightarrow>\n           (\\<forall>cs. x \\<noteq> c @ cs) \\<or> c = i;\n        length i \\<noteq> length x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs", "apply(erule_tac x=x in allE, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i;\n        \\<forall>c.\n           length c = length i \\<longrightarrow>\n           (\\<forall>cs. x \\<noteq> c @ cs) \\<or> c = i;\n        length i \\<noteq> length x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs", "apply(erule_tac x=\"take (length i) x\" in allE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i; length i \\<noteq> length x;\n        length (take (length i) x) = length i \\<longrightarrow>\n        (\\<forall>cs. x \\<noteq> take (length i) x @ cs) \\<or>\n        take (length i) x = i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs", "apply(simp add: min_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<not> length x < length i; length i \\<noteq> length x;\n        (\\<forall>cs. x \\<noteq> take (length i) x @ cs) \\<or>\n        take (length i) x = i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>cs. x = i @ cs", "by (metis append_take_drop_id)"], ["proof (state)\nthis:\n  - {i @ cs |cs. True} =\n  {c |c. length c < length i} \\<union>\n  {c @ cs |c cs. length c = length i \\<and> c \\<noteq> i}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "}"], ["proof (state)\nthis:\n  - {?ia2 @ cs |cs. True} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length c = length ?ia2 \\<and> c \\<noteq> ?ia2}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "note inv_i_wildcard=this"], ["proof (state)\nthis:\n  - {?ia2 @ cs |cs. True} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length c = length ?ia2 \\<and> c \\<noteq> ?ia2}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "{"], ["proof (state)\nthis:\n  - {?ia2 @ cs |cs. True} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length c = length ?ia2 \\<and> c \\<noteq> ?ia2}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "fix i::string"], ["proof (state)\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "have inv_i_nowildcard: \"- {i::string} = {c | c. length c < length i} \\<union> {c@cs | c cs. length c \\<ge> length i \\<and> c \\<noteq> i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "have x: \"{c | c. length c = length i \\<and> c \\<noteq> i}  \\<union> {c | c. length c > length i} = {c@cs | c cs. length c \\<ge> length i \\<and> c \\<noteq> i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n    {c |c. length i < length c} =\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "apply(safe)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x c.\n       \\<lbrakk>length c = length i; c \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ca cs.\n                            c = ca @ cs \\<and>\n                            length i \\<le> length ca \\<and> ca \\<noteq> i\n 2. \\<And>x c.\n       length i < length c \\<Longrightarrow>\n       \\<exists>ca cs.\n          c = ca @ cs \\<and> length i \\<le> length ca \\<and> ca \\<noteq> i\n 3. \\<And>x c cs.\n       \\<lbrakk>\\<nexists>ca. c @ cs = ca \\<and> length i < length ca;\n        length i \\<le> length c; c \\<noteq> i\\<rbrakk>\n       \\<Longrightarrow> \\<exists>ca.\n                            c @ cs = ca \\<and>\n                            length ca = length i \\<and> ca \\<noteq> i", "apply force+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n  {c |c. length i < length c} =\n  {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}\n\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "have \"- {i::string} = {c |c . c \\<noteq> i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. - {i} = {c |c. c \\<noteq> i}", "by(safe, simp)"], ["proof (state)\nthis:\n  - {i} = {c |c. c \\<noteq> i}\n\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "also"], ["proof (state)\nthis:\n  - {i} = {c |c. c \\<noteq> i}\n\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "have \"\\<dots> = {c | c. length c < length i} \\<union> {c | c. length c = length i \\<and> c \\<noteq> i}  \\<union> {c | c. length c > length i}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {c |c. c \\<noteq> i} =\n    {c |c. length c < length i} \\<union>\n    {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n    {c |c. length i < length c}", "by(auto)"], ["proof (state)\nthis:\n  {c |c. c \\<noteq> i} =\n  {c |c. length c < length i} \\<union>\n  {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n  {c |c. length i < length c}\n\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "finally"], ["proof (chain)\npicking this:\n  - {i} =\n  {c |c. length c < length i} \\<union>\n  {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n  {c |c. length i < length c}", "show ?thesis"], ["proof (prove)\nusing this:\n  - {i} =\n  {c |c. length c < length i} \\<union>\n  {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n  {c |c. length i < length c}\n\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "using x"], ["proof (prove)\nusing this:\n  - {i} =\n  {c |c. length c < length i} \\<union>\n  {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n  {c |c. length i < length c}\n  {c |c. length c = length i \\<and> c \\<noteq> i} \\<union>\n  {c |c. length i < length c} =\n  {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}\n\ngoal (1 subgoal):\n 1. - {i} =\n    {c |c. length c < length i} \\<union>\n    {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}", "by auto"], ["proof (state)\nthis:\n  - {i} =\n  {c |c. length c < length i} \\<union>\n  {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  - {i} =\n  {c |c. length c < length i} \\<union>\n  {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "}"], ["proof (state)\nthis:\n  - {?ia2} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length ?ia2 \\<le> length c \\<and> c \\<noteq> ?ia2}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "note inv_i_nowildcard=this"], ["proof (state)\nthis:\n  - {?ia2} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length ?ia2 \\<le> length c \\<and> c \\<noteq> ?ia2}\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "proof(cases \"iface_name_is_wildcard i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})\n 2. \\<not> iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "case True"], ["proof (state)\nthis:\n  iface_name_is_wildcard i\n\ngoal (2 subgoals):\n 1. iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})\n 2. \\<not> iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "with inv_i_wildcard"], ["proof (chain)\npicking this:\n  - {?ia2 @ cs |cs. True} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length c = length ?ia2 \\<and> c \\<noteq> ?ia2}\n  iface_name_is_wildcard i", "show ?thesis"], ["proof (prove)\nusing this:\n  - {?ia2 @ cs |cs. True} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length c = length ?ia2 \\<and> c \\<noteq> ?ia2}\n  iface_name_is_wildcard i\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "by force"], ["proof (state)\nthis:\n  - internal_iface_name_to_set i =\n  (if iface_name_is_wildcard i\n   then {c |c. length c < length (butlast i)} \\<union>\n        {c @ cs |c cs.\n         length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n   else {c |c. length c < length i} \\<union>\n        {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})\n\ngoal (1 subgoal):\n 1. \\<not> iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "case False"], ["proof (state)\nthis:\n  \\<not> iface_name_is_wildcard i\n\ngoal (1 subgoal):\n 1. \\<not> iface_name_is_wildcard i \\<Longrightarrow>\n    - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "with inv_i_nowildcard"], ["proof (chain)\npicking this:\n  - {?ia2} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length ?ia2 \\<le> length c \\<and> c \\<noteq> ?ia2}\n  \\<not> iface_name_is_wildcard i", "show ?thesis"], ["proof (prove)\nusing this:\n  - {?ia2} =\n  {c |c. length c < length ?ia2} \\<union>\n  {c @ cs |c cs. length ?ia2 \\<le> length c \\<and> c \\<noteq> ?ia2}\n  \\<not> iface_name_is_wildcard i\n\ngoal (1 subgoal):\n 1. - internal_iface_name_to_set i =\n    (if iface_name_is_wildcard i\n     then {c |c. length c < length (butlast i)} \\<union>\n          {c @ cs |c cs.\n           length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n     else {c |c. length c < length i} \\<union>\n          {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})", "by force"], ["proof (state)\nthis:\n  - internal_iface_name_to_set i =\n  (if iface_name_is_wildcard i\n   then {c |c. length c < length (butlast i)} \\<union>\n        {c @ cs |c cs.\n         length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n   else {c |c. length c < length i} \\<union>\n        {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  - internal_iface_name_to_set i =\n  (if iface_name_is_wildcard i\n   then {c |c. length c < length (butlast i)} \\<union>\n        {c @ cs |c cs.\n         length c = length (butlast i) \\<and> c \\<noteq> butlast i}\n   else {c |c. length c < length i} \\<union>\n        {c @ cs |c cs. length i \\<le> length c \\<and> c \\<noteq> i})\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>Negating is really not intuitive.\n          The Interface @{term \"''et''\"} is in the negated set of @{term \"''eth+''\"}.\n          And the Interface @{term \"''et+''\"} is also in this set! This is because @{term \"''+''\"}\n          is a normal interface character and not a wildcard here!\n          In contrast, the set described by @{term \"''et+''\"} (with @{term \"''+''\"} a wildcard)\n          is not a subset of the previously negated set.\\<close>"], ["", "lemma \"''et'' \\<in> - (internal_iface_name_to_set ''eth+'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''et'' \\<in> - internal_iface_name_to_set ''eth+''", "by(simp)"], ["", "lemma \"''et+'' \\<in> - (internal_iface_name_to_set ''eth+'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''et+'' \\<in> - internal_iface_name_to_set ''eth+''", "by(simp)"], ["", "lemma \"''+'' \\<in> - (internal_iface_name_to_set ''eth+'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''+'' \\<in> - internal_iface_name_to_set ''eth+''", "by(simp)"], ["", "lemma \"\\<not> {i. match_iface (Iface ''et+'') i} \\<subseteq> - (internal_iface_name_to_set ''eth+'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> {i. match_iface (Iface ''et+'') i}\n           \\<subseteq> - internal_iface_name_to_set ''eth+''", "by force"], ["", "text\\<open>Because @{term \"''+''\"} can appear as interface wildcard and normal interface character,\n          we cannot take negate an @{term \"Iface i\"} such that we get back @{typ \"iface list\"} which\n          describe the negated interface.\\<close>"], ["", "lemma \"''+'' \\<in> - (internal_iface_name_to_set ''eth+'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ''+'' \\<in> - internal_iface_name_to_set ''eth+''", "by(simp)"], ["", "fun compress_pos_interfaces :: \"iface list \\<Rightarrow> iface option\" where\n    \"compress_pos_interfaces [] = Some ifaceAny\" |\n    \"compress_pos_interfaces [i] = Some i\" |\n    \"compress_pos_interfaces (i1#i2#is) = (case iface_conjunct i1 i2 of None \\<Rightarrow> None | Some i \\<Rightarrow> compress_pos_interfaces (i#is))\""], ["", "lemma compress_pos_interfaces_Some: \"compress_pos_interfaces ifces = Some ifce \\<Longrightarrow> \n          match_iface ifce p_i \\<longleftrightarrow> (\\<forall> i\\<in> set ifces. match_iface i p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compress_pos_interfaces ifces = Some ifce \\<Longrightarrow>\n    match_iface ifce p_i = (\\<forall>i\\<in>set ifces. match_iface i p_i)", "proof(induction ifces rule: compress_pos_interfaces.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. compress_pos_interfaces [] = Some ifce \\<Longrightarrow>\n    match_iface ifce p_i = (\\<forall>i\\<in>set []. match_iface i p_i)\n 2. \\<And>i.\n       compress_pos_interfaces [i] = Some ifce \\<Longrightarrow>\n       match_iface ifce p_i = (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 3. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "case 1"], ["proof (state)\nthis:\n  compress_pos_interfaces [] = Some ifce\n\ngoal (3 subgoals):\n 1. compress_pos_interfaces [] = Some ifce \\<Longrightarrow>\n    match_iface ifce p_i = (\\<forall>i\\<in>set []. match_iface i p_i)\n 2. \\<And>i.\n       compress_pos_interfaces [i] = Some ifce \\<Longrightarrow>\n       match_iface ifce p_i = (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 3. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "thus ?case"], ["proof (prove)\nusing this:\n  compress_pos_interfaces [] = Some ifce\n\ngoal (1 subgoal):\n 1. match_iface ifce p_i = (\\<forall>i\\<in>set []. match_iface i p_i)", "by (simp add: match_ifaceAny)"], ["proof (state)\nthis:\n  match_iface ifce p_i = (\\<forall>i\\<in>set []. match_iface i p_i)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       compress_pos_interfaces [i] = Some ifce \\<Longrightarrow>\n       match_iface ifce p_i = (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 2. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       compress_pos_interfaces [i] = Some ifce \\<Longrightarrow>\n       match_iface ifce p_i = (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 2. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "case 2"], ["proof (state)\nthis:\n  compress_pos_interfaces [i_] = Some ifce\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       compress_pos_interfaces [i] = Some ifce \\<Longrightarrow>\n       match_iface ifce p_i = (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 2. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "thus ?case"], ["proof (prove)\nusing this:\n  compress_pos_interfaces [i_] = Some ifce\n\ngoal (1 subgoal):\n 1. match_iface ifce p_i = (\\<forall>i\\<in>set [i_]. match_iface i p_i)", "by simp"], ["proof (state)\nthis:\n  match_iface ifce p_i = (\\<forall>i\\<in>set [i_]. match_iface i p_i)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "case (3 i1 i2)"], ["proof (state)\nthis:\n  \\<lbrakk>iface_conjunct i1 i2 = Some ?x2.0;\n   compress_pos_interfaces (?x2.0 # is_) = Some ifce\\<rbrakk>\n  \\<Longrightarrow> match_iface ifce p_i =\n                    (\\<forall>i\\<in>set (?x2.0 # is_). match_iface i p_i)\n  compress_pos_interfaces (i1 # i2 # is_) = Some ifce\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (\\<forall>i\\<in>set (x2 # is).\n   match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = Some ifce\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (\\<forall>i\\<in>set (i1 # i2 # is).\n                             match_iface i p_i)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>iface_conjunct i1 i2 = Some ?x2.0;\n   compress_pos_interfaces (?x2.0 # is_) = Some ifce\\<rbrakk>\n  \\<Longrightarrow> match_iface ifce p_i =\n                    (\\<forall>i\\<in>set (?x2.0 # is_). match_iface i p_i)\n  compress_pos_interfaces (i1 # i2 # is_) = Some ifce\n\ngoal (1 subgoal):\n 1. match_iface ifce p_i =\n    (\\<forall>i\\<in>set (i1 # i2 # is_). match_iface i p_i)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                 compress_pos_interfaces (x2 # is_) = Some ifce\\<rbrakk>\n                \\<Longrightarrow> match_iface ifce p_i =\n                                  (match_iface x2 p_i \\<and>\n                                   (\\<forall>i\\<in>set is_.\n match_iface i p_i));\n     (case iface_conjunct i1 i2 of None \\<Rightarrow> None\n      | Some i \\<Rightarrow> compress_pos_interfaces (i # is_)) =\n     Some ifce\\<rbrakk>\n    \\<Longrightarrow> match_iface ifce p_i =\n                      (match_iface i1 p_i \\<and>\n                       match_iface i2 p_i \\<and>\n                       (\\<forall>i\\<in>set is_. match_iface i p_i))", "apply(case_tac \"iface_conjunct i1 i2\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>x2.\n                \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                 compress_pos_interfaces (x2 # is_) = Some ifce\\<rbrakk>\n                \\<Longrightarrow> match_iface ifce p_i =\n                                  (match_iface x2 p_i \\<and>\n                                   (\\<forall>i\\<in>set is_.\n match_iface i p_i));\n     (case iface_conjunct i1 i2 of None \\<Rightarrow> None\n      | Some i \\<Rightarrow> compress_pos_interfaces (i # is_)) =\n     Some ifce;\n     iface_conjunct i1 i2 = None\\<rbrakk>\n    \\<Longrightarrow> match_iface ifce p_i =\n                      (match_iface i1 p_i \\<and>\n                       match_iface i2 p_i \\<and>\n                       (\\<forall>i\\<in>set is_. match_iface i p_i))\n 2. \\<And>a.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is_) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (match_iface x2 p_i \\<and>\n(\\<forall>i\\<in>set is_. match_iface i p_i));\n        (case iface_conjunct i1 i2 of None \\<Rightarrow> None\n         | Some i \\<Rightarrow> compress_pos_interfaces (i # is_)) =\n        Some ifce;\n        iface_conjunct i1 i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (match_iface i1 p_i \\<and>\n                          match_iface i2 p_i \\<and>\n                          (\\<forall>i\\<in>set is_. match_iface i p_i))", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is_) = Some ifce\\<rbrakk>\n                   \\<Longrightarrow> match_iface ifce p_i =\n                                     (match_iface x2 p_i \\<and>\n(\\<forall>i\\<in>set is_. match_iface i p_i));\n        (case iface_conjunct i1 i2 of None \\<Rightarrow> None\n         | Some i \\<Rightarrow> compress_pos_interfaces (i # is_)) =\n        Some ifce;\n        iface_conjunct i1 i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> match_iface ifce p_i =\n                         (match_iface i1 p_i \\<and>\n                          match_iface i2 p_i \\<and>\n                          (\\<forall>i\\<in>set is_. match_iface i p_i))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_iface ifce p_i =\n                (match_iface a p_i \\<and>\n                 (\\<forall>i\\<in>set is_. match_iface i p_i));\n        compress_pos_interfaces (a # is_) = Some ifce;\n        iface_conjunct i1 i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> (match_iface a p_i \\<and>\n                          (\\<forall>i\\<in>set is_. match_iface i p_i)) =\n                         (match_iface i1 p_i \\<and>\n                          match_iface i2 p_i \\<and>\n                          (\\<forall>i\\<in>set is_. match_iface i p_i))", "using iface_conjunct_Some"], ["proof (prove)\nusing this:\n  iface_conjunct ?i1.0 ?i2.0 = Some ?x \\<Longrightarrow>\n  match_iface ?x ?p_i =\n  (match_iface ?i1.0 ?p_i \\<and> match_iface ?i2.0 ?p_i)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_iface ifce p_i =\n                (match_iface a p_i \\<and>\n                 (\\<forall>i\\<in>set is_. match_iface i p_i));\n        compress_pos_interfaces (a # is_) = Some ifce;\n        iface_conjunct i1 i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> (match_iface a p_i \\<and>\n                          (\\<forall>i\\<in>set is_. match_iface i p_i)) =\n                         (match_iface i1 p_i \\<and>\n                          match_iface i2 p_i \\<and>\n                          (\\<forall>i\\<in>set is_. match_iface i p_i))", "by presburger"], ["proof (state)\nthis:\n  match_iface ifce p_i =\n  (\\<forall>i\\<in>set (i1 # i2 # is_). match_iface i p_i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma compress_pos_interfaces_None: \"compress_pos_interfaces ifces = None \\<Longrightarrow> \n          \\<not> (\\<forall> i\\<in> set ifces. match_iface i p_i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. compress_pos_interfaces ifces = None \\<Longrightarrow>\n    \\<not> (\\<forall>i\\<in>set ifces. match_iface i p_i)", "proof(induction ifces rule: compress_pos_interfaces.induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. compress_pos_interfaces [] = None \\<Longrightarrow>\n    \\<not> (\\<forall>i\\<in>set []. match_iface i p_i)\n 2. \\<And>i.\n       compress_pos_interfaces [i] = None \\<Longrightarrow>\n       \\<not> (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 3. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "case 1"], ["proof (state)\nthis:\n  compress_pos_interfaces [] = None\n\ngoal (3 subgoals):\n 1. compress_pos_interfaces [] = None \\<Longrightarrow>\n    \\<not> (\\<forall>i\\<in>set []. match_iface i p_i)\n 2. \\<And>i.\n       compress_pos_interfaces [i] = None \\<Longrightarrow>\n       \\<not> (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 3. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "thus ?case"], ["proof (prove)\nusing this:\n  compress_pos_interfaces [] = None\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i\\<in>set []. match_iface i p_i)", "by (simp add: match_ifaceAny)"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i\\<in>set []. match_iface i p_i)\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       compress_pos_interfaces [i] = None \\<Longrightarrow>\n       \\<not> (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 2. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       compress_pos_interfaces [i] = None \\<Longrightarrow>\n       \\<not> (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 2. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "case 2"], ["proof (state)\nthis:\n  compress_pos_interfaces [i_] = None\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       compress_pos_interfaces [i] = None \\<Longrightarrow>\n       \\<not> (\\<forall>i\\<in>set [i]. match_iface i p_i)\n 2. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "thus ?case"], ["proof (prove)\nusing this:\n  compress_pos_interfaces [i_] = None\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i\\<in>set [i_]. match_iface i p_i)", "by simp"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i\\<in>set [i_]. match_iface i p_i)\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "case (3 i1 i2)"], ["proof (state)\nthis:\n  \\<lbrakk>iface_conjunct i1 i2 = Some ?x2.0;\n   compress_pos_interfaces (?x2.0 # is_) = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (?x2.0 # is_).\n                               match_iface i p_i)\n  compress_pos_interfaces (i1 # i2 # is_) = None\n\ngoal (1 subgoal):\n 1. \\<And>i1 i2 is.\n       \\<lbrakk>\\<And>x2.\n                   \\<lbrakk>iface_conjunct i1 i2 = Some x2;\n                    compress_pos_interfaces (x2 # is) = None\\<rbrakk>\n                   \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (x2 # is).\n          match_iface i p_i);\n        compress_pos_interfaces (i1 # i2 # is) = None\\<rbrakk>\n       \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (i1 # i2 # is).\n                                    match_iface i p_i)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>iface_conjunct i1 i2 = Some ?x2.0;\n   compress_pos_interfaces (?x2.0 # is_) = None\\<rbrakk>\n  \\<Longrightarrow> \\<not> (\\<forall>i\\<in>set (?x2.0 # is_).\n                               match_iface i p_i)\n  compress_pos_interfaces (i1 # i2 # is_) = None\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i\\<in>set (i1 # i2 # is_). match_iface i p_i)", "apply(cases \"iface_conjunct i1 i2\", simp_all)"], ["proof (prove)\ngoal (2 subgoals):\n 1. iface_conjunct i1 i2 = None \\<Longrightarrow>\n    match_iface i2 p_i \\<longrightarrow>\n    match_iface i1 p_i \\<longrightarrow>\n    (\\<exists>i\\<in>set is_. \\<not> match_iface i p_i)\n 2. \\<And>a.\n       \\<lbrakk>match_iface a p_i \\<longrightarrow>\n                (\\<exists>i\\<in>set is_. \\<not> match_iface i p_i);\n        compress_pos_interfaces (a # is_) = None;\n        iface_conjunct i1 i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> match_iface i2 p_i \\<longrightarrow>\n                         match_iface i1 p_i \\<longrightarrow>\n                         (\\<exists>i\\<in>set is_. \\<not> match_iface i p_i)", "apply (blast dest: iface_conjunct_None)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>match_iface a p_i \\<longrightarrow>\n                (\\<exists>i\\<in>set is_. \\<not> match_iface i p_i);\n        compress_pos_interfaces (a # is_) = None;\n        iface_conjunct i1 i2 = Some a\\<rbrakk>\n       \\<Longrightarrow> match_iface i2 p_i \\<longrightarrow>\n                         match_iface i1 p_i \\<longrightarrow>\n                         (\\<exists>i\\<in>set is_. \\<not> match_iface i p_i)", "by (blast dest: iface_conjunct_Some)"], ["proof (state)\nthis:\n  \\<not> (\\<forall>i\\<in>set (i1 # i2 # is_). match_iface i p_i)\n\ngoal:\nNo subgoals!", "qed"], ["", "declare match_iface.simps[simp del]"], ["", "declare iface_name_is_wildcard.simps[simp del]"], ["", "end"], ["", "end"]]}