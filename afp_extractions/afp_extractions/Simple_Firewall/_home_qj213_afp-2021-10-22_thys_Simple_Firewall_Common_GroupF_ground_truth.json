{"file_name": "/home/qj213/afp-2021-10-22/thys/Simple_Firewall/Common/GroupF.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simple_Firewall", "problem_names": ["lemma partition_tailrec: \"partition_tailrec f as =  (filter f as,  filter (\\<lambda>x. \\<not>f x) as)\"", "lemma\n    \"groupF f (x#xs) = (let (ts, fs) = partition_tailrec (\\<lambda>y. f x = f y) xs in (x#ts)#(groupF f fs))\"", "lemma groupF_code[code]: \"groupF f as = groupF_code f as\"", "lemma groupF_concat_set: \"set (concat (groupF f xs)) = set xs\"", "lemma groupF_Union_set: \"(\\<Union>x \\<in> set (groupF f xs). set x) = set xs\"", "lemma groupF_set: \"\\<forall>X \\<in> set (groupF f xs). \\<forall>x \\<in> set X. x \\<in> set xs\"", "lemma groupF_equality:\n  defines \"same f A \\<equiv> \\<forall>a1 \\<in> set A. \\<forall>a2 \\<in> set A. f a1 = f a2\"\n  shows \"\\<forall>A \\<in> set (groupF f xs). same f A\"", "lemma groupF_nequality: \"A \\<in> set (groupF f xs) \\<Longrightarrow> B \\<in> set (groupF f xs) \\<Longrightarrow> A \\<noteq> B \\<Longrightarrow>\n     \\<forall>a \\<in> set A. \\<forall>b \\<in> set B. f a \\<noteq> f b\"", "lemma groupF_cong: fixes xs::\"'a list\" and f1::\"'a \\<Rightarrow> 'b\" and f2::\"'a \\<Rightarrow> 'c\"\n  assumes \"\\<forall>x \\<in> set xs. \\<forall>y \\<in> set xs. (f1 x = f1 y \\<longleftrightarrow> f2 x = f2 y)\"\n  shows \"groupF f1 xs = groupF f2 xs\"", "lemma groupF_empty: \"groupF f xs \\<noteq> [] \\<longleftrightarrow> xs \\<noteq> []\"", "lemma groupF_empty_elem: \"x \\<in> set (groupF f xs) \\<Longrightarrow> x \\<noteq> []\"", "lemma groupF_distinct: \"distinct xs \\<Longrightarrow> distinct (concat (groupF f xs))\"", "lemma groupF_tuple: \"groupF f xs = map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) xs))\""], "translations": [["", "lemma partition_tailrec: \"partition_tailrec f as =  (filter f as,  filter (\\<lambda>x. \\<not>f x) as)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "fix ts_accu fs_accu"], ["proof (state)\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "have \"foldr (select_p_tuple f) as (ts_accu, fs_accu) =\n              (filter f as @ ts_accu,  filter (\\<lambda>x. \\<not>f x) as @ fs_accu)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr (select_p_tuple f) as (ts_accu, fs_accu) =\n    (filter f as @ ts_accu, filter (\\<lambda>x. \\<not> f x) as @ fs_accu)", "by(induction as arbitrary: ts_accu fs_accu) simp_all"], ["proof (state)\nthis:\n  foldr (select_p_tuple f) as (ts_accu, fs_accu) =\n  (filter f as @ ts_accu, filter (\\<lambda>x. \\<not> f x) as @ fs_accu)\n\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "}"], ["proof (state)\nthis:\n  foldr (select_p_tuple f) as (?ts_accu2, ?fs_accu2) =\n  (filter f as @ ?ts_accu2, filter (\\<lambda>x. \\<not> f x) as @ ?fs_accu2)\n\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "thus ?thesis"], ["proof (prove)\nusing this:\n  foldr (select_p_tuple f) as (?ts_accu2, ?fs_accu2) =\n  (filter f as @ ?ts_accu2, filter (\\<lambda>x. \\<not> f x) as @ ?fs_accu2)\n\ngoal (1 subgoal):\n 1. partition_tailrec f as =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "unfolding partition_tailrec_def"], ["proof (prove)\nusing this:\n  foldr (select_p_tuple f) as (?ts_accu2, ?fs_accu2) =\n  (filter f as @ ?ts_accu2, filter (\\<lambda>x. \\<not> f x) as @ ?fs_accu2)\n\ngoal (1 subgoal):\n 1. foldr (select_p_tuple f) as ([], []) =\n    (filter f as, filter (\\<lambda>x. \\<not> f x) as)", "by simp"], ["proof (state)\nthis:\n  partition_tailrec f as = (filter f as, filter (\\<lambda>x. \\<not> f x) as)\n\ngoal:\nNo subgoals!", "qed"], ["", "private"], ["", "lemma\n    \"groupF f (x#xs) = (let (ts, fs) = partition_tailrec (\\<lambda>y. f x = f y) xs in (x#ts)#(groupF f fs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. groupF f (x # xs) =\n    (let (ts, fs) = partition_tailrec (\\<lambda>y. f x = f y) xs\n     in (x # ts) # groupF f fs)", "by(simp add: partition_tailrec)"], ["", "(*is this more efficient?*)\n  private"], ["", "function groupF_code ::  \"('a \\<Rightarrow> 'b) \\<Rightarrow> 'a list \\<Rightarrow> 'a list list\"  where\n    \"groupF_code f [] = []\" |\n    \"groupF_code f (x#xs) = (let\n                               (ts, fs) = partition_tailrec (\\<lambda>y. f x = f y) xs\n                             in\n                               (x#ts)#(groupF_code f fs))\""], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>f. x = (f, []) \\<Longrightarrow> P;\n        \\<And>f xa xs. x = (f, xa # xs) \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>f fa. (f, []) = (fa, []) \\<Longrightarrow> [] = []\n 3. \\<And>f fa x xs.\n       (f, []) = (fa, x # xs) \\<Longrightarrow>\n       [] =\n       (let (ts, fs) = partition_tailrec (\\<lambda>y. fa x = fa y) xs\n        in (x # ts) # groupF_code_sumC (fa, fs))\n 4. \\<And>f x xs fa xa xsa.\n       (f, x # xs) = (fa, xa # xsa) \\<Longrightarrow>\n       (let (ts, fs) = partition_tailrec (\\<lambda>y. f x = f y) xs\n        in (x # ts) # groupF_code_sumC (f, fs)) =\n       (let (ts, fs) = partition_tailrec (\\<lambda>y. fa xa = fa y) xsa\n        in (xa # ts) # groupF_code_sumC (fa, fs))", "by(pat_completeness) auto"], ["", "private"], ["", "termination groupF_code"], ["proof (prove)\ngoal (1 subgoal):\n 1. All groupF_code_dom", "apply(relation \"measure (\\<lambda>(f,as). length (filter (\\<lambda>x. (\\<lambda>y. f x = f y) x) as))\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. wf (measure\n         (\\<lambda>(f, as). length (filter (\\<lambda>x. f x = f x) as)))\n 2. \\<And>f x xs xa xb y.\n       \\<lbrakk>xa = partition_tailrec (\\<lambda>y. f x = f y) xs;\n        (xb, y) = xa\\<rbrakk>\n       \\<Longrightarrow> ((f, y), f, x # xs)\n                         \\<in> measure\n                                (\\<lambda>(f, as).\n                                    length\n                                     (filter (\\<lambda>x. f x = f x) as))", "apply(simp; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xs xa xb y.\n       \\<lbrakk>xa = partition_tailrec (\\<lambda>y. f x = f y) xs;\n        (xb, y) = xa\\<rbrakk>\n       \\<Longrightarrow> ((f, y), f, x # xs)\n                         \\<in> measure\n                                (\\<lambda>(f, as).\n                                    length\n                                     (filter (\\<lambda>x. f x = f x) as))", "apply(simp add: partition_tailrec)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f x xs xa xb.\n       \\<lbrakk>xa =\n                (filter (\\<lambda>y. f x = f y) xs,\n                 filter (\\<lambda>xa. f x \\<noteq> f xa) xs);\n        xb = filter (\\<lambda>y. f x = f y) xs\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>xa. f x \\<noteq> f xa) xs)\n                         < Suc (length xs)", "using le_imp_less_Suc length_filter_le"], ["proof (prove)\nusing this:\n  ?m \\<le> ?n \\<Longrightarrow> ?m < Suc ?n\n  length (filter ?P ?xs) \\<le> length ?xs\n\ngoal (1 subgoal):\n 1. \\<And>f x xs xa xb.\n       \\<lbrakk>xa =\n                (filter (\\<lambda>y. f x = f y) xs,\n                 filter (\\<lambda>xa. f x \\<noteq> f xa) xs);\n        xb = filter (\\<lambda>y. f x = f y) xs\\<rbrakk>\n       \\<Longrightarrow> length (filter (\\<lambda>xa. f x \\<noteq> f xa) xs)\n                         < Suc (length xs)", "by blast"], ["", "lemma groupF_code[code]: \"groupF f as = groupF_code f as\""], ["proof (prove)\ngoal (1 subgoal):\n 1. groupF f as = groupF_code f as", "by(induction f as rule: groupF_code.induct) (simp_all add: partition_tailrec)"], ["", "export_code groupF checking SML"], ["", "end"], ["", "lemma groupF_concat_set: \"set (concat (groupF f xs)) = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (concat (groupF f xs)) = set xs", "proof(induction f xs rule: groupF.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. set (concat (groupF f [])) = set []\n 2. \\<And>f x xs.\n       set (concat (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs))) =\n       set (filter (\\<lambda>y. f x \\<noteq> f y) xs) \\<Longrightarrow>\n       set (concat (groupF f (x # xs))) = set (x # xs)", "case 2"], ["proof (state)\nthis:\n  set (concat (groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_))) =\n  set (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_)\n\ngoal (2 subgoals):\n 1. \\<And>f. set (concat (groupF f [])) = set []\n 2. \\<And>f x xs.\n       set (concat (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs))) =\n       set (filter (\\<lambda>y. f x \\<noteq> f y) xs) \\<Longrightarrow>\n       set (concat (groupF f (x # xs))) = set (x # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  set (concat (groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_))) =\n  set (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_)\n\ngoal (1 subgoal):\n 1. set (concat (groupF f_ (x_ # xs_))) = set (x_ # xs_)", "by (simp) blast"], ["proof (state)\nthis:\n  set (concat (groupF f_ (x_ # xs_))) = set (x_ # xs_)\n\ngoal (1 subgoal):\n 1. \\<And>f. set (concat (groupF f [])) = set []", "qed(simp)"], ["", "lemma groupF_Union_set: \"(\\<Union>x \\<in> set (groupF f xs). set x) = set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Union> (set ` set (groupF f xs)) = set xs", "proof(induction f xs rule: groupF.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. \\<Union> (set ` set (groupF f [])) = set []\n 2. \\<And>f x xs.\n       \\<Union>\n        (set ` set (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs))) =\n       set (filter (\\<lambda>y. f x \\<noteq> f y) xs) \\<Longrightarrow>\n       \\<Union> (set ` set (groupF f (x # xs))) = set (x # xs)", "case 2"], ["proof (state)\nthis:\n  \\<Union>\n   (set ` set (groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_))) =\n  set (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_)\n\ngoal (2 subgoals):\n 1. \\<And>f. \\<Union> (set ` set (groupF f [])) = set []\n 2. \\<And>f x xs.\n       \\<Union>\n        (set ` set (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs))) =\n       set (filter (\\<lambda>y. f x \\<noteq> f y) xs) \\<Longrightarrow>\n       \\<Union> (set ` set (groupF f (x # xs))) = set (x # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<Union>\n   (set ` set (groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_))) =\n  set (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_)\n\ngoal (1 subgoal):\n 1. \\<Union> (set ` set (groupF f_ (x_ # xs_))) = set (x_ # xs_)", "by (simp) blast"], ["proof (state)\nthis:\n  \\<Union> (set ` set (groupF f_ (x_ # xs_))) = set (x_ # xs_)\n\ngoal (1 subgoal):\n 1. \\<And>f. \\<Union> (set ` set (groupF f [])) = set []", "qed(simp)"], ["", "lemma groupF_set: \"\\<forall>X \\<in> set (groupF f xs). \\<forall>x \\<in> set X. x \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>set (groupF f xs). \\<forall>x\\<in>set X. x \\<in> set xs", "using groupF_concat_set"], ["proof (prove)\nusing this:\n  set (concat (groupF ?f ?xs)) = set ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>X\\<in>set (groupF f xs). \\<forall>x\\<in>set X. x \\<in> set xs", "by fastforce"], ["", "lemma groupF_equality:\n  defines \"same f A \\<equiv> \\<forall>a1 \\<in> set A. \\<forall>a2 \\<in> set A. f a1 = f a2\"\n  shows \"\\<forall>A \\<in> set (groupF f xs). same f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set (groupF f xs). same f A", "proof(induction f xs rule: groupF.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f. \\<forall>A\\<in>set (groupF f []). same f A\n 2. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "case 1"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f. \\<forall>A\\<in>set (groupF f []). same f A\n 2. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set (groupF f_ []). same f_ A", "by simp"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set (groupF f_ []). same f_ A\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "case (2 f x xs)"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n     same f A\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "have groupF_fst:\n        \"groupF f (x # xs) = (x # [y\\<leftarrow>xs . f x = f y]) # groupF f [y\\<leftarrow>xs . f x \\<noteq> f y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. groupF f (x # xs) =\n    (x # filter (\\<lambda>y. f x = f y) xs) #\n    groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs)", "by force"], ["proof (state)\nthis:\n  groupF f (x # xs) =\n  (x # filter (\\<lambda>y. f x = f y) xs) #\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs)\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "have step: \" \\<forall>A\\<in>set [x # [y\\<leftarrow>xs . f x = f y]]. same f A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set [x # filter (\\<lambda>y. f x = f y) xs]. same f A", "unfolding same_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set [x # filter (\\<lambda>y. f x = f y) xs].\n       \\<forall>a1\\<in>set A. \\<forall>a2\\<in>set A. f a1 = f a2", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set [x # filter (\\<lambda>y. f x = f y) xs]. same f A\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<forall>A\\<in>set (groupF f\n                            (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n          same f A \\<Longrightarrow>\n       \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "with 2"], ["proof (chain)\npicking this:\n  \\<forall>A\\<in>set (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n     same f A\n  \\<forall>A\\<in>set [x # filter (\\<lambda>y. f x = f y) xs]. same f A", "show ?case"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n     same f A\n  \\<forall>A\\<in>set [x # filter (\\<lambda>y. f x = f y) xs]. same f A\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set (groupF f (x # xs)). same f A", "unfolding groupF_fst"], ["proof (prove)\nusing this:\n  \\<forall>A\\<in>set (groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n     same f A\n  \\<forall>A\\<in>set [x # filter (\\<lambda>y. f x = f y) xs]. same f A\n\ngoal (1 subgoal):\n 1. \\<forall>A\\<in>set ((x # filter (\\<lambda>y. f x = f y) xs) #\n                        groupF f\n                         (filter (\\<lambda>y. f x \\<noteq> f y) xs)).\n       same f A", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>A\\<in>set (groupF f (x # xs)). same f A\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma groupF_nequality: \"A \\<in> set (groupF f xs) \\<Longrightarrow> B \\<in> set (groupF f xs) \\<Longrightarrow> A \\<noteq> B \\<Longrightarrow>\n     \\<forall>a \\<in> set A. \\<forall>b \\<in> set B. f a \\<noteq> f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>A \\<in> set (groupF f xs); B \\<in> set (groupF f xs);\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>set A.\n                         \\<forall>b\\<in>set B. f a \\<noteq> f b", "proof(induction f xs rule: groupF.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A \\<in> set (groupF f []); B \\<in> set (groupF f []);\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b\n 2. \\<And>f x xs.\n       \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f\n (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 B \\<in> set (groupF f\n                               (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 A \\<noteq> B\\<rbrakk>\n                \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                     \\<forall>b\\<in>set B. f a \\<noteq> f b;\n        A \\<in> set (groupF f (x # xs)); B \\<in> set (groupF f (x # xs));\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b", "case 1"], ["proof (state)\nthis:\n  A \\<in> set (groupF f_ [])\n  B \\<in> set (groupF f_ [])\n  A \\<noteq> B\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<lbrakk>A \\<in> set (groupF f []); B \\<in> set (groupF f []);\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b\n 2. \\<And>f x xs.\n       \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f\n (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 B \\<in> set (groupF f\n                               (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 A \\<noteq> B\\<rbrakk>\n                \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                     \\<forall>b\\<in>set B. f a \\<noteq> f b;\n        A \\<in> set (groupF f (x # xs)); B \\<in> set (groupF f (x # xs));\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b", "thus ?case"], ["proof (prove)\nusing this:\n  A \\<in> set (groupF f_ [])\n  B \\<in> set (groupF f_ [])\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set A. \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b", "by simp"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set A. \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f\n (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 B \\<in> set (groupF f\n                               (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 A \\<noteq> B\\<rbrakk>\n                \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                     \\<forall>b\\<in>set B. f a \\<noteq> f b;\n        A \\<in> set (groupF f (x # xs)); B \\<in> set (groupF f (x # xs));\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f\n (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 B \\<in> set (groupF f\n                               (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 A \\<noteq> B\\<rbrakk>\n                \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                     \\<forall>b\\<in>set B. f a \\<noteq> f b;\n        A \\<in> set (groupF f (x # xs)); B \\<in> set (groupF f (x # xs));\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b", "case 2"], ["proof (state)\nthis:\n  \\<lbrakk>A \\<in> set (groupF f_\n                         (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n   B \\<in> set (groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n   A \\<noteq> B\\<rbrakk>\n  \\<Longrightarrow> \\<forall>a\\<in>set A.\n                       \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b\n  A \\<in> set (groupF f_ (x_ # xs_))\n  B \\<in> set (groupF f_ (x_ # xs_))\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f\n (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 B \\<in> set (groupF f\n                               (filter (\\<lambda>y. f x \\<noteq> f y) xs));\n                 A \\<noteq> B\\<rbrakk>\n                \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                     \\<forall>b\\<in>set B. f a \\<noteq> f b;\n        A \\<in> set (groupF f (x # xs)); B \\<in> set (groupF f (x # xs));\n        A \\<noteq> B\\<rbrakk>\n       \\<Longrightarrow> \\<forall>a\\<in>set A.\n                            \\<forall>b\\<in>set B. f a \\<noteq> f b", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>A \\<in> set (groupF f_\n                         (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n   B \\<in> set (groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n   A \\<noteq> B\\<rbrakk>\n  \\<Longrightarrow> \\<forall>a\\<in>set A.\n                       \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b\n  A \\<in> set (groupF f_ (x_ # xs_))\n  B \\<in> set (groupF f_ (x_ # xs_))\n  A \\<noteq> B\n\ngoal (1 subgoal):\n 1. \\<forall>a\\<in>set A. \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b", "apply -"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f_\n                                    (filter\n(\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n              B \\<in> set (groupF f_\n                            (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n              A \\<noteq> B\\<rbrakk>\n             \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                  \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b;\n     A \\<in> set (groupF f_ (x_ # xs_)); B \\<in> set (groupF f_ (x_ # xs_));\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>set A.\n                         \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b", "apply(subst (asm) groupF.simps)+"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f_\n                                    (filter\n(\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n              B \\<in> set (groupF f_\n                            (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n              A \\<noteq> B\\<rbrakk>\n             \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                  \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b;\n     A \\<in> set ((x_ # filter (\\<lambda>y. f_ x_ = f_ y) xs_) #\n                  groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n     B \\<in> set ((x_ # filter (\\<lambda>y. f_ x_ = f_ y) xs_) #\n                  groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>set A.\n                         \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b", "using groupF_set"], ["proof (prove)\nusing this:\n  \\<forall>X\\<in>set (groupF ?f ?xs). \\<forall>x\\<in>set X. x \\<in> set ?xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<lbrakk>A \\<in> set (groupF f_\n                                    (filter\n(\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n              B \\<in> set (groupF f_\n                            (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n              A \\<noteq> B\\<rbrakk>\n             \\<Longrightarrow> \\<forall>a\\<in>set A.\n                                  \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b;\n     A \\<in> set ((x_ # filter (\\<lambda>y. f_ x_ = f_ y) xs_) #\n                  groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n     B \\<in> set ((x_ # filter (\\<lambda>y. f_ x_ = f_ y) xs_) #\n                  groupF f_ (filter (\\<lambda>y. f_ x_ \\<noteq> f_ y) xs_));\n     A \\<noteq> B\\<rbrakk>\n    \\<Longrightarrow> \\<forall>a\\<in>set A.\n                         \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set A. \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b\n\ngoal:\nNo subgoals!", "(*1s*)"], ["proof (state)\nthis:\n  \\<forall>a\\<in>set A. \\<forall>b\\<in>set B. f_ a \\<noteq> f_ b\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma groupF_cong: fixes xs::\"'a list\" and f1::\"'a \\<Rightarrow> 'b\" and f2::\"'a \\<Rightarrow> 'c\"\n  assumes \"\\<forall>x \\<in> set xs. \\<forall>y \\<in> set xs. (f1 x = f1 y \\<longleftrightarrow> f2 x = f2 y)\"\n  shows \"groupF f1 xs = groupF f2 xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. groupF f1 xs = groupF f2 xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs.\n     \\<forall>y\\<in>set xs. (f1 x = f1 y) = (f2 x = f2 y)\n\ngoal (1 subgoal):\n 1. groupF f1 xs = groupF f2 xs", "proof(induction f1 xs rule: groupF.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<forall>x\\<in>set [].\n          \\<forall>y\\<in>set [].\n             (f x = f y) = (f2 x = f2 y) \\<Longrightarrow>\n       groupF f [] = groupF f2 []\n 2. \\<And>f x xs.\n       \\<lbrakk>\\<forall>xa\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y)\nxs).\n                   \\<forall>y\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y)\n  xs).\n                      (f xa = f y) = (f2 xa = f2 y) \\<Longrightarrow>\n                groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n                groupF f2 (filter (\\<lambda>y. f x \\<noteq> f y) xs);\n        \\<forall>xa\\<in>set (x # xs).\n           \\<forall>y\\<in>set (x # xs).\n              (f xa = f y) = (f2 xa = f2 y)\\<rbrakk>\n       \\<Longrightarrow> groupF f (x # xs) = groupF f2 (x # xs)", "case (2 f x xs)"], ["proof (state)\nthis:\n  \\<forall>xa\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y) xs).\n     \\<forall>y\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y) xs).\n        (f xa = f y) = (f2 xa = f2 y) \\<Longrightarrow>\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  groupF f2 (filter (\\<lambda>y. f x \\<noteq> f y) xs)\n  \\<forall>xa\\<in>set (x # xs).\n     \\<forall>y\\<in>set (x # xs). (f xa = f y) = (f2 xa = f2 y)\n\ngoal (2 subgoals):\n 1. \\<And>f.\n       \\<forall>x\\<in>set [].\n          \\<forall>y\\<in>set [].\n             (f x = f y) = (f2 x = f2 y) \\<Longrightarrow>\n       groupF f [] = groupF f2 []\n 2. \\<And>f x xs.\n       \\<lbrakk>\\<forall>xa\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y)\nxs).\n                   \\<forall>y\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y)\n  xs).\n                      (f xa = f y) = (f2 xa = f2 y) \\<Longrightarrow>\n                groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n                groupF f2 (filter (\\<lambda>y. f x \\<noteq> f y) xs);\n        \\<forall>xa\\<in>set (x # xs).\n           \\<forall>y\\<in>set (x # xs).\n              (f xa = f y) = (f2 xa = f2 y)\\<rbrakk>\n       \\<Longrightarrow> groupF f (x # xs) = groupF f2 (x # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  \\<forall>xa\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y) xs).\n     \\<forall>y\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y) xs).\n        (f xa = f y) = (f2 xa = f2 y) \\<Longrightarrow>\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  groupF f2 (filter (\\<lambda>y. f x \\<noteq> f y) xs)\n  \\<forall>xa\\<in>set (x # xs).\n     \\<forall>y\\<in>set (x # xs). (f xa = f y) = (f2 xa = f2 y)\n\ngoal (1 subgoal):\n 1. groupF f (x # xs) = groupF f2 (x # xs)", "using filter_cong[of xs xs \"\\<lambda>y. f x = f y\" \"\\<lambda>y. f2 x = f2 y\"]\n                                     filter_cong[of xs xs \"\\<lambda>y. f x \\<noteq> f y\" \"\\<lambda>y. f2 x \\<noteq> f2 y\"]"], ["proof (prove)\nusing this:\n  \\<forall>xa\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y) xs).\n     \\<forall>y\\<in>set (filter (\\<lambda>y. f x \\<noteq> f y) xs).\n        (f xa = f y) = (f2 xa = f2 y) \\<Longrightarrow>\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  groupF f2 (filter (\\<lambda>y. f x \\<noteq> f y) xs)\n  \\<forall>xa\\<in>set (x # xs).\n     \\<forall>y\\<in>set (x # xs). (f xa = f y) = (f2 xa = f2 y)\n  \\<lbrakk>xs = xs;\n   \\<And>xa.\n      xa \\<in> set xs \\<Longrightarrow>\n      (f x = f xa) = (f2 x = f2 xa)\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>y. f x = f y) xs =\n                    filter (\\<lambda>y. f2 x = f2 y) xs\n  \\<lbrakk>xs = xs;\n   \\<And>xa.\n      xa \\<in> set xs \\<Longrightarrow>\n      (f x \\<noteq> f xa) = (f2 x \\<noteq> f2 xa)\\<rbrakk>\n  \\<Longrightarrow> filter (\\<lambda>y. f x \\<noteq> f y) xs =\n                    filter (\\<lambda>y. f2 x \\<noteq> f2 y) xs\n\ngoal (1 subgoal):\n 1. groupF f (x # xs) = groupF f2 (x # xs)", "by auto"], ["proof (state)\nthis:\n  groupF f (x # xs) = groupF f2 (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>f.\n       \\<forall>x\\<in>set [].\n          \\<forall>y\\<in>set [].\n             (f x = f y) = (f2 x = f2 y) \\<Longrightarrow>\n       groupF f [] = groupF f2 []", "qed (simp)"], ["", "lemma groupF_empty: \"groupF f xs \\<noteq> [] \\<longleftrightarrow> xs \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (groupF f xs \\<noteq> []) = (xs \\<noteq> [])", "by(induction f xs rule: groupF.induct) auto"], ["", "lemma groupF_empty_elem: \"x \\<in> set (groupF f xs) \\<Longrightarrow> x \\<noteq> []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> set (groupF f xs) \\<Longrightarrow> x \\<noteq> []", "by(induction f xs rule: groupF.induct) auto"], ["", "lemma groupF_distinct: \"distinct xs \\<Longrightarrow> distinct (concat (groupF f xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distinct xs \\<Longrightarrow> distinct (concat (groupF f xs))", "by (induction f xs rule: groupF.induct) (auto simp add: groupF_Union_set)"], ["", "text\\<open>It is possible to use\n    @{term \"map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) P))\"}\n  instead of\n    @{term \"groupF f P\"}\n  for the following reasons:\n    @{const groupF} executes its compare function (first parameter) very often;\n    it always tests for @{term \"(f x = f y)\"}.\n    The function @{term f} may be really expensive.\n    At least polyML does not share the result of @{term f} but (probably) always recomputes (part of) it.\n    The optimization pre-computes @{term f} and tells @{const groupF} to use\n    a really cheap function (@{const snd}) to compare.\n    The following lemma tells that those are equal.\\<close>"], ["", "(* is this also faster for Haskell?*)"], ["", "lemma groupF_tuple: \"groupF f xs = map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) xs))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. groupF f xs = map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) xs))", "proof(induction f xs rule: groupF.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f.\n       groupF f [] =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) []))\n 2. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "case (1 f)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>f.\n       groupF f [] =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) []))\n 2. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. groupF f [] = map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) []))", "by simp"], ["proof (state)\nthis:\n  groupF f [] = map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) []))\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "case (2 f x xs)"], ["proof (state)\nthis:\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  map (map fst)\n   (groupF snd\n     (map (\\<lambda>x. (x, f x))\n       (filter (\\<lambda>y. f x \\<noteq> f y) xs)))\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "have g1: \"[y\\<leftarrow>xs . f x = f y] = map fst [y\\<leftarrow>map (\\<lambda>x. (x, f x)) xs . f x = snd y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter (\\<lambda>y. f x = f y) xs =\n    map fst\n     (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) xs))", "proof(induction xs arbitrary: f x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>f x.\n       filter (\\<lambda>y. f x = f y) [] =\n       map fst\n        (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) []))\n 2. \\<And>a xs f x.\n       (\\<And>f x.\n           filter (\\<lambda>y. f x = f y) xs =\n           map fst\n            (filter (\\<lambda>y. f x = snd y)\n              (map (\\<lambda>x. (x, f x)) xs))) \\<Longrightarrow>\n       filter (\\<lambda>y. f x = f y) (a # xs) =\n       map fst\n        (filter (\\<lambda>y. f x = snd y)\n          (map (\\<lambda>x. (x, f x)) (a # xs)))", "case Cons"], ["proof (state)\nthis:\n  filter (\\<lambda>y. ?f ?x = ?f y) xs_ =\n  map fst\n   (filter (\\<lambda>y. ?f ?x = snd y) (map (\\<lambda>x. (x, ?f x)) xs_))\n\ngoal (2 subgoals):\n 1. \\<And>f x.\n       filter (\\<lambda>y. f x = f y) [] =\n       map fst\n        (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) []))\n 2. \\<And>a xs f x.\n       (\\<And>f x.\n           filter (\\<lambda>y. f x = f y) xs =\n           map fst\n            (filter (\\<lambda>y. f x = snd y)\n              (map (\\<lambda>x. (x, f x)) xs))) \\<Longrightarrow>\n       filter (\\<lambda>y. f x = f y) (a # xs) =\n       map fst\n        (filter (\\<lambda>y. f x = snd y)\n          (map (\\<lambda>x. (x, f x)) (a # xs)))", "thus ?case"], ["proof (prove)\nusing this:\n  filter (\\<lambda>y. ?f ?x = ?f y) xs_ =\n  map fst\n   (filter (\\<lambda>y. ?f ?x = snd y) (map (\\<lambda>x. (x, ?f x)) xs_))\n\ngoal (1 subgoal):\n 1. filter (\\<lambda>y. f x = f y) (a_ # xs_) =\n    map fst\n     (filter (\\<lambda>y. f x = snd y)\n       (map (\\<lambda>x. (x, f x)) (a_ # xs_)))", "by fastforce"], ["proof (state)\nthis:\n  filter (\\<lambda>y. f x = f y) (a_ # xs_) =\n  map fst\n   (filter (\\<lambda>y. f x = snd y)\n     (map (\\<lambda>x. (x, f x)) (a_ # xs_)))\n\ngoal (1 subgoal):\n 1. \\<And>f x.\n       filter (\\<lambda>y. f x = f y) [] =\n       map fst\n        (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) []))", "qed(simp)"], ["proof (state)\nthis:\n  filter (\\<lambda>y. f x = f y) xs =\n  map fst (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) xs))\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "have g2: \"(map (\\<lambda>x. (x, f x)) [y\\<leftarrow>xs . f x \\<noteq> f y]) = [y\\<leftarrow>map (\\<lambda>x. (x, f x)) xs . f x \\<noteq> snd y]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n    filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) xs)", "proof(induction xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) []) =\n    filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) [])\n 2. \\<And>a xs.\n       map (\\<lambda>x. (x, f x))\n        (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       filter (\\<lambda>y. f x \\<noteq> snd y)\n        (map (\\<lambda>x. (x, f x)) xs) \\<Longrightarrow>\n       map (\\<lambda>x. (x, f x))\n        (filter (\\<lambda>y. f x \\<noteq> f y) (a # xs)) =\n       filter (\\<lambda>y. f x \\<noteq> snd y)\n        (map (\\<lambda>x. (x, f x)) (a # xs))", "case Cons"], ["proof (state)\nthis:\n  map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) xs_) =\n  filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) xs_)\n\ngoal (2 subgoals):\n 1. map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) []) =\n    filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) [])\n 2. \\<And>a xs.\n       map (\\<lambda>x. (x, f x))\n        (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       filter (\\<lambda>y. f x \\<noteq> snd y)\n        (map (\\<lambda>x. (x, f x)) xs) \\<Longrightarrow>\n       map (\\<lambda>x. (x, f x))\n        (filter (\\<lambda>y. f x \\<noteq> f y) (a # xs)) =\n       filter (\\<lambda>y. f x \\<noteq> snd y)\n        (map (\\<lambda>x. (x, f x)) (a # xs))", "thus ?case"], ["proof (prove)\nusing this:\n  map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) xs_) =\n  filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) xs_)\n\ngoal (1 subgoal):\n 1. map (\\<lambda>x. (x, f x))\n     (filter (\\<lambda>y. f x \\<noteq> f y) (a_ # xs_)) =\n    filter (\\<lambda>y. f x \\<noteq> snd y)\n     (map (\\<lambda>x. (x, f x)) (a_ # xs_))", "by fastforce"], ["proof (state)\nthis:\n  map (\\<lambda>x. (x, f x))\n   (filter (\\<lambda>y. f x \\<noteq> f y) (a_ # xs_)) =\n  filter (\\<lambda>y. f x \\<noteq> snd y)\n   (map (\\<lambda>x. (x, f x)) (a_ # xs_))\n\ngoal (1 subgoal):\n 1. map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) []) =\n    filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) [])", "qed(simp)"], ["proof (state)\nthis:\n  map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) xs)\n\ngoal (1 subgoal):\n 1. \\<And>f x xs.\n       groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n       map (map fst)\n        (groupF snd\n          (map (\\<lambda>x. (x, f x))\n            (filter (\\<lambda>y. f x \\<noteq> f y) xs))) \\<Longrightarrow>\n       groupF f (x # xs) =\n       map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "from 2 g1 g2"], ["proof (chain)\npicking this:\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  map (map fst)\n   (groupF snd\n     (map (\\<lambda>x. (x, f x))\n       (filter (\\<lambda>y. f x \\<noteq> f y) xs)))\n  filter (\\<lambda>y. f x = f y) xs =\n  map fst (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) xs))\n  map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) xs)", "show ?case"], ["proof (prove)\nusing this:\n  groupF f (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  map (map fst)\n   (groupF snd\n     (map (\\<lambda>x. (x, f x))\n       (filter (\\<lambda>y. f x \\<noteq> f y) xs)))\n  filter (\\<lambda>y. f x = f y) xs =\n  map fst (filter (\\<lambda>y. f x = snd y) (map (\\<lambda>x. (x, f x)) xs))\n  map (\\<lambda>x. (x, f x)) (filter (\\<lambda>y. f x \\<noteq> f y) xs) =\n  filter (\\<lambda>y. f x \\<noteq> snd y) (map (\\<lambda>x. (x, f x)) xs)\n\ngoal (1 subgoal):\n 1. groupF f (x # xs) =\n    map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))", "by simp"], ["proof (state)\nthis:\n  groupF f (x # xs) =\n  map (map fst) (groupF snd (map (\\<lambda>x. (x, f x)) (x # xs)))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}