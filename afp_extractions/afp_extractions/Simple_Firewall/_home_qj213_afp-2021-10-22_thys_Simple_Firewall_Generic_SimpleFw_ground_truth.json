{"file_name": "/home/qj213/afp-2021-10-22/thys/Simple_Firewall/Generic_SimpleFw.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Simple_Firewall", "problem_names": ["lemma generalized_sfw_simps:\n    \"generalized_sfw [] p = None\"\n    \"generalized_sfw (a # as) p = (if (case a of (m,_) \\<Rightarrow> simple_matches m p) then Some a else generalized_sfw as p)\"", "lemma generalized_sfw_append:\n    \"generalized_sfw (a @ b) p = (case generalized_sfw a p of Some x \\<Rightarrow> Some x\n                                                           |  None \\<Rightarrow> generalized_sfw b p)\"", "lemma simple_generalized_undecided:\n    \"simple_fw fw p \\<noteq> Undecided \\<Longrightarrow> generalized_sfw (map simple_rule_dtor fw) p \\<noteq> None\"", "lemma generalized_sfwSomeD: \"generalized_sfw fw p = Some (r,d) \\<Longrightarrow> (r,d) \\<in> set fw \\<and> simple_matches r p\"", "lemma generalized_sfw_NoneD: \"generalized_sfw fw p = None \\<Longrightarrow> \\<forall>(a,b) \\<in> set fw. \\<not> simple_matches a p\"", "lemma generalized_fw_split: \"generalized_sfw fw p = Some r \\<Longrightarrow> \\<exists>fw1 fw3. fw = fw1 @ r # fw3 \\<and> generalized_sfw fw1 p = None\"", "lemma generalized_sfw_filterD:\n    \"generalized_sfw (filter f fw) p = Some (r,d) \\<Longrightarrow> simple_matches r p \\<and> f (r,d)\"", "lemma generalized_sfw_mapsnd:\n    \"generalized_sfw (map (apsnd f) fw) p = map_option (apsnd f) (generalized_sfw fw p)\"", "lemma simple_fw_iff_generalized_fw:\n    \"simple_fw fw p = simple_action_to_decision a \\<longleftrightarrow> (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r,a))\"", "lemma simple_fw_iff_generalized_fw_accept:\n    \"simple_fw fw p = Decision FinalAllow \\<longleftrightarrow> (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r, Accept))\"", "lemma simple_fw_iff_generalized_fw_drop:\n    \"simple_fw fw p = Decision FinalDeny \\<longleftrightarrow> (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r, Drop))\"", "lemma generalized_fw_join_1_Nil[simp]: \"generalized_fw_join [] f2 = []\"", "lemma generalized_fw_join_2_Nil[simp]: \"generalized_fw_join f1 [] = []\"", "lemma generalized_fw_join_cons_1:\n    \"generalized_fw_join ((am,ad) # l1) l2 =\n      [(u,(ad,b)). (m2,b) \\<leftarrow> l2, u \\<leftarrow> option2list (simple_match_and am m2)] @ generalized_fw_join l1 l2\"", "lemma generalized_fw_join_1_nomatch:\n    \"\\<not> simple_matches am p \\<Longrightarrow>\n      generalized_sfw [(u,(ad,b)). (m2,b) \\<leftarrow> l2, u \\<leftarrow> option2list (simple_match_and am m2)] p = None\"", "lemma generalized_fw_join_2_nomatch:\n    \"\\<not> simple_matches bm p \\<Longrightarrow>\n      generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p = generalized_sfw (generalized_fw_join as bs) p\"", "lemma generalized_fw_joinI:\n    \"\\<lbrakk>generalized_sfw f1 p = Some (r1,d1); generalized_sfw f2 p = Some (r2,d2)\\<rbrakk> \\<Longrightarrow>\n       generalized_sfw (generalized_fw_join f1 f2) p = Some (the (simple_match_and r1 r2), d1,d2)\"", "lemma generalized_fw_joinD:\n    \"generalized_sfw (generalized_fw_join f1 f2) p = Some (u, d1,d2) \\<Longrightarrow>\n      \\<exists>r1 r2. generalized_sfw f1 p = Some (r1,d1) \\<and> generalized_sfw f2 p = Some (r2,d2) \\<and> Some u = simple_match_and r1 r2\"", "theorem simple_fw_join:\n    defines \"rule_translate \\<equiv>\n      map (\\<lambda>(u,a,b). SimpleRule u (if a = Accept \\<and> b = Accept then Accept else Drop))\"\n    shows\n    \"simple_fw rs1 p = Decision FinalAllow \\<and> simple_fw rs2 p = Decision FinalAllow \\<longleftrightarrow>\n      simple_fw (rule_translate (generalized_fw_join (map simple_rule_dtor rs1) (map simple_rule_dtor rs2))) p = Decision FinalAllow\"", "theorem simple_fw_join2:\n    \\<comment> \\<open>translates a @{text \"(match, action1, action2)\"} tuple of the joined generalized\n       firewall to a @{typ \"'i::len simple_rule list\"}. The two actions are translated such\n       that you only get @{const Accept} if both actions are @{const Accept}\\<close>\n    defines \"to_simple_rule_list \\<equiv> map (apsnd (\\<lambda>(a,b) \\<Rightarrow> (case a of Accept \\<Rightarrow> b\n                                                                 |  Drop \\<Rightarrow> Drop)))\"\n    shows \"simple_fw rs1 p = Decision FinalAllow \\<and> simple_fw rs2 p = Decision FinalAllow \\<longleftrightarrow>\n           (\\<exists>m. (generalized_sfw (to_simple_rule_list\n            (generalized_fw_join (map simple_rule_dtor rs1) (map simple_rule_dtor rs2))) p) = Some (m, Accept))\"", "lemma generalized_fw_join_1_1:\n    \"generalized_fw_join [(m1,d1)] fw2 = foldr (\\<lambda>(m2,d2). (@) (case simple_match_and m1 m2 of None \\<Rightarrow> [] | Some mu \\<Rightarrow> [(mu,d1,d2)])) fw2 []\"", "lemma generalized_sfw_2_join_None:\n    \"generalized_sfw fw2 p = None \\<Longrightarrow> generalized_sfw (generalized_fw_join fw1 fw2) p = None\"", "lemma generalized_sfw_1_join_None:\n    \"generalized_sfw fw1 p = None \\<Longrightarrow> generalized_sfw (generalized_fw_join fw1 fw2) p = None\"", "lemma generalized_sfw_join_set: \"(a, b1, b2) \\<in> set (generalized_fw_join f1 f2) \\<longleftrightarrow>\n    (\\<exists>a1 a2. (a1, b1) \\<in> set f1 \\<and> (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a)\"", "lemma gsfw_join_valid: \"gsfw_valid f1 \\<Longrightarrow> gsfw_valid f2 \\<Longrightarrow> gsfw_valid (generalized_fw_join f1 f2)\"", "lemma gsfw_validI: \"simple_fw_valid fw \\<Longrightarrow> gsfw_valid (map simple_rule_dtor fw)\""], "translations": [["", "lemma generalized_sfw_simps:\n    \"generalized_sfw [] p = None\"\n    \"generalized_sfw (a # as) p = (if (case a of (m,_) \\<Rightarrow> simple_matches m p) then Some a else generalized_sfw as p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw [] p = None &&&\n    generalized_sfw (a # as) p =\n    (if case a of (m, x) \\<Rightarrow> simple_matches m p then Some a\n     else generalized_sfw as p)", "unfolding generalized_sfw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. find (\\<lambda>(m, a). simple_matches m p) [] = None &&&\n    find (\\<lambda>(m, a). simple_matches m p) (a # as) =\n    (if case a of (m, x) \\<Rightarrow> simple_matches m p then Some a\n     else find (\\<lambda>(m, a). simple_matches m p) as)", "by simp_all"], ["", "lemma generalized_sfw_append:\n    \"generalized_sfw (a @ b) p = (case generalized_sfw a p of Some x \\<Rightarrow> Some x\n                                                           |  None \\<Rightarrow> generalized_sfw b p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (a @ b) p =\n    (case generalized_sfw a p of None \\<Rightarrow> generalized_sfw b p\n     | Some x \\<Rightarrow> Some x)", "by(induction a) (simp_all add: generalized_sfw_simps)"], ["", "lemma simple_generalized_undecided:\n    \"simple_fw fw p \\<noteq> Undecided \\<Longrightarrow> generalized_sfw (map simple_rule_dtor fw) p \\<noteq> None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_fw fw p \\<noteq> Undecided \\<Longrightarrow>\n    generalized_sfw (map simple_rule_dtor fw) p \\<noteq> None", "by(induction fw)\n    (clarsimp simp add: generalized_sfw_def simple_fw_alt simple_rule_dtor_def\n              split: prod.splits if_splits simple_action.splits simple_rule.splits)+"], ["", "lemma generalized_sfwSomeD: \"generalized_sfw fw p = Some (r,d) \\<Longrightarrow> (r,d) \\<in> set fw \\<and> simple_matches r p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw fw p = Some (r, d) \\<Longrightarrow>\n    (r, d) \\<in> set fw \\<and> simple_matches r p", "unfolding generalized_sfw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. find (\\<lambda>(m, a). simple_matches m p) fw =\n    Some (r, d) \\<Longrightarrow>\n    (r, d) \\<in> set fw \\<and> simple_matches r p", "by(induction fw) (simp split: if_split_asm)+"], ["", "lemma generalized_sfw_NoneD: \"generalized_sfw fw p = None \\<Longrightarrow> \\<forall>(a,b) \\<in> set fw. \\<not> simple_matches a p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw fw p = None \\<Longrightarrow>\n    \\<forall>(a, b)\\<in>set fw. \\<not> simple_matches a p", "by(induction fw) (clarsimp simp add: generalized_sfw_simps split: if_splits)+"], ["", "lemma generalized_fw_split: \"generalized_sfw fw p = Some r \\<Longrightarrow> \\<exists>fw1 fw3. fw = fw1 @ r # fw3 \\<and> generalized_sfw fw1 p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw fw p = Some r \\<Longrightarrow>\n    \\<exists>fw1 fw3. fw = fw1 @ r # fw3 \\<and> generalized_sfw fw1 p = None", "apply(induction fw rule: rev_induct)"], ["proof (prove)\ngoal (2 subgoals):\n 1. generalized_sfw [] p = Some r \\<Longrightarrow>\n    \\<exists>fw1 fw3. [] = fw1 @ r # fw3 \\<and> generalized_sfw fw1 p = None\n 2. \\<And>x xs.\n       \\<lbrakk>generalized_sfw xs p = Some r \\<Longrightarrow>\n                \\<exists>fw1 fw3.\n                   xs = fw1 @ r # fw3 \\<and> generalized_sfw fw1 p = None;\n        generalized_sfw (xs @ [x]) p = Some r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fw1 fw3.\n                            xs @ [x] = fw1 @ r # fw3 \\<and>\n                            generalized_sfw fw1 p = None", "apply(simp add: generalized_sfw_simps generalized_sfw_append split: option.splits;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       \\<lbrakk>generalized_sfw xs p = Some r \\<Longrightarrow>\n                \\<exists>fw1 fw3.\n                   xs = fw1 @ r # fw3 \\<and> generalized_sfw fw1 p = None;\n        generalized_sfw (xs @ [x]) p = Some r\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fw1 fw3.\n                            xs @ [x] = fw1 @ r # fw3 \\<and>\n                            generalized_sfw fw1 p = None", "apply(clarsimp simp add: generalized_sfw_simps generalized_sfw_append split: option.splits if_splits)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>a b xs.\n       \\<lbrakk>generalized_sfw xs p = None; simple_matches a p;\n        r = (a, b)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fw1.\n                            (\\<exists>fw3.\n                                xs @ [(a, b)] = fw1 @ (a, b) # fw3) \\<and>\n                            generalized_sfw fw1 p = None\n 2. \\<And>a b aa ba fw1 fw3.\n       \\<lbrakk>r = (aa, ba); generalized_sfw fw1 p = None;\n        simple_matches aa p\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fw1a.\n                            (\\<exists>fw3a.\n                                fw1 @ (aa, ba) # fw3 @ [(a, b)] =\n                                fw1a @ (aa, ba) # fw3a) \\<and>\n                            generalized_sfw fw1a p = None\n 3. \\<And>a b aa ba fw1 fw3.\n       \\<lbrakk>r = (aa, ba); generalized_sfw fw1 p = None;\n        \\<not> simple_matches aa p;\n        generalized_sfw fw3 p = Some (aa, ba)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>fw1a.\n                            (\\<exists>fw3a.\n                                fw1 @ (aa, ba) # fw3 @ [(a, b)] =\n                                fw1a @ (aa, ba) # fw3a) \\<and>\n                            generalized_sfw fw1a p = None", "apply blast+"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma generalized_sfw_filterD:\n    \"generalized_sfw (filter f fw) p = Some (r,d) \\<Longrightarrow> simple_matches r p \\<and> f (r,d)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (filter f fw) p = Some (r, d) \\<Longrightarrow>\n    simple_matches r p \\<and> f (r, d)", "by(induction fw) (simp_all add: generalized_sfw_simps split: if_splits)"], ["", "lemma generalized_sfw_mapsnd:\n    \"generalized_sfw (map (apsnd f) fw) p = map_option (apsnd f) (generalized_sfw fw p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (map (apsnd f) fw) p =\n    map_option (apsnd f) (generalized_sfw fw p)", "by(induction fw) (simp add: generalized_sfw_simps split: prod.splits)+"], ["", "subsection\\<open>Equality with the Simple Firewall\\<close>"], ["", "text\\<open>A matching action of the simple firewall directly corresponds to a filtering decision\\<close>"], ["", "definition simple_action_to_decision :: \"simple_action \\<Rightarrow> state\" where\n    \"simple_action_to_decision a \\<equiv> case a of Accept \\<Rightarrow> Decision FinalAllow\n                                          |   Drop \\<Rightarrow> Decision FinalDeny\""], ["", "text\\<open>The @{const simple_fw} and the @{const generalized_sfw} are equal, if the state is translated appropriately.\\<close>"], ["", "lemma simple_fw_iff_generalized_fw:\n    \"simple_fw fw p = simple_action_to_decision a \\<longleftrightarrow> (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r,a))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (simple_fw fw p = simple_action_to_decision a) =\n    (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r, a))", "by(induction fw)\n    (clarsimp simp add: generalized_sfw_simps simple_rule_dtor_def simple_fw_alt simple_action_to_decision_def\n              split: simple_rule.splits if_splits simple_action.splits)+"], ["", "lemma simple_fw_iff_generalized_fw_accept:\n    \"simple_fw fw p = Decision FinalAllow \\<longleftrightarrow> (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r, Accept))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (simple_fw fw p = Decision FinalAllow) =\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor fw) p = Some (r, Accept))", "by(fact simple_fw_iff_generalized_fw[where a = simple_action.Accept,\n                                         unfolded simple_action_to_decision_def simple_action.simps])"], ["", "lemma simple_fw_iff_generalized_fw_drop:\n    \"simple_fw fw p = Decision FinalDeny \\<longleftrightarrow> (\\<exists>r. generalized_sfw (map simple_rule_dtor fw) p = Some (r, Drop))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (simple_fw fw p = Decision FinalDeny) =\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor fw) p = Some (r, Drop))", "by(fact simple_fw_iff_generalized_fw[where a = simple_action.Drop,\n                                         unfolded simple_action_to_decision_def simple_action.simps])"], ["", "subsection\\<open>Joining two firewalls, i.e. a packet is send through both sequentially.\\<close>"], ["", "definition generalized_fw_join\n    :: \"('i::len simple_match \\<times> 'a) list \\<Rightarrow> ('i simple_match \\<times> 'b) list \\<Rightarrow> ('i simple_match \\<times> 'a \\<times> 'b) list\"\n    where\n    \"generalized_fw_join l1 l2 \\<equiv> [(u,(a,b)). (m1,a) \\<leftarrow> l1, (m2,b) \\<leftarrow> l2, u \\<leftarrow> option2list (simple_match_and m1 m2)]\""], ["", "lemma generalized_fw_join_1_Nil[simp]: \"generalized_fw_join [] f2 = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_fw_join [] f2 = []", "unfolding generalized_fw_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(m1, a).\n              concat\n               (map (\\<lambda>(m2, b).\n                        map (\\<lambda>u. (u, a, b))\n                         (option2list (simple_match_and m1 m2)))\n                 f2))\n       []) =\n    []", "by(induction f2) simp+"], ["", "lemma generalized_fw_join_2_Nil[simp]: \"generalized_fw_join f1 [] = []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_fw_join f1 [] = []", "unfolding generalized_fw_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(m1, a).\n              concat\n               (map (\\<lambda>(m2, b).\n                        map (\\<lambda>u. (u, a, b))\n                         (option2list (simple_match_and m1 m2)))\n                 []))\n       f1) =\n    []", "by(induction f1) simp+"], ["", "lemma generalized_fw_join_cons_1:\n    \"generalized_fw_join ((am,ad) # l1) l2 =\n      [(u,(ad,b)). (m2,b) \\<leftarrow> l2, u \\<leftarrow> option2list (simple_match_and am m2)] @ generalized_fw_join l1 l2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_fw_join ((am, ad) # l1) l2 =\n    concat\n     (map (\\<lambda>(m2, b).\n              map (\\<lambda>u. (u, ad, b))\n               (option2list (simple_match_and am m2)))\n       l2) @\n    generalized_fw_join l1 l2", "unfolding generalized_fw_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(m1, a).\n              concat\n               (map (\\<lambda>(m2, b).\n                        map (\\<lambda>u. (u, a, b))\n                         (option2list (simple_match_and m1 m2)))\n                 l2))\n       ((am, ad) # l1)) =\n    concat\n     (map (\\<lambda>(m2, b).\n              map (\\<lambda>u. (u, ad, b))\n               (option2list (simple_match_and am m2)))\n       l2) @\n    concat\n     (map (\\<lambda>(m1, a).\n              concat\n               (map (\\<lambda>(m2, b).\n                        map (\\<lambda>u. (u, a, b))\n                         (option2list (simple_match_and m1 m2)))\n                 l2))\n       l1)", "by(simp)"], ["", "lemma generalized_fw_join_1_nomatch:\n    \"\\<not> simple_matches am p \\<Longrightarrow>\n      generalized_sfw [(u,(ad,b)). (m2,b) \\<leftarrow> l2, u \\<leftarrow> option2list (simple_match_and am m2)] p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         l2))\n     p =\n    None", "by(induction l2)\n    (clarsimp simp add: generalized_sfw_simps generalized_sfw_append option2list_def simple_match_and_SomeD\n              split: prod.splits option.splits)+"], ["", "lemma generalized_fw_join_2_nomatch:\n    \"\\<not> simple_matches bm p \\<Longrightarrow>\n      generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p = generalized_sfw (generalized_fw_join as bs) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join as bs) p", "proof(induction as)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join [] ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join [] bs) p\n 2. \\<And>a as.\n       \\<lbrakk>\\<not> simple_matches bm p \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n                generalized_sfw (generalized_fw_join as bs) p;\n        \\<not> simple_matches bm p\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n                         generalized_sfw (generalized_fw_join (a # as) bs) p", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<not> simple_matches bm p \\<Longrightarrow>\n  generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n  generalized_sfw (generalized_fw_join as bs) p\n  \\<not> simple_matches bm p\n\ngoal (2 subgoals):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join [] ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join [] bs) p\n 2. \\<And>a as.\n       \\<lbrakk>\\<not> simple_matches bm p \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n                generalized_sfw (generalized_fw_join as bs) p;\n        \\<not> simple_matches bm p\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n                         generalized_sfw (generalized_fw_join (a # as) bs) p", "note mIH = Cons.IH[OF Cons.prems]"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n  generalized_sfw (generalized_fw_join as bs) p\n\ngoal (2 subgoals):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join [] ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join [] bs) p\n 2. \\<And>a as.\n       \\<lbrakk>\\<not> simple_matches bm p \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n                generalized_sfw (generalized_fw_join as bs) p;\n        \\<not> simple_matches bm p\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n                         generalized_sfw (generalized_fw_join (a # as) bs) p", "obtain am ad where a[simp]: \"a = (am, ad)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>am ad. a = (am, ad) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (am, ad)\n\ngoal (2 subgoals):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join [] ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join [] bs) p\n 2. \\<And>a as.\n       \\<lbrakk>\\<not> simple_matches bm p \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n                generalized_sfw (generalized_fw_join as bs) p;\n        \\<not> simple_matches bm p\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n                         generalized_sfw (generalized_fw_join (a # as) bs) p", "have *: \"generalized_sfw (concat (map (\\<lambda>(m2, b). map (\\<lambda>u. (u, ad, b)) (option2list (simple_match_and am m2))) ((bm, bd) # bs))) p = \n      generalized_sfw (concat (map (\\<lambda>(m2, b). map (\\<lambda>u. (u, ad, b)) (option2list (simple_match_and am m2))) bs)) p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         ((bm, bd) # bs)))\n     p =\n    generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         bs))\n     p", "unfolding list.map prod.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw\n     (concat\n       (map (\\<lambda>u. (u, ad, bd))\n         (option2list (simple_match_and am bm)) #\n        map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         bs))\n     p =\n    generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         bs))\n     p", "apply(cases \"simple_match_and am bm\")"], ["proof (prove)\ngoal (2 subgoals):\n 1. simple_match_and am bm = None \\<Longrightarrow>\n    generalized_sfw\n     (concat\n       (map (\\<lambda>u. (u, ad, bd))\n         (option2list (simple_match_and am bm)) #\n        map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         bs))\n     p =\n    generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         bs))\n     p\n 2. \\<And>a.\n       simple_match_and am bm = Some a \\<Longrightarrow>\n       generalized_sfw\n        (concat\n          (map (\\<lambda>u. (u, ad, bd))\n            (option2list (simple_match_and am bm)) #\n           map (\\<lambda>(m2, b).\n                   map (\\<lambda>u. (u, ad, b))\n                    (option2list (simple_match_and am m2)))\n            bs))\n        p =\n       generalized_sfw\n        (concat\n          (map (\\<lambda>(m2, b).\n                   map (\\<lambda>u. (u, ad, b))\n                    (option2list (simple_match_and am m2)))\n            bs))\n        p", "apply(simp add: option2list_def; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       simple_match_and am bm = Some a \\<Longrightarrow>\n       generalized_sfw\n        (concat\n          (map (\\<lambda>u. (u, ad, bd))\n            (option2list (simple_match_and am bm)) #\n           map (\\<lambda>(m2, b).\n                   map (\\<lambda>u. (u, ad, b))\n                    (option2list (simple_match_and am m2)))\n            bs))\n        p =\n       generalized_sfw\n        (concat\n          (map (\\<lambda>(m2, b).\n                   map (\\<lambda>u. (u, ad, b))\n                    (option2list (simple_match_and am m2)))\n            bs))\n        p", "apply(frule simple_match_and_SomeD[of _ _ _ p])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>simple_match_and am bm = Some a;\n        simple_matches a p =\n        (simple_matches am p \\<and> simple_matches bm p)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (concat\n                            (map (\\<lambda>u. (u, ad, bd))\n                              (option2list (simple_match_and am bm)) #\n                             map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ad, b))\n(option2list (simple_match_and am m2)))\n                              bs))\n                          p =\n                         generalized_sfw\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ad, b))\n(option2list (simple_match_and am m2)))\n                              bs))\n                          p", "apply(subst option2list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>simple_match_and am bm = Some a;\n        simple_matches a p =\n        (simple_matches am p \\<and> simple_matches bm p)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (concat\n                            (map (\\<lambda>u. (u, ad, bd))\n                              (case simple_match_and am bm of\n                               None \\<Rightarrow> []\n                               | Some s \\<Rightarrow> [s]) #\n                             map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ad, b))\n(option2list (simple_match_and am m2)))\n                              bs))\n                          p =\n                         generalized_sfw\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ad, b))\n(option2list (simple_match_and am m2)))\n                              bs))\n                          p", "apply(unfold concat.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a.\n       \\<lbrakk>simple_match_and am bm = Some a;\n        simple_matches a p =\n        (simple_matches am p \\<and> simple_matches bm p)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (map (\\<lambda>u. (u, ad, bd))\n                            (case simple_match_and am bm of\n                             None \\<Rightarrow> []\n                             | Some s \\<Rightarrow> [s]) @\n                           concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ad, b))\n(option2list (simple_match_and am m2)))\n                              bs))\n                          p =\n                         generalized_sfw\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ad, b))\n(option2list (simple_match_and am m2)))\n                              bs))\n                          p", "apply(simp add: generalized_sfw_simps Cons.prems)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  generalized_sfw\n   (concat\n     (map (\\<lambda>(m2, b).\n              map (\\<lambda>u. (u, ad, b))\n               (option2list (simple_match_and am m2)))\n       ((bm, bd) # bs)))\n   p =\n  generalized_sfw\n   (concat\n     (map (\\<lambda>(m2, b).\n              map (\\<lambda>u. (u, ad, b))\n               (option2list (simple_match_and am m2)))\n       bs))\n   p\n\ngoal (2 subgoals):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join [] ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join [] bs) p\n 2. \\<And>a as.\n       \\<lbrakk>\\<not> simple_matches bm p \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p =\n                generalized_sfw (generalized_fw_join as bs) p;\n        \\<not> simple_matches bm p\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n                         generalized_sfw (generalized_fw_join (a # as) bs) p", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join (a # as) bs) p", "unfolding a"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) ((bm, bd) # bs))\n     p =\n    generalized_sfw (generalized_fw_join ((am, ad) # as) bs) p", "unfolding generalized_fw_join_cons_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         ((bm, bd) # bs)) @\n      generalized_fw_join as ((bm, bd) # bs))\n     p =\n    generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         bs) @\n      generalized_fw_join as bs)\n     p", "unfolding generalized_sfw_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               ((bm, bd) # bs)))\n           p of\n     None \\<Rightarrow>\n       generalized_sfw (generalized_fw_join as ((bm, bd) # bs)) p\n     | Some x \\<Rightarrow> Some x) =\n    (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               bs))\n           p of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as bs) p\n     | Some x \\<Rightarrow> Some x)", "unfolding mIH"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               ((bm, bd) # bs)))\n           p of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as bs) p\n     | Some x \\<Rightarrow> Some x) =\n    (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               bs))\n           p of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as bs) p\n     | Some x \\<Rightarrow> Some x)", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               bs))\n           p of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as bs) p\n     | Some x \\<Rightarrow> Some x) =\n    (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               bs))\n           p of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as bs) p\n     | Some x \\<Rightarrow> Some x)", ".."], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n  generalized_sfw (generalized_fw_join (a # as) bs) p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join [] ((bm, bd) # bs)) p =\n    generalized_sfw (generalized_fw_join [] bs) p", "qed(simp add: generalized_fw_join_def)"], ["", "lemma generalized_fw_joinI:\n    \"\\<lbrakk>generalized_sfw f1 p = Some (r1,d1); generalized_sfw f2 p = Some (r2,d2)\\<rbrakk> \\<Longrightarrow>\n       generalized_sfw (generalized_fw_join f1 f2) p = Some (the (simple_match_and r1 r2), d1,d2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>generalized_sfw f1 p = Some (r1, d1);\n     generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw (generalized_fw_join f1 f2) p =\n                      Some (the (simple_match_and r1 r2), d1, d2)", "proof(induction f1)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>generalized_sfw [] p = Some (r1, d1);\n     generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw (generalized_fw_join [] f2) p =\n                      Some (the (simple_match_and r1 r2), d1, d2)\n 2. \\<And>a f1.\n       \\<lbrakk>\\<lbrakk>generalized_sfw f1 p = Some (r1, d1);\n                 generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n                \\<Longrightarrow> generalized_sfw\n                                   (generalized_fw_join f1 f2) p =\n                                  Some\n                                   (the (simple_match_and r1 r2), d1, d2);\n        generalized_sfw (a # f1) p = Some (r1, d1);\n        generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw (generalized_fw_join (a # f1) f2)\n                          p =\n                         Some (the (simple_match_and r1 r2), d1, d2)", "case (Cons a as)"], ["proof (state)\nthis:\n  \\<lbrakk>generalized_sfw as p = Some (r1, d1);\n   generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n  \\<Longrightarrow> generalized_sfw (generalized_fw_join as f2) p =\n                    Some (the (simple_match_and r1 r2), d1, d2)\n  generalized_sfw (a # as) p = Some (r1, d1)\n  generalized_sfw f2 p = Some (r2, d2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>generalized_sfw [] p = Some (r1, d1);\n     generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw (generalized_fw_join [] f2) p =\n                      Some (the (simple_match_and r1 r2), d1, d2)\n 2. \\<And>a f1.\n       \\<lbrakk>\\<lbrakk>generalized_sfw f1 p = Some (r1, d1);\n                 generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n                \\<Longrightarrow> generalized_sfw\n                                   (generalized_fw_join f1 f2) p =\n                                  Some\n                                   (the (simple_match_and r1 r2), d1, d2);\n        generalized_sfw (a # f1) p = Some (r1, d1);\n        generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw (generalized_fw_join (a # f1) f2)\n                          p =\n                         Some (the (simple_match_and r1 r2), d1, d2)", "obtain am ad where a[simp]: \"a = Pair am ad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>am ad. a = (am, ad) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (am, ad)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>generalized_sfw [] p = Some (r1, d1);\n     generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw (generalized_fw_join [] f2) p =\n                      Some (the (simple_match_and r1 r2), d1, d2)\n 2. \\<And>a f1.\n       \\<lbrakk>\\<lbrakk>generalized_sfw f1 p = Some (r1, d1);\n                 generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n                \\<Longrightarrow> generalized_sfw\n                                   (generalized_fw_join f1 f2) p =\n                                  Some\n                                   (the (simple_match_and r1 r2), d1, d2);\n        generalized_sfw (a # f1) p = Some (r1, d1);\n        generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw (generalized_fw_join (a # f1) f2)\n                          p =\n                         Some (the (simple_match_and r1 r2), d1, d2)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "proof(cases \"simple_matches am p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)\n 2. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "case True"], ["proof (state)\nthis:\n  simple_matches am p\n\ngoal (2 subgoals):\n 1. simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)\n 2. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "hence dra: \"d1 = ad\" \"r1 = am\""], ["proof (prove)\nusing this:\n  simple_matches am p\n\ngoal (1 subgoal):\n 1. d1 = ad &&& r1 = am", "using Cons.prems"], ["proof (prove)\nusing this:\n  simple_matches am p\n  generalized_sfw (a # as) p = Some (r1, d1)\n  generalized_sfw f2 p = Some (r2, d2)\n\ngoal (1 subgoal):\n 1. d1 = ad &&& r1 = am", "by(simp_all add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  d1 = ad\n  r1 = am\n\ngoal (2 subgoals):\n 1. simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)\n 2. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "from Cons.prems(2)"], ["proof (chain)\npicking this:\n  generalized_sfw f2 p = Some (r2, d2)", "show ?thesis"], ["proof (prove)\nusing this:\n  generalized_sfw f2 p = Some (r2, d2)\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "unfolding a dra"], ["proof (prove)\nusing this:\n  generalized_sfw f2 p = Some (r2, d2)\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) f2) p =\n    Some (the (simple_match_and am r2), ad, d2)", "proof(induction f2)"], ["proof (state)\ngoal (2 subgoals):\n 1. generalized_sfw [] p = Some (r2, d2) \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join ((am, ad) # as) []) p =\n    Some (the (simple_match_and am r2), ad, d2)\n 2. \\<And>a f2.\n       \\<lbrakk>generalized_sfw f2 p = Some (r2, d2) \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join ((am, ad) # as) f2) p =\n                Some (the (simple_match_and am r2), ad, d2);\n        generalized_sfw (a # f2) p = Some (r2, d2)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join ((am, ad) # as) (a # f2)) p =\n                         Some (the (simple_match_and am r2), ad, d2)", "case (Cons b bs)"], ["proof (state)\nthis:\n  generalized_sfw bs p = Some (r2, d2) \\<Longrightarrow>\n  generalized_sfw (generalized_fw_join ((am, ad) # as) bs) p =\n  Some (the (simple_match_and am r2), ad, d2)\n  generalized_sfw (b # bs) p = Some (r2, d2)\n\ngoal (2 subgoals):\n 1. generalized_sfw [] p = Some (r2, d2) \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join ((am, ad) # as) []) p =\n    Some (the (simple_match_and am r2), ad, d2)\n 2. \\<And>a f2.\n       \\<lbrakk>generalized_sfw f2 p = Some (r2, d2) \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join ((am, ad) # as) f2) p =\n                Some (the (simple_match_and am r2), ad, d2);\n        generalized_sfw (a # f2) p = Some (r2, d2)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join ((am, ad) # as) (a # f2)) p =\n                         Some (the (simple_match_and am r2), ad, d2)", "obtain bm bd where b[simp]: \"b = Pair bm bd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bm bd. b = (bm, bd) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases b)"], ["proof (state)\nthis:\n  b = (bm, bd)\n\ngoal (2 subgoals):\n 1. generalized_sfw [] p = Some (r2, d2) \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join ((am, ad) # as) []) p =\n    Some (the (simple_match_and am r2), ad, d2)\n 2. \\<And>a f2.\n       \\<lbrakk>generalized_sfw f2 p = Some (r2, d2) \\<Longrightarrow>\n                generalized_sfw (generalized_fw_join ((am, ad) # as) f2) p =\n                Some (the (simple_match_and am r2), ad, d2);\n        generalized_sfw (a # f2) p = Some (r2, d2)\\<rbrakk>\n       \\<Longrightarrow> generalized_sfw\n                          (generalized_fw_join ((am, ad) # as) (a # f2)) p =\n                         Some (the (simple_match_and am r2), ad, d2)", "thus ?case"], ["proof (prove)\nusing this:\n  b = (bm, bd)\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n    Some (the (simple_match_and am r2), ad, d2)", "proof(cases \"simple_matches bm p\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>b = (bm, bd); simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)\n 2. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "case True"], ["proof (state)\nthis:\n  simple_matches bm p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b = (bm, bd); simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)\n 2. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "hence drb: \"d2 = bd\" \"r2 = bm\""], ["proof (prove)\nusing this:\n  simple_matches bm p\n\ngoal (1 subgoal):\n 1. d2 = bd &&& r2 = bm", "using Cons.prems"], ["proof (prove)\nusing this:\n  simple_matches bm p\n  generalized_sfw (b # bs) p = Some (r2, d2)\n\ngoal (1 subgoal):\n 1. d2 = bd &&& r2 = bm", "by(simp_all add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  d2 = bd\n  r2 = bm\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b = (bm, bd); simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)\n 2. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "from True \\<open>simple_matches am p\\<close>"], ["proof (chain)\npicking this:\n  simple_matches bm p\n  simple_matches am p", "obtain ruc where sma[simp]:\n            \"simple_match_and am bm = Some ruc\" \"simple_matches ruc p\""], ["proof (prove)\nusing this:\n  simple_matches bm p\n  simple_matches am p\n\ngoal (1 subgoal):\n 1. (\\<And>ruc.\n        \\<lbrakk>simple_match_and am bm = Some ruc;\n         simple_matches ruc p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using simple_match_and_correct[of am p bm]"], ["proof (prove)\nusing this:\n  simple_matches bm p\n  simple_matches am p\n  (simple_matches am p \\<and> simple_matches bm p) =\n  (case simple_match_and am bm of None \\<Rightarrow> False\n   | Some m \\<Rightarrow> simple_matches m p)\n\ngoal (1 subgoal):\n 1. (\\<And>ruc.\n        \\<lbrakk>simple_match_and am bm = Some ruc;\n         simple_matches ruc p\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(simp split: option.splits)"], ["proof (state)\nthis:\n  simple_match_and am bm = Some ruc\n  simple_matches ruc p\n\ngoal (2 subgoals):\n 1. \\<lbrakk>b = (bm, bd); simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)\n 2. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n    Some (the (simple_match_and am r2), ad, d2)", "unfolding b"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) ((bm, bd) # bs))\n     p =\n    Some (the (simple_match_and am r2), ad, d2)", "by(simp add: generalized_fw_join_def option2list_def generalized_sfw_simps drb)"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n  Some (the (simple_match_and am r2), ad, d2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "case False"], ["proof (state)\nthis:\n  \\<not> simple_matches bm p\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "with Cons.prems"], ["proof (chain)\npicking this:\n  generalized_sfw (b # bs) p = Some (r2, d2)\n  \\<not> simple_matches bm p", "have bd:\n            \"generalized_sfw (b # bs) p = generalized_sfw bs p\"\n            \"generalized_sfw (b # bs) p = Some (r2, d2)\""], ["proof (prove)\nusing this:\n  generalized_sfw (b # bs) p = Some (r2, d2)\n  \\<not> simple_matches bm p\n\ngoal (1 subgoal):\n 1. generalized_sfw (b # bs) p = generalized_sfw bs p &&&\n    generalized_sfw (b # bs) p = Some (r2, d2)", "by(simp_all add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  generalized_sfw (b # bs) p = generalized_sfw bs p\n  generalized_sfw (b # bs) p = Some (r2, d2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "note mIH = Cons.IH[OF bd(2)[unfolded bd(1)]]"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join ((am, ad) # as) bs) p =\n  Some (the (simple_match_and am r2), ad, d2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>b = (bm, bd); \\<not> simple_matches bm p\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw\n                       (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n                      Some (the (simple_match_and am r2), ad, d2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n    Some (the (simple_match_and am r2), ad, d2)", "unfolding mIH[symmetric] b"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) ((bm, bd) # bs))\n     p =\n    generalized_sfw (generalized_fw_join ((am, ad) # as) bs) p", "using generalized_fw_join_2_nomatch[OF False, of \"(am, ad) # as\" bd bs]"], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join ((am, ad) # as) ((bm, bd) # bs)) p =\n  generalized_sfw (generalized_fw_join ((am, ad) # as) bs) p\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) ((bm, bd) # bs))\n     p =\n    generalized_sfw (generalized_fw_join ((am, ad) # as) bs) p", "."], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n  Some (the (simple_match_and am r2), ad, d2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join ((am, ad) # as) (b # bs)) p =\n  Some (the (simple_match_and am r2), ad, d2)\n\ngoal (1 subgoal):\n 1. generalized_sfw [] p = Some (r2, d2) \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join ((am, ad) # as) []) p =\n    Some (the (simple_match_and am r2), ad, d2)", "qed(simp add: generalized_sfw_simps generalized_fw_join_def)"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) f2) p =\n  Some (the (simple_match_and r1 r2), d1, d2)\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "(*and empty_concat: \"concat (map (\\<lambda>x. []) ms) = []\" by simp*)"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) f2) p =\n  Some (the (simple_match_and r1 r2), d1, d2)\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "case False"], ["proof (state)\nthis:\n  \\<not> simple_matches am p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "with Cons.prems"], ["proof (chain)\npicking this:\n  generalized_sfw (a # as) p = Some (r1, d1)\n  generalized_sfw f2 p = Some (r2, d2)\n  \\<not> simple_matches am p", "have \"generalized_sfw (a # as) p = generalized_sfw as p\""], ["proof (prove)\nusing this:\n  generalized_sfw (a # as) p = Some (r1, d1)\n  generalized_sfw f2 p = Some (r2, d2)\n  \\<not> simple_matches am p\n\ngoal (1 subgoal):\n 1. generalized_sfw (a # as) p = generalized_sfw as p", "by(simp add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  generalized_sfw (a # as) p = generalized_sfw as p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "with Cons.prems"], ["proof (chain)\npicking this:\n  generalized_sfw (a # as) p = Some (r1, d1)\n  generalized_sfw f2 p = Some (r2, d2)\n  generalized_sfw (a # as) p = generalized_sfw as p", "have \"generalized_sfw as p = Some (r1, d1)\""], ["proof (prove)\nusing this:\n  generalized_sfw (a # as) p = Some (r1, d1)\n  generalized_sfw f2 p = Some (r2, d2)\n  generalized_sfw (a # as) p = generalized_sfw as p\n\ngoal (1 subgoal):\n 1. generalized_sfw as p = Some (r1, d1)", "by simp"], ["proof (state)\nthis:\n  generalized_sfw as p = Some (r1, d1)\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "note mIH = Cons.IH[OF this Cons.prems(2)]"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join as f2) p =\n  Some (the (simple_match_and r1 r2), d1, d2)\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) f2) p =\n    Some (the (simple_match_and r1 r2), d1, d2)", "unfolding mIH[symmetric] a"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join ((am, ad) # as) f2) p =\n    generalized_sfw (generalized_fw_join as f2) p", "unfolding generalized_fw_join_cons_1"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw\n     (concat\n       (map (\\<lambda>(m2, b).\n                map (\\<lambda>u. (u, ad, b))\n                 (option2list (simple_match_and am m2)))\n         f2) @\n      generalized_fw_join as f2)\n     p =\n    generalized_sfw (generalized_fw_join as f2) p", "unfolding generalized_sfw_append"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case generalized_sfw\n           (concat\n             (map (\\<lambda>(m2, b).\n                      map (\\<lambda>u. (u, ad, b))\n                       (option2list (simple_match_and am m2)))\n               f2))\n           p of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as f2) p\n     | Some x \\<Rightarrow> Some x) =\n    generalized_sfw (generalized_fw_join as f2) p", "unfolding generalized_fw_join_1_nomatch[OF False, of ad f2]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case None of\n     None \\<Rightarrow> generalized_sfw (generalized_fw_join as f2) p\n     | Some x \\<Rightarrow> Some x) =\n    generalized_sfw (generalized_fw_join as f2) p", "by simp"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) f2) p =\n  Some (the (simple_match_and r1 r2), d1, d2)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) f2) p =\n  Some (the (simple_match_and r1 r2), d1, d2)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>generalized_sfw [] p = Some (r1, d1);\n     generalized_sfw f2 p = Some (r2, d2)\\<rbrakk>\n    \\<Longrightarrow> generalized_sfw (generalized_fw_join [] f2) p =\n                      Some (the (simple_match_and r1 r2), d1, d2)", "qed(simp add: generalized_fw_join_def generalized_sfw_simps;fail)"], ["", "(* The structure is nearly the same as with generalized_fw_joinI, so it should be possible to show \n     it in one proof. But I felt like this is the better way *)"], ["", "lemma generalized_fw_joinD:\n    \"generalized_sfw (generalized_fw_join f1 f2) p = Some (u, d1,d2) \\<Longrightarrow>\n      \\<exists>r1 r2. generalized_sfw f1 p = Some (r1,d1) \\<and> generalized_sfw f2 p = Some (r2,d2) \\<and> Some u = simple_match_and r1 r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join f1 f2) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw f1 p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "proof(induction f1)"], ["proof (state)\ngoal (2 subgoals):\n 1. generalized_sfw (generalized_fw_join [] f2) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw [] p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2\n 2. \\<And>a f1.\n       \\<lbrakk>generalized_sfw (generalized_fw_join f1 f2) p =\n                Some (u, d1, d2) \\<Longrightarrow>\n                \\<exists>r1 r2.\n                   generalized_sfw f1 p = Some (r1, d1) \\<and>\n                   generalized_sfw f2 p = Some (r2, d2) \\<and>\n                   Some u = simple_match_and r1 r2;\n        generalized_sfw (generalized_fw_join (a # f1) f2) p =\n        Some (u, d1, d2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r1 r2.\n                            generalized_sfw (a # f1) p =\n                            Some (r1, d1) \\<and>\n                            generalized_sfw f2 p = Some (r2, d2) \\<and>\n                            Some u = simple_match_and r1 r2", "case (Cons a as)"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join as f2) p =\n  Some (u, d1, d2) \\<Longrightarrow>\n  \\<exists>r1 r2.\n     generalized_sfw as p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n  generalized_sfw (generalized_fw_join (a # as) f2) p = Some (u, d1, d2)\n\ngoal (2 subgoals):\n 1. generalized_sfw (generalized_fw_join [] f2) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw [] p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2\n 2. \\<And>a f1.\n       \\<lbrakk>generalized_sfw (generalized_fw_join f1 f2) p =\n                Some (u, d1, d2) \\<Longrightarrow>\n                \\<exists>r1 r2.\n                   generalized_sfw f1 p = Some (r1, d1) \\<and>\n                   generalized_sfw f2 p = Some (r2, d2) \\<and>\n                   Some u = simple_match_and r1 r2;\n        generalized_sfw (generalized_fw_join (a # f1) f2) p =\n        Some (u, d1, d2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r1 r2.\n                            generalized_sfw (a # f1) p =\n                            Some (r1, d1) \\<and>\n                            generalized_sfw f2 p = Some (r2, d2) \\<and>\n                            Some u = simple_match_and r1 r2", "obtain am ad where a[simp]: \"a = Pair am ad\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>am ad. a = (am, ad) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases a)"], ["proof (state)\nthis:\n  a = (am, ad)\n\ngoal (2 subgoals):\n 1. generalized_sfw (generalized_fw_join [] f2) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw [] p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2\n 2. \\<And>a f1.\n       \\<lbrakk>generalized_sfw (generalized_fw_join f1 f2) p =\n                Some (u, d1, d2) \\<Longrightarrow>\n                \\<exists>r1 r2.\n                   generalized_sfw f1 p = Some (r1, d1) \\<and>\n                   generalized_sfw f2 p = Some (r2, d2) \\<and>\n                   Some u = simple_match_and r1 r2;\n        generalized_sfw (generalized_fw_join (a # f1) f2) p =\n        Some (u, d1, d2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r1 r2.\n                            generalized_sfw (a # f1) p =\n                            Some (r1, d1) \\<and>\n                            generalized_sfw f2 p = Some (r2, d2) \\<and>\n                            Some u = simple_match_and r1 r2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "proof(cases \"simple_matches am p\", rule exI)"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_matches am p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (?r1.1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and ?r1.1 r2\n 2. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "case True"], ["proof (state)\nthis:\n  simple_matches am p\n\ngoal (2 subgoals):\n 1. simple_matches am p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (?r1.1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and ?r1.1 r2\n 2. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "show \"\\<exists>r2. generalized_sfw (a # as) p = Some (am, d1) \\<and> generalized_sfw f2 p = Some (r2, d2) \\<and> Some u = simple_match_and am r2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "using Cons.prems"], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join (a # as) f2) p = Some (u, d1, d2)\n\ngoal (1 subgoal):\n 1. \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "proof(induction f2)"], ["proof (state)\ngoal (2 subgoals):\n 1. generalized_sfw (generalized_fw_join (a # as) []) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw [] p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2\n 2. \\<And>aa f2.\n       \\<lbrakk>generalized_sfw (generalized_fw_join (a # as) f2) p =\n                Some (u, d1, d2) \\<Longrightarrow>\n                \\<exists>r2.\n                   generalized_sfw (a # as) p = Some (am, d1) \\<and>\n                   generalized_sfw f2 p = Some (r2, d2) \\<and>\n                   Some u = simple_match_and am r2;\n        generalized_sfw (generalized_fw_join (a # as) (aa # f2)) p =\n        Some (u, d1, d2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r2.\n                            generalized_sfw (a # as) p =\n                            Some (am, d1) \\<and>\n                            generalized_sfw (aa # f2) p =\n                            Some (r2, d2) \\<and>\n                            Some u = simple_match_and am r2", "case (Cons b bs)"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) bs) p =\n  Some (u, d1, d2) \\<Longrightarrow>\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw bs p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n  generalized_sfw (generalized_fw_join (a # as) (b # bs)) p =\n  Some (u, d1, d2)\n\ngoal (2 subgoals):\n 1. generalized_sfw (generalized_fw_join (a # as) []) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw [] p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2\n 2. \\<And>aa f2.\n       \\<lbrakk>generalized_sfw (generalized_fw_join (a # as) f2) p =\n                Some (u, d1, d2) \\<Longrightarrow>\n                \\<exists>r2.\n                   generalized_sfw (a # as) p = Some (am, d1) \\<and>\n                   generalized_sfw f2 p = Some (r2, d2) \\<and>\n                   Some u = simple_match_and am r2;\n        generalized_sfw (generalized_fw_join (a # as) (aa # f2)) p =\n        Some (u, d1, d2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r2.\n                            generalized_sfw (a # as) p =\n                            Some (am, d1) \\<and>\n                            generalized_sfw (aa # f2) p =\n                            Some (r2, d2) \\<and>\n                            Some u = simple_match_and am r2", "obtain bm bd where b[simp]: \"b = Pair bm bd\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>bm bd. b = (bm, bd) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by(cases b)"], ["proof (state)\nthis:\n  b = (bm, bd)\n\ngoal (2 subgoals):\n 1. generalized_sfw (generalized_fw_join (a # as) []) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw [] p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2\n 2. \\<And>aa f2.\n       \\<lbrakk>generalized_sfw (generalized_fw_join (a # as) f2) p =\n                Some (u, d1, d2) \\<Longrightarrow>\n                \\<exists>r2.\n                   generalized_sfw (a # as) p = Some (am, d1) \\<and>\n                   generalized_sfw f2 p = Some (r2, d2) \\<and>\n                   Some u = simple_match_and am r2;\n        generalized_sfw (generalized_fw_join (a # as) (aa # f2)) p =\n        Some (u, d1, d2)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r2.\n                            generalized_sfw (a # as) p =\n                            Some (am, d1) \\<and>\n                            generalized_sfw (aa # f2) p =\n                            Some (r2, d2) \\<and>\n                            Some u = simple_match_and am r2", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "proof(cases \"simple_matches bm p\", rule exI)"], ["proof (state)\ngoal (2 subgoals):\n 1. simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (a # as) p = Some (am, d1) \\<and>\n    generalized_sfw (b # bs) p = Some (?r2.1, d2) \\<and>\n    Some u = simple_match_and am ?r2.1\n 2. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "case True"], ["proof (state)\nthis:\n  simple_matches bm p\n\ngoal (2 subgoals):\n 1. simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (a # as) p = Some (am, d1) \\<and>\n    generalized_sfw (b # bs) p = Some (?r2.1, d2) \\<and>\n    Some u = simple_match_and am ?r2.1\n 2. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "with \\<open>simple_matches am p\\<close>"], ["proof (chain)\npicking this:\n  simple_matches am p\n  simple_matches bm p", "obtain u' (* u' = u, but I don't need that yet. *) \n            where sma: \"simple_match_and am bm = Some u' \\<and> simple_matches u' p\""], ["proof (prove)\nusing this:\n  simple_matches am p\n  simple_matches bm p\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        simple_match_and am bm = Some u' \\<and>\n        simple_matches u' p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using simple_match_and_correct[of am p bm]"], ["proof (prove)\nusing this:\n  simple_matches am p\n  simple_matches bm p\n  (simple_matches am p \\<and> simple_matches bm p) =\n  (case simple_match_and am bm of None \\<Rightarrow> False\n   | Some m \\<Rightarrow> simple_matches m p)\n\ngoal (1 subgoal):\n 1. (\\<And>u'.\n        simple_match_and am bm = Some u' \\<and>\n        simple_matches u' p \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by(simp split: option.splits)"], ["proof (state)\nthis:\n  simple_match_and am bm = Some u' \\<and> simple_matches u' p\n\ngoal (2 subgoals):\n 1. simple_matches bm p \\<Longrightarrow>\n    generalized_sfw (a # as) p = Some (am, d1) \\<and>\n    generalized_sfw (b # bs) p = Some (?r2.1, d2) \\<and>\n    Some u = simple_match_and am ?r2.1\n 2. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "show \"generalized_sfw (a # as) p = Some (am, d1) \\<and> generalized_sfw (b # bs) p = Some (bm, d2) \\<and> Some u = simple_match_and am bm\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (a # as) p = Some (am, d1) \\<and>\n    generalized_sfw (b # bs) p = Some (bm, d2) \\<and>\n    Some u = simple_match_and am bm", "using Cons.prems True \\<open>simple_matches am p\\<close>"], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join (a # as) (b # bs)) p =\n  Some (u, d1, d2)\n  simple_matches bm p\n  simple_matches am p\n\ngoal (1 subgoal):\n 1. generalized_sfw (a # as) p = Some (am, d1) \\<and>\n    generalized_sfw (b # bs) p = Some (bm, d2) \\<and>\n    Some u = simple_match_and am bm", "by(simp add: generalized_fw_join_def generalized_sfw_append sma generalized_sfw_simps)"], ["proof (state)\nthis:\n  generalized_sfw (a # as) p = Some (am, d1) \\<and>\n  generalized_sfw (b # bs) p = Some (bm, d2) \\<and>\n  Some u = simple_match_and am bm\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "case False"], ["proof (state)\nthis:\n  \\<not> simple_matches bm p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "have \"generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)", "using Cons.prems"], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join (a # as) (b # bs)) p =\n  Some (u, d1, d2)\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)", "unfolding b"], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join (a # as) ((bm, bd) # bs)) p =\n  Some (u, d1, d2)\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)", "unfolding generalized_fw_join_2_nomatch[OF False]"], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)", "."], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join (a # as) bs) p = Some (u, d1, d2)\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "note Cons.IH[OF this]"], ["proof (state)\nthis:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw bs p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "moreover"], ["proof (state)\nthis:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw bs p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "have \"generalized_sfw (b # bs) p = generalized_sfw bs p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (b # bs) p = generalized_sfw bs p", "using False"], ["proof (prove)\nusing this:\n  \\<not> simple_matches bm p\n\ngoal (1 subgoal):\n 1. generalized_sfw (b # bs) p = generalized_sfw bs p", "by(simp add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  generalized_sfw (b # bs) p = generalized_sfw bs p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches bm p \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw bs p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n  generalized_sfw (b # bs) p = generalized_sfw bs p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw bs p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n  generalized_sfw (b # bs) p = generalized_sfw bs p\n\ngoal (1 subgoal):\n 1. \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "by presburger"], ["proof (state)\nthis:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw (b # bs) p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join (a # as) []) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r2.\n       generalized_sfw (a # as) p = Some (am, d1) \\<and>\n       generalized_sfw [] p = Some (r2, d2) \\<and>\n       Some u = simple_match_and am r2", "qed(simp add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  \\<exists>r2.\n     generalized_sfw (a # as) p = Some (am, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and am r2\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "case False"], ["proof (state)\nthis:\n  \\<not> simple_matches am p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "with Cons.prems"], ["proof (chain)\npicking this:\n  generalized_sfw (generalized_fw_join (a # as) f2) p = Some (u, d1, d2)\n  \\<not> simple_matches am p", "have \"generalized_sfw (generalized_fw_join as f2) p = Some (u, d1, d2)\""], ["proof (prove)\nusing this:\n  generalized_sfw (generalized_fw_join (a # as) f2) p = Some (u, d1, d2)\n  \\<not> simple_matches am p\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join as f2) p = Some (u, d1, d2)", "by(simp add: generalized_fw_join_cons_1 generalized_sfw_append generalized_fw_join_1_nomatch)"], ["proof (state)\nthis:\n  generalized_sfw (generalized_fw_join as f2) p = Some (u, d1, d2)\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "note Cons.IH[OF this]"], ["proof (state)\nthis:\n  \\<exists>r1 r2.\n     generalized_sfw as p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "moreover"], ["proof (state)\nthis:\n  \\<exists>r1 r2.\n     generalized_sfw as p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "have \"generalized_sfw (a # as) p = generalized_sfw as p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw (a # as) p = generalized_sfw as p", "using False"], ["proof (prove)\nusing this:\n  \\<not> simple_matches am p\n\ngoal (1 subgoal):\n 1. generalized_sfw (a # as) p = generalized_sfw as p", "by(simp add: generalized_sfw_simps)"], ["proof (state)\nthis:\n  generalized_sfw (a # as) p = generalized_sfw as p\n\ngoal (1 subgoal):\n 1. \\<not> simple_matches am p \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "ultimately"], ["proof (chain)\npicking this:\n  \\<exists>r1 r2.\n     generalized_sfw as p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n  generalized_sfw (a # as) p = generalized_sfw as p", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>r1 r2.\n     generalized_sfw as p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n  generalized_sfw (a # as) p = generalized_sfw as p\n\ngoal (1 subgoal):\n 1. \\<exists>r1 r2.\n       generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "by presburger"], ["proof (state)\nthis:\n  \\<exists>r1 r2.\n     generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>r1 r2.\n     generalized_sfw (a # as) p = Some (r1, d1) \\<and>\n     generalized_sfw f2 p = Some (r2, d2) \\<and>\n     Some u = simple_match_and r1 r2\n\ngoal (1 subgoal):\n 1. generalized_sfw (generalized_fw_join [] f2) p =\n    Some (u, d1, d2) \\<Longrightarrow>\n    \\<exists>r1 r2.\n       generalized_sfw [] p = Some (r1, d1) \\<and>\n       generalized_sfw f2 p = Some (r2, d2) \\<and>\n       Some u = simple_match_and r1 r2", "qed(simp add: generalized_fw_join_def generalized_sfw_simps)"], ["", "text\\<open>We imagine two firewalls are positioned directly after each other.\n        The first one has ruleset rs1 installed, the second one has ruleset rs2 installed.\n        A packet needs to pass both firewalls.\\<close>"], ["", "theorem simple_fw_join:\n    defines \"rule_translate \\<equiv>\n      map (\\<lambda>(u,a,b). SimpleRule u (if a = Accept \\<and> b = Accept then Accept else Drop))\"\n    shows\n    \"simple_fw rs1 p = Decision FinalAllow \\<and> simple_fw rs2 p = Decision FinalAllow \\<longleftrightarrow>\n      simple_fw (rule_translate (generalized_fw_join (map simple_rule_dtor rs1) (map simple_rule_dtor rs2))) p = Decision FinalAllow\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (simple_fw rs1 p = Decision FinalAllow \\<and>\n     simple_fw rs2 p = Decision FinalAllow) =\n    (simple_fw\n      (rule_translate\n        (generalized_fw_join (map simple_rule_dtor rs1)\n          (map simple_rule_dtor rs2)))\n      p =\n     Decision FinalAllow)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (simple_fw rs1 p = Decision FinalAllow \\<and>\n     simple_fw rs2 p = Decision FinalAllow) =\n    (simple_fw\n      (rule_translate\n        (generalized_fw_join (map simple_rule_dtor rs1)\n          (map simple_rule_dtor rs2)))\n      p =\n     Decision FinalAllow)", "have hlp1:\n      \"simple_rule_dtor \\<circ> (\\<lambda>(u, a, b). SimpleRule u (if a = Accept \\<and> b = Accept then Accept else Drop)) =\n        apsnd (\\<lambda>(a, b). if a = Accept \\<and> b = Accept then Accept else Drop)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_rule_dtor \\<circ>\n    (\\<lambda>(u, a, b).\n        SimpleRule u\n         (if a = Accept \\<and> b = Accept then Accept else Drop)) =\n    apsnd\n     (\\<lambda>(a, b).\n         if a = Accept \\<and> b = Accept then Accept else Drop)", "unfolding fun_eq_iff comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       simple_rule_dtor\n        (case x of\n         (u, a, b) \\<Rightarrow>\n           SimpleRule u\n            (if a = Accept \\<and> b = Accept then Accept else Drop)) =\n       apsnd\n        (\\<lambda>(a, b).\n            if a = Accept \\<and> b = Accept then Accept else Drop)\n        x", "by(simp add: simple_rule_dtor_def)"], ["proof (state)\nthis:\n  simple_rule_dtor \\<circ>\n  (\\<lambda>(u, a, b).\n      SimpleRule u\n       (if a = Accept \\<and> b = Accept then Accept else Drop)) =\n  apsnd\n   (\\<lambda>(a, b). if a = Accept \\<and> b = Accept then Accept else Drop)\n\ngoal (1 subgoal):\n 1. (simple_fw rs1 p = Decision FinalAllow \\<and>\n     simple_fw rs2 p = Decision FinalAllow) =\n    (simple_fw\n      (rule_translate\n        (generalized_fw_join (map simple_rule_dtor rs1)\n          (map simple_rule_dtor rs2)))\n      p =\n     Decision FinalAllow)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (simple_fw rs1 p = Decision FinalAllow \\<and>\n     simple_fw rs2 p = Decision FinalAllow) =\n    (simple_fw\n      (rule_translate\n        (generalized_fw_join (map simple_rule_dtor rs1)\n          (map simple_rule_dtor rs2)))\n      p =\n     Decision FinalAllow)", "unfolding simple_fw_iff_generalized_fw_accept"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>r.\n         generalized_sfw (map simple_rule_dtor rs1) p =\n         Some (r, Accept)) \\<and>\n     (\\<exists>r.\n         generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))) =\n    (\\<exists>r.\n        generalized_sfw\n         (map simple_rule_dtor\n           (rule_translate\n             (generalized_fw_join (map simple_rule_dtor rs1)\n               (map simple_rule_dtor rs2))))\n         p =\n        Some (r, Accept))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p =\n        Some (r, Accept)) \\<Longrightarrow>\n    \\<exists>r.\n       generalized_sfw\n        (map simple_rule_dtor\n          (rule_translate\n            (generalized_fw_join (map simple_rule_dtor rs1)\n              (map simple_rule_dtor rs2))))\n        p =\n       Some (r, Accept)\n 2. \\<exists>r.\n       generalized_sfw\n        (map simple_rule_dtor\n          (rule_translate\n            (generalized_fw_join (map simple_rule_dtor rs1)\n              (map simple_rule_dtor rs2))))\n        p =\n       Some (r, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>generalized_sfw (map simple_rule_dtor rs1) p =\n                Some (r, Accept);\n        generalized_sfw (map simple_rule_dtor rs2) p =\n        Some (ra, Accept)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            generalized_sfw\n                             (map simple_rule_dtor\n                               (rule_translate\n                                 (generalized_fw_join\n                                   (map simple_rule_dtor rs1)\n                                   (map simple_rule_dtor rs2))))\n                             p =\n                            Some (r, Accept)\n 2. \\<exists>r.\n       generalized_sfw\n        (map simple_rule_dtor\n          (rule_translate\n            (generalized_fw_join (map simple_rule_dtor rs1)\n              (map simple_rule_dtor rs2))))\n        p =\n       Some (r, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(drule (1) generalized_fw_joinI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>generalized_sfw (map simple_rule_dtor rs2) p =\n                Some (ra, Accept);\n        generalized_sfw\n         (generalized_fw_join (map simple_rule_dtor rs1)\n           (map simple_rule_dtor rs2))\n         p =\n        Some (the (simple_match_and r ra), Accept, Accept)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r.\n                            generalized_sfw\n                             (map simple_rule_dtor\n                               (rule_translate\n                                 (generalized_fw_join\n                                   (map simple_rule_dtor rs1)\n                                   (map simple_rule_dtor rs2))))\n                             p =\n                            Some (r, Accept)\n 2. \\<exists>r.\n       generalized_sfw\n        (map simple_rule_dtor\n          (rule_translate\n            (generalized_fw_join (map simple_rule_dtor rs1)\n              (map simple_rule_dtor rs2))))\n        p =\n       Some (r, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(simp add: hlp1 rule_translate_def generalized_sfw_mapsnd ;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r.\n       generalized_sfw\n        (map simple_rule_dtor\n          (rule_translate\n            (generalized_fw_join (map simple_rule_dtor rs1)\n              (map simple_rule_dtor rs2))))\n        p =\n       Some (r, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(clarsimp simp add: hlp1 generalized_sfw_mapsnd rule_translate_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r a b.\n       \\<lbrakk>generalized_sfw\n                 (generalized_fw_join (map simple_rule_dtor rs1)\n                   (map simple_rule_dtor rs2))\n                 p =\n                Some (r, a, b);\n        (if a = Accept \\<and> b = Accept then Accept else Drop) =\n        Accept\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs1) p =\n                             Some (r, Accept)) \\<and>\n                         (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs2) p =\n                             Some (r, Accept))", "apply(drule generalized_fw_joinD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>r a b.\n       \\<lbrakk>(if a = Accept \\<and> b = Accept then Accept else Drop) =\n                Accept;\n        \\<exists>r1 r2.\n           generalized_sfw (map simple_rule_dtor rs1) p =\n           Some (r1, a) \\<and>\n           generalized_sfw (map simple_rule_dtor rs2) p =\n           Some (r2, b) \\<and>\n           Some r = simple_match_and r1 r2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs1) p =\n                             Some (r, Accept)) \\<and>\n                         (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs2) p =\n                             Some (r, Accept))", "apply(clarsimp split: if_splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (simple_fw rs1 p = Decision FinalAllow \\<and>\n   simple_fw rs2 p = Decision FinalAllow) =\n  (simple_fw\n    (rule_translate\n      (generalized_fw_join (map simple_rule_dtor rs1)\n        (map simple_rule_dtor rs2)))\n    p =\n   Decision FinalAllow)\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem simple_fw_join2:\n    \\<comment> \\<open>translates a @{text \"(match, action1, action2)\"} tuple of the joined generalized\n       firewall to a @{typ \"'i::len simple_rule list\"}. The two actions are translated such\n       that you only get @{const Accept} if both actions are @{const Accept}\\<close>\n    defines \"to_simple_rule_list \\<equiv> map (apsnd (\\<lambda>(a,b) \\<Rightarrow> (case a of Accept \\<Rightarrow> b\n                                                                 |  Drop \\<Rightarrow> Drop)))\"\n    shows \"simple_fw rs1 p = Decision FinalAllow \\<and> simple_fw rs2 p = Decision FinalAllow \\<longleftrightarrow>\n           (\\<exists>m. (generalized_sfw (to_simple_rule_list\n            (generalized_fw_join (map simple_rule_dtor rs1) (map simple_rule_dtor rs2))) p) = Some (m, Accept))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (simple_fw rs1 p = Decision FinalAllow \\<and>\n     simple_fw rs2 p = Decision FinalAllow) =\n    (\\<exists>m.\n        generalized_sfw\n         (to_simple_rule_list\n           (generalized_fw_join (map simple_rule_dtor rs1)\n             (map simple_rule_dtor rs2)))\n         p =\n        Some (m, Accept))", "unfolding simple_fw_iff_generalized_fw_accept"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<exists>r.\n         generalized_sfw (map simple_rule_dtor rs1) p =\n         Some (r, Accept)) \\<and>\n     (\\<exists>r.\n         generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))) =\n    (\\<exists>m.\n        generalized_sfw\n         (to_simple_rule_list\n           (generalized_fw_join (map simple_rule_dtor rs1)\n             (map simple_rule_dtor rs2)))\n         p =\n        Some (m, Accept))", "apply(rule)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p =\n        Some (r, Accept)) \\<Longrightarrow>\n    \\<exists>m.\n       generalized_sfw\n        (to_simple_rule_list\n          (generalized_fw_join (map simple_rule_dtor rs1)\n            (map simple_rule_dtor rs2)))\n        p =\n       Some (m, Accept)\n 2. \\<exists>m.\n       generalized_sfw\n        (to_simple_rule_list\n          (generalized_fw_join (map simple_rule_dtor rs1)\n            (map simple_rule_dtor rs2)))\n        p =\n       Some (m, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(clarify)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>generalized_sfw (map simple_rule_dtor rs1) p =\n                Some (r, Accept);\n        generalized_sfw (map simple_rule_dtor rs2) p =\n        Some (ra, Accept)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            generalized_sfw\n                             (to_simple_rule_list\n                               (generalized_fw_join\n                                 (map simple_rule_dtor rs1)\n                                 (map simple_rule_dtor rs2)))\n                             p =\n                            Some (m, Accept)\n 2. \\<exists>m.\n       generalized_sfw\n        (to_simple_rule_list\n          (generalized_fw_join (map simple_rule_dtor rs1)\n            (map simple_rule_dtor rs2)))\n        p =\n       Some (m, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(drule (1) generalized_fw_joinI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>r ra.\n       \\<lbrakk>generalized_sfw (map simple_rule_dtor rs2) p =\n                Some (ra, Accept);\n        generalized_sfw\n         (generalized_fw_join (map simple_rule_dtor rs1)\n           (map simple_rule_dtor rs2))\n         p =\n        Some (the (simple_match_and r ra), Accept, Accept)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>m.\n                            generalized_sfw\n                             (to_simple_rule_list\n                               (generalized_fw_join\n                                 (map simple_rule_dtor rs1)\n                                 (map simple_rule_dtor rs2)))\n                             p =\n                            Some (m, Accept)\n 2. \\<exists>m.\n       generalized_sfw\n        (to_simple_rule_list\n          (generalized_fw_join (map simple_rule_dtor rs1)\n            (map simple_rule_dtor rs2)))\n        p =\n       Some (m, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(clarsimp simp add: to_simple_rule_list_def generalized_sfw_mapsnd; fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>m.\n       generalized_sfw\n        (to_simple_rule_list\n          (generalized_fw_join (map simple_rule_dtor rs1)\n            (map simple_rule_dtor rs2)))\n        p =\n       Some (m, Accept) \\<Longrightarrow>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs1) p =\n        Some (r, Accept)) \\<and>\n    (\\<exists>r.\n        generalized_sfw (map simple_rule_dtor rs2) p = Some (r, Accept))", "apply(clarsimp simp add: to_simple_rule_list_def generalized_sfw_mapsnd)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a b.\n       \\<lbrakk>generalized_sfw\n                 (generalized_fw_join (map simple_rule_dtor rs1)\n                   (map simple_rule_dtor rs2))\n                 p =\n                Some (m, a, b);\n        (case a of Accept \\<Rightarrow> b | Drop \\<Rightarrow> Drop) =\n        Accept\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs1) p =\n                             Some (r, Accept)) \\<and>\n                         (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs2) p =\n                             Some (r, Accept))", "apply(drule generalized_fw_joinD)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m a b.\n       \\<lbrakk>(case a of Accept \\<Rightarrow> b\n                 | Drop \\<Rightarrow> Drop) =\n                Accept;\n        \\<exists>r1 r2.\n           generalized_sfw (map simple_rule_dtor rs1) p =\n           Some (r1, a) \\<and>\n           generalized_sfw (map simple_rule_dtor rs2) p =\n           Some (r2, b) \\<and>\n           Some m = simple_match_and r1 r2\\<rbrakk>\n       \\<Longrightarrow> (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs1) p =\n                             Some (r, Accept)) \\<and>\n                         (\\<exists>r.\n                             generalized_sfw (map simple_rule_dtor rs2) p =\n                             Some (r, Accept))", "apply(clarsimp split: if_splits simple_action.splits)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma generalized_fw_join_1_1:\n    \"generalized_fw_join [(m1,d1)] fw2 = foldr (\\<lambda>(m2,d2). (@) (case simple_match_and m1 m2 of None \\<Rightarrow> [] | Some mu \\<Rightarrow> [(mu,d1,d2)])) fw2 []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_fw_join [(m1, d1)] fw2 =\n    foldr\n     (\\<lambda>(m2, d2).\n         (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n              | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n     fw2 []", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. generalized_fw_join [(m1, d1)] fw2 =\n    foldr\n     (\\<lambda>(m2, d2).\n         (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n              | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n     fw2 []", "have concat_map_foldr: \"concat (map (\\<lambda>x. f x) l) = foldr (\\<lambda>x. (@) (f x)) l []\" for f :: \"'x \\<Rightarrow> 'y list\" and l"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat (map f l) = foldr (\\<lambda>x. (@) (f x)) l []", "by(induction l) simp_all"], ["proof (state)\nthis:\n  concat (map ?f1 ?l1) = foldr (\\<lambda>x. (@) (?f1 x)) ?l1 []\n\ngoal (1 subgoal):\n 1. generalized_fw_join [(m1, d1)] fw2 =\n    foldr\n     (\\<lambda>(m2, d2).\n         (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n              | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n     fw2 []", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_fw_join [(m1, d1)] fw2 =\n    foldr\n     (\\<lambda>(m2, d2).\n         (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n              | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n     fw2 []", "apply(simp add: generalized_fw_join_cons_1 option2list_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. concat\n     (map (\\<lambda>(m2, b).\n              map (\\<lambda>u. (u, d1, b))\n               (case simple_match_and m1 m2 of None \\<Rightarrow> []\n                | Some s \\<Rightarrow> [s]))\n       fw2) =\n    foldr\n     (\\<lambda>(m2, d2).\n         (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n              | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n     fw2 []", "apply(simp add: concat_map_foldr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr\n     (\\<lambda>x.\n         (@) (case x of\n              (m2, b) \\<Rightarrow>\n                map (\\<lambda>u. (u, d1, b))\n                 (case simple_match_and m1 m2 of None \\<Rightarrow> []\n                  | Some s \\<Rightarrow> [s])))\n     fw2 [] =\n    foldr\n     (\\<lambda>(m2, d2).\n         (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n              | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n     fw2 []", "apply(unfold list.map  prod.case_distrib option.case_distrib)"], ["proof (prove)\ngoal (1 subgoal):\n 1. foldr\n     (\\<lambda>x.\n         case x of\n         (x1, x2) \\<Rightarrow>\n           case simple_match_and m1 x1 of None \\<Rightarrow> (@) []\n           | Some x \\<Rightarrow> (@) [(x, d1, x2)])\n     fw2 [] =\n    foldr\n     (\\<lambda>(m2, d2).\n         case simple_match_and m1 m2 of None \\<Rightarrow> (@) []\n         | Some x \\<Rightarrow> (@) [(x, d1, d2)])\n     fw2 []", "by simp"], ["proof (state)\nthis:\n  generalized_fw_join [(m1, d1)] fw2 =\n  foldr\n   (\\<lambda>(m2, d2).\n       (@) (case simple_match_and m1 m2 of None \\<Rightarrow> []\n            | Some mu \\<Rightarrow> [(mu, d1, d2)]))\n   fw2 []\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma generalized_sfw_2_join_None:\n    \"generalized_sfw fw2 p = None \\<Longrightarrow> generalized_sfw (generalized_fw_join fw1 fw2) p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw fw2 p = None \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join fw1 fw2) p = None", "by(induction fw2) (simp_all add: generalized_sfw_simps generalized_sfw_append generalized_fw_join_2_nomatch split: if_splits option.splits prod.splits)"], ["", "lemma generalized_sfw_1_join_None:\n    \"generalized_sfw fw1 p = None \\<Longrightarrow> generalized_sfw (generalized_fw_join fw1 fw2) p = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. generalized_sfw fw1 p = None \\<Longrightarrow>\n    generalized_sfw (generalized_fw_join fw1 fw2) p = None", "by(induction fw1) (simp_all add: generalized_sfw_simps generalized_fw_join_cons_1 generalized_sfw_append generalized_fw_join_1_nomatch split: if_splits option.splits prod.splits)"], ["", "lemma generalized_sfw_join_set: \"(a, b1, b2) \\<in> set (generalized_fw_join f1 f2) \\<longleftrightarrow>\n    (\\<exists>a1 a2. (a1, b1) \\<in> set f1 \\<and> (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b1, b2) \\<in> set (generalized_fw_join f1 f2)) =\n    (\\<exists>a1 a2.\n        (a1, b1) \\<in> set f1 \\<and>\n        (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a)", "unfolding generalized_fw_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((a, b1, b2)\n     \\<in> set (concat\n                 (map (\\<lambda>(m1, a).\n                          concat\n                           (map (\\<lambda>(m2, b).\n                                    map (\\<lambda>u. (u, a, b))\n                                     (option2list (simple_match_and m1 m2)))\n                             f2))\n                   f1))) =\n    (\\<exists>a1 a2.\n        (a1, b1) \\<in> set f1 \\<and>\n        (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a)", "apply(rule iffI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. (a, b1, b2)\n    \\<in> set (concat\n                (map (\\<lambda>(m1, a).\n                         concat\n                          (map (\\<lambda>(m2, b).\n                                   map (\\<lambda>u. (u, a, b))\n                                    (option2list (simple_match_and m1 m2)))\n                            f2))\n                  f1)) \\<Longrightarrow>\n    \\<exists>a1 a2.\n       (a1, b1) \\<in> set f1 \\<and>\n       (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a\n 2. \\<exists>a1 a2.\n       (a1, b1) \\<in> set f1 \\<and>\n       (a2, b2) \\<in> set f2 \\<and>\n       simple_match_and a1 a2 = Some a \\<Longrightarrow>\n    (a, b1, b2)\n    \\<in> set (concat\n                (map (\\<lambda>(m1, a).\n                         concat\n                          (map (\\<lambda>(m2, b).\n                                   map (\\<lambda>u. (u, a, b))\n                                    (option2list (simple_match_and m1 m2)))\n                            f2))\n                  f1))", "subgoal"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b1, b2)\n    \\<in> set (concat\n                (map (\\<lambda>(m1, a).\n                         concat\n                          (map (\\<lambda>(m2, b).\n                                   map (\\<lambda>u. (u, a, b))\n                                    (option2list (simple_match_and m1 m2)))\n                            f2))\n                  f1)) \\<Longrightarrow>\n    \\<exists>a1 a2.\n       (a1, b1) \\<in> set f1 \\<and>\n       (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a", "unfolding generalized_fw_join_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (a, b1, b2)\n    \\<in> set (concat\n                (map (\\<lambda>(m1, a).\n                         concat\n                          (map (\\<lambda>(m2, b).\n                                   map (\\<lambda>u. (u, a, b))\n                                    (option2list (simple_match_and m1 m2)))\n                            f2))\n                  f1)) \\<Longrightarrow>\n    \\<exists>a1 a2.\n       (a1, b1) \\<in> set f1 \\<and>\n       (a2, b2) \\<in> set f2 \\<and> simple_match_and a1 a2 = Some a", "by(clarsimp simp: option2set_def split: option.splits) blast"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a1 a2.\n       (a1, b1) \\<in> set f1 \\<and>\n       (a2, b2) \\<in> set f2 \\<and>\n       simple_match_and a1 a2 = Some a \\<Longrightarrow>\n    (a, b1, b2)\n    \\<in> set (concat\n                (map (\\<lambda>(m1, a).\n                         concat\n                          (map (\\<lambda>(m2, b).\n                                   map (\\<lambda>u. (u, a, b))\n                                    (option2list (simple_match_and m1 m2)))\n                            f2))\n                  f1))", "by(clarsimp simp: option2set_def split: option.splits) fastforce"], ["", "subsection\\<open>Validity\\<close>"], ["", "text\\<open>There's validity of matches on @{const generalized_sfw}, too, even on the join.\\<close>"], ["", "definition gsfw_valid :: \"('i::len simple_match \\<times> 'c) list \\<Rightarrow> bool\" where\n    \"gsfw_valid \\<equiv> list_all (simple_match_valid \\<circ> fst)\""], ["", "lemma gsfw_join_valid: \"gsfw_valid f1 \\<Longrightarrow> gsfw_valid f2 \\<Longrightarrow> gsfw_valid (generalized_fw_join f1 f2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>gsfw_valid f1; gsfw_valid f2\\<rbrakk>\n    \\<Longrightarrow> gsfw_valid (generalized_fw_join f1 f2)", "unfolding gsfw_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>list_all (simple_match_valid \\<circ> fst) f1;\n     list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n    \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                       (generalized_fw_join f1 f2)", "apply(induction f1)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>list_all (simple_match_valid \\<circ> fst) [];\n     list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n    \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                       (generalized_fw_join [] f2)\n 2. \\<And>a f1.\n       \\<lbrakk>\\<lbrakk>list_all (simple_match_valid \\<circ> fst) f1;\n                 list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n                \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                                   (generalized_fw_join f1 f2);\n        list_all (simple_match_valid \\<circ> fst) (a # f1);\n        list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (generalized_fw_join (a # f1) f2)", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f1.\n       \\<lbrakk>\\<lbrakk>list_all (simple_match_valid \\<circ> fst) f1;\n                 list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n                \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                                   (generalized_fw_join f1 f2);\n        list_all (simple_match_valid \\<circ> fst) (a # f1);\n        list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (generalized_fw_join (a # f1) f2)", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f1.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst)\n                 (generalized_fw_join f1 f2);\n        simple_match_valid (fst a) \\<and>\n        list_all (simple_match_valid \\<circ> fst) f1;\n        list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (generalized_fw_join (a # f1) f2)", "apply(rename_tac a f1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f1.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst)\n                 (generalized_fw_join f1 f2);\n        simple_match_valid (fst a) \\<and>\n        list_all (simple_match_valid \\<circ> fst) f1;\n        list_all (simple_match_valid \\<circ> fst) f2\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (generalized_fw_join (a # f1) f2)", "apply(case_tac a)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f1 aa b.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst)\n                 (generalized_fw_join f1 f2);\n        simple_match_valid (fst a) \\<and>\n        list_all (simple_match_valid \\<circ> fst) f1;\n        list_all (simple_match_valid \\<circ> fst) f2; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (generalized_fw_join (a # f1) f2)", "apply(simp add: generalized_fw_join_cons_1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f1 aa b.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst)\n                 (generalized_fw_join f1 f2);\n        simple_match_valid aa \\<and>\n        list_all (simple_match_valid \\<circ> fst) f1;\n        list_all (simple_match_valid \\<circ> fst) f2; a = (aa, b)\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, ba).\n                                     map (\\<lambda>u. (u, b, ba))\n(option2list (simple_match_and aa m2)))\n                              f2))", "apply(clarify)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b f1 aa ba.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst)\n                 (generalized_fw_join f1 f2);\n        list_all (simple_match_valid \\<circ> fst) f2; simple_match_valid aa;\n        list_all (simple_match_valid \\<circ> fst) f1\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ba, b))\n(option2list (simple_match_and aa m2)))\n                              f2))", "apply(thin_tac \"list_all _ f1\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b f1 aa ba.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst)\n                 (generalized_fw_join f1 f2);\n        list_all (simple_match_valid \\<circ> fst) f2;\n        simple_match_valid aa\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ba, b))\n(option2list (simple_match_and aa m2)))\n                              f2))", "apply(thin_tac \"list_all _ (generalized_fw_join _ _)\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b f1 aa ba.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst) f2;\n        simple_match_valid aa\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ba, b))\n(option2list (simple_match_and aa m2)))\n                              f2))", "apply(induction f2)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>a b f1 aa ba.\n       \\<lbrakk>list_all (simple_match_valid \\<circ> fst) [];\n        simple_match_valid aa\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ba, b))\n(option2list (simple_match_and aa m2)))\n                              []))\n 2. \\<And>a f2 aa b f1 aaa ba.\n       \\<lbrakk>\\<And>a b f1 aa ba.\n                   \\<lbrakk>list_all (simple_match_valid \\<circ> fst) f2;\n                    simple_match_valid aa\\<rbrakk>\n                   \\<Longrightarrow> list_all\n(simple_match_valid \\<circ> fst)\n(concat\n  (map (\\<lambda>(m2, b).\n           map (\\<lambda>u. (u, ba, b))\n            (option2list (simple_match_and aa m2)))\n    f2));\n        list_all (simple_match_valid \\<circ> fst) (a # f2);\n        simple_match_valid aaa\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ba, b))\n(option2list (simple_match_and aaa m2)))\n                              (a # f2)))", "apply(simp;fail)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f2 aa b f1 aaa ba.\n       \\<lbrakk>\\<And>a b f1 aa ba.\n                   \\<lbrakk>list_all (simple_match_valid \\<circ> fst) f2;\n                    simple_match_valid aa\\<rbrakk>\n                   \\<Longrightarrow> list_all\n(simple_match_valid \\<circ> fst)\n(concat\n  (map (\\<lambda>(m2, b).\n           map (\\<lambda>u. (u, ba, b))\n            (option2list (simple_match_and aa m2)))\n    f2));\n        list_all (simple_match_valid \\<circ> fst) (a # f2);\n        simple_match_valid aaa\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (concat\n                            (map (\\<lambda>(m2, b).\n                                     map (\\<lambda>u. (u, ba, b))\n(option2list (simple_match_and aaa m2)))\n                              (a # f2)))", "apply(simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f2 aaa ba.\n       \\<lbrakk>\\<And>aa ba.\n                   simple_match_valid aa \\<Longrightarrow>\n                   list_all (simple_match_valid \\<circ> fst)\n                    (concat\n                      (map (\\<lambda>(m2, b).\n                               map (\\<lambda>u. (u, ba, b))\n                                (option2list (simple_match_and aa m2)))\n                        f2));\n        simple_match_valid (fst a) \\<and>\n        list_all (simple_match_valid \\<circ> fst) f2;\n        simple_match_valid aaa\\<rbrakk>\n       \\<Longrightarrow> list_all (simple_match_valid \\<circ> fst)\n                          (case a of\n                           (m2, b) \\<Rightarrow>\n                             map (\\<lambda>u. (u, ba, b))\n                              (option2list (simple_match_and aaa m2)))", "apply(clarsimp simp add: option2list_def list_all_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a f2 aaa x.\n       \\<lbrakk>\\<And>aa ba.\n                   simple_match_valid aa \\<Longrightarrow>\n                   \\<forall>y\\<in>set f2.\n                      \\<forall>a.\n                         (\\<exists>ab b uu_ uua_.\n                             (uua_, uu_) = y \\<and>\n                             (a, ab, b)\n                             \\<in> (\\<lambda>x. (x, ba, uu_)) `\n                                   {x. Some x =\n simple_match_and aa uua_}) \\<longrightarrow>\n                         simple_match_valid a;\n        simple_match_valid aaa; simple_match_valid a;\n        \\<forall>x\\<in>set f2. simple_match_valid (fst x);\n        Some x = simple_match_and aaa a\\<rbrakk>\n       \\<Longrightarrow> simple_match_valid x", "using simple_match_and_valid"], ["proof (prove)\nusing this:\n  \\<lbrakk>simple_match_valid ?m1.0; simple_match_valid ?m2.0;\n   simple_match_and ?m1.0 ?m2.0 = Some ?m\\<rbrakk>\n  \\<Longrightarrow> simple_match_valid ?m\n\ngoal (1 subgoal):\n 1. \\<And>a f2 aaa x.\n       \\<lbrakk>\\<And>aa ba.\n                   simple_match_valid aa \\<Longrightarrow>\n                   \\<forall>y\\<in>set f2.\n                      \\<forall>a.\n                         (\\<exists>ab b uu_ uua_.\n                             (uua_, uu_) = y \\<and>\n                             (a, ab, b)\n                             \\<in> (\\<lambda>x. (x, ba, uu_)) `\n                                   {x. Some x =\n simple_match_and aa uua_}) \\<longrightarrow>\n                         simple_match_valid a;\n        simple_match_valid aaa; simple_match_valid a;\n        \\<forall>x\\<in>set f2. simple_match_valid (fst x);\n        Some x = simple_match_and aaa a\\<rbrakk>\n       \\<Longrightarrow> simple_match_valid x", "apply metis"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma gsfw_validI: \"simple_fw_valid fw \\<Longrightarrow> gsfw_valid (map simple_rule_dtor fw)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_fw_valid fw \\<Longrightarrow>\n    gsfw_valid (map simple_rule_dtor fw)", "unfolding gsfw_valid_def simple_fw_valid_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. list_all (simple_match_valid \\<circ> match_sel) fw \\<Longrightarrow>\n    list_all (simple_match_valid \\<circ> fst) (map simple_rule_dtor fw)", "by(clarsimp simp add: simple_rule_dtor_def list_all_iff split: simple_rule.splits) fastforce"], ["", "end"]]}