{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs/Lambda_Free_RPO_Std.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs", "problem_names": ["lemma extf_ext_trans: \"ext_trans (extf f)\"", "lemma extf_ext: \"ext (extf f)\"", "lemmas extf_mono_strong = ext.mono_strong[OF extf_ext]", "lemmas extf_mono = ext.mono[OF extf_ext, mono]", "lemmas extf_map = ext.map[OF extf_ext]", "lemmas extf_trans = ext_trans.trans[OF extf_ext_trans]", "lemmas extf_irrefl_from_trans =\n  ext_trans_before_irrefl.irrefl_from_trans[OF extf_ext_trans_before_irrefl]", "lemmas extf_compat_append_left = ext_compat_cons.compat_append_left[OF extf_ext_compat_cons]", "lemmas extf_compat_list = ext_compat_list.compat_list[OF extf_ext_compat_list]", "lemma chksubs_mono[mono]: \"gt \\<le> gt' \\<Longrightarrow> chksubs gt \\<le> chksubs gt'\"", "lemma gt_iff_sub_diff_same: \"t >\\<^sub>t s \\<longleftrightarrow> gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s\"", "lemma gt_fun_imp: \"fun t >\\<^sub>t s \\<Longrightarrow> t >\\<^sub>t s\"", "lemma gt_arg_imp: \"arg t >\\<^sub>t s \\<Longrightarrow> t >\\<^sub>t s\"", "lemma gt_imp_vars: \"t >\\<^sub>t s \\<Longrightarrow> vars t \\<supseteq> vars s\"", "theorem gt_trans: \"u >\\<^sub>t t \\<Longrightarrow> t >\\<^sub>t s \\<Longrightarrow> u >\\<^sub>t s\"", "theorem gt_irrefl: \"\\<not> s >\\<^sub>t s\"", "lemma gt_antisym: \"t >\\<^sub>t s \\<Longrightarrow> \\<not> s >\\<^sub>t t\"", "lemma\n  gt_sub_fun: \"App s t >\\<^sub>t s\" and\n  gt_sub_arg: \"App s t >\\<^sub>t t\"", "theorem gt_proper_sub: \"proper_sub s t \\<Longrightarrow> t >\\<^sub>t s\"", "lemma gt_compat_fun:\n  assumes t'_gt_t: \"t' >\\<^sub>t t\"\n  shows \"App s t' >\\<^sub>t App s t\"", "theorem gt_compat_fun_strong:\n  assumes t'_gt_t: \"t' >\\<^sub>t t\"\n  shows \"apps s (t' # us) >\\<^sub>t apps s (t # us)\"", "theorem gt_diff_same_compat_arg:\n  assumes\n    extf_compat_snoc: \"\\<And>f. ext_compat_snoc (extf f)\" and\n    diff_same: \"gt_diff s' s \\<or> gt_same s' s\"\n  shows \"App s' t >\\<^sub>t App s t\"", "lemma gt_imp_chksubs_gt:\n  assumes t_gt_s: \"t >\\<^sub>t s\"\n  shows \"chksubs (>\\<^sub>t) t s\"", "theorem gt_subst:\n  assumes wary_\\<rho>: \"wary_subst \\<rho>\"\n  shows \"t >\\<^sub>t s \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\"", "theorem gt_total_ground:\n  assumes extf_total: \"\\<And>f. ext_total (extf f)\"\n  shows \"ground t \\<Longrightarrow> ground s \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\"", "theorem gt_wf:\n  assumes extf_wf: \"\\<And>f. ext_wf (extf f)\"\n  shows \"wfP (\\<lambda>s t. t >\\<^sub>t s)\""], "translations": [["", "lemma extf_ext_trans: \"ext_trans (extf f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_trans (extf f)", "by (rule ext_trans_before_irrefl.axioms(1)[OF extf_ext_trans_before_irrefl])"], ["", "lemma extf_ext: \"ext (extf f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext (extf f)", "by (rule ext_trans.axioms(1)[OF extf_ext_trans])"], ["", "lemmas extf_mono_strong = ext.mono_strong[OF extf_ext]"], ["", "lemmas extf_mono = ext.mono[OF extf_ext, mono]"], ["", "lemmas extf_map = ext.map[OF extf_ext]"], ["", "lemmas extf_trans = ext_trans.trans[OF extf_ext_trans]"], ["", "lemmas extf_irrefl_from_trans =\n  ext_trans_before_irrefl.irrefl_from_trans[OF extf_ext_trans_before_irrefl]"], ["", "lemmas extf_compat_append_left = ext_compat_cons.compat_append_left[OF extf_ext_compat_cons]"], ["", "lemmas extf_compat_list = ext_compat_list.compat_list[OF extf_ext_compat_list]"], ["", "definition chkvar :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" where\n  [simp]: \"chkvar t s \\<longleftrightarrow> vars_hd (head s) \\<subseteq> vars t\""], ["", "end"], ["", "locale rpo = rpo_basis _ _ arity_sym arity_var\n  for\n    arity_sym :: \"'s \\<Rightarrow> enat\" and\n    arity_var :: \"'v \\<Rightarrow> enat\"\nbegin"], ["", "subsection \\<open>Inductive Definitions\\<close>"], ["", "definition\n  chksubs :: \"(('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool) \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\"\nwhere\n  [simp]: \"chksubs gt t s \\<longleftrightarrow> (case s of App s1 s2 \\<Rightarrow> gt t s1 \\<and> gt t s2 | _ \\<Rightarrow> True)\""], ["", "lemma chksubs_mono[mono]: \"gt \\<le> gt' \\<Longrightarrow> chksubs gt \\<le> chksubs gt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt \\<le> gt' \\<Longrightarrow> chksubs gt \\<le> chksubs gt'", "by (auto simp: tm.case_eq_if) force+"], ["", "inductive gt :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" (infix \">\\<^sub>t\" 50) where\n  gt_sub: \"is_App t \\<Longrightarrow> (fun t >\\<^sub>t s \\<or> fun t = s) \\<or> (arg t >\\<^sub>t s \\<or> arg t = s) \\<Longrightarrow> t >\\<^sub>t s\"\n| gt_diff: \"head t >\\<^sub>h\\<^sub>d head s \\<Longrightarrow> chkvar t s \\<Longrightarrow> chksubs (>\\<^sub>t) t s \\<Longrightarrow> t >\\<^sub>t s\"\n| gt_same: \"head t = head s \\<Longrightarrow> chksubs (>\\<^sub>t) t s \\<Longrightarrow>\n    (\\<forall>f \\<in> ground_heads (head t). extf f (>\\<^sub>t) (args t) (args s)) \\<Longrightarrow> t >\\<^sub>t s\""], ["", "abbreviation ge :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" (infix \"\\<ge>\\<^sub>t\" 50) where\n  \"t \\<ge>\\<^sub>t s \\<equiv> t >\\<^sub>t s \\<or> t = s\""], ["", "inductive gt_sub :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" where\n  gt_subI: \"is_App t \\<Longrightarrow> fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s \\<Longrightarrow> gt_sub t s\""], ["", "inductive gt_diff :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" where\n  gt_diffI: \"head t >\\<^sub>h\\<^sub>d head s \\<Longrightarrow> chkvar t s \\<Longrightarrow> chksubs (>\\<^sub>t) t s \\<Longrightarrow> gt_diff t s\""], ["", "inductive gt_same :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" where\n  gt_sameI: \"head t = head s \\<Longrightarrow> chksubs (>\\<^sub>t) t s \\<Longrightarrow>\n    (\\<forall>f \\<in> ground_heads (head t). extf f (>\\<^sub>t) (args t) (args s)) \\<Longrightarrow> gt_same t s\""], ["", "lemma gt_iff_sub_diff_same: \"t >\\<^sub>t s \\<longleftrightarrow> gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (t >\\<^sub>t s) = (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s)", "by (subst gt.simps) (auto simp: gt_sub.simps gt_diff.simps gt_same.simps)"], ["", "subsection \\<open>Transitivity\\<close>"], ["", "lemma gt_fun_imp: \"fun t >\\<^sub>t s \\<Longrightarrow> t >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun t >\\<^sub>t s \\<Longrightarrow> t >\\<^sub>t s", "by (cases t) (auto intro: gt_sub)"], ["", "lemma gt_arg_imp: \"arg t >\\<^sub>t s \\<Longrightarrow> t >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arg t >\\<^sub>t s \\<Longrightarrow> t >\\<^sub>t s", "by (cases t) (auto intro: gt_sub)"], ["", "lemma gt_imp_vars: \"t >\\<^sub>t s \\<Longrightarrow> vars t \\<supseteq> vars s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<Longrightarrow> vars s \\<subseteq> vars t", "proof (simp only: atomize_imp,\n    rule measure_induct_rule[of \"\\<lambda>(t, s). size t + size s\"\n      \"\\<lambda>(t, s). t >\\<^sub>t s \\<longrightarrow> vars t \\<supseteq> vars s\" \"(t, s)\", simplified prod.case],\n    simp only: split_paired_all prod.case atomize_imp[symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>size aa + size ba < size a + size b;\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> vars ba \\<subseteq> vars aa;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> vars b \\<subseteq> vars a", "fix t s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>size aa + size ba < size a + size b;\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> vars ba \\<subseteq> vars aa;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> vars b \\<subseteq> vars a", "assume\n    ih: \"\\<And>ta sa. size ta + size sa < size t + size s \\<Longrightarrow> ta >\\<^sub>t sa \\<Longrightarrow> vars ta \\<supseteq> vars sa\" and\n    t_gt_s: \"t >\\<^sub>t s\""], ["proof (state)\nthis:\n  \\<lbrakk>size ?ta + size ?sa < size t + size s; ?ta >\\<^sub>t ?sa\\<rbrakk>\n  \\<Longrightarrow> vars ?sa \\<subseteq> vars ?ta\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>size aa + size ba < size a + size b;\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> vars ba \\<subseteq> vars aa;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> vars b \\<subseteq> vars a", "show \"vars t \\<supseteq> vars s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "using t_gt_s"], ["proof (prove)\nusing this:\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "case gt_sub"], ["proof (state)\nthis:\n  is_App t\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_App t\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "using ih[of \"fun t\" s] ih[of \"arg t\" s]"], ["proof (prove)\nusing this:\n  is_App t\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n  \\<lbrakk>size (fun t) + size s < size t + size s;\n   fun t >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> vars s \\<subseteq> vars (fun t)\n  \\<lbrakk>size (arg t) + size s < size t + size s;\n   arg t >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> vars s \\<subseteq> vars (arg t)\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "by (meson add_less_cancel_right subsetD size_arg_lt size_fun_lt subsetI tm.set_sel(5,6))"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "case gt_diff"], ["proof (state)\nthis:\n  head t >\\<^sub>h\\<^sub>d head s\n  chkvar t s\n  chksubs (>\\<^sub>t) t s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "proof (cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "case Hd"], ["proof (state)\nthis:\n  s = Hd x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = Hd x1_\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "using gt_diff(2)"], ["proof (prove)\nusing this:\n  s = Hd x1_\n  chkvar t s\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "by (auto elim: hd.set_cases(2))"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "case (App s1 s2)"], ["proof (state)\nthis:\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "using gt_diff(3) ih[of t s1] ih[of t s2]"], ["proof (prove)\nusing this:\n  s = App s1 s2\n  chksubs (>\\<^sub>t) t s\n  \\<lbrakk>size t + size s1 < size t + size s; t >\\<^sub>t s1\\<rbrakk>\n  \\<Longrightarrow> vars s1 \\<subseteq> vars t\n  \\<lbrakk>size t + size s2 < size t + size s; t >\\<^sub>t s2\\<rbrakk>\n  \\<Longrightarrow> vars s2 \\<subseteq> vars t\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "by simp"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "case gt_same"], ["proof (state)\nthis:\n  head t = head s\n  chksubs (>\\<^sub>t) t s\n  \\<forall>f\\<in>local.ground_heads (head t).\n     extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> vars s \\<subseteq> vars t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "proof (cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "case Hd"], ["proof (state)\nthis:\n  s = Hd x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> vars s \\<subseteq> vars t\n 2. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = Hd x1_\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "using gt_same(1) vars_head_subseteq"], ["proof (prove)\nusing this:\n  s = Hd x1_\n  head t = head s\n  vars_hd (head ?s) \\<subseteq> vars ?s\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "by fastforce"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "case (App s1 s2)"], ["proof (state)\nthis:\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow> vars s \\<subseteq> vars t", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "using gt_same(2) ih[of t s1] ih[of t s2]"], ["proof (prove)\nusing this:\n  s = App s1 s2\n  chksubs (>\\<^sub>t) t s\n  \\<lbrakk>size t + size s1 < size t + size s; t >\\<^sub>t s1\\<rbrakk>\n  \\<Longrightarrow> vars s1 \\<subseteq> vars t\n  \\<lbrakk>size t + size s2 < size t + size s; t >\\<^sub>t s2\\<rbrakk>\n  \\<Longrightarrow> vars s2 \\<subseteq> vars t\n\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t", "by simp"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  vars s \\<subseteq> vars t\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem gt_trans: \"u >\\<^sub>t t \\<Longrightarrow> t >\\<^sub>t s \\<Longrightarrow> u >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>u >\\<^sub>t t; t >\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "proof (simp only: atomize_imp,\n    rule measure_induct_rule[of \"\\<lambda>(u, t, s). {#size u, size t, size s#}\"\n        \"\\<lambda>(u, t, s). u >\\<^sub>t t \\<longrightarrow> t >\\<^sub>t s \\<longrightarrow> u >\\<^sub>t s\" \"(u, t, s)\",\n      simplified prod.case],\n    simp only: split_paired_all prod.case atomize_imp[symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "fix u t s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "assume\n    ih: \"\\<And>ua ta sa. {#size ua, size ta, size sa#} < {#size u, size t, size s#} \\<Longrightarrow>\n      ua >\\<^sub>t ta \\<Longrightarrow> ta >\\<^sub>t sa \\<Longrightarrow> ua >\\<^sub>t sa\" and\n    u_gt_t: \"u >\\<^sub>t t\" and t_gt_s: \"t >\\<^sub>t s\""], ["proof (state)\nthis:\n  \\<lbrakk>{#size ?ua, size ?ta, size ?sa#} < {#size u, size t, size s#};\n   ?ua >\\<^sub>t ?ta; ?ta >\\<^sub>t ?sa\\<rbrakk>\n  \\<Longrightarrow> ?ua >\\<^sub>t ?sa\n  u >\\<^sub>t t\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "have chkvar: \"chkvar u s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chkvar u s", "by clarsimp (meson u_gt_t t_gt_s gt_imp_vars hd.set_sel(2) vars_head_subseteq subsetCE)"], ["proof (state)\nthis:\n  chkvar u s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "have chk_u_s_if: \"chksubs (>\\<^sub>t) u s\" if chk_t_s: \"chksubs (>\\<^sub>t) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) u s", "proof (cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> chksubs (>\\<^sub>t) u s\n 2. \\<And>x21 x22. s = App x21 x22 \\<Longrightarrow> chksubs (>\\<^sub>t) u s", "case (App s1 s2)"], ["proof (state)\nthis:\n  s = App s1 s2\n\ngoal (2 subgoals):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> chksubs (>\\<^sub>t) u s\n 2. \\<And>x21 x22. s = App x21 x22 \\<Longrightarrow> chksubs (>\\<^sub>t) u s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) u s", "using chk_t_s"], ["proof (prove)\nusing this:\n  s = App s1 s2\n  chksubs (>\\<^sub>t) t s\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) u s", "by (auto intro: ih[of _ _ s1, OF _ u_gt_t] ih[of _ _ s2, OF _ u_gt_t])"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) u s\n\ngoal (1 subgoal):\n 1. \\<And>x1. s = Hd x1 \\<Longrightarrow> chksubs (>\\<^sub>t) u s", "qed auto"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s \\<Longrightarrow> chksubs (>\\<^sub>t) u s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "have\n    fun_u_lt_etc: \"is_App u \\<Longrightarrow> {#size (fun u), size t, size s#} < {#size u, size t, size s#}\" and\n    arg_u_lt_etc: \"is_App u \\<Longrightarrow> {#size (arg u), size t, size s#} < {#size u, size t, size s#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_App u \\<Longrightarrow>\n     {#size (fun u), size t, size s#} < {#size u, size t, size s#}) &&&\n    (is_App u \\<Longrightarrow>\n     {#size (arg u), size t, size s#} < {#size u, size t, size s#})", "by (simp_all add: size_fun_lt size_arg_lt)"], ["proof (state)\nthis:\n  is_App u \\<Longrightarrow>\n  {#size (fun u), size t, size s#} < {#size u, size t, size s#}\n  is_App u \\<Longrightarrow>\n  {#size (arg u), size t, size s#} < {#size u, size t, size s#}\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "have u_gt_s_if_ui: \"is_App u \\<Longrightarrow> fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t \\<Longrightarrow> u >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "using ih[of \"fun u\" t s, OF fun_u_lt_etc] ih[of \"arg u\" t s, OF arg_u_lt_etc] gt_arg_imp\n      gt_fun_imp t_gt_s"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_App u; fun u >\\<^sub>t t; t >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> fun u >\\<^sub>t s\n  \\<lbrakk>is_App u; arg u >\\<^sub>t t; t >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> arg u >\\<^sub>t s\n  arg ?t >\\<^sub>t ?s \\<Longrightarrow> ?t >\\<^sub>t ?s\n  fun ?t >\\<^sub>t ?s \\<Longrightarrow> ?t >\\<^sub>t ?s\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>is_App u;\n   fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n  \\<Longrightarrow> u >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a aa b.\n       \\<lbrakk>\\<And>ab ac ba.\n                   \\<lbrakk>{#size ab, size ac, size ba#}\n                            < {#size a, size aa, size b#};\n                    ab >\\<^sub>t ac; ac >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> ab >\\<^sub>t ba;\n        a >\\<^sub>t aa; aa >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b", "show \"u >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "using t_gt_s"], ["proof (prove)\nusing this:\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_sub_t_s: gt_sub"], ["proof (state)\nthis:\n  is_App t\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have u_gt_s_if_chk_u_t: ?thesis if chk_u_t: \"chksubs (>\\<^sub>t) u t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "using gt_sub_t_s(1)"], ["proof (prove)\nusing this:\n  is_App t\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_App t; t = Hd x1\\<rbrakk> \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<And>x21 x22.\n       \\<lbrakk>is_App t; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> u >\\<^sub>t s", "case t: (App t1 t2)"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<lbrakk>is_App t; t = Hd x1\\<rbrakk> \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<And>x21 x22.\n       \\<lbrakk>is_App t; t = App x21 x22\\<rbrakk>\n       \\<Longrightarrow> u >\\<^sub>t s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "using ih[of u t1 s] ih[of u t2 s] gt_sub_t_s(2) chk_u_t"], ["proof (prove)\nusing this:\n  \\<lbrakk>{#size u, size t1, size s#} < {#size u, size t, size s#};\n   u >\\<^sub>t t1; t1 >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> u >\\<^sub>t s\n  \\<lbrakk>{#size u, size t2, size s#} < {#size u, size t, size s#};\n   u >\\<^sub>t t2; t2 >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> u >\\<^sub>t s\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n  chksubs (>\\<^sub>t) u t\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "unfolding t"], ["proof (prove)\nusing this:\n  \\<lbrakk>{#size u, size t1, size s#}\n           < {#size u, size (App t1 t2), size s#};\n   u >\\<^sub>t t1; t1 >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> u >\\<^sub>t s\n  \\<lbrakk>{#size u, size t2, size s#}\n           < {#size u, size (App t1 t2), size s#};\n   u >\\<^sub>t t2; t2 >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> u >\\<^sub>t s\n  fun (App t1 t2) \\<ge>\\<^sub>t s \\<or> arg (App t1 t2) \\<ge>\\<^sub>t s\n  chksubs (>\\<^sub>t) u (App t1 t2)\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "by auto"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>x1.\n       \\<lbrakk>is_App t; t = Hd x1\\<rbrakk> \\<Longrightarrow> u >\\<^sub>t s", "qed auto"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) u t \\<Longrightarrow> u >\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "using u_gt_t"], ["proof (prove)\nusing this:\n  u >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "by cases (auto intro: u_gt_s_if_ui u_gt_s_if_chk_u_t)"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_diff_t_s: gt_diff"], ["proof (state)\nthis:\n  head t >\\<^sub>h\\<^sub>d head s\n  chkvar t s\n  chksubs (>\\<^sub>t) t s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "using u_gt_t"], ["proof (prove)\nusing this:\n  u >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u >\\<^sub>h\\<^sub>d head t; chkvar u t;\n     chksubs (>\\<^sub>t) u t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_diff_u_t: gt_diff"], ["proof (state)\nthis:\n  head u >\\<^sub>h\\<^sub>d head t\n  chkvar u t\n  chksubs (>\\<^sub>t) u t\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u >\\<^sub>h\\<^sub>d head t; chkvar u t;\n     chksubs (>\\<^sub>t) u t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have \"head u >\\<^sub>h\\<^sub>d head s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head u >\\<^sub>h\\<^sub>d head s", "using gt_diff_u_t(1) gt_diff_t_s(1)"], ["proof (prove)\nusing this:\n  head u >\\<^sub>h\\<^sub>d head t\n  head t >\\<^sub>h\\<^sub>d head s\n\ngoal (1 subgoal):\n 1. head u >\\<^sub>h\\<^sub>d head s", "by (auto intro: gt_hd_trans)"], ["proof (state)\nthis:\n  head u >\\<^sub>h\\<^sub>d head s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u >\\<^sub>h\\<^sub>d head t; chkvar u t;\n     chksubs (>\\<^sub>t) u t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  head u >\\<^sub>h\\<^sub>d head s\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "by (rule gt_diff[OF _ chkvar chk_u_s_if[OF gt_diff_t_s(3)]])"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_same_u_t: gt_same"], ["proof (state)\nthis:\n  head u = head t\n  chksubs (>\\<^sub>t) u t\n  \\<forall>f\\<in>local.ground_heads (head u).\n     extf f (>\\<^sub>t) (args u) (args t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have \"head u >\\<^sub>h\\<^sub>d head s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head u >\\<^sub>h\\<^sub>d head s", "using gt_diff_t_s(1) gt_same_u_t(1)"], ["proof (prove)\nusing this:\n  head t >\\<^sub>h\\<^sub>d head s\n  head u = head t\n\ngoal (1 subgoal):\n 1. head u >\\<^sub>h\\<^sub>d head s", "by auto"], ["proof (state)\nthis:\n  head u >\\<^sub>h\\<^sub>d head s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  head u >\\<^sub>h\\<^sub>d head s\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "by (rule gt_diff[OF _ chkvar chk_u_s_if[OF gt_diff_t_s(3)]])"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "qed (auto intro: u_gt_s_if_ui)"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_same_t_s: gt_same"], ["proof (state)\nthis:\n  head t = head s\n  chksubs (>\\<^sub>t) t s\n  \\<forall>f\\<in>local.ground_heads (head t).\n     extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "using u_gt_t"], ["proof (prove)\nusing this:\n  u >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u >\\<^sub>h\\<^sub>d head t; chkvar u t;\n     chksubs (>\\<^sub>t) u t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_diff_u_t: gt_diff"], ["proof (state)\nthis:\n  head u >\\<^sub>h\\<^sub>d head t\n  chkvar u t\n  chksubs (>\\<^sub>t) u t\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u >\\<^sub>h\\<^sub>d head t; chkvar u t;\n     chksubs (>\\<^sub>t) u t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have \"head u >\\<^sub>h\\<^sub>d head s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head u >\\<^sub>h\\<^sub>d head s", "using gt_diff_u_t(1) gt_same_t_s(1)"], ["proof (prove)\nusing this:\n  head u >\\<^sub>h\\<^sub>d head t\n  head t = head s\n\ngoal (1 subgoal):\n 1. head u >\\<^sub>h\\<^sub>d head s", "by simp"], ["proof (state)\nthis:\n  head u >\\<^sub>h\\<^sub>d head s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u >\\<^sub>h\\<^sub>d head t; chkvar u t;\n     chksubs (>\\<^sub>t) u t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 3. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  head u >\\<^sub>h\\<^sub>d head s\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "by (rule gt_diff[OF _ chkvar chk_u_s_if[OF gt_same_t_s(2)]])"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "case gt_same_u_t: gt_same"], ["proof (state)\nthis:\n  head u = head t\n  chksubs (>\\<^sub>t) u t\n  \\<forall>f\\<in>local.ground_heads (head u).\n     extf f (>\\<^sub>t) (args u) (args t)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have hd_u_s: \"head u = head s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head u = head s", "using gt_same_u_t(1) gt_same_t_s(1)"], ["proof (prove)\nusing this:\n  head u = head t\n  head t = head s\n\ngoal (1 subgoal):\n 1. head u = head s", "by simp"], ["proof (state)\nthis:\n  head u = head s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "let ?S = \"set (args u) \\<union> set (args t) \\<union> set (args s)\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have gt_trans_args: \"\\<forall>ua \\<in> ?S. \\<forall>ta \\<in> ?S. \\<forall>sa \\<in> ?S. ua >\\<^sub>t ta \\<longrightarrow> ta >\\<^sub>t sa \\<longrightarrow> ua >\\<^sub>t sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>uaa\\<in>set (args u) \\<union> set (args t) \\<union>\n                     set (args s).\n       \\<forall>taa\\<in>set (args u) \\<union> set (args t) \\<union>\n                        set (args s).\n          \\<forall>sa\\<in>set (args u) \\<union> set (args t) \\<union>\n                          set (args s).\n             uaa >\\<^sub>t taa \\<longrightarrow>\n             taa >\\<^sub>t sa \\<longrightarrow> uaa >\\<^sub>t sa", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>uaa taa saa.\n       \\<lbrakk>uaa\n                \\<in> set (args u) \\<union> set (args t) \\<union>\n                      set (args s);\n        taa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s);\n        saa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s);\n        uaa >\\<^sub>t taa; taa >\\<^sub>t saa\\<rbrakk>\n       \\<Longrightarrow> uaa >\\<^sub>t saa", "fix sa ta ua"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>uaa taa saa.\n       \\<lbrakk>uaa\n                \\<in> set (args u) \\<union> set (args t) \\<union>\n                      set (args s);\n        taa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s);\n        saa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s);\n        uaa >\\<^sub>t taa; taa >\\<^sub>t saa\\<rbrakk>\n       \\<Longrightarrow> uaa >\\<^sub>t saa", "assume\n          ua_in: \"ua \\<in> ?S\" and ta_in: \"ta \\<in> ?S\" and sa_in: \"sa \\<in> ?S\" and\n          ua_gt_ta: \"ua >\\<^sub>t ta\" and ta_gt_sa: \"ta >\\<^sub>t sa\""], ["proof (state)\nthis:\n  ua \\<in> set (args u) \\<union> set (args t) \\<union> set (args s)\n  ta \\<in> set (args u) \\<union> set (args t) \\<union> set (args s)\n  sa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s)\n  ua >\\<^sub>t ta\n  ta >\\<^sub>t sa\n\ngoal (1 subgoal):\n 1. \\<And>uaa taa saa.\n       \\<lbrakk>uaa\n                \\<in> set (args u) \\<union> set (args t) \\<union>\n                      set (args s);\n        taa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s);\n        saa \\<in> set (args u) \\<union> set (args t) \\<union> set (args s);\n        uaa >\\<^sub>t taa; taa >\\<^sub>t saa\\<rbrakk>\n       \\<Longrightarrow> uaa >\\<^sub>t saa", "show \"ua >\\<^sub>t sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ua >\\<^sub>t sa", "by (auto intro!: ih[OF Max_lt_imp_lt_mset ua_gt_ta ta_gt_sa])\n            (meson ua_in ta_in sa_in Un_iff max.strict_coboundedI1 max.strict_coboundedI2\n               size_in_args)+"], ["proof (state)\nthis:\n  ua >\\<^sub>t sa\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>uaa\\<in>set (args u) \\<union> set (args t) \\<union> set (args s).\n     \\<forall>taa\\<in>set (args u) \\<union> set (args t) \\<union>\n                      set (args s).\n        \\<forall>sa\\<in>set (args u) \\<union> set (args t) \\<union>\n                        set (args s).\n           uaa >\\<^sub>t taa \\<longrightarrow>\n           taa >\\<^sub>t sa \\<longrightarrow> uaa >\\<^sub>t sa\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "have \"\\<forall>f \\<in> ground_heads (head u). extf f (>\\<^sub>t) (args u) (args s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>local.ground_heads (head u).\n       extf f (>\\<^sub>t) (args u) (args s)", "proof (clarify, rule extf_trans[OF _ _ _ gt_trans_args])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args u\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 2. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       ?ys1 f\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 3. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args s\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 4. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (args u) (?ys1 f)\n 5. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (?ys1 f) (args s)", "fix f"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args u\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 2. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       ?ys1 f\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 3. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args s\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 4. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (args u) (?ys1 f)\n 5. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (?ys1 f) (args s)", "assume f_in_grounds: \"f \\<in> ground_heads (head u)\""], ["proof (state)\nthis:\n  f \\<in> local.ground_heads (head u)\n\ngoal (5 subgoals):\n 1. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args u\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 2. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       ?ys1 f\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 3. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args s\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 4. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (args u) (?ys1 f)\n 5. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (?ys1 f) (args s)", "show \"extf f (>\\<^sub>t) (args u) (args t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args u) (args t)", "using f_in_grounds gt_same_u_t(3)"], ["proof (prove)\nusing this:\n  f \\<in> local.ground_heads (head u)\n  \\<forall>f\\<in>local.ground_heads (head u).\n     extf f (>\\<^sub>t) (args u) (args t)\n\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args u) (args t)", "by blast"], ["proof (state)\nthis:\n  extf f (>\\<^sub>t) (args u) (args t)\n\ngoal (4 subgoals):\n 1. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args u\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 2. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args t\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 3. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args s\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 4. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       extf f (>\\<^sub>t) (args t) (args s)", "show \"extf f (>\\<^sub>t) (args t) (args s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args t) (args s)", "using f_in_grounds gt_same_t_s(3)"], ["proof (prove)\nusing this:\n  f \\<in> local.ground_heads (head u)\n  \\<forall>f\\<in>local.ground_heads (head t).\n     extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args t) (args s)", "unfolding gt_same_u_t(1)"], ["proof (prove)\nusing this:\n  f \\<in> local.ground_heads (head t)\n  \\<forall>f\\<in>local.ground_heads (head t).\n     extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args t) (args s)", "by blast"], ["proof (state)\nthis:\n  extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (3 subgoals):\n 1. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args u\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 2. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args t\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))\n 3. \\<And>f.\n       f \\<in> local.ground_heads (head u) \\<Longrightarrow>\n       args s\n       \\<in> lists\n              (set (args u) \\<union> set (args t) \\<union> set (args s))", "qed auto"], ["proof (state)\nthis:\n  \\<forall>f\\<in>local.ground_heads (head u).\n     extf f (>\\<^sub>t) (args u) (args s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s\n 2. \\<lbrakk>head u = head t; chksubs (>\\<^sub>t) u t;\n     \\<forall>f\\<in>local.ground_heads (head u).\n        extf f (>\\<^sub>t) (args u) (args t)\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>local.ground_heads (head u).\n     extf f (>\\<^sub>t) (args u) (args s)\n\ngoal (1 subgoal):\n 1. u >\\<^sub>t s", "by (rule gt_same[OF hd_u_s chk_u_s_if[OF gt_same_t_s(2)]])"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_App u;\n     fun u \\<ge>\\<^sub>t t \\<or> arg u \\<ge>\\<^sub>t t\\<rbrakk>\n    \\<Longrightarrow> u >\\<^sub>t s", "qed (auto intro: u_gt_s_if_ui)"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  u >\\<^sub>t s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Irreflexivity\\<close>"], ["", "theorem gt_irrefl: \"\\<not> s >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> s >\\<^sub>t s", "proof (standard, induct s rule: measure_induct_rule[of size])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>size y < size x; y >\\<^sub>t y\\<rbrakk>\n                   \\<Longrightarrow> False;\n        x >\\<^sub>t x\\<rbrakk>\n       \\<Longrightarrow> False", "case (less s)"], ["proof (state)\nthis:\n  \\<lbrakk>size ?y < size s; ?y >\\<^sub>t ?y\\<rbrakk>\n  \\<Longrightarrow> False\n  s >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>size y < size x; y >\\<^sub>t y\\<rbrakk>\n                   \\<Longrightarrow> False;\n        x >\\<^sub>t x\\<rbrakk>\n       \\<Longrightarrow> False", "note ih = this(1) and s_gt_s = this(2)"], ["proof (state)\nthis:\n  \\<lbrakk>size ?y < size s; ?y >\\<^sub>t ?y\\<rbrakk>\n  \\<Longrightarrow> False\n  s >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>size y < size x; y >\\<^sub>t y\\<rbrakk>\n                   \\<Longrightarrow> False;\n        x >\\<^sub>t x\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using s_gt_s"], ["proof (prove)\nusing this:\n  s >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. False", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "case _: gt_sub"], ["proof (state)\nthis:\n  is_App s\n  fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "note is_app = this(1) and si_ge_s = this(2)"], ["proof (state)\nthis:\n  is_App s\n  fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "have s_gt_fun_s: \"s >\\<^sub>t fun s\" and s_gt_arg_s: \"s >\\<^sub>t arg s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s >\\<^sub>t fun s &&& s >\\<^sub>t arg s", "using is_app"], ["proof (prove)\nusing this:\n  is_App s\n\ngoal (1 subgoal):\n 1. s >\\<^sub>t fun s &&& s >\\<^sub>t arg s", "by (simp_all add: gt_sub)"], ["proof (state)\nthis:\n  s >\\<^sub>t fun s\n  s >\\<^sub>t arg s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s", "using si_ge_s is_app s_gt_arg_s s_gt_fun_s"], ["proof (prove)\nusing this:\n  fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\n  is_App s\n  s >\\<^sub>t arg s\n  s >\\<^sub>t fun s\n\ngoal (1 subgoal):\n 1. fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s", "by auto"], ["proof (state)\nthis:\n  fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "assume fun_s_gt_s: \"fun s >\\<^sub>t s\""], ["proof (state)\nthis:\n  fun s >\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"fun s >\\<^sub>t fun s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun s >\\<^sub>t fun s", "by (rule gt_trans[OF fun_s_gt_s s_gt_fun_s])"], ["proof (state)\nthis:\n  fun s >\\<^sub>t fun s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "hence False"], ["proof (prove)\nusing this:\n  fun s >\\<^sub>t fun s\n\ngoal (1 subgoal):\n 1. False", "using ih[of \"fun s\"] is_app size_fun_lt"], ["proof (prove)\nusing this:\n  fun s >\\<^sub>t fun s\n  \\<lbrakk>size (fun s) < size s; fun s >\\<^sub>t fun s\\<rbrakk>\n  \\<Longrightarrow> False\n  is_App s\n  is_App ?s \\<Longrightarrow> size (fun ?s) < size ?s\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  fun s >\\<^sub>t s \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  fun s >\\<^sub>t s \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  fun s >\\<^sub>t s \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "assume arg_s_gt_s: \"arg s >\\<^sub>t s\""], ["proof (state)\nthis:\n  arg s >\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"arg s >\\<^sub>t arg s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arg s >\\<^sub>t arg s", "by (rule gt_trans[OF arg_s_gt_s s_gt_arg_s])"], ["proof (state)\nthis:\n  arg s >\\<^sub>t arg s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "hence False"], ["proof (prove)\nusing this:\n  arg s >\\<^sub>t arg s\n\ngoal (1 subgoal):\n 1. False", "using ih[of \"arg s\"] is_app size_arg_lt"], ["proof (prove)\nusing this:\n  arg s >\\<^sub>t arg s\n  \\<lbrakk>size (arg s) < size s; arg s >\\<^sub>t arg s\\<rbrakk>\n  \\<Longrightarrow> False\n  is_App s\n  is_App ?s \\<Longrightarrow> size (arg ?s) < size ?s\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  arg s >\\<^sub>t s \\<Longrightarrow> False\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App s;\n     fun s \\<ge>\\<^sub>t s \\<or> arg s \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 3. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s\n  fun s >\\<^sub>t s \\<Longrightarrow> False\n  arg s >\\<^sub>t s \\<Longrightarrow> False", "show False"], ["proof (prove)\nusing this:\n  fun s >\\<^sub>t s \\<or> arg s >\\<^sub>t s\n  fun s >\\<^sub>t s \\<Longrightarrow> False\n  arg s >\\<^sub>t s \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. False", "by sat"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "case gt_diff"], ["proof (state)\nthis:\n  head s >\\<^sub>h\\<^sub>d head s\n  chkvar s s\n  chksubs (>\\<^sub>t) s s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head s >\\<^sub>h\\<^sub>d head s; chkvar s s;\n     chksubs (>\\<^sub>t) s s\\<rbrakk>\n    \\<Longrightarrow> False\n 2. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  head s >\\<^sub>h\\<^sub>d head s\n  chkvar s s\n  chksubs (>\\<^sub>t) s s\n\ngoal (1 subgoal):\n 1. False", "by (cases \"head s\") (auto simp: gt_hd_irrefl)"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "case gt_same"], ["proof (state)\nthis:\n  head s = head s\n  chksubs (>\\<^sub>t) s s\n  \\<forall>f\\<in>local.ground_heads (head s).\n     extf f (>\\<^sub>t) (args s) (args s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "note in_grounds = this(3)"], ["proof (state)\nthis:\n  \\<forall>f\\<in>local.ground_heads (head s).\n     extf f (>\\<^sub>t) (args s) (args s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "obtain si where si_in_args: \"si \\<in> set (args s)\" and si_gt_si: \"si >\\<^sub>t si\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>si.\n        \\<lbrakk>si \\<in> set (args s); si >\\<^sub>t si\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using in_grounds"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>local.ground_heads (head s).\n     extf f (>\\<^sub>t) (args s) (args s)\n\ngoal (1 subgoal):\n 1. (\\<And>si.\n        \\<lbrakk>si \\<in> set (args s); si >\\<^sub>t si\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types) all_not_in_conv extf_irrefl_from_trans ground_heads_nonempty gt_trans)"], ["proof (state)\nthis:\n  si \\<in> set (args s)\n  si >\\<^sub>t si\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "have \"size si < size s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size si < size s", "by (rule size_in_args[OF si_in_args])"], ["proof (state)\nthis:\n  size si < size s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head s; chksubs (>\\<^sub>t) s s;\n     \\<forall>f\\<in>local.ground_heads (head s).\n        extf f (>\\<^sub>t) (args s) (args s)\\<rbrakk>\n    \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  size si < size s\n\ngoal (1 subgoal):\n 1. False", "by (rule ih[OF _ si_gt_si])"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma gt_antisym: \"t >\\<^sub>t s \\<Longrightarrow> \\<not> s >\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<Longrightarrow> \\<not> s >\\<^sub>t t", "using gt_irrefl gt_trans"], ["proof (prove)\nusing this:\n  \\<not> ?s >\\<^sub>t ?s\n  \\<lbrakk>?u >\\<^sub>t ?t; ?t >\\<^sub>t ?s\\<rbrakk>\n  \\<Longrightarrow> ?u >\\<^sub>t ?s\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<Longrightarrow> \\<not> s >\\<^sub>t t", "by blast"], ["", "subsection \\<open>Subterm Property\\<close>"], ["", "lemma\n  gt_sub_fun: \"App s t >\\<^sub>t s\" and\n  gt_sub_arg: \"App s t >\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. App s t >\\<^sub>t s &&& App s t >\\<^sub>t t", "by (auto intro: gt_sub)"], ["", "theorem gt_proper_sub: \"proper_sub s t \\<Longrightarrow> t >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_sub s t \\<Longrightarrow> t >\\<^sub>t s", "by (induct t) (auto intro: gt_sub_fun gt_sub_arg gt_trans)"], ["", "subsection \\<open>Compatibility with Functions\\<close>"], ["", "lemma gt_compat_fun:\n  assumes t'_gt_t: \"t' >\\<^sub>t t\"\n  shows \"App s t' >\\<^sub>t App s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. App s t' >\\<^sub>t App s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. App s t' >\\<^sub>t App s t", "have t'_ne_t: \"t' \\<noteq> t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t' \\<noteq> t", "using gt_antisym t'_gt_t"], ["proof (prove)\nusing this:\n  ?t >\\<^sub>t ?s \\<Longrightarrow> \\<not> ?s >\\<^sub>t ?t\n  t' >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. t' \\<noteq> t", "by blast"], ["proof (state)\nthis:\n  t' \\<noteq> t\n\ngoal (1 subgoal):\n 1. App s t' >\\<^sub>t App s t", "have extf_args_single: \"\\<forall>f \\<in> ground_heads (head s). extf f (>\\<^sub>t) (args s @ [t']) (args s @ [t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>local.ground_heads (head s).\n       extf f (>\\<^sub>t) (args s @ [t']) (args s @ [t])", "by (simp add: extf_compat_list t'_gt_t t'_ne_t)"], ["proof (state)\nthis:\n  \\<forall>f\\<in>local.ground_heads (head s).\n     extf f (>\\<^sub>t) (args s @ [t']) (args s @ [t])\n\ngoal (1 subgoal):\n 1. App s t' >\\<^sub>t App s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. App s t' >\\<^sub>t App s t", "by (rule gt_same) (auto simp: gt_sub gt_sub_fun t'_gt_t intro!: extf_args_single)"], ["proof (state)\nthis:\n  App s t' >\\<^sub>t App s t\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem gt_compat_fun_strong:\n  assumes t'_gt_t: \"t' >\\<^sub>t t\"\n  shows \"apps s (t' # us) >\\<^sub>t apps s (t # us)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apps s (t' # us) >\\<^sub>t apps s (t # us)", "proof (induct us rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. apps s [t'] >\\<^sub>t apps s [t]\n 2. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. apps s [t'] >\\<^sub>t apps s [t]\n 2. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. apps s [t'] >\\<^sub>t apps s [t]", "using t'_gt_t"], ["proof (prove)\nusing this:\n  t' >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. apps s [t'] >\\<^sub>t apps s [t]", "by (auto intro!: gt_compat_fun)"], ["proof (state)\nthis:\n  apps s [t'] >\\<^sub>t apps s [t]\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "case (snoc u us)"], ["proof (state)\nthis:\n  apps s (t' # us) >\\<^sub>t apps s (t # us)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "note ih = snoc"], ["proof (state)\nthis:\n  apps s (t' # us) >\\<^sub>t apps s (t # us)\n\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "let ?v' = \"apps s (t' # us @ [u])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "let ?v = \"apps s (t # us @ [u])\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs.\n       apps s (t' # xs) >\\<^sub>t apps s (t # xs) \\<Longrightarrow>\n       apps s (t' # xs @ [x]) >\\<^sub>t apps s (t # xs @ [x])", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. apps s (t' # us @ [u]) >\\<^sub>t apps s (t # us @ [u])", "proof (rule gt_same)"], ["proof (state)\ngoal (3 subgoals):\n 1. head (apps s (t' # us @ [u])) = head (apps s (t # us @ [u]))\n 2. chksubs (>\\<^sub>t) (apps s (t' # us @ [u])) (apps s (t # us @ [u]))\n 3. \\<forall>f\\<in>local.ground_heads (head (apps s (t' # us @ [u]))).\n       extf f (>\\<^sub>t) (args (apps s (t' # us @ [u])))\n        (args (apps s (t # us @ [u])))", "show \"chksubs (>\\<^sub>t) ?v' ?v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (apps s (t' # us @ [u])) (apps s (t # us @ [u]))", "using ih"], ["proof (prove)\nusing this:\n  apps s (t' # us) >\\<^sub>t apps s (t # us)\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (apps s (t' # us @ [u])) (apps s (t # us @ [u]))", "by (auto intro: gt_sub gt_sub_arg)"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) (apps s (t' # us @ [u])) (apps s (t # us @ [u]))\n\ngoal (2 subgoals):\n 1. head (apps s (t' # us @ [u])) = head (apps s (t # us @ [u]))\n 2. \\<forall>f\\<in>local.ground_heads (head (apps s (t' # us @ [u]))).\n       extf f (>\\<^sub>t) (args (apps s (t' # us @ [u])))\n        (args (apps s (t # us @ [u])))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. head (apps s (t' # us @ [u])) = head (apps s (t # us @ [u]))\n 2. \\<forall>f\\<in>local.ground_heads (head (apps s (t' # us @ [u]))).\n       extf f (>\\<^sub>t) (args (apps s (t' # us @ [u])))\n        (args (apps s (t # us @ [u])))", "show \"\\<forall>f \\<in> ground_heads (head ?v'). extf f (>\\<^sub>t) (args ?v') (args ?v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>local.ground_heads (head (apps s (t' # us @ [u]))).\n       extf f (>\\<^sub>t) (args (apps s (t' # us @ [u])))\n        (args (apps s (t # us @ [u])))", "by (metis args_apps extf_compat_list gt_irrefl t'_gt_t)"], ["proof (state)\nthis:\n  \\<forall>f\\<in>local.ground_heads (head (apps s (t' # us @ [u]))).\n     extf f (>\\<^sub>t) (args (apps s (t' # us @ [u])))\n      (args (apps s (t # us @ [u])))\n\ngoal (1 subgoal):\n 1. head (apps s (t' # us @ [u])) = head (apps s (t # us @ [u]))", "qed simp"], ["proof (state)\nthis:\n  apps s (t' # us @ [u]) >\\<^sub>t apps s (t # us @ [u])\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Compatibility with Arguments\\<close>"], ["", "theorem gt_diff_same_compat_arg:\n  assumes\n    extf_compat_snoc: \"\\<And>f. ext_compat_snoc (extf f)\" and\n    diff_same: \"gt_diff s' s \\<or> gt_same s' s\"\n  shows \"App s' t >\\<^sub>t App s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "assume \"s' >\\<^sub>t s\""], ["proof (state)\nthis:\n  s' >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "hence \"App s' t >\\<^sub>t s\""], ["proof (prove)\nusing this:\n  s' >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t s", "using gt_sub_fun gt_trans"], ["proof (prove)\nusing this:\n  s' >\\<^sub>t s\n  App ?s ?t >\\<^sub>t ?s\n  \\<lbrakk>?u >\\<^sub>t ?t; ?t >\\<^sub>t ?s\\<rbrakk>\n  \\<Longrightarrow> ?u >\\<^sub>t ?s\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t s", "by blast"], ["proof (state)\nthis:\n  App s' t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "moreover"], ["proof (state)\nthis:\n  App s' t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "have \"App s' t >\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t t", "by (simp add: gt_sub_arg)"], ["proof (state)\nthis:\n  App s' t >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "ultimately"], ["proof (chain)\npicking this:\n  App s' t >\\<^sub>t s\n  App s' t >\\<^sub>t t", "have \"chksubs (>\\<^sub>t) (App s' t) (App s t)\""], ["proof (prove)\nusing this:\n  App s' t >\\<^sub>t s\n  App s' t >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (App s' t) (App s t)", "by auto"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) (App s' t) (App s t)\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "}"], ["proof (state)\nthis:\n  s' >\\<^sub>t s \\<Longrightarrow> chksubs (>\\<^sub>t) (App s' t) (App s t)\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "note chk_s't_st = this"], ["proof (state)\nthis:\n  s' >\\<^sub>t s \\<Longrightarrow> chksubs (>\\<^sub>t) (App s' t) (App s t)\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "using diff_same"], ["proof (prove)\nusing this:\n  gt_diff s' s \\<or> gt_same s' s\n\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. gt_diff s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t\n 2. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "assume \"gt_diff s' s\""], ["proof (state)\nthis:\n  gt_diff s' s\n\ngoal (2 subgoals):\n 1. gt_diff s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t\n 2. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "hence\n      s'_gt_s: \"s' >\\<^sub>t s\" and\n      hd_s'_gt_s: \"head s' >\\<^sub>h\\<^sub>d head s\" and\n      chkvar_s'_s: \"chkvar s' s\" and\n      chk_s'_s: \"chksubs (>\\<^sub>t) s' s\""], ["proof (prove)\nusing this:\n  gt_diff s' s\n\ngoal (1 subgoal):\n 1. (s' >\\<^sub>t s &&& head s' >\\<^sub>h\\<^sub>d head s) &&&\n    chkvar s' s &&& chksubs (>\\<^sub>t) s' s", "using gt_diff.cases"], ["proof (prove)\nusing this:\n  gt_diff s' s\n  \\<lbrakk>gt_diff ?a1.0 ?a2.0;\n   \\<And>t s.\n      \\<lbrakk>?a1.0 = t; ?a2.0 = s; head t >\\<^sub>h\\<^sub>d head s;\n       chkvar t s; chksubs (>\\<^sub>t) t s\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (s' >\\<^sub>t s &&& head s' >\\<^sub>h\\<^sub>d head s) &&&\n    chkvar s' s &&& chksubs (>\\<^sub>t) s' s", "by (auto simp: gt_iff_sub_diff_same)"], ["proof (state)\nthis:\n  s' >\\<^sub>t s\n  head s' >\\<^sub>h\\<^sub>d head s\n  chkvar s' s\n  chksubs (>\\<^sub>t) s' s\n\ngoal (2 subgoals):\n 1. gt_diff s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t\n 2. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "have chkvar_s't_st: \"chkvar (App s' t) (App s t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chkvar (App s' t) (App s t)", "using chkvar_s'_s"], ["proof (prove)\nusing this:\n  chkvar s' s\n\ngoal (1 subgoal):\n 1. chkvar (App s' t) (App s t)", "by auto"], ["proof (state)\nthis:\n  chkvar (App s' t) (App s t)\n\ngoal (2 subgoals):\n 1. gt_diff s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t\n 2. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "by (rule gt_diff[OF _ chkvar_s't_st chk_s't_st[OF s'_gt_s]])\n        (simp add: hd_s'_gt_s[simplified])"], ["proof (state)\nthis:\n  App s' t >\\<^sub>t App s t\n\ngoal (1 subgoal):\n 1. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "assume \"gt_same s' s\""], ["proof (state)\nthis:\n  gt_same s' s\n\ngoal (1 subgoal):\n 1. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "hence\n      s'_gt_s: \"s' >\\<^sub>t s\" and\n      hd_s'_eq_s: \"head s' = head s\" and\n      chk_s'_s: \"chksubs (>\\<^sub>t) s' s\" and\n      gts_args: \"\\<forall>f \\<in> ground_heads (head s'). extf f (>\\<^sub>t) (args s') (args s)\""], ["proof (prove)\nusing this:\n  gt_same s' s\n\ngoal (1 subgoal):\n 1. (s' >\\<^sub>t s &&& head s' = head s) &&&\n    chksubs (>\\<^sub>t) s' s &&&\n    \\<forall>f\\<in>local.ground_heads (head s').\n       extf f (>\\<^sub>t) (args s') (args s)", "using gt_same.cases"], ["proof (prove)\nusing this:\n  gt_same s' s\n  \\<lbrakk>gt_same ?a1.0 ?a2.0;\n   \\<And>t s.\n      \\<lbrakk>?a1.0 = t; ?a2.0 = s; head t = head s;\n       chksubs (>\\<^sub>t) t s;\n       \\<forall>f\\<in>local.ground_heads (head t).\n          extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. (s' >\\<^sub>t s &&& head s' = head s) &&&\n    chksubs (>\\<^sub>t) s' s &&&\n    \\<forall>f\\<in>local.ground_heads (head s').\n       extf f (>\\<^sub>t) (args s') (args s)", "by (auto simp: gt_iff_sub_diff_same, metis)"], ["proof (state)\nthis:\n  s' >\\<^sub>t s\n  head s' = head s\n  chksubs (>\\<^sub>t) s' s\n  \\<forall>f\\<in>local.ground_heads (head s').\n     extf f (>\\<^sub>t) (args s') (args s)\n\ngoal (1 subgoal):\n 1. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "have gts_args_t:\n      \"\\<forall>f \\<in> ground_heads (head (App s' t)). extf f (>\\<^sub>t) (args (App s' t)) (args (App s t))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>local.ground_heads (head (App s' t)).\n       extf f (>\\<^sub>t) (args (App s' t)) (args (App s t))", "using gts_args ext_compat_snoc.compat_append_right[OF extf_compat_snoc]"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>local.ground_heads (head s').\n     extf f (>\\<^sub>t) (args s') (args s)\n  extf ?f1 ?gt ?ys ?xs \\<Longrightarrow>\n  extf ?f1 ?gt (?ys @ ?zs) (?xs @ ?zs)\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>local.ground_heads (head (App s' t)).\n       extf f (>\\<^sub>t) (args (App s' t)) (args (App s t))", "by simp"], ["proof (state)\nthis:\n  \\<forall>f\\<in>local.ground_heads (head (App s' t)).\n     extf f (>\\<^sub>t) (args (App s' t)) (args (App s t))\n\ngoal (1 subgoal):\n 1. gt_same s' s \\<Longrightarrow> App s' t >\\<^sub>t App s t", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. App s' t >\\<^sub>t App s t", "by (rule gt_same[OF _ chk_s't_st[OF s'_gt_s] gts_args_t]) (simp add: hd_s'_eq_s)"], ["proof (state)\nthis:\n  App s' t >\\<^sub>t App s t\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  App s' t >\\<^sub>t App s t\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Stability under Substitution\\<close>"], ["", "lemma gt_imp_chksubs_gt:\n  assumes t_gt_s: \"t >\\<^sub>t s\"\n  shows \"chksubs (>\\<^sub>t) t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) t s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) t s", "have \"is_App s \\<Longrightarrow> t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App s \\<Longrightarrow> t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s", "using t_gt_s"], ["proof (prove)\nusing this:\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. is_App s \\<Longrightarrow> t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s", "by (meson gt_sub gt_trans)"], ["proof (state)\nthis:\n  is_App s \\<Longrightarrow> t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) t s", "thus ?thesis"], ["proof (prove)\nusing this:\n  is_App s \\<Longrightarrow> t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) t s", "by (simp add: tm.case_eq_if)"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem gt_subst:\n  assumes wary_\\<rho>: \"wary_subst \\<rho>\"\n  shows \"t >\\<^sub>t s \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "proof (simp only: atomize_imp,\n    rule measure_induct_rule[of \"\\<lambda>(t, s). {#size t, size s#}\"\n        \"\\<lambda>(t, s). t >\\<^sub>t s \\<longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\" \"(t, s)\",\n      simplified prod.case],\n    simp only: split_paired_all prod.case atomize_imp[symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "fix t s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "assume\n    ih: \"\\<And>ta sa. {#size ta, size sa#} < {#size t, size s#} \\<Longrightarrow> ta >\\<^sub>t sa \\<Longrightarrow>\n      subst \\<rho> ta >\\<^sub>t subst \\<rho> sa\" and\n    t_gt_s: \"t >\\<^sub>t s\""], ["proof (state)\nthis:\n  \\<lbrakk>{#size ?ta, size ?sa#} < {#size t, size s#};\n   ?ta >\\<^sub>t ?sa\\<rbrakk>\n  \\<Longrightarrow> subst \\<rho> ?ta >\\<^sub>t subst \\<rho> ?sa\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "{"], ["proof (state)\nthis:\n  \\<lbrakk>{#size ?ta, size ?sa#} < {#size t, size s#};\n   ?ta >\\<^sub>t ?sa\\<rbrakk>\n  \\<Longrightarrow> subst \\<rho> ?ta >\\<^sub>t subst \\<rho> ?sa\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "assume chk_t_s: \"chksubs (>\\<^sub>t) t s\""], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "have \"chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "proof (cases s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       s = Hd x1 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n 2. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "case s: (Hd \\<zeta>)"], ["proof (state)\nthis:\n  s = Hd \\<zeta>\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       s = Hd x1 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n 2. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "proof (cases \\<zeta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<zeta> = Var x1 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n 2. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "case \\<zeta>: (Var x)"], ["proof (state)\nthis:\n  \\<zeta> = Var x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<zeta> = Var x1 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n 2. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "have psub_x_t: \"proper_sub (Hd (Var x)) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_sub (Hd (Var x)) t", "using \\<zeta> s t_gt_s gt_imp_vars gt_irrefl in_vars_imp_sub"], ["proof (prove)\nusing this:\n  \\<zeta> = Var x\n  s = Hd \\<zeta>\n  t >\\<^sub>t s\n  ?t >\\<^sub>t ?s \\<Longrightarrow> vars ?s \\<subseteq> vars ?t\n  \\<not> ?s >\\<^sub>t ?s\n  (?x \\<in> vars ?s) = sub (Hd (Var ?x)) ?s\n\ngoal (1 subgoal):\n 1. proper_sub (Hd (Var x)) t", "by fastforce"], ["proof (state)\nthis:\n  proper_sub (Hd (Var x)) t\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<zeta> = Var x1 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n 2. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "unfolding \\<zeta> s"], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> (Hd (Var x)))", "by (rule gt_imp_chksubs_gt[OF gt_proper_sub[OF proper_sub_subst]]) (rule psub_x_t)"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "qed (auto simp: s)"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "case s: (App s1 s2)"], ["proof (state)\nthis:\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "have \"t >\\<^sub>t s1\" and \"t >\\<^sub>t s2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t >\\<^sub>t s1 &&& t >\\<^sub>t s2", "using s chk_t_s"], ["proof (prove)\nusing this:\n  s = App s1 s2\n  chksubs (>\\<^sub>t) t s\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s1 &&& t >\\<^sub>t s2", "by auto"], ["proof (state)\nthis:\n  t >\\<^sub>t s1\n  t >\\<^sub>t s2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       s = App x21 x22 \\<Longrightarrow>\n       chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t >\\<^sub>t s1\n  t >\\<^sub>t s2\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "using s"], ["proof (prove)\nusing this:\n  t >\\<^sub>t s1\n  t >\\<^sub>t s2\n  s = App s1 s2\n\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)", "by (auto intro!: ih[of t s1] ih[of t s2])"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "}"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s \\<Longrightarrow>\n  chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "note chk_\\<rho>t_\\<rho>s_if = this"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s \\<Longrightarrow>\n  chksubs (>\\<^sub>t) (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    aa >\\<^sub>t ba\\<rbrakk>\n                   \\<Longrightarrow> subst \\<rho> aa >\\<^sub>t\n                                     subst \\<rho> ba;\n        a >\\<^sub>t b\\<rbrakk>\n       \\<Longrightarrow> subst \\<rho> a >\\<^sub>t subst \\<rho> b", "show \"subst \\<rho> t >\\<^sub>t subst \\<rho> s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<rho> t >\\<^sub>t subst \\<rho> s", "using t_gt_s"], ["proof (prove)\nusing this:\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. subst \\<rho> t >\\<^sub>t subst \\<rho> s", "proof cases"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "case gt_sub_t_s: gt_sub"], ["proof (state)\nthis:\n  is_App t\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "obtain t1 t2 where t: \"t = App t1 t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gt_sub_t_s(1)"], ["proof (prove)\nusing this:\n  is_App t\n\ngoal (1 subgoal):\n 1. (\\<And>t1 t2. t = App t1 t2 \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis tm.collapse(2))"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (3 subgoals):\n 1. \\<lbrakk>is_App t;\n     fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 3. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<rho> t >\\<^sub>t subst \\<rho> s", "using gt_sub ih[of t1 s] ih[of t2 s] gt_sub_t_s(2) t"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_App ?t;\n   fun ?t \\<ge>\\<^sub>t ?s \\<or> arg ?t \\<ge>\\<^sub>t ?s\\<rbrakk>\n  \\<Longrightarrow> ?t >\\<^sub>t ?s\n  \\<lbrakk>{#size t1, size s#} < {#size t, size s#}; t1 >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> subst \\<rho> t1 >\\<^sub>t subst \\<rho> s\n  \\<lbrakk>{#size t2, size s#} < {#size t, size s#}; t2 >\\<^sub>t s\\<rbrakk>\n  \\<Longrightarrow> subst \\<rho> t2 >\\<^sub>t subst \\<rho> s\n  fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. subst \\<rho> t >\\<^sub>t subst \\<rho> s", "by auto"], ["proof (state)\nthis:\n  subst \\<rho> t >\\<^sub>t subst \\<rho> s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "case gt_diff_t_s: gt_diff"], ["proof (state)\nthis:\n  head t >\\<^sub>h\\<^sub>d head s\n  chkvar t s\n  chksubs (>\\<^sub>t) t s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "have \"head (subst \\<rho> t) >\\<^sub>h\\<^sub>d head (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (subst \\<rho> t) >\\<^sub>h\\<^sub>d head (subst \\<rho> s)", "by (meson wary_subst_ground_heads gt_diff_t_s(1) gt_hd_def subsetCE wary_\\<rho>)"], ["proof (state)\nthis:\n  head (subst \\<rho> t) >\\<^sub>h\\<^sub>d head (subst \\<rho> s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "moreover"], ["proof (state)\nthis:\n  head (subst \\<rho> t) >\\<^sub>h\\<^sub>d head (subst \\<rho> s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "have \"chkvar (subst \\<rho> t) (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chkvar (subst \\<rho> t) (subst \\<rho> s)", "unfolding chkvar_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_hd (head (subst \\<rho> s)) \\<subseteq> vars (subst \\<rho> t)", "using vars_subst_subseteq[OF gt_imp_vars[OF t_gt_s]] vars_head_subseteq"], ["proof (prove)\nusing this:\n  vars (subst ?\\<rho> s) \\<subseteq> vars (subst ?\\<rho> t)\n  vars_hd (head ?s) \\<subseteq> vars ?s\n\ngoal (1 subgoal):\n 1. vars_hd (head (subst \\<rho> s)) \\<subseteq> vars (subst \\<rho> t)", "by force"], ["proof (state)\nthis:\n  chkvar (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>head t >\\<^sub>h\\<^sub>d head s; chkvar t s;\n     chksubs (>\\<^sub>t) t s\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s\n 2. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "ultimately"], ["proof (chain)\npicking this:\n  head (subst \\<rho> t) >\\<^sub>h\\<^sub>d head (subst \\<rho> s)\n  chkvar (subst \\<rho> t) (subst \\<rho> s)", "show ?thesis"], ["proof (prove)\nusing this:\n  head (subst \\<rho> t) >\\<^sub>h\\<^sub>d head (subst \\<rho> s)\n  chkvar (subst \\<rho> t) (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. subst \\<rho> t >\\<^sub>t subst \\<rho> s", "by (rule gt_diff[OF _ _ chk_\\<rho>t_\\<rho>s_if[OF gt_diff_t_s(3)]])"], ["proof (state)\nthis:\n  subst \\<rho> t >\\<^sub>t subst \\<rho> s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "case gt_same_t_s: gt_same"], ["proof (state)\nthis:\n  head t = head s\n  chksubs (>\\<^sub>t) t s\n  \\<forall>f\\<in>local.ground_heads (head t).\n     extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "have hd_\\<rho>t_eq_\\<rho>s: \"head (subst \\<rho> t) = head (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (subst \\<rho> t) = head (subst \\<rho> s)", "using gt_same_t_s(1)"], ["proof (prove)\nusing this:\n  head t = head s\n\ngoal (1 subgoal):\n 1. head (subst \\<rho> t) = head (subst \\<rho> s)", "by simp"], ["proof (state)\nthis:\n  head (subst \\<rho> t) = head (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "{"], ["proof (state)\nthis:\n  head (subst \\<rho> t) = head (subst \\<rho> s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "assume f_in_grounds: \"f \\<in> ground_heads (head (subst \\<rho> t))\""], ["proof (state)\nthis:\n  f \\<in> local.ground_heads (head (subst \\<rho> t))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "let ?S = \"set (args t) \\<union> set (args s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "have extf_args_s_t: \"extf f (>\\<^sub>t) (args t) (args s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args t) (args s)", "using gt_same_t_s(3) f_in_grounds wary_\\<rho> wary_subst_ground_heads"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>local.ground_heads (head t).\n     extf f (>\\<^sub>t) (args t) (args s)\n  f \\<in> local.ground_heads (head (subst \\<rho> t))\n  wary_subst \\<rho>\n  wary_subst ?\\<rho> \\<Longrightarrow>\n  local.ground_heads (head (subst ?\\<rho> ?s))\n  \\<subseteq> local.ground_heads (head ?s)\n\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args t) (args s)", "by blast"], ["proof (state)\nthis:\n  extf f (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "have \"extf f (>\\<^sub>t) (map (subst \\<rho>) (args t)) (map (subst \\<rho>) (args s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (map (subst \\<rho>) (args t))\n     (map (subst \\<rho>) (args s))", "proof (rule extf_map[of ?S, OF _ _ _ _ _ _ extf_args_s_t])"], ["proof (state)\ngoal (6 subgoals):\n 1. finite (set (args t) \\<union> set (args s))\n 2. args t \\<in> lists (set (args t) \\<union> set (args s))\n 3. args s \\<in> lists (set (args t) \\<union> set (args s))\n 4. \\<forall>x\\<in>set (args t) \\<union> set (args s).\n       \\<not> subst \\<rho> x >\\<^sub>t subst \\<rho> x\n 5. \\<forall>z\\<in>set (args t) \\<union> set (args s).\n       \\<forall>y\\<in>set (args t) \\<union> set (args s).\n          \\<forall>x\\<in>set (args t) \\<union> set (args s).\n             subst \\<rho> z >\\<^sub>t subst \\<rho> y \\<longrightarrow>\n             subst \\<rho> y >\\<^sub>t subst \\<rho> x \\<longrightarrow>\n             subst \\<rho> z >\\<^sub>t subst \\<rho> x\n 6. \\<forall>y\\<in>set (args t) \\<union> set (args s).\n       \\<forall>x\\<in>set (args t) \\<union> set (args s).\n          y >\\<^sub>t x \\<longrightarrow>\n          subst \\<rho> y >\\<^sub>t subst \\<rho> x", "have sz_a: \"\\<forall>ta \\<in> ?S. \\<forall>sa \\<in> ?S. {#size ta, size sa#} < {#size t, size s#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>taa\\<in>set (args t) \\<union> set (args s).\n       \\<forall>saa\\<in>set (args t) \\<union> set (args s).\n          {#size taa, size saa#} < {#size t, size s#}", "by (fastforce intro: Max_lt_imp_lt_mset dest: size_in_args)"], ["proof (state)\nthis:\n  \\<forall>taa\\<in>set (args t) \\<union> set (args s).\n     \\<forall>saa\\<in>set (args t) \\<union> set (args s).\n        {#size taa, size saa#} < {#size t, size s#}\n\ngoal (6 subgoals):\n 1. finite (set (args t) \\<union> set (args s))\n 2. args t \\<in> lists (set (args t) \\<union> set (args s))\n 3. args s \\<in> lists (set (args t) \\<union> set (args s))\n 4. \\<forall>x\\<in>set (args t) \\<union> set (args s).\n       \\<not> subst \\<rho> x >\\<^sub>t subst \\<rho> x\n 5. \\<forall>z\\<in>set (args t) \\<union> set (args s).\n       \\<forall>y\\<in>set (args t) \\<union> set (args s).\n          \\<forall>x\\<in>set (args t) \\<union> set (args s).\n             subst \\<rho> z >\\<^sub>t subst \\<rho> y \\<longrightarrow>\n             subst \\<rho> y >\\<^sub>t subst \\<rho> x \\<longrightarrow>\n             subst \\<rho> z >\\<^sub>t subst \\<rho> x\n 6. \\<forall>y\\<in>set (args t) \\<union> set (args s).\n       \\<forall>x\\<in>set (args t) \\<union> set (args s).\n          y >\\<^sub>t x \\<longrightarrow>\n          subst \\<rho> y >\\<^sub>t subst \\<rho> x", "show \"\\<forall>ta \\<in> ?S. \\<forall>sa \\<in> ?S. ta >\\<^sub>t sa \\<longrightarrow> subst \\<rho> ta >\\<^sub>t subst \\<rho> sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>taa\\<in>set (args t) \\<union> set (args s).\n       \\<forall>sa\\<in>set (args t) \\<union> set (args s).\n          taa >\\<^sub>t sa \\<longrightarrow>\n          subst \\<rho> taa >\\<^sub>t subst \\<rho> sa", "using ih sz_a size_in_args"], ["proof (prove)\nusing this:\n  \\<lbrakk>{#size ?ta, size ?sa#} < {#size t, size s#};\n   ?ta >\\<^sub>t ?sa\\<rbrakk>\n  \\<Longrightarrow> subst \\<rho> ?ta >\\<^sub>t subst \\<rho> ?sa\n  \\<forall>taa\\<in>set (args t) \\<union> set (args s).\n     \\<forall>saa\\<in>set (args t) \\<union> set (args s).\n        {#size taa, size saa#} < {#size t, size s#}\n  ?s \\<in> set (args ?t) \\<Longrightarrow> size ?s < size ?t\n\ngoal (1 subgoal):\n 1. \\<forall>taa\\<in>set (args t) \\<union> set (args s).\n       \\<forall>sa\\<in>set (args t) \\<union> set (args s).\n          taa >\\<^sub>t sa \\<longrightarrow>\n          subst \\<rho> taa >\\<^sub>t subst \\<rho> sa", "by fastforce"], ["proof (state)\nthis:\n  \\<forall>taa\\<in>set (args t) \\<union> set (args s).\n     \\<forall>sa\\<in>set (args t) \\<union> set (args s).\n        taa >\\<^sub>t sa \\<longrightarrow>\n        subst \\<rho> taa >\\<^sub>t subst \\<rho> sa\n\ngoal (5 subgoals):\n 1. finite (set (args t) \\<union> set (args s))\n 2. args t \\<in> lists (set (args t) \\<union> set (args s))\n 3. args s \\<in> lists (set (args t) \\<union> set (args s))\n 4. \\<forall>x\\<in>set (args t) \\<union> set (args s).\n       \\<not> subst \\<rho> x >\\<^sub>t subst \\<rho> x\n 5. \\<forall>z\\<in>set (args t) \\<union> set (args s).\n       \\<forall>y\\<in>set (args t) \\<union> set (args s).\n          \\<forall>x\\<in>set (args t) \\<union> set (args s).\n             subst \\<rho> z >\\<^sub>t subst \\<rho> y \\<longrightarrow>\n             subst \\<rho> y >\\<^sub>t subst \\<rho> x \\<longrightarrow>\n             subst \\<rho> z >\\<^sub>t subst \\<rho> x", "qed (auto intro!: gt_irrefl elim!: gt_trans)"], ["proof (state)\nthis:\n  extf f (>\\<^sub>t) (map (subst \\<rho>) (args t))\n   (map (subst \\<rho>) (args s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "hence \"extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\""], ["proof (prove)\nusing this:\n  extf f (>\\<^sub>t) (map (subst \\<rho>) (args t))\n   (map (subst \\<rho>) (args s))\n\ngoal (1 subgoal):\n 1. extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))", "by (auto simp: gt_same_t_s(1) intro: extf_compat_append_left)"], ["proof (state)\nthis:\n  extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "}"], ["proof (state)\nthis:\n  ?f2 \\<in> local.ground_heads (head (subst \\<rho> t)) \\<Longrightarrow>\n  extf ?f2 (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "hence \"\\<forall>f \\<in> ground_heads (head (subst \\<rho> t)).\n      extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\""], ["proof (prove)\nusing this:\n  ?f2 \\<in> local.ground_heads (head (subst \\<rho> t)) \\<Longrightarrow>\n  extf ?f2 (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\n\ngoal (1 subgoal):\n 1. \\<forall>f\\<in>local.ground_heads (head (subst \\<rho> t)).\n       extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))", "by blast"], ["proof (state)\nthis:\n  \\<forall>f\\<in>local.ground_heads (head (subst \\<rho> t)).\n     extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>head t = head s; chksubs (>\\<^sub>t) t s;\n     \\<forall>f\\<in>local.ground_heads (head t).\n        extf f (>\\<^sub>t) (args t) (args s)\\<rbrakk>\n    \\<Longrightarrow> subst \\<rho> t >\\<^sub>t subst \\<rho> s", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<forall>f\\<in>local.ground_heads (head (subst \\<rho> t)).\n     extf f (>\\<^sub>t) (args (subst \\<rho> t)) (args (subst \\<rho> s))\n\ngoal (1 subgoal):\n 1. subst \\<rho> t >\\<^sub>t subst \\<rho> s", "by (rule gt_same[OF hd_\\<rho>t_eq_\\<rho>s chk_\\<rho>t_\\<rho>s_if[OF gt_same_t_s(2)]])"], ["proof (state)\nthis:\n  subst \\<rho> t >\\<^sub>t subst \\<rho> s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  subst \\<rho> t >\\<^sub>t subst \\<rho> s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Totality on Ground Terms\\<close>"], ["", "theorem gt_total_ground:\n  assumes extf_total: \"\\<And>f. ext_total (extf f)\"\n  shows \"ground t \\<Longrightarrow> ground s \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ground t; ground s\\<rbrakk>\n    \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "proof (simp only: atomize_imp,\n    rule measure_induct_rule[of \"\\<lambda>(t, s). {# size t, size s #}\"\n      \"\\<lambda>(t, s). ground t \\<longrightarrow> ground s \\<longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\" \"(t, s)\", simplified prod.case],\n    simp only: split_paired_all prod.case atomize_imp[symmetric])"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "fix t s :: \"('s, 'v) tm\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume\n    ih: \"\\<And>ta sa. {# size ta, size sa #} < {# size t, size s #} \\<Longrightarrow> ground ta \\<Longrightarrow> ground sa \\<Longrightarrow>\n      ta >\\<^sub>t sa \\<or> sa >\\<^sub>t ta \\<or> ta = sa\" and\n    gr_t: \"ground t\" and gr_s: \"ground s\""], ["proof (state)\nthis:\n  \\<lbrakk>{#size ?ta, size ?sa#} < {#size t, size s#}; ground ?ta;\n   ground ?sa\\<rbrakk>\n  \\<Longrightarrow> ?ta >\\<^sub>t ?sa \\<or>\n                    ?sa >\\<^sub>t ?ta \\<or> ?ta = ?sa\n  ground t\n  ground s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "let ?case = \"t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"chksubs (>\\<^sub>t) t s \\<or> s >\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) t s \\<or> s >\\<^sub>t t", "unfolding chksubs_def tm.case_eq_if"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if is_Hd s then True\n     else t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s) \\<or>\n    s >\\<^sub>t t", "using ih[of t \"fun s\"] ih[of t \"arg s\"] mset_lt_single_iff"], ["proof (prove)\nusing this:\n  \\<lbrakk>{#size t, size (fun s)#} < {#size t, size s#}; ground t;\n   ground (fun s)\\<rbrakk>\n  \\<Longrightarrow> t >\\<^sub>t fun s \\<or>\n                    fun s >\\<^sub>t t \\<or> t = fun s\n  \\<lbrakk>{#size t, size (arg s)#} < {#size t, size s#}; ground t;\n   ground (arg s)\\<rbrakk>\n  \\<Longrightarrow> t >\\<^sub>t arg s \\<or>\n                    arg s >\\<^sub>t t \\<or> t = arg s\n  ({#?x#} < {#?y#}) = (?x < ?y)\n\ngoal (1 subgoal):\n 1. (if is_Hd s then True\n     else t >\\<^sub>t fun s \\<and> t >\\<^sub>t arg s) \\<or>\n    s >\\<^sub>t t", "by (metis add_mset_lt_right_lt gr_s gr_t ground_arg ground_fun gt_sub size_arg_lt size_fun_lt)"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s \\<or> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "moreover"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s \\<or> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s", "unfolding chksubs_def tm.case_eq_if"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if is_Hd t then True\n     else s >\\<^sub>t fun t \\<and> s >\\<^sub>t arg t) \\<or>\n    t >\\<^sub>t s", "using ih[of \"fun t\" s] ih[of \"arg t\" s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>{#size (fun t), size s#} < {#size t, size s#}; ground (fun t);\n   ground s\\<rbrakk>\n  \\<Longrightarrow> fun t >\\<^sub>t s \\<or>\n                    s >\\<^sub>t fun t \\<or> fun t = s\n  \\<lbrakk>{#size (arg t), size s#} < {#size t, size s#}; ground (arg t);\n   ground s\\<rbrakk>\n  \\<Longrightarrow> arg t >\\<^sub>t s \\<or>\n                    s >\\<^sub>t arg t \\<or> arg t = s\n\ngoal (1 subgoal):\n 1. (if is_Hd t then True\n     else s >\\<^sub>t fun t \\<and> s >\\<^sub>t arg t) \\<or>\n    t >\\<^sub>t s", "by (metis add_mset_lt_left_lt gr_s gr_t ground_arg ground_fun gt_sub size_arg_lt size_fun_lt)"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "moreover"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume\n      chksubs_t_s: \"chksubs (>\\<^sub>t) t s\" and\n      chksubs_s_t: \"chksubs (>\\<^sub>t) s t\""], ["proof (state)\nthis:\n  chksubs (>\\<^sub>t) t s\n  chksubs (>\\<^sub>t) s t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "obtain g where g: \"head t = Sym g\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>g. head t = Sym g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gr_t"], ["proof (prove)\nusing this:\n  ground t\n\ngoal (1 subgoal):\n 1. (\\<And>g. head t = Sym g \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ground_head hd.collapse(2))"], ["proof (state)\nthis:\n  head t = Sym g\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "obtain f where f: \"head s = Sym f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f. head s = Sym f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using gr_s"], ["proof (prove)\nusing this:\n  ground s\n\ngoal (1 subgoal):\n 1. (\\<And>f. head s = Sym f \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis ground_head hd.collapse(2))"], ["proof (state)\nthis:\n  head s = Sym f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have chkvar_t_s: \"chkvar t s\" and chkvar_s_t: \"chkvar s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. chkvar t s &&& chkvar s t", "using g f"], ["proof (prove)\nusing this:\n  head t = Sym g\n  head s = Sym f\n\ngoal (1 subgoal):\n 1. chkvar t s &&& chkvar s t", "by simp_all"], ["proof (state)\nthis:\n  chkvar t s\n  chkvar s t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  chkvar t s\n  chkvar s t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume g_gt_f: \"g >\\<^sub>s f\""], ["proof (state)\nthis:\n  g >\\<^sub>s f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"t >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t >\\<^sub>t s", "by (rule gt_diff[OF _ chkvar_t_s chksubs_t_s]) (simp add: g f gt_sym_imp_hd[OF g_gt_f])"], ["proof (state)\nthis:\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  g >\\<^sub>s f \\<Longrightarrow> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "moreover"], ["proof (state)\nthis:\n  g >\\<^sub>s f \\<Longrightarrow> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  g >\\<^sub>s f \\<Longrightarrow> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume f_gt_g: \"f >\\<^sub>s g\""], ["proof (state)\nthis:\n  f >\\<^sub>s g\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"s >\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s >\\<^sub>t t", "by (rule gt_diff[OF _ chkvar_s_t chksubs_s_t]) (simp add: g f gt_sym_imp_hd[OF f_gt_g])"], ["proof (state)\nthis:\n  s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  f >\\<^sub>s g \\<Longrightarrow> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "moreover"], ["proof (state)\nthis:\n  f >\\<^sub>s g \\<Longrightarrow> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  f >\\<^sub>s g \\<Longrightarrow> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume g_eq_f: \"g = f\""], ["proof (state)\nthis:\n  g = f\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "hence hd_t: \"head t = head s\""], ["proof (prove)\nusing this:\n  g = f\n\ngoal (1 subgoal):\n 1. head t = head s", "using g f"], ["proof (prove)\nusing this:\n  g = f\n  head t = Sym g\n  head s = Sym f\n\ngoal (1 subgoal):\n 1. head t = head s", "by auto"], ["proof (state)\nthis:\n  head t = head s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "let ?ts = \"args t\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "let ?ss = \"args s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have gr_ts: \"\\<forall>ta \\<in> set ?ts. ground ta\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ta\\<in>set (args t). ground ta", "using ground_args[OF _ gr_t]"], ["proof (prove)\nusing this:\n  ?t \\<in> set (args t) \\<Longrightarrow> ground ?t\n\ngoal (1 subgoal):\n 1. \\<forall>ta\\<in>set (args t). ground ta", "by blast"], ["proof (state)\nthis:\n  \\<forall>ta\\<in>set (args t). ground ta\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have gr_ss: \"\\<forall>sa \\<in> set ?ss. ground sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>sa\\<in>set (args s). ground sa", "using ground_args[OF _ gr_s]"], ["proof (prove)\nusing this:\n  ?t \\<in> set (args s) \\<Longrightarrow> ground ?t\n\ngoal (1 subgoal):\n 1. \\<forall>sa\\<in>set (args s). ground sa", "by blast"], ["proof (state)\nthis:\n  \\<forall>sa\\<in>set (args s). ground sa\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  \\<forall>sa\\<in>set (args s). ground sa\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume ts_eq_ss: \"?ts = ?ss\""], ["proof (state)\nthis:\n  args t = args s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"t = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t = s", "using hd_t ts_eq_ss"], ["proof (prove)\nusing this:\n  head t = head s\n  args t = args s\n\ngoal (1 subgoal):\n 1. t = s", "by (rule tm_expand_apps)"], ["proof (state)\nthis:\n  t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  args t = args s \\<Longrightarrow> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "moreover"], ["proof (state)\nthis:\n  args t = args s \\<Longrightarrow> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  args t = args s \\<Longrightarrow> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume ts_gt_ss: \"extf g (>\\<^sub>t) ?ts ?ss\""], ["proof (state)\nthis:\n  extf g (>\\<^sub>t) (args t) (args s)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"t >\\<^sub>t s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. t >\\<^sub>t s", "by (rule gt_same[OF hd_t chksubs_t_s]) (auto simp: g ts_gt_ss)"], ["proof (state)\nthis:\n  t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  extf g (>\\<^sub>t) (args t) (args s) \\<Longrightarrow> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "moreover"], ["proof (state)\nthis:\n  extf g (>\\<^sub>t) (args t) (args s) \\<Longrightarrow> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "{"], ["proof (state)\nthis:\n  extf g (>\\<^sub>t) (args t) (args s) \\<Longrightarrow> t >\\<^sub>t s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "assume ss_gt_ts: \"extf g (>\\<^sub>t) ?ss ?ts\""], ["proof (state)\nthis:\n  extf g (>\\<^sub>t) (args s) (args t)\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "have \"s >\\<^sub>t t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s >\\<^sub>t t", "by (rule gt_same[OF hd_t[symmetric] chksubs_s_t]) (auto simp: f[folded g_eq_f] ss_gt_ts)"], ["proof (state)\nthis:\n  s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  extf g (>\\<^sub>t) (args s) (args t) \\<Longrightarrow> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "ultimately"], ["proof (chain)\npicking this:\n  args t = args s \\<Longrightarrow> t = s\n  extf g (>\\<^sub>t) (args t) (args s) \\<Longrightarrow> t >\\<^sub>t s\n  extf g (>\\<^sub>t) (args s) (args t) \\<Longrightarrow> s >\\<^sub>t t", "have ?case"], ["proof (prove)\nusing this:\n  args t = args s \\<Longrightarrow> t = s\n  extf g (>\\<^sub>t) (args t) (args s) \\<Longrightarrow> t >\\<^sub>t s\n  extf g (>\\<^sub>t) (args s) (args t) \\<Longrightarrow> s >\\<^sub>t t\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "using ih gr_ss gr_ts\n          ext_total.total[OF extf_total, rule_format, of \"set ?ts \\<union> set ?ss\" \"(>\\<^sub>t)\" ?ts ?ss g]"], ["proof (prove)\nusing this:\n  args t = args s \\<Longrightarrow> t = s\n  extf g (>\\<^sub>t) (args t) (args s) \\<Longrightarrow> t >\\<^sub>t s\n  extf g (>\\<^sub>t) (args s) (args t) \\<Longrightarrow> s >\\<^sub>t t\n  \\<lbrakk>{#size ?ta, size ?sa#} < {#size t, size s#}; ground ?ta;\n   ground ?sa\\<rbrakk>\n  \\<Longrightarrow> ?ta >\\<^sub>t ?sa \\<or>\n                    ?sa >\\<^sub>t ?ta \\<or> ?ta = ?sa\n  \\<forall>sa\\<in>set (args s). ground sa\n  \\<forall>ta\\<in>set (args t). ground ta\n  \\<lbrakk>\\<And>y x.\n              \\<lbrakk>y \\<in> set (args t) \\<union> set (args s);\n               x \\<in> set (args t) \\<union> set (args s)\\<rbrakk>\n              \\<Longrightarrow> y >\\<^sub>t x \\<or>\n                                x >\\<^sub>t y \\<or> y = x;\n   args t \\<in> lists (set (args t) \\<union> set (args s));\n   args s \\<in> lists (set (args t) \\<union> set (args s))\\<rbrakk>\n  \\<Longrightarrow> extf g (>\\<^sub>t) (args t) (args s) \\<or>\n                    extf g (>\\<^sub>t) (args s) (args t) \\<or>\n                    args t = args s\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "by (metis Un_iff in_listsI less_multiset_doubletons size_in_args)"], ["proof (state)\nthis:\n  t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  g = f \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "ultimately"], ["proof (chain)\npicking this:\n  g >\\<^sub>s f \\<Longrightarrow> t >\\<^sub>t s\n  f >\\<^sub>s g \\<Longrightarrow> s >\\<^sub>t t\n  g = f \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "have ?case"], ["proof (prove)\nusing this:\n  g >\\<^sub>s f \\<Longrightarrow> t >\\<^sub>t s\n  f >\\<^sub>s g \\<Longrightarrow> s >\\<^sub>t t\n  g = f \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "using gt_sym_total"], ["proof (prove)\nusing this:\n  g >\\<^sub>s f \\<Longrightarrow> t >\\<^sub>t s\n  f >\\<^sub>s g \\<Longrightarrow> s >\\<^sub>t t\n  g = f \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n  ?f >\\<^sub>s ?g \\<or> ?g >\\<^sub>s ?f \\<or> ?g = ?f\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "by blast"], ["proof (state)\nthis:\n  t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "}"], ["proof (state)\nthis:\n  \\<lbrakk>chksubs (>\\<^sub>t) t s; chksubs (>\\<^sub>t) s t\\<rbrakk>\n  \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>\\<And>aa ba.\n                   \\<lbrakk>{#size aa, size ba#} < {#size a, size b#};\n                    ground aa; ground ba\\<rbrakk>\n                   \\<Longrightarrow> aa >\\<^sub>t ba \\<or>\n                                     ba >\\<^sub>t aa \\<or> aa = ba;\n        ground a; ground b\\<rbrakk>\n       \\<Longrightarrow> a >\\<^sub>t b \\<or> b >\\<^sub>t a \\<or> a = b", "ultimately"], ["proof (chain)\npicking this:\n  chksubs (>\\<^sub>t) t s \\<or> s >\\<^sub>t t\n  chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s\n  \\<lbrakk>chksubs (>\\<^sub>t) t s; chksubs (>\\<^sub>t) s t\\<rbrakk>\n  \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "show ?case"], ["proof (prove)\nusing this:\n  chksubs (>\\<^sub>t) t s \\<or> s >\\<^sub>t t\n  chksubs (>\\<^sub>t) s t \\<or> t >\\<^sub>t s\n  \\<lbrakk>chksubs (>\\<^sub>t) t s; chksubs (>\\<^sub>t) s t\\<rbrakk>\n  \\<Longrightarrow> t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal (1 subgoal):\n 1. t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s", "by fast"], ["proof (state)\nthis:\n  t >\\<^sub>t s \\<or> s >\\<^sub>t t \\<or> t = s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Well-foundedness\\<close>"], ["", "abbreviation gtg :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" (infix \">\\<^sub>t\\<^sub>g\" 50) where\n  \"(>\\<^sub>t\\<^sub>g) \\<equiv> \\<lambda>t s. ground t \\<and> t >\\<^sub>t s\""], ["", "theorem gt_wf:\n  assumes extf_wf: \"\\<And>f. ext_wf (extf f)\"\n  shows \"wfP (\\<lambda>s t. t >\\<^sub>t s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "have ground_wfP: \"wfP (\\<lambda>s t. t >\\<^sub>t\\<^sub>g s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. ground t \\<and> t >\\<^sub>t s)", "unfolding wfP_iff_no_inf_chain"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Ex (inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "assume \"\\<exists>f. inf_chain (>\\<^sub>t\\<^sub>g) f\""], ["proof (state)\nthis:\n  \\<exists>f. inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) f\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>f. inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) f", "obtain t where t_bad: \"bad (>\\<^sub>t\\<^sub>g) t\""], ["proof (prove)\nusing this:\n  \\<exists>f. inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) f\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding inf_chain_def bad_def"], ["proof (prove)\nusing this:\n  \\<exists>f. \\<forall>i. ground (f i) \\<and> f i >\\<^sub>t f (Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<exists>f.\n           (\\<forall>i. ground (f i) \\<and> f i >\\<^sub>t f (Suc i)) \\<and>\n           f 0 = t \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) t\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "let ?ff = \"worst_chain (>\\<^sub>t\\<^sub>g) (\\<lambda>t s. size t > size s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "let ?U_of = \"\\<lambda>i. if is_App (?ff i) then {fun (?ff i)} \\<union> set (args (?ff i)) else {}\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "note wf_sz = wf_app[OF wellorder_class.wf, of size, simplified]"], ["proof (state)\nthis:\n  wf {(x, y). size x < size y}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "define U where \"U = (\\<Union>i. ?U_of i)\""], ["proof (state)\nthis:\n  U =\n  (\\<Union>i.\n      if is_App\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)\n      then {fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                  (\\<lambda>t s. size s < size t) i)} \\<union>\n           set (args\n                 (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                   (\\<lambda>t s. size s < size t) i))\n      else {})\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have gr: \"\\<And>i. ground (?ff i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       ground\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)", "using worst_chain_bad[OF wf_sz t_bad, unfolded inf_chain_def]"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     ground\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>y x. size x < size y) i) \\<and>\n     worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n      (\\<lambda>y x. size x < size y) i >\\<^sub>t\n     worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n      (\\<lambda>y x. size x < size y) (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       ground\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)", "by fast"], ["proof (state)\nthis:\n  ground\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) ?i)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have gr_fun: \"\\<And>i. ground (fun (?ff i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       ground\n        (fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i))", "by (rule ground_fun[OF gr])"], ["proof (state)\nthis:\n  ground\n   (fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) ?i))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have gr_args: \"\\<And>i s. s \\<in> set (args (?ff i)) \\<Longrightarrow> ground s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i s.\n       s \\<in> set (args\n                     (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)) \\<Longrightarrow>\n       ground s", "by (rule ground_args[OF _ gr])"], ["proof (state)\nthis:\n  ?s \\<in> set (args\n                 (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                   (\\<lambda>t s. size s < size t) ?i)) \\<Longrightarrow>\n  ground ?s\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have gr_u: \"\\<And>u. u \\<in> U \\<Longrightarrow> ground u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u. u \\<in> U \\<Longrightarrow> ground u", "unfolding U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> (\\<Union>i.\n                   if is_App\n                       (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) i)\n                   then {fun (worst_chain\n                               (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                               (\\<lambda>t s. size s < size t) i)} \\<union>\n                        set (args\n                              (worst_chain\n                                (\\<lambda>t s.\n                                    ground t \\<and> t >\\<^sub>t s)\n                                (\\<lambda>t s. size s < size t) i))\n                   else {}) \\<Longrightarrow>\n       ground u", "by (auto dest: gr_args) (metis (lifting) empty_iff gr_fun)"], ["proof (state)\nthis:\n  ?u \\<in> U \\<Longrightarrow> ground ?u\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have \"\\<not> bad (>\\<^sub>t\\<^sub>g) u\" if u_in: \"u \\<in> ?U_of i\" for u i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u \\<Longrightarrow>\n    False", "let ?ti = \"?ff i\""], ["proof (state)\ngoal (1 subgoal):\n 1. bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u \\<Longrightarrow>\n    False", "assume u_bad: \"bad (>\\<^sub>t\\<^sub>g) u\""], ["proof (state)\nthis:\n  bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u\n\ngoal (1 subgoal):\n 1. bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u \\<Longrightarrow>\n    False", "have sz_u: \"size u < size ?ti\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size u\n    < size\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)", "proof (cases \"?ff i\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       Hd x1 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)\n 2. \\<And>x21 x22.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       App x21 x22 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)", "case Hd"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i =\n  Hd x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       Hd x1 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)\n 2. \\<And>x21 x22.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       App x21 x22 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i =\n  Hd x1_\n\ngoal (1 subgoal):\n 1. size u\n    < size\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)", "using u_in size_in_args"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i =\n  Hd x1_\n  u \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})\n  ?s \\<in> set (args ?t) \\<Longrightarrow> size ?s < size ?t\n\ngoal (1 subgoal):\n 1. size u\n    < size\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)", "by fastforce"], ["proof (state)\nthis:\n  size u\n  < size\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       App x21 x22 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       App x21 x22 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)", "case App"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i =\n  App x21_ x22_\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i =\n       App x21 x22 \\<Longrightarrow>\n       size u\n       < size\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i =\n  App x21_ x22_\n\ngoal (1 subgoal):\n 1. size u\n    < size\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)", "using u_in size_in_args insert_iff size_fun_lt"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i =\n  App x21_ x22_\n  u \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})\n  ?s \\<in> set (args ?t) \\<Longrightarrow> size ?s < size ?t\n  (?a \\<in> insert ?b ?A) = (?a = ?b \\<or> ?a \\<in> ?A)\n  is_App ?s \\<Longrightarrow> size (fun ?s) < size ?s\n\ngoal (1 subgoal):\n 1. size u\n    < size\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)", "by fastforce"], ["proof (state)\nthis:\n  size u\n  < size\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  size u\n  < size\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n\ngoal (1 subgoal):\n 1. bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> False\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> False\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. False", "using sz_u min_worst_chain_0[OF wf_sz u_bad]"], ["proof (prove)\nusing this:\n  i = 0\n  size u\n  < size\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n  \\<not> size u\n         < size\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>y x. size x < size y) 0)\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "case Suc"], ["proof (state)\nthis:\n  i = Suc nat_\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "hence \"?ff (i - 1) >\\<^sub>t ?ff i\""], ["proof (prove)\nusing this:\n  i = Suc nat_\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i", "using worst_chain_pred[OF wf_sz t_bad]"], ["proof (prove)\nusing this:\n  i = Suc nat_\n  ground\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>y x. size x < size y) ?i) \\<and>\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>y x. size x < size y) ?i >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>y x. size x < size y) (Suc ?i)\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i", "by simp"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "have \"?ff i >\\<^sub>t u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "have u_in: \"u \\<in> ?U_of i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> (if is_App\n                 (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                   (\\<lambda>t s. size s < size t) i)\n             then {fun (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) i)} \\<union>\n                  set (args\n                        (worst_chain\n                          (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                          (\\<lambda>t s. size s < size t) i))\n             else {})", "using u_in"], ["proof (prove)\nusing this:\n  u \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})\n\ngoal (1 subgoal):\n 1. u \\<in> (if is_App\n                 (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                   (\\<lambda>t s. size s < size t) i)\n             then {fun (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) i)} \\<union>\n                  set (args\n                        (worst_chain\n                          (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                          (\\<lambda>t s. size s < size t) i))\n             else {})", "by blast"], ["proof (state)\nthis:\n  u \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "have ffi_ne_u: \"?ff i \\<noteq> u\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i \\<noteq>\n    u", "using sz_u"], ["proof (prove)\nusing this:\n  size u\n  < size\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i \\<noteq>\n    u", "by fastforce"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i \\<noteq>\n  u\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "hence \"is_App (?ff i) \\<Longrightarrow> \\<not> sub u (?ff i) \\<Longrightarrow> ?ff i >\\<^sub>t u\""], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i \\<noteq>\n  u\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_App\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) i);\n     \\<not> sub u\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\\<rbrakk>\n    \\<Longrightarrow> worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i >\\<^sub>t\n                      u", "using u_in gt_sub sub_args"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i \\<noteq>\n  u\n  u \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})\n  \\<lbrakk>is_App ?t;\n   fun ?t \\<ge>\\<^sub>t ?s \\<or> arg ?t \\<ge>\\<^sub>t ?s\\<rbrakk>\n  \\<Longrightarrow> ?t >\\<^sub>t ?s\n  ?s \\<in> set (args ?t) \\<Longrightarrow> sub ?s ?t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>is_App\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) i);\n     \\<not> sub u\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\\<rbrakk>\n    \\<Longrightarrow> worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i >\\<^sub>t\n                      u", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>is_App\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) i);\n   \\<not> sub u\n           (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n             (\\<lambda>t s. size s < size t) i)\\<rbrakk>\n  \\<Longrightarrow> worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n                    u\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "thus \"?ff i >\\<^sub>t u\""], ["proof (prove)\nusing this:\n  \\<lbrakk>is_App\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) i);\n   \\<not> sub u\n           (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n             (\\<lambda>t s. size s < size t) i)\\<rbrakk>\n  \\<Longrightarrow> worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n                    u\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "using ffi_ne_u u_in gt_proper_sub sub_args"], ["proof (prove)\nusing this:\n  \\<lbrakk>is_App\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) i);\n   \\<not> sub u\n           (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n             (\\<lambda>t s. size s < size t) i)\\<rbrakk>\n  \\<Longrightarrow> worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n                    u\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i \\<noteq>\n  u\n  u \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})\n  proper_sub ?s ?t \\<Longrightarrow> ?t >\\<^sub>t ?s\n  ?s \\<in> set (args ?t) \\<Longrightarrow> sub ?s ?t\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    u", "by fastforce"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i >\\<^sub>t\n  u\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i >\\<^sub>t\n  u\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i >\\<^sub>t\n  u", "have \"?ff (i - 1) >\\<^sub>t u\""], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i >\\<^sub>t\n  u\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n    u", "by (rule gt_trans)"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  u\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  u\n\ngoal (1 subgoal):\n 1. False", "using Suc sz_u min_worst_chain_Suc[OF wf_sz u_bad] gr"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (i - 1) >\\<^sub>t\n  u\n  i = Suc nat_\n  size u\n  < size\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n  ground\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>y x. size x < size y) ?i) \\<and>\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>y x. size x < size y) ?i >\\<^sub>t\n  u \\<Longrightarrow>\n  \\<not> size u\n         < size\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>y x. size x < size y) (Suc ?i))\n  ground\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) ?i)\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?u \\<in> (if is_App\n                (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                  (\\<lambda>t s. size s < size t) ?i)\n            then {fun (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) ?i)} \\<union>\n                 set (args\n                       (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) ?i))\n            else {}) \\<Longrightarrow>\n  \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) ?u\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "hence u_good: \"\\<And>u. u \\<in> U \\<Longrightarrow> \\<not> bad (>\\<^sub>t\\<^sub>g) u\""], ["proof (prove)\nusing this:\n  ?u \\<in> (if is_App\n                (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                  (\\<lambda>t s. size s < size t) ?i)\n            then {fun (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) ?i)} \\<union>\n                 set (args\n                       (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) ?i))\n            else {}) \\<Longrightarrow>\n  \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) ?u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> U \\<Longrightarrow>\n       \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u", "unfolding U_def"], ["proof (prove)\nusing this:\n  ?u \\<in> (if is_App\n                (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                  (\\<lambda>t s. size s < size t) ?i)\n            then {fun (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) ?i)} \\<union>\n                 set (args\n                       (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) ?i))\n            else {}) \\<Longrightarrow>\n  \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) ?u\n\ngoal (1 subgoal):\n 1. \\<And>u.\n       u \\<in> (\\<Union>i.\n                   if is_App\n                       (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) i)\n                   then {fun (worst_chain\n                               (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                               (\\<lambda>t s. size s < size t) i)} \\<union>\n                        set (args\n                              (worst_chain\n                                (\\<lambda>t s.\n                                    ground t \\<and> t >\\<^sub>t s)\n                                (\\<lambda>t s. size s < size t) i))\n                   else {}) \\<Longrightarrow>\n       \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) u", "by blast"], ["proof (state)\nthis:\n  ?u \\<in> U \\<Longrightarrow>\n  \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) ?u\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have bad_diff_same: \"inf_chain (\\<lambda>t s. ground t \\<and> (gt_diff t s \\<or> gt_same t s)) ?ff\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>t s. ground t \\<and> (gt_diff t s \\<or> gt_same t s))\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t))", "unfolding inf_chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       ground\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i) \\<and>\n       (gt_diff\n         (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n           (\\<lambda>t s. size s < size t) i)\n         (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n           (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n        gt_same\n         (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n           (\\<lambda>t s. size s < size t) i)\n         (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n           (\\<lambda>t s. size s < size t) (Suc i)))", "proof (intro allI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       ground\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n 2. \\<And>i.\n       gt_diff\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n       gt_same\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i))", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       ground\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n 2. \\<And>i.\n       gt_diff\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n       gt_same\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i))", "show \"ground (?ff i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)", "by (rule gr)"], ["proof (state)\nthis:\n  ground\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       gt_diff\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n       gt_same\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i))", "have gt: \"?ff i >\\<^sub>t ?ff (Suc i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i)", "using worst_chain_pred[OF wf_sz t_bad]"], ["proof (prove)\nusing this:\n  ground\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>y x. size x < size y) ?i) \\<and>\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>y x. size x < size y) ?i >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>y x. size x < size y) (Suc ?i)\n\ngoal (1 subgoal):\n 1. worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i >\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i)", "by blast"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i)\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       gt_diff\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n       gt_same\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i))", "have \"\\<not> gt_sub (?ff i) (?ff (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt_sub\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) i)\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (Suc i))", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "assume a: \"gt_sub (?ff i) (?ff (Suc i))\""], ["proof (state)\nthis:\n  gt_sub\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i))\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "hence fi_app: \"is_App (?ff i)\" and\n          fun_or_arg_fi_ge: \"fun (?ff i) \\<ge>\\<^sub>t ?ff (Suc i) \\<or> arg (?ff i) \\<ge>\\<^sub>t ?ff (Suc i)\""], ["proof (prove)\nusing this:\n  gt_sub\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i))\n\ngoal (1 subgoal):\n 1. is_App\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i) &&&\n    fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i) \\<or>\n    arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i)", "unfolding gt_sub.simps"], ["proof (prove)\nusing this:\n  \\<exists>t s.\n     worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n      (\\<lambda>t s. size s < size t) i =\n     t \\<and>\n     worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n      (\\<lambda>t s. size s < size t) (Suc i) =\n     s \\<and>\n     is_App t \\<and> (fun t \\<ge>\\<^sub>t s \\<or> arg t \\<ge>\\<^sub>t s)\n\ngoal (1 subgoal):\n 1. is_App\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i) &&&\n    fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i) \\<or>\n    arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i)", "by blast+"], ["proof (state)\nthis:\n  is_App\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i) \\<or>\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i)\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "have \"fun (?ff i) \\<in> ?U_of i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n    \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})", "unfolding U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n    \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})", "using fi_app"], ["proof (prove)\nusing this:\n  is_App\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n\ngoal (1 subgoal):\n 1. fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n    \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})", "by auto"], ["proof (state)\nthis:\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "have \"arg (?ff i) \\<in> ?U_of i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n    \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})", "unfolding U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n    \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})", "using fi_app arg_in_args"], ["proof (prove)\nusing this:\n  is_App\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n  is_App ?s \\<Longrightarrow> arg ?s \\<in> set (args ?s)\n\ngoal (1 subgoal):\n 1. arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n    \\<in> (if is_App\n               (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                 (\\<lambda>t s. size s < size t) i)\n           then {fun (worst_chain\n                       (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                       (\\<lambda>t s. size s < size t) i)} \\<union>\n                set (args\n                      (worst_chain\n                        (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                        (\\<lambda>t s. size s < size t) i))\n           else {})", "by force"], ["proof (state)\nthis:\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})", "obtain uij where uij_in: \"uij \\<in> U\" and uij_cases: \"uij \\<ge>\\<^sub>t ?ff (Suc i)\""], ["proof (prove)\nusing this:\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n\ngoal (1 subgoal):\n 1. (\\<And>uij.\n        \\<lbrakk>uij \\<in> U;\n         uij \\<ge>\\<^sub>t\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding U_def"], ["proof (prove)\nusing this:\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n\ngoal (1 subgoal):\n 1. (\\<And>uij.\n        \\<lbrakk>uij\n                 \\<in> (\\<Union>i.\n                           if is_App\n                               (worst_chain\n                                 (\\<lambda>t s.\n                                     ground t \\<and> t >\\<^sub>t s)\n                                 (\\<lambda>t s. size s < size t) i)\n                           then {fun (worst_chain\n (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n (\\<lambda>t s. size s < size t) i)} \\<union>\n                                set (args\n(worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n  (\\<lambda>t s. size s < size t) i))\n                           else {});\n         uij \\<ge>\\<^sub>t\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using fun_or_arg_fi_ge"], ["proof (prove)\nusing this:\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) i)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) i)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) i))\n         else {})\n  fun (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i) \\<or>\n  arg (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i) \\<ge>\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i)\n\ngoal (1 subgoal):\n 1. (\\<And>uij.\n        \\<lbrakk>uij\n                 \\<in> (\\<Union>i.\n                           if is_App\n                               (worst_chain\n                                 (\\<lambda>t s.\n                                     ground t \\<and> t >\\<^sub>t s)\n                                 (\\<lambda>t s. size s < size t) i)\n                           then {fun (worst_chain\n (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n (\\<lambda>t s. size s < size t) i)} \\<union>\n                                set (args\n(worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n  (\\<lambda>t s. size s < size t) i))\n                           else {});\n         uij \\<ge>\\<^sub>t\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  uij \\<in> U\n  uij \\<ge>\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i)\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "have \"\\<And>n. ?ff n >\\<^sub>t ?ff (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>n.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) n >\\<^sub>t\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (Suc n)", "by (rule worst_chain_pred[OF wf_sz t_bad, THEN conjunct2])"], ["proof (state)\nthis:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) ?n >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc ?n)\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "hence uij_gt_i_plus_3: \"uij >\\<^sub>t ?ff (Suc (Suc i))\""], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) ?n >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc ?n)\n\ngoal (1 subgoal):\n 1. uij >\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc (Suc i))", "using gt_trans uij_cases"], ["proof (prove)\nusing this:\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) ?n >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc ?n)\n  \\<lbrakk>?u >\\<^sub>t ?t; ?t >\\<^sub>t ?s\\<rbrakk>\n  \\<Longrightarrow> ?u >\\<^sub>t ?s\n  uij \\<ge>\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i)\n\ngoal (1 subgoal):\n 1. uij >\\<^sub>t\n    worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc (Suc i))", "by blast"], ["proof (state)\nthis:\n  uij >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc (Suc i))\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "have \"inf_chain (>\\<^sub>t\\<^sub>g) (\\<lambda>j. if j = 0 then uij else ?ff (Suc (i + j)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>j.\n         if j = 0 then uij\n         else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) (Suc (i + j)))", "unfolding inf_chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>ia.\n       ground\n        (if ia = 0 then uij\n         else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) (Suc (i + ia))) \\<and>\n       (if ia = 0 then uij\n        else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (Suc (i + ia))) >\\<^sub>t\n       (if Suc ia = 0 then uij\n        else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (Suc (i + Suc ia)))", "by (auto intro!: gr gr_u[OF uij_in] uij_gt_i_plus_3 worst_chain_pred[OF wf_sz t_bad])"], ["proof (state)\nthis:\n  inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>j.\n       if j = 0 then uij\n       else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n             (\\<lambda>t s. size s < size t) (Suc (i + j)))\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "hence \"bad (>\\<^sub>t\\<^sub>g) uij\""], ["proof (prove)\nusing this:\n  inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>j.\n       if j = 0 then uij\n       else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n             (\\<lambda>t s. size s < size t) (Suc (i + j)))\n\ngoal (1 subgoal):\n 1. bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) uij", "unfolding bad_def"], ["proof (prove)\nusing this:\n  inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>j.\n       if j = 0 then uij\n       else worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n             (\\<lambda>t s. size s < size t) (Suc (i + j)))\n\ngoal (1 subgoal):\n 1. \\<exists>f.\n       inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) f \\<and>\n       f 0 = uij", "by fastforce"], ["proof (state)\nthis:\n  bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) uij\n\ngoal (1 subgoal):\n 1. gt_sub\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) uij\n\ngoal (1 subgoal):\n 1. False", "using u_good[OF uij_in]"], ["proof (prove)\nusing this:\n  bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) uij\n  \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) uij\n\ngoal (1 subgoal):\n 1. False", "by sat"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<not> gt_sub\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       gt_diff\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n       gt_same\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) i)\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i))", "thus \"gt_diff (?ff i) (?ff (Suc i)) \\<or> gt_same (?ff i) (?ff (Suc i))\""], ["proof (prove)\nusing this:\n  \\<not> gt_sub\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i))\n\ngoal (1 subgoal):\n 1. gt_diff\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n    gt_same\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i))", "using gt"], ["proof (prove)\nusing this:\n  \\<not> gt_sub\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i)\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i))\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i >\\<^sub>t\n  worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) (Suc i)\n\ngoal (1 subgoal):\n 1. gt_diff\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n    gt_same\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i))", "unfolding gt_iff_sub_diff_same"], ["proof (prove)\nusing this:\n  \\<not> gt_sub\n          (worst_chain\n            (\\<lambda>t s.\n                ground t \\<and>\n                (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n            (\\<lambda>t s. size s < size t) i)\n          (worst_chain\n            (\\<lambda>t s.\n                ground t \\<and>\n                (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n            (\\<lambda>t s. size s < size t) (Suc i))\n  gt_sub\n   (worst_chain\n     (\\<lambda>t s.\n         ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain\n     (\\<lambda>t s.\n         ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n     (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n  gt_diff\n   (worst_chain\n     (\\<lambda>t s.\n         ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain\n     (\\<lambda>t s.\n         ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n     (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n  gt_same\n   (worst_chain\n     (\\<lambda>t s.\n         ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain\n     (\\<lambda>t s.\n         ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n     (\\<lambda>t s. size s < size t) (Suc i))\n\ngoal (1 subgoal):\n 1. gt_diff\n     (worst_chain\n       (\\<lambda>t s.\n           ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain\n       (\\<lambda>t s.\n           ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n       (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n    gt_same\n     (worst_chain\n       (\\<lambda>t s.\n           ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n       (\\<lambda>t s. size s < size t) i)\n     (worst_chain\n       (\\<lambda>t s.\n           ground t \\<and> (gt_sub t s \\<or> gt_diff t s \\<or> gt_same t s))\n       (\\<lambda>t s. size s < size t) (Suc i))", "by sat"], ["proof (state)\nthis:\n  gt_diff\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n  gt_same\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inf_chain (\\<lambda>t s. ground t \\<and> (gt_diff t s \\<or> gt_same t s))\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have \"wf {(s, t). ground s \\<and> ground t \\<and> sym (head t) >\\<^sub>s sym (head s)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(s, t).\n        ground s \\<and>\n        ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}", "using gt_sym_wf"], ["proof (prove)\nusing this:\n  wfP (\\<lambda>f g. g >\\<^sub>s f)\n\ngoal (1 subgoal):\n 1. wf {(s, t).\n        ground s \\<and>\n        ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}", "unfolding wfP_def wf_iff_no_infinite_down_chain"], ["proof (prove)\nusing this:\n  \\<nexists>f. \\<forall>i. (f (Suc i), f i) \\<in> {(f, g). g >\\<^sub>s f}\n\ngoal (1 subgoal):\n 1. \\<nexists>f.\n       \\<forall>i.\n          (f (Suc i), f i)\n          \\<in> {(s, t).\n                 ground s \\<and>\n                 ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}", "by fast"], ["proof (state)\nthis:\n  wf {(s, t).\n      ground s \\<and>\n      ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  wf {(s, t).\n      ground s \\<and>\n      ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have \"{(s, t). ground t \\<and> gt_diff t s}\n      \\<subseteq> {(s, t). ground s \\<and> ground t \\<and> sym (head t) >\\<^sub>s sym (head s)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, t). ground t \\<and> gt_diff t s}\n    \\<subseteq> {(s, t).\n                 ground s \\<and>\n                 ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}", "proof (clarsimp, intro conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk> \\<Longrightarrow> ground a\n 2. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk>\n       \\<Longrightarrow> hd.sym (head b) >\\<^sub>s hd.sym (head a)", "fix s t"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk> \\<Longrightarrow> ground a\n 2. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk>\n       \\<Longrightarrow> hd.sym (head b) >\\<^sub>s hd.sym (head a)", "assume gr_t: \"ground t\" and gt_diff_t_s: \"gt_diff t s\""], ["proof (state)\nthis:\n  ground t\n  gt_diff t s\n\ngoal (2 subgoals):\n 1. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk> \\<Longrightarrow> ground a\n 2. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk>\n       \\<Longrightarrow> hd.sym (head b) >\\<^sub>s hd.sym (head a)", "thus gr_s: \"ground s\""], ["proof (prove)\nusing this:\n  ground t\n  gt_diff t s\n\ngoal (1 subgoal):\n 1. ground s", "using gt_iff_sub_diff_same gt_imp_vars"], ["proof (prove)\nusing this:\n  ground t\n  gt_diff t s\n  (?t >\\<^sub>t ?s) = (gt_sub ?t ?s \\<or> gt_diff ?t ?s \\<or> gt_same ?t ?s)\n  ?t >\\<^sub>t ?s \\<Longrightarrow> vars ?s \\<subseteq> vars ?t\n\ngoal (1 subgoal):\n 1. ground s", "by fastforce"], ["proof (state)\nthis:\n  ground s\n\ngoal (1 subgoal):\n 1. \\<And>a b.\n       \\<lbrakk>ground b; gt_diff b a\\<rbrakk>\n       \\<Longrightarrow> hd.sym (head b) >\\<^sub>s hd.sym (head a)", "show \"sym (head t) >\\<^sub>s sym (head s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd.sym (head t) >\\<^sub>s hd.sym (head s)", "using gt_diff_t_s ground_head[OF gr_s] ground_head[OF gr_t]"], ["proof (prove)\nusing this:\n  gt_diff t s\n  is_Sym (head s)\n  is_Sym (head t)\n\ngoal (1 subgoal):\n 1. hd.sym (head t) >\\<^sub>s hd.sym (head s)", "by (cases; cases \"head s\"; cases \"head t\") (auto simp: gt_hd_def)"], ["proof (state)\nthis:\n  hd.sym (head t) >\\<^sub>s hd.sym (head s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  {(s, t). ground t \\<and> gt_diff t s}\n  \\<subseteq> {(s, t).\n               ground s \\<and>\n               ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  wf {(s, t).\n      ground s \\<and>\n      ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}\n  {(s, t). ground t \\<and> gt_diff t s}\n  \\<subseteq> {(s, t).\n               ground s \\<and>\n               ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}", "have wf_diff: \"wf {(s, t). ground t \\<and> gt_diff t s}\""], ["proof (prove)\nusing this:\n  wf {(s, t).\n      ground s \\<and>\n      ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}\n  {(s, t). ground t \\<and> gt_diff t s}\n  \\<subseteq> {(s, t).\n               ground s \\<and>\n               ground t \\<and> hd.sym (head t) >\\<^sub>s hd.sym (head s)}\n\ngoal (1 subgoal):\n 1. wf {(s, t). ground t \\<and> gt_diff t s}", "by (rule wf_subset)"], ["proof (state)\nthis:\n  wf {(s, t). ground t \\<and> gt_diff t s}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have diff_O_same: \"{(s, t). ground t \\<and> gt_diff t s} O {(s, t). ground t \\<and> gt_same t s}\n      \\<subseteq> {(s, t). ground t \\<and> gt_diff t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, t). ground t \\<and> gt_diff t s} O\n    {(s, t). ground t \\<and> gt_same t s}\n    \\<subseteq> {(s, t). ground t \\<and> gt_diff t s}", "unfolding gt_diff.simps gt_same.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, t).\n     ground t \\<and>\n     (\\<exists>ta sa.\n         t = ta \\<and>\n         s = sa \\<and>\n         head ta >\\<^sub>h\\<^sub>d head sa \\<and>\n         chkvar ta sa \\<and> chksubs (>\\<^sub>t) ta sa)} O\n    {(s, t).\n     ground t \\<and>\n     (\\<exists>ta sa.\n         t = ta \\<and>\n         s = sa \\<and>\n         head ta = head sa \\<and>\n         chksubs (>\\<^sub>t) ta sa \\<and>\n         (\\<forall>f\\<in>local.ground_heads (head ta).\n             extf f (>\\<^sub>t) (args ta) (args sa)))}\n    \\<subseteq> {(s, t).\n                 ground t \\<and>\n                 (\\<exists>ta sa.\n                     t = ta \\<and>\n                     s = sa \\<and>\n                     head ta >\\<^sub>h\\<^sub>d head sa \\<and>\n                     chkvar ta sa \\<and> chksubs (>\\<^sub>t) ta sa)}", "by clarsimp (metis chksubs_def empty_subsetI gt_diff[unfolded chkvar_def] gt_imp_chksubs_gt\n        gt_same gt_trans)"], ["proof (state)\nthis:\n  {(s, t). ground t \\<and> gt_diff t s} O\n  {(s, t). ground t \\<and> gt_same t s}\n  \\<subseteq> {(s, t). ground t \\<and> gt_diff t s}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have diff_same_as_union: \"{(s, t). ground t \\<and> (gt_diff t s \\<or> gt_same t s)} =\n      {(s, t). ground t \\<and> gt_diff t s} \\<union> {(s, t). ground t \\<and> gt_same t s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(s, t). ground t \\<and> (gt_diff t s \\<or> gt_same t s)} =\n    {(s, t). ground t \\<and> gt_diff t s} \\<union>\n    {(s, t). ground t \\<and> gt_same t s}", "by auto"], ["proof (state)\nthis:\n  {(s, t). ground t \\<and> (gt_diff t s \\<or> gt_same t s)} =\n  {(s, t). ground t \\<and> gt_diff t s} \\<union>\n  {(s, t). ground t \\<and> gt_same t s}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "obtain k where bad_same: \"inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s) (\\<lambda>i. ?ff (i + k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>k.\n        inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s)\n         (\\<lambda>i.\n             worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (i + k)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_infinite_down_chain_compatible[OF wf_diff _ diff_O_same, of ?ff] bad_diff_same"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i),\n      worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     \\<in> {(s, t). ground t \\<and> gt_diff t s} \\<union>\n           {(s, t). ground t \\<and> gt_same t s} \\<Longrightarrow>\n  \\<exists>k.\n     \\<forall>i.\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc (i + k)),\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k))\n        \\<in> {(s, t). ground t \\<and> gt_same t s}\n  inf_chain (\\<lambda>t s. ground t \\<and> (gt_diff t s \\<or> gt_same t s))\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s)\n         (\\<lambda>i.\n             worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (i + k)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding inf_chain_def diff_same_as_union[symmetric]"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc i),\n      worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) i)\n     \\<in> {(s, t).\n            ground t \\<and>\n            (gt_diff t s \\<or> gt_same t s)} \\<Longrightarrow>\n  \\<exists>k.\n     \\<forall>i.\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc (i + k)),\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k))\n        \\<in> {(s, t). ground t \\<and> gt_same t s}\n  \\<forall>i.\n     ground\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i) \\<and>\n     (gt_diff\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) (Suc i)) \\<or>\n      gt_same\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) i)\n       (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n         (\\<lambda>t s. size s < size t) (Suc i)))\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        \\<forall>i.\n           ground\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (i + k)) \\<and>\n           gt_same\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (i + k))\n            (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n              (\\<lambda>t s. size s < size t) (Suc i + k)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s)\n   (\\<lambda>i.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "hence hd_sym: \"\\<And>i. is_Sym (head (?ff (i + k)))\""], ["proof (prove)\nusing this:\n  inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s)\n   (\\<lambda>i.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       is_Sym\n        (head\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))", "unfolding inf_chain_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     ground\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k)) \\<and>\n     gt_same\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k))\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (Suc i + k))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       is_Sym\n        (head\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))", "by (simp add: ground_head)"], ["proof (state)\nthis:\n  is_Sym\n   (head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "define f where \"f = sym (head (?ff k))\""], ["proof (state)\nthis:\n  f =\n  hd.sym\n   (head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) k))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have hd_eq_f: \"head (?ff (i + k)) = Sym f\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (i + k)) =\n    Sym f", "proof (induct i)"], ["proof (state)\ngoal (2 subgoals):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (0 + k)) =\n    Sym f\n 2. \\<And>i.\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)) =\n       Sym f \\<Longrightarrow>\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k)) =\n       Sym f", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (0 + k)) =\n    Sym f\n 2. \\<And>i.\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)) =\n       Sym f \\<Longrightarrow>\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k)) =\n       Sym f", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (0 + k)) =\n    Sym f", "by (auto simp: f_def hd.collapse(2)[OF hd_sym, of 0, simplified])"], ["proof (state)\nthis:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (0 + k)) =\n  Sym f\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)) =\n       Sym f \\<Longrightarrow>\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k)) =\n       Sym f", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i.\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)) =\n       Sym f \\<Longrightarrow>\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k)) =\n       Sym f", "case (Suc ia)"], ["proof (state)\nthis:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (ia + k)) =\n  Sym f\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)) =\n       Sym f \\<Longrightarrow>\n       head\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k)) =\n       Sym f", "thus ?case"], ["proof (prove)\nusing this:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (ia + k)) =\n  Sym f\n\ngoal (1 subgoal):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ia + k)) =\n    Sym f", "using bad_same"], ["proof (prove)\nusing this:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (ia + k)) =\n  Sym f\n  inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s)\n   (\\<lambda>i.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k))\n\ngoal (1 subgoal):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ia + k)) =\n    Sym f", "unfolding inf_chain_def gt_same.simps"], ["proof (prove)\nusing this:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (ia + k)) =\n  Sym f\n  \\<forall>i.\n     ground\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k)) \\<and>\n     (\\<exists>t s.\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k) =\n         t \\<and>\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k) =\n         s \\<and>\n         head t = head s \\<and>\n         chksubs (>\\<^sub>t) t s \\<and>\n         (\\<forall>f\\<in>local.ground_heads (head t).\n             extf f (>\\<^sub>t) (args t) (args s)))\n\ngoal (1 subgoal):\n 1. head\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ia + k)) =\n    Sym f", "by simp"], ["proof (state)\nthis:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (Suc ia + k)) =\n  Sym f\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (?i1 + k)) =\n  Sym f\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "let ?gtu = \"\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have \"t \\<in> set (args (?ff i)) \\<Longrightarrow> t \\<in> ?U_of i\" for t i"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set (args\n                  (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                    (\\<lambda>t s. size s < size t) i)) \\<Longrightarrow>\n    t \\<in> (if is_App\n                 (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                   (\\<lambda>t s. size s < size t) i)\n             then {fun (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) i)} \\<union>\n                  set (args\n                        (worst_chain\n                          (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                          (\\<lambda>t s. size s < size t) i))\n             else {})", "unfolding U_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. t \\<in> set (args\n                  (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                    (\\<lambda>t s. size s < size t) i)) \\<Longrightarrow>\n    t \\<in> (if is_App\n                 (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                   (\\<lambda>t s. size s < size t) i)\n             then {fun (worst_chain\n                         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                         (\\<lambda>t s. size s < size t) i)} \\<union>\n                  set (args\n                        (worst_chain\n                          (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                          (\\<lambda>t s. size s < size t) i))\n             else {})", "by (cases \"is_App (?ff i)\", simp_all,\n        metis (lifting) neq_iff size_in_args sub.cases sub_args tm.discI(2))"], ["proof (state)\nthis:\n  ?t1\n  \\<in> set (args\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) ?i1)) \\<Longrightarrow>\n  ?t1\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) ?i1)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) ?i1)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) ?i1))\n         else {})\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  ?t1\n  \\<in> set (args\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) ?i1)) \\<Longrightarrow>\n  ?t1\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) ?i1)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) ?i1)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) ?i1))\n         else {})\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have \"\\<And>i. extf f (>\\<^sub>t) (args (?ff (i + k))) (args (?ff (Suc i + k)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       extf f (>\\<^sub>t)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "using bad_same hd_eq_f"], ["proof (prove)\nusing this:\n  inf_chain (\\<lambda>t s. ground t \\<and> gt_same t s)\n   (\\<lambda>i.\n       worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k))\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (?i1 + k)) =\n  Sym f\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       extf f (>\\<^sub>t)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "unfolding inf_chain_def gt_same.simps"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     ground\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) (i + k)) \\<and>\n     (\\<exists>t s.\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k) =\n         t \\<and>\n         worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (Suc i + k) =\n         s \\<and>\n         head t = head s \\<and>\n         chksubs (>\\<^sub>t) t s \\<and>\n         (\\<forall>f\\<in>local.ground_heads (head t).\n             extf f (>\\<^sub>t) (args t) (args s)))\n  head\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) (?i1 + k)) =\n  Sym f\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       extf f (>\\<^sub>t)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "by auto"], ["proof (state)\nthis:\n  extf f (>\\<^sub>t)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  ?t1\n  \\<in> set (args\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) ?i1)) \\<Longrightarrow>\n  ?t1\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) ?i1)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) ?i1)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) ?i1))\n         else {})\n  extf f (>\\<^sub>t)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))", "have \"\\<And>i. extf f ?gtu (args (?ff (i + k))) (args (?ff (Suc i + k)))\""], ["proof (prove)\nusing this:\n  ?t1\n  \\<in> set (args\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) ?i1)) \\<Longrightarrow>\n  ?t1\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) ?i1)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) ?i1)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) ?i1))\n         else {})\n  extf f (>\\<^sub>t)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "using extf_mono_strong[of _ _ \"(>\\<^sub>t)\" \"\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s\"]"], ["proof (prove)\nusing this:\n  ?t1\n  \\<in> set (args\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) ?i1)) \\<Longrightarrow>\n  ?t1\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) ?i1)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) ?i1)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) ?i1))\n         else {})\n  extf f (>\\<^sub>t)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n  \\<lbrakk>\\<forall>y\\<in>set ?ys.\n              \\<forall>x\\<in>set ?xs.\n                 y >\\<^sub>t x \\<longrightarrow>\n                 y \\<in> U \\<and> y >\\<^sub>t x;\n   extf ?f (>\\<^sub>t) ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> extf ?f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n                     ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "unfolding U_def"], ["proof (prove)\nusing this:\n  ?t1\n  \\<in> set (args\n              (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                (\\<lambda>t s. size s < size t) ?i1)) \\<Longrightarrow>\n  ?t1\n  \\<in> (if is_App\n             (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n               (\\<lambda>t s. size s < size t) ?i1)\n         then {fun (worst_chain\n                     (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                     (\\<lambda>t s. size s < size t) ?i1)} \\<union>\n              set (args\n                    (worst_chain\n                      (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                      (\\<lambda>t s. size s < size t) ?i1))\n         else {})\n  extf f (>\\<^sub>t)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n  \\<lbrakk>\\<forall>y\\<in>set ?ys.\n              \\<forall>x\\<in>set ?xs.\n                 y >\\<^sub>t x \\<longrightarrow>\n                 y \\<in> (\\<Union>i.\n                             if is_App\n                                 (worst_chain\n                                   (\\<lambda>t s.\n ground t \\<and> t >\\<^sub>t s)\n                                   (\\<lambda>t s. size s < size t) i)\n                             then {fun (worst_chain\n   (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n   (\\<lambda>t s. size s < size t) i)} \\<union>\n                                  set (args\n  (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n    (\\<lambda>t s. size s < size t) i))\n                             else {}) \\<and>\n                 y >\\<^sub>t x;\n   extf ?f (>\\<^sub>t) ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> extf ?f\n                     (\\<lambda>t s.\n                         t \\<in> (\\<Union>i.\n                                     if is_App\n   (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n     (\\<lambda>t s. size s < size t) i)\n                                     then {fun\n      (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n        (\\<lambda>t s. size s < size t) i)} \\<union>\n    set (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) i))\n                                     else {}) \\<and>\n                         t >\\<^sub>t s)\n                     ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       extf f\n        (\\<lambda>t s.\n            t \\<in> (\\<Union>i.\n                        if is_App\n                            (worst_chain\n                              (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n                              (\\<lambda>t s. size s < size t) i)\n                        then {fun (worst_chain\n                                    (\\<lambda>t s.\n  ground t \\<and> t >\\<^sub>t s)\n                                    (\\<lambda>t s. size s < size t)\n                                    i)} \\<union>\n                             set (args\n                                   (worst_chain\n                                     (\\<lambda>t s.\n   ground t \\<and> t >\\<^sub>t s)\n                                     (\\<lambda>t s. size s < size t) i))\n                        else {}) \\<and>\n            t >\\<^sub>t s)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "by blast"], ["proof (state)\nthis:\n  extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "hence \"inf_chain (extf f ?gtu) (\\<lambda>i. args (?ff (i + k)))\""], ["proof (prove)\nusing this:\n  extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n\ngoal (1 subgoal):\n 1. inf_chain (extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s))\n     (\\<lambda>i.\n         args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))", "unfolding inf_chain_def"], ["proof (prove)\nusing this:\n  extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (?i1 + k)))\n   (args\n     (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n       (\\<lambda>t s. size s < size t) (Suc ?i1 + k)))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (i + k)))\n        (args\n          (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n            (\\<lambda>t s. size s < size t) (Suc i + k)))", "by blast"], ["proof (state)\nthis:\n  inf_chain (extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s))\n   (\\<lambda>i.\n       args\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "hence nwf_ext: \"\\<not> wfP (\\<lambda>xs ys. extf f ?gtu ys xs)\""], ["proof (prove)\nusing this:\n  inf_chain (extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s))\n   (\\<lambda>i.\n       args\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)))\n\ngoal (1 subgoal):\n 1. \\<not> wfP (\\<lambda>xs ys.\n                   extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) ys\n                    xs)", "unfolding wfP_iff_no_inf_chain"], ["proof (prove)\nusing this:\n  inf_chain (extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s))\n   (\\<lambda>i.\n       args\n        (worst_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n          (\\<lambda>t s. size s < size t) (i + k)))\n\ngoal (1 subgoal):\n 1. \\<not> \\<not> Ex (inf_chain\n                       (extf f\n                         (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)))", "by fast"], ["proof (state)\nthis:\n  \\<not> wfP (\\<lambda>xs ys.\n                 extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) ys\n                  xs)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have gtu_le_gtg: \"?gtu \\<le> (>\\<^sub>t\\<^sub>g)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n    \\<le> (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)", "by (auto intro!: gr_u)"], ["proof (state)\nthis:\n  (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n  \\<le> (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "have \"wfP (\\<lambda>s t. ?gtu t s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t \\<in> U \\<and> t >\\<^sub>t s)", "unfolding wfP_iff_no_inf_chain"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Ex (inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s))", "proof (intro notI, elim exE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        x \\<Longrightarrow>\n       False", "fix f"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        x \\<Longrightarrow>\n       False", "assume bad_f: \"inf_chain ?gtu f\""], ["proof (state)\nthis:\n  inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) f\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        x \\<Longrightarrow>\n       False", "hence bad_f0: \"bad ?gtu (f 0)\""], ["proof (prove)\nusing this:\n  inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) f\n\ngoal (1 subgoal):\n 1. bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)", "by (rule inf_chain_bad)"], ["proof (state)\nthis:\n  bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        x \\<Longrightarrow>\n       False", "have \"f 0 \\<in> U\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f 0 \\<in> U", "using bad_f"], ["proof (prove)\nusing this:\n  inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) f\n\ngoal (1 subgoal):\n 1. f 0 \\<in> U", "unfolding inf_chain_def"], ["proof (prove)\nusing this:\n  \\<forall>i. f i \\<in> U \\<and> f i >\\<^sub>t f (Suc i)\n\ngoal (1 subgoal):\n 1. f 0 \\<in> U", "by blast"], ["proof (state)\nthis:\n  f 0 \\<in> U\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        x \\<Longrightarrow>\n       False", "hence good_f0: \"\\<not> bad ?gtu (f 0)\""], ["proof (prove)\nusing this:\n  f 0 \\<in> U\n\ngoal (1 subgoal):\n 1. \\<not> bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)", "using u_good bad_f inf_chain_bad inf_chain_subset[OF _ gtu_le_gtg]"], ["proof (prove)\nusing this:\n  f 0 \\<in> U\n  ?u \\<in> U \\<Longrightarrow>\n  \\<not> bad (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) ?u\n  inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) f\n  inf_chain ?p ?f \\<Longrightarrow> bad ?p (?f ?i)\n  inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n   ?f \\<Longrightarrow>\n  inf_chain (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s) ?f\n\ngoal (1 subgoal):\n 1. \\<not> bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)", "by blast"], ["proof (state)\nthis:\n  \\<not> bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       inf_chain (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s)\n        x \\<Longrightarrow>\n       False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using bad_f0 good_f0"], ["proof (prove)\nusing this:\n  bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)\n  \\<not> bad (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) (f 0)\n\ngoal (1 subgoal):\n 1. False", "by sat"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wfP (\\<lambda>s t. t \\<in> U \\<and> t >\\<^sub>t s)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "hence wf_ext: \"wfP (\\<lambda>xs ys. extf f ?gtu ys xs)\""], ["proof (prove)\nusing this:\n  wfP (\\<lambda>s t. t \\<in> U \\<and> t >\\<^sub>t s)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) ys xs)", "by (rule ext_wf.wf[OF extf_wf, rule_format])"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) ys xs)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>t s. ground t \\<and> t >\\<^sub>t s)) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using nwf_ext wf_ext"], ["proof (prove)\nusing this:\n  \\<not> wfP (\\<lambda>xs ys.\n                 extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) ys\n                  xs)\n  wfP (\\<lambda>xs ys.\n          extf f (\\<lambda>t s. t \\<in> U \\<and> t >\\<^sub>t s) ys xs)\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wfP (\\<lambda>s t. ground t \\<and> t >\\<^sub>t s)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "let ?subst = \"subst grounding_\\<rho>\""], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "have \"wfP (\\<lambda>s t. ?subst t >\\<^sub>t\\<^sub>g ?subst s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t.\n            ground (subst grounding_\\<rho> t) \\<and>\n            subst grounding_\\<rho> t >\\<^sub>t subst grounding_\\<rho> s)", "by (rule wfP_app[OF ground_wfP])"], ["proof (state)\nthis:\n  wfP (\\<lambda>s t.\n          ground (subst grounding_\\<rho> t) \\<and>\n          subst grounding_\\<rho> t >\\<^sub>t subst grounding_\\<rho> s)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "hence \"wfP (\\<lambda>s t. ?subst t >\\<^sub>t ?subst s)\""], ["proof (prove)\nusing this:\n  wfP (\\<lambda>s t.\n          ground (subst grounding_\\<rho> t) \\<and>\n          subst grounding_\\<rho> t >\\<^sub>t subst grounding_\\<rho> s)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t.\n            subst grounding_\\<rho> t >\\<^sub>t subst grounding_\\<rho> s)", "by (simp add: ground_grounding_\\<rho>)"], ["proof (state)\nthis:\n  wfP (\\<lambda>s t.\n          subst grounding_\\<rho> t >\\<^sub>t subst grounding_\\<rho> s)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "thus ?thesis"], ["proof (prove)\nusing this:\n  wfP (\\<lambda>s t.\n          subst grounding_\\<rho> t >\\<^sub>t subst grounding_\\<rho> s)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>s t. t >\\<^sub>t s)", "by (auto intro: wfP_subset gt_subst[OF wary_grounding_\\<rho>])"], ["proof (state)\nthis:\n  wfP (\\<lambda>s t. t >\\<^sub>t s)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}