{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs/Infinite_Chain.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs", "problem_names": ["lemma wfP_iff_no_inf_chain: \"wfP (\\<lambda>x y. p y x) \\<longleftrightarrow> (\\<nexists>f. inf_chain f)\"", "lemma inf_chain_offset: \"inf_chain f \\<Longrightarrow> inf_chain (\\<lambda>j. f (j + i))\"", "lemma inf_chain_bad:\n  assumes bad_f: \"inf_chain f\"\n  shows \"bad (f i)\"", "lemma\n  bad_worst_chain_0: \"bad (worst_chain 0)\" and\n  min_worst_chain_0: \"\\<not> gt (worst_chain 0) x\"", "lemma\n  bad_worst_chain_Suc: \"bad (worst_chain (Suc i))\" and\n  worst_chain_pred: \"p (worst_chain i) (worst_chain (Suc i))\" and\n  min_worst_chain_Suc: \"p (worst_chain i) x \\<Longrightarrow> \\<not> gt (worst_chain (Suc i)) x\"", "lemma bad_worst_chain: \"bad (worst_chain i)\"", "lemma worst_chain_bad: \"inf_chain worst_chain\"", "lemma worst_chain_not_gt: \"\\<not> gt (worst_chain i) (worst_chain (Suc i))\" for i", "lemma inf_chain_subset: \"inf_chain p f \\<Longrightarrow> p \\<le> q \\<Longrightarrow> inf_chain q f\""], "translations": [["", "lemma wfP_iff_no_inf_chain: \"wfP (\\<lambda>x y. p y x) \\<longleftrightarrow> (\\<nexists>f. inf_chain f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. p y x) = (\\<not> Ex local.inf_chain)", "unfolding wfP_def wf_iff_no_infinite_down_chain inf_chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<nexists>f. \\<forall>i. (f (Suc i), f i) \\<in> {(x, y). p y x}) =\n    (\\<nexists>f. \\<forall>i. p (f i) (f (Suc i)))", "by simp"], ["", "lemma inf_chain_offset: \"inf_chain f \\<Longrightarrow> inf_chain (\\<lambda>j. f (j + i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inf_chain f \\<Longrightarrow>\n    local.inf_chain (\\<lambda>j. f (j + i))", "unfolding inf_chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. p (f i) (f (Suc i)) \\<Longrightarrow>\n    \\<forall>ia. p (f (ia + i)) (f (Suc ia + i))", "by simp"], ["", "definition bad :: \"'a \\<Rightarrow> bool\" where\n  \"bad x \\<longleftrightarrow> (\\<exists>f. inf_chain f \\<and> f 0 = x)\""], ["", "lemma inf_chain_bad:\n  assumes bad_f: \"inf_chain f\"\n  shows \"bad (f i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (f i)", "unfolding bad_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>fa. local.inf_chain fa \\<and> fa 0 = f i", "by (rule exI[of _ \"\\<lambda>j. f (j + i)\"]) (simp add: inf_chain_offset[OF bad_f])"], ["", "context\n  fixes gt :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  assumes wf: \"wf {(x, y). gt y x}\"\nbegin"], ["", "primrec worst_chain :: \"nat \\<Rightarrow> 'a\" where\n  \"worst_chain 0 = (SOME x. bad x \\<and> (\\<forall>y. bad y \\<longrightarrow> \\<not> gt x y))\"\n| \"worst_chain (Suc i) = (SOME x. bad x \\<and> p (worst_chain i) x \\<and>\n     (\\<forall>y. bad y \\<and> p (worst_chain i) y \\<longrightarrow> \\<not> gt x y))\""], ["", "declare worst_chain.simps[simp del]"], ["", "context\n  fixes x :: 'a\n  assumes x_bad: \"bad x\"\nbegin"], ["", "lemma\n  bad_worst_chain_0: \"bad (worst_chain 0)\" and\n  min_worst_chain_0: \"\\<not> gt (worst_chain 0) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain 0) &&& \\<not> gt (local.worst_chain 0) x", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. local.bad (local.worst_chain 0)\n 2. \\<not> gt (local.worst_chain 0) x", "obtain y where \"bad y \\<and> (\\<forall>z. bad z \\<longrightarrow> \\<not> gt y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        local.bad y \\<and>\n        (\\<forall>z.\n            local.bad z \\<longrightarrow> \\<not> gt y z) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_exists_minimal[OF wf, of bad, OF x_bad]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     local.bad x \\<and>\n     (\\<forall>y.\n         (?f y, ?f x) \\<in> {(x, y). gt y x} \\<longrightarrow>\n         \\<not> local.bad y)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        local.bad y \\<and>\n        (\\<forall>z.\n            local.bad z \\<longrightarrow> \\<not> gt y z) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  local.bad y \\<and>\n  (\\<forall>z. local.bad z \\<longrightarrow> \\<not> gt y z)\n\ngoal (2 subgoals):\n 1. local.bad (local.worst_chain 0)\n 2. \\<not> gt (local.worst_chain 0) x", "hence \"bad (worst_chain 0) \\<and> (\\<forall>z. bad z \\<longrightarrow> \\<not> gt (worst_chain 0) z)\""], ["proof (prove)\nusing this:\n  local.bad y \\<and>\n  (\\<forall>z. local.bad z \\<longrightarrow> \\<not> gt y z)\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain 0) \\<and>\n    (\\<forall>z.\n        local.bad z \\<longrightarrow> \\<not> gt (local.worst_chain 0) z)", "unfolding worst_chain.simps"], ["proof (prove)\nusing this:\n  local.bad y \\<and>\n  (\\<forall>z. local.bad z \\<longrightarrow> \\<not> gt y z)\n\ngoal (1 subgoal):\n 1. local.bad\n     (SOME x.\n         local.bad x \\<and>\n         (\\<forall>y. local.bad y \\<longrightarrow> \\<not> gt x y)) \\<and>\n    (\\<forall>z.\n        local.bad z \\<longrightarrow>\n        \\<not> gt (SOME x.\n                      local.bad x \\<and>\n                      (\\<forall>y.\n                          local.bad y \\<longrightarrow> \\<not> gt x y))\n                z)", "by (rule someI)"], ["proof (state)\nthis:\n  local.bad (local.worst_chain 0) \\<and>\n  (\\<forall>z.\n      local.bad z \\<longrightarrow> \\<not> gt (local.worst_chain 0) z)\n\ngoal (2 subgoals):\n 1. local.bad (local.worst_chain 0)\n 2. \\<not> gt (local.worst_chain 0) x", "thus \"bad (worst_chain 0)\" and \"\\<not> gt (worst_chain 0) x\""], ["proof (prove)\nusing this:\n  local.bad (local.worst_chain 0) \\<and>\n  (\\<forall>z.\n      local.bad z \\<longrightarrow> \\<not> gt (local.worst_chain 0) z)\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain 0) &&& \\<not> gt (local.worst_chain 0) x", "using x_bad"], ["proof (prove)\nusing this:\n  local.bad (local.worst_chain 0) \\<and>\n  (\\<forall>z.\n      local.bad z \\<longrightarrow> \\<not> gt (local.worst_chain 0) z)\n  local.bad x\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain 0) &&& \\<not> gt (local.worst_chain 0) x", "by blast+"], ["proof (state)\nthis:\n  local.bad (local.worst_chain 0)\n  \\<not> gt (local.worst_chain 0) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma\n  bad_worst_chain_Suc: \"bad (worst_chain (Suc i))\" and\n  worst_chain_pred: \"p (worst_chain i) (worst_chain (Suc i))\" and\n  min_worst_chain_Suc: \"p (worst_chain i) x \\<Longrightarrow> \\<not> gt (worst_chain (Suc i)) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain (Suc i)) &&&\n    p (local.worst_chain i) (local.worst_chain (Suc i)) &&&\n    (p (local.worst_chain i) x \\<Longrightarrow>\n     \\<not> gt (local.worst_chain (Suc i)) x)", "proof (induct i rule: less_induct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "case (less i)"], ["proof (state)\nthis:\n  ?y < i \\<Longrightarrow> local.bad (local.worst_chain (Suc ?y))\n  ?y < i \\<Longrightarrow>\n  p (local.worst_chain ?y) (local.worst_chain (Suc ?y))\n  \\<lbrakk>?y < i; p (local.worst_chain ?y) x\\<rbrakk>\n  \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc ?y)) x\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "have \"bad (worst_chain i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain i)", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> local.bad (local.worst_chain i)\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> local.bad (local.worst_chain i)", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow> local.bad (local.worst_chain i)\n 2. \\<And>nat. i = Suc nat \\<Longrightarrow> local.bad (local.worst_chain i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = 0\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain i)", "using bad_worst_chain_0"], ["proof (prove)\nusing this:\n  i = 0\n  local.bad (local.worst_chain 0)\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain i)", "by simp"], ["proof (state)\nthis:\n  local.bad (local.worst_chain i)\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> local.bad (local.worst_chain i)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> local.bad (local.worst_chain i)", "case (Suc j)"], ["proof (state)\nthis:\n  i = Suc j\n\ngoal (1 subgoal):\n 1. \\<And>nat. i = Suc nat \\<Longrightarrow> local.bad (local.worst_chain i)", "thus ?thesis"], ["proof (prove)\nusing this:\n  i = Suc j\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain i)", "using less(1)"], ["proof (prove)\nusing this:\n  i = Suc j\n  ?y < i \\<Longrightarrow> local.bad (local.worst_chain (Suc ?y))\n\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain i)", "by blast"], ["proof (state)\nthis:\n  local.bad (local.worst_chain i)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  local.bad (local.worst_chain i)\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "then"], ["proof (chain)\npicking this:\n  local.bad (local.worst_chain i)", "obtain fa where fa_bad: \"inf_chain fa\" and fa_0: \"fa 0 = worst_chain i\""], ["proof (prove)\nusing this:\n  local.bad (local.worst_chain i)\n\ngoal (1 subgoal):\n 1. (\\<And>fa.\n        \\<lbrakk>local.inf_chain fa; fa 0 = local.worst_chain i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding bad_def"], ["proof (prove)\nusing this:\n  \\<exists>f. local.inf_chain f \\<and> f 0 = local.worst_chain i\n\ngoal (1 subgoal):\n 1. (\\<And>fa.\n        \\<lbrakk>local.inf_chain fa; fa 0 = local.worst_chain i\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.inf_chain fa\n  fa 0 = local.worst_chain i\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "have \"\\<exists>s0. bad s0 \\<and> p (worst_chain i) s0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s0. local.bad s0 \\<and> p (local.worst_chain i) s0", "proof (intro exI conjI)"], ["proof (state)\ngoal (2 subgoals):\n 1. local.bad ?s0.0\n 2. p (local.worst_chain i) ?s0.0", "let ?y0 = \"fa (Suc 0)\""], ["proof (state)\ngoal (2 subgoals):\n 1. local.bad ?s0.0\n 2. p (local.worst_chain i) ?s0.0", "show \"bad ?y0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (fa (Suc 0))", "unfolding bad_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>f. local.inf_chain f \\<and> f 0 = fa (Suc 0)", "by (auto intro: exI[of _ \"\\<lambda>i. fa (Suc i)\"] inf_chain_offset[OF fa_bad])"], ["proof (state)\nthis:\n  local.bad (fa (Suc 0))\n\ngoal (1 subgoal):\n 1. p (local.worst_chain i) (fa (Suc 0))", "show \"p (worst_chain i) ?y0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p (local.worst_chain i) (fa (Suc 0))", "using fa_bad[unfolded inf_chain_def] fa_0"], ["proof (prove)\nusing this:\n  \\<forall>i. p (fa i) (fa (Suc i))\n  fa 0 = local.worst_chain i\n\ngoal (1 subgoal):\n 1. p (local.worst_chain i) (fa (Suc 0))", "by metis"], ["proof (state)\nthis:\n  p (local.worst_chain i) (fa (Suc 0))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s0. local.bad s0 \\<and> p (local.worst_chain i) s0\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "then"], ["proof (chain)\npicking this:\n  \\<exists>s0. local.bad s0 \\<and> p (local.worst_chain i) s0", "obtain y0 where y0: \"bad y0 \\<and> p (worst_chain i) y0\""], ["proof (prove)\nusing this:\n  \\<exists>s0. local.bad s0 \\<and> p (local.worst_chain i) s0\n\ngoal (1 subgoal):\n 1. (\\<And>y0.\n        local.bad y0 \\<and> p (local.worst_chain i) y0 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  local.bad y0 \\<and> p (local.worst_chain i) y0\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "obtain y1 where\n    y1: \"bad y1 \\<and> p (worst_chain i) y1 \\<and> (\\<forall>z. bad z \\<and> p (worst_chain i) z \\<longrightarrow> \\<not> gt y1 z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        local.bad y1 \\<and>\n        p (local.worst_chain i) y1 \\<and>\n        (\\<forall>z.\n            local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n            \\<not> gt y1 z) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using wf_exists_minimal[OF wf, of \"\\<lambda>y. bad y \\<and> p (worst_chain i) y\", OF y0]"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     (local.bad x \\<and> p (local.worst_chain i) x) \\<and>\n     (\\<forall>y.\n         (?f y, ?f x) \\<in> {(x, y). gt y x} \\<longrightarrow>\n         \\<not> (local.bad y \\<and> p (local.worst_chain i) y))\n\ngoal (1 subgoal):\n 1. (\\<And>y1.\n        local.bad y1 \\<and>\n        p (local.worst_chain i) y1 \\<and>\n        (\\<forall>z.\n            local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n            \\<not> gt y1 z) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  local.bad y1 \\<and>\n  p (local.worst_chain i) y1 \\<and>\n  (\\<forall>z.\n      local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n      \\<not> gt y1 z)\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "let ?y = \"worst_chain (Suc i)\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "have conj: \"bad ?y \\<and> p (worst_chain i) ?y \\<and> (\\<forall>z. bad z \\<and> p (worst_chain i) z \\<longrightarrow> \\<not> gt ?y z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain (Suc i)) \\<and>\n    p (local.worst_chain i) (local.worst_chain (Suc i)) \\<and>\n    (\\<forall>z.\n        local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n        \\<not> gt (local.worst_chain (Suc i)) z)", "unfolding worst_chain.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad\n     (SOME x.\n         local.bad x \\<and>\n         p (local.worst_chain i) x \\<and>\n         (\\<forall>y.\n             local.bad y \\<and> p (local.worst_chain i) y \\<longrightarrow>\n             \\<not> gt x y)) \\<and>\n    p (local.worst_chain i)\n     (SOME x.\n         local.bad x \\<and>\n         p (local.worst_chain i) x \\<and>\n         (\\<forall>y.\n             local.bad y \\<and> p (local.worst_chain i) y \\<longrightarrow>\n             \\<not> gt x y)) \\<and>\n    (\\<forall>z.\n        local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n        \\<not> gt (SOME x.\n                      local.bad x \\<and>\n                      p (local.worst_chain i) x \\<and>\n                      (\\<forall>y.\n                          local.bad y \\<and>\n                          p (local.worst_chain i) y \\<longrightarrow>\n                          \\<not> gt x y))\n                z)", "using y1"], ["proof (prove)\nusing this:\n  local.bad y1 \\<and>\n  p (local.worst_chain i) y1 \\<and>\n  (\\<forall>z.\n      local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n      \\<not> gt y1 z)\n\ngoal (1 subgoal):\n 1. local.bad\n     (SOME x.\n         local.bad x \\<and>\n         p (local.worst_chain i) x \\<and>\n         (\\<forall>y.\n             local.bad y \\<and> p (local.worst_chain i) y \\<longrightarrow>\n             \\<not> gt x y)) \\<and>\n    p (local.worst_chain i)\n     (SOME x.\n         local.bad x \\<and>\n         p (local.worst_chain i) x \\<and>\n         (\\<forall>y.\n             local.bad y \\<and> p (local.worst_chain i) y \\<longrightarrow>\n             \\<not> gt x y)) \\<and>\n    (\\<forall>z.\n        local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n        \\<not> gt (SOME x.\n                      local.bad x \\<and>\n                      p (local.worst_chain i) x \\<and>\n                      (\\<forall>y.\n                          local.bad y \\<and>\n                          p (local.worst_chain i) y \\<longrightarrow>\n                          \\<not> gt x y))\n                z)", "by (rule someI)"], ["proof (state)\nthis:\n  local.bad (local.worst_chain (Suc i)) \\<and>\n  p (local.worst_chain i) (local.worst_chain (Suc i)) \\<and>\n  (\\<forall>z.\n      local.bad z \\<and> p (local.worst_chain i) z \\<longrightarrow>\n      \\<not> gt (local.worst_chain (Suc i)) z)\n\ngoal (3 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> local.bad (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 3. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "show \"bad ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain (Suc i))", "by (rule conj[THEN conjunct1])"], ["proof (state)\nthis:\n  local.bad (local.worst_chain (Suc i))\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y))\n                                     x\\<rbrakk>\n       \\<Longrightarrow> p (local.worst_chain xa)\n                          (local.worst_chain (Suc xa))\n 2. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "show \"p (worst_chain i) ?y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p (local.worst_chain i) (local.worst_chain (Suc i))", "by (rule conj[THEN conjunct2, THEN conjunct1])"], ["proof (state)\nthis:\n  p (local.worst_chain i) (local.worst_chain (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>\\<And>y.\n                   y < xa \\<Longrightarrow>\n                   local.bad (local.worst_chain (Suc y));\n        \\<And>y.\n           y < xa \\<Longrightarrow>\n           p (local.worst_chain y) (local.worst_chain (Suc y));\n        \\<And>y.\n           \\<lbrakk>y < xa; p (local.worst_chain y) x\\<rbrakk>\n           \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc y)) x;\n        p (local.worst_chain xa) x\\<rbrakk>\n       \\<Longrightarrow> \\<not> gt (local.worst_chain (Suc xa)) x", "show \"p (worst_chain i) x \\<Longrightarrow> \\<not> gt ?y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p (local.worst_chain i) x \\<Longrightarrow>\n    \\<not> gt (local.worst_chain (Suc i)) x", "using x_bad conj[THEN conjunct2, THEN conjunct2, rule_format]"], ["proof (prove)\nusing this:\n  local.bad x\n  local.bad ?z \\<and> p (local.worst_chain i) ?z \\<Longrightarrow>\n  \\<not> gt (local.worst_chain (Suc i)) ?z\n\ngoal (1 subgoal):\n 1. p (local.worst_chain i) x \\<Longrightarrow>\n    \\<not> gt (local.worst_chain (Suc i)) x", "by meson"], ["proof (state)\nthis:\n  p (local.worst_chain i) x \\<Longrightarrow>\n  \\<not> gt (local.worst_chain (Suc i)) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bad_worst_chain: \"bad (worst_chain i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.bad (local.worst_chain i)", "by (cases i) (auto intro: bad_worst_chain_0 bad_worst_chain_Suc)"], ["", "lemma worst_chain_bad: \"inf_chain worst_chain\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.inf_chain local.worst_chain", "unfolding inf_chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i. p (local.worst_chain i) (local.worst_chain (Suc i))", "using worst_chain_pred"], ["proof (prove)\nusing this:\n  p (local.worst_chain ?i) (local.worst_chain (Suc ?i))\n\ngoal (1 subgoal):\n 1. \\<forall>i. p (local.worst_chain i) (local.worst_chain (Suc i))", "by metis"], ["", "end"], ["", "context\n  fixes x :: 'a\n  assumes\n    x_bad: \"bad x\" and\n    p_trans: \"\\<And>z y x. p z y \\<Longrightarrow> p y x \\<Longrightarrow> p z x\"\nbegin"], ["", "lemma worst_chain_not_gt: \"\\<not> gt (worst_chain i) (worst_chain (Suc i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "proof (cases i)"], ["proof (state)\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "case 0"], ["proof (state)\nthis:\n  i = 0\n\ngoal (2 subgoals):\n 1. i = 0 \\<Longrightarrow>\n    \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))\n 2. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "unfolding 0"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt (local.worst_chain 0) (local.worst_chain (Suc 0))", "by (rule min_worst_chain_0[OF inf_chain_bad[OF worst_chain_bad[OF x_bad]]])"], ["proof (state)\nthis:\n  \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "case Suc"], ["proof (state)\nthis:\n  i = Suc nat_\n\ngoal (1 subgoal):\n 1. \\<And>nat.\n       i = Suc nat \\<Longrightarrow>\n       \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))", "unfolding Suc"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt (local.worst_chain (Suc nat_))\n            (local.worst_chain (Suc (Suc nat_)))", "by (rule min_worst_chain_Suc[OF inf_chain_bad[OF worst_chain_bad[OF x_bad]]])\n    (rule p_trans[OF worst_chain_pred[OF x_bad] worst_chain_pred[OF x_bad]])"], ["proof (state)\nthis:\n  \\<not> gt (local.worst_chain i) (local.worst_chain (Suc i))\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "end"], ["", "lemma inf_chain_subset: \"inf_chain p f \\<Longrightarrow> p \\<le> q \\<Longrightarrow> inf_chain q f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inf_chain p f; p \\<le> q\\<rbrakk>\n    \\<Longrightarrow> inf_chain q f", "unfolding inf_chain_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>i. p (f i) (f (Suc i)); p \\<le> q\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i. q (f i) (f (Suc i))", "by blast"], ["", "hide_fact (open) bad_worst_chain_0 bad_worst_chain_Suc"], ["", "end"]]}