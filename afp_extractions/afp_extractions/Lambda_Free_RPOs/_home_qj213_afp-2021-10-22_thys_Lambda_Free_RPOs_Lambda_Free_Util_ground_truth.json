{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs/Lambda_Free_Util.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs", "problem_names": ["lemma finite_set_fold_singleton[simp]: \"Finite_Set.fold f z {x} = f x z\"", "lemma funpow_lesseq_iter:\n  fixes f :: \"('a::order) \\<Rightarrow> 'a\"\n  assumes mono: \"\\<And>k. k \\<le> f k\" and m_le_n: \"m \\<le> n\"\n  shows \"(f ^^ m) k \\<le> (f ^^ n) k\"", "lemma funpow_less_iter:\n  fixes f :: \"('a::order) \\<Rightarrow> 'a\"\n  assumes mono: \"\\<And>k. k < f k\" and m_lt_n: \"m < n\"\n  shows \"(f ^^ m) k < (f ^^ n) k\"", "lemma Least_eq[simp]: \"(LEAST y. y = x) = x\" and \"(LEAST y. x = y) = x\" for x :: \"'a::order\"", "lemma Least_in_nonempty_set_imp_ex:\n  fixes f :: \"'b \\<Rightarrow> ('a::wellorder)\"\n  assumes\n    A_nemp: \"A \\<noteq> {}\" and\n    P_least: \"P (LEAST y. \\<exists>x \\<in> A. y = f x)\"\n  shows \"\\<exists>x \\<in> A. P (f x)\"", "lemma Least_eq_0_enat: \"P 0 \\<Longrightarrow> (LEAST x :: enat. P x) = 0\"", "lemma irrefl_trans_imp_antisym: \"irrefl r \\<Longrightarrow> trans r \\<Longrightarrow> antisym r\"", "lemma irreflp_transp_imp_antisymP: \"irreflp p \\<Longrightarrow> transp p \\<Longrightarrow> antisymp p\"", "lemma finite_nonempty_ex_succ_imp_cyclic:\n  assumes\n    fin: \"finite A\" and\n    nemp: \"A \\<noteq> {}\" and\n    ex_y: \"\\<forall>x \\<in> A. \\<exists>y \\<in> A. (y, x) \\<in> r\"\n  shows \"\\<not> acyclic r\"", "lemma relcomp_subset_left_imp_relcomp_trancl_subset_left:\n  assumes sub: \"R O S \\<subseteq> R\"\n  shows \"R O S\\<^sup>* \\<subseteq> R\"", "lemma f_chain_in_rtrancl:\n  assumes m_le_n: \"m \\<le> n\" and f_chain: \"\\<forall>i \\<in> {m..<n}. (f i, f (Suc i)) \\<in> R\"\n  shows \"(f m, f n) \\<in> R\\<^sup>*\"", "lemma f_rev_chain_in_rtrancl:\n  assumes m_le_n: \"m \\<le> n\" and f_chain: \"\\<forall>i \\<in> {m..<n}. (f (Suc i), f i) \\<in> R\"\n  shows \"(f n, f m) \\<in> R\\<^sup>*\"", "lemma wf_app: \"wf r \\<Longrightarrow> wf {(x, y). (f x, f y) \\<in> r}\"", "lemma wfP_app: \"wfP p \\<Longrightarrow> wfP (\\<lambda>x y. p (f x) (f y))\"", "lemma wf_exists_minimal:\n  assumes wf: \"wf r\" and Q: \"Q x\"\n  shows \"\\<exists>x. Q x \\<and> (\\<forall>y. (f y, f x) \\<in> r \\<longrightarrow> \\<not> Q y)\"", "lemma wfP_exists_minimal:\n  assumes wf: \"wfP p\" and Q: \"Q x\"\n  shows \"\\<exists>x. Q x \\<and> (\\<forall>y. p (f y) (f x) \\<longrightarrow> \\<not> Q y)\"", "lemma finite_irrefl_trans_imp_wf: \"finite r \\<Longrightarrow> irrefl r \\<Longrightarrow> trans r \\<Longrightarrow> wf r\"", "lemma finite_irreflp_transp_imp_wfp:\n  \"finite {(x, y). p x y} \\<Longrightarrow> irreflp p \\<Longrightarrow> transp p \\<Longrightarrow> wfP p\"", "lemma wf_infinite_down_chain_compatible:\n  assumes\n    wf_R: \"wf R\" and\n    inf_chain_RS: \"\\<forall>i. (f (Suc i), f i) \\<in> R \\<union> S\" and\n    O_subset: \"R O S \\<subseteq> R\"\n  shows \"\\<exists>k. \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S\"", "lemma (in wellorder) exists_minimal:\n  fixes x :: 'a\n  assumes \"P x\"\n  shows \"\\<exists>x. P x \\<and> (\\<forall>y. P y \\<longrightarrow> y \\<ge> x)\"", "lemma rev_induct2[consumes 1, case_names Nil snoc]:\n  \"length xs = length ys \\<Longrightarrow> P [] [] \\<Longrightarrow>\n   (\\<And>x xs y ys. length xs = length ys \\<Longrightarrow> P xs ys \\<Longrightarrow> P (xs @ [x]) (ys @ [y])) \\<Longrightarrow> P xs ys\"", "lemma hd_in_set: \"length xs \\<noteq> 0 \\<Longrightarrow> hd xs \\<in> set xs\"", "lemma in_lists_iff_set: \"xs \\<in> lists A \\<longleftrightarrow> set xs \\<subseteq> A\"", "lemma butlast_append_Cons[simp]: \"butlast (xs @ y # ys) = xs @ butlast (y # ys)\"", "lemma rev_in_lists[simp]: \"rev xs \\<in> lists A \\<longleftrightarrow> xs \\<in> lists A\"", "lemma hd_le_sum_list:\n  fixes xs :: \"'a::ordered_ab_semigroup_monoid_add_imp_le list\"\n  assumes \"xs \\<noteq> []\" and \"\\<forall>i < length xs. xs ! i \\<ge> 0\"\n  shows \"hd xs \\<le> sum_list xs\"", "lemma sum_list_ge_length_times:\n  fixes a :: \"'a::{ordered_ab_semigroup_add,semiring_1}\"\n  assumes \"\\<forall>i < length xs. xs ! i \\<ge> a\"\n  shows \"sum_list xs \\<ge> of_nat (length xs) * a\"", "lemma prod_list_nonneg:\n  fixes xs :: \"('a :: {ordered_semiring_0,linordered_nonzero_semiring}) list\"\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> x \\<ge> 0\"\n  shows \"prod_list xs \\<ge> 0\"", "lemma zip_append_0_upt:\n  \"zip (xs @ ys) [0..<length xs + length ys] =\n   zip xs [0..<length xs] @ zip ys [length xs..<length xs + length ys]\"", "lemma zip_eq_butlast_last:\n  assumes len_gt0: \"length xs > 0\" and len_eq: \"length xs = length ys\"\n  shows \"zip xs ys = zip (butlast xs) (butlast ys) @ [(last xs, last ys)]\"", "lemma the_enat_0[simp]: \"the_enat 0 = 0\"", "lemma the_enat_1[simp]: \"the_enat 1 = 1\"", "lemma enat_le_minus_1_imp_lt: \"m \\<le> n - 1 \\<Longrightarrow> n \\<noteq> \\<infinity> \\<Longrightarrow> n \\<noteq> 0 \\<Longrightarrow> m < n\" for m n :: enat", "lemma enat_diff_diff_eq: \"k - m - n = k - (m + n)\" for k m n :: enat", "lemma enat_sub_add_same[intro]: \"n \\<le> m \\<Longrightarrow> m = m - n + n\" for m n :: enat", "lemma enat_the_enat_iden[simp]: \"n \\<noteq> \\<infinity> \\<Longrightarrow> enat (the_enat n) = n\"", "lemma the_enat_minus_nat: \"m \\<noteq> \\<infinity> \\<Longrightarrow> the_enat (m - enat n) = the_enat m - n\"", "lemma enat_the_enat_le: \"enat (the_enat x) \\<le> x\"", "lemma enat_the_enat_minus_le: \"enat (the_enat (x - y)) \\<le> x\"", "lemma enat_le_imp_minus_le: \"k \\<le> m \\<Longrightarrow> k - n \\<le> m\" for k m n :: enat", "lemma add_diff_assoc2_enat: \"m \\<ge> n \\<Longrightarrow> m - n + p = m + p - n\" for m n p :: enat", "lemma enat_mult_minus_distrib: \"enat x * (y - z) = enat x * y - enat x * z\"", "lemma add_mset_lt_left_lt: \"a < b \\<Longrightarrow> add_mset a A < add_mset b A\"", "lemma add_mset_le_left_le: \"a \\<le> b \\<Longrightarrow> add_mset a A \\<le> add_mset b A\" for a :: \"'a :: linorder\"", "lemma add_mset_lt_right_lt: \"A < B \\<Longrightarrow> add_mset a A < add_mset a B\"", "lemma add_mset_le_right_le: \"A \\<le> B \\<Longrightarrow> add_mset a A \\<le> add_mset a B\"", "lemma add_mset_lt_lt_lt:\n  assumes a_lt_b: \"a < b\" and A_le_B: \"A < B\"\n  shows \"add_mset a A < add_mset b B\"", "lemma add_mset_lt_lt_le: \"a < b \\<Longrightarrow> A \\<le> B \\<Longrightarrow> add_mset a A < add_mset b B\"", "lemma add_mset_lt_le_lt: \"a \\<le> b \\<Longrightarrow> A < B \\<Longrightarrow> add_mset a A < add_mset b B\" for a :: \"'a :: linorder\"", "lemma add_mset_le_le_le:\n  fixes a :: \"'a :: linorder\"\n  assumes a_le_b: \"a \\<le> b\" and A_le_B: \"A \\<le> B\"\n  shows \"add_mset a A \\<le> add_mset b B\"", "lemma nonempty_subseteq_mset_eq_singleton: \"M \\<noteq> {#} \\<Longrightarrow> M \\<subseteq># {#x#} \\<Longrightarrow> M = {#x#}\"", "lemma nonempty_subseteq_mset_iff_singleton: \"(M \\<noteq> {#} \\<and> M \\<subseteq># {#x#} \\<and> P) \\<longleftrightarrow> M = {#x#} \\<and> P\"", "lemma count_gt_imp_in_mset[intro]: \"count M x > n \\<Longrightarrow> x \\<in># M\"", "lemma size_lt_imp_ex_count_lt: \"size M < size N \\<Longrightarrow> \\<exists>x \\<in># N. count M x < count N x\"", "lemma filter_filter_mset[simp]: \"{#x \\<in># {#x \\<in># M. Q x#}. P x#} = {#x \\<in># M. P x \\<and> Q x#}\"", "lemma size_filter_unsat_elem:\n  assumes \"x \\<in># M\" and \"\\<not> P x\"\n  shows \"size {#x \\<in># M. P x#} < size M\"", "lemma size_filter_ne_elem: \"x \\<in># M \\<Longrightarrow> size {#y \\<in># M. y \\<noteq> x#} < size M\"", "lemma size_eq_ex_count_lt:\n  assumes\n    sz_m_eq_n: \"size M = size N\" and\n    m_eq_n: \"M \\<noteq> N\"\n  shows \"\\<exists>x. count M x < count N x\"", "lemma count_image_mset_lt_imp_lt_raw:\n  assumes\n    \"finite A\" and\n    \"A = set_mset M \\<union> set_mset N\" and\n    \"count (image_mset f M) b < count (image_mset f N) b\"\n  shows \"\\<exists>x. f x = b \\<and> count M x < count N x\"", "lemma count_image_mset_lt_imp_lt:\n  assumes cnt_b: \"count (image_mset f M) b < count (image_mset f N) b\"\n  shows \"\\<exists>x. f x = b \\<and> count M x < count N x\"", "lemma count_image_mset_le_imp_lt_raw:\n  assumes\n    \"finite A\" and\n    \"A = set_mset M \\<union> set_mset N\" and\n    \"count (image_mset f M) (f a) + count N a < count (image_mset f N) (f a) + count M a\"\n  shows \"\\<exists>b. f b = f a \\<and> count M b < count N b\"", "lemma count_image_mset_le_imp_lt:\n  assumes\n    \"count (image_mset f M) (f a) \\<le> count (image_mset f N) (f a)\" and\n    \"count M a > count N a\"\n  shows \"\\<exists>b. f b = f a \\<and> count M b < count N b\"", "lemma Max_in_mset: \"M \\<noteq> {#} \\<Longrightarrow> Max_mset M \\<in># M\"", "lemma Max_lt_imp_lt_mset:\n  assumes n_nemp: \"N \\<noteq> {#}\" and max: \"Max_mset M < Max_mset N\" (is \"?max_M < ?max_N\")\n  shows \"M < N\"", "lemma fold_mset_singleton[simp]: \"fold_mset f z {#x#} = f x z\""], "translations": [["", "lemma finite_set_fold_singleton[simp]: \"Finite_Set.fold f z {x} = f x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "have \"fold_graph f z {x} (f x z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_graph f z {x} (f x z)", "by (auto intro: fold_graph.intros)"], ["proof (state)\nthis:\n  fold_graph f z {x} (f x z)\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "moreover"], ["proof (state)\nthis:\n  fold_graph f z {x} (f x z)\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "{"], ["proof (state)\nthis:\n  fold_graph f z {x} (f x z)\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "fix X y"], ["proof (state)\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "have \"fold_graph f z X y \\<Longrightarrow> (X = {} \\<longrightarrow> y = z) \\<and> (X = {x} \\<longrightarrow> y = f x z)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_graph f z X y \\<Longrightarrow>\n    (X = {} \\<longrightarrow> y = z) \\<and>\n    (X = {x} \\<longrightarrow> y = f x z)", "by (induct rule: fold_graph.induct) auto"], ["proof (state)\nthis:\n  fold_graph f z X y \\<Longrightarrow>\n  (X = {} \\<longrightarrow> y = z) \\<and>\n  (X = {x} \\<longrightarrow> y = f x z)\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "}"], ["proof (state)\nthis:\n  fold_graph f z ?X2 ?y2 \\<Longrightarrow>\n  (?X2 = {} \\<longrightarrow> ?y2 = z) \\<and>\n  (?X2 = {x} \\<longrightarrow> ?y2 = f x z)\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "ultimately"], ["proof (chain)\npicking this:\n  fold_graph f z {x} (f x z)\n  fold_graph f z ?X2 ?y2 \\<Longrightarrow>\n  (?X2 = {} \\<longrightarrow> ?y2 = z) \\<and>\n  (?X2 = {x} \\<longrightarrow> ?y2 = f x z)", "have \"(THE y. fold_graph f z {x} y) = f x z\""], ["proof (prove)\nusing this:\n  fold_graph f z {x} (f x z)\n  fold_graph f z ?X2 ?y2 \\<Longrightarrow>\n  (?X2 = {} \\<longrightarrow> ?y2 = z) \\<and>\n  (?X2 = {x} \\<longrightarrow> ?y2 = f x z)\n\ngoal (1 subgoal):\n 1. (THE y. fold_graph f z {x} y) = f x z", "by blast"], ["proof (state)\nthis:\n  (THE y. fold_graph f z {x} y) = f x z\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "thus ?thesis"], ["proof (prove)\nusing this:\n  (THE y. fold_graph f z {x} y) = f x z\n\ngoal (1 subgoal):\n 1. Finite_Set.fold f z {x} = f x z", "by (simp add: Finite_Set.fold_def)"], ["proof (state)\nthis:\n  Finite_Set.fold f z {x} = f x z\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Function Power\\<close>"], ["", "lemma funpow_lesseq_iter:\n  fixes f :: \"('a::order) \\<Rightarrow> 'a\"\n  assumes mono: \"\\<And>k. k \\<le> f k\" and m_le_n: \"m \\<le> n\"\n  shows \"(f ^^ m) k \\<le> (f ^^ n) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ m) k \\<le> (f ^^ n) k", "using m_le_n"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. (f ^^ m) k \\<le> (f ^^ n) k", "by (induct n) (fastforce simp: le_Suc_eq intro: mono order_trans)+"], ["", "lemma funpow_less_iter:\n  fixes f :: \"('a::order) \\<Rightarrow> 'a\"\n  assumes mono: \"\\<And>k. k < f k\" and m_lt_n: \"m < n\"\n  shows \"(f ^^ m) k < (f ^^ n) k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ^^ m) k < (f ^^ n) k", "using m_lt_n"], ["proof (prove)\nusing this:\n  m < n\n\ngoal (1 subgoal):\n 1. (f ^^ m) k < (f ^^ n) k", "by (induct n) (auto, blast intro: mono less_trans dest: less_antisym)"], ["", "subsection \\<open>Least Operator\\<close>"], ["", "lemma Least_eq[simp]: \"(LEAST y. y = x) = x\" and \"(LEAST y. x = y) = x\" for x :: \"'a::order\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (LEAST y. y = x) = x &&& (LEAST y. x = y) = x", "by (blast intro: Least_equality)+"], ["", "lemma Least_in_nonempty_set_imp_ex:\n  fixes f :: \"'b \\<Rightarrow> ('a::wellorder)\"\n  assumes\n    A_nemp: \"A \\<noteq> {}\" and\n    P_least: \"P (LEAST y. \\<exists>x \\<in> A. y = f x)\"\n  shows \"\\<exists>x \\<in> A. P (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. P (f x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. P (f x)", "obtain a where a: \"a \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a. a \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "using A_nemp"], ["proof (prove)\nusing this:\n  A \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>a. a \\<in> A \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by fast"], ["proof (state)\nthis:\n  a \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. P (f x)", "have \"\\<exists>x. x \\<in> A \\<and> (LEAST y. \\<exists>x. x \\<in> A \\<and> y = f x) = f x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       x \\<in> A \\<and>\n       (LEAST y. \\<exists>x. x \\<in> A \\<and> y = f x) = f x", "by (rule LeastI[of _ \"f a\"]) (fast intro: a)"], ["proof (state)\nthis:\n  \\<exists>x.\n     x \\<in> A \\<and> (LEAST y. \\<exists>x. x \\<in> A \\<and> y = f x) = f x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. P (f x)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>x.\n     x \\<in> A \\<and> (LEAST y. \\<exists>x. x \\<in> A \\<and> y = f x) = f x\n\ngoal (1 subgoal):\n 1. \\<exists>x\\<in>A. P (f x)", "by (metis P_least)"], ["proof (state)\nthis:\n  \\<exists>x\\<in>A. P (f x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma Least_eq_0_enat: \"P 0 \\<Longrightarrow> (LEAST x :: enat. P x) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P 0 \\<Longrightarrow> (LEAST x. P x) = 0", "by (simp add: Least_equality)"], ["", "subsection \\<open>Antisymmetric Relations\\<close>"], ["", "lemma irrefl_trans_imp_antisym: \"irrefl r \\<Longrightarrow> trans r \\<Longrightarrow> antisym r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>irrefl r; trans r\\<rbrakk> \\<Longrightarrow> antisym r", "unfolding irrefl_def trans_def antisym_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>a. (a, a) \\<notin> r;\n     \\<forall>x y z.\n        (x, y) \\<in> r \\<longrightarrow>\n        (y, z) \\<in> r \\<longrightarrow> (x, z) \\<in> r\\<rbrakk>\n    \\<Longrightarrow> \\<forall>x y.\n                         (x, y) \\<in> r \\<longrightarrow>\n                         (y, x) \\<in> r \\<longrightarrow> x = y", "by fast"], ["", "lemma irreflp_transp_imp_antisymP: \"irreflp p \\<Longrightarrow> transp p \\<Longrightarrow> antisymp p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>irreflp p; transp p\\<rbrakk> \\<Longrightarrow> antisymp p", "by (fact irrefl_trans_imp_antisym [to_pred])"], ["", "subsection \\<open>Acyclic Relations\\<close>"], ["", "lemma finite_nonempty_ex_succ_imp_cyclic:\n  assumes\n    fin: \"finite A\" and\n    nemp: \"A \\<noteq> {}\" and\n    ex_y: \"\\<forall>x \\<in> A. \\<exists>y \\<in> A. (y, x) \\<in> r\"\n  shows \"\\<not> acyclic r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "let ?R = \"{(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "have R_sub_r: \"?R \\<subseteq> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r} \\<subseteq> r", "by auto"], ["proof (state)\nthis:\n  {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r} \\<subseteq> r\n\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "have \"?R \\<subseteq> A \\<times> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r}\n    \\<subseteq> A \\<times> A", "by auto"], ["proof (state)\nthis:\n  {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r}\n  \\<subseteq> A \\<times> A\n\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "hence fin_R: \"finite ?R\""], ["proof (prove)\nusing this:\n  {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r}\n  \\<subseteq> A \\<times> A\n\ngoal (1 subgoal):\n 1. finite {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r}", "by (auto intro: fin dest!: infinite_super)"], ["proof (state)\nthis:\n  finite {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r}\n\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "have \"\\<not> acyclic ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> acyclicP\n            (\\<lambda>x y. x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r)", "by (rule notI, drule finite_acyclic_wf[OF fin_R], unfold wf_eq_minimal, drule spec[of _ A],\n      use ex_y nemp in blast)"], ["proof (state)\nthis:\n  \\<not> acyclicP\n          (\\<lambda>x y. x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r)\n\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<not> acyclicP\n          (\\<lambda>x y. x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r)\n\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "using R_sub_r acyclic_subset"], ["proof (prove)\nusing this:\n  \\<not> acyclicP\n          (\\<lambda>x y. x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r)\n  {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> (x, y) \\<in> r} \\<subseteq> r\n  \\<lbrakk>acyclic ?s; ?r \\<subseteq> ?s\\<rbrakk>\n  \\<Longrightarrow> acyclic ?r\n\ngoal (1 subgoal):\n 1. \\<not> acyclic r", "by auto"], ["proof (state)\nthis:\n  \\<not> acyclic r\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Reflexive, Transitive Closure\\<close>"], ["", "lemma relcomp_subset_left_imp_relcomp_trancl_subset_left:\n  assumes sub: \"R O S \\<subseteq> R\"\n  shows \"R O S\\<^sup>* \\<subseteq> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. R O S\\<^sup>* \\<subseteq> R", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R O S\\<^sup>* \\<Longrightarrow> x \\<in> R", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R O S\\<^sup>* \\<Longrightarrow> x \\<in> R", "assume \"x \\<in> R O S\\<^sup>*\""], ["proof (state)\nthis:\n  x \\<in> R O S\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R O S\\<^sup>* \\<Longrightarrow> x \\<in> R", "then"], ["proof (chain)\npicking this:\n  x \\<in> R O S\\<^sup>*", "obtain n where \"x \\<in> R O S ^^ n\""], ["proof (prove)\nusing this:\n  x \\<in> R O S\\<^sup>*\n\ngoal (1 subgoal):\n 1. (\\<And>n. x \\<in> R O S ^^ n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using rtrancl_imp_relpow"], ["proof (prove)\nusing this:\n  x \\<in> R O S\\<^sup>*\n  ?p \\<in> ?R\\<^sup>* \\<Longrightarrow> \\<exists>n. ?p \\<in> ?R ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>n. x \\<in> R O S ^^ n \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> R O S ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> R O S\\<^sup>* \\<Longrightarrow> x \\<in> R", "thus \"x \\<in> R\""], ["proof (prove)\nusing this:\n  x \\<in> R O S ^^ n\n\ngoal (1 subgoal):\n 1. x \\<in> R", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in> R O S ^^ 0 \\<Longrightarrow> x \\<in> R\n 2. \\<And>n.\n       \\<lbrakk>x \\<in> R O S ^^ n \\<Longrightarrow> x \\<in> R;\n        x \\<in> R O S ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> R", "case (Suc m)"], ["proof (state)\nthis:\n  x \\<in> R O S ^^ m \\<Longrightarrow> x \\<in> R\n  x \\<in> R O S ^^ Suc m\n\ngoal (2 subgoals):\n 1. x \\<in> R O S ^^ 0 \\<Longrightarrow> x \\<in> R\n 2. \\<And>n.\n       \\<lbrakk>x \\<in> R O S ^^ n \\<Longrightarrow> x \\<in> R;\n        x \\<in> R O S ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> x \\<in> R", "thus ?case"], ["proof (prove)\nusing this:\n  x \\<in> R O S ^^ m \\<Longrightarrow> x \\<in> R\n  x \\<in> R O S ^^ Suc m\n\ngoal (1 subgoal):\n 1. x \\<in> R", "by (metis (no_types) O_assoc inf_sup_ord(3) le_iff_sup relcomp_distrib2 relpow.simps(2)\n        relpow_commute sub subsetCE)"], ["proof (state)\nthis:\n  x \\<in> R\n\ngoal (1 subgoal):\n 1. x \\<in> R O S ^^ 0 \\<Longrightarrow> x \\<in> R", "qed auto"], ["proof (state)\nthis:\n  x \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f_chain_in_rtrancl:\n  assumes m_le_n: \"m \\<le> n\" and f_chain: \"\\<forall>i \\<in> {m..<n}. (f i, f (Suc i)) \\<in> R\"\n  shows \"(f m, f n) \\<in> R\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f m, f n) \\<in> R\\<^sup>*", "proof (rule relpow_imp_rtrancl, rule relpow_fun_conv[THEN iffD2], intro exI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. ?f5 0 = f m\n 2. ?f5 ?n = f n\n 3. \\<forall>i<?n. (?f5 i, ?f5 (Suc i)) \\<in> R", "let ?g = \"\\<lambda>i. f (m + i)\""], ["proof (state)\ngoal (3 subgoals):\n 1. ?f5 0 = f m\n 2. ?f5 ?n = f n\n 3. \\<forall>i<?n. (?f5 i, ?f5 (Suc i)) \\<in> R", "let ?k = \"n - m\""], ["proof (state)\ngoal (3 subgoals):\n 1. ?f5 0 = f m\n 2. ?f5 ?n = f n\n 3. \\<forall>i<?n. (?f5 i, ?f5 (Suc i)) \\<in> R", "show \"?g 0 = f m\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (m + 0) = f m", "by simp"], ["proof (state)\nthis:\n  f (m + 0) = f m\n\ngoal (2 subgoals):\n 1. f (m + ?n) = f n\n 2. \\<forall>i<?n. (f (m + i), f (m + Suc i)) \\<in> R", "show \"?g ?k = f n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f (m + (n - m)) = f n", "using m_le_n"], ["proof (prove)\nusing this:\n  m \\<le> n\n\ngoal (1 subgoal):\n 1. f (m + (n - m)) = f n", "by force"], ["proof (state)\nthis:\n  f (m + (n - m)) = f n\n\ngoal (1 subgoal):\n 1. \\<forall>i<n - m. (f (m + i), f (m + Suc i)) \\<in> R", "show \"(\\<forall>i < ?k. (?g i, ?g (Suc i)) \\<in> R)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<n - m. (f (m + i), f (m + Suc i)) \\<in> R", "by (simp add: f_chain)"], ["proof (state)\nthis:\n  \\<forall>i<n - m. (f (m + i), f (m + Suc i)) \\<in> R\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma f_rev_chain_in_rtrancl:\n  assumes m_le_n: \"m \\<le> n\" and f_chain: \"\\<forall>i \\<in> {m..<n}. (f (Suc i), f i) \\<in> R\"\n  shows \"(f n, f m) \\<in> R\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f n, f m) \\<in> R\\<^sup>*", "by (rule f_chain_in_rtrancl[OF m_le_n, of \"\\<lambda>i. f (n + m - i)\", simplified])\n    (metis f_chain le_add_diff Suc_diff_Suc Suc_leI atLeastLessThan_iff diff_Suc_diff_eq1 diff_less\n      le_add1 less_le_trans zero_less_Suc)"], ["", "subsection \\<open>Well-Founded Relations\\<close>"], ["", "lemma wf_app: \"wf r \\<Longrightarrow> wf {(x, y). (f x, f y) \\<in> r}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf r \\<Longrightarrow> wf {(x, y). (f x, f y) \\<in> r}", "unfolding wf_eq_minimal"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>Q x.\n       x \\<in> Q \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (y, z) \\<in> r \\<longrightarrow>\n              y \\<notin> Q) \\<Longrightarrow>\n    \\<forall>Q x.\n       x \\<in> Q \\<longrightarrow>\n       (\\<exists>z\\<in>Q.\n           \\<forall>y.\n              (y, z) \\<in> {(x, y). (f x, f y) \\<in> r} \\<longrightarrow>\n              y \\<notin> Q)", "by (intro allI, drule spec[of _ \"f ` Q\" for Q]) fast"], ["", "lemma wfP_app: \"wfP p \\<Longrightarrow> wfP (\\<lambda>x y. p (f x) (f y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP p \\<Longrightarrow> wfP (\\<lambda>x y. p (f x) (f y))", "unfolding wfP_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). p x y} \\<Longrightarrow> wf {(x, y). p (f x) (f y)}", "by (rule wf_app[of \"{(x, y). p x y}\" f, simplified])"], ["", "lemma wf_exists_minimal:\n  assumes wf: \"wf r\" and Q: \"Q x\"\n  shows \"\\<exists>x. Q x \\<and> (\\<forall>y. (f y, f x) \\<in> r \\<longrightarrow> \\<not> Q y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       Q x \\<and>\n       (\\<forall>y. (f y, f x) \\<in> r \\<longrightarrow> \\<not> Q y)", "using wf_eq_minimal[THEN iffD1, OF wf_app[OF wf], rule_format, of _ \"{x. Q x}\", simplified, OF Q]"], ["proof (prove)\nusing this:\n  \\<exists>z.\n     Q z \\<and>\n     (\\<forall>y. (?f y, ?f z) \\<in> r \\<longrightarrow> \\<not> Q y)\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       Q x \\<and>\n       (\\<forall>y. (f y, f x) \\<in> r \\<longrightarrow> \\<not> Q y)", "by blast"], ["", "lemma wfP_exists_minimal:\n  assumes wf: \"wfP p\" and Q: \"Q x\"\n  shows \"\\<exists>x. Q x \\<and> (\\<forall>y. p (f y) (f x) \\<longrightarrow> \\<not> Q y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       Q x \\<and> (\\<forall>y. p (f y) (f x) \\<longrightarrow> \\<not> Q y)", "by (rule wf_exists_minimal[of \"{(x, y). p x y}\" Q x, OF wf[unfolded wfP_def] Q, simplified])"], ["", "lemma finite_irrefl_trans_imp_wf: \"finite r \\<Longrightarrow> irrefl r \\<Longrightarrow> trans r \\<Longrightarrow> wf r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite r; irrefl r; trans r\\<rbrakk> \\<Longrightarrow> wf r", "by (erule finite_acyclic_wf) (simp add: acyclic_irrefl)"], ["", "lemma finite_irreflp_transp_imp_wfp:\n  \"finite {(x, y). p x y} \\<Longrightarrow> irreflp p \\<Longrightarrow> transp p \\<Longrightarrow> wfP p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {(x, y). p x y}; irreflp p; transp p\\<rbrakk>\n    \\<Longrightarrow> wfP p", "using finite_irrefl_trans_imp_wf[of \"{(x, y). p x y}\"]"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {(x, y). p x y}; irrefl {(x, y). p x y};\n   trans {(x, y). p x y}\\<rbrakk>\n  \\<Longrightarrow> wf {(x, y). p x y}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {(x, y). p x y}; irreflp p; transp p\\<rbrakk>\n    \\<Longrightarrow> wfP p", "unfolding wfP_def transp_def irreflp_def trans_def irrefl_def mem_Collect_eq prod.case"], ["proof (prove)\nusing this:\n  \\<lbrakk>finite {(x, y). p x y}; \\<forall>a. \\<not> p a a;\n   \\<forall>x y z.\n      p x y \\<longrightarrow> p y z \\<longrightarrow> p x z\\<rbrakk>\n  \\<Longrightarrow> wf {(x, y). p x y}\n\ngoal (1 subgoal):\n 1. \\<lbrakk>finite {(x, y). p x y}; \\<forall>a. \\<not> p a a;\n     \\<forall>x y z.\n        p x y \\<longrightarrow> p y z \\<longrightarrow> p x z\\<rbrakk>\n    \\<Longrightarrow> wf {(x, y). p x y}", "by assumption"], ["", "lemma wf_infinite_down_chain_compatible:\n  assumes\n    wf_R: \"wf R\" and\n    inf_chain_RS: \"\\<forall>i. (f (Suc i), f i) \\<in> R \\<union> S\" and\n    O_subset: \"R O S \\<subseteq> R\"\n  shows \"\\<exists>k. \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>k. \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "assume \"\\<nexists>k. \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S\""], ["proof (state)\nthis:\n  \\<nexists>k. \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "hence \"\\<forall>k. \\<exists>i. (f (Suc (i + k)), f (i + k)) \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<nexists>k. \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<exists>i. (f (Suc (i + k)), f (i + k)) \\<notin> S", "by blast"], ["proof (state)\nthis:\n  \\<forall>k. \\<exists>i. (f (Suc (i + k)), f (i + k)) \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "hence \"\\<forall>k. \\<exists>i > k. (f (Suc i), f i) \\<notin> S\""], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>i. (f (Suc (i + k)), f (i + k)) \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<notin> S", "by (metis add.commute add_Suc less_add_Suc1)"], ["proof (state)\nthis:\n  \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "hence \"\\<forall>k. \\<exists>i > k. (f (Suc i), f i) \\<in> R\""], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<notin> S\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<in> R", "using inf_chain_RS"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<notin> S\n  \\<forall>i. (f (Suc i), f i) \\<in> R \\<union> S\n\ngoal (1 subgoal):\n 1. \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<in> R", "by blast"], ["proof (state)\nthis:\n  \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "hence \"\\<exists>i > k. (f (Suc i), f i) \\<in> R \\<and> (\\<forall>j > k. (f (Suc j), f j) \\<in> R \\<longrightarrow> j \\<ge> i)\" for k"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<exists>i>k.\n       (f (Suc i), f i) \\<in> R \\<and>\n       (\\<forall>j>k. (f (Suc j), f j) \\<in> R \\<longrightarrow> i \\<le> j)", "using wf_eq_minimal[THEN iffD1, OF wf_less, rule_format,\n      of _ \"{i. i > k \\<and> (f (Suc i), f i) \\<in> R}\", simplified]"], ["proof (prove)\nusing this:\n  \\<forall>k. \\<exists>i>k. (f (Suc i), f i) \\<in> R\n  k < ?x \\<and> (f (Suc ?x), f ?x) \\<in> R \\<Longrightarrow>\n  \\<exists>z>k.\n     (f (Suc z), f z) \\<in> R \\<and>\n     (\\<forall>y<z. k < y \\<longrightarrow> (f (Suc y), f y) \\<notin> R)\n\ngoal (1 subgoal):\n 1. \\<exists>i>k.\n       (f (Suc i), f i) \\<in> R \\<and>\n       (\\<forall>j>k. (f (Suc j), f j) \\<in> R \\<longrightarrow> i \\<le> j)", "by (meson not_less)"], ["proof (state)\nthis:\n  \\<exists>i>?k.\n     (f (Suc i), f i) \\<in> R \\<and>\n     (\\<forall>j>?k. (f (Suc j), f j) \\<in> R \\<longrightarrow> i \\<le> j)\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>i>?k.\n     (f (Suc i), f i) \\<in> R \\<and>\n     (\\<forall>j>?k. (f (Suc j), f j) \\<in> R \\<longrightarrow> i \\<le> j)", "obtain j_of where\n    j_of_gt: \"\\<And>k. j_of k > k\" and\n    j_of_in_R: \"\\<And>k. (f (Suc (j_of k)), f (j_of k)) \\<in> R\" and\n    j_of_min: \"\\<And>k. \\<forall>j > k. (f (Suc j), f j) \\<in> R \\<longrightarrow> j \\<ge> j_of k\""], ["proof (prove)\nusing this:\n  \\<exists>i>?k.\n     (f (Suc i), f i) \\<in> R \\<and>\n     (\\<forall>j>?k. (f (Suc j), f j) \\<in> R \\<longrightarrow> i \\<le> j)\n\ngoal (1 subgoal):\n 1. (\\<And>j_of.\n        \\<lbrakk>\\<And>k. k < j_of k;\n         \\<And>k. (f (Suc (j_of k)), f (j_of k)) \\<in> R;\n         \\<And>k.\n            \\<forall>j>k.\n               (f (Suc j), f j) \\<in> R \\<longrightarrow>\n               j_of k \\<le> j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  ?k < j_of ?k\n  (f (Suc (j_of ?k)), f (j_of ?k)) \\<in> R\n  \\<forall>j>?k. (f (Suc j), f j) \\<in> R \\<longrightarrow> j_of ?k \\<le> j\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "have j_of_min_s: \"\\<And>k j. j > k \\<Longrightarrow> j < j_of k \\<Longrightarrow> (f (Suc j), f j) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>k j.\n       \\<lbrakk>k < j; j < j_of k\\<rbrakk>\n       \\<Longrightarrow> (f (Suc j), f j) \\<in> S", "using j_of_min inf_chain_RS"], ["proof (prove)\nusing this:\n  \\<forall>j>?k. (f (Suc j), f j) \\<in> R \\<longrightarrow> j_of ?k \\<le> j\n  \\<forall>i. (f (Suc i), f i) \\<in> R \\<union> S\n\ngoal (1 subgoal):\n 1. \\<And>k j.\n       \\<lbrakk>k < j; j < j_of k\\<rbrakk>\n       \\<Longrightarrow> (f (Suc j), f j) \\<in> S", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>?k < ?j; ?j < j_of ?k\\<rbrakk>\n  \\<Longrightarrow> (f (Suc ?j), f ?j) \\<in> S\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "define g :: \"nat \\<Rightarrow> 'a\" where \"\\<And>k. g k = f (Suc ((j_of ^^ k) 0))\""], ["proof (state)\nthis:\n  g ?k = f (Suc ((j_of ^^ ?k) 0))\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "have between_g[simplified]: \"(f ((j_of ^^ (Suc i)) 0), f (Suc ((j_of ^^ i) 0))) \\<in> S\\<^sup>*\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. (f ((j_of ^^ Suc i) 0), f (Suc ((j_of ^^ i) 0))) \\<in> S\\<^sup>*", "proof (rule f_rev_chain_in_rtrancl; clarify?)"], ["proof (state)\ngoal (2 subgoals):\n 1. Suc ((j_of ^^ i) 0) \\<le> (j_of ^^ Suc i) 0\n 2. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "show \"Suc ((j_of ^^ i) 0) \\<le> (j_of ^^ Suc i) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Suc ((j_of ^^ i) 0) \\<le> (j_of ^^ Suc i) 0", "using j_of_gt"], ["proof (prove)\nusing this:\n  ?k < j_of ?k\n\ngoal (1 subgoal):\n 1. Suc ((j_of ^^ i) 0) \\<le> (j_of ^^ Suc i) 0", "by (simp add: Suc_leI)"], ["proof (state)\nthis:\n  Suc ((j_of ^^ i) 0) \\<le> (j_of ^^ Suc i) 0\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "fix ia"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "assume ia: \"ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0}\""], ["proof (state)\nthis:\n  ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0}\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "have ia_gt: \"ia > (j_of ^^ i) 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (j_of ^^ i) 0 < ia", "using ia"], ["proof (prove)\nusing this:\n  ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0}\n\ngoal (1 subgoal):\n 1. (j_of ^^ i) 0 < ia", "by auto"], ["proof (state)\nthis:\n  (j_of ^^ i) 0 < ia\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "have ia_lt: \"ia < j_of ((j_of ^^ i) 0)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ia < j_of ((j_of ^^ i) 0)", "using ia"], ["proof (prove)\nusing this:\n  ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0}\n\ngoal (1 subgoal):\n 1. ia < j_of ((j_of ^^ i) 0)", "by auto"], ["proof (state)\nthis:\n  ia < j_of ((j_of ^^ i) 0)\n\ngoal (1 subgoal):\n 1. \\<And>ia.\n       ia \\<in> {Suc ((j_of ^^ i) 0)..<(j_of ^^ Suc i) 0} \\<Longrightarrow>\n       (f (Suc ia), f ia) \\<in> S", "show \"(f (Suc ia), f ia) \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (f (Suc ia), f ia) \\<in> S", "by (rule j_of_min_s[OF ia_gt ia_lt])"], ["proof (state)\nthis:\n  (f (Suc ia), f ia) \\<in> S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (f (j_of ((j_of ^^ ?i) 0)), f (Suc ((j_of ^^ ?i) 0))) \\<in> S\\<^sup>*\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "have \"\\<And>i. (g (Suc i), g i) \\<in> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. (g (Suc i), g i) \\<in> R", "unfolding g_def funpow.simps comp_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       (f (Suc (j_of ((j_of ^^ i) 0))), f (Suc ((j_of ^^ i) 0))) \\<in> R", "by (rule subsetD[OF relcomp_subset_left_imp_relcomp_trancl_subset_left[OF O_subset]])\n      (rule relcompI[OF j_of_in_R between_g])"], ["proof (state)\nthis:\n  (g (Suc ?i), g ?i) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  (g (Suc ?i), g ?i) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "have \"\\<forall>f. \\<exists>i. (f (Suc i), f i) \\<notin> R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>f. \\<exists>i. (f (Suc i), f i) \\<notin> R", "using wf_R[unfolded wf_iff_no_infinite_down_chain]"], ["proof (prove)\nusing this:\n  \\<nexists>f. \\<forall>i. (f (Suc i), f i) \\<in> R\n\ngoal (1 subgoal):\n 1. \\<forall>f. \\<exists>i. (f (Suc i), f i) \\<notin> R", "by blast"], ["proof (state)\nthis:\n  \\<forall>f. \\<exists>i. (f (Suc i), f i) \\<notin> R\n\ngoal (1 subgoal):\n 1. \\<nexists>k.\n       \\<forall>i. (f (Suc (i + k)), f (i + k)) \\<in> S \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  (g (Suc ?i), g ?i) \\<in> R\n  \\<forall>f. \\<exists>i. (f (Suc i), f i) \\<notin> R", "show False"], ["proof (prove)\nusing this:\n  (g (Suc ?i), g ?i) \\<in> R\n  \\<forall>f. \\<exists>i. (f (Suc i), f i) \\<notin> R\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Wellorders\\<close>"], ["", "lemma (in wellorder) exists_minimal:\n  fixes x :: 'a\n  assumes \"P x\"\n  shows \"\\<exists>x. P x \\<and> (\\<forall>y. P y \\<longrightarrow> y \\<ge> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. P x \\<and> (\\<forall>y. P y \\<longrightarrow> x \\<le> y)", "using assms"], ["proof (prove)\nusing this:\n  P x\n\ngoal (1 subgoal):\n 1. \\<exists>x. P x \\<and> (\\<forall>y. P y \\<longrightarrow> x \\<le> y)", "by (auto intro: LeastI Least_le)"], ["", "subsection \\<open>Lists\\<close>"], ["", "lemma rev_induct2[consumes 1, case_names Nil snoc]:\n  \"length xs = length ys \\<Longrightarrow> P [] [] \\<Longrightarrow>\n   (\\<And>x xs y ys. length xs = length ys \\<Longrightarrow> P xs ys \\<Longrightarrow> P (xs @ [x]) (ys @ [y])) \\<Longrightarrow> P xs ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length xs = length ys; P [] [];\n     \\<And>x xs y ys.\n        \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n        \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n    \\<Longrightarrow> P xs ys", "proof (induct xs arbitrary: ys rule: rev_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>length [] = length ys; P [] [];\n        \\<And>x xs y ys.\n           \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n       \\<Longrightarrow> P [] ys\n 2. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys; P [] [];\n                    \\<And>x xs y ys.\n                       \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n                   \\<Longrightarrow> P xs ys;\n        length (xs @ [x]) = length ys; P [] [];\n        \\<And>x xs y ys.\n           \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n       \\<Longrightarrow> P (xs @ [x]) ys", "case (snoc x xs ys)"], ["proof (state)\nthis:\n  \\<lbrakk>length xs = length ?ys; P [] [];\n   \\<And>x xs y ys.\n      \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n      \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n  \\<Longrightarrow> P xs ?ys\n  length (xs @ [x]) = length ys\n  P [] []\n  \\<lbrakk>length ?xs = length ?ys; P ?xs ?ys\\<rbrakk>\n  \\<Longrightarrow> P (?xs @ [?x]) (?ys @ [?y])\n\ngoal (2 subgoals):\n 1. \\<And>ys.\n       \\<lbrakk>length [] = length ys; P [] [];\n        \\<And>x xs y ys.\n           \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n       \\<Longrightarrow> P [] ys\n 2. \\<And>x xs ys.\n       \\<lbrakk>\\<And>ys.\n                   \\<lbrakk>length xs = length ys; P [] [];\n                    \\<And>x xs y ys.\n                       \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n                       \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n                   \\<Longrightarrow> P xs ys;\n        length (xs @ [x]) = length ys; P [] [];\n        \\<And>x xs y ys.\n           \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n       \\<Longrightarrow> P (xs @ [x]) ys", "thus ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>length xs = length ?ys; P [] [];\n   \\<And>x xs y ys.\n      \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n      \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n  \\<Longrightarrow> P xs ?ys\n  length (xs @ [x]) = length ys\n  P [] []\n  \\<lbrakk>length ?xs = length ?ys; P ?xs ?ys\\<rbrakk>\n  \\<Longrightarrow> P (?xs @ [?x]) (?ys @ [?y])\n\ngoal (1 subgoal):\n 1. P (xs @ [x]) ys", "by (induct ys rule: rev_induct) simp_all"], ["proof (state)\nthis:\n  P (xs @ [x]) ys\n\ngoal (1 subgoal):\n 1. \\<And>ys.\n       \\<lbrakk>length [] = length ys; P [] [];\n        \\<And>x xs y ys.\n           \\<lbrakk>length xs = length ys; P xs ys\\<rbrakk>\n           \\<Longrightarrow> P (xs @ [x]) (ys @ [y])\\<rbrakk>\n       \\<Longrightarrow> P [] ys", "qed auto"], ["", "lemma hd_in_set: \"length xs \\<noteq> 0 \\<Longrightarrow> hd xs \\<in> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length xs \\<noteq> 0 \\<Longrightarrow> hd xs \\<in> set xs", "by (cases xs) auto"], ["", "lemma in_lists_iff_set: \"xs \\<in> lists A \\<longleftrightarrow> set xs \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (xs \\<in> lists A) = (set xs \\<subseteq> A)", "by fast"], ["", "lemma butlast_append_Cons[simp]: \"butlast (xs @ y # ys) = xs @ butlast (y # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. butlast (xs @ y # ys) = xs @ butlast (y # ys)", "using butlast_append[of xs \"y # ys\", simplified]"], ["proof (prove)\nusing this:\n  butlast (xs @ y # ys) = xs @ (if ys = [] then [] else y # butlast ys)\n\ngoal (1 subgoal):\n 1. butlast (xs @ y # ys) = xs @ butlast (y # ys)", "by simp"], ["", "lemma rev_in_lists[simp]: \"rev xs \\<in> lists A \\<longleftrightarrow> xs \\<in> lists A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (rev xs \\<in> lists A) = (xs \\<in> lists A)", "by auto"], ["", "lemma hd_le_sum_list:\n  fixes xs :: \"'a::ordered_ab_semigroup_monoid_add_imp_le list\"\n  assumes \"xs \\<noteq> []\" and \"\\<forall>i < length xs. xs ! i \\<ge> 0\"\n  shows \"hd xs \\<le> sum_list xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hd xs \\<le> sum_list xs", "using assms"], ["proof (prove)\nusing this:\n  xs \\<noteq> []\n  \\<forall>i<length xs. (0::'a) \\<le> xs ! i\n\ngoal (1 subgoal):\n 1. hd xs \\<le> sum_list xs", "by (induct xs rule: rev_induct, simp_all,\n    metis add_cancel_right_left add_increasing2 hd_append2 lessI less_SucI list.sel(1) nth_append\n      nth_append_length order_refl self_append_conv2 sum_list.Nil)"], ["", "lemma sum_list_ge_length_times:\n  fixes a :: \"'a::{ordered_ab_semigroup_add,semiring_1}\"\n  assumes \"\\<forall>i < length xs. xs ! i \\<ge> a\"\n  shows \"sum_list xs \\<ge> of_nat (length xs) * a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (length xs) * a \\<le> sum_list xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>i<length xs. a \\<le> xs ! i\n\ngoal (1 subgoal):\n 1. of_nat (length xs) * a \\<le> sum_list xs", "proof (induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<forall>i<length []. a \\<le> [] ! i \\<Longrightarrow>\n    of_nat (length []) * a \\<le> sum_list []\n 2. \\<And>aa xs.\n       \\<lbrakk>\\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n                of_nat (length xs) * a \\<le> sum_list xs;\n        \\<forall>i<length (aa # xs). a \\<le> (aa # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> of_nat (length (aa # xs)) * a\n                         \\<le> sum_list (aa # xs)", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n  of_nat (length xs) * a \\<le> sum_list xs\n  \\<forall>i<length (x # xs). a \\<le> (x # xs) ! i\n\ngoal (2 subgoals):\n 1. \\<forall>i<length []. a \\<le> [] ! i \\<Longrightarrow>\n    of_nat (length []) * a \\<le> sum_list []\n 2. \\<And>aa xs.\n       \\<lbrakk>\\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n                of_nat (length xs) * a \\<le> sum_list xs;\n        \\<forall>i<length (aa # xs). a \\<le> (aa # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> of_nat (length (aa # xs)) * a\n                         \\<le> sum_list (aa # xs)", "note ih = this(1) and xxs_i_ge_a = this(2)"], ["proof (state)\nthis:\n  \\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n  of_nat (length xs) * a \\<le> sum_list xs\n  \\<forall>i<length (x # xs). a \\<le> (x # xs) ! i\n\ngoal (2 subgoals):\n 1. \\<forall>i<length []. a \\<le> [] ! i \\<Longrightarrow>\n    of_nat (length []) * a \\<le> sum_list []\n 2. \\<And>aa xs.\n       \\<lbrakk>\\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n                of_nat (length xs) * a \\<le> sum_list xs;\n        \\<forall>i<length (aa # xs). a \\<le> (aa # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> of_nat (length (aa # xs)) * a\n                         \\<le> sum_list (aa # xs)", "have xs_i_ge_a: \"\\<forall>i < length xs. xs ! i \\<ge> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length xs. a \\<le> xs ! i", "using xxs_i_ge_a"], ["proof (prove)\nusing this:\n  \\<forall>i<length (x # xs). a \\<le> (x # xs) ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length xs. a \\<le> xs ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length xs. a \\<le> xs ! i\n\ngoal (2 subgoals):\n 1. \\<forall>i<length []. a \\<le> [] ! i \\<Longrightarrow>\n    of_nat (length []) * a \\<le> sum_list []\n 2. \\<And>aa xs.\n       \\<lbrakk>\\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n                of_nat (length xs) * a \\<le> sum_list xs;\n        \\<forall>i<length (aa # xs). a \\<le> (aa # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> of_nat (length (aa # xs)) * a\n                         \\<le> sum_list (aa # xs)", "have \"x \\<ge> a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> x", "using xxs_i_ge_a"], ["proof (prove)\nusing this:\n  \\<forall>i<length (x # xs). a \\<le> (x # xs) ! i\n\ngoal (1 subgoal):\n 1. a \\<le> x", "by auto"], ["proof (state)\nthis:\n  a \\<le> x\n\ngoal (2 subgoals):\n 1. \\<forall>i<length []. a \\<le> [] ! i \\<Longrightarrow>\n    of_nat (length []) * a \\<le> sum_list []\n 2. \\<And>aa xs.\n       \\<lbrakk>\\<forall>i<length xs. a \\<le> xs ! i \\<Longrightarrow>\n                of_nat (length xs) * a \\<le> sum_list xs;\n        \\<forall>i<length (aa # xs). a \\<le> (aa # xs) ! i\\<rbrakk>\n       \\<Longrightarrow> of_nat (length (aa # xs)) * a\n                         \\<le> sum_list (aa # xs)", "thus ?case"], ["proof (prove)\nusing this:\n  a \\<le> x\n\ngoal (1 subgoal):\n 1. of_nat (length (x # xs)) * a \\<le> sum_list (x # xs)", "using ih[OF xs_i_ge_a]"], ["proof (prove)\nusing this:\n  a \\<le> x\n  of_nat (length xs) * a \\<le> sum_list xs\n\ngoal (1 subgoal):\n 1. of_nat (length (x # xs)) * a \\<le> sum_list (x # xs)", "by (simp add: ring_distribs ordered_ab_semigroup_add_class.add_mono)"], ["proof (state)\nthis:\n  of_nat (length (x # xs)) * a \\<le> sum_list (x # xs)\n\ngoal (1 subgoal):\n 1. \\<forall>i<length []. a \\<le> [] ! i \\<Longrightarrow>\n    of_nat (length []) * a \\<le> sum_list []", "qed auto"], ["", "lemma prod_list_nonneg:\n  fixes xs :: \"('a :: {ordered_semiring_0,linordered_nonzero_semiring}) list\"\n  assumes \"\\<And>x. x \\<in> set xs \\<Longrightarrow> x \\<ge> 0\"\n  shows \"prod_list xs \\<ge> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (0::'a) \\<le> prod_list xs", "using assms"], ["proof (prove)\nusing this:\n  ?x \\<in> set xs \\<Longrightarrow> (0::'a) \\<le> ?x\n\ngoal (1 subgoal):\n 1. (0::'a) \\<le> prod_list xs", "by (induct xs) auto"], ["", "lemma zip_append_0_upt:\n  \"zip (xs @ ys) [0..<length xs + length ys] =\n   zip xs [0..<length xs] @ zip ys [length xs..<length xs + length ys]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip (xs @ ys) [0..<length xs + length ys] =\n    zip xs [0..<length xs] @ zip ys [length xs..<length xs + length ys]", "proof (induct ys arbitrary: xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       zip (xs @ []) [0..<length xs + length []] =\n       zip xs [0..<length xs] @ zip [] [length xs..<length xs + length []]\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           zip (xs @ ys) [0..<length xs + length ys] =\n           zip xs [0..<length xs] @\n           zip ys [length xs..<length xs + length ys]) \\<Longrightarrow>\n       zip (xs @ a # ys) [0..<length xs + length (a # ys)] =\n       zip xs [0..<length xs] @\n       zip (a # ys) [length xs..<length xs + length (a # ys)]", "case (Cons y ys)"], ["proof (state)\nthis:\n  zip (?xs @ ys) [0..<length ?xs + length ys] =\n  zip ?xs [0..<length ?xs] @ zip ys [length ?xs..<length ?xs + length ys]\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       zip (xs @ []) [0..<length xs + length []] =\n       zip xs [0..<length xs] @ zip [] [length xs..<length xs + length []]\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           zip (xs @ ys) [0..<length xs + length ys] =\n           zip xs [0..<length xs] @\n           zip ys [length xs..<length xs + length ys]) \\<Longrightarrow>\n       zip (xs @ a # ys) [0..<length xs + length (a # ys)] =\n       zip xs [0..<length xs] @\n       zip (a # ys) [length xs..<length xs + length (a # ys)]", "note ih = this"], ["proof (state)\nthis:\n  zip (?xs @ ys) [0..<length ?xs + length ys] =\n  zip ?xs [0..<length ?xs] @ zip ys [length ?xs..<length ?xs + length ys]\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       zip (xs @ []) [0..<length xs + length []] =\n       zip xs [0..<length xs] @ zip [] [length xs..<length xs + length []]\n 2. \\<And>a ys xs.\n       (\\<And>xs.\n           zip (xs @ ys) [0..<length xs + length ys] =\n           zip xs [0..<length xs] @\n           zip ys [length xs..<length xs + length ys]) \\<Longrightarrow>\n       zip (xs @ a # ys) [0..<length xs + length (a # ys)] =\n       zip xs [0..<length xs] @\n       zip (a # ys) [length xs..<length xs + length (a # ys)]", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. zip (xs @ y # ys) [0..<length xs + length (y # ys)] =\n    zip xs [0..<length xs] @\n    zip (y # ys) [length xs..<length xs + length (y # ys)]", "using ih[of \"xs @ [y]\"]"], ["proof (prove)\nusing this:\n  zip ((xs @ [y]) @ ys) [0..<length (xs @ [y]) + length ys] =\n  zip (xs @ [y]) [0..<length (xs @ [y])] @\n  zip ys [length (xs @ [y])..<length (xs @ [y]) + length ys]\n\ngoal (1 subgoal):\n 1. zip (xs @ y # ys) [0..<length xs + length (y # ys)] =\n    zip xs [0..<length xs] @\n    zip (y # ys) [length xs..<length xs + length (y # ys)]", "by (simp, cases ys, simp, simp add: upt_rec)"], ["proof (state)\nthis:\n  zip (xs @ y # ys) [0..<length xs + length (y # ys)] =\n  zip xs [0..<length xs] @\n  zip (y # ys) [length xs..<length xs + length (y # ys)]\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       zip (xs @ []) [0..<length xs + length []] =\n       zip xs [0..<length xs] @ zip [] [length xs..<length xs + length []]", "qed auto"], ["", "lemma zip_eq_butlast_last:\n  assumes len_gt0: \"length xs > 0\" and len_eq: \"length xs = length ys\"\n  shows \"zip xs ys = zip (butlast xs) (butlast ys) @ [(last xs, last ys)]\""], ["proof (prove)\ngoal (1 subgoal):\n 1. zip xs ys = zip (butlast xs) (butlast ys) @ [(last xs, last ys)]", "using len_eq len_gt0"], ["proof (prove)\nusing this:\n  length xs = length ys\n  0 < length xs\n\ngoal (1 subgoal):\n 1. zip xs ys = zip (butlast xs) (butlast ys) @ [(last xs, last ys)]", "by (induct rule: list_induct2) auto"], ["", "subsection \\<open>Extended Natural Numbers\\<close>"], ["", "lemma the_enat_0[simp]: \"the_enat 0 = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_enat 0 = 0", "by (simp add: zero_enat_def)"], ["", "lemma the_enat_1[simp]: \"the_enat 1 = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. the_enat 1 = 1", "by (simp add: one_enat_def)"], ["", "lemma enat_le_minus_1_imp_lt: \"m \\<le> n - 1 \\<Longrightarrow> n \\<noteq> \\<infinity> \\<Longrightarrow> n \\<noteq> 0 \\<Longrightarrow> m < n\" for m n :: enat"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>m \\<le> n - 1; n \\<noteq> \\<infinity>; n \\<noteq> 0\\<rbrakk>\n    \\<Longrightarrow> m < n", "by (cases m; cases n; simp add: zero_enat_def one_enat_def)"], ["", "lemma enat_diff_diff_eq: \"k - m - n = k - (m + n)\" for k m n :: enat"], ["proof (prove)\ngoal (1 subgoal):\n 1. k - m - n = k - (m + n)", "by (cases k; cases m; cases n) auto"], ["", "lemma enat_sub_add_same[intro]: \"n \\<le> m \\<Longrightarrow> m = m - n + n\" for m n :: enat"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow> m = m - n + n", "by (cases m; cases n) auto"], ["", "lemma enat_the_enat_iden[simp]: \"n \\<noteq> \\<infinity> \\<Longrightarrow> enat (the_enat n) = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<noteq> \\<infinity> \\<Longrightarrow> enat (the_enat n) = n", "by auto"], ["", "lemma the_enat_minus_nat: \"m \\<noteq> \\<infinity> \\<Longrightarrow> the_enat (m - enat n) = the_enat m - n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. m \\<noteq> \\<infinity> \\<Longrightarrow>\n    the_enat (m - enat n) = the_enat m - n", "by auto"], ["", "lemma enat_the_enat_le: \"enat (the_enat x) \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (the_enat x) \\<le> x", "by (cases x; simp)"], ["", "lemma enat_the_enat_minus_le: \"enat (the_enat (x - y)) \\<le> x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (the_enat (x - y)) \\<le> x", "by (cases x; cases y; simp)"], ["", "lemma enat_le_imp_minus_le: \"k \\<le> m \\<Longrightarrow> k - n \\<le> m\" for k m n :: enat"], ["proof (prove)\ngoal (1 subgoal):\n 1. k \\<le> m \\<Longrightarrow> k - n \\<le> m", "by (metis Groups.add_ac(2) enat_diff_diff_eq enat_ord_simps(3) enat_sub_add_same\n    enat_the_enat_iden enat_the_enat_minus_le idiff_0_right idiff_infinity idiff_infinity_right\n    order_trans_rules(23) plus_enat_simps(3))"], ["", "lemma add_diff_assoc2_enat: \"m \\<ge> n \\<Longrightarrow> m - n + p = m + p - n\" for m n p :: enat"], ["proof (prove)\ngoal (1 subgoal):\n 1. n \\<le> m \\<Longrightarrow> m - n + p = m + p - n", "by (cases m; cases n; cases p; auto)"], ["", "lemma enat_mult_minus_distrib: \"enat x * (y - z) = enat x * y - enat x * z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat x * (y - z) = enat x * y - enat x * z", "by (cases y; cases z; auto simp: enat_0 right_diff_distrib')"], ["", "subsection \\<open>Multisets\\<close>"], ["", "lemma add_mset_lt_left_lt: \"a < b \\<Longrightarrow> add_mset a A < add_mset b A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a < b \\<Longrightarrow> add_mset a A < add_mset b A", "unfolding less_multiset\\<^sub>H\\<^sub>O"], ["proof (prove)\ngoal (1 subgoal):\n 1. a < b \\<Longrightarrow>\n    add_mset a A \\<noteq> add_mset b A \\<and>\n    (\\<forall>y.\n        count (add_mset b A) y < count (add_mset a A) y \\<longrightarrow>\n        (\\<exists>x>y. count (add_mset a A) x < count (add_mset b A) x))", "by auto"], ["", "lemma add_mset_le_left_le: \"a \\<le> b \\<Longrightarrow> add_mset a A \\<le> add_mset b A\" for a :: \"'a :: linorder\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> add_mset a A \\<le> add_mset b A", "unfolding less_multiset\\<^sub>H\\<^sub>O"], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<le> b \\<Longrightarrow> add_mset a A \\<le> add_mset b A", "by auto"], ["", "lemma add_mset_lt_right_lt: \"A < B \\<Longrightarrow> add_mset a A < add_mset a B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A < B \\<Longrightarrow> add_mset a A < add_mset a B", "unfolding less_multiset\\<^sub>H\\<^sub>O"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<noteq> B \\<and>\n    (\\<forall>y.\n        count B y < count A y \\<longrightarrow>\n        (\\<exists>x>y. count A x < count B x)) \\<Longrightarrow>\n    add_mset a A \\<noteq> add_mset a B \\<and>\n    (\\<forall>y.\n        count (add_mset a B) y < count (add_mset a A) y \\<longrightarrow>\n        (\\<exists>x>y. count (add_mset a A) x < count (add_mset a B) x))", "by auto"], ["", "lemma add_mset_le_right_le: \"A \\<le> B \\<Longrightarrow> add_mset a A \\<le> add_mset a B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<le> B \\<Longrightarrow> add_mset a A \\<le> add_mset a B", "unfolding less_multiset\\<^sub>H\\<^sub>O"], ["proof (prove)\ngoal (1 subgoal):\n 1. A \\<le> B \\<Longrightarrow> add_mset a A \\<le> add_mset a B", "by auto"], ["", "lemma add_mset_lt_lt_lt:\n  assumes a_lt_b: \"a < b\" and A_le_B: \"A < B\"\n  shows \"add_mset a A < add_mset b B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_mset a A < add_mset b B", "by (rule less_trans[OF add_mset_lt_left_lt[OF a_lt_b] add_mset_lt_right_lt[OF A_le_B]])"], ["", "lemma add_mset_lt_lt_le: \"a < b \\<Longrightarrow> A \\<le> B \\<Longrightarrow> add_mset a A < add_mset b B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; A \\<le> B\\<rbrakk>\n    \\<Longrightarrow> add_mset a A < add_mset b B", "using add_mset_lt_lt_lt le_neq_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a < ?b; ?A < ?B\\<rbrakk>\n  \\<Longrightarrow> add_mset ?a ?A < add_mset ?b ?B\n  \\<lbrakk>?a \\<le> ?b; ?a \\<noteq> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a < b; A \\<le> B\\<rbrakk>\n    \\<Longrightarrow> add_mset a A < add_mset b B", "by fastforce"], ["", "lemma add_mset_lt_le_lt: \"a \\<le> b \\<Longrightarrow> A < B \\<Longrightarrow> add_mset a A < add_mset b B\" for a :: \"'a :: linorder\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; A < B\\<rbrakk>\n    \\<Longrightarrow> add_mset a A < add_mset b B", "using add_mset_lt_lt_lt"], ["proof (prove)\nusing this:\n  \\<lbrakk>?a < ?b; ?A < ?B\\<rbrakk>\n  \\<Longrightarrow> add_mset ?a ?A < add_mset ?b ?B\n\ngoal (1 subgoal):\n 1. \\<lbrakk>a \\<le> b; A < B\\<rbrakk>\n    \\<Longrightarrow> add_mset a A < add_mset b B", "by (metis add_mset_lt_right_lt le_less)"], ["", "lemma add_mset_le_le_le:\n  fixes a :: \"'a :: linorder\"\n  assumes a_le_b: \"a \\<le> b\" and A_le_B: \"A \\<le> B\"\n  shows \"add_mset a A \\<le> add_mset b B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. add_mset a A \\<le> add_mset b B", "by (rule order.trans[OF add_mset_le_left_le[OF a_le_b] add_mset_le_right_le[OF A_le_B]])"], ["", "declare filter_eq_replicate_mset [simp] image_mset_subseteq_mono [intro]"], ["", "lemma nonempty_subseteq_mset_eq_singleton: \"M \\<noteq> {#} \\<Longrightarrow> M \\<subseteq># {#x#} \\<Longrightarrow> M = {#x#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>M \\<noteq> {#}; M \\<subseteq># {#x#}\\<rbrakk>\n    \\<Longrightarrow> M = {#x#}", "by (cases M) (auto dest: subset_mset.diff_add)"], ["", "lemma nonempty_subseteq_mset_iff_singleton: \"(M \\<noteq> {#} \\<and> M \\<subseteq># {#x#} \\<and> P) \\<longleftrightarrow> M = {#x#} \\<and> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (M \\<noteq> {#} \\<and> M \\<subseteq># {#x#} \\<and> P) =\n    (M = {#x#} \\<and> P)", "by (cases M) (auto dest: subset_mset.diff_add)"], ["", "lemma count_gt_imp_in_mset[intro]: \"count M x > n \\<Longrightarrow> x \\<in># M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. n < count M x \\<Longrightarrow> x \\<in># M", "using count_greater_zero_iff"], ["proof (prove)\nusing this:\n  (0 < count ?M ?x) = (?x \\<in># ?M)\n\ngoal (1 subgoal):\n 1. n < count M x \\<Longrightarrow> x \\<in># M", "by fastforce"], ["", "lemma size_lt_imp_ex_count_lt: \"size M < size N \\<Longrightarrow> \\<exists>x \\<in># N. count M x < count N x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size M < size N \\<Longrightarrow>\n    \\<exists>x\\<in>#N. count M x < count N x", "by (metis count_eq_zero_iff leD not_le_imp_less not_less_zero size_mset_mono subseteq_mset_def)"], ["", "lemma filter_filter_mset[simp]: \"{#x \\<in># {#x \\<in># M. Q x#}. P x#} = {#x \\<in># M. P x \\<and> Q x#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter_mset P (filter_mset Q M) = {#x \\<in># M. P x \\<and> Q x#}", "by (induct M) auto"], ["", "lemma size_filter_unsat_elem:\n  assumes \"x \\<in># M\" and \"\\<not> P x\"\n  shows \"size {#x \\<in># M. P x#} < size M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (filter_mset P M) < size M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. size (filter_mset P M) < size M", "have \"size (filter_mset P M) \\<noteq> size M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (filter_mset P M) \\<noteq> size M", "using assms"], ["proof (prove)\nusing this:\n  x \\<in># M\n  \\<not> P x\n\ngoal (1 subgoal):\n 1. size (filter_mset P M) \\<noteq> size M", "by (metis add.right_neutral add_diff_cancel_left' count_filter_mset mem_Collect_eq\n      multiset_partition nonempty_has_size set_mset_def size_union)"], ["proof (state)\nthis:\n  size (filter_mset P M) \\<noteq> size M\n\ngoal (1 subgoal):\n 1. size (filter_mset P M) < size M", "then"], ["proof (chain)\npicking this:\n  size (filter_mset P M) \\<noteq> size M", "show ?thesis"], ["proof (prove)\nusing this:\n  size (filter_mset P M) \\<noteq> size M\n\ngoal (1 subgoal):\n 1. size (filter_mset P M) < size M", "by (meson leD nat_neq_iff size_filter_mset_lesseq)"], ["proof (state)\nthis:\n  size (filter_mset P M) < size M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma size_filter_ne_elem: \"x \\<in># M \\<Longrightarrow> size {#y \\<in># M. y \\<noteq> x#} < size M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in># M \\<Longrightarrow> size {#y \\<in># M. y \\<noteq> x#} < size M", "by (simp add: size_filter_unsat_elem[of x M \"\\<lambda>y. y \\<noteq> x\"])"], ["", "lemma size_eq_ex_count_lt:\n  assumes\n    sz_m_eq_n: \"size M = size N\" and\n    m_eq_n: \"M \\<noteq> N\"\n  shows \"\\<exists>x. count M x < count N x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "obtain x where \"count M x \\<noteq> count N x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count M x \\<noteq> count N x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using m_eq_n"], ["proof (prove)\nusing this:\n  M \\<noteq> N\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count M x \\<noteq> count N x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson multiset_eqI)"], ["proof (state)\nthis:\n  count M x \\<noteq> count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "moreover"], ["proof (state)\nthis:\n  count M x \\<noteq> count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "{"], ["proof (state)\nthis:\n  count M x \\<noteq> count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "assume \"count M x < count N x\""], ["proof (state)\nthis:\n  count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "hence ?thesis"], ["proof (prove)\nusing this:\n  count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "}"], ["proof (state)\nthis:\n  count M x < count N x \\<Longrightarrow> \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "moreover"], ["proof (state)\nthis:\n  count M x < count N x \\<Longrightarrow> \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "{"], ["proof (state)\nthis:\n  count M x < count N x \\<Longrightarrow> \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "assume cnt_x: \"count M x > count N x\""], ["proof (state)\nthis:\n  count N x < count M x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "have \"size {#y \\<in># M. y = x#} + size {#y \\<in># M. y \\<noteq> x#} =\n      size {#y \\<in># N. y = x#} + size {#y \\<in># N. y \\<noteq> x#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size {#y \\<in># M. y = x#} + size {#y \\<in># M. y \\<noteq> x#} =\n    size {#y \\<in># N. y = x#} + size {#y \\<in># N. y \\<noteq> x#}", "using sz_m_eq_n multiset_partition"], ["proof (prove)\nusing this:\n  size M = size N\n  ?M = filter_mset ?P ?M + {#x \\<in># ?M. \\<not> ?P x#}\n\ngoal (1 subgoal):\n 1. size {#y \\<in># M. y = x#} + size {#y \\<in># M. y \\<noteq> x#} =\n    size {#y \\<in># N. y = x#} + size {#y \\<in># N. y \\<noteq> x#}", "by (metis size_union)"], ["proof (state)\nthis:\n  size {#y \\<in># M. y = x#} + size {#y \\<in># M. y \\<noteq> x#} =\n  size {#y \\<in># N. y = x#} + size {#y \\<in># N. y \\<noteq> x#}\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "hence sz_m_minus_x: \"size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}\""], ["proof (prove)\nusing this:\n  size {#y \\<in># M. y = x#} + size {#y \\<in># M. y \\<noteq> x#} =\n  size {#y \\<in># N. y = x#} + size {#y \\<in># N. y \\<noteq> x#}\n\ngoal (1 subgoal):\n 1. size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}", "using cnt_x"], ["proof (prove)\nusing this:\n  size {#y \\<in># M. y = x#} + size {#y \\<in># M. y \\<noteq> x#} =\n  size {#y \\<in># N. y = x#} + size {#y \\<in># N. y \\<noteq> x#}\n  count N x < count M x\n\ngoal (1 subgoal):\n 1. size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}", "by simp"], ["proof (state)\nthis:\n  size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "then"], ["proof (chain)\npicking this:\n  size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}", "obtain y where \"count {#y \\<in># M. y \\<noteq> x#} y < count {#y \\<in># N. y \\<noteq> x#} y\""], ["proof (prove)\nusing this:\n  size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        count {#y \\<in># M. y \\<noteq> x#} y\n        < count {#y \\<in># N. y \\<noteq> x#} y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using size_lt_imp_ex_count_lt[OF sz_m_minus_x]"], ["proof (prove)\nusing this:\n  size {#y \\<in># M. y \\<noteq> x#} < size {#y \\<in># N. y \\<noteq> x#}\n  \\<exists>xa\\<in>#{#y \\<in># N. y \\<noteq> x#}.\n     count {#y \\<in># M. y \\<noteq> x#} xa\n     < count {#y \\<in># N. y \\<noteq> x#} xa\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        count {#y \\<in># M. y \\<noteq> x#} y\n        < count {#y \\<in># N. y \\<noteq> x#} y \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  count {#y \\<in># M. y \\<noteq> x#} y\n  < count {#y \\<in># N. y \\<noteq> x#} y\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "hence \"count M y < count N y\""], ["proof (prove)\nusing this:\n  count {#y \\<in># M. y \\<noteq> x#} y\n  < count {#y \\<in># N. y \\<noteq> x#} y\n\ngoal (1 subgoal):\n 1. count M y < count N y", "by (metis count_filter_mset less_asym)"], ["proof (state)\nthis:\n  count M y < count N y\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "hence ?thesis"], ["proof (prove)\nusing this:\n  count M y < count N y\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "}"], ["proof (state)\nthis:\n  count N x < count M x \\<Longrightarrow> \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "ultimately"], ["proof (chain)\npicking this:\n  count M x \\<noteq> count N x\n  count M x < count N x \\<Longrightarrow> \\<exists>x. count M x < count N x\n  count N x < count M x \\<Longrightarrow> \\<exists>x. count M x < count N x", "show ?thesis"], ["proof (prove)\nusing this:\n  count M x \\<noteq> count N x\n  count M x < count N x \\<Longrightarrow> \\<exists>x. count M x < count N x\n  count N x < count M x \\<Longrightarrow> \\<exists>x. count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count M x < count N x", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>x. count M x < count N x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma count_image_mset_lt_imp_lt_raw:\n  assumes\n    \"finite A\" and\n    \"A = set_mset M \\<union> set_mset N\" and\n    \"count (image_mset f M) b < count (image_mset f N) b\"\n  shows \"\\<exists>x. f x = b \\<and> count M x < count N x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. f x = b \\<and> count M x < count N x", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A = set_mset M \\<union> set_mset N\n  count (image_mset f M) b < count (image_mset f N) b\n\ngoal (1 subgoal):\n 1. \\<exists>x. f x = b \\<and> count M x < count N x", "proof (induct A arbitrary: M N b rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F = set_mset ?M \\<union> set_mset ?N;\n   count (image_mset f ?M) ?b < count (image_mset f ?N) ?b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. f x = ?b \\<and> count ?M x < count ?N x\n  insert x F = set_mset M \\<union> set_mset N\n  count (image_mset f M) b < count (image_mset f N) b\n\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "note fin = this(1) and x_ni_f = this(2) and ih = this(3) and x_f_eq_m_n = this(4) and\n    cnt_b = this(5)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F = set_mset ?M \\<union> set_mset ?N;\n   count (image_mset f ?M) ?b < count (image_mset f ?N) ?b\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. f x = ?b \\<and> count ?M x < count ?N x\n  insert x F = set_mset M \\<union> set_mset N\n  count (image_mset f M) b < count (image_mset f N) b\n\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "let ?Ma = \"{#y \\<in># M. y \\<noteq> x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "let ?Mb = \"{#y \\<in># M. y = x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "let ?Na = \"{#y \\<in># N. y \\<noteq> x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "let ?Nb = \"{#y \\<in># N. y = x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "have m_part: \"M = ?Mb + ?Ma\" and n_part: \"N = ?Nb + ?Na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = {#y \\<in># M. y = x#} + {#y \\<in># M. y \\<noteq> x#} &&&\n    N = {#y \\<in># N. y = x#} + {#y \\<in># N. y \\<noteq> x#}", "using multiset_partition"], ["proof (prove)\nusing this:\n  ?M = filter_mset ?P ?M + {#x \\<in># ?M. \\<not> ?P x#}\n\ngoal (1 subgoal):\n 1. M = {#y \\<in># M. y = x#} + {#y \\<in># M. y \\<noteq> x#} &&&\n    N = {#y \\<in># N. y = x#} + {#y \\<in># N. y \\<noteq> x#}", "by blast+"], ["proof (state)\nthis:\n  M = {#y \\<in># M. y = x#} + {#y \\<in># M. y \\<noteq> x#}\n  N = {#y \\<in># N. y = x#} + {#y \\<in># N. y \\<noteq> x#}\n\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "have f_eq_ma_na: \"F = set_mset ?Ma \\<union> set_mset ?Na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F =\n    set_mset {#y \\<in># M. y \\<noteq> x#} \\<union>\n    set_mset {#y \\<in># N. y \\<noteq> x#}", "using x_f_eq_m_n x_ni_f"], ["proof (prove)\nusing this:\n  insert x F = set_mset M \\<union> set_mset N\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. F =\n    set_mset {#y \\<in># M. y \\<noteq> x#} \\<union>\n    set_mset {#y \\<in># N. y \\<noteq> x#}", "by auto"], ["proof (state)\nthis:\n  F =\n  set_mset {#y \\<in># M. y \\<noteq> x#} \\<union>\n  set_mset {#y \\<in># N. y \\<noteq> x#}\n\ngoal (2 subgoals):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<And>x F M N b.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N b.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n           \\<Longrightarrow> \\<exists>x.\n                                f x = b \\<and> count M x < count N x;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. f x = b \\<and> count M x < count N x", "proof (cases \"count (image_mset f ?Ma) b < count (image_mset f ?Na) b\")"], ["proof (state)\ngoal (2 subgoals):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "case cnt_ba: True"], ["proof (state)\nthis:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b\n\ngoal (2 subgoals):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "obtain xa where \"f xa = b\" and \"count ?Ma xa < count ?Na xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xa.\n        \\<lbrakk>f xa = b;\n         count {#y \\<in># M. y \\<noteq> x#} xa\n         < count {#y \\<in># N. y \\<noteq> x#} xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ih[OF f_eq_ma_na cnt_ba]"], ["proof (prove)\nusing this:\n  \\<exists>xa.\n     f xa = b \\<and>\n     count {#y \\<in># M. y \\<noteq> x#} xa\n     < count {#y \\<in># N. y \\<noteq> x#} xa\n\ngoal (1 subgoal):\n 1. (\\<And>xa.\n        \\<lbrakk>f xa = b;\n         count {#y \\<in># M. y \\<noteq> x#} xa\n         < count {#y \\<in># N. y \\<noteq> x#} xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f xa = b\n  count {#y \\<in># M. y \\<noteq> x#} xa\n  < count {#y \\<in># N. y \\<noteq> x#} xa\n\ngoal (2 subgoals):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x\n 2. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "thus ?thesis"], ["proof (prove)\nusing this:\n  f xa = b\n  count {#y \\<in># M. y \\<noteq> x#} xa\n  < count {#y \\<in># N. y \\<noteq> x#} xa\n\ngoal (1 subgoal):\n 1. \\<exists>x. f x = b \\<and> count M x < count N x", "by (metis count_filter_mset not_less0)"], ["proof (state)\nthis:\n  \\<exists>x. f x = b \\<and> count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "case cnt_ba: False"], ["proof (state)\nthis:\n  \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n         < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b\n\ngoal (1 subgoal):\n 1. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "have fx_eq_b: \"f x = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x = b", "using cnt_b cnt_ba"], ["proof (prove)\nusing this:\n  count (image_mset f M) b < count (image_mset f N) b\n  \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n         < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b\n\ngoal (1 subgoal):\n 1. f x = b", "by (subst (asm) m_part, subst (asm) n_part, auto, presburger)"], ["proof (state)\nthis:\n  f x = b\n\ngoal (1 subgoal):\n 1. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "moreover"], ["proof (state)\nthis:\n  f x = b\n\ngoal (1 subgoal):\n 1. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "have \"count M x < count N x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count M x < count N x", "using cnt_b cnt_ba"], ["proof (prove)\nusing this:\n  count (image_mset f M) b < count (image_mset f N) b\n  \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n         < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) b\n\ngoal (1 subgoal):\n 1. count M x < count N x", "by (subst (asm) m_part, subst (asm) n_part, auto simp: fx_eq_b)"], ["proof (state)\nthis:\n  count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<not> count (image_mset f {#y \\<in># M. y \\<noteq> x#}) b\n           < count (image_mset f {#y \\<in># N. y \\<noteq> x#})\n              b \\<Longrightarrow>\n    \\<exists>x. f x = b \\<and> count M x < count N x", "ultimately"], ["proof (chain)\npicking this:\n  f x = b\n  count M x < count N x", "show ?thesis"], ["proof (prove)\nusing this:\n  f x = b\n  count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>x. f x = b \\<and> count M x < count N x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. f x = b \\<and> count M x < count N x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. f x = b \\<and> count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<And>M N b.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) b < count (image_mset f N) b\\<rbrakk>\n       \\<Longrightarrow> \\<exists>x. f x = b \\<and> count M x < count N x", "qed auto"], ["", "lemma count_image_mset_lt_imp_lt:\n  assumes cnt_b: \"count (image_mset f M) b < count (image_mset f N) b\"\n  shows \"\\<exists>x. f x = b \\<and> count M x < count N x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. f x = b \\<and> count M x < count N x", "by (rule count_image_mset_lt_imp_lt_raw[of \"set_mset M \\<union> set_mset N\", OF _ refl cnt_b]) auto"], ["", "lemma count_image_mset_le_imp_lt_raw:\n  assumes\n    \"finite A\" and\n    \"A = set_mset M \\<union> set_mset N\" and\n    \"count (image_mset f M) (f a) + count N a < count (image_mset f N) (f a) + count M a\"\n  shows \"\\<exists>b. f b = f a \\<and> count M b < count N b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "using assms"], ["proof (prove)\nusing this:\n  finite A\n  A = set_mset M \\<union> set_mset N\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "proof (induct A arbitrary: M N rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F = set_mset ?M \\<union> set_mset ?N;\n   count (image_mset f ?M) (f a) + count ?N a\n   < count (image_mset f ?N) (f a) + count ?M a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count ?M b < count ?N b\n  insert x F = set_mset M \\<union> set_mset N\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "note fin = this(1) and x_ni_f = this(2) and ih = this(3) and x_f_eq_m_n = this(4) and\n    cnt_lt = this(5)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<lbrakk>F = set_mset ?M \\<union> set_mset ?N;\n   count (image_mset f ?M) (f a) + count ?N a\n   < count (image_mset f ?N) (f a) + count ?M a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count ?M b < count ?N b\n  insert x F = set_mset M \\<union> set_mset N\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "let ?Ma = \"{#y \\<in># M. y \\<noteq> x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "let ?Mb = \"{#y \\<in># M. y = x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "let ?Na = \"{#y \\<in># N. y \\<noteq> x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "let ?Nb = \"{#y \\<in># N. y = x#}\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "have m_part: \"M = ?Mb + ?Ma\" and n_part: \"N = ?Nb + ?Na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M = {#y \\<in># M. y = x#} + {#y \\<in># M. y \\<noteq> x#} &&&\n    N = {#y \\<in># N. y = x#} + {#y \\<in># N. y \\<noteq> x#}", "using multiset_partition"], ["proof (prove)\nusing this:\n  ?M = filter_mset ?P ?M + {#x \\<in># ?M. \\<not> ?P x#}\n\ngoal (1 subgoal):\n 1. M = {#y \\<in># M. y = x#} + {#y \\<in># M. y \\<noteq> x#} &&&\n    N = {#y \\<in># N. y = x#} + {#y \\<in># N. y \\<noteq> x#}", "by blast+"], ["proof (state)\nthis:\n  M = {#y \\<in># M. y = x#} + {#y \\<in># M. y \\<noteq> x#}\n  N = {#y \\<in># N. y = x#} + {#y \\<in># N. y \\<noteq> x#}\n\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "have f_eq_ma_na: \"F = set_mset ?Ma \\<union> set_mset ?Na\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F =\n    set_mset {#y \\<in># M. y \\<noteq> x#} \\<union>\n    set_mset {#y \\<in># N. y \\<noteq> x#}", "using x_f_eq_m_n x_ni_f"], ["proof (prove)\nusing this:\n  insert x F = set_mset M \\<union> set_mset N\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. F =\n    set_mset {#y \\<in># M. y \\<noteq> x#} \\<union>\n    set_mset {#y \\<in># N. y \\<noteq> x#}", "by auto"], ["proof (state)\nthis:\n  F =\n  set_mset {#y \\<in># M. y \\<noteq> x#} \\<union>\n  set_mset {#y \\<in># N. y \\<noteq> x#}\n\ngoal (2 subgoals):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<And>x F M N.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<And>M N.\n           \\<lbrakk>F = set_mset M \\<union> set_mset N;\n            count (image_mset f M) (f a) + count N a\n            < count (image_mset f N) (f a) + count M a\\<rbrakk>\n           \\<Longrightarrow> \\<exists>b.\n                                f b = f a \\<and> count M b < count N b;\n        insert x F = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "proof (cases \"f x = f a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "case fx_ne_fa: False"], ["proof (state)\nthis:\n  f x \\<noteq> f a\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have cnt_fma_fa: \"count (image_mset f ?Ma) (f a) = count (image_mset f M) (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) =\n    count (image_mset f M) (f a)", "using fx_ne_fa"], ["proof (prove)\nusing this:\n  f x \\<noteq> f a\n\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) =\n    count (image_mset f M) (f a)", "by (subst (2) m_part) auto"], ["proof (state)\nthis:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) =\n  count (image_mset f M) (f a)\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have cnt_fna_fa: \"count (image_mset f ?Na) (f a) = count (image_mset f N) (f a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) =\n    count (image_mset f N) (f a)", "using fx_ne_fa"], ["proof (prove)\nusing this:\n  f x \\<noteq> f a\n\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) =\n    count (image_mset f N) (f a)", "by (subst (2) n_part) auto"], ["proof (state)\nthis:\n  count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) =\n  count (image_mset f N) (f a)\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have cnt_ma_a: \"count ?Ma a = count M a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count {#y \\<in># M. y \\<noteq> x#} a = count M a", "using fx_ne_fa"], ["proof (prove)\nusing this:\n  f x \\<noteq> f a\n\ngoal (1 subgoal):\n 1. count {#y \\<in># M. y \\<noteq> x#} a = count M a", "by (subst (2) m_part) auto"], ["proof (state)\nthis:\n  count {#y \\<in># M. y \\<noteq> x#} a = count M a\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have cnt_na_a: \"count ?Na a = count N a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count {#y \\<in># N. y \\<noteq> x#} a = count N a", "using fx_ne_fa"], ["proof (prove)\nusing this:\n  f x \\<noteq> f a\n\ngoal (1 subgoal):\n 1. count {#y \\<in># N. y \\<noteq> x#} a = count N a", "by (subst (2) n_part) auto"], ["proof (state)\nthis:\n  count {#y \\<in># N. y \\<noteq> x#} a = count N a\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "obtain b where fb_eq_fa: \"f b = f a\" and cnt_b: \"count ?Ma b < count ?Na b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>f b = f a;\n         count {#y \\<in># M. y \\<noteq> x#} b\n         < count {#y \\<in># N. y \\<noteq> x#} b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ih[OF f_eq_ma_na] cnt_lt"], ["proof (prove)\nusing this:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a \\<Longrightarrow>\n  \\<exists>b.\n     f b = f a \\<and>\n     count {#y \\<in># M. y \\<noteq> x#} b\n     < count {#y \\<in># N. y \\<noteq> x#} b\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>f b = f a;\n         count {#y \\<in># M. y \\<noteq> x#} b\n         < count {#y \\<in># N. y \\<noteq> x#} b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding cnt_fma_fa cnt_fna_fa cnt_ma_a cnt_na_a"], ["proof (prove)\nusing this:\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a \\<Longrightarrow>\n  \\<exists>b.\n     f b = f a \\<and>\n     count {#y \\<in># M. y \\<noteq> x#} b\n     < count {#y \\<in># N. y \\<noteq> x#} b\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n\ngoal (1 subgoal):\n 1. (\\<And>b.\n        \\<lbrakk>f b = f a;\n         count {#y \\<in># M. y \\<noteq> x#} b\n         < count {#y \\<in># N. y \\<noteq> x#} b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  f b = f a\n  count {#y \\<in># M. y \\<noteq> x#} b\n  < count {#y \\<in># N. y \\<noteq> x#} b\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have fx_ne_fb: \"f x \\<noteq> f b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f x \\<noteq> f b", "using fb_eq_fa fx_ne_fa"], ["proof (prove)\nusing this:\n  f b = f a\n  f x \\<noteq> f a\n\ngoal (1 subgoal):\n 1. f x \\<noteq> f b", "by simp"], ["proof (state)\nthis:\n  f x \\<noteq> f b\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have cnt_ma_b: \"count ?Ma b = count M b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count {#y \\<in># M. y \\<noteq> x#} b = count M b", "using fx_ne_fb"], ["proof (prove)\nusing this:\n  f x \\<noteq> f b\n\ngoal (1 subgoal):\n 1. count {#y \\<in># M. y \\<noteq> x#} b = count M b", "by (subst (2) m_part) auto"], ["proof (state)\nthis:\n  count {#y \\<in># M. y \\<noteq> x#} b = count M b\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have cnt_na_b: \"count ?Na b = count N b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count {#y \\<in># N. y \\<noteq> x#} b = count N b", "using fx_ne_fb"], ["proof (prove)\nusing this:\n  f x \\<noteq> f b\n\ngoal (1 subgoal):\n 1. count {#y \\<in># N. y \\<noteq> x#} b = count N b", "by (subst (2) n_part) auto"], ["proof (state)\nthis:\n  count {#y \\<in># N. y \\<noteq> x#} b = count N b\n\ngoal (2 subgoals):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. f x \\<noteq> f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "using fb_eq_fa cnt_b"], ["proof (prove)\nusing this:\n  f b = f a\n  count {#y \\<in># M. y \\<noteq> x#} b\n  < count {#y \\<in># N. y \\<noteq> x#} b\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "unfolding cnt_ma_b cnt_na_b"], ["proof (prove)\nusing this:\n  f b = f a\n  count M b < count N b\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "by blast"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal (1 subgoal):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "case fx_eq_fa: True"], ["proof (state)\nthis:\n  f x = f a\n\ngoal (1 subgoal):\n 1. f x = f a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "proof (cases \"x = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x = a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. x \\<noteq> a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "case x_eq_a: True"], ["proof (state)\nthis:\n  x = a\n\ngoal (2 subgoals):\n 1. x = a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. x \\<noteq> a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have \"count (image_mset f ?Ma) (f a) + count ?Na a\n        < count (image_mset f ?Na) (f a) + count ?Ma a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># N. y \\<noteq> x#} a\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n      count {#y \\<in># M. y \\<noteq> x#} a", "using cnt_lt x_eq_a"], ["proof (prove)\nusing this:\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n  x = a\n\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># N. y \\<noteq> x#} a\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n      count {#y \\<in># M. y \\<noteq> x#} a", "by (subst (asm) (1 2) m_part, subst (asm) (1 2) n_part, auto)"], ["proof (state)\nthis:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n\ngoal (2 subgoals):\n 1. x = a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. x \\<noteq> a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "using ih[OF f_eq_ma_na]"], ["proof (prove)\nusing this:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a \\<Longrightarrow>\n  \\<exists>b.\n     f b = f a \\<and>\n     count {#y \\<in># M. y \\<noteq> x#} b\n     < count {#y \\<in># N. y \\<noteq> x#} b\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "by (metis count_filter_mset nat_neq_iff)"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal (1 subgoal):\n 1. x \\<noteq> a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<noteq> a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "case x_ne_a: False"], ["proof (state)\nthis:\n  x \\<noteq> a\n\ngoal (1 subgoal):\n 1. x \\<noteq> a \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "proof (cases \"count M x < count N x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "case True"], ["proof (state)\nthis:\n  count M x < count N x\n\ngoal (2 subgoals):\n 1. count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b\n 2. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "thus ?thesis"], ["proof (prove)\nusing this:\n  count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "using fx_eq_fa"], ["proof (prove)\nusing this:\n  count M x < count N x\n  f x = f a\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "by blast"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal (1 subgoal):\n 1. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "case False"], ["proof (state)\nthis:\n  \\<not> count M x < count N x\n\ngoal (1 subgoal):\n 1. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "hence cnt_x: \"count M x \\<ge> count N x\""], ["proof (prove)\nusing this:\n  \\<not> count M x < count N x\n\ngoal (1 subgoal):\n 1. count N x \\<le> count M x", "by fastforce"], ["proof (state)\nthis:\n  count N x \\<le> count M x\n\ngoal (1 subgoal):\n 1. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "have \"count M x + count (image_mset f ?Ma) (f a) + count ?Na a\n          < count N x + count (image_mset f ?Na) (f a) + count ?Ma a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count M x + count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># N. y \\<noteq> x#} a\n    < count N x + count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n      count {#y \\<in># M. y \\<noteq> x#} a", "using cnt_lt x_ne_a fx_eq_fa"], ["proof (prove)\nusing this:\n  count (image_mset f M) (f a) + count N a\n  < count (image_mset f N) (f a) + count M a\n  x \\<noteq> a\n  f x = f a\n\ngoal (1 subgoal):\n 1. count M x + count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># N. y \\<noteq> x#} a\n    < count N x + count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n      count {#y \\<in># M. y \\<noteq> x#} a", "by (subst (asm) (1 2) m_part, subst (asm) (1 2) n_part, auto)"], ["proof (state)\nthis:\n  count M x + count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count N x + count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n\ngoal (1 subgoal):\n 1. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "hence \"count (image_mset f ?Ma) (f a) + count ?Na a\n          < count (image_mset f ?Na) (f a) + count ?Ma a\""], ["proof (prove)\nusing this:\n  count M x + count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count N x + count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># N. y \\<noteq> x#} a\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n      count {#y \\<in># M. y \\<noteq> x#} a", "using cnt_x"], ["proof (prove)\nusing this:\n  count M x + count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count N x + count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n  count N x \\<le> count M x\n\ngoal (1 subgoal):\n 1. count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># N. y \\<noteq> x#} a\n    < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n      count {#y \\<in># M. y \\<noteq> x#} a", "by linarith"], ["proof (state)\nthis:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n\ngoal (1 subgoal):\n 1. \\<not> count M x < count N x \\<Longrightarrow>\n    \\<exists>b. f b = f a \\<and> count M b < count N b", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "using ih[OF f_eq_ma_na]"], ["proof (prove)\nusing this:\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a\n  count (image_mset f {#y \\<in># M. y \\<noteq> x#}) (f a) +\n  count {#y \\<in># N. y \\<noteq> x#} a\n  < count (image_mset f {#y \\<in># N. y \\<noteq> x#}) (f a) +\n    count {#y \\<in># M. y \\<noteq> x#} a \\<Longrightarrow>\n  \\<exists>b.\n     f b = f a \\<and>\n     count {#y \\<in># M. y \\<noteq> x#} b\n     < count {#y \\<in># N. y \\<noteq> x#} b\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "by (metis count_filter_mset nat_neq_iff)"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>b. f b = f a \\<and> count M b < count N b\n\ngoal (1 subgoal):\n 1. \\<And>M N.\n       \\<lbrakk>{} = set_mset M \\<union> set_mset N;\n        count (image_mset f M) (f a) + count N a\n        < count (image_mset f N) (f a) + count M a\\<rbrakk>\n       \\<Longrightarrow> \\<exists>b. f b = f a \\<and> count M b < count N b", "qed auto"], ["", "lemma count_image_mset_le_imp_lt:\n  assumes\n    \"count (image_mset f M) (f a) \\<le> count (image_mset f N) (f a)\" and\n    \"count M a > count N a\"\n  shows \"\\<exists>b. f b = f a \\<and> count M b < count N b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "using assms"], ["proof (prove)\nusing this:\n  count (image_mset f M) (f a) \\<le> count (image_mset f N) (f a)\n  count N a < count M a\n\ngoal (1 subgoal):\n 1. \\<exists>b. f b = f a \\<and> count M b < count N b", "by (auto intro: count_image_mset_le_imp_lt_raw[of \"set_mset M \\<union> set_mset N\"])"], ["", "lemma Max_in_mset: \"M \\<noteq> {#} \\<Longrightarrow> Max_mset M \\<in># M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<noteq> {#} \\<Longrightarrow> Max_mset M \\<in># M", "by simp"], ["", "lemma Max_lt_imp_lt_mset:\n  assumes n_nemp: \"N \\<noteq> {#}\" and max: \"Max_mset M < Max_mset N\" (is \"?max_M < ?max_N\")\n  shows \"M < N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M < N", "proof (cases \"M = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "case m_nemp: False"], ["proof (state)\nthis:\n  M \\<noteq> {#}\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "have max_n_in_n: \"?max_N \\<in># N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_mset N \\<in># N", "using n_nemp"], ["proof (prove)\nusing this:\n  N \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. Max_mset N \\<in># N", "by simp"], ["proof (state)\nthis:\n  Max_mset N \\<in># N\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "have max_n_nin_m: \"?max_N \\<notin># M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Max_mset N \\<notin># M", "using max Max_ge leD"], ["proof (prove)\nusing this:\n  Max_mset M < Max_mset N\n  \\<lbrakk>finite ?A; ?x \\<in> ?A\\<rbrakk> \\<Longrightarrow> ?x \\<le> Max ?A\n  ?y \\<le> ?x \\<Longrightarrow> \\<not> ?x < ?y\n\ngoal (1 subgoal):\n 1. Max_mset N \\<notin># M", "by auto"], ["proof (state)\nthis:\n  Max_mset N \\<notin># M\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "have \"M \\<noteq> N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<noteq> N", "using max"], ["proof (prove)\nusing this:\n  Max_mset M < Max_mset N\n\ngoal (1 subgoal):\n 1. M \\<noteq> N", "by auto"], ["proof (state)\nthis:\n  M \\<noteq> N\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "moreover"], ["proof (state)\nthis:\n  M \\<noteq> N\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "{"], ["proof (state)\nthis:\n  M \\<noteq> N\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "fix y"], ["proof (state)\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "assume \"count N y < count M y\""], ["proof (state)\nthis:\n  count N y < count M y\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "hence \"y \\<in># M\""], ["proof (prove)\nusing this:\n  count N y < count M y\n\ngoal (1 subgoal):\n 1. y \\<in># M", "by blast"], ["proof (state)\nthis:\n  y \\<in># M\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "hence \"?max_M \\<ge> y\""], ["proof (prove)\nusing this:\n  y \\<in># M\n\ngoal (1 subgoal):\n 1. y \\<le> Max_mset M", "by simp"], ["proof (state)\nthis:\n  y \\<le> Max_mset M\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "hence \"?max_N > y\""], ["proof (prove)\nusing this:\n  y \\<le> Max_mset M\n\ngoal (1 subgoal):\n 1. y < Max_mset N", "using max"], ["proof (prove)\nusing this:\n  y \\<le> Max_mset M\n  Max_mset M < Max_mset N\n\ngoal (1 subgoal):\n 1. y < Max_mset N", "by auto"], ["proof (state)\nthis:\n  y < Max_mset N\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "hence \"\\<exists>x > y. count M x < count N x\""], ["proof (prove)\nusing this:\n  y < Max_mset N\n\ngoal (1 subgoal):\n 1. \\<exists>x>y. count M x < count N x", "using max_n_nin_m max_n_in_n"], ["proof (prove)\nusing this:\n  y < Max_mset N\n  Max_mset N \\<notin># M\n  Max_mset N \\<in># N\n\ngoal (1 subgoal):\n 1. \\<exists>x>y. count M x < count N x", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>x>y. count M x < count N x\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "}"], ["proof (state)\nthis:\n  count N ?y2 < count M ?y2 \\<Longrightarrow>\n  \\<exists>x>?y2. count M x < count N x\n\ngoal (2 subgoals):\n 1. M = {#} \\<Longrightarrow> M < N\n 2. M \\<noteq> {#} \\<Longrightarrow> M < N", "ultimately"], ["proof (chain)\npicking this:\n  M \\<noteq> N\n  count N ?y2 < count M ?y2 \\<Longrightarrow>\n  \\<exists>x>?y2. count M x < count N x", "show ?thesis"], ["proof (prove)\nusing this:\n  M \\<noteq> N\n  count N ?y2 < count M ?y2 \\<Longrightarrow>\n  \\<exists>x>?y2. count M x < count N x\n\ngoal (1 subgoal):\n 1. M < N", "unfolding less_multiset\\<^sub>H\\<^sub>O"], ["proof (prove)\nusing this:\n  M \\<noteq> N\n  count N ?y2 < count M ?y2 \\<Longrightarrow>\n  \\<exists>x>?y2. count M x < count N x\n\ngoal (1 subgoal):\n 1. M \\<noteq> N \\<and>\n    (\\<forall>y.\n        count N y < count M y \\<longrightarrow>\n        (\\<exists>x>y. count M x < count N x))", "by blast"], ["proof (state)\nthis:\n  M < N\n\ngoal (1 subgoal):\n 1. M = {#} \\<Longrightarrow> M < N", "qed (auto simp: n_nemp)"], ["", "lemma fold_mset_singleton[simp]: \"fold_mset f z {#x#} = f x z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fold_mset f z {#x#} = f x z", "by (simp add: fold_mset_def)"], ["", "end"]]}