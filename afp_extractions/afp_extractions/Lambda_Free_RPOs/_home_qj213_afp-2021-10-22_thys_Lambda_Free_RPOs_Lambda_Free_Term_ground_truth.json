{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs/Lambda_Free_Term.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs", "problem_names": ["lemma gt_sym_antisym: \"f >\\<^sub>s g \\<Longrightarrow> \\<not> g >\\<^sub>s f\"", "lemma finite_vars_hd[simp]: \"finite (vars_hd \\<zeta>)\"", "lemma finite_syms_hd[simp]: \"finite (syms_hd \\<zeta>)\"", "lemma head_App[simp]: \"head (App s t) = head s\"", "lemma head_fun[simp]: \"head (fun s) = head s\"", "lemma\n  size_fun_lt: \"is_App s \\<Longrightarrow> size (fun s) < size s\" and\n  size_arg_lt: \"is_App s \\<Longrightarrow> size (arg s) < size s\"", "lemma\n  finite_vars[simp]: \"finite (vars s)\" and\n  finite_syms[simp]: \"finite (syms s)\"", "lemma\n  vars_head_subseteq: \"vars_hd (head s) \\<subseteq> vars s\" and\n  syms_head_subseteq: \"syms_hd (head s) \\<subseteq> syms s\"", "lemma set_args_fun: \"set (args (fun s)) \\<subseteq> set (args s)\"", "lemma arg_in_args: \"is_App s \\<Longrightarrow> arg s \\<in> set (args s)\"", "lemma\n  vars_args_subseteq: \"si \\<in> set (args s) \\<Longrightarrow> vars si \\<subseteq> vars s\" and\n  syms_args_subseteq: \"si \\<in> set (args s) \\<Longrightarrow> syms si \\<subseteq> syms s\"", "lemma args_Nil_iff_is_Hd: \"args s = [] \\<longleftrightarrow> is_Hd s\"", "lemma size_ge_num_args: \"size s \\<ge> num_args s\"", "lemma Hd_head_id: \"num_args s = 0 \\<Longrightarrow> Hd (head s) = s\"", "lemma one_arg_imp_Hd: \"num_args s = 1 \\<Longrightarrow> s = App t u \\<Longrightarrow> t = Hd (head t)\"", "lemma size_in_args: \"s \\<in> set (args t) \\<Longrightarrow> size s < size t\"", "lemma\n  vars_apps[simp]: \"vars (apps s ss) = vars s \\<union> (\\<Union>s \\<in> set ss. vars s)\" and\n  syms_apps[simp]: \"syms (apps s ss) = syms s \\<union> (\\<Union>s \\<in> set ss. syms s)\" and\n  head_apps[simp]: \"head (apps s ss) = head s\" and\n  args_apps[simp]: \"args (apps s ss) = args s @ ss\" and\n  is_App_apps[simp]: \"is_App (apps s ss) \\<longleftrightarrow> args (apps s ss) \\<noteq> []\" and\n  fun_apps_Nil[simp]: \"fun (apps s []) = fun s\" and\n  fun_apps_Cons[simp]: \"fun (apps (App s sa) ss) = apps s (butlast (sa # ss))\" and\n  arg_apps_Nil[simp]: \"arg (apps s []) = arg s\" and\n  arg_apps_Cons[simp]: \"arg (apps (App s sa) ss) = last (sa # ss)\"", "lemma apps_append[simp]: \"apps s (ss @ ts) = apps (apps s ss) ts\"", "lemma App_apps: \"App (apps s ts) t = apps s (ts @ [t])\"", "lemma tm_inject_apps[iff, induct_simp]: \"apps (Hd \\<zeta>) ss = apps (Hd \\<xi>) ts \\<longleftrightarrow> \\<zeta> = \\<xi> \\<and> ss = ts\"", "lemma tm_collapse_apps[simp]: \"apps (Hd (head s)) (args s) = s\"", "lemma tm_expand_apps: \"head s = head t \\<Longrightarrow> args s = args t \\<Longrightarrow> s = t\"", "lemma tm_exhaust_apps_sel[case_names apps]: \"(s = apps (Hd (head s)) (args s) \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma tm_exhaust_apps[case_names apps]: \"(\\<And>\\<zeta> ss. s = apps (Hd \\<zeta>) ss \\<Longrightarrow> P) \\<Longrightarrow> P\"", "lemma tm_induct_apps[case_names apps]:\n  assumes \"\\<And>\\<zeta> ss. (\\<And>s. s \\<in> set ss \\<Longrightarrow> P s) \\<Longrightarrow> P (apps (Hd \\<zeta>) ss)\"\n  shows \"P s\"", "lemma\n  ground_fun: \"ground s \\<Longrightarrow> ground (fun s)\" and\n  ground_arg: \"ground s \\<Longrightarrow> ground (arg s)\"", "lemma ground_head: \"ground s \\<Longrightarrow> is_Sym (head s)\"", "lemma ground_args: \"t \\<in> set (args s) \\<Longrightarrow> ground s \\<Longrightarrow> ground t\"", "lemma set_vars_mset[simp]: \"set_mset (vars_mset t) = vars t\"", "lemma vars_mset_empty_iff[iff]: \"vars_mset s = {#} \\<longleftrightarrow> ground s\"", "lemma vars_mset_fun[intro]: \"vars_mset (fun t) \\<subseteq># vars_mset t\"", "lemma vars_mset_arg[intro]: \"vars_mset (arg t) \\<subseteq># vars_mset t\"", "lemma hsize_size: \"hsize t * 2 = size t + 1\"", "lemma hsize_pos[simp]: \"hsize t > 0\"", "lemma hsize_fun_lt: \"is_App s \\<Longrightarrow> hsize (fun s) < hsize s\"", "lemma hsize_arg_lt: \"is_App s \\<Longrightarrow> hsize (arg s) < hsize s\"", "lemma hsize_ge_num_args: \"hsize s \\<ge> hsize s\"", "lemma hsize_in_args: \"s \\<in> set (args t) \\<Longrightarrow> hsize s < hsize t\"", "lemma hsize_apps: \"hsize (apps t ts) = hsize t + sum_list (map hsize ts)\"", "lemma hsize_args: \"1 + sum_list (map hsize (args t)) = hsize t\"", "lemma subst_apps[simp]: \"subst \\<rho> (apps s ts) = apps (subst \\<rho> s) (map (subst \\<rho>) ts)\"", "lemma head_subst[simp]: \"head (subst \\<rho> s) = head (subst \\<rho> (Hd (head s)))\"", "lemma args_subst[simp]:\n  \"args (subst \\<rho> s) = (case head s of Var x \\<Rightarrow> args (\\<rho> x) | Sym f \\<Rightarrow> []) @ map (subst \\<rho>) (args s)\"", "lemma ground_imp_subst_iden: \"ground s \\<Longrightarrow> subst \\<rho> s = s\"", "lemma vars_mset_subst[simp]: \"vars_mset (subst \\<rho> s) = (\\<Sum>\\<^sub># {#vars_mset (\\<rho> x). x \\<in># vars_mset s#})\"", "lemma vars_mset_subst_subseteq:\n  \"vars_mset t \\<supseteq># vars_mset s \\<Longrightarrow> vars_mset (subst \\<rho> t) \\<supseteq># vars_mset (subst \\<rho> s)\"", "lemma vars_subst_subseteq: \"vars t \\<supseteq> vars s \\<Longrightarrow> vars (subst \\<rho> t) \\<supseteq> vars (subst \\<rho> s)\"", "lemma in_vars_imp_sub: \"x \\<in> vars s \\<longleftrightarrow> sub (Hd (Var x)) s\"", "lemma sub_args: \"s \\<in> set (args t) \\<Longrightarrow> sub s t\"", "lemma sub_size: \"sub s t \\<Longrightarrow> size s \\<le> size t\"", "lemma sub_subst: \"sub s t \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> t)\"", "lemma proper_sub_Hd[simp]: \"\\<not> proper_sub s (Hd \\<zeta>)\"", "lemma proper_sub_subst:\n  assumes psub: \"proper_sub s t\"\n  shows \"proper_sub (subst \\<rho> s) (subst \\<rho> t)\"", "lemma arity_simps[simp]:\n  \"arity (Hd \\<zeta>) = arity_hd \\<zeta>\"\n  \"arity (App s t) = arity s - 1\"", "lemma arity_apps[simp]: \"arity (apps s ts) = arity s - length ts\"", "lemma wary_fun[intro]: \"wary t \\<Longrightarrow> wary (fun t)\"", "lemma wary_arg[intro]: \"wary t \\<Longrightarrow> wary (arg t)\"", "lemma wary_args: \"s \\<in> set (args t) \\<Longrightarrow> wary t \\<Longrightarrow> wary s\"", "lemma wary_sub: \"sub s t \\<Longrightarrow> wary t \\<Longrightarrow> wary s\"", "lemma wary_inf_ary: \"(\\<And>\\<zeta>. arity_hd \\<zeta> = \\<infinity>) \\<Longrightarrow> wary s\"", "lemma wary_num_args_le_arity_head: \"wary s \\<Longrightarrow> num_args s \\<le> arity_hd (head s)\"", "lemma wary_apps:\n  \"wary s \\<Longrightarrow> (\\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa) \\<Longrightarrow> length ss \\<le> arity s \\<Longrightarrow> wary (apps s ss)\"", "lemma wary_cases_apps[consumes 1, case_names apps]:\n  assumes\n    wary_t: \"wary t\" and\n    apps: \"\\<And>\\<zeta> ss. t = apps (Hd \\<zeta>) ss \\<Longrightarrow> (\\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa) \\<Longrightarrow> length ss \\<le> arity_hd \\<zeta> \\<Longrightarrow> P\"\n  shows P", "lemma arity_hd_head: \"wary s \\<Longrightarrow> arity_hd (head s) = arity s + num_args s\"", "lemma arity_head_ge: \"arity_hd (head s) \\<ge> arity s\"", "lemma wary_fo_args: \"s \\<in> set (args t) \\<Longrightarrow> wary_fo t \\<Longrightarrow> wary_fo s\"", "lemma wary_fo_arg: \"wary_fo (App s t) \\<Longrightarrow> wary_fo t\"", "lemma ground_heads_arity: \"f \\<in> ground_heads \\<zeta> \\<Longrightarrow> arity_sym f \\<ge> arity_hd \\<zeta>\"", "lemma ground_heads_nonempty[simp]: \"ground_heads \\<zeta> \\<noteq> {}\"", "lemma sym_in_ground_heads: \"is_Sym \\<zeta> \\<Longrightarrow> sym \\<zeta> \\<in> ground_heads \\<zeta>\"", "lemma ground_hd_in_ground_heads: \"ground s \\<Longrightarrow> sym (head s) \\<in> ground_heads (head s)\"", "lemma some_ground_head_arity: \"arity_sym (SOME f. f \\<in> ground_heads (Var x)) \\<ge> arity_var x\"", "lemma strict_imp_wary_subst: \"strict_wary_subst \\<rho> \\<Longrightarrow> wary_subst \\<rho>\"", "lemma wary_subst_wary:\n  assumes wary_\\<rho>: \"wary_subst \\<rho>\" and wary_s: \"wary s\"\n  shows \"wary (subst \\<rho> s)\"", "lemmas strict_wary_subst_wary = wary_subst_wary[OF strict_imp_wary_subst]", "lemma wary_subst_ground_heads:\n  assumes wary_\\<rho>: \"wary_subst \\<rho>\"\n  shows \"ground_heads (head (subst \\<rho> s)) \\<subseteq> ground_heads (head s)\"", "lemmas strict_wary_subst_ground_heads = wary_subst_ground_heads[OF strict_imp_wary_subst]", "lemma ground_grounding_\\<rho>: \"ground (subst grounding_\\<rho> s)\"", "lemma strict_wary_grounding_\\<rho>: \"strict_wary_subst grounding_\\<rho>\"", "lemmas wary_grounding_\\<rho> = strict_wary_grounding_\\<rho>[THEN strict_imp_wary_subst]", "lemma gt_hd_irrefl: \"\\<not> \\<zeta> >\\<^sub>h\\<^sub>d \\<zeta>\"", "lemma gt_hd_trans: \"\\<chi> >\\<^sub>h\\<^sub>d \\<xi> \\<Longrightarrow> \\<xi> >\\<^sub>h\\<^sub>d \\<zeta> \\<Longrightarrow> \\<chi> >\\<^sub>h\\<^sub>d \\<zeta>\"", "lemma gt_sym_imp_hd: \"g >\\<^sub>s f \\<Longrightarrow> Sym g >\\<^sub>h\\<^sub>d Sym f\"", "lemma not_comp_hd_imp_Var: \"\\<not> \\<xi> \\<le>\\<ge>\\<^sub>h\\<^sub>d \\<zeta> \\<Longrightarrow> is_Var \\<zeta> \\<or> is_Var \\<xi>\""], "translations": [["", "lemma gt_sym_antisym: \"f >\\<^sub>s g \\<Longrightarrow> \\<not> g >\\<^sub>s f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f >\\<^sub>s g \\<Longrightarrow> \\<not> g >\\<^sub>s f", "by (metis gt_sym_irrefl gt_sym_trans)"], ["", "end"], ["", "subsection \\<open>Heads\\<close>"], ["", "datatype (plugins del: size) (syms_hd: 's, vars_hd: 'v) hd =\n  is_Var: Var (var: 'v)\n| Sym (sym: 's)"], ["", "abbreviation is_Sym :: \"('s, 'v) hd \\<Rightarrow> bool\" where\n  \"is_Sym \\<zeta> \\<equiv> \\<not> is_Var \\<zeta>\""], ["", "lemma finite_vars_hd[simp]: \"finite (vars_hd \\<zeta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vars_hd \\<zeta>)", "by (cases \\<zeta>) auto"], ["", "lemma finite_syms_hd[simp]: \"finite (syms_hd \\<zeta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (syms_hd \\<zeta>)", "by (cases \\<zeta>) auto"], ["", "subsection \\<open>Terms\\<close>"], ["", "consts head0 :: 'a"], ["", "datatype (syms: 's, vars: 'v) tm =\n  is_Hd: Hd (head: \"('s, 'v) hd\")\n| App (\"fun\": \"('s, 'v) tm\") (arg: \"('s, 'v) tm\")\nwhere\n  \"head (App s _) = head0 s\"\n| \"fun (Hd \\<zeta>) = Hd \\<zeta>\"\n| \"arg (Hd \\<zeta>) = Hd \\<zeta>\""], ["", "overloading head0 \\<equiv> \"head0 :: ('s, 'v) tm \\<Rightarrow> ('s, 'v) hd\"\nbegin"], ["", "primrec head0 :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) hd\" where\n  \"head0 (Hd \\<zeta>) = \\<zeta>\"\n| \"head0 (App s _) = head0 s\""], ["", "end"], ["", "lemma head_App[simp]: \"head (App s t) = head s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (App s t) = head s", "by (cases s) auto"], ["", "declare tm.sel(2)[simp del]"], ["", "lemma head_fun[simp]: \"head (fun s) = head s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (fun s) = head s", "by (cases s) auto"], ["", "abbreviation ground :: \"('s, 'v) tm \\<Rightarrow> bool\" where\n  \"ground t \\<equiv> vars t = {}\""], ["", "abbreviation is_App :: \"('s, 'v) tm \\<Rightarrow> bool\" where\n  \"is_App s \\<equiv> \\<not> is_Hd s\""], ["", "lemma\n  size_fun_lt: \"is_App s \\<Longrightarrow> size (fun s) < size s\" and\n  size_arg_lt: \"is_App s \\<Longrightarrow> size (arg s) < size s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (is_App s \\<Longrightarrow> size (fun s) < size s) &&&\n    (is_App s \\<Longrightarrow> size (arg s) < size s)", "by (cases s; simp)+"], ["", "lemma\n  finite_vars[simp]: \"finite (vars s)\" and\n  finite_syms[simp]: \"finite (syms s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (vars s) &&& finite (syms s)", "by (induct s) auto"], ["", "lemma\n  vars_head_subseteq: \"vars_hd (head s) \\<subseteq> vars s\" and\n  syms_head_subseteq: \"syms_hd (head s) \\<subseteq> syms s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_hd (head s) \\<subseteq> vars s &&&\n    syms_hd (head s) \\<subseteq> syms s", "by (induct s) auto"], ["", "fun args :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm list\" where\n  \"args (Hd _) = []\"\n| \"args (App s t) = args s @ [t]\""], ["", "lemma set_args_fun: \"set (args (fun s)) \\<subseteq> set (args s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (args (fun s)) \\<subseteq> set (args s)", "by (cases s) auto"], ["", "lemma arg_in_args: \"is_App s \\<Longrightarrow> arg s \\<in> set (args s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App s \\<Longrightarrow> arg s \\<in> set (args s)", "by (cases s rule: tm.exhaust) auto"], ["", "lemma\n  vars_args_subseteq: \"si \\<in> set (args s) \\<Longrightarrow> vars si \\<subseteq> vars s\" and\n  syms_args_subseteq: \"si \\<in> set (args s) \\<Longrightarrow> syms si \\<subseteq> syms s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (si \\<in> set (args s) \\<Longrightarrow> vars si \\<subseteq> vars s) &&&\n    (si \\<in> set (args s) \\<Longrightarrow> syms si \\<subseteq> syms s)", "by (induct s) auto"], ["", "lemma args_Nil_iff_is_Hd: \"args s = [] \\<longleftrightarrow> is_Hd s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (args s = []) = is_Hd s", "by (cases s) auto"], ["", "abbreviation num_args :: \"('s, 'v) tm \\<Rightarrow> nat\" where\n  \"num_args s \\<equiv> length (args s)\""], ["", "lemma size_ge_num_args: \"size s \\<ge> num_args s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args s \\<le> size s", "by (induct s) auto"], ["", "lemma Hd_head_id: \"num_args s = 0 \\<Longrightarrow> Hd (head s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. num_args s = 0 \\<Longrightarrow> Hd (head s) = s", "by (metis args.cases args.simps(2) length_0_conv snoc_eq_iff_butlast tm.collapse(1) tm.disc(1))"], ["", "lemma one_arg_imp_Hd: \"num_args s = 1 \\<Longrightarrow> s = App t u \\<Longrightarrow> t = Hd (head t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>num_args s = 1; s = App t u\\<rbrakk>\n    \\<Longrightarrow> t = Hd (head t)", "by (simp add: Hd_head_id)"], ["", "lemma size_in_args: \"s \\<in> set (args t) \\<Longrightarrow> size s < size t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> set (args t) \\<Longrightarrow> size s < size t", "by (induct t) auto"], ["", "primrec apps :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm list \\<Rightarrow> ('s, 'v) tm\" where\n  \"apps s [] = s\"\n| \"apps s (t # ts) = apps (App s t) ts\""], ["", "lemma\n  vars_apps[simp]: \"vars (apps s ss) = vars s \\<union> (\\<Union>s \\<in> set ss. vars s)\" and\n  syms_apps[simp]: \"syms (apps s ss) = syms s \\<union> (\\<Union>s \\<in> set ss. syms s)\" and\n  head_apps[simp]: \"head (apps s ss) = head s\" and\n  args_apps[simp]: \"args (apps s ss) = args s @ ss\" and\n  is_App_apps[simp]: \"is_App (apps s ss) \\<longleftrightarrow> args (apps s ss) \\<noteq> []\" and\n  fun_apps_Nil[simp]: \"fun (apps s []) = fun s\" and\n  fun_apps_Cons[simp]: \"fun (apps (App s sa) ss) = apps s (butlast (sa # ss))\" and\n  arg_apps_Nil[simp]: \"arg (apps s []) = arg s\" and\n  arg_apps_Cons[simp]: \"arg (apps (App s sa) ss) = last (sa # ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((vars (apps s ss) = vars s \\<union> \\<Union> (vars ` set ss) &&&\n      syms (apps s ss) = syms s \\<union> \\<Union> (syms ` set ss)) &&&\n     head (apps s ss) = head s &&& args (apps s ss) = args s @ ss) &&&\n    (is_App (apps s ss) = (args (apps s ss) \\<noteq> []) &&&\n     fun (apps s []) = fun s) &&&\n    fun (apps (App s sa) ss) = apps s (butlast (sa # ss)) &&&\n    arg (apps s []) = arg s &&& arg (apps (App s sa) ss) = last (sa # ss)", "by (induct ss arbitrary: s sa) (auto simp: args_Nil_iff_is_Hd)"], ["", "lemma apps_append[simp]: \"apps s (ss @ ts) = apps (apps s ss) ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apps s (ss @ ts) = apps (apps s ss) ts", "by (induct ss arbitrary: s ts) auto"], ["", "lemma App_apps: \"App (apps s ts) t = apps s (ts @ [t])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. App (apps s ts) t = apps s (ts @ [t])", "by simp"], ["", "lemma tm_inject_apps[iff, induct_simp]: \"apps (Hd \\<zeta>) ss = apps (Hd \\<xi>) ts \\<longleftrightarrow> \\<zeta> = \\<xi> \\<and> ss = ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (apps (Hd \\<zeta>) ss = apps (Hd \\<xi>) ts) =\n    (\\<zeta> = \\<xi> \\<and> ss = ts)", "by (metis args_apps head_apps same_append_eq tm.sel(1))"], ["", "lemma tm_collapse_apps[simp]: \"apps (Hd (head s)) (args s) = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. apps (Hd (head s)) (args s) = s", "by (induct s) auto"], ["", "lemma tm_expand_apps: \"head s = head t \\<Longrightarrow> args s = args t \\<Longrightarrow> s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>head s = head t; args s = args t\\<rbrakk>\n    \\<Longrightarrow> s = t", "by (metis tm_collapse_apps)"], ["", "lemma tm_exhaust_apps_sel[case_names apps]: \"(s = apps (Hd (head s)) (args s) \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s = apps (Hd (head s)) (args s) \\<Longrightarrow> P) \\<Longrightarrow>\n    P", "by (atomize_elim, induct s) auto"], ["", "lemma tm_exhaust_apps[case_names apps]: \"(\\<And>\\<zeta> ss. s = apps (Hd \\<zeta>) ss \\<Longrightarrow> P) \\<Longrightarrow> P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta> ss.\n        s = apps (Hd \\<zeta>) ss \\<Longrightarrow> P) \\<Longrightarrow>\n    P", "by (metis tm_collapse_apps)"], ["", "lemma tm_induct_apps[case_names apps]:\n  assumes \"\\<And>\\<zeta> ss. (\\<And>s. s \\<in> set ss \\<Longrightarrow> P s) \\<Longrightarrow> P (apps (Hd \\<zeta>) ss)\"\n  shows \"P s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s", "using assms"], ["proof (prove)\nusing this:\n  (\\<And>s. s \\<in> set ?ss \\<Longrightarrow> P s) \\<Longrightarrow>\n  P (apps (Hd ?\\<zeta>) ?ss)\n\ngoal (1 subgoal):\n 1. P s", "by (induct s taking: size rule: measure_induct_rule) (metis size_in_args tm_collapse_apps)"], ["", "lemma\n  ground_fun: \"ground s \\<Longrightarrow> ground (fun s)\" and\n  ground_arg: \"ground s \\<Longrightarrow> ground (arg s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (ground s \\<Longrightarrow> ground (fun s)) &&&\n    (ground s \\<Longrightarrow> ground (arg s))", "by (induct s) auto"], ["", "lemma ground_head: \"ground s \\<Longrightarrow> is_Sym (head s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground s \\<Longrightarrow> is_Sym (head s)", "by (cases s rule: tm_exhaust_apps) (auto simp: is_Var_def)"], ["", "lemma ground_args: \"t \\<in> set (args s) \\<Longrightarrow> ground s \\<Longrightarrow> ground t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>t \\<in> set (args s); ground s\\<rbrakk>\n    \\<Longrightarrow> ground t", "by (induct s rule: tm_induct_apps) auto"], ["", "primrec vars_mset :: \"('s, 'v) tm \\<Rightarrow> 'v multiset\" where\n  \"vars_mset (Hd \\<zeta>) = mset_set (vars_hd \\<zeta>)\"\n| \"vars_mset (App s t) = vars_mset s + vars_mset t\""], ["", "lemma set_vars_mset[simp]: \"set_mset (vars_mset t) = vars t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (vars_mset t) = vars t", "by (induct t) auto"], ["", "lemma vars_mset_empty_iff[iff]: \"vars_mset s = {#} \\<longleftrightarrow> ground s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (vars_mset s = {#}) = ground s", "by (induct s) (auto simp: mset_set_empty_iff)"], ["", "lemma vars_mset_fun[intro]: \"vars_mset (fun t) \\<subseteq># vars_mset t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_mset (fun t) \\<subseteq># vars_mset t", "by (cases t) auto"], ["", "lemma vars_mset_arg[intro]: \"vars_mset (arg t) \\<subseteq># vars_mset t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_mset (arg t) \\<subseteq># vars_mset t", "by (cases t) auto"], ["", "subsection \\<open>hsize\\<close>"], ["", "text \\<open>The hsize of a term is the number of heads (Syms or Vars) in the term.\\<close>"], ["", "primrec hsize :: \"('s, 'v) tm \\<Rightarrow> nat\" where\n  \"hsize (Hd \\<zeta>) = 1\"\n| \"hsize (App s t) = hsize s + hsize t\""], ["", "lemma hsize_size: \"hsize t * 2 = size t + 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hsize t * 2 = size t + 1", "by (induct t) auto"], ["", "lemma hsize_pos[simp]: \"hsize t > 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 < hsize t", "by (induction t; simp)"], ["", "lemma hsize_fun_lt: \"is_App s \\<Longrightarrow> hsize (fun s) < hsize s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App s \\<Longrightarrow> hsize (fun s) < hsize s", "by (cases s; simp)"], ["", "lemma hsize_arg_lt: \"is_App s \\<Longrightarrow> hsize (arg s) < hsize s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_App s \\<Longrightarrow> hsize (arg s) < hsize s", "by (cases s; simp)"], ["", "lemma hsize_ge_num_args: \"hsize s \\<ge> hsize s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hsize s \\<le> hsize s", "by (induct s) auto"], ["", "lemma hsize_in_args: \"s \\<in> set (args t) \\<Longrightarrow> hsize s < hsize t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> set (args t) \\<Longrightarrow> hsize s < hsize t", "by (induct t) auto"], ["", "lemma hsize_apps: \"hsize (apps t ts) = hsize t + sum_list (map hsize ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hsize (apps t ts) = hsize t + sum_list (map hsize ts)", "by (induct ts arbitrary:t; simp)"], ["", "lemma hsize_args: \"1 + sum_list (map hsize (args t)) = hsize t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 1 + sum_list (map hsize (args t)) = hsize t", "by (metis hsize.simps(1) hsize_apps tm_collapse_apps)"], ["", "subsection \\<open>Substitutions\\<close>"], ["", "primrec subst :: \"('v \\<Rightarrow> ('s, 'v) tm) \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> ('s, 'v) tm\" where\n  \"subst \\<rho> (Hd \\<zeta>) = (case \\<zeta> of Var x \\<Rightarrow> \\<rho> x | Sym f \\<Rightarrow> Hd (Sym f))\"\n| \"subst \\<rho> (App s t) = App (subst \\<rho> s) (subst \\<rho> t)\""], ["", "lemma subst_apps[simp]: \"subst \\<rho> (apps s ts) = apps (subst \\<rho> s) (map (subst \\<rho>) ts)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. subst \\<rho> (apps s ts) = apps (subst \\<rho> s) (map (subst \\<rho>) ts)", "by (induct ts arbitrary: s) auto"], ["", "lemma head_subst[simp]: \"head (subst \\<rho> s) = head (subst \\<rho> (Hd (head s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. head (subst \\<rho> s) = head (subst \\<rho> (Hd (head s)))", "by (cases s rule: tm_exhaust_apps) (auto split: hd.split)"], ["", "lemma args_subst[simp]:\n  \"args (subst \\<rho> s) = (case head s of Var x \\<Rightarrow> args (\\<rho> x) | Sym f \\<Rightarrow> []) @ map (subst \\<rho>) (args s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. args (subst \\<rho> s) =\n    (case head s of Var x \\<Rightarrow> args (\\<rho> x)\n     | Sym f \\<Rightarrow> []) @\n    map (subst \\<rho>) (args s)", "by (cases s rule: tm_exhaust_apps) (auto split: hd.split)"], ["", "lemma ground_imp_subst_iden: \"ground s \\<Longrightarrow> subst \\<rho> s = s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground s \\<Longrightarrow> subst \\<rho> s = s", "by (induct s) (auto split: hd.split)"], ["", "lemma vars_mset_subst[simp]: \"vars_mset (subst \\<rho> s) = (\\<Sum>\\<^sub># {#vars_mset (\\<rho> x). x \\<in># vars_mset s#})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_mset (subst \\<rho> s) =\n    (\\<Sum>x\\<in>#vars_mset s. vars_mset (\\<rho> x))", "proof (induct s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       vars_mset (subst \\<rho> (Hd x)) =\n       (\\<Sum>x\\<in>#vars_mset (Hd x). vars_mset (\\<rho> x))\n 2. \\<And>s1 s2.\n       \\<lbrakk>vars_mset (subst \\<rho> s1) =\n                (\\<Sum>x\\<in>#vars_mset s1. vars_mset (\\<rho> x));\n        vars_mset (subst \\<rho> s2) =\n        (\\<Sum>x\\<in>#vars_mset s2. vars_mset (\\<rho> x))\\<rbrakk>\n       \\<Longrightarrow> vars_mset (subst \\<rho> (App s1 s2)) =\n                         (\\<Sum>x\\<in>#vars_mset\n  (App s1 s2). vars_mset (\\<rho> x))", "case (Hd \\<zeta>)"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>x.\n       vars_mset (subst \\<rho> (Hd x)) =\n       (\\<Sum>x\\<in>#vars_mset (Hd x). vars_mset (\\<rho> x))\n 2. \\<And>s1 s2.\n       \\<lbrakk>vars_mset (subst \\<rho> s1) =\n                (\\<Sum>x\\<in>#vars_mset s1. vars_mset (\\<rho> x));\n        vars_mset (subst \\<rho> s2) =\n        (\\<Sum>x\\<in>#vars_mset s2. vars_mset (\\<rho> x))\\<rbrakk>\n       \\<Longrightarrow> vars_mset (subst \\<rho> (App s1 s2)) =\n                         (\\<Sum>x\\<in>#vars_mset\n  (App s1 s2). vars_mset (\\<rho> x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_mset (subst \\<rho> (Hd \\<zeta>)) =\n    (\\<Sum>x\\<in>#vars_mset (Hd \\<zeta>). vars_mset (\\<rho> x))", "by (cases \\<zeta>) auto"], ["proof (state)\nthis:\n  vars_mset (subst \\<rho> (Hd \\<zeta>)) =\n  (\\<Sum>x\\<in>#vars_mset (Hd \\<zeta>). vars_mset (\\<rho> x))\n\ngoal (1 subgoal):\n 1. \\<And>s1 s2.\n       \\<lbrakk>vars_mset (subst \\<rho> s1) =\n                (\\<Sum>x\\<in>#vars_mset s1. vars_mset (\\<rho> x));\n        vars_mset (subst \\<rho> s2) =\n        (\\<Sum>x\\<in>#vars_mset s2. vars_mset (\\<rho> x))\\<rbrakk>\n       \\<Longrightarrow> vars_mset (subst \\<rho> (App s1 s2)) =\n                         (\\<Sum>x\\<in>#vars_mset\n  (App s1 s2). vars_mset (\\<rho> x))", "qed auto"], ["", "lemma vars_mset_subst_subseteq:\n  \"vars_mset t \\<supseteq># vars_mset s \\<Longrightarrow> vars_mset (subst \\<rho> t) \\<supseteq># vars_mset (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_mset s \\<subseteq># vars_mset t \\<Longrightarrow>\n    vars_mset (subst \\<rho> s) \\<subseteq># vars_mset (subst \\<rho> t)", "unfolding vars_mset_subst"], ["proof (prove)\ngoal (1 subgoal):\n 1. vars_mset s \\<subseteq># vars_mset t \\<Longrightarrow>\n    (\\<Sum>x\\<in>#vars_mset s. vars_mset (\\<rho> x)) \\<subseteq>#\n    (\\<Sum>x\\<in>#vars_mset t. vars_mset (\\<rho> x))", "by (metis (no_types) add_diff_cancel_right' diff_subset_eq_self image_mset_union sum_mset.union\n    subset_mset.add_diff_inverse)"], ["", "lemma vars_subst_subseteq: \"vars t \\<supseteq> vars s \\<Longrightarrow> vars (subst \\<rho> t) \\<supseteq> vars (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. vars s \\<subseteq> vars t \\<Longrightarrow>\n    vars (subst \\<rho> s) \\<subseteq> vars (subst \\<rho> t)", "unfolding set_vars_mset[symmetric] vars_mset_subst"], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (vars_mset s)\n    \\<subseteq> set_mset (vars_mset t) \\<Longrightarrow>\n    set_mset (\\<Sum>x\\<in>#vars_mset s. vars_mset (\\<rho> x))\n    \\<subseteq> set_mset (\\<Sum>x\\<in>#vars_mset t. vars_mset (\\<rho> x))", "by auto"], ["", "subsection \\<open>Subterms\\<close>"], ["", "inductive sub :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" where\n  sub_refl: \"sub s s\"\n| sub_fun: \"sub s t \\<Longrightarrow> sub s (App u t)\"\n| sub_arg: \"sub s t \\<Longrightarrow> sub s (App t u)\""], ["", "inductive_cases sub_HdE[simplified, elim]: \"sub s (Hd \\<xi>)\""], ["", "inductive_cases sub_AppE[simplified, elim]: \"sub s (App t u)\""], ["", "inductive_cases sub_Hd_HdE[simplified, elim]: \"sub (Hd \\<zeta>) (Hd \\<xi>)\""], ["", "inductive_cases sub_Hd_AppE[simplified, elim]: \"sub (Hd \\<zeta>) (App t u)\""], ["", "lemma in_vars_imp_sub: \"x \\<in> vars s \\<longleftrightarrow> sub (Hd (Var x)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x \\<in> vars s) = sub (Hd (Var x)) s", "by induct (auto intro: sub.intros elim: hd.set_cases(2))"], ["", "lemma sub_args: \"s \\<in> set (args t) \\<Longrightarrow> sub s t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<in> set (args t) \\<Longrightarrow> sub s t", "by (induct t) (auto intro: sub.intros)"], ["", "lemma sub_size: \"sub s t \\<Longrightarrow> size s \\<le> size t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub s t \\<Longrightarrow> size s \\<le> size t", "by induct auto"], ["", "lemma sub_subst: \"sub s t \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub s t \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> t)", "proof (induct t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       sub s (Hd x) \\<Longrightarrow>\n       sub (subst \\<rho> s) (subst \\<rho> (Hd x))\n 2. \\<And>t1 t2.\n       \\<lbrakk>sub s t1 \\<Longrightarrow>\n                sub (subst \\<rho> s) (subst \\<rho> t1);\n        sub s t2 \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> t2);\n        sub s (App t1 t2)\\<rbrakk>\n       \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> (App t1 t2))", "case (Hd \\<zeta>)"], ["proof (state)\nthis:\n  sub s (Hd \\<zeta>)\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       sub s (Hd x) \\<Longrightarrow>\n       sub (subst \\<rho> s) (subst \\<rho> (Hd x))\n 2. \\<And>t1 t2.\n       \\<lbrakk>sub s t1 \\<Longrightarrow>\n                sub (subst \\<rho> s) (subst \\<rho> t1);\n        sub s t2 \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> t2);\n        sub s (App t1 t2)\\<rbrakk>\n       \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> (App t1 t2))", "thus ?case"], ["proof (prove)\nusing this:\n  sub s (Hd \\<zeta>)\n\ngoal (1 subgoal):\n 1. sub (subst \\<rho> s) (subst \\<rho> (Hd \\<zeta>))", "by (cases \\<zeta>; blast intro: sub.intros)"], ["proof (state)\nthis:\n  sub (subst \\<rho> s) (subst \\<rho> (Hd \\<zeta>))\n\ngoal (1 subgoal):\n 1. \\<And>t1 t2.\n       \\<lbrakk>sub s t1 \\<Longrightarrow>\n                sub (subst \\<rho> s) (subst \\<rho> t1);\n        sub s t2 \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> t2);\n        sub s (App t1 t2)\\<rbrakk>\n       \\<Longrightarrow> sub (subst \\<rho> s) (subst \\<rho> (App t1 t2))", "qed (auto intro: sub.intros del: sub_AppE elim!: sub_AppE)"], ["", "abbreviation proper_sub :: \"('s, 'v) tm \\<Rightarrow> ('s, 'v) tm \\<Rightarrow> bool\" where\n  \"proper_sub s t \\<equiv> sub s t \\<and> s \\<noteq> t\""], ["", "lemma proper_sub_Hd[simp]: \"\\<not> proper_sub s (Hd \\<zeta>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> proper_sub s (Hd \\<zeta>)", "using sub.cases"], ["proof (prove)\nusing this:\n  \\<lbrakk>sub ?a1.0 ?a2.0;\n   \\<And>s. \\<lbrakk>?a1.0 = s; ?a2.0 = s\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>s t u.\n      \\<lbrakk>?a1.0 = s; ?a2.0 = App u t; sub s t\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>s t u.\n      \\<lbrakk>?a1.0 = s; ?a2.0 = App t u; sub s t\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> proper_sub s (Hd \\<zeta>)", "by blast"], ["", "lemma proper_sub_subst:\n  assumes psub: \"proper_sub s t\"\n  shows \"proper_sub (subst \\<rho> s) (subst \\<rho> t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_sub (subst \\<rho> s) (subst \\<rho> t)", "proof (cases t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Hd x1 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)\n 2. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "case Hd"], ["proof (state)\nthis:\n  t = Hd x1_\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       t = Hd x1 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)\n 2. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  t = Hd x1_\n\ngoal (1 subgoal):\n 1. proper_sub (subst \\<rho> s) (subst \\<rho> t)", "using psub"], ["proof (prove)\nusing this:\n  t = Hd x1_\n  proper_sub s t\n\ngoal (1 subgoal):\n 1. proper_sub (subst \\<rho> s) (subst \\<rho> t)", "by simp"], ["proof (state)\nthis:\n  proper_sub (subst \\<rho> s) (subst \\<rho> t)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "case t: (App t1 t2)"], ["proof (state)\nthis:\n  t = App t1 t2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "have \"sub s t1 \\<or> sub s t2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub s t1 \\<or> sub s t2", "using t psub"], ["proof (prove)\nusing this:\n  t = App t1 t2\n  proper_sub s t\n\ngoal (1 subgoal):\n 1. sub s t1 \\<or> sub s t2", "by blast"], ["proof (state)\nthis:\n  sub s t1 \\<or> sub s t2\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "hence \"sub (subst \\<rho> s) (subst \\<rho> t1) \\<or> sub (subst \\<rho> s) (subst \\<rho> t2)\""], ["proof (prove)\nusing this:\n  sub s t1 \\<or> sub s t2\n\ngoal (1 subgoal):\n 1. sub (subst \\<rho> s) (subst \\<rho> t1) \\<or>\n    sub (subst \\<rho> s) (subst \\<rho> t2)", "using sub_subst"], ["proof (prove)\nusing this:\n  sub s t1 \\<or> sub s t2\n  sub ?s ?t \\<Longrightarrow> sub (subst ?\\<rho> ?s) (subst ?\\<rho> ?t)\n\ngoal (1 subgoal):\n 1. sub (subst \\<rho> s) (subst \\<rho> t1) \\<or>\n    sub (subst \\<rho> s) (subst \\<rho> t2)", "by blast"], ["proof (state)\nthis:\n  sub (subst \\<rho> s) (subst \\<rho> t1) \\<or>\n  sub (subst \\<rho> s) (subst \\<rho> t2)\n\ngoal (1 subgoal):\n 1. \\<And>x21 x22.\n       t = App x21 x22 \\<Longrightarrow>\n       proper_sub (subst \\<rho> s) (subst \\<rho> t)", "thus ?thesis"], ["proof (prove)\nusing this:\n  sub (subst \\<rho> s) (subst \\<rho> t1) \\<or>\n  sub (subst \\<rho> s) (subst \\<rho> t2)\n\ngoal (1 subgoal):\n 1. proper_sub (subst \\<rho> s) (subst \\<rho> t)", "unfolding t"], ["proof (prove)\nusing this:\n  sub (subst \\<rho> s) (subst \\<rho> t1) \\<or>\n  sub (subst \\<rho> s) (subst \\<rho> t2)\n\ngoal (1 subgoal):\n 1. proper_sub (subst \\<rho> s) (subst \\<rho> (App t1 t2))", "by (auto intro: sub.intros dest: sub_size)"], ["proof (state)\nthis:\n  proper_sub (subst \\<rho> s) (subst \\<rho> t)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Maximum Arities\\<close>"], ["", "locale arity =\n  fixes\n    arity_sym :: \"'s \\<Rightarrow> enat\" and\n    arity_var :: \"'v \\<Rightarrow> enat\"\nbegin"], ["", "primrec arity_hd :: \"('s, 'v) hd \\<Rightarrow> enat\" where\n  \"arity_hd (Var x) = arity_var x\"\n| \"arity_hd (Sym f) = arity_sym f\""], ["", "definition arity :: \"('s, 'v) tm \\<Rightarrow> enat\" where\n  \"arity s = arity_hd (head s) - num_args s\""], ["", "lemma arity_simps[simp]:\n  \"arity (Hd \\<zeta>) = arity_hd \\<zeta>\"\n  \"arity (App s t) = arity s - 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity (Hd \\<zeta>) = arity_hd \\<zeta> &&& arity (App s t) = arity s - 1", "by (auto simp: arity_def enat_diff_diff_eq add.commute eSuc_enat plus_1_eSuc(1))"], ["", "lemma arity_apps[simp]: \"arity (apps s ts) = arity s - length ts\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity (apps s ts) = arity s - enat (length ts)", "proof (induct ts arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s. arity (apps s []) = arity s - enat (length [])\n 2. \\<And>a ts s.\n       (\\<And>s.\n           arity (apps s ts) = arity s - enat (length ts)) \\<Longrightarrow>\n       arity (apps s (a # ts)) = arity s - enat (length (a # ts))", "case (Cons t ts)"], ["proof (state)\nthis:\n  arity (apps ?s ts) = arity ?s - enat (length ts)\n\ngoal (2 subgoals):\n 1. \\<And>s. arity (apps s []) = arity s - enat (length [])\n 2. \\<And>a ts s.\n       (\\<And>s.\n           arity (apps s ts) = arity s - enat (length ts)) \\<Longrightarrow>\n       arity (apps s (a # ts)) = arity s - enat (length (a # ts))", "thus ?case"], ["proof (prove)\nusing this:\n  arity (apps ?s ts) = arity ?s - enat (length ts)\n\ngoal (1 subgoal):\n 1. arity (apps s (t # ts)) = arity s - enat (length (t # ts))", "by (case_tac \"arity s\"; simp add: one_enat_def)"], ["proof (state)\nthis:\n  arity (apps s (t # ts)) = arity s - enat (length (t # ts))\n\ngoal (1 subgoal):\n 1. \\<And>s. arity (apps s []) = arity s - enat (length [])", "qed simp"], ["", "inductive wary :: \"('s, 'v) tm \\<Rightarrow> bool\" where\n  wary_Hd[intro]: \"wary (Hd \\<zeta>)\"\n| wary_App[intro]: \"wary s \\<Longrightarrow> wary t \\<Longrightarrow> num_args s < arity_hd (head s) \\<Longrightarrow> wary (App s t)\""], ["", "inductive_cases wary_HdE: \"wary (Hd \\<zeta>)\""], ["", "inductive_cases wary_AppE: \"wary (App s t)\""], ["", "inductive_cases wary_binaryE[simplified]: \"wary (App (App s t) u)\""], ["", "lemma wary_fun[intro]: \"wary t \\<Longrightarrow> wary (fun t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary t \\<Longrightarrow> wary (fun t)", "by (cases t) (auto elim: wary.cases)"], ["", "lemma wary_arg[intro]: \"wary t \\<Longrightarrow> wary (arg t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary t \\<Longrightarrow> wary (arg t)", "by (cases t) (auto elim: wary.cases)"], ["", "lemma wary_args: \"s \\<in> set (args t) \\<Longrightarrow> wary t \\<Longrightarrow> wary s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> set (args t); wary t\\<rbrakk> \\<Longrightarrow> wary s", "by (induct t arbitrary: s, simp)\n   (metis Un_iff args.simps(2) wary.cases insert_iff length_pos_if_in_set\n      less_numeral_extra(3) list.set(2) list.size(3) set_append tm.distinct(1) tm.inject(2))"], ["", "lemma wary_sub: \"sub s t \\<Longrightarrow> wary t \\<Longrightarrow> wary s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>sub s t; wary t\\<rbrakk> \\<Longrightarrow> wary s", "by (induct rule: sub.induct) (auto elim: wary.cases)"], ["", "lemma wary_inf_ary: \"(\\<And>\\<zeta>. arity_hd \\<zeta> = \\<infinity>) \\<Longrightarrow> wary s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>\\<zeta>. arity_hd \\<zeta> = \\<infinity>) \\<Longrightarrow> wary s", "by induct auto"], ["", "lemma wary_num_args_le_arity_head: \"wary s \\<Longrightarrow> num_args s \\<le> arity_hd (head s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary s \\<Longrightarrow> enat (num_args s) \\<le> arity_hd (head s)", "by (induct rule: wary.induct) (auto simp: zero_enat_def[symmetric] Suc_ile_eq)"], ["", "lemma wary_apps:\n  \"wary s \\<Longrightarrow> (\\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa) \\<Longrightarrow> length ss \\<le> arity s \\<Longrightarrow> wary (apps s ss)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>wary s; \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n     enat (length ss) \\<le> arity s\\<rbrakk>\n    \\<Longrightarrow> wary (apps s ss)", "proof (induct ss arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wary s; \\<And>sa. sa \\<in> set [] \\<Longrightarrow> wary sa;\n        enat (length []) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s [])\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>wary s;\n                    \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n                    enat (length ss) \\<le> arity s\\<rbrakk>\n                   \\<Longrightarrow> wary (apps s ss);\n        wary s; \\<And>sa. sa \\<in> set (a # ss) \\<Longrightarrow> wary sa;\n        enat (length (a # ss)) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s (a # ss))", "case (Cons sa ss)"], ["proof (state)\nthis:\n  \\<lbrakk>wary ?s; \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n   enat (length ss) \\<le> arity ?s\\<rbrakk>\n  \\<Longrightarrow> wary (apps ?s ss)\n  wary s\n  ?sa \\<in> set (sa # ss) \\<Longrightarrow> wary ?sa\n  enat (length (sa # ss)) \\<le> arity s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wary s; \\<And>sa. sa \\<in> set [] \\<Longrightarrow> wary sa;\n        enat (length []) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s [])\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>wary s;\n                    \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n                    enat (length ss) \\<le> arity s\\<rbrakk>\n                   \\<Longrightarrow> wary (apps s ss);\n        wary s; \\<And>sa. sa \\<in> set (a # ss) \\<Longrightarrow> wary sa;\n        enat (length (a # ss)) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s (a # ss))", "note ih = this(1) and wary_s = this(2) and wary_ss = this(3) and nargs_s_sa_ss = this(4)"], ["proof (state)\nthis:\n  \\<lbrakk>wary ?s; \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n   enat (length ss) \\<le> arity ?s\\<rbrakk>\n  \\<Longrightarrow> wary (apps ?s ss)\n  wary s\n  ?sa \\<in> set (sa # ss) \\<Longrightarrow> wary ?sa\n  enat (length (sa # ss)) \\<le> arity s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       \\<lbrakk>wary s; \\<And>sa. sa \\<in> set [] \\<Longrightarrow> wary sa;\n        enat (length []) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s [])\n 2. \\<And>a ss s.\n       \\<lbrakk>\\<And>s.\n                   \\<lbrakk>wary s;\n                    \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n                    enat (length ss) \\<le> arity s\\<rbrakk>\n                   \\<Longrightarrow> wary (apps s ss);\n        wary s; \\<And>sa. sa \\<in> set (a # ss) \\<Longrightarrow> wary sa;\n        enat (length (a # ss)) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s (a # ss))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (apps s (sa # ss))", "unfolding apps.simps"], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (apps (App s sa) ss)", "proof (rule ih)"], ["proof (state)\ngoal (3 subgoals):\n 1. wary (App s sa)\n 2. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\n 3. enat (length ss) \\<le> arity (App s sa)", "have \"wary sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary sa", "using wary_ss"], ["proof (prove)\nusing this:\n  ?sa \\<in> set (sa # ss) \\<Longrightarrow> wary ?sa\n\ngoal (1 subgoal):\n 1. wary sa", "by simp"], ["proof (state)\nthis:\n  wary sa\n\ngoal (3 subgoals):\n 1. wary (App s sa)\n 2. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\n 3. enat (length ss) \\<le> arity (App s sa)", "moreover"], ["proof (state)\nthis:\n  wary sa\n\ngoal (3 subgoals):\n 1. wary (App s sa)\n 2. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\n 3. enat (length ss) \\<le> arity (App s sa)", "have \" enat (num_args s) < arity_hd (head s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (num_args s) < arity_hd (head s)", "by (metis (mono_tags) One_nat_def add.comm_neutral arity_def diff_add_zero enat_ord_simps(1)\n        idiff_enat_enat less_one list.size(4) nargs_s_sa_ss not_add_less2\n        order.not_eq_order_implies_strict wary_num_args_le_arity_head wary_s)"], ["proof (state)\nthis:\n  enat (num_args s) < arity_hd (head s)\n\ngoal (3 subgoals):\n 1. wary (App s sa)\n 2. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\n 3. enat (length ss) \\<le> arity (App s sa)", "ultimately"], ["proof (chain)\npicking this:\n  wary sa\n  enat (num_args s) < arity_hd (head s)", "show \"wary (App s sa)\""], ["proof (prove)\nusing this:\n  wary sa\n  enat (num_args s) < arity_hd (head s)\n\ngoal (1 subgoal):\n 1. wary (App s sa)", "by (rule wary_App[OF wary_s])"], ["proof (state)\nthis:\n  wary (App s sa)\n\ngoal (2 subgoals):\n 1. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\n 2. enat (length ss) \\<le> arity (App s sa)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\n 2. enat (length ss) \\<le> arity (App s sa)", "show \"\\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa", "using wary_ss"], ["proof (prove)\nusing this:\n  ?sa \\<in> set (sa # ss) \\<Longrightarrow> wary ?sa\n\ngoal (1 subgoal):\n 1. \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa", "by simp"], ["proof (state)\nthis:\n  ?sa \\<in> set ss \\<Longrightarrow> wary ?sa\n\ngoal (1 subgoal):\n 1. enat (length ss) \\<le> arity (App s sa)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. enat (length ss) \\<le> arity (App s sa)", "show \"length ss \\<le> arity (App s sa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (length ss) \\<le> arity (App s sa)", "proof (cases \"arity s\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>nat.\n       arity s = enat nat \\<Longrightarrow>\n       enat (length ss) \\<le> arity (App s sa)\n 2. arity s = \\<infinity> \\<Longrightarrow>\n    enat (length ss) \\<le> arity (App s sa)", "case enat"], ["proof (state)\nthis:\n  arity s = enat nat_\n\ngoal (2 subgoals):\n 1. \\<And>nat.\n       arity s = enat nat \\<Longrightarrow>\n       enat (length ss) \\<le> arity (App s sa)\n 2. arity s = \\<infinity> \\<Longrightarrow>\n    enat (length ss) \\<le> arity (App s sa)", "thus ?thesis"], ["proof (prove)\nusing this:\n  arity s = enat nat_\n\ngoal (1 subgoal):\n 1. enat (length ss) \\<le> arity (App s sa)", "using nargs_s_sa_ss"], ["proof (prove)\nusing this:\n  arity s = enat nat_\n  enat (length (sa # ss)) \\<le> arity s\n\ngoal (1 subgoal):\n 1. enat (length ss) \\<le> arity (App s sa)", "by (simp add: one_enat_def)"], ["proof (state)\nthis:\n  enat (length ss) \\<le> arity (App s sa)\n\ngoal (1 subgoal):\n 1. arity s = \\<infinity> \\<Longrightarrow>\n    enat (length ss) \\<le> arity (App s sa)", "qed simp"], ["proof (state)\nthis:\n  enat (length ss) \\<le> arity (App s sa)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wary (apps s (sa # ss))\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       \\<lbrakk>wary s; \\<And>sa. sa \\<in> set [] \\<Longrightarrow> wary sa;\n        enat (length []) \\<le> arity s\\<rbrakk>\n       \\<Longrightarrow> wary (apps s [])", "qed simp"], ["", "lemma wary_cases_apps[consumes 1, case_names apps]:\n  assumes\n    wary_t: \"wary t\" and\n    apps: \"\\<And>\\<zeta> ss. t = apps (Hd \\<zeta>) ss \\<Longrightarrow> (\\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa) \\<Longrightarrow> length ss \\<le> arity_hd \\<zeta> \\<Longrightarrow> P\"\n  shows P"], ["proof (prove)\ngoal (1 subgoal):\n 1. P", "using apps"], ["proof (prove)\nusing this:\n  \\<lbrakk>t = apps (Hd ?\\<zeta>) ?ss;\n   \\<And>sa. sa \\<in> set ?ss \\<Longrightarrow> wary sa;\n   enat (length ?ss) \\<le> arity_hd ?\\<zeta>\\<rbrakk>\n  \\<Longrightarrow> P\n\ngoal (1 subgoal):\n 1. P", "proof (atomize_elim, cases t rule: tm_exhaust_apps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<zeta> ss.\n       \\<lbrakk>\\<And>\\<zeta> ss.\n                   \\<lbrakk>t = apps (Hd \\<zeta>) ss;\n                    \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n                    enat (length ss) \\<le> arity_hd \\<zeta>\\<rbrakk>\n                   \\<Longrightarrow> P;\n        t = apps (Hd \\<zeta>) ss\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<zeta> ss.\n                            t = apps (Hd \\<zeta>) ss \\<and>\n                            (\\<forall>sa.\n                                sa \\<in> set ss \\<longrightarrow>\n                                wary sa) \\<and>\n                            enat (length ss) \\<le> arity_hd \\<zeta>", "case t: (apps \\<zeta> ss)"], ["proof (state)\nthis:\n  t = apps (Hd \\<zeta>) ss\n\ngoal (1 subgoal):\n 1. \\<And>\\<zeta> ss.\n       \\<lbrakk>\\<And>\\<zeta> ss.\n                   \\<lbrakk>t = apps (Hd \\<zeta>) ss;\n                    \\<And>sa. sa \\<in> set ss \\<Longrightarrow> wary sa;\n                    enat (length ss) \\<le> arity_hd \\<zeta>\\<rbrakk>\n                   \\<Longrightarrow> P;\n        t = apps (Hd \\<zeta>) ss\\<rbrakk>\n       \\<Longrightarrow> \\<exists>\\<zeta> ss.\n                            t = apps (Hd \\<zeta>) ss \\<and>\n                            (\\<forall>sa.\n                                sa \\<in> set ss \\<longrightarrow>\n                                wary sa) \\<and>\n                            enat (length ss) \\<le> arity_hd \\<zeta>", "show \"\\<exists>\\<zeta> ss. t = apps (Hd \\<zeta>) ss \\<and> (\\<forall>sa. sa \\<in> set ss \\<longrightarrow> wary sa) \\<and> enat (length ss) \\<le> arity_hd \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<zeta> ss.\n       t = apps (Hd \\<zeta>) ss \\<and>\n       (\\<forall>sa. sa \\<in> set ss \\<longrightarrow> wary sa) \\<and>\n       enat (length ss) \\<le> arity_hd \\<zeta>", "by (rule exI[of _ \\<zeta>], rule exI[of _ ss])\n      (auto simp: t wary_args[OF _ wary_t] wary_num_args_le_arity_head[OF wary_t, unfolded t, simplified])"], ["proof (state)\nthis:\n  \\<exists>\\<zeta> ss.\n     t = apps (Hd \\<zeta>) ss \\<and>\n     (\\<forall>sa. sa \\<in> set ss \\<longrightarrow> wary sa) \\<and>\n     enat (length ss) \\<le> arity_hd \\<zeta>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arity_hd_head: \"wary s \\<Longrightarrow> arity_hd (head s) = arity s + num_args s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary s \\<Longrightarrow> arity_hd (head s) = arity s + enat (num_args s)", "by (simp add: arity_def enat_sub_add_same wary_num_args_le_arity_head)"], ["", "lemma arity_head_ge: \"arity_hd (head s) \\<ge> arity s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity s \\<le> arity_hd (head s)", "by (induct s) (auto intro: enat_le_imp_minus_le)"], ["", "inductive wary_fo :: \"('s, 'v) tm \\<Rightarrow> bool\" where\n  wary_foI[intro]: \"is_Hd s \\<or> is_Sym (head s) \\<Longrightarrow> length (args s) = arity_hd (head s) \\<Longrightarrow>\n    (\\<forall>t \\<in> set (args s). wary_fo t) \\<Longrightarrow> wary_fo s\""], ["", "lemma wary_fo_args: \"s \\<in> set (args t) \\<Longrightarrow> wary_fo t \\<Longrightarrow> wary_fo s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> set (args t); wary_fo t\\<rbrakk>\n    \\<Longrightarrow> wary_fo s", "by (induct t arbitrary: s rule: tm_induct_apps, simp)\n    (metis args.simps(1) args_apps self_append_conv2 wary_fo.cases)"], ["", "lemma wary_fo_arg: \"wary_fo (App s t) \\<Longrightarrow> wary_fo t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary_fo (App s t) \\<Longrightarrow> wary_fo t", "by (erule wary_fo.cases) auto"], ["", "end"], ["", "subsection \\<open>Potential Heads of Ground Instances of Variables\\<close>"], ["", "locale ground_heads = gt_sym \"(>\\<^sub>s)\" + arity arity_sym arity_var\n    for\n      gt_sym :: \"'s \\<Rightarrow> 's \\<Rightarrow> bool\" (infix \">\\<^sub>s\" 50) and\n      arity_sym :: \"'s \\<Rightarrow> enat\" and\n      arity_var :: \"'v \\<Rightarrow> enat\" +\n  fixes\n    ground_heads_var :: \"'v \\<Rightarrow> 's set\"\n  assumes\n    ground_heads_var_arity: \"f \\<in> ground_heads_var x \\<Longrightarrow> arity_sym f \\<ge> arity_var x\" and\n    ground_heads_var_nonempty: \"ground_heads_var x \\<noteq> {}\"\nbegin"], ["", "primrec ground_heads :: \"('s, 'v) hd \\<Rightarrow> 's set\" where\n  \"ground_heads (Var x) = ground_heads_var x\"\n| \"ground_heads (Sym f) = {f}\""], ["", "lemma ground_heads_arity: \"f \\<in> ground_heads \\<zeta> \\<Longrightarrow> arity_sym f \\<ge> arity_hd \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> local.ground_heads \\<zeta> \\<Longrightarrow>\n    arity_hd \\<zeta> \\<le> arity_sym f", "by (cases \\<zeta>) (auto simp: ground_heads_var_arity)"], ["", "lemma ground_heads_nonempty[simp]: \"ground_heads \\<zeta> \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.ground_heads \\<zeta> \\<noteq> {}", "by (cases \\<zeta>) (auto simp: ground_heads_var_nonempty)"], ["", "lemma sym_in_ground_heads: \"is_Sym \\<zeta> \\<Longrightarrow> sym \\<zeta> \\<in> ground_heads \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. is_Sym \\<zeta> \\<Longrightarrow>\n    hd.sym \\<zeta> \\<in> local.ground_heads \\<zeta>", "by (metis ground_heads.simps(2) hd.collapse(2) hd.set_sel(1) hd.simps(16))"], ["", "lemma ground_hd_in_ground_heads: \"ground s \\<Longrightarrow> sym (head s) \\<in> ground_heads (head s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground s \\<Longrightarrow>\n    hd.sym (head s) \\<in> local.ground_heads (head s)", "by (simp add: ground_head sym_in_ground_heads)"], ["", "lemma some_ground_head_arity: \"arity_sym (SOME f. f \\<in> ground_heads (Var x)) \\<ge> arity_var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity_var x \\<le> arity_sym (SOME f. f \\<in> local.ground_heads (Var x))", "by (simp add: ground_heads_var_arity ground_heads_var_nonempty some_in_eq)"], ["", "definition wary_subst :: \"('v \\<Rightarrow> ('s, 'v) tm) \\<Rightarrow> bool\" where\n  \"wary_subst \\<rho> \\<longleftrightarrow>\n   (\\<forall>x. wary (\\<rho> x) \\<and> arity (\\<rho> x) \\<ge> arity_var x \\<and> ground_heads (head (\\<rho> x)) \\<subseteq> ground_heads_var x)\""], ["", "definition strict_wary_subst :: \"('v \\<Rightarrow> ('s, 'v) tm) \\<Rightarrow> bool\" where\n  \"strict_wary_subst \\<rho> \\<longleftrightarrow>\n   (\\<forall>x. wary (\\<rho> x) \\<and> arity (\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n    \\<and> ground_heads (head (\\<rho> x)) \\<subseteq> ground_heads_var x)\""], ["", "lemma strict_imp_wary_subst: \"strict_wary_subst \\<rho> \\<Longrightarrow> wary_subst \\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_wary_subst \\<rho> \\<Longrightarrow> wary_subst \\<rho>", "unfolding strict_wary_subst_def wary_subst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       wary (\\<rho> x) \\<and>\n       arity (\\<rho> x) \\<in> {arity_var x, \\<infinity>} \\<and>\n       local.ground_heads (head (\\<rho> x))\n       \\<subseteq> ground_heads_var x \\<Longrightarrow>\n    \\<forall>x.\n       wary (\\<rho> x) \\<and>\n       arity_var x \\<le> arity (\\<rho> x) \\<and>\n       local.ground_heads (head (\\<rho> x)) \\<subseteq> ground_heads_var x", "using eq_iff"], ["proof (prove)\nusing this:\n  (?x = ?y) = (?x \\<le> ?y \\<and> ?y \\<le> ?x)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       wary (\\<rho> x) \\<and>\n       arity (\\<rho> x) \\<in> {arity_var x, \\<infinity>} \\<and>\n       local.ground_heads (head (\\<rho> x))\n       \\<subseteq> ground_heads_var x \\<Longrightarrow>\n    \\<forall>x.\n       wary (\\<rho> x) \\<and>\n       arity_var x \\<le> arity (\\<rho> x) \\<and>\n       local.ground_heads (head (\\<rho> x)) \\<subseteq> ground_heads_var x", "by force"], ["", "lemma wary_subst_wary:\n  assumes wary_\\<rho>: \"wary_subst \\<rho>\" and wary_s: \"wary s\"\n  shows \"wary (subst \\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (subst \\<rho> s)", "using wary_s"], ["proof (prove)\nusing this:\n  wary s\n\ngoal (1 subgoal):\n 1. wary (subst \\<rho> s)", "proof (induct s rule: tm.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "case (App s t)"], ["proof (state)\nthis:\n  wary s \\<Longrightarrow> wary (subst \\<rho> s)\n  wary t \\<Longrightarrow> wary (subst \\<rho> t)\n  wary (App s t)\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "note wary_st = this(3)"], ["proof (state)\nthis:\n  wary (App s t)\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "from wary_st"], ["proof (chain)\npicking this:\n  wary (App s t)", "have wary_s: \"wary s\""], ["proof (prove)\nusing this:\n  wary (App s t)\n\ngoal (1 subgoal):\n 1. wary s", "by (rule wary_AppE)"], ["proof (state)\nthis:\n  wary s\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "from wary_st"], ["proof (chain)\npicking this:\n  wary (App s t)", "have wary_t: \"wary t\""], ["proof (prove)\nusing this:\n  wary (App s t)\n\ngoal (1 subgoal):\n 1. wary t", "by (rule wary_AppE)"], ["proof (state)\nthis:\n  wary t\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "from wary_st"], ["proof (chain)\npicking this:\n  wary (App s t)", "have nargs_s_lt: \"num_args s < arity_hd (head s)\""], ["proof (prove)\nusing this:\n  wary (App s t)\n\ngoal (1 subgoal):\n 1. enat (num_args s) < arity_hd (head s)", "by (rule wary_AppE)"], ["proof (state)\nthis:\n  enat (num_args s) < arity_hd (head s)\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "note wary_\\<rho>s = App(1)[OF wary_s]"], ["proof (state)\nthis:\n  wary (subst \\<rho> s)\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "note wary_\\<rho>t = App(2)[OF wary_t]"], ["proof (state)\nthis:\n  wary (subst \\<rho> t)\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "note wary_\\<rho>x = wary_\\<rho>[unfolded wary_subst_def, rule_format, THEN conjunct1]"], ["proof (state)\nthis:\n  wary (\\<rho> ?x1)\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "note ary_\\<rho>x = wary_\\<rho>[unfolded wary_subst_def, rule_format, THEN conjunct2]"], ["proof (state)\nthis:\n  arity_var ?x1 \\<le> arity (\\<rho> ?x1) \\<and>\n  local.ground_heads (head (\\<rho> ?x1)) \\<subseteq> ground_heads_var ?x1\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "have \"num_args (\\<rho> x) + num_args s < arity_hd (head (\\<rho> x))\" if hd_s: \"head s = Var x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "have ary_hd_s: \"arity_hd (head s) = arity_var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity_hd (head s) = arity_var x", "using hd_s arity_hd.simps(1)"], ["proof (prove)\nusing this:\n  head s = Var x\n  arity_hd (Var ?x) = arity_var ?x\n\ngoal (1 subgoal):\n 1. arity_hd (head s) = arity_var x", "by presburger"], ["proof (state)\nthis:\n  arity_hd (head s) = arity_var x\n\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "hence \"num_args s \\<le> arity (\\<rho> x)\""], ["proof (prove)\nusing this:\n  arity_hd (head s) = arity_var x\n\ngoal (1 subgoal):\n 1. enat (num_args s) \\<le> arity (\\<rho> x)", "by (metis (no_types) wary_num_args_le_arity_head ary_\\<rho>x dual_order.trans wary_s)"], ["proof (state)\nthis:\n  enat (num_args s) \\<le> arity (\\<rho> x)\n\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "hence \"num_args s + num_args (\\<rho> x) \\<le> arity_hd (head (\\<rho> x))\""], ["proof (prove)\nusing this:\n  enat (num_args s) \\<le> arity (\\<rho> x)\n\ngoal (1 subgoal):\n 1. enat (num_args s + num_args (\\<rho> x)) \\<le> arity_hd (head (\\<rho> x))", "by (metis (no_types) arity_hd_head[OF wary_\\<rho>x] add_right_mono plus_enat_simps(1))"], ["proof (state)\nthis:\n  enat (num_args s + num_args (\\<rho> x)) \\<le> arity_hd (head (\\<rho> x))\n\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "thus ?thesis"], ["proof (prove)\nusing this:\n  enat (num_args s + num_args (\\<rho> x)) \\<le> arity_hd (head (\\<rho> x))\n\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "using ary_hd_s"], ["proof (prove)\nusing this:\n  enat (num_args s + num_args (\\<rho> x)) \\<le> arity_hd (head (\\<rho> x))\n  arity_hd (head s) = arity_var x\n\ngoal (1 subgoal):\n 1. enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))", "by (metis (no_types) add.commute add_diff_cancel_left' ary_\\<rho>x arity_def\n        idiff_enat_enat leD nargs_s_lt order.not_eq_order_implies_strict)"], ["proof (state)\nthis:\n  enat (num_args (\\<rho> x) + num_args s) < arity_hd (head (\\<rho> x))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  head s = Var ?x \\<Longrightarrow>\n  enat (num_args (\\<rho> ?x) + num_args s) < arity_hd (head (\\<rho> ?x))\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "hence nargs_\\<rho>s: \"num_args (subst \\<rho> s) < arity_hd (head (subst \\<rho> s))\""], ["proof (prove)\nusing this:\n  head s = Var ?x \\<Longrightarrow>\n  enat (num_args (\\<rho> ?x) + num_args s) < arity_hd (head (\\<rho> ?x))\n\ngoal (1 subgoal):\n 1. enat (num_args (subst \\<rho> s)) < arity_hd (head (subst \\<rho> s))", "using nargs_s_lt"], ["proof (prove)\nusing this:\n  head s = Var ?x \\<Longrightarrow>\n  enat (num_args (\\<rho> ?x) + num_args s) < arity_hd (head (\\<rho> ?x))\n  enat (num_args s) < arity_hd (head s)\n\ngoal (1 subgoal):\n 1. enat (num_args (subst \\<rho> s)) < arity_hd (head (subst \\<rho> s))", "by (auto split: hd.split)"], ["proof (state)\nthis:\n  enat (num_args (subst \\<rho> s)) < arity_hd (head (subst \\<rho> s))\n\ngoal (2 subgoals):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))\n 2. \\<And>x1a x2.\n       \\<lbrakk>wary x1a \\<Longrightarrow> wary (subst \\<rho> x1a);\n        wary x2 \\<Longrightarrow> wary (subst \\<rho> x2);\n        wary (App x1a x2)\\<rbrakk>\n       \\<Longrightarrow> wary (subst \\<rho> (App x1a x2))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (subst \\<rho> (App s t))", "by simp (rule wary_App[OF wary_\\<rho>s wary_\\<rho>t nargs_\\<rho>s])"], ["proof (state)\nthis:\n  wary (subst \\<rho> (App s t))\n\ngoal (1 subgoal):\n 1. \\<And>x. wary (Hd x) \\<Longrightarrow> wary (subst \\<rho> (Hd x))", "qed (auto simp: wary_\\<rho>[unfolded wary_subst_def] split: hd.split)"], ["", "lemmas strict_wary_subst_wary = wary_subst_wary[OF strict_imp_wary_subst]"], ["", "lemma wary_subst_ground_heads:\n  assumes wary_\\<rho>: \"wary_subst \\<rho>\"\n  shows \"ground_heads (head (subst \\<rho> s)) \\<subseteq> ground_heads (head s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.ground_heads (head (subst \\<rho> s))\n    \\<subseteq> local.ground_heads (head s)", "proof (induct s rule: tm_induct_apps)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<zeta> ss.\n       (\\<And>s.\n           s \\<in> set ss \\<Longrightarrow>\n           local.ground_heads (head (subst \\<rho> s))\n           \\<subseteq> local.ground_heads (head s)) \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "case (apps \\<zeta> ss)"], ["proof (state)\nthis:\n  ?s \\<in> set ss \\<Longrightarrow>\n  local.ground_heads (head (subst \\<rho> ?s))\n  \\<subseteq> local.ground_heads (head ?s)\n\ngoal (1 subgoal):\n 1. \\<And>\\<zeta> ss.\n       (\\<And>s.\n           s \\<in> set ss \\<Longrightarrow>\n           local.ground_heads (head (subst \\<rho> s))\n           \\<subseteq> local.ground_heads (head s)) \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n    \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "proof (cases \\<zeta>)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<zeta> = Var x1 \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))\n 2. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "case x: (Var x)"], ["proof (state)\nthis:\n  \\<zeta> = Var x\n\ngoal (2 subgoals):\n 1. \\<And>x1.\n       \\<zeta> = Var x1 \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))\n 2. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<zeta> = Var x\n\ngoal (1 subgoal):\n 1. local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n    \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "using wary_\\<rho> wary_subst_def x"], ["proof (prove)\nusing this:\n  \\<zeta> = Var x\n  wary_subst \\<rho>\n  wary_subst ?\\<rho> =\n  (\\<forall>x.\n      wary (?\\<rho> x) \\<and>\n      arity_var x \\<le> arity (?\\<rho> x) \\<and>\n      local.ground_heads (head (?\\<rho> x)) \\<subseteq> ground_heads_var x)\n  \\<zeta> = Var x\n\ngoal (1 subgoal):\n 1. local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n    \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "by auto"], ["proof (state)\nthis:\n  local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n  \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))\n\ngoal (1 subgoal):\n 1. \\<And>x2.\n       \\<zeta> = Sym x2 \\<Longrightarrow>\n       local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n       \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))", "qed auto"], ["proof (state)\nthis:\n  local.ground_heads (head (subst \\<rho> (apps (Hd \\<zeta>) ss)))\n  \\<subseteq> local.ground_heads (head (apps (Hd \\<zeta>) ss))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas strict_wary_subst_ground_heads = wary_subst_ground_heads[OF strict_imp_wary_subst]"], ["", "definition grounding_\\<rho> :: \"'v \\<Rightarrow> ('s, 'v) tm\" where\n  \"grounding_\\<rho> x = (let s = Hd (Sym (SOME f. f \\<in> ground_heads_var x)) in\n     apps s (replicate (the_enat (arity s - arity_var x)) s))\""], ["", "lemma ground_grounding_\\<rho>: \"ground (subst grounding_\\<rho> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ground (subst grounding_\\<rho> s)", "by (induct s) (auto simp: Let_def grounding_\\<rho>_def elim: hd.set_cases(2) split: hd.split)"], ["", "lemma strict_wary_grounding_\\<rho>: \"strict_wary_subst grounding_\\<rho>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. strict_wary_subst grounding_\\<rho>", "unfolding strict_wary_subst_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       wary (grounding_\\<rho> x) \\<and>\n       arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>} \\<and>\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "proof (intro allI conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "define f where \"f = (SOME f. f \\<in> ground_heads_var x)\""], ["proof (state)\nthis:\n  f = (SOME f. f \\<in> ground_heads_var x)\n\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "define s :: \"('s, 'v) tm\" where \"s = Hd (Sym f)\""], ["proof (state)\nthis:\n  s = Hd (Sym f)\n\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "have wary_s: \"wary s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary s", "unfolding s_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (Hd (Sym f))", "by (rule wary_Hd)"], ["proof (state)\nthis:\n  wary s\n\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "have ary_s_ge_x: \"arity s \\<ge> arity_var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity_var x \\<le> arity s", "unfolding s_def f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. arity_var x \\<le> arity (Hd (Sym (SOME f. f \\<in> ground_heads_var x)))", "using some_ground_head_arity"], ["proof (prove)\nusing this:\n  arity_var ?x \\<le> arity_sym (SOME f. f \\<in> local.ground_heads (Var ?x))\n\ngoal (1 subgoal):\n 1. arity_var x \\<le> arity (Hd (Sym (SOME f. f \\<in> ground_heads_var x)))", "by simp"], ["proof (state)\nthis:\n  arity_var x \\<le> arity s\n\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "have gr\\<rho>_x: \"grounding_\\<rho> x = apps s (replicate (the_enat (arity s - arity_var x)) s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. grounding_\\<rho> x =\n    apps s (replicate (the_enat (arity s - arity_var x)) s)", "unfolding grounding_\\<rho>_def Let_def f_def[symmetric] s_def[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. apps s (replicate (the_enat (arity s - arity_var x)) s) =\n    apps s (replicate (the_enat (arity s - arity_var x)) s)", "by (rule refl)"], ["proof (state)\nthis:\n  grounding_\\<rho> x =\n  apps s (replicate (the_enat (arity s - arity_var x)) s)\n\ngoal (3 subgoals):\n 1. \\<And>x. wary (grounding_\\<rho> x)\n 2. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 3. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "show \"wary (grounding_\\<rho> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (grounding_\\<rho> x)", "unfolding gr\\<rho>_x"], ["proof (prove)\ngoal (1 subgoal):\n 1. wary (apps s (replicate (the_enat (arity s - arity_var x)) s))", "by (auto intro!: wary_s wary_apps[OF wary_s] enat_the_enat_minus_le)"], ["proof (state)\nthis:\n  wary (grounding_\\<rho> x)\n\ngoal (2 subgoals):\n 1. \\<And>x. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n 2. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "show \"arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}", "unfolding gr\\<rho>_x"], ["proof (prove)\ngoal (1 subgoal):\n 1. arity (apps s (replicate (the_enat (arity s - arity_var x)) s))\n    \\<in> {arity_var x, \\<infinity>}", "using ary_s_ge_x"], ["proof (prove)\nusing this:\n  arity_var x \\<le> arity s\n\ngoal (1 subgoal):\n 1. arity (apps s (replicate (the_enat (arity s - arity_var x)) s))\n    \\<in> {arity_var x, \\<infinity>}", "by (cases \"arity s\"; cases \"arity_var x\"; simp)"], ["proof (state)\nthis:\n  arity (grounding_\\<rho> x) \\<in> {arity_var x, \\<infinity>}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       local.ground_heads (head (grounding_\\<rho> x))\n       \\<subseteq> ground_heads_var x", "show \"ground_heads (head (grounding_\\<rho> x)) \\<subseteq> ground_heads_var x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. local.ground_heads (head (grounding_\\<rho> x))\n    \\<subseteq> ground_heads_var x", "unfolding gr\\<rho>_x s_def f_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. local.ground_heads\n     (head\n       (apps (Hd (Sym (SOME f. f \\<in> ground_heads_var x)))\n         (replicate\n           (the_enat\n             (arity (Hd (Sym (SOME f. f \\<in> ground_heads_var x))) -\n              arity_var x))\n           (Hd (Sym (SOME f. f \\<in> ground_heads_var x))))))\n    \\<subseteq> ground_heads_var x", "by (simp add: some_in_eq ground_heads_var_nonempty)"], ["proof (state)\nthis:\n  local.ground_heads (head (grounding_\\<rho> x))\n  \\<subseteq> ground_heads_var x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemmas wary_grounding_\\<rho> = strict_wary_grounding_\\<rho>[THEN strict_imp_wary_subst]"], ["", "definition gt_hd :: \"('s, 'v) hd \\<Rightarrow> ('s, 'v) hd \\<Rightarrow> bool\" (infix \">\\<^sub>h\\<^sub>d\" 50) where\n  \"\\<xi> >\\<^sub>h\\<^sub>d \\<zeta> \\<longleftrightarrow> (\\<forall>g \\<in> ground_heads \\<xi>. \\<forall>f \\<in> ground_heads \\<zeta>. g >\\<^sub>s f)\""], ["", "definition comp_hd :: \"('s, 'v) hd \\<Rightarrow> ('s, 'v) hd \\<Rightarrow> bool\" (infix \"\\<le>\\<ge>\\<^sub>h\\<^sub>d\" 50) where\n  \"\\<xi> \\<le>\\<ge>\\<^sub>h\\<^sub>d \\<zeta> \\<longleftrightarrow> \\<xi> = \\<zeta> \\<or> \\<xi> >\\<^sub>h\\<^sub>d \\<zeta> \\<or> \\<zeta> >\\<^sub>h\\<^sub>d \\<xi>\""], ["", "lemma gt_hd_irrefl: \"\\<not> \\<zeta> >\\<^sub>h\\<^sub>d \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<zeta> >\\<^sub>h\\<^sub>d \\<zeta>", "unfolding gt_hd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>g\\<in>local.ground_heads \\<zeta>.\n               Ball (local.ground_heads \\<zeta>) ((>\\<^sub>s) g))", "using gt_sym_irrefl"], ["proof (prove)\nusing this:\n  \\<not> ?f >\\<^sub>s ?f\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>g\\<in>local.ground_heads \\<zeta>.\n               Ball (local.ground_heads \\<zeta>) ((>\\<^sub>s) g))", "by (meson ex_in_conv ground_heads_nonempty)"], ["", "lemma gt_hd_trans: \"\\<chi> >\\<^sub>h\\<^sub>d \\<xi> \\<Longrightarrow> \\<xi> >\\<^sub>h\\<^sub>d \\<zeta> \\<Longrightarrow> \\<chi> >\\<^sub>h\\<^sub>d \\<zeta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<chi> >\\<^sub>h\\<^sub>d \\<xi>;\n     \\<xi> >\\<^sub>h\\<^sub>d \\<zeta>\\<rbrakk>\n    \\<Longrightarrow> \\<chi> >\\<^sub>h\\<^sub>d \\<zeta>", "unfolding gt_hd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>g\\<in>local.ground_heads \\<chi>.\n                Ball (local.ground_heads \\<xi>) ((>\\<^sub>s) g);\n     \\<forall>g\\<in>local.ground_heads \\<xi>.\n        Ball (local.ground_heads \\<zeta>) ((>\\<^sub>s) g)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>g\\<in>local.ground_heads \\<chi>.\n                         Ball (local.ground_heads \\<zeta>) ((>\\<^sub>s) g)", "using gt_sym_trans"], ["proof (prove)\nusing this:\n  \\<lbrakk>?h >\\<^sub>s ?g; ?g >\\<^sub>s ?f\\<rbrakk>\n  \\<Longrightarrow> ?h >\\<^sub>s ?f\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>g\\<in>local.ground_heads \\<chi>.\n                Ball (local.ground_heads \\<xi>) ((>\\<^sub>s) g);\n     \\<forall>g\\<in>local.ground_heads \\<xi>.\n        Ball (local.ground_heads \\<zeta>) ((>\\<^sub>s) g)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>g\\<in>local.ground_heads \\<chi>.\n                         Ball (local.ground_heads \\<zeta>) ((>\\<^sub>s) g)", "by (meson ex_in_conv ground_heads_nonempty)"], ["", "lemma gt_sym_imp_hd: \"g >\\<^sub>s f \\<Longrightarrow> Sym g >\\<^sub>h\\<^sub>d Sym f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g >\\<^sub>s f \\<Longrightarrow> Sym g >\\<^sub>h\\<^sub>d Sym f", "unfolding gt_hd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. g >\\<^sub>s f \\<Longrightarrow>\n    \\<forall>g\\<in>local.ground_heads (Sym g).\n       Ball (local.ground_heads (Sym f)) ((>\\<^sub>s) g)", "by simp"], ["", "lemma not_comp_hd_imp_Var: \"\\<not> \\<xi> \\<le>\\<ge>\\<^sub>h\\<^sub>d \\<zeta> \\<Longrightarrow> is_Var \\<zeta> \\<or> is_Var \\<xi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> \\<xi> \\<le>\\<ge>\\<^sub>h\\<^sub>d \\<zeta> \\<Longrightarrow>\n    is_Var \\<zeta> \\<or> is_Var \\<xi>", "using gt_sym_total"], ["proof (prove)\nusing this:\n  ?f >\\<^sub>s ?g \\<or> ?g >\\<^sub>s ?f \\<or> ?g = ?f\n\ngoal (1 subgoal):\n 1. \\<not> \\<xi> \\<le>\\<ge>\\<^sub>h\\<^sub>d \\<zeta> \\<Longrightarrow>\n    is_Var \\<zeta> \\<or> is_Var \\<xi>", "by (cases \\<zeta>; cases \\<xi>; auto simp: comp_hd_def gt_hd_def)"], ["", "end"], ["", "end"]]}