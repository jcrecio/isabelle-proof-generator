{"file_name": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs/Extension_Orders.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Lambda_Free_RPOs", "problem_names": ["lemma mono[mono]: \"gt \\<le> gt' \\<Longrightarrow> ext gt \\<le> ext gt'\"", "lemma compat_append_left: \"ext gt ys xs \\<Longrightarrow> ext gt (zs @ ys) (zs @ xs)\"", "lemma compat_append_right: \"ext gt ys xs \\<Longrightarrow> ext gt (ys @ zs) (xs @ zs)\"", "lemma compat_list: \"y \\<noteq> x \\<Longrightarrow> gt y x \\<Longrightarrow> ext gt (xs @ y # xs') (xs @ x # xs')\"", "lemma irrefl_gt: \"\\<not> ext gt xs xs\"", "lemma trans_gt: \"ext gt zs ys \\<Longrightarrow> ext gt ys xs \\<Longrightarrow> ext gt zs xs\"", "lemma hd_or_tl_gt: \"length ys = length xs \\<Longrightarrow> ext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> ext gt ys xs\"", "lemma wf_same_length_if_total: \"wfP (\\<lambda>xs ys. length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\"", "lemma wf_bounded_if_total: \"wfP (\\<lambda>xs ys. length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\"", "lemma wf_bounded: \"wfP (\\<lambda>xs ys. length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\"", "lemma lexext_simps[simp]:\n  \"lexext gt ys [] \\<longleftrightarrow> ys \\<noteq> []\"\n  \"\\<not> lexext gt [] xs\"\n  \"lexext gt (y # ys) (x # xs) \\<longleftrightarrow> gt y x \\<or> x = y \\<and> lexext gt ys xs\"", "lemma lexext_mono_strong:\n  assumes\n    \"\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x\" and\n    \"lexext gt ys xs\"\n  shows \"lexext gt' ys xs\"", "lemma lexext_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> lexext gt ys xs \\<Longrightarrow>\n   lexext gt (map f ys) (map f xs)\"", "lemma lexext_irrefl:\n  assumes \"\\<forall>x \\<in> set xs. \\<not> gt x x\"\n  shows \"\\<not> lexext gt xs xs\"", "lemma lexext_trans_strong:\n  assumes\n    \"\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    \"lexext gt zs ys\" and \"lexext gt ys xs\"\n  shows \"lexext gt zs xs\"", "lemma lexext_snoc: \"lexext gt (xs @ [x]) xs\"", "lemmas lexext_compat_cons = lexext_Cons_eq", "lemma lexext_compat_snoc_if_same_length:\n  assumes \"length ys = length xs\" and \"lexext gt ys xs\"\n  shows \"lexext gt (ys @ [x]) (xs @ [x])\"", "lemma lexext_compat_list: \"gt y x \\<Longrightarrow> lexext gt (xs @ y # xs') (xs @ x # xs')\"", "lemma lexext_singleton: \"lexext gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma lexext_total: \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n  lexext gt ys xs \\<or> lexext gt xs ys \\<or> ys = xs\"", "lemma lexext_hd_or_tl: \"lexext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> lexext gt ys xs\"", "lemma lexext_rev_simps[simp]:\n  \"lexext_rev gt ys [] \\<longleftrightarrow> ys \\<noteq> []\"\n  \"\\<not> lexext_rev gt [] xs\"\n  \"lexext_rev gt (ys @ [y]) (xs @ [x]) \\<longleftrightarrow> gt y x \\<or> x = y \\<and> lexext_rev gt ys xs\"", "lemma lexext_rev_cons_cons:\n  assumes \"length ys = length xs\"\n  shows \"lexext_rev gt (y # ys) (x # xs) \\<longleftrightarrow> lexext_rev gt ys xs \\<or> ys = xs \\<and> gt y x\"", "lemma lexext_rev_mono_strong:\n  assumes\n    \"\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x\" and\n    \"lexext_rev gt ys xs\"\n  shows \"lexext_rev gt' ys xs\"", "lemma lexext_rev_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> lexext_rev gt ys xs \\<Longrightarrow>\n   lexext_rev gt (map f ys) (map f xs)\"", "lemma lexext_rev_irrefl:\n  assumes \"\\<forall>x \\<in> set xs. \\<not> gt x x\"\n  shows \"\\<not> lexext_rev gt xs xs\"", "lemma lexext_rev_trans_strong:\n  assumes\n    \"\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    \"lexext_rev gt zs ys\" and \"lexext_rev gt ys xs\"\n  shows \"lexext_rev gt zs xs\"", "lemma lexext_rev_compat_cons_if_same_length:\n  assumes \"length ys = length xs\" and \"lexext_rev gt ys xs\"\n  shows \"lexext_rev gt (x # ys) (x # xs)\"", "lemma lexext_rev_compat_snoc: \"lexext_rev gt ys xs \\<Longrightarrow> lexext_rev gt (ys @ [x]) (xs @ [x])\"", "lemma lexext_rev_compat_list: \"gt y x \\<Longrightarrow> lexext_rev gt (xs @ y # xs') (xs @ x # xs')\"", "lemma lexext_rev_singleton: \"lexext_rev gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma lexext_rev_total:\n  \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n   lexext_rev gt ys xs \\<or> lexext_rev gt xs ys \\<or> ys = xs\"", "lemma lexext_rev_hd_or_tl:\n  assumes\n    \"length ys = length xs\" and\n    \"lexext_rev gt (y # ys) (x # xs)\"\n  shows \"gt y x \\<or> lexext_rev gt ys xs\"", "lemma\n  lenext_mono_strong: \"(gts ys xs \\<Longrightarrow> gts' ys xs) \\<Longrightarrow> lenext gts ys xs \\<Longrightarrow> lenext gts' ys xs\" and\n  lenext_map_strong: \"(length ys = length xs \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts (map f ys) (map f xs)) \\<Longrightarrow>\n    lenext gts ys xs \\<Longrightarrow> lenext gts (map f ys) (map f xs)\" and\n  lenext_irrefl: \"\\<not> gts xs xs \\<Longrightarrow> \\<not> lenext gts xs xs\" and\n  lenext_trans: \"(gts zs ys \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts zs xs) \\<Longrightarrow> lenext gts zs ys \\<Longrightarrow> lenext gts ys xs \\<Longrightarrow>\n    lenext gts zs xs\" and\n  lenext_snoc: \"lenext gts (xs @ [x]) xs\" and\n  lenext_compat_cons: \"(length ys = length xs \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts (x # ys) (x # xs)) \\<Longrightarrow>\n    lenext gts ys xs \\<Longrightarrow> lenext gts (x # ys) (x # xs)\" and\n  lenext_compat_snoc: \"(length ys = length xs \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts (ys @ [x]) (xs @ [x])) \\<Longrightarrow>\n    lenext gts ys xs \\<Longrightarrow> lenext gts (ys @ [x]) (xs @ [x])\" and\n  lenext_compat_list: \"gts (xs @ y # xs') (xs @ x # xs') \\<Longrightarrow>\n    lenext gts (xs @ y # xs') (xs @ x # xs')\" and\n  lenext_singleton: \"lenext gts [y] [x] \\<longleftrightarrow> gts [y] [x]\" and\n  lenext_total: \"(gts ys xs \\<or> gts xs ys \\<or> ys = xs) \\<Longrightarrow>\n    lenext gts ys xs \\<or> lenext gts xs ys \\<or> ys = xs\" and\n  lenext_hd_or_tl: \"(length ys = length xs \\<Longrightarrow> gts (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> gts ys xs) \\<Longrightarrow>\n    lenext gts (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> lenext gts ys xs\"", "lemma len_lexext_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> len_lexext gt ys xs \\<Longrightarrow> len_lexext gt' ys xs\"", "lemma len_lexext_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> len_lexext gt ys xs \\<Longrightarrow>\n   len_lexext gt (map f ys) (map f xs)\"", "lemma len_lexext_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> len_lexext gt xs xs\"", "lemma len_lexext_trans_strong:\n  \"(\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> len_lexext gt zs ys \\<Longrightarrow>\n   len_lexext gt ys xs \\<Longrightarrow> len_lexext gt zs xs\"", "lemma len_lexext_snoc: \"len_lexext gt (xs @ [x]) xs\"", "lemma len_lexext_compat_cons: \"len_lexext gt ys xs \\<Longrightarrow> len_lexext gt (x # ys) (x # xs)\"", "lemma len_lexext_compat_snoc: \"len_lexext gt ys xs \\<Longrightarrow> len_lexext gt (ys @ [x]) (xs @ [x])\"", "lemma len_lexext_compat_list: \"gt y x \\<Longrightarrow> len_lexext gt (xs @ y # xs') (xs @ x # xs')\"", "lemma len_lexext_singleton[simp]: \"len_lexext gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma len_lexext_total: \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n  len_lexext gt ys xs \\<or> len_lexext gt xs ys \\<or> ys = xs\"", "lemma len_lexext_iff_lenlex: \"len_lexext gt ys xs \\<longleftrightarrow> (xs, ys) \\<in> lenlex {(x, y). gt y x}\"", "lemma len_lexext_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. len_lexext gt ys xs)\"", "lemma len_lexext_hd_or_tl: \"len_lexext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> len_lexext gt ys xs\"", "lemma len_lexext_rev_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt' ys xs\"", "lemma len_lexext_rev_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> len_lexext_rev gt ys xs \\<Longrightarrow>\n   len_lexext_rev gt (map f ys) (map f xs)\"", "lemma len_lexext_rev_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> len_lexext_rev gt xs xs\"", "lemma len_lexext_rev_trans_strong:\n  \"(\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> len_lexext_rev gt zs ys \\<Longrightarrow>\n   len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt zs xs\"", "lemma len_lexext_rev_snoc: \"len_lexext_rev gt (xs @ [x]) xs\"", "lemma len_lexext_rev_compat_cons: \"len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt (x # ys) (x # xs)\"", "lemma len_lexext_rev_compat_snoc: \"len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt (ys @ [x]) (xs @ [x])\"", "lemma len_lexext_rev_compat_list: \"gt y x \\<Longrightarrow> len_lexext_rev gt (xs @ y # xs') (xs @ x # xs')\"", "lemma len_lexext_rev_singleton[simp]: \"len_lexext_rev gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma len_lexext_rev_total: \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow>\n  xs \\<in> lists A \\<Longrightarrow> len_lexext_rev gt ys xs \\<or> len_lexext_rev gt xs ys \\<or> ys = xs\"", "lemma len_lexext_rev_iff_len_lexext: \"len_lexext_rev gt ys xs \\<longleftrightarrow> len_lexext gt (rev ys) (rev xs)\"", "lemma len_lexext_rev_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. len_lexext_rev gt ys xs)\"", "lemma len_lexext_rev_hd_or_tl:\n  \"len_lexext_rev gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> len_lexext_rev gt ys xs\"", "lemma msetext_dersh_imp_mult_rel:\n  assumes\n    ys_a: \"ys \\<in> lists A\" and xs_a: \"xs \\<in> lists A\" and\n    ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"(mset xs, mset ys) \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\"", "lemma msetext_dersh_imp_mult: \"msetext_dersh gt ys xs \\<Longrightarrow> (mset xs, mset ys) \\<in> mult {(x, y). gt y x}\"", "lemma mult_imp_msetext_dersh_rel:\n  assumes\n    ys_a: \"set_mset (mset ys) \\<subseteq> A\" and xs_a: \"set_mset (mset xs) \\<subseteq> A\" and\n    in_mult: \"(mset xs, mset ys) \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\" and\n    trans: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\"\n  shows \"msetext_dersh gt ys xs\"", "lemma msetext_dersh_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> msetext_dersh gt ys xs \\<Longrightarrow>\n  msetext_dersh gt' ys xs\"", "lemma msetext_dersh_map_strong:\n  assumes\n    compat_f: \"\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)\" and\n    ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"msetext_dersh gt (map f ys) (map f xs)\"", "lemma msetext_dersh_trans:\n  assumes\n    zs_a: \"zs \\<in> lists A\" and\n    ys_a: \"ys \\<in> lists A\" and\n    xs_a: \"xs \\<in> lists A\" and\n    trans: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    zs_gt_ys: \"msetext_dersh gt zs ys\" and\n    ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"msetext_dersh gt zs xs\"", "lemma msetext_dersh_irrefl_from_trans:\n  assumes\n    trans: \"\\<forall>z \\<in> set xs. \\<forall>y \\<in> set xs. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    irrefl: \"\\<forall>x \\<in> set xs. \\<not> gt x x\"\n  shows \"\\<not> msetext_dersh gt xs xs\"", "lemma msetext_dersh_snoc: \"msetext_dersh gt (xs @ [x]) xs\"", "lemma msetext_dersh_compat_cons:\n  assumes ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"msetext_dersh gt (x # ys) (x # xs)\"", "lemma msetext_dersh_compat_snoc: \"msetext_dersh gt ys xs \\<Longrightarrow> msetext_dersh gt (ys @ [x]) (xs @ [x])\"", "lemma msetext_dersh_compat_list:\n  assumes y_gt_x: \"gt y x\"\n  shows \"msetext_dersh gt (xs @ y # xs') (xs @ x # xs')\"", "lemma msetext_dersh_singleton: \"msetext_dersh gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma msetext_dersh_wf:\n  assumes wf_gt: \"wfP (\\<lambda>x y. gt y x)\"\n  shows \"wfP (\\<lambda>xs ys. msetext_dersh gt ys xs)\"", "lemma msetext_huet_imp_count_gt:\n  assumes ys_gt_xs: \"msetext_huet gt ys xs\"\n  shows \"\\<exists>x. count (mset ys) x > count (mset xs) x\"", "lemma msetext_huet_imp_dersh:\n  assumes huet: \"msetext_huet gt ys xs\"\n  shows \"msetext_dersh gt ys xs\"", "lemma mult_imp_msetext_huet:\n  assumes\n    irrefl: \"irreflp gt\" and trans: \"transp gt\" and\n    in_mult: \"(mset xs, mset ys) \\<in> mult {(x, y). gt y x}\"\n  shows \"msetext_huet gt ys xs\"", "theorem msetext_huet_eq_dersh: \"irreflp gt \\<Longrightarrow> transp gt \\<Longrightarrow> msetext_dersh gt = msetext_huet gt\"", "lemma msetext_huet_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> msetext_huet gt ys xs \\<Longrightarrow> msetext_huet gt' ys xs\"", "lemma msetext_huet_map:\n  assumes\n    fin: \"finite A\" and\n    ys_a: \"ys \\<in> lists A\" and xs_a: \"xs \\<in> lists A\" and\n    irrefl_f: \"\\<forall>x \\<in> A. \\<not> gt (f x) (f x)\" and\n    trans_f: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt (f z) (f y) \\<longrightarrow> gt (f y) (f x) \\<longrightarrow> gt (f z) (f x)\" and\n    compat_f: \"\\<forall>y \\<in> A. \\<forall>x \\<in> A. gt y x \\<longrightarrow> gt (f y) (f x)\" and\n    ys_gt_xs: \"msetext_huet gt ys xs\"\n  shows \"msetext_huet gt (map f ys) (map f xs)\" (is \"msetext_huet _ ?fys ?fxs\")", "lemma msetext_huet_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> msetext_huet gt xs xs\"", "lemma msetext_huet_trans_from_irrefl:\n  assumes\n    fin: \"finite A\" and\n    zs_a: \"zs \\<in> lists A\" and ys_a: \"ys \\<in> lists A\" and xs_a: \"xs \\<in> lists A\" and\n    irrefl: \"\\<forall>x \\<in> A. \\<not> gt x x\" and\n    trans: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    zs_gt_ys: \"msetext_huet gt zs ys\" and\n    ys_gt_xs: \"msetext_huet gt ys xs\"\n  shows \"msetext_huet gt zs xs\"", "lemma msetext_huet_snoc: \"msetext_huet gt (xs @ [x]) xs\"", "lemma msetext_huet_compat_cons: \"msetext_huet gt ys xs \\<Longrightarrow> msetext_huet gt (x # ys) (x # xs)\"", "lemma msetext_huet_compat_snoc: \"msetext_huet gt ys xs \\<Longrightarrow> msetext_huet gt (ys @ [x]) (xs @ [x])\"", "lemma msetext_huet_compat_list: \"y \\<noteq> x \\<Longrightarrow> gt y x \\<Longrightarrow> msetext_huet gt (xs @ y # xs') (xs @ x # xs')\"", "lemma msetext_huet_singleton: \"y \\<noteq> x \\<Longrightarrow> msetext_huet gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma msetext_huet_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. msetext_huet gt ys xs)\"", "lemma msetext_huet_hd_or_tl:\n  assumes\n    trans: \"\\<forall>z y x. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    total: \"\\<forall>y x. gt y x \\<or> gt x y \\<or> y = x\" and\n    len_eq: \"length ys = length xs\" and\n    yys_gt_xxs: \"msetext_huet gt (y # ys) (x # xs)\"\n  shows \"gt y x \\<or> msetext_huet gt ys xs\"", "lemma cwiseext_imp_len_lexext:\n  assumes cw: \"cwiseext gt ys xs\"\n  shows \"len_lexext gt ys xs\"", "lemma cwiseext_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> cwiseext gt ys xs \\<Longrightarrow> cwiseext gt' ys xs\"", "lemma cwiseext_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> cwiseext gt ys xs \\<Longrightarrow>\n   cwiseext gt (map f ys) (map f xs)\"", "lemma cwiseext_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> cwiseext gt xs xs\"", "lemma cwiseext_trans_strong:\n  assumes\n    \"\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    \"cwiseext gt zs ys\" and \"cwiseext gt ys xs\"\n  shows \"cwiseext gt zs xs\"", "lemma cwiseext_compat_cons: \"cwiseext gt ys xs \\<Longrightarrow> cwiseext gt (x # ys) (x # xs)\"", "lemma cwiseext_compat_snoc: \"cwiseext gt ys xs \\<Longrightarrow> cwiseext gt (ys @ [x]) (xs @ [x])\"", "lemma cwiseext_compat_list:\n  assumes y_gt_x: \"gt y x\"\n  shows \"cwiseext gt (xs @ y # xs') (xs @ x # xs')\"", "lemma cwiseext_singleton: \"cwiseext gt [y] [x] \\<longleftrightarrow> gt y x\"", "lemma cwiseext_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. cwiseext gt ys xs)\"", "lemma cwiseext_hd_or_tl: \"cwiseext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> cwiseext gt ys xs\"", "lemma\n  assumes ys_gtcw_xs: \"cwiseext gt ys xs\"\n  shows \"ext gt ys xs\""], "translations": [["", "lemma mono[mono]: \"gt \\<le> gt' \\<Longrightarrow> ext gt \\<le> ext gt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt \\<le> gt' \\<Longrightarrow> ext gt \\<le> ext gt'", "using mono_strong"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<forall>y\\<in>set ?ys.\n              \\<forall>x\\<in>set ?xs. ?gt y x \\<longrightarrow> ?gt' y x;\n   ext ?gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> ext ?gt' ?ys ?xs\n\ngoal (1 subgoal):\n 1. gt \\<le> gt' \\<Longrightarrow> ext gt \\<le> ext gt'", "by blast"], ["", "end"], ["", "locale ext_irrefl = ext +\n  assumes irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> ext gt xs xs\""], ["", "locale ext_trans = ext +\n  assumes trans: \"zs \\<in> lists A \\<Longrightarrow> ys \\<in> lists A \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n    (\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> ext gt zs ys \\<Longrightarrow> ext gt ys xs \\<Longrightarrow>\n    ext gt zs xs\""], ["", "locale ext_irrefl_before_trans = ext_irrefl +\n  assumes trans_from_irrefl: \"finite A \\<Longrightarrow> zs \\<in> lists A \\<Longrightarrow> ys \\<in> lists A \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n    (\\<forall>x \\<in> A. \\<not> gt x x) \\<Longrightarrow> (\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> ext gt zs ys \\<Longrightarrow>\n    ext gt ys xs \\<Longrightarrow> ext gt zs xs\""], ["", "locale ext_trans_before_irrefl = ext_trans +\n  assumes irrefl_from_trans: \"(\\<forall>z \\<in> set xs. \\<forall>y \\<in> set xs. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow>\n    (\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> ext gt xs xs\""], ["", "locale ext_irrefl_trans_strong = ext_irrefl +\n  assumes trans_strong: \"(\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow>\n    ext gt zs ys \\<Longrightarrow> ext gt ys xs \\<Longrightarrow> ext gt zs xs\""], ["", "sublocale ext_irrefl_trans_strong < ext_irrefl_before_trans"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_before_trans ext", "by standard (erule irrefl, metis in_listsD trans_strong)"], ["", "sublocale ext_irrefl_trans_strong < ext_trans"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_trans ext", "by standard (metis in_listsD trans_strong)"], ["", "sublocale ext_irrefl_trans_strong < ext_trans_before_irrefl"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_trans_before_irrefl ext", "by standard (rule irrefl)"], ["", "locale ext_snoc = ext +\n  assumes snoc: \"ext gt (xs @ [x]) xs\""], ["", "locale ext_compat_cons = ext +\n  assumes compat_cons: \"ext gt ys xs \\<Longrightarrow> ext gt (x # ys) (x # xs)\"\nbegin"], ["", "lemma compat_append_left: \"ext gt ys xs \\<Longrightarrow> ext gt (zs @ ys) (zs @ xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext gt ys xs \\<Longrightarrow> ext gt (zs @ ys) (zs @ xs)", "by (induct zs) (auto intro: compat_cons)"], ["", "end"], ["", "locale ext_compat_snoc = ext +\n  assumes compat_snoc: \"ext gt ys xs \\<Longrightarrow> ext gt (ys @ [x]) (xs @ [x])\"\nbegin"], ["", "lemma compat_append_right: \"ext gt ys xs \\<Longrightarrow> ext gt (ys @ zs) (xs @ zs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext gt ys xs \\<Longrightarrow> ext gt (ys @ zs) (xs @ zs)", "by (induct zs arbitrary: xs ys rule: rev_induct)\n    (auto intro: compat_snoc simp del: append_assoc simp: append_assoc[symmetric])"], ["", "end"], ["", "locale ext_compat_list = ext +\n  assumes compat_list: \"y \\<noteq> x \\<Longrightarrow> gt y x \\<Longrightarrow> ext gt (xs @ y # xs') (xs @ x # xs')\""], ["", "locale ext_singleton = ext +\n  assumes singleton: \"y \\<noteq> x \\<Longrightarrow> ext gt [y] [x] \\<longleftrightarrow> gt y x\""], ["", "locale ext_compat_list_strong = ext_compat_cons + ext_compat_snoc + ext_singleton\nbegin"], ["", "lemma compat_list: \"y \\<noteq> x \\<Longrightarrow> gt y x \\<Longrightarrow> ext gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n    \\<Longrightarrow> ext gt (xs @ y # xs') (xs @ x # xs')", "using compat_append_left[of gt \"y # xs'\" \"x # xs'\" xs]\n    compat_append_right[of gt, of \"[y]\" \"[x]\" xs'] singleton[of y x gt]"], ["proof (prove)\nusing this:\n  ext gt (y # xs') (x # xs') \\<Longrightarrow>\n  ext gt (xs @ y # xs') (xs @ x # xs')\n  ext gt [y] [x] \\<Longrightarrow> ext gt ([y] @ xs') ([x] @ xs')\n  y \\<noteq> x \\<Longrightarrow> ext gt [y] [x] = gt y x\n\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n    \\<Longrightarrow> ext gt (xs @ y # xs') (xs @ x # xs')", "by fastforce"], ["", "end"], ["", "sublocale ext_compat_list_strong < ext_compat_list"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list ext", "by standard (fact compat_list)"], ["", "locale ext_total = ext +\n  assumes total: \"(\\<forall>y \\<in> A. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists A \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n    ext gt ys xs \\<or> ext gt xs ys \\<or> ys = xs\""], ["", "locale ext_wf = ext +\n  assumes wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. ext gt ys xs)\""], ["", "locale ext_hd_or_tl = ext +\n  assumes hd_or_tl: \"(\\<forall>z y x. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> (\\<forall>y x. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow>\n    length ys = length xs \\<Longrightarrow> ext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> ext gt ys xs\""], ["", "locale ext_wf_bounded = ext_irrefl_before_trans + ext_hd_or_tl\nbegin"], ["", "context\n  fixes gt :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  assumes\n    gt_irrefl: \"\\<And>z. \\<not> gt z z\" and\n    gt_trans: \"\\<And>z y x. gt z y \\<Longrightarrow> gt y x \\<Longrightarrow> gt z x\" and\n    gt_total: \"\\<And>y x. gt y x \\<or> gt x y \\<or> y = x\" and\n    gt_wf: \"wfP (\\<lambda>x y. gt y x)\"\nbegin"], ["", "lemma irrefl_gt: \"\\<not> ext gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> ext gt xs xs", "using irrefl gt_irrefl"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?xs. \\<not> ?gt x x \\<Longrightarrow>\n  \\<not> ext ?gt ?xs ?xs\n  \\<not> gt ?z ?z\n\ngoal (1 subgoal):\n 1. \\<not> ext gt xs xs", "by simp"], ["", "lemma trans_gt: \"ext gt zs ys \\<Longrightarrow> ext gt ys xs \\<Longrightarrow> ext gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>ext gt zs ys; ext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> ext gt zs xs", "by (rule trans_from_irrefl[of \"set zs \\<union> set ys \\<union> set xs\" zs ys xs gt])\n    (auto intro: gt_trans simp: gt_irrefl)"], ["", "lemma hd_or_tl_gt: \"length ys = length xs \\<Longrightarrow> ext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> ext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys = length xs; ext gt (y # ys) (x # xs)\\<rbrakk>\n    \\<Longrightarrow> gt y x \\<or> ext gt ys xs", "by (rule hd_or_tl) (auto intro: gt_trans simp: gt_total)"], ["", "lemma wf_same_length_if_total: \"wfP (\\<lambda>xs ys. length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys = n \\<and> length xs = n \\<and> ext gt ys xs)", "proof (induct n)"], ["proof (state)\ngoal (2 subgoals):\n 1. wfP (\\<lambda>xs ys.\n            length ys = 0 \\<and> length xs = 0 \\<and> ext gt ys xs)\n 2. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. wfP (\\<lambda>xs ys.\n            length ys = 0 \\<and> length xs = 0 \\<and> ext gt ys xs)\n 2. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys = 0 \\<and> length xs = 0 \\<and> ext gt ys xs)", "unfolding wfP_def wf_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>P.\n       (\\<forall>x.\n           (\\<forall>y.\n               (y, x)\n               \\<in> {(xs, ys).\n                      length ys = 0 \\<and>\n                      length xs = 0 \\<and> ext gt ys xs} \\<longrightarrow>\n               P y) \\<longrightarrow>\n           P x) \\<longrightarrow>\n       All P", "using irrefl"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set ?xs. \\<not> ?gt x x \\<Longrightarrow>\n  \\<not> ext ?gt ?xs ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>P.\n       (\\<forall>x.\n           (\\<forall>y.\n               (y, x)\n               \\<in> {(xs, ys).\n                      length ys = 0 \\<and>\n                      length xs = 0 \\<and> ext gt ys xs} \\<longrightarrow>\n               P y) \\<longrightarrow>\n           P x) \\<longrightarrow>\n       All P", "by auto"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          length ys = 0 \\<and> length xs = 0 \\<and> ext gt ys xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "case (Suc n)"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "note ih = this(1)"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "define gt_hd where \"\\<And>ys xs. gt_hd ys xs \\<longleftrightarrow> gt (hd ys) (hd xs)\""], ["proof (state)\nthis:\n  gt_hd ?ys ?xs = gt (hd ?ys) (hd ?xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "define gt_tl where \"\\<And>ys xs. gt_tl ys xs \\<longleftrightarrow> ext gt (tl ys) (tl xs)\""], ["proof (state)\nthis:\n  gt_tl ?ys ?xs = ext gt (tl ?ys) (tl ?xs)\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "have hd_tl: \"gt_hd ys xs \\<or> gt_tl ys xs\"\n    if len_ys: \"length ys = Suc n\" and len_xs: \"length xs = Suc n\" and ys_gt_xs: \"ext gt ys xs\"\n    for n ys xs"], ["proof (prove)\ngoal (1 subgoal):\n 1. gt_hd ys xs \\<or> gt_tl ys xs", "using len_ys len_xs ys_gt_xs"], ["proof (prove)\nusing this:\n  length ys = Suc n\n  length xs = Suc n\n  ext gt ys xs\n\ngoal (1 subgoal):\n 1. gt_hd ys xs \\<or> gt_tl ys xs", "unfolding gt_hd_def gt_tl_def"], ["proof (prove)\nusing this:\n  length ys = Suc n\n  length xs = Suc n\n  ext gt ys xs\n\ngoal (1 subgoal):\n 1. gt (hd ys) (hd xs) \\<or> ext gt (tl ys) (tl xs)", "by (cases xs; cases ys) (auto simp: hd_or_tl_gt)"], ["proof (state)\nthis:\n  \\<lbrakk>length ?ys = Suc ?n; length ?xs = Suc ?n; ext gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> gt_hd ?ys ?xs \\<or> gt_tl ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       wfP (\\<lambda>xs ys.\n               length ys = n \\<and>\n               length xs = n \\<and> ext gt ys xs) \\<Longrightarrow>\n       wfP (\\<lambda>xs ys.\n               length ys = Suc n \\<and>\n               length xs = Suc n \\<and> ext gt ys xs)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)", "unfolding wfP_iff_no_inf_chain"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Ex (inf_chain\n                (\\<lambda>ys xs.\n                    length ys = Suc n \\<and>\n                    length xs = Suc n \\<and> ext gt ys xs))", "proof (intro notI)"], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "let ?gtsn = \"\\<lambda>ys xs. length ys = n \\<and> length xs = n \\<and> ext gt ys xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "let ?gtsSn = \"\\<lambda>ys xs. length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "let ?gttlSn = \"\\<lambda>ys xs. length ys = Suc n \\<and> length xs = Suc n \\<and> gt_tl ys xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "assume \"\\<exists>f. inf_chain ?gtsSn f\""], ["proof (state)\nthis:\n  \\<exists>f.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n      f\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>f.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n      f", "obtain xs where xs_bad: \"bad ?gtsSn xs\""], ["proof (prove)\nusing this:\n  \\<exists>f.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n      f\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        bad (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n         xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding inf_chain_def bad_def"], ["proof (prove)\nusing this:\n  \\<exists>f.\n     \\<forall>i.\n        length (f i) = Suc n \\<and>\n        length (f (Suc i)) = Suc n \\<and> ext gt (f i) (f (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<exists>f.\n           (\\<forall>i.\n               length (f i) = Suc n \\<and>\n               length (f (Suc i)) = Suc n \\<and>\n               ext gt (f i) (f (Suc i))) \\<and>\n           f 0 = xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bad (\\<lambda>ys xs.\n          length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n   xs\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "let ?ff = \"worst_chain ?gtsSn gt_hd\""], ["proof (state)\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "have wf_hd: \"wf {(xs, ys). gt_hd ys xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(xs, ys). gt_hd ys xs}", "unfolding gt_hd_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(xs, ys). gt (hd ys) (hd xs)}", "by (rule wfP_app[OF gt_wf, of hd, unfolded wfP_def])"], ["proof (state)\nthis:\n  wf {(xs, ys). gt_hd ys xs}\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "have \"inf_chain ?gtsSn ?ff\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     (worst_chain\n       (\\<lambda>ys xs.\n           length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n       gt_hd)", "by (rule worst_chain_bad[OF wf_hd xs_bad])"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     gt_hd)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "moreover"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     gt_hd)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "have \"\\<not> gt_hd (?ff i) (?ff (Suc i))\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> gt_hd\n            (worst_chain\n              (\\<lambda>ys xs.\n                  length ys = Suc n \\<and>\n                  length xs = Suc n \\<and> ext gt ys xs)\n              gt_hd i)\n            (worst_chain\n              (\\<lambda>ys xs.\n                  length ys = Suc n \\<and>\n                  length xs = Suc n \\<and> ext gt ys xs)\n              gt_hd (Suc i))", "by (rule worst_chain_not_gt[OF wf_hd xs_bad]) (blast intro: trans_gt)"], ["proof (state)\nthis:\n  \\<not> gt_hd\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd ?i)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd (Suc ?i))\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "ultimately"], ["proof (chain)\npicking this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     gt_hd)\n  \\<not> gt_hd\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd ?i)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd (Suc ?i))", "have tl_bad: \"inf_chain ?gttlSn ?ff\""], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     gt_hd)\n  \\<not> gt_hd\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd ?i)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd (Suc ?i))\n\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> gt_tl ys xs)\n     (worst_chain\n       (\\<lambda>ys xs.\n           length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n       gt_hd)", "unfolding inf_chain_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd i) =\n     Suc n \\<and>\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd (Suc i)) =\n     Suc n \\<and>\n     ext gt\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd i)\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd (Suc i))\n  \\<not> gt_hd\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd ?i)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd (Suc ?i))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd i) =\n       Suc n \\<and>\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd (Suc i)) =\n       Suc n \\<and>\n       gt_tl\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd i)\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd (Suc i))", "using hd_tl"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd i) =\n     Suc n \\<and>\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd (Suc i)) =\n     Suc n \\<and>\n     ext gt\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd i)\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n        gt_hd (Suc i))\n  \\<not> gt_hd\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd ?i)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd (Suc ?i))\n  \\<lbrakk>length ?ys = Suc ?n; length ?xs = Suc ?n; ext gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> gt_hd ?ys ?xs \\<or> gt_tl ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd i) =\n       Suc n \\<and>\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd (Suc i)) =\n       Suc n \\<and>\n       gt_tl\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd i)\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and>\n              length xs = Suc n \\<and> ext gt ys xs)\n          gt_hd (Suc i))", "by blast"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys = Suc n \\<and> length xs = Suc n \\<and> gt_tl ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     gt_hd)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "have \"\\<not> inf_chain ?gtsn (tl \\<circ> ?ff)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> inf_chain\n            (\\<lambda>ys xs.\n                length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n            (tl \\<circ>\n             worst_chain\n              (\\<lambda>ys xs.\n                  length ys = Suc n \\<and>\n                  length xs = Suc n \\<and> ext gt ys xs)\n              gt_hd)", "using wfP_iff_no_inf_chain[THEN iffD1, OF ih]"], ["proof (prove)\nusing this:\n  \\<nexists>f.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n      f\n\ngoal (1 subgoal):\n 1. \\<not> inf_chain\n            (\\<lambda>ys xs.\n                length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n            (tl \\<circ>\n             worst_chain\n              (\\<lambda>ys xs.\n                  length ys = Suc n \\<and>\n                  length xs = Suc n \\<and> ext gt ys xs)\n              gt_hd)", "by blast"], ["proof (state)\nthis:\n  \\<not> inf_chain\n          (\\<lambda>ys xs.\n              length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n          (tl \\<circ>\n           worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "hence tl_good: \"\\<not> inf_chain ?gttlSn ?ff\""], ["proof (prove)\nusing this:\n  \\<not> inf_chain\n          (\\<lambda>ys xs.\n              length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n          (tl \\<circ>\n           worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd)\n\ngoal (1 subgoal):\n 1. \\<not> inf_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> gt_tl ys xs)\n            (worst_chain\n              (\\<lambda>ys xs.\n                  length ys = Suc n \\<and>\n                  length xs = Suc n \\<and> ext gt ys xs)\n              gt_hd)", "unfolding inf_chain_def gt_tl_def"], ["proof (prove)\nusing this:\n  \\<not> (\\<forall>i.\n             length\n              ((tl \\<circ>\n                worst_chain\n                 (\\<lambda>ys xs.\n                     length ys = Suc n \\<and>\n                     length xs = Suc n \\<and> ext gt ys xs)\n                 gt_hd)\n                i) =\n             n \\<and>\n             length\n              ((tl \\<circ>\n                worst_chain\n                 (\\<lambda>ys xs.\n                     length ys = Suc n \\<and>\n                     length xs = Suc n \\<and> ext gt ys xs)\n                 gt_hd)\n                (Suc i)) =\n             n \\<and>\n             ext gt\n              ((tl \\<circ>\n                worst_chain\n                 (\\<lambda>ys xs.\n                     length ys = Suc n \\<and>\n                     length xs = Suc n \\<and> ext gt ys xs)\n                 gt_hd)\n                i)\n              ((tl \\<circ>\n                worst_chain\n                 (\\<lambda>ys xs.\n                     length ys = Suc n \\<and>\n                     length xs = Suc n \\<and> ext gt ys xs)\n                 gt_hd)\n                (Suc i)))\n\ngoal (1 subgoal):\n 1. \\<not> (\\<forall>i.\n               length\n                (worst_chain\n                  (\\<lambda>ys xs.\n                      length ys = Suc n \\<and>\n                      length xs = Suc n \\<and> ext gt ys xs)\n                  gt_hd i) =\n               Suc n \\<and>\n               length\n                (worst_chain\n                  (\\<lambda>ys xs.\n                      length ys = Suc n \\<and>\n                      length xs = Suc n \\<and> ext gt ys xs)\n                  gt_hd (Suc i)) =\n               Suc n \\<and>\n               ext gt\n                (tl (worst_chain\n                      (\\<lambda>ys xs.\n                          length ys = Suc n \\<and>\n                          length xs = Suc n \\<and> ext gt ys xs)\n                      gt_hd i))\n                (tl (worst_chain\n                      (\\<lambda>ys xs.\n                          length ys = Suc n \\<and>\n                          length xs = Suc n \\<and> ext gt ys xs)\n                      gt_hd (Suc i))))", "by force"], ["proof (state)\nthis:\n  \\<not> inf_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and> length xs = Suc n \\<and> gt_tl ys xs)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd)\n\ngoal (1 subgoal):\n 1. Ex (inf_chain\n         (\\<lambda>ys xs.\n             length ys = Suc n \\<and>\n             length xs = Suc n \\<and> ext gt ys xs)) \\<Longrightarrow>\n    False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using tl_bad tl_good"], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys = Suc n \\<and> length xs = Suc n \\<and> gt_tl ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n     gt_hd)\n  \\<not> inf_chain\n          (\\<lambda>ys xs.\n              length ys = Suc n \\<and> length xs = Suc n \\<and> gt_tl ys xs)\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys = Suc n \\<and>\n                length xs = Suc n \\<and> ext gt ys xs)\n            gt_hd)\n\ngoal (1 subgoal):\n 1. False", "by sat"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          length ys = Suc n \\<and> length xs = Suc n \\<and> ext gt ys xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma wf_bounded_if_total: \"wfP (\\<lambda>xs ys. length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "unfolding wfP_iff_no_inf_chain"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> Ex (inf_chain\n                (\\<lambda>ys xs.\n                    length ys \\<le> n \\<and>\n                    length xs \\<le> n \\<and> ext gt ys xs))", "proof (intro notI, induct n rule: less_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "case (less n)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n;\n   \\<exists>a.\n      inf_chain\n       (\\<lambda>ys xs.\n           length ys \\<le> ?y \\<and> length xs \\<le> ?y \\<and> ext gt ys xs)\n       a\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<exists>a.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n      a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "note ih = this(1) and ex_bad = this(2)"], ["proof (state)\nthis:\n  \\<lbrakk>?y < n;\n   \\<exists>a.\n      inf_chain\n       (\\<lambda>ys xs.\n           length ys \\<le> ?y \\<and> length xs \\<le> ?y \\<and> ext gt ys xs)\n       a\\<rbrakk>\n  \\<Longrightarrow> False\n  \\<exists>a.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n      a\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "let ?gtsle = \"\\<lambda>ys xs. length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "obtain xs where xs_bad: \"bad ?gtsle xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        bad (\\<lambda>ys xs.\n                length ys \\<le> n \\<and>\n                length xs \\<le> n \\<and> ext gt ys xs)\n         xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex_bad"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n      a\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        bad (\\<lambda>ys xs.\n                length ys \\<le> n \\<and>\n                length xs \\<le> n \\<and> ext gt ys xs)\n         xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "unfolding inf_chain_def bad_def"], ["proof (prove)\nusing this:\n  \\<exists>a.\n     \\<forall>i.\n        length (a i) \\<le> n \\<and>\n        length (a (Suc i)) \\<le> n \\<and> ext gt (a i) (a (Suc i))\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<exists>f.\n           (\\<forall>i.\n               length (f i) \\<le> n \\<and>\n               length (f (Suc i)) \\<le> n \\<and>\n               ext gt (f i) (f (Suc i))) \\<and>\n           f 0 = xs \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bad (\\<lambda>ys xs.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n   xs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "let ?ff = \"worst_chain ?gtsle (\\<lambda>ys xs. length ys > length xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "note wf_len = wf_app[OF wellorder_class.wf, of length, simplified]"], ["proof (state)\nthis:\n  wf {(x, y). length x < length y}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "have ff_bad: \"inf_chain ?gtsle ?ff\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (worst_chain\n       (\\<lambda>ys xs.\n           length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n       (\\<lambda>ys xs. length xs < length ys))", "by (rule worst_chain_bad[OF wf_len xs_bad])"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "have ffi_bad: \"\\<And>i. bad ?gtsle (?ff i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       bad (\\<lambda>ys xs.\n               length ys \\<le> n \\<and>\n               length xs \\<le> n \\<and> ext gt ys xs)\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)", "by (rule inf_chain_bad[OF ff_bad])"], ["proof (state)\nthis:\n  bad (\\<lambda>ys xs.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "have len_le_n: \"\\<And>i. length (?ff i) \\<le> n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       \\<le> n", "using worst_chain_pred[OF wf_len xs_bad]"], ["proof (prove)\nusing this:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>y x. length x < length y) ?i)\n  \\<le> n \\<and>\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>y x. length x < length y) (Suc ?i))\n  \\<le> n \\<and>\n  ext gt\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>y x. length x < length y) ?i)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>y x. length x < length y) (Suc ?i))\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       \\<le> n", "by simp"], ["proof (state)\nthis:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "have len_le_Suc: \"\\<And>i. length (?ff i) \\<le> length (?ff (Suc i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       \\<le> length\n              (worst_chain\n                (\\<lambda>ys xs.\n                    length ys \\<le> n \\<and>\n                    length xs \\<le> n \\<and> ext gt ys xs)\n                (\\<lambda>ys xs. length xs < length ys) (Suc i))", "using worst_chain_not_gt[OF wf_len xs_bad] not_le_imp_less"], ["proof (prove)\nusing this:\n  (\\<And>z y x.\n      \\<lbrakk>length z \\<le> n \\<and> length y \\<le> n \\<and> ext gt z y;\n       length y \\<le> n \\<and> length x \\<le> n \\<and> ext gt y x\\<rbrakk>\n      \\<Longrightarrow> length z \\<le> n \\<and>\n                        length x \\<le> n \\<and>\n                        ext gt z x) \\<Longrightarrow>\n  \\<not> length\n          (worst_chain\n            (\\<lambda>ys xs.\n                length ys \\<le> n \\<and>\n                length xs \\<le> n \\<and> ext gt ys xs)\n            (\\<lambda>y x. length x < length y) (Suc ?i))\n         < length\n            (worst_chain\n              (\\<lambda>ys xs.\n                  length ys \\<le> n \\<and>\n                  length xs \\<le> n \\<and> ext gt ys xs)\n              (\\<lambda>y x. length x < length y) ?i)\n  \\<not> ?y \\<le> ?x \\<Longrightarrow> ?x < ?y\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       \\<le> length\n              (worst_chain\n                (\\<lambda>ys xs.\n                    length ys \\<le> n \\<and>\n                    length xs \\<le> n \\<and> ext gt ys xs)\n                (\\<lambda>ys xs. length xs < length ys) (Suc i))", "by (blast intro: trans_gt)"], ["proof (state)\nthis:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  \\<le> length\n         (worst_chain\n           (\\<lambda>ys xs.\n               length ys \\<le> n \\<and>\n               length xs \\<le> n \\<and> ext gt ys xs)\n           (\\<lambda>ys xs. length xs < length ys) (Suc ?i))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>\\<And>y.\n                   \\<lbrakk>y < x;\n                    Ex (inf_chain\n                         (\\<lambda>ys xs.\n                             length ys \\<le> y \\<and>\n                             length xs \\<le> y \\<and>\n                             ext gt ys xs))\\<rbrakk>\n                   \\<Longrightarrow> False;\n        Ex (inf_chain\n             (\\<lambda>ys xs.\n                 length ys \\<le> x \\<and>\n                 length xs \\<le> x \\<and> ext gt ys xs))\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "proof (cases \"\\<exists>k. length (?ff k) = n\")"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False\n 2. \\<nexists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "case False"], ["proof (state)\nthis:\n  \\<nexists>k.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) k) =\n     n\n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False\n 2. \\<nexists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "hence len_lt_n: \"\\<And>i. length (?ff i) < n\""], ["proof (prove)\nusing this:\n  \\<nexists>k.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) k) =\n     n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       < n", "using len_le_n"], ["proof (prove)\nusing this:\n  \\<nexists>k.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) k) =\n     n\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  \\<le> n\n\ngoal (1 subgoal):\n 1. \\<And>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       < n", "by (blast intro: le_neq_implies_less)"], ["proof (state)\nthis:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  < n\n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False\n 2. \\<nexists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "hence nm1_le: \"n - 1 < n\""], ["proof (prove)\nusing this:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  < n\n\ngoal (1 subgoal):\n 1. n - 1 < n", "by fastforce"], ["proof (state)\nthis:\n  n - 1 < n\n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False\n 2. \\<nexists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "let ?gtslt = \"\\<lambda>ys xs. length ys \\<le> n - 1 \\<and> length xs \\<le> n - 1 \\<and> ext gt ys xs\""], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False\n 2. \\<nexists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "have \"inf_chain ?gtslt ?ff\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n - 1 \\<and>\n         length xs \\<le> n - 1 \\<and> ext gt ys xs)\n     (worst_chain\n       (\\<lambda>ys xs.\n           length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n       (\\<lambda>ys xs. length xs < length ys))", "using ff_bad len_lt_n"], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys))\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  < n\n\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n - 1 \\<and>\n         length xs \\<le> n - 1 \\<and> ext gt ys xs)\n     (worst_chain\n       (\\<lambda>ys xs.\n           length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n       (\\<lambda>ys xs. length xs < length ys))", "unfolding inf_chain_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) i)\n     \\<le> n \\<and>\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (Suc i))\n     \\<le> n \\<and>\n     ext gt\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) i)\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (Suc i))\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) ?i)\n  < n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n       \\<le> n - 1 \\<and>\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (Suc i))\n       \\<le> n - 1 \\<and>\n       ext gt\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) i)\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (Suc i))", "by (metis (no_types, lifting) Suc_diff_1 le_antisym nat_neq_iff not_less0 not_less_eq_eq)"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n - 1 \\<and>\n       length xs \\<le> n - 1 \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys))\n\ngoal (2 subgoals):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False\n 2. \\<nexists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n - 1 \\<and>\n       length xs \\<le> n - 1 \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys))\n\ngoal (1 subgoal):\n 1. False", "using ih[OF nm1_le]"], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n - 1 \\<and>\n       length xs \\<le> n - 1 \\<and> ext gt ys xs)\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys))\n  \\<exists>a.\n     inf_chain\n      (\\<lambda>ys xs.\n          length ys \\<le> n - 1 \\<and>\n          length xs \\<le> n - 1 \\<and> ext gt ys xs)\n      a \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "case True"], ["proof (state)\nthis:\n  \\<exists>k.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) k) =\n     n\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "then"], ["proof (chain)\npicking this:\n  \\<exists>k.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) k) =\n     n", "obtain k where len_eq_n: \"length (?ff k) = n\""], ["proof (prove)\nusing this:\n  \\<exists>k.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) k) =\n     n\n\ngoal (1 subgoal):\n 1. (\\<And>k.\n        length\n         (worst_chain\n           (\\<lambda>ys xs.\n               length ys \\<le> n \\<and>\n               length xs \\<le> n \\<and> ext gt ys xs)\n           (\\<lambda>ys xs. length xs < length ys) k) =\n        n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) k) =\n  n\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "let ?gtssl = \"\\<lambda>ys xs. length ys = n \\<and> length xs = n \\<and> ext gt ys xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "have len_eq_n: \"length (?ff (i + k)) = n\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. length\n     (worst_chain\n       (\\<lambda>ys xs.\n           length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n       (\\<lambda>ys xs. length xs < length ys) (i + k)) =\n    n", "by (induct i) (simp add: len_eq_n,\n        metis (lifting) len_le_n len_le_Suc add_Suc dual_order.antisym)"], ["proof (state)\nthis:\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) (?i + k)) =\n  n\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "have \"inf_chain ?gtsle (\\<lambda>i. ?ff (i + k))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>i.\n         worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (i + k))", "by (rule inf_chain_offset[OF ff_bad])"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n   (\\<lambda>i.\n       worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "hence \"inf_chain ?gtssl (\\<lambda>i. ?ff (i + k))\""], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs.\n       length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n   (\\<lambda>i.\n       worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n\ngoal (1 subgoal):\n 1. inf_chain\n     (\\<lambda>ys xs.\n         length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n     (\\<lambda>i.\n         worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (i + k))", "unfolding inf_chain_def"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n     \\<le> n \\<and>\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (Suc i + k))\n     \\<le> n \\<and>\n     ext gt\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (Suc i + k))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (i + k)) =\n       n \\<and>\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (Suc i + k)) =\n       n \\<and>\n       ext gt\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (i + k))\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (Suc i + k))", "using len_eq_n"], ["proof (prove)\nusing this:\n  \\<forall>i.\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n     \\<le> n \\<and>\n     length\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (Suc i + k))\n     \\<le> n \\<and>\n     ext gt\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n      (worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (Suc i + k))\n  length\n   (worst_chain\n     (\\<lambda>ys xs.\n         length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n     (\\<lambda>ys xs. length xs < length ys) (?i + k)) =\n  n\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (i + k)) =\n       n \\<and>\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (Suc i + k)) =\n       n \\<and>\n       ext gt\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (i + k))\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) (Suc i + k))", "by presburger"], ["proof (state)\nthis:\n  inf_chain\n   (\\<lambda>ys xs. length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n   (\\<lambda>i.\n       worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "hence \"\\<not> wfP (\\<lambda>xs ys. ?gtssl ys xs)\""], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs. length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n   (\\<lambda>i.\n       worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n\ngoal (1 subgoal):\n 1. \\<not> wfP (\\<lambda>xs ys.\n                   length ys = n \\<and> length xs = n \\<and> ext gt ys xs)", "using wfP_iff_no_inf_chain"], ["proof (prove)\nusing this:\n  inf_chain\n   (\\<lambda>ys xs. length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n   (\\<lambda>i.\n       worst_chain\n        (\\<lambda>ys xs.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n        (\\<lambda>ys xs. length xs < length ys) (i + k))\n  wfP (\\<lambda>x y. ?p y x) = (\\<nexists>f. inf_chain ?p f)\n\ngoal (1 subgoal):\n 1. \\<not> wfP (\\<lambda>xs ys.\n                   length ys = n \\<and> length xs = n \\<and> ext gt ys xs)", "by blast"], ["proof (state)\nthis:\n  \\<not> wfP (\\<lambda>xs ys.\n                 length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n\ngoal (1 subgoal):\n 1. \\<exists>k.\n       length\n        (worst_chain\n          (\\<lambda>ys xs.\n              length ys \\<le> n \\<and>\n              length xs \\<le> n \\<and> ext gt ys xs)\n          (\\<lambda>ys xs. length xs < length ys) k) =\n       n \\<Longrightarrow>\n    False", "thus False"], ["proof (prove)\nusing this:\n  \\<not> wfP (\\<lambda>xs ys.\n                 length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n\ngoal (1 subgoal):\n 1. False", "using wf_same_length_if_total[of n]"], ["proof (prove)\nusing this:\n  \\<not> wfP (\\<lambda>xs ys.\n                 length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n  wfP (\\<lambda>xs ys.\n          length ys = n \\<and> length xs = n \\<and> ext gt ys xs)\n\ngoal (1 subgoal):\n 1. False", "by sat"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context\n  fixes gt :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  assumes\n    gt_irrefl: \"\\<And>z. \\<not> gt z z\" and\n    gt_wf: \"wfP (\\<lambda>x y. gt y x)\"\nbegin"], ["", "lemma wf_bounded: \"wfP (\\<lambda>xs ys. length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "obtain Ge' where\n    gt_sub_Ge': \"{(x, y). gt y x} \\<subseteq> Ge'\" and\n    Ge'_wo: \"Well_order Ge'\" and\n    Ge'_fld: \"Field Ge' = UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Ge'.\n        \\<lbrakk>{(x, y). gt y x} \\<subseteq> Ge'; Well_order Ge';\n         Field Ge' = UNIV\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using total_well_order_extension[OF gt_wf[unfolded wfP_def]]"], ["proof (prove)\nusing this:\n  \\<exists>w.\n     {(x, y). gt y x} \\<subseteq> w \\<and>\n     Well_order w \\<and> Field w = UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>Ge'.\n        \\<lbrakk>{(x, y). gt y x} \\<subseteq> Ge'; Well_order Ge';\n         Field Ge' = UNIV\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  {(x, y). gt y x} \\<subseteq> Ge'\n  Well_order Ge'\n  Field Ge' = UNIV\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "define gt' where \"\\<And>y x. gt' y x \\<longleftrightarrow> y \\<noteq> x \\<and> (x, y) \\<in> Ge'\""], ["proof (state)\nthis:\n  gt' ?y ?x = (?y \\<noteq> ?x \\<and> (?x, ?y) \\<in> Ge')\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have gt_imp_gt': \"gt \\<le> gt'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt \\<le> gt'", "by (auto simp: gt'_def gt_irrefl intro: gt_sub_Ge'[THEN subsetD])"], ["proof (state)\nthis:\n  gt \\<le> gt'\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have gt'_irrefl: \"\\<And>z. \\<not> gt' z z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z. \\<not> gt' z z", "unfolding gt'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z. \\<not> (z \\<noteq> z \\<and> (z, z) \\<in> Ge')", "by simp"], ["proof (state)\nthis:\n  \\<not> gt' ?z ?z\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have gt'_trans: \"\\<And>z y x. gt' z y \\<Longrightarrow> gt' y x \\<Longrightarrow> gt' z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>z y x.\n       \\<lbrakk>gt' z y; gt' y x\\<rbrakk> \\<Longrightarrow> gt' z x", "using Ge'_wo"], ["proof (prove)\nusing this:\n  Well_order Ge'\n\ngoal (1 subgoal):\n 1. \\<And>z y x.\n       \\<lbrakk>gt' z y; gt' y x\\<rbrakk> \\<Longrightarrow> gt' z x", "unfolding gt'_def well_order_on_def linear_order_on_def partial_order_on_def preorder_on_def\n      trans_def antisym_def"], ["proof (prove)\nusing this:\n  (((Refl Ge' \\<and>\n     (\\<forall>x y z.\n         (x, y) \\<in> Ge' \\<longrightarrow>\n         (y, z) \\<in> Ge' \\<longrightarrow> (x, z) \\<in> Ge')) \\<and>\n    (\\<forall>x y.\n        (x, y) \\<in> Ge' \\<longrightarrow>\n        (y, x) \\<in> Ge' \\<longrightarrow> x = y)) \\<and>\n   Total Ge') \\<and>\n  wf (Ge' - Id)\n\ngoal (1 subgoal):\n 1. \\<And>z y x.\n       \\<lbrakk>z \\<noteq> y \\<and> (y, z) \\<in> Ge';\n        y \\<noteq> x \\<and> (x, y) \\<in> Ge'\\<rbrakk>\n       \\<Longrightarrow> z \\<noteq> x \\<and> (x, z) \\<in> Ge'", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>gt' ?z ?y; gt' ?y ?x\\<rbrakk> \\<Longrightarrow> gt' ?z ?x\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have \"wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}", "by (rule Ge'_wo[unfolded well_order_on_def set_diff_eq\n      case_prod_eta[symmetric, of \"\\<lambda>xy. xy \\<in> Ge' \\<and> xy \\<notin> Id\"] pair_in_Id_conv, THEN conjunct2])"], ["proof (state)\nthis:\n  wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "moreover"], ["proof (state)\nthis:\n  wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have \"\\<And>y x. (x, y) \\<in> Ge' \\<and> x \\<noteq> y \\<longleftrightarrow> y \\<noteq> x \\<and> (x, y) \\<in> Ge'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y x.\n       ((x, y) \\<in> Ge' \\<and> x \\<noteq> y) =\n       (y \\<noteq> x \\<and> (x, y) \\<in> Ge')", "by auto"], ["proof (state)\nthis:\n  ((?x, ?y) \\<in> Ge' \\<and> ?x \\<noteq> ?y) =\n  (?y \\<noteq> ?x \\<and> (?x, ?y) \\<in> Ge')\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "ultimately"], ["proof (chain)\npicking this:\n  wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}\n  ((?x, ?y) \\<in> Ge' \\<and> ?x \\<noteq> ?y) =\n  (?y \\<noteq> ?x \\<and> (?x, ?y) \\<in> Ge')", "have gt'_wf: \"wfP (\\<lambda>x y. gt' y x)\""], ["proof (prove)\nusing this:\n  wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}\n  ((?x, ?y) \\<in> Ge' \\<and> ?x \\<noteq> ?y) =\n  (?y \\<noteq> ?x \\<and> (?x, ?y) \\<in> Ge')\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. gt' y x)", "unfolding wfP_def gt'_def"], ["proof (prove)\nusing this:\n  wf {(x, y). (x, y) \\<in> Ge' \\<and> x \\<noteq> y}\n  ((?x, ?y) \\<in> Ge' \\<and> ?x \\<noteq> ?y) =\n  (?y \\<noteq> ?x \\<and> (?x, ?y) \\<in> Ge')\n\ngoal (1 subgoal):\n 1. wf {(x, y). y \\<noteq> x \\<and> (x, y) \\<in> Ge'}", "by simp"], ["proof (state)\nthis:\n  wfP (\\<lambda>x y. gt' y x)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have gt'_total: \"\\<And>x y. gt' y x \\<or> gt' x y \\<or> y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y. gt' y x \\<or> gt' x y \\<or> y = x", "using Ge'_wo"], ["proof (prove)\nusing this:\n  Well_order Ge'\n\ngoal (1 subgoal):\n 1. \\<And>x y. gt' y x \\<or> gt' x y \\<or> y = x", "unfolding gt'_def well_order_on_def linear_order_on_def total_on_def Ge'_fld"], ["proof (prove)\nusing this:\n  (partial_order_on UNIV Ge' \\<and>\n   (\\<forall>x\\<in>UNIV.\n       \\<forall>y\\<in>UNIV.\n          x \\<noteq> y \\<longrightarrow>\n          (x, y) \\<in> Ge' \\<or> (y, x) \\<in> Ge')) \\<and>\n  wf (Ge' - Id)\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       y \\<noteq> x \\<and> (x, y) \\<in> Ge' \\<or>\n       x \\<noteq> y \\<and> (y, x) \\<in> Ge' \\<or> y = x", "by blast"], ["proof (state)\nthis:\n  gt' ?y ?x \\<or> gt' ?x ?y \\<or> ?y = ?x\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "have \"wfP (\\<lambda>xs ys. length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt' ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt' ys xs)", "using wf_bounded_if_total gt'_total gt'_irrefl gt'_trans gt'_wf"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<And>z. \\<not> ?gt z z;\n   \\<And>z y x.\n      \\<lbrakk>?gt z y; ?gt y x\\<rbrakk> \\<Longrightarrow> ?gt z x;\n   \\<And>y x. ?gt y x \\<or> ?gt x y \\<or> y = x;\n   wfP (\\<lambda>x y. ?gt y x)\\<rbrakk>\n  \\<Longrightarrow> wfP (\\<lambda>xs ys.\n                            length ys \\<le> ?n \\<and>\n                            length xs \\<le> ?n \\<and> ext ?gt ys xs)\n  gt' ?y ?x \\<or> gt' ?x ?y \\<or> ?y = ?x\n  \\<not> gt' ?z ?z\n  \\<lbrakk>gt' ?z ?y; gt' ?y ?x\\<rbrakk> \\<Longrightarrow> gt' ?z ?x\n  wfP (\\<lambda>x y. gt' y x)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt' ys xs)", "by blast"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt' ys xs)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  wfP (\\<lambda>xs ys.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt' ys xs)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys.\n            length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)", "by (rule wfP_subset) (auto intro: mono[OF gt_imp_gt', THEN predicate2D])"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys.\n          length ys \\<le> n \\<and> length xs \\<le> n \\<and> ext gt ys xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "subsection \\<open>Lexicographic Extension\\<close>"], ["", "inductive lexext :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" for gt where\n  lexext_Nil: \"lexext gt (y # ys) []\"\n| lexext_Cons: \"gt y x \\<Longrightarrow> lexext gt (y # ys) (x # xs)\"\n| lexext_Cons_eq: \"lexext gt ys xs \\<Longrightarrow> lexext gt (x # ys) (x # xs)\""], ["", "lemma lexext_simps[simp]:\n  \"lexext gt ys [] \\<longleftrightarrow> ys \\<noteq> []\"\n  \"\\<not> lexext gt [] xs\"\n  \"lexext gt (y # ys) (x # xs) \\<longleftrightarrow> gt y x \\<or> x = y \\<and> lexext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt ys [] = (ys \\<noteq> []) &&&\n    \\<not> lexext gt [] xs &&&\n    lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "proof"], ["proof (state)\ngoal (4 subgoals):\n 1. lexext gt ys [] \\<Longrightarrow> ys \\<noteq> []\n 2. ys \\<noteq> [] \\<Longrightarrow> lexext gt ys []\n 3. \\<not> lexext gt [] xs\n 4. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "show \"lexext gt ys [] \\<Longrightarrow> (ys \\<noteq> [])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt ys [] \\<Longrightarrow> ys \\<noteq> []", "by (metis lexext.cases list.distinct(1))"], ["proof (state)\nthis:\n  lexext gt ys [] \\<Longrightarrow> ys \\<noteq> []\n\ngoal (3 subgoals):\n 1. ys \\<noteq> [] \\<Longrightarrow> lexext gt ys []\n 2. \\<not> lexext gt [] xs\n 3. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. ys \\<noteq> [] \\<Longrightarrow> lexext gt ys []\n 2. \\<not> lexext gt [] xs\n 3. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "show \"ys \\<noteq> [] \\<Longrightarrow> lexext gt ys []\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ys \\<noteq> [] \\<Longrightarrow> lexext gt ys []", "by (metis lexext_Nil list.exhaust)"], ["proof (state)\nthis:\n  ys \\<noteq> [] \\<Longrightarrow> lexext gt ys []\n\ngoal (2 subgoals):\n 1. \\<not> lexext gt [] xs\n 2. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<not> lexext gt [] xs\n 2. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "show \"\\<not> lexext gt [] xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lexext gt [] xs", "using lexext.cases"], ["proof (prove)\nusing this:\n  \\<lbrakk>lexext ?gt ?a1.0 ?a2.0;\n   \\<And>y ys.\n      \\<lbrakk>?a1.0 = y # ys; ?a2.0 = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>y x ys xs.\n      \\<lbrakk>?a1.0 = y # ys; ?a2.0 = x # xs; ?gt y x\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>ys xs x.\n      \\<lbrakk>?a1.0 = x # ys; ?a2.0 = x # xs; lexext ?gt ys xs\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. \\<not> lexext gt [] xs", "by auto"], ["proof (state)\nthis:\n  \\<not> lexext gt [] xs\n\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "show \"lexext gt (y # ys) (x # xs) = (gt y x \\<or> x = y \\<and> lexext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "have fwdd: \"lexext gt (y # ys) (x # xs) \\<longrightarrow> gt y x \\<or> x = y \\<and> lexext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) \\<longrightarrow>\n    gt y x \\<or> x = y \\<and> lexext gt ys xs", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> x = y \\<and> lexext gt ys xs", "assume \"lexext gt (y # ys) (x # xs)\""], ["proof (state)\nthis:\n  lexext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> x = y \\<and> lexext gt ys xs", "thus \"gt y x \\<or> x = y \\<and> lexext gt ys xs\""], ["proof (prove)\nusing this:\n  lexext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. gt y x \\<or> x = y \\<and> lexext gt ys xs", "using lexext.cases"], ["proof (prove)\nusing this:\n  lexext gt (y # ys) (x # xs)\n  \\<lbrakk>lexext ?gt ?a1.0 ?a2.0;\n   \\<And>y ys.\n      \\<lbrakk>?a1.0 = y # ys; ?a2.0 = []\\<rbrakk> \\<Longrightarrow> ?P;\n   \\<And>y x ys xs.\n      \\<lbrakk>?a1.0 = y # ys; ?a2.0 = x # xs; ?gt y x\\<rbrakk>\n      \\<Longrightarrow> ?P;\n   \\<And>ys xs x.\n      \\<lbrakk>?a1.0 = x # ys; ?a2.0 = x # xs; lexext ?gt ys xs\\<rbrakk>\n      \\<Longrightarrow> ?P\\<rbrakk>\n  \\<Longrightarrow> ?P\n\ngoal (1 subgoal):\n 1. gt y x \\<or> x = y \\<and> lexext gt ys xs", "by blast"], ["proof (state)\nthis:\n  gt y x \\<or> x = y \\<and> lexext gt ys xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lexext gt (y # ys) (x # xs) \\<longrightarrow>\n  gt y x \\<or> x = y \\<and> lexext gt ys xs\n\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "have backd: \"gt y x \\<or> x = y \\<and> lexext gt ys xs \\<longrightarrow> lexext gt (y # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<or> x = y \\<and> lexext gt ys xs \\<longrightarrow>\n    lexext gt (y # ys) (x # xs)", "by (simp add: lexext_Cons lexext_Cons_eq)"], ["proof (state)\nthis:\n  gt y x \\<or> x = y \\<and> lexext gt ys xs \\<longrightarrow>\n  lexext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "show \"lexext gt (y # ys) (x # xs) = (gt y x \\<or> x = y \\<and> lexext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "using fwdd backd"], ["proof (prove)\nusing this:\n  lexext gt (y # ys) (x # xs) \\<longrightarrow>\n  gt y x \\<or> x = y \\<and> lexext gt ys xs\n  gt y x \\<or> x = y \\<and> lexext gt ys xs \\<longrightarrow>\n  lexext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) =\n    (gt y x \\<or> x = y \\<and> lexext gt ys xs)", "by blast"], ["proof (state)\nthis:\n  lexext gt (y # ys) (x # xs) = (gt y x \\<or> x = y \\<and> lexext gt ys xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lexext gt (y # ys) (x # xs) = (gt y x \\<or> x = y \\<and> lexext gt ys xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lexext_mono_strong:\n  assumes\n    \"\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x\" and\n    \"lexext gt ys xs\"\n  shows \"lexext gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt' ys xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set ys.\n     \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. lexext gt' ys xs", "by (induct ys xs rule: list_induct2') auto"], ["", "lemma lexext_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> lexext gt ys xs \\<Longrightarrow>\n   lexext gt (map f ys) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs.\n                   gt y x \\<longrightarrow> gt (f y) (f x);\n     lexext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> lexext gt (map f ys) (map f xs)", "by (induct ys xs rule: list_induct2') auto"], ["", "lemma lexext_irrefl:\n  assumes \"\\<forall>x \\<in> set xs. \\<not> gt x x\"\n  shows \"\\<not> lexext gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lexext gt xs xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. \\<not> gt x x\n\ngoal (1 subgoal):\n 1. \\<not> lexext gt xs xs", "by (induct xs) auto"], ["", "lemma lexext_trans_strong:\n  assumes\n    \"\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    \"lexext gt zs ys\" and \"lexext gt ys xs\"\n  shows \"lexext gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt zs xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set zs.\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  lexext gt zs ys\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. lexext gt zs xs", "proof (induct zs arbitrary: ys xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>\\<forall>z\\<in>set [].\n                   \\<forall>y\\<in>set ys.\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt [] ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt [] xs\n 2. \\<And>a zs ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>\\<forall>z\\<in>set zs.\n                               \\<forall>y\\<in>set ys.\n                                  \\<forall>x\\<in>set xs.\n                                     gt z y \\<longrightarrow>\n                                     gt y x \\<longrightarrow> gt z x;\n                    lexext gt zs ys; lexext gt ys xs\\<rbrakk>\n                   \\<Longrightarrow> lexext gt zs xs;\n        \\<forall>z\\<in>set (a # zs).\n           \\<forall>y\\<in>set ys.\n              \\<forall>x\\<in>set xs.\n                 gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x;\n        lexext gt (a # zs) ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (a # zs) xs", "case (Cons z zs)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>z\\<in>set zs.\n              \\<forall>y\\<in>set ?ys.\n                 \\<forall>x\\<in>set ?xs.\n                    gt z y \\<longrightarrow>\n                    gt y x \\<longrightarrow> gt z x;\n   lexext gt zs ?ys; lexext gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt zs ?xs\n  \\<forall>z\\<in>set (z # zs).\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  lexext gt (z # zs) ys\n  lexext gt ys xs\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>\\<forall>z\\<in>set [].\n                   \\<forall>y\\<in>set ys.\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt [] ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt [] xs\n 2. \\<And>a zs ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>\\<forall>z\\<in>set zs.\n                               \\<forall>y\\<in>set ys.\n                                  \\<forall>x\\<in>set xs.\n                                     gt z y \\<longrightarrow>\n                                     gt y x \\<longrightarrow> gt z x;\n                    lexext gt zs ys; lexext gt ys xs\\<rbrakk>\n                   \\<Longrightarrow> lexext gt zs xs;\n        \\<forall>z\\<in>set (a # zs).\n           \\<forall>y\\<in>set ys.\n              \\<forall>x\\<in>set xs.\n                 gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x;\n        lexext gt (a # zs) ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (a # zs) xs", "note zs_trans = this(1)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>z\\<in>set zs.\n              \\<forall>y\\<in>set ?ys.\n                 \\<forall>x\\<in>set ?xs.\n                    gt z y \\<longrightarrow>\n                    gt y x \\<longrightarrow> gt z x;\n   lexext gt zs ?ys; lexext gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt zs ?xs\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>\\<forall>z\\<in>set [].\n                   \\<forall>y\\<in>set ys.\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt [] ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt [] xs\n 2. \\<And>a zs ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>\\<forall>z\\<in>set zs.\n                               \\<forall>y\\<in>set ys.\n                                  \\<forall>x\\<in>set xs.\n                                     gt z y \\<longrightarrow>\n                                     gt y x \\<longrightarrow> gt z x;\n                    lexext gt zs ys; lexext gt ys xs\\<rbrakk>\n                   \\<Longrightarrow> lexext gt zs xs;\n        \\<forall>z\\<in>set (a # zs).\n           \\<forall>y\\<in>set ys.\n              \\<forall>x\\<in>set xs.\n                 gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x;\n        lexext gt (a # zs) ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (a # zs) xs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (z # zs) xs", "using Cons(2-4)"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set (z # zs).\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  lexext gt (z # zs) ys\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) xs", "proof (induct ys arbitrary: xs rule: list.induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                   \\<forall>y\\<in>set [].\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) []; lexext gt [] xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs\n 2. \\<And>x1 x2 xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                               \\<forall>y\\<in>set x2.\n                                  \\<forall>x\\<in>set xs.\n                                     gt z y \\<longrightarrow>\n                                     gt y x \\<longrightarrow> gt z x;\n                    lexext gt (z # zs) x2; lexext gt x2 xs\\<rbrakk>\n                   \\<Longrightarrow> lexext gt (z # zs) xs;\n        \\<forall>z\\<in>set (z # zs).\n           \\<forall>y\\<in>set (x1 # x2).\n              \\<forall>x\\<in>set xs.\n                 gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) (x1 # x2); lexext gt (x1 # x2) xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs", "case (Cons y ys)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n              \\<forall>y\\<in>set ys.\n                 \\<forall>x\\<in>set ?xs.\n                    gt z y \\<longrightarrow>\n                    gt y x \\<longrightarrow> gt z x;\n   lexext gt (z # zs) ys; lexext gt ys ?xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) ?xs\n  \\<forall>z\\<in>set (z # zs).\n     \\<forall>y\\<in>set (y # ys).\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  lexext gt (z # zs) (y # ys)\n  lexext gt (y # ys) xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                   \\<forall>y\\<in>set [].\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) []; lexext gt [] xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs\n 2. \\<And>x1 x2 xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                               \\<forall>y\\<in>set x2.\n                                  \\<forall>x\\<in>set xs.\n                                     gt z y \\<longrightarrow>\n                                     gt y x \\<longrightarrow> gt z x;\n                    lexext gt (z # zs) x2; lexext gt x2 xs\\<rbrakk>\n                   \\<Longrightarrow> lexext gt (z # zs) xs;\n        \\<forall>z\\<in>set (z # zs).\n           \\<forall>y\\<in>set (x1 # x2).\n              \\<forall>x\\<in>set xs.\n                 gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) (x1 # x2); lexext gt (x1 # x2) xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs", "note ys_trans = this(1) and gt_trans = this(2) and zzs_gt_yys = this(3) and yys_gt_xs = this(4)"], ["proof (state)\nthis:\n  \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n              \\<forall>y\\<in>set ys.\n                 \\<forall>x\\<in>set ?xs.\n                    gt z y \\<longrightarrow>\n                    gt y x \\<longrightarrow> gt z x;\n   lexext gt (z # zs) ys; lexext gt ys ?xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) ?xs\n  \\<forall>z\\<in>set (z # zs).\n     \\<forall>y\\<in>set (y # ys).\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  lexext gt (z # zs) (y # ys)\n  lexext gt (y # ys) xs\n\ngoal (2 subgoals):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                   \\<forall>y\\<in>set [].\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) []; lexext gt [] xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs\n 2. \\<And>x1 x2 xs.\n       \\<lbrakk>\\<And>xs.\n                   \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                               \\<forall>y\\<in>set x2.\n                                  \\<forall>x\\<in>set xs.\n                                     gt z y \\<longrightarrow>\n                                     gt y x \\<longrightarrow> gt z x;\n                    lexext gt (z # zs) x2; lexext gt x2 xs\\<rbrakk>\n                   \\<Longrightarrow> lexext gt (z # zs) xs;\n        \\<forall>z\\<in>set (z # zs).\n           \\<forall>y\\<in>set (x1 # x2).\n              \\<forall>x\\<in>set xs.\n                 gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) (x1 # x2); lexext gt (x1 # x2) xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (z # zs) xs", "proof (cases xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. xs = [] \\<Longrightarrow> lexext gt (z # zs) xs\n 2. \\<And>a list. xs = a # list \\<Longrightarrow> lexext gt (z # zs) xs", "case xs: (Cons x xs)"], ["proof (state)\nthis:\n  xsb__ = x # xs\n\ngoal (2 subgoals):\n 1. xsb__ = [] \\<Longrightarrow> lexext gt (z # zs) xsb__\n 2. \\<And>a list.\n       xsb__ = a # list \\<Longrightarrow> lexext gt (z # zs) xsb__", "thus ?thesis"], ["proof (prove)\nusing this:\n  xsb__ = x # xs\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) xsb__", "proof (unfold xs)"], ["proof (state)\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "note yys_gt_xxs = yys_gt_xs[unfolded xs]"], ["proof (state)\nthis:\n  lexext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "note gt_trans = gt_trans[unfolded xs]"], ["proof (state)\nthis:\n  \\<forall>z\\<in>set (z # zs).\n     \\<forall>y\\<in>set (y # ys).\n        \\<forall>x\\<in>set (x # xs).\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "let ?case = \"lexext gt (z # zs) (x # xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "assume \"gt z y\" and \"gt y x\""], ["proof (state)\nthis:\n  gt z y\n  gt y x\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "hence ?case"], ["proof (prove)\nusing this:\n  gt z y\n  gt y x\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "using gt_trans"], ["proof (prove)\nusing this:\n  gt z y\n  gt y x\n  \\<forall>z\\<in>set (z # zs).\n     \\<forall>y\\<in>set (y # ys).\n        \\<forall>x\\<in>set (x # xs).\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "by simp"], ["proof (state)\nthis:\n  lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>gt z y; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>gt z y; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>gt z y; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "assume \"gt z y\" and \"x = y\""], ["proof (state)\nthis:\n  gt z y\n  x = y\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "hence ?case"], ["proof (prove)\nusing this:\n  gt z y\n  x = y\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "by simp"], ["proof (state)\nthis:\n  lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>gt z y; x = y\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>gt z y; x = y\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>gt z y; x = y\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "assume \"y = z\" and \"gt y x\""], ["proof (state)\nthis:\n  y = z\n  gt y x\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "hence ?case"], ["proof (prove)\nusing this:\n  y = z\n  gt y x\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "by simp"], ["proof (state)\nthis:\n  lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y = z; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "moreover"], ["proof (state)\nthis:\n  \\<lbrakk>y = z; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "{"], ["proof (state)\nthis:\n  \\<lbrakk>y = z; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "assume\n            y_eq_z: \"y = z\" and\n            zs_gt_ys: \"lexext gt zs ys\" and\n            x_eq_y: \"x = y\" and\n            ys_gt_xs: \"lexext gt ys xs\""], ["proof (state)\nthis:\n  y = z\n  lexext gt zs ys\n  x = y\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "have \"lexext gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt zs xs", "by (rule zs_trans[OF _ zs_gt_ys ys_gt_xs]) (meson gt_trans[simplified])"], ["proof (state)\nthis:\n  lexext gt zs xs\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "hence ?case"], ["proof (prove)\nusing this:\n  lexext gt zs xs\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "by (simp add: x_eq_y y_eq_z)"], ["proof (state)\nthis:\n  lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y = z; lexext gt zs ys; x = y; lexext gt ys xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. x # xs = x # xs \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "ultimately"], ["proof (chain)\npicking this:\n  \\<lbrakk>gt z y; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>gt z y; x = y\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>y = z; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>y = z; lexext gt zs ys; x = y; lexext gt ys xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>gt z y; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>gt z y; x = y\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>y = z; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>y = z; lexext gt zs ys; x = y; lexext gt ys xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "using zzs_gt_yys yys_gt_xxs"], ["proof (prove)\nusing this:\n  \\<lbrakk>gt z y; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>gt z y; x = y\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>y = z; gt y x\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  \\<lbrakk>y = z; lexext gt zs ys; x = y; lexext gt ys xs\\<rbrakk>\n  \\<Longrightarrow> lexext gt (z # zs) (x # xs)\n  lexext gt (z # zs) (y # ys)\n  lexext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. lexext gt (z # zs) (x # xs)", "by force"], ["proof (state)\nthis:\n  lexext gt (z # zs) (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lexext gt (z # zs) xsb__\n\ngoal (1 subgoal):\n 1. xsb__ = [] \\<Longrightarrow> lexext gt (z # zs) xsb__", "qed auto"], ["proof (state)\nthis:\n  lexext gt (z # zs) xs\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>\\<forall>z\\<in>set (z # zs).\n                   \\<forall>y\\<in>set [].\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt (z # zs) []; lexext gt [] xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt (z # zs) xs", "qed auto"], ["proof (state)\nthis:\n  lexext gt (z # zs) xs\n\ngoal (1 subgoal):\n 1. \\<And>ys xs.\n       \\<lbrakk>\\<forall>z\\<in>set [].\n                   \\<forall>y\\<in>set ys.\n                      \\<forall>x\\<in>set xs.\n                         gt z y \\<longrightarrow>\n                         gt y x \\<longrightarrow> gt z x;\n        lexext gt [] ys; lexext gt ys xs\\<rbrakk>\n       \\<Longrightarrow> lexext gt [] xs", "qed auto"], ["", "lemma lexext_snoc: \"lexext gt (xs @ [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (xs @ [x]) xs", "by (induct xs) auto"], ["", "lemmas lexext_compat_cons = lexext_Cons_eq"], ["", "lemma lexext_compat_snoc_if_same_length:\n  assumes \"length ys = length xs\" and \"lexext gt ys xs\"\n  shows \"lexext gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (ys @ [x]) (xs @ [x])", "using assms(2,1)"], ["proof (prove)\nusing this:\n  lexext gt ys xs\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. lexext gt (ys @ [x]) (xs @ [x])", "by (induct rule: lexext.induct) auto"], ["", "lemma lexext_compat_list: \"gt y x \\<Longrightarrow> lexext gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<Longrightarrow> lexext gt (xs @ y # xs') (xs @ x # xs')", "by (induct xs) auto"], ["", "lemma lexext_singleton: \"lexext gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt [y] [x] = gt y x", "by simp"], ["", "lemma lexext_total: \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n  lexext gt ys xs \\<or> lexext gt xs ys \\<or> ys = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>B.\n                \\<forall>x\\<in>A. gt y x \\<or> gt x y \\<or> y = x;\n     ys \\<in> lists B; xs \\<in> lists A\\<rbrakk>\n    \\<Longrightarrow> lexext gt ys xs \\<or> lexext gt xs ys \\<or> ys = xs", "by (induct ys xs rule: list_induct2') auto"], ["", "lemma lexext_hd_or_tl: \"lexext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> lexext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> lexext gt ys xs", "by auto"], ["", "interpretation lexext: ext lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext lexext", "by standard (fact lexext_mono_strong, rule lexext_map_strong, metis in_listsD)"], ["", "interpretation lexext: ext_irrefl_trans_strong lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_trans_strong lexext", "by standard (fact lexext_irrefl, fact lexext_trans_strong)"], ["", "interpretation lexext: ext_snoc lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_snoc lexext", "by standard (fact lexext_snoc)"], ["", "interpretation lexext: ext_compat_cons lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_cons lexext", "by standard (fact lexext_compat_cons)"], ["", "interpretation lexext: ext_compat_list lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list lexext", "by standard (rule lexext_compat_list)"], ["", "interpretation lexext: ext_singleton lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton lexext", "by standard (rule lexext_singleton)"], ["", "interpretation lexext: ext_total lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_total lexext", "by standard (fact lexext_total)"], ["", "interpretation lexext: ext_hd_or_tl lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_hd_or_tl lexext", "by standard (rule lexext_hd_or_tl)"], ["", "interpretation lexext: ext_wf_bounded lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf_bounded lexext", "by standard"], ["", "subsection \\<open>Reverse (Right-to-Left) Lexicographic Extension\\<close>"], ["", "abbreviation lexext_rev :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"lexext_rev gt ys xs \\<equiv> lexext gt (rev ys) (rev xs)\""], ["", "lemma lexext_rev_simps[simp]:\n  \"lexext_rev gt ys [] \\<longleftrightarrow> ys \\<noteq> []\"\n  \"\\<not> lexext_rev gt [] xs\"\n  \"lexext_rev gt (ys @ [y]) (xs @ [x]) \\<longleftrightarrow> gt y x \\<or> x = y \\<and> lexext_rev gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt ys [] = (ys \\<noteq> []) &&&\n    \\<not> lexext_rev gt [] xs &&&\n    lexext_rev gt (ys @ [y]) (xs @ [x]) =\n    (gt y x \\<or> x = y \\<and> lexext_rev gt ys xs)", "by simp+"], ["", "lemma lexext_rev_cons_cons:\n  assumes \"length ys = length xs\"\n  shows \"lexext_rev gt (y # ys) (x # xs) \\<longleftrightarrow> lexext_rev gt ys xs \\<or> ys = xs \\<and> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt (y # ys) (x # xs) =\n    (lexext_rev gt ys xs \\<or> ys = xs \\<and> gt y x)", "using assms"], ["proof (prove)\nusing this:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. lexext_rev gt (y # ys) (x # xs) =\n    (lexext_rev gt ys xs \\<or> ys = xs \\<and> gt y x)", "proof (induct arbitrary: y x rule: rev_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y x.\n       lexext_rev gt [y] [x] =\n       (lexext_rev gt [] [] \\<or> [] = [] \\<and> gt y x)\n 2. \\<And>x xs y ys ya xa.\n       \\<lbrakk>length xs = length ys;\n        \\<And>y x.\n           lexext_rev gt (y # xs) (x # ys) =\n           (lexext_rev gt xs ys \\<or> xs = ys \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> lexext_rev gt (ya # xs @ [x]) (xa # ys @ [y]) =\n                         (lexext_rev gt (xs @ [x]) (ys @ [y]) \\<or>\n                          xs @ [x] = ys @ [y] \\<and> gt ya xa)", "case Nil"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>y x.\n       lexext_rev gt [y] [x] =\n       (lexext_rev gt [] [] \\<or> [] = [] \\<and> gt y x)\n 2. \\<And>x xs y ys ya xa.\n       \\<lbrakk>length xs = length ys;\n        \\<And>y x.\n           lexext_rev gt (y # xs) (x # ys) =\n           (lexext_rev gt xs ys \\<or> xs = ys \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> lexext_rev gt (ya # xs @ [x]) (xa # ys @ [y]) =\n                         (lexext_rev gt (xs @ [x]) (ys @ [y]) \\<or>\n                          xs @ [x] = ys @ [y] \\<and> gt ya xa)", "thus ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt [y] [x] =\n    (lexext_rev gt [] [] \\<or> [] = [] \\<and> gt y x)", "by simp"], ["proof (state)\nthis:\n  lexext_rev gt [y] [x] = (lexext_rev gt [] [] \\<or> [] = [] \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ya xa.\n       \\<lbrakk>length xs = length ys;\n        \\<And>y x.\n           lexext_rev gt (y # xs) (x # ys) =\n           (lexext_rev gt xs ys \\<or> xs = ys \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> lexext_rev gt (ya # xs @ [x]) (xa # ys @ [y]) =\n                         (lexext_rev gt (xs @ [x]) (ys @ [y]) \\<or>\n                          xs @ [x] = ys @ [y] \\<and> gt ya xa)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ya xa.\n       \\<lbrakk>length xs = length ys;\n        \\<And>y x.\n           lexext_rev gt (y # xs) (x # ys) =\n           (lexext_rev gt xs ys \\<or> xs = ys \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> lexext_rev gt (ya # xs @ [x]) (xa # ys @ [y]) =\n                         (lexext_rev gt (xs @ [x]) (ys @ [y]) \\<or>\n                          xs @ [x] = ys @ [y] \\<and> gt ya xa)", "case (snoc y' ys x' xs)"], ["proof (state)\nthis:\n  length ys = length xs\n  lexext_rev gt (?y # ys) (?x # xs) =\n  (lexext_rev gt ys xs \\<or> ys = xs \\<and> gt ?y ?x)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys ya xa.\n       \\<lbrakk>length xs = length ys;\n        \\<And>y x.\n           lexext_rev gt (y # xs) (x # ys) =\n           (lexext_rev gt xs ys \\<or> xs = ys \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> lexext_rev gt (ya # xs @ [x]) (xa # ys @ [y]) =\n                         (lexext_rev gt (xs @ [x]) (ys @ [y]) \\<or>\n                          xs @ [x] = ys @ [y] \\<and> gt ya xa)", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt (y # ys @ [y']) (x # xs @ [x']) =\n    (lexext_rev gt (ys @ [y']) (xs @ [x']) \\<or>\n     ys @ [y'] = xs @ [x'] \\<and> gt y x)", "using snoc(2)"], ["proof (prove)\nusing this:\n  lexext_rev gt (?y # ys) (?x # xs) =\n  (lexext_rev gt ys xs \\<or> ys = xs \\<and> gt ?y ?x)\n\ngoal (1 subgoal):\n 1. lexext_rev gt (y # ys @ [y']) (x # xs @ [x']) =\n    (lexext_rev gt (ys @ [y']) (xs @ [x']) \\<or>\n     ys @ [y'] = xs @ [x'] \\<and> gt y x)", "by auto"], ["proof (state)\nthis:\n  lexext_rev gt (y # ys @ [y']) (x # xs @ [x']) =\n  (lexext_rev gt (ys @ [y']) (xs @ [x']) \\<or>\n   ys @ [y'] = xs @ [x'] \\<and> gt y x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma lexext_rev_mono_strong:\n  assumes\n    \"\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x\" and\n    \"lexext_rev gt ys xs\"\n  shows \"lexext_rev gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt' ys xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set ys.\n     \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x\n  lexext_rev gt ys xs\n\ngoal (1 subgoal):\n 1. lexext_rev gt' ys xs", "by (simp add: lexext_mono_strong)"], ["", "lemma lexext_rev_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> lexext_rev gt ys xs \\<Longrightarrow>\n   lexext_rev gt (map f ys) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs.\n                   gt y x \\<longrightarrow> gt (f y) (f x);\n     lexext_rev gt ys xs\\<rbrakk>\n    \\<Longrightarrow> lexext_rev gt (map f ys) (map f xs)", "by (simp add: lexext_map_strong rev_map)"], ["", "lemma lexext_rev_irrefl:\n  assumes \"\\<forall>x \\<in> set xs. \\<not> gt x x\"\n  shows \"\\<not> lexext_rev gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> lexext_rev gt xs xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. \\<not> gt x x\n\ngoal (1 subgoal):\n 1. \\<not> lexext_rev gt xs xs", "by (simp add: lexext_irrefl)"], ["", "lemma lexext_rev_trans_strong:\n  assumes\n    \"\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    \"lexext_rev gt zs ys\" and \"lexext_rev gt ys xs\"\n  shows \"lexext_rev gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt zs xs", "using assms(1) lexext_trans_strong[OF _ assms(2,3), unfolded set_rev]"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set zs.\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  \\<forall>z\\<in>set zs.\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow>\n           gt y x \\<longrightarrow> gt z x \\<Longrightarrow>\n  lexext_rev gt zs xs\n\ngoal (1 subgoal):\n 1. lexext_rev gt zs xs", "by sat"], ["", "lemma lexext_rev_compat_cons_if_same_length:\n  assumes \"length ys = length xs\" and \"lexext_rev gt ys xs\"\n  shows \"lexext_rev gt (x # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt (x # ys) (x # xs)", "using assms"], ["proof (prove)\nusing this:\n  length ys = length xs\n  lexext_rev gt ys xs\n\ngoal (1 subgoal):\n 1. lexext_rev gt (x # ys) (x # xs)", "by (simp add: lexext_compat_snoc_if_same_length)"], ["", "lemma lexext_rev_compat_snoc: \"lexext_rev gt ys xs \\<Longrightarrow> lexext_rev gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt ys xs \\<Longrightarrow>\n    lexext_rev gt (ys @ [x]) (xs @ [x])", "by (simp add: lexext_compat_cons)"], ["", "lemma lexext_rev_compat_list: \"gt y x \\<Longrightarrow> lexext_rev gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<Longrightarrow> lexext_rev gt (xs @ y # xs') (xs @ x # xs')", "by (induct xs' rule: rev_induct) auto"], ["", "lemma lexext_rev_singleton: \"lexext_rev gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext_rev gt [y] [x] = gt y x", "by simp"], ["", "lemma lexext_rev_total:\n  \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n   lexext_rev gt ys xs \\<or> lexext_rev gt xs ys \\<or> ys = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>B.\n                \\<forall>x\\<in>A. gt y x \\<or> gt x y \\<or> y = x;\n     ys \\<in> lists B; xs \\<in> lists A\\<rbrakk>\n    \\<Longrightarrow> lexext_rev gt ys xs \\<or>\n                      lexext_rev gt xs ys \\<or> ys = xs", "by (rule lexext_total[of _ _ _ \"rev ys\" \"rev xs\", simplified])"], ["", "lemma lexext_rev_hd_or_tl:\n  assumes\n    \"length ys = length xs\" and\n    \"lexext_rev gt (y # ys) (x # xs)\"\n  shows \"gt y x \\<or> lexext_rev gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<or> lexext_rev gt ys xs", "using assms lexext_rev_cons_cons"], ["proof (prove)\nusing this:\n  length ys = length xs\n  lexext_rev gt (y # ys) (x # xs)\n  length ?ys = length ?xs \\<Longrightarrow>\n  lexext_rev ?gt (?y # ?ys) (?x # ?xs) =\n  (lexext_rev ?gt ?ys ?xs \\<or> ?ys = ?xs \\<and> ?gt ?y ?x)\n\ngoal (1 subgoal):\n 1. gt y x \\<or> lexext_rev gt ys xs", "by fastforce"], ["", "interpretation lexext_rev: ext lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext lexext_rev", "by standard (fact lexext_rev_mono_strong, rule lexext_rev_map_strong, metis in_listsD)"], ["", "interpretation lexext_rev: ext_irrefl_trans_strong lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_trans_strong lexext_rev", "by standard (fact lexext_rev_irrefl, fact lexext_rev_trans_strong)"], ["", "interpretation lexext_rev: ext_compat_snoc lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_snoc lexext_rev", "by standard (fact lexext_rev_compat_snoc)"], ["", "interpretation lexext_rev: ext_compat_list lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list lexext_rev", "by standard (rule lexext_rev_compat_list)"], ["", "interpretation lexext_rev: ext_singleton lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton lexext_rev", "by standard (rule lexext_rev_singleton)"], ["", "interpretation lexext_rev: ext_total lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_total lexext_rev", "by standard (fact lexext_rev_total)"], ["", "interpretation lexext_rev: ext_hd_or_tl lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_hd_or_tl lexext_rev", "by standard (rule lexext_rev_hd_or_tl)"], ["", "interpretation lexext_rev: ext_wf_bounded lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf_bounded lexext_rev", "by standard"], ["", "subsection \\<open>Generic Length Extension\\<close>"], ["", "definition lenext :: \"('a list \\<Rightarrow> 'a list \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"lenext gts ys xs \\<longleftrightarrow> length ys > length xs \\<or> length ys = length xs \\<and> gts ys xs\""], ["", "lemma\n  lenext_mono_strong: \"(gts ys xs \\<Longrightarrow> gts' ys xs) \\<Longrightarrow> lenext gts ys xs \\<Longrightarrow> lenext gts' ys xs\" and\n  lenext_map_strong: \"(length ys = length xs \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts (map f ys) (map f xs)) \\<Longrightarrow>\n    lenext gts ys xs \\<Longrightarrow> lenext gts (map f ys) (map f xs)\" and\n  lenext_irrefl: \"\\<not> gts xs xs \\<Longrightarrow> \\<not> lenext gts xs xs\" and\n  lenext_trans: \"(gts zs ys \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts zs xs) \\<Longrightarrow> lenext gts zs ys \\<Longrightarrow> lenext gts ys xs \\<Longrightarrow>\n    lenext gts zs xs\" and\n  lenext_snoc: \"lenext gts (xs @ [x]) xs\" and\n  lenext_compat_cons: \"(length ys = length xs \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts (x # ys) (x # xs)) \\<Longrightarrow>\n    lenext gts ys xs \\<Longrightarrow> lenext gts (x # ys) (x # xs)\" and\n  lenext_compat_snoc: \"(length ys = length xs \\<Longrightarrow> gts ys xs \\<Longrightarrow> gts (ys @ [x]) (xs @ [x])) \\<Longrightarrow>\n    lenext gts ys xs \\<Longrightarrow> lenext gts (ys @ [x]) (xs @ [x])\" and\n  lenext_compat_list: \"gts (xs @ y # xs') (xs @ x # xs') \\<Longrightarrow>\n    lenext gts (xs @ y # xs') (xs @ x # xs')\" and\n  lenext_singleton: \"lenext gts [y] [x] \\<longleftrightarrow> gts [y] [x]\" and\n  lenext_total: \"(gts ys xs \\<or> gts xs ys \\<or> ys = xs) \\<Longrightarrow>\n    lenext gts ys xs \\<or> lenext gts xs ys \\<or> ys = xs\" and\n  lenext_hd_or_tl: \"(length ys = length xs \\<Longrightarrow> gts (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> gts ys xs) \\<Longrightarrow>\n    lenext gts (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> lenext gts ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<lbrakk>gts ys xs \\<Longrightarrow> gts' ys xs;\n        lenext gts ys xs\\<rbrakk>\n       \\<Longrightarrow> lenext gts' ys xs) &&&\n      (\\<lbrakk>\\<lbrakk>length ys = length xs; gts ys xs\\<rbrakk>\n                \\<Longrightarrow> gts (map f ys) (map f xs);\n        lenext gts ys xs\\<rbrakk>\n       \\<Longrightarrow> lenext gts (map f ys) (map f xs))) &&&\n     (\\<not> gts xs xs \\<Longrightarrow> \\<not> lenext gts xs xs) &&&\n     (\\<lbrakk>\\<lbrakk>gts zs ys; gts ys xs\\<rbrakk>\n               \\<Longrightarrow> gts zs xs;\n       lenext gts zs ys; lenext gts ys xs\\<rbrakk>\n      \\<Longrightarrow> lenext gts zs xs) &&&\n     lenext gts (xs @ [x]) xs) &&&\n    ((\\<lbrakk>\\<lbrakk>length ys = length xs; gts ys xs\\<rbrakk>\n               \\<Longrightarrow> gts (x # ys) (x # xs);\n       lenext gts ys xs\\<rbrakk>\n      \\<Longrightarrow> lenext gts (x # ys) (x # xs)) &&&\n     (\\<lbrakk>\\<lbrakk>length ys = length xs; gts ys xs\\<rbrakk>\n               \\<Longrightarrow> gts (ys @ [x]) (xs @ [x]);\n       lenext gts ys xs\\<rbrakk>\n      \\<Longrightarrow> lenext gts (ys @ [x]) (xs @ [x])) &&&\n     (gts (xs @ y # xs') (xs @ x # xs') \\<Longrightarrow>\n      lenext gts (xs @ y # xs') (xs @ x # xs'))) &&&\n    lenext gts [y] [x] = gts [y] [x] &&&\n    (gts ys xs \\<or> gts xs ys \\<or> ys = xs \\<Longrightarrow>\n     lenext gts ys xs \\<or> lenext gts xs ys \\<or> ys = xs) &&&\n    (\\<lbrakk>\\<lbrakk>length ys = length xs; gts (y # ys) (x # xs)\\<rbrakk>\n              \\<Longrightarrow> gt y x \\<or> gts ys xs;\n      lenext gts (y # ys) (x # xs)\\<rbrakk>\n     \\<Longrightarrow> gt y x \\<or> lenext gts ys xs)", "unfolding lenext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (((\\<lbrakk>gts ys xs \\<Longrightarrow> gts' ys xs;\n        length xs < length ys \\<or>\n        length ys = length xs \\<and> gts ys xs\\<rbrakk>\n       \\<Longrightarrow> length xs < length ys \\<or>\n                         length ys = length xs \\<and> gts' ys xs) &&&\n      (\\<lbrakk>\\<lbrakk>length ys = length xs; gts ys xs\\<rbrakk>\n                \\<Longrightarrow> gts (map f ys) (map f xs);\n        length xs < length ys \\<or>\n        length ys = length xs \\<and> gts ys xs\\<rbrakk>\n       \\<Longrightarrow> length (map f xs) < length (map f ys) \\<or>\n                         length (map f ys) = length (map f xs) \\<and>\n                         gts (map f ys) (map f xs))) &&&\n     (\\<not> gts xs xs \\<Longrightarrow>\n      \\<not> (length xs < length xs \\<or>\n              length xs = length xs \\<and> gts xs xs)) &&&\n     (\\<lbrakk>\\<lbrakk>gts zs ys; gts ys xs\\<rbrakk>\n               \\<Longrightarrow> gts zs xs;\n       length ys < length zs \\<or> length zs = length ys \\<and> gts zs ys;\n       length xs < length ys \\<or>\n       length ys = length xs \\<and> gts ys xs\\<rbrakk>\n      \\<Longrightarrow> length xs < length zs \\<or>\n                        length zs = length xs \\<and> gts zs xs) &&&\n     length xs < length (xs @ [x]) \\<or>\n     length (xs @ [x]) = length xs \\<and> gts (xs @ [x]) xs) &&&\n    ((\\<lbrakk>\\<lbrakk>length ys = length xs; gts ys xs\\<rbrakk>\n               \\<Longrightarrow> gts (x # ys) (x # xs);\n       length xs < length ys \\<or>\n       length ys = length xs \\<and> gts ys xs\\<rbrakk>\n      \\<Longrightarrow> length (x # xs) < length (x # ys) \\<or>\n                        length (x # ys) = length (x # xs) \\<and>\n                        gts (x # ys) (x # xs)) &&&\n     (\\<lbrakk>\\<lbrakk>length ys = length xs; gts ys xs\\<rbrakk>\n               \\<Longrightarrow> gts (ys @ [x]) (xs @ [x]);\n       length xs < length ys \\<or>\n       length ys = length xs \\<and> gts ys xs\\<rbrakk>\n      \\<Longrightarrow> length (xs @ [x]) < length (ys @ [x]) \\<or>\n                        length (ys @ [x]) = length (xs @ [x]) \\<and>\n                        gts (ys @ [x]) (xs @ [x])) &&&\n     (gts (xs @ y # xs') (xs @ x # xs') \\<Longrightarrow>\n      length (xs @ x # xs') < length (xs @ y # xs') \\<or>\n      length (xs @ y # xs') = length (xs @ x # xs') \\<and>\n      gts (xs @ y # xs') (xs @ x # xs'))) &&&\n    (length [x] < length [y] \\<or>\n     length [y] = length [x] \\<and> gts [y] [x]) =\n    gts [y] [x] &&&\n    (gts ys xs \\<or> gts xs ys \\<or> ys = xs \\<Longrightarrow>\n     (length xs < length ys \\<or>\n      length ys = length xs \\<and> gts ys xs) \\<or>\n     (length ys < length xs \\<or>\n      length xs = length ys \\<and> gts xs ys) \\<or>\n     ys = xs) &&&\n    (\\<lbrakk>\\<lbrakk>length ys = length xs; gts (y # ys) (x # xs)\\<rbrakk>\n              \\<Longrightarrow> gt y x \\<or> gts ys xs;\n      length (x # xs) < length (y # ys) \\<or>\n      length (y # ys) = length (x # xs) \\<and>\n      gts (y # ys) (x # xs)\\<rbrakk>\n     \\<Longrightarrow> gt y x \\<or>\n                       length xs < length ys \\<or>\n                       length ys = length xs \\<and> gts ys xs)", "by auto"], ["", "subsection \\<open>Length-Lexicographic Extension\\<close>"], ["", "abbreviation len_lexext :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"len_lexext gt \\<equiv> lenext (lexext gt)\""], ["", "lemma len_lexext_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> len_lexext gt ys xs \\<Longrightarrow> len_lexext gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     len_lexext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> len_lexext gt' ys xs", "by (rule lenext_mono_strong[OF lexext_mono_strong])"], ["", "lemma len_lexext_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> len_lexext gt ys xs \\<Longrightarrow>\n   len_lexext gt (map f ys) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs.\n                   gt y x \\<longrightarrow> gt (f y) (f x);\n     len_lexext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> len_lexext gt (map f ys) (map f xs)", "by (rule lenext_map_strong) (metis lexext_map_strong)"], ["", "lemma len_lexext_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> len_lexext gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> gt x x \\<Longrightarrow>\n    \\<not> len_lexext gt xs xs", "by (rule lenext_irrefl[OF lexext_irrefl])"], ["", "lemma len_lexext_trans_strong:\n  \"(\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> len_lexext gt zs ys \\<Longrightarrow>\n   len_lexext gt ys xs \\<Longrightarrow> len_lexext gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>z\\<in>set zs.\n                \\<forall>y\\<in>set ys.\n                   \\<forall>x\\<in>set xs.\n                      gt z y \\<longrightarrow>\n                      gt y x \\<longrightarrow> gt z x;\n     len_lexext gt zs ys; len_lexext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> len_lexext gt zs xs", "by (rule lenext_trans[OF lexext_trans_strong])"], ["", "lemma len_lexext_snoc: \"len_lexext gt (xs @ [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt (xs @ [x]) xs", "by (rule lenext_snoc)"], ["", "lemma len_lexext_compat_cons: \"len_lexext gt ys xs \\<Longrightarrow> len_lexext gt (x # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs \\<Longrightarrow> len_lexext gt (x # ys) (x # xs)", "by (intro lenext_compat_cons lexext_compat_cons)"], ["", "lemma len_lexext_compat_snoc: \"len_lexext gt ys xs \\<Longrightarrow> len_lexext gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs \\<Longrightarrow>\n    len_lexext gt (ys @ [x]) (xs @ [x])", "by (intro lenext_compat_snoc lexext_compat_snoc_if_same_length)"], ["", "lemma len_lexext_compat_list: \"gt y x \\<Longrightarrow> len_lexext gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<Longrightarrow> len_lexext gt (xs @ y # xs') (xs @ x # xs')", "by (intro lenext_compat_list lexext_compat_list)"], ["", "lemma len_lexext_singleton[simp]: \"len_lexext gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt [y] [x] = gt y x", "by (simp only: lenext_singleton lexext_singleton)"], ["", "lemma len_lexext_total: \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow> xs \\<in> lists A \\<Longrightarrow>\n  len_lexext gt ys xs \\<or> len_lexext gt xs ys \\<or> ys = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>B.\n                \\<forall>x\\<in>A. gt y x \\<or> gt x y \\<or> y = x;\n     ys \\<in> lists B; xs \\<in> lists A\\<rbrakk>\n    \\<Longrightarrow> len_lexext gt ys xs \\<or>\n                      len_lexext gt xs ys \\<or> ys = xs", "by (rule lenext_total[OF lexext_total])"], ["", "lemma len_lexext_iff_lenlex: \"len_lexext gt ys xs \\<longleftrightarrow> (xs, ys) \\<in> lenlex {(x, y). gt y x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "assume \"length xs = length ys\""], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "hence \"lexext gt ys xs \\<longleftrightarrow> (xs, ys) \\<in> lex {(x, y). gt y x}\""], ["proof (prove)\nusing this:\n  length xs = length ys\n\ngoal (1 subgoal):\n 1. lexext gt ys xs = ((xs, ys) \\<in> lex {(x, y). gt y x})", "by (induct xs ys rule: list_induct2) auto"], ["proof (state)\nthis:\n  lexext gt ys xs = ((xs, ys) \\<in> lex {(x, y). gt y x})\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "}"], ["proof (state)\nthis:\n  length xs = length ys \\<Longrightarrow>\n  lexext gt ys xs = ((xs, ys) \\<in> lex {(x, y). gt y x})\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "thus ?thesis"], ["proof (prove)\nusing this:\n  length xs = length ys \\<Longrightarrow>\n  lexext gt ys xs = ((xs, ys) \\<in> lex {(x, y). gt y x})\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})", "unfolding lenext_def lenlex_conv"], ["proof (prove)\nusing this:\n  length xs = length ys \\<Longrightarrow>\n  lexext gt ys xs = ((xs, ys) \\<in> lex {(x, y). gt y x})\n\ngoal (1 subgoal):\n 1. (length xs < length ys \\<or>\n     length ys = length xs \\<and> lexext gt ys xs) =\n    ((xs, ys)\n     \\<in> {(xs, ys).\n            length xs < length ys \\<or>\n            length xs = length ys \\<and>\n            (xs, ys) \\<in> lex {(x, y). gt y x}})", "by auto"], ["proof (state)\nthis:\n  len_lexext gt ys xs = ((xs, ys) \\<in> lenlex {(x, y). gt y x})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma len_lexext_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. len_lexext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. gt y x) \\<Longrightarrow>\n    wfP (\\<lambda>xs ys. len_lexext gt ys xs)", "unfolding wfP_def len_lexext_iff_lenlex"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf {(x, y). gt y x} \\<Longrightarrow>\n    wf {(xs, ys). (xs, ys) \\<in> lenlex {(x, y). gt y x}}", "by (simp add: wf_lenlex)"], ["", "lemma len_lexext_hd_or_tl: \"len_lexext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> len_lexext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> len_lexext gt ys xs", "using lenext_hd_or_tl lexext_hd_or_tl"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>length ?ys = length ?xs;\n            ?gts (?y # ?ys) (?x # ?xs)\\<rbrakk>\n           \\<Longrightarrow> ?gt ?y ?x \\<or> ?gts ?ys ?xs;\n   lenext ?gts (?y # ?ys) (?x # ?xs)\\<rbrakk>\n  \\<Longrightarrow> ?gt ?y ?x \\<or> lenext ?gts ?ys ?xs\n  lexext ?gt (?y # ?ys) (?x # ?xs) \\<Longrightarrow>\n  ?gt ?y ?x \\<or> lexext ?gt ?ys ?xs\n\ngoal (1 subgoal):\n 1. len_lexext gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> len_lexext gt ys xs", "by metis"], ["", "interpretation len_lexext: ext len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext len_lexext", "by standard (fact len_lexext_mono_strong, rule len_lexext_map_strong, metis in_listsD)"], ["", "interpretation len_lexext: ext_irrefl_trans_strong len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_trans_strong len_lexext", "by standard (fact len_lexext_irrefl, fact len_lexext_trans_strong)"], ["", "interpretation len_lexext: ext_snoc len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_snoc len_lexext", "by standard (fact len_lexext_snoc)"], ["", "interpretation len_lexext: ext_compat_cons len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_cons len_lexext", "by standard (fact len_lexext_compat_cons)"], ["", "interpretation len_lexext: ext_compat_snoc len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_snoc len_lexext", "by standard (fact len_lexext_compat_snoc)"], ["", "interpretation len_lexext: ext_compat_list len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list len_lexext", "by standard (rule len_lexext_compat_list)"], ["", "interpretation len_lexext: ext_singleton len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton len_lexext", "by standard (rule len_lexext_singleton)"], ["", "interpretation len_lexext: ext_total len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_total len_lexext", "by standard (fact len_lexext_total)"], ["", "interpretation len_lexext: ext_wf len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf len_lexext", "by standard (fact len_lexext_wf)"], ["", "interpretation len_lexext: ext_hd_or_tl len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_hd_or_tl len_lexext", "by standard (rule len_lexext_hd_or_tl)"], ["", "interpretation len_lexext: ext_wf_bounded len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf_bounded len_lexext", "by standard"], ["", "subsection \\<open>Reverse (Right-to-Left) Length-Lexicographic Extension\\<close>"], ["", "abbreviation len_lexext_rev :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"len_lexext_rev gt \\<equiv> lenext (lexext_rev gt)\""], ["", "lemma len_lexext_rev_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     len_lexext_rev gt ys xs\\<rbrakk>\n    \\<Longrightarrow> len_lexext_rev gt' ys xs", "by (rule lenext_mono_strong) (rule lexext_rev_mono_strong)"], ["", "lemma len_lexext_rev_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> len_lexext_rev gt ys xs \\<Longrightarrow>\n   len_lexext_rev gt (map f ys) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs.\n                   gt y x \\<longrightarrow> gt (f y) (f x);\n     len_lexext_rev gt ys xs\\<rbrakk>\n    \\<Longrightarrow> len_lexext_rev gt (map f ys) (map f xs)", "by (rule lenext_map_strong) (rule lexext_rev_map_strong)"], ["", "lemma len_lexext_rev_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> len_lexext_rev gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> gt x x \\<Longrightarrow>\n    \\<not> len_lexext_rev gt xs xs", "by (rule lenext_irrefl) (rule lexext_rev_irrefl)"], ["", "lemma len_lexext_rev_trans_strong:\n  \"(\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x) \\<Longrightarrow> len_lexext_rev gt zs ys \\<Longrightarrow>\n   len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>z\\<in>set zs.\n                \\<forall>y\\<in>set ys.\n                   \\<forall>x\\<in>set xs.\n                      gt z y \\<longrightarrow>\n                      gt y x \\<longrightarrow> gt z x;\n     len_lexext_rev gt zs ys; len_lexext_rev gt ys xs\\<rbrakk>\n    \\<Longrightarrow> len_lexext_rev gt zs xs", "by (rule lenext_trans) (rule lexext_rev_trans_strong)"], ["", "lemma len_lexext_rev_snoc: \"len_lexext_rev gt (xs @ [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext_rev gt (xs @ [x]) xs", "by (rule lenext_snoc)"], ["", "lemma len_lexext_rev_compat_cons: \"len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt (x # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext_rev gt ys xs \\<Longrightarrow>\n    len_lexext_rev gt (x # ys) (x # xs)", "by (intro lenext_compat_cons lexext_rev_compat_cons_if_same_length)"], ["", "lemma len_lexext_rev_compat_snoc: \"len_lexext_rev gt ys xs \\<Longrightarrow> len_lexext_rev gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext_rev gt ys xs \\<Longrightarrow>\n    len_lexext_rev gt (ys @ [x]) (xs @ [x])", "by (intro lenext_compat_snoc lexext_rev_compat_snoc)"], ["", "lemma len_lexext_rev_compat_list: \"gt y x \\<Longrightarrow> len_lexext_rev gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<Longrightarrow> len_lexext_rev gt (xs @ y # xs') (xs @ x # xs')", "by (intro lenext_compat_list lexext_rev_compat_list)"], ["", "lemma len_lexext_rev_singleton[simp]: \"len_lexext_rev gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext_rev gt [y] [x] = gt y x", "by (simp only: lenext_singleton lexext_rev_singleton)"], ["", "lemma len_lexext_rev_total: \"(\\<forall>y \\<in> B. \\<forall>x \\<in> A. gt y x \\<or> gt x y \\<or> y = x) \\<Longrightarrow> ys \\<in> lists B \\<Longrightarrow>\n  xs \\<in> lists A \\<Longrightarrow> len_lexext_rev gt ys xs \\<or> len_lexext_rev gt xs ys \\<or> ys = xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>B.\n                \\<forall>x\\<in>A. gt y x \\<or> gt x y \\<or> y = x;\n     ys \\<in> lists B; xs \\<in> lists A\\<rbrakk>\n    \\<Longrightarrow> len_lexext_rev gt ys xs \\<or>\n                      len_lexext_rev gt xs ys \\<or> ys = xs", "by (rule lenext_total[OF lexext_rev_total])"], ["", "lemma len_lexext_rev_iff_len_lexext: \"len_lexext_rev gt ys xs \\<longleftrightarrow> len_lexext gt (rev ys) (rev xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext_rev gt ys xs = len_lexext gt (rev ys) (rev xs)", "unfolding lenext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length xs < length ys \\<or>\n     length ys = length xs \\<and> lexext_rev gt ys xs) =\n    (length (rev xs) < length (rev ys) \\<or>\n     length (rev ys) = length (rev xs) \\<and> lexext_rev gt ys xs)", "by simp"], ["", "lemma len_lexext_rev_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. len_lexext_rev gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. gt y x) \\<Longrightarrow>\n    wfP (\\<lambda>xs ys. len_lexext_rev gt ys xs)", "unfolding len_lexext_rev_iff_len_lexext"], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. gt y x) \\<Longrightarrow>\n    wfP (\\<lambda>xs ys. len_lexext gt (rev ys) (rev xs))", "by (rule wfP_app[of \"\\<lambda>xs ys. len_lexext gt ys xs\" rev, simplified]) (rule len_lexext_wf)"], ["", "lemma len_lexext_rev_hd_or_tl:\n  \"len_lexext_rev gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> len_lexext_rev gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext_rev gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> len_lexext_rev gt ys xs", "using lenext_hd_or_tl lexext_rev_hd_or_tl"], ["proof (prove)\nusing this:\n  \\<lbrakk>\\<lbrakk>length ?ys = length ?xs;\n            ?gts (?y # ?ys) (?x # ?xs)\\<rbrakk>\n           \\<Longrightarrow> ?gt ?y ?x \\<or> ?gts ?ys ?xs;\n   lenext ?gts (?y # ?ys) (?x # ?xs)\\<rbrakk>\n  \\<Longrightarrow> ?gt ?y ?x \\<or> lenext ?gts ?ys ?xs\n  \\<lbrakk>length ?ys = length ?xs;\n   lexext_rev ?gt (?y # ?ys) (?x # ?xs)\\<rbrakk>\n  \\<Longrightarrow> ?gt ?y ?x \\<or> lexext_rev ?gt ?ys ?xs\n\ngoal (1 subgoal):\n 1. len_lexext_rev gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> len_lexext_rev gt ys xs", "by metis"], ["", "interpretation len_lexext_rev: ext len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext len_lexext_rev", "by standard (fact len_lexext_rev_mono_strong, rule len_lexext_rev_map_strong, metis in_listsD)"], ["", "interpretation len_lexext_rev: ext_irrefl_trans_strong len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_trans_strong len_lexext_rev", "by standard (fact len_lexext_rev_irrefl, fact len_lexext_rev_trans_strong)"], ["", "interpretation len_lexext_rev: ext_snoc len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_snoc len_lexext_rev", "by standard (fact len_lexext_rev_snoc)"], ["", "interpretation len_lexext_rev: ext_compat_cons len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_cons len_lexext_rev", "by standard (fact len_lexext_rev_compat_cons)"], ["", "interpretation len_lexext_rev: ext_compat_snoc len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_snoc len_lexext_rev", "by standard (fact len_lexext_rev_compat_snoc)"], ["", "interpretation len_lexext_rev: ext_compat_list len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list len_lexext_rev", "by standard (rule len_lexext_rev_compat_list)"], ["", "interpretation len_lexext_rev: ext_singleton len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton len_lexext_rev", "by standard (rule len_lexext_rev_singleton)"], ["", "interpretation len_lexext_rev: ext_total len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_total len_lexext_rev", "by standard (fact len_lexext_rev_total)"], ["", "interpretation len_lexext_rev: ext_wf len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf len_lexext_rev", "by standard (fact len_lexext_rev_wf)"], ["", "interpretation len_lexext_rev: ext_hd_or_tl len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_hd_or_tl len_lexext_rev", "by standard (rule len_lexext_rev_hd_or_tl)"], ["", "interpretation len_lexext_rev: ext_wf_bounded len_lexext_rev"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf_bounded len_lexext_rev", "by standard"], ["", "subsection \\<open>Dershowitz--Manna Multiset Extension\\<close>"], ["", "definition msetext_dersh where\n  \"msetext_dersh gt ys xs = (let N = mset ys; M = mset xs in\n     (\\<exists>Y X. Y \\<noteq> {#} \\<and> Y \\<subseteq># N \\<and> M = (N - Y) + X \\<and> (\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x))))\""], ["", "text \\<open>\nThe following proof is based on that of @{thm[source] less_multiset\\<^sub>D\\<^sub>M_imp_mult}.\n\\<close>"], ["", "lemma msetext_dersh_imp_mult_rel:\n  assumes\n    ys_a: \"ys \\<in> lists A\" and xs_a: \"xs \\<in> lists A\" and\n    ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"(mset xs, mset ys) \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "obtain Y X where y_nemp: \"Y \\<noteq> {#}\" and y_sub_ys: \"Y \\<subseteq># mset ys\" and\n    xs_eq: \"mset xs = mset ys - Y + X\" and ex_y: \"\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset ys;\n         mset xs = mset ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_dersh_def Let_def]"], ["proof (prove)\nusing this:\n  \\<exists>Y X.\n     Y \\<noteq> {#} \\<and>\n     Y \\<subseteq># mset ys \\<and>\n     mset xs = mset ys - Y + X \\<and>\n     (\\<forall>x.\n         x \\<in># X \\<longrightarrow>\n         (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset ys;\n         mset xs = mset ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y \\<noteq> {#}\n  Y \\<subseteq># mset ys\n  mset xs = mset ys - Y + X\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "have ex_y': \"\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> x \\<in> A \\<and> y \\<in> A \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># X \\<longrightarrow>\n       (\\<exists>y.\n           y \\<in># Y \\<and> x \\<in> A \\<and> y \\<in> A \\<and> gt y x)", "using ex_y y_sub_ys xs_eq ys_a xs_a"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n  Y \\<subseteq># mset ys\n  mset xs = mset ys - Y + X\n  ys \\<in> lists A\n  xs \\<in> lists A\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># X \\<longrightarrow>\n       (\\<exists>y.\n           y \\<in># Y \\<and> x \\<in> A \\<and> y \\<in> A \\<and> gt y x)", "by (metis in_listsD mset_subset_eqD set_mset_mset union_iff)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow>\n     (\\<exists>y.\n         y \\<in># Y \\<and> x \\<in> A \\<and> y \\<in> A \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "hence \"(mset ys - Y + X, mset ys - Y + Y) \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\""], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow>\n     (\\<exists>y.\n         y \\<in># Y \\<and> x \\<in> A \\<and> y \\<in> A \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. (mset ys - Y + X, mset ys - Y + Y)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "using y_nemp y_sub_ys"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow>\n     (\\<exists>y.\n         y \\<in># Y \\<and> x \\<in> A \\<and> y \\<in> A \\<and> gt y x)\n  Y \\<noteq> {#}\n  Y \\<subseteq># mset ys\n\ngoal (1 subgoal):\n 1. (mset ys - Y + X, mset ys - Y + Y)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "by (intro one_step_implies_mult) (auto simp: Bex_def trans_def)"], ["proof (state)\nthis:\n  (mset ys - Y + X, mset ys - Y + Y)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "thus ?thesis"], ["proof (prove)\nusing this:\n  (mset ys - Y + X, mset ys - Y + Y)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "using xs_eq y_sub_ys"], ["proof (prove)\nusing this:\n  (mset ys - Y + X, mset ys - Y + Y)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  mset xs = mset ys - Y + X\n  Y \\<subseteq># mset ys\n\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "by (simp add: subset_mset.diff_add)"], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_dersh_imp_mult: \"msetext_dersh gt ys xs \\<Longrightarrow> (mset xs, mset ys) \\<in> mult {(x, y). gt y x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs \\<Longrightarrow>\n    (mset xs, mset ys) \\<in> mult {(x, y). gt y x}", "using msetext_dersh_imp_mult_rel[of _ UNIV]"], ["proof (prove)\nusing this:\n  \\<lbrakk>?ys \\<in> lists UNIV; ?xs \\<in> lists UNIV;\n   msetext_dersh ?gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> (mset ?xs, mset ?ys)\n                    \\<in> mult\n                           {(x, y).\n                            x \\<in> UNIV \\<and> y \\<in> UNIV \\<and> ?gt y x}\n\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs \\<Longrightarrow>\n    (mset xs, mset ys) \\<in> mult {(x, y). gt y x}", "by auto"], ["", "lemma mult_imp_msetext_dersh_rel:\n  assumes\n    ys_a: \"set_mset (mset ys) \\<subseteq> A\" and xs_a: \"set_mset (mset xs) \\<subseteq> A\" and\n    in_mult: \"(mset xs, mset ys) \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\" and\n    trans: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\"\n  shows \"msetext_dersh gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs", "using in_mult ys_a xs_a"], ["proof (prove)\nusing this:\n  (mset xs, mset ys)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  set_mset (mset ys) \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs", "unfolding mult_def msetext_dersh_def Let_def"], ["proof (prove)\nusing this:\n  (mset xs, mset ys)\n  \\<in> (mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+\n  set_mset (mset ys) \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># mset ys \\<and>\n       mset xs = mset ys - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>(mset xs, y)\n                \\<in> mult1\n                       {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        set_mset y \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># y \\<and>\n                            mset xs = y - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))\n 2. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "case (base Ys)"], ["proof (state)\nthis:\n  (mset xs, Ys)\n  \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  set_mset Ys \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>(mset xs, y)\n                \\<in> mult1\n                       {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        set_mset y \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># y \\<and>\n                            mset xs = y - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))\n 2. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "then"], ["proof (chain)\npicking this:\n  (mset xs, Ys)\n  \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  set_mset Ys \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A", "obtain y M0 X where \"Ys = M0 + {#y#}\" and \"mset xs = M0 + X\" and \"\\<forall>a. a \\<in># X \\<longrightarrow> gt y a\""], ["proof (prove)\nusing this:\n  (mset xs, Ys)\n  \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  set_mset Ys \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>M0 y X.\n        \\<lbrakk>Ys = M0 + {#y#}; mset xs = M0 + X;\n         \\<forall>a. a \\<in># X \\<longrightarrow> gt y a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mult1_def"], ["proof (prove)\nusing this:\n  (mset xs, Ys)\n  \\<in> {(N, M).\n         \\<exists>a M0 K.\n            M = add_mset a M0 \\<and>\n            N = M0 + K \\<and>\n            (\\<forall>b.\n                b \\<in># K \\<longrightarrow>\n                (b, a)\n                \\<in> {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})}\n  set_mset Ys \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (\\<And>M0 y X.\n        \\<lbrakk>Ys = M0 + {#y#}; mset xs = M0 + X;\n         \\<forall>a. a \\<in># X \\<longrightarrow> gt y a\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Ys = M0 + {#y#}\n  mset xs = M0 + X\n  \\<forall>a. a \\<in># X \\<longrightarrow> gt y a\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>(mset xs, y)\n                \\<in> mult1\n                       {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        set_mset y \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># y \\<and>\n                            mset xs = y - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))\n 2. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "thus ?case"], ["proof (prove)\nusing this:\n  Ys = M0 + {#y#}\n  mset xs = M0 + X\n  \\<forall>a. a \\<in># X \\<longrightarrow> gt y a\n\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># Ys \\<and>\n       mset xs = Ys - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "by (auto intro: exI[of _ \"{#y#}\"] exI[of _ X])"], ["proof (state)\nthis:\n  \\<exists>Y X.\n     Y \\<noteq> {#} \\<and>\n     Y \\<subseteq># Ys \\<and>\n     mset xs = Ys - Y + X \\<and>\n     (\\<forall>x.\n         x \\<in># X \\<longrightarrow>\n         (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "case (step Ys Zs)"], ["proof (state)\nthis:\n  (mset xs, Ys)\n  \\<in> (mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+\n  (Ys, Zs) \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  \\<lbrakk>set_mset Ys \\<subseteq> A;\n   set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Y X.\n                       Y \\<noteq> {#} \\<and>\n                       Y \\<subseteq># Ys \\<and>\n                       mset xs = Ys - Y + X \\<and>\n                       (\\<forall>x.\n                           x \\<in># X \\<longrightarrow>\n                           (\\<exists>y. y \\<in># Y \\<and> gt y x))\n  set_mset Zs \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "note ys_zs_in_mult1 = this(2) and ih = this(3) and zs_a = this(4) and xs_a = this(5)"], ["proof (state)\nthis:\n  (Ys, Zs) \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  \\<lbrakk>set_mset Ys \\<subseteq> A;\n   set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>Y X.\n                       Y \\<noteq> {#} \\<and>\n                       Y \\<subseteq># Ys \\<and>\n                       mset xs = Ys - Y + X \\<and>\n                       (\\<forall>x.\n                           x \\<in># X \\<longrightarrow>\n                           (\\<exists>y. y \\<in># Y \\<and> gt y x))\n  set_mset Zs \\<subseteq> A\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "have Ys_a: \"set_mset Ys \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset Ys \\<subseteq> A", "using ys_zs_in_mult1 zs_a"], ["proof (prove)\nusing this:\n  (Ys, Zs) \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  set_mset Zs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set_mset Ys \\<subseteq> A", "unfolding mult1_def"], ["proof (prove)\nusing this:\n  (Ys, Zs)\n  \\<in> {(N, M).\n         \\<exists>a M0 K.\n            M = add_mset a M0 \\<and>\n            N = M0 + K \\<and>\n            (\\<forall>b.\n                b \\<in># K \\<longrightarrow>\n                (b, a)\n                \\<in> {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})}\n  set_mset Zs \\<subseteq> A\n\ngoal (1 subgoal):\n 1. set_mset Ys \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set_mset Ys \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "obtain Y X where y_nemp: \"Y \\<noteq> {#}\" and y_sub_ys: \"Y \\<subseteq># Ys\" and xs_eq: \"mset xs = Ys - Y + X\" and\n    ex_y: \"\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># Ys; mset xs = Ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ih[OF Ys_a xs_a]"], ["proof (prove)\nusing this:\n  \\<exists>Y X.\n     Y \\<noteq> {#} \\<and>\n     Y \\<subseteq># Ys \\<and>\n     mset xs = Ys - Y + X \\<and>\n     (\\<forall>x.\n         x \\<in># X \\<longrightarrow>\n         (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># Ys; mset xs = Ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y \\<noteq> {#}\n  Y \\<subseteq># Ys\n  mset xs = Ys - Y + X\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "obtain z M0 Ya where zs_eq: \"Zs = M0 + {#z#}\" and ys_eq: \"Ys = M0 + Ya\" and\n    z_gt: \"\\<forall>y. y \\<in># Ya \\<longrightarrow> y \\<in> A \\<and> z \\<in> A \\<and> gt z y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>M0 z Ya.\n        \\<lbrakk>Zs = M0 + {#z#}; Ys = M0 + Ya;\n         \\<forall>y.\n            y \\<in># Ya \\<longrightarrow>\n            y \\<in> A \\<and> z \\<in> A \\<and> gt z y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_zs_in_mult1[unfolded mult1_def]"], ["proof (prove)\nusing this:\n  (Ys, Zs)\n  \\<in> {(N, M).\n         \\<exists>a M0 K.\n            M = add_mset a M0 \\<and>\n            N = M0 + K \\<and>\n            (\\<forall>b.\n                b \\<in># K \\<longrightarrow>\n                (b, a)\n                \\<in> {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})}\n\ngoal (1 subgoal):\n 1. (\\<And>M0 z Ya.\n        \\<lbrakk>Zs = M0 + {#z#}; Ys = M0 + Ya;\n         \\<forall>y.\n            y \\<in># Ya \\<longrightarrow>\n            y \\<in> A \\<and> z \\<in> A \\<and> gt z y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  Zs = M0 + {#z#}\n  Ys = M0 + Ya\n  \\<forall>y.\n     y \\<in># Ya \\<longrightarrow> y \\<in> A \\<and> z \\<in> A \\<and> gt z y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "let ?Za = \"Y - Ya + {#z#}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "let ?Xa = \"X + Ya + (Y - Ya) - Y\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "have xa_sub_x_ya: \"set_mset ?Xa \\<subseteq> set_mset (X + Ya)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (X + Ya + (Y - Ya) - Y) \\<subseteq> set_mset (X + Ya)", "by (metis diff_subset_eq_self in_diffD subsetI subset_mset.diff_diff_right)"], ["proof (state)\nthis:\n  set_mset (X + Ya + (Y - Ya) - Y) \\<subseteq> set_mset (X + Ya)\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "have x_a: \"set_mset X \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset X \\<subseteq> A", "using xs_a xs_eq"], ["proof (prove)\nusing this:\n  set_mset (mset xs) \\<subseteq> A\n  mset xs = Ys - Y + X\n\ngoal (1 subgoal):\n 1. set_mset X \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set_mset X \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "have ya_a: \"set_mset Ya \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset Ya \\<subseteq> A", "by (simp add: subsetI z_gt)"], ["proof (state)\nthis:\n  set_mset Ya \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "have ex_y': \"\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\" if x_in: \"x \\<in># X + Ya\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "proof (cases \"x \\<in># X\")"], ["proof (state)\ngoal (2 subgoals):\n 1. x \\<in># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n 2. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "case True"], ["proof (state)\nthis:\n  x \\<in># X\n\ngoal (2 subgoals):\n 1. x \\<in># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n 2. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "then"], ["proof (chain)\npicking this:\n  x \\<in># X", "obtain y where y_in: \"y \\<in># Y\" and y_gt_x: \"gt y x\""], ["proof (prove)\nusing this:\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># Y; gt y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ex_y"], ["proof (prove)\nusing this:\n  x \\<in># X\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>y \\<in># Y; gt y x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  y \\<in># Y\n  gt y x\n\ngoal (2 subgoals):\n 1. x \\<in># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n 2. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "proof (cases \"y \\<in># Ya\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n 2. y \\<notin># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "case False"], ["proof (state)\nthis:\n  y \\<notin># Ya\n\ngoal (2 subgoals):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n 2. y \\<notin># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "hence \"y \\<in># Y - Ya + {#z#}\""], ["proof (prove)\nusing this:\n  y \\<notin># Ya\n\ngoal (1 subgoal):\n 1. y \\<in># Y - Ya + {#z#}", "using y_in"], ["proof (prove)\nusing this:\n  y \\<notin># Ya\n  y \\<in># Y\n\ngoal (1 subgoal):\n 1. y \\<in># Y - Ya + {#z#}", "by fastforce"], ["proof (state)\nthis:\n  y \\<in># Y - Ya + {#z#}\n\ngoal (2 subgoals):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n 2. y \\<notin># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "thus ?thesis"], ["proof (prove)\nusing this:\n  y \\<in># Y - Ya + {#z#}\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "using y_gt_x"], ["proof (prove)\nusing this:\n  y \\<in># Y - Ya + {#z#}\n  gt y x\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "by blast"], ["proof (state)\nthis:\n  \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n\ngoal (1 subgoal):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "case True"], ["proof (state)\nthis:\n  y \\<in># Ya\n\ngoal (1 subgoal):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "hence \"y \\<in> A\" and \"z \\<in> A\" and \"gt z y\""], ["proof (prove)\nusing this:\n  y \\<in># Ya\n\ngoal (1 subgoal):\n 1. y \\<in> A &&& z \\<in> A &&& gt z y", "using z_gt"], ["proof (prove)\nusing this:\n  y \\<in># Ya\n  \\<forall>y.\n     y \\<in># Ya \\<longrightarrow> y \\<in> A \\<and> z \\<in> A \\<and> gt z y\n\ngoal (1 subgoal):\n 1. y \\<in> A &&& z \\<in> A &&& gt z y", "by blast+"], ["proof (state)\nthis:\n  y \\<in> A\n  z \\<in> A\n  gt z y\n\ngoal (1 subgoal):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "hence \"gt z x\""], ["proof (prove)\nusing this:\n  y \\<in> A\n  z \\<in> A\n  gt z y\n\ngoal (1 subgoal):\n 1. gt z x", "using trans y_gt_x x_a ya_a x_in"], ["proof (prove)\nusing this:\n  y \\<in> A\n  z \\<in> A\n  gt z y\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  gt y x\n  set_mset X \\<subseteq> A\n  set_mset Ya \\<subseteq> A\n  x \\<in># X + Ya\n\ngoal (1 subgoal):\n 1. gt z x", "by (meson subsetCE union_iff)"], ["proof (state)\nthis:\n  gt z x\n\ngoal (1 subgoal):\n 1. y \\<in># Ya \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "thus ?thesis"], ["proof (prove)\nusing this:\n  gt z x\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "case False"], ["proof (state)\nthis:\n  x \\<notin># X\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "hence \"x \\<in># Ya\""], ["proof (prove)\nusing this:\n  x \\<notin># X\n\ngoal (1 subgoal):\n 1. x \\<in># Ya", "using x_in"], ["proof (prove)\nusing this:\n  x \\<notin># X\n  x \\<in># X + Ya\n\ngoal (1 subgoal):\n 1. x \\<in># Ya", "by auto"], ["proof (state)\nthis:\n  x \\<in># Ya\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "hence \"x \\<in> A\" and \"z \\<in> A\" and \"gt z x\""], ["proof (prove)\nusing this:\n  x \\<in># Ya\n\ngoal (1 subgoal):\n 1. x \\<in> A &&& z \\<in> A &&& gt z x", "using z_gt"], ["proof (prove)\nusing this:\n  x \\<in># Ya\n  \\<forall>y.\n     y \\<in># Ya \\<longrightarrow> y \\<in> A \\<and> z \\<in> A \\<and> gt z y\n\ngoal (1 subgoal):\n 1. x \\<in> A &&& z \\<in> A &&& gt z x", "by blast+"], ["proof (state)\nthis:\n  x \\<in> A\n  z \\<in> A\n  gt z x\n\ngoal (1 subgoal):\n 1. x \\<notin># X \\<Longrightarrow>\n    \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> A\n  z \\<in> A\n  gt z x\n\ngoal (1 subgoal):\n 1. \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x", "by auto"], ["proof (state)\nthis:\n  \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x \\<in># X + Ya \\<Longrightarrow>\n  \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y ?x\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y)\n                \\<in> (mult1\n                        {(x, y).\n                         x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+;\n        (y, z)\n        \\<in> mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x};\n        \\<lbrakk>set_mset y \\<subseteq> A;\n         set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n        \\<Longrightarrow> \\<exists>Y X.\n                             Y \\<noteq> {#} \\<and>\n                             Y \\<subseteq># y \\<and>\n                             mset xs = y - Y + X \\<and>\n                             (\\<forall>x.\n                                 x \\<in># X \\<longrightarrow>\n                                 (\\<exists>y. y \\<in># Y \\<and> gt y x));\n        set_mset z \\<subseteq> A; set_mset (mset xs) \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> \\<exists>Y X.\n                            Y \\<noteq> {#} \\<and>\n                            Y \\<subseteq># z \\<and>\n                            mset xs = z - Y + X \\<and>\n                            (\\<forall>x.\n                                x \\<in># X \\<longrightarrow>\n                                (\\<exists>y. y \\<in># Y \\<and> gt y x))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># Zs \\<and>\n       mset xs = Zs - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof (rule exI[of _ ?Za], rule exI[of _ ?Xa], intro conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. Y - Ya + {#z#} \\<noteq> {#}\n 2. Y - Ya + {#z#} \\<subseteq># Zs\n 3. mset xs = Zs - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)\n 4. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "show \"Y - Ya + {#z#} \\<subseteq># Zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y - Ya + {#z#} \\<subseteq># Zs", "using mset_subset_eq_mono_add subset_eq_diff_conv y_sub_ys ys_eq zs_eq"], ["proof (prove)\nusing this:\n  \\<lbrakk>?A \\<subseteq># ?B; ?C \\<subseteq># ?D\\<rbrakk>\n  \\<Longrightarrow> ?A + ?C \\<subseteq># ?B + ?D\n  (?A - ?C \\<subseteq># ?B) = (?A \\<subseteq># ?B + ?C)\n  Y \\<subseteq># Ys\n  Ys = M0 + Ya\n  Zs = M0 + {#z#}\n\ngoal (1 subgoal):\n 1. Y - Ya + {#z#} \\<subseteq># Zs", "by fastforce"], ["proof (state)\nthis:\n  Y - Ya + {#z#} \\<subseteq># Zs\n\ngoal (3 subgoals):\n 1. Y - Ya + {#z#} \\<noteq> {#}\n 2. mset xs = Zs - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)\n 3. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. Y - Ya + {#z#} \\<noteq> {#}\n 2. mset xs = Zs - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)\n 3. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "show \"mset xs = Zs - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs = Zs - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)", "unfolding xs_eq ys_eq zs_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. M0 + Ya - Y + X =\n    M0 + {#z#} - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)", "by (auto simp: multiset_eq_iff)"], ["proof (state)\nthis:\n  mset xs = Zs - (Y - Ya + {#z#}) + (X + Ya + (Y - Ya) - Y)\n\ngoal (2 subgoals):\n 1. Y - Ya + {#z#} \\<noteq> {#}\n 2. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. Y - Ya + {#z#} \\<noteq> {#}\n 2. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "show \"\\<forall>x. x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow> (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "using ex_y' xa_sub_x_ya"], ["proof (prove)\nusing this:\n  ?x \\<in># X + Ya \\<Longrightarrow>\n  \\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y ?x\n  set_mset (X + Ya + (Y - Ya) - Y) \\<subseteq> set_mset (X + Ya)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n       (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)", "by blast"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in># X + Ya + (Y - Ya) - Y \\<longrightarrow>\n     (\\<exists>y. y \\<in># Y - Ya + {#z#} \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. Y - Ya + {#z#} \\<noteq> {#}", "qed auto"], ["proof (state)\nthis:\n  \\<exists>Y X.\n     Y \\<noteq> {#} \\<and>\n     Y \\<subseteq># Zs \\<and>\n     mset xs = Zs - Y + X \\<and>\n     (\\<forall>x.\n         x \\<in># X \\<longrightarrow>\n         (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_dersh_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> msetext_dersh gt ys xs \\<Longrightarrow>\n  msetext_dersh gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     msetext_dersh gt ys xs\\<rbrakk>\n    \\<Longrightarrow> msetext_dersh gt' ys xs", "unfolding msetext_dersh_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     \\<exists>Y X.\n        Y \\<noteq> {#} \\<and>\n        Y \\<subseteq># mset ys \\<and>\n        mset xs = mset ys - Y + X \\<and>\n        (\\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>Y X.\n                         Y \\<noteq> {#} \\<and>\n                         Y \\<subseteq># mset ys \\<and>\n                         mset xs = mset ys - Y + X \\<and>\n                         (\\<forall>x.\n                             x \\<in># X \\<longrightarrow>\n                             (\\<exists>y. y \\<in># Y \\<and> gt' y x))", "by (metis mset_subset_eqD mset_subset_eq_add_right set_mset_mset)"], ["", "lemma msetext_dersh_map_strong:\n  assumes\n    compat_f: \"\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)\" and\n    ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"msetext_dersh gt (map f ys) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "obtain Y X where\n    y_nemp: \"Y \\<noteq> {#}\" and y_sub_ys: \"Y \\<subseteq># mset ys\" and xs_eq: \"mset xs = mset ys - Y + X\" and\n    ex_y: \"\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset ys;\n         mset xs = mset ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_dersh_def Let_def mset_map]"], ["proof (prove)\nusing this:\n  \\<exists>Y X.\n     Y \\<noteq> {#} \\<and>\n     Y \\<subseteq># mset ys \\<and>\n     mset xs = mset ys - Y + X \\<and>\n     (\\<forall>x.\n         x \\<in># X \\<longrightarrow>\n         (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset ys;\n         mset xs = mset ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y \\<noteq> {#}\n  Y \\<subseteq># mset ys\n  mset xs = mset ys - Y + X\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "have x_sub_xs: \"X \\<subseteq># mset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<subseteq># mset xs", "using xs_eq"], ["proof (prove)\nusing this:\n  mset xs = mset ys - Y + X\n\ngoal (1 subgoal):\n 1. X \\<subseteq># mset xs", "by simp"], ["proof (state)\nthis:\n  X \\<subseteq># mset xs\n\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "let ?fY = \"image_mset f Y\""], ["proof (state)\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "let ?fX = \"image_mset f X\""], ["proof (state)\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt (map f ys) (map f xs)", "unfolding msetext_dersh_def Let_def mset_map"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># image_mset f (mset ys) \\<and>\n       image_mset f (mset xs) = image_mset f (mset ys) - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof (intro exI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># image_mset f (mset ys)\n 3. image_mset f (mset xs) = image_mset f (mset ys) - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "show \"image_mset f (mset xs) = image_mset f (mset ys) - ?fY + ?fX\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset f (mset xs) =\n    image_mset f (mset ys) - image_mset f Y + image_mset f X", "using xs_eq[THEN arg_cong, of \"image_mset f\"] y_sub_ys"], ["proof (prove)\nusing this:\n  image_mset f (mset xs) = image_mset f (mset ys - Y + X)\n  Y \\<subseteq># mset ys\n\ngoal (1 subgoal):\n 1. image_mset f (mset xs) =\n    image_mset f (mset ys) - image_mset f Y + image_mset f X", "by (metis image_mset_Diff image_mset_union)"], ["proof (state)\nthis:\n  image_mset f (mset xs) =\n  image_mset f (mset ys) - image_mset f Y + image_mset f X\n\ngoal (3 subgoals):\n 1. image_mset f Y \\<noteq> {#}\n 2. image_mset f Y \\<subseteq># image_mset f (mset ys)\n 3. \\<forall>x.\n       x \\<in># image_mset f X \\<longrightarrow>\n       (\\<exists>y. y \\<in># image_mset f Y \\<and> gt y x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. image_mset f Y \\<noteq> {#}\n 2. image_mset f Y \\<subseteq># image_mset f (mset ys)\n 3. \\<forall>x.\n       x \\<in># image_mset f X \\<longrightarrow>\n       (\\<exists>y. y \\<in># image_mset f Y \\<and> gt y x)", "obtain y where y: \"\\<forall>x. x \\<in># X \\<longrightarrow> y x \\<in># Y \\<and> gt (y x) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           y x \\<in># Y \\<and> gt (y x) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex_y"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           y x \\<in># Y \\<and> gt (y x) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>x. x \\<in># X \\<longrightarrow> y x \\<in># Y \\<and> gt (y x) x\n\ngoal (3 subgoals):\n 1. image_mset f Y \\<noteq> {#}\n 2. image_mset f Y \\<subseteq># image_mset f (mset ys)\n 3. \\<forall>x.\n       x \\<in># image_mset f X \\<longrightarrow>\n       (\\<exists>y. y \\<in># image_mset f Y \\<and> gt y x)", "show \"\\<forall>fx. fx \\<in># ?fX \\<longrightarrow> (\\<exists>fy. fy \\<in># ?fY \\<and> gt fy fx)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>fx.\n       fx \\<in># image_mset f X \\<longrightarrow>\n       (\\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx)", "proof (intro allI impI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fx.\n       fx \\<in># image_mset f X \\<Longrightarrow>\n       \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "fix fx"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>fx.\n       fx \\<in># image_mset f X \\<Longrightarrow>\n       \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "assume \"fx \\<in># ?fX\""], ["proof (state)\nthis:\n  fx \\<in># image_mset f X\n\ngoal (1 subgoal):\n 1. \\<And>fx.\n       fx \\<in># image_mset f X \\<Longrightarrow>\n       \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "then"], ["proof (chain)\npicking this:\n  fx \\<in># image_mset f X", "obtain x where fx: \"fx = f x\" and x_in: \"x \\<in># X\""], ["proof (prove)\nusing this:\n  fx \\<in># image_mset f X\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>fx = f x; x \\<in># X\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  fx = f x\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. \\<And>fx.\n       fx \\<in># image_mset f X \\<Longrightarrow>\n       \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "hence y_in: \"y x \\<in># Y\" and y_gt: \"gt (y x) x\""], ["proof (prove)\nusing this:\n  fx = f x\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. y x \\<in># Y &&& gt (y x) x", "using y[rule_format, OF x_in]"], ["proof (prove)\nusing this:\n  fx = f x\n  x \\<in># X\n  y x \\<in># Y \\<and> gt (y x) x\n\ngoal (1 subgoal):\n 1. y x \\<in># Y &&& gt (y x) x", "by blast+"], ["proof (state)\nthis:\n  y x \\<in># Y\n  gt (y x) x\n\ngoal (1 subgoal):\n 1. \\<And>fx.\n       fx \\<in># image_mset f X \\<Longrightarrow>\n       \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "hence \"f (y x) \\<in># ?fY \\<and> gt (f (y x)) (f x)\""], ["proof (prove)\nusing this:\n  y x \\<in># Y\n  gt (y x) x\n\ngoal (1 subgoal):\n 1. f (y x) \\<in># image_mset f Y \\<and> gt (f (y x)) (f x)", "using compat_f y_sub_ys x_sub_xs x_in"], ["proof (prove)\nusing this:\n  y x \\<in># Y\n  gt (y x) x\n  \\<forall>y\\<in>set ys.\n     \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt (f y) (f x)\n  Y \\<subseteq># mset ys\n  X \\<subseteq># mset xs\n  x \\<in># X\n\ngoal (1 subgoal):\n 1. f (y x) \\<in># image_mset f Y \\<and> gt (f (y x)) (f x)", "by (metis image_eqI in_image_mset mset_subset_eqD set_mset_mset)"], ["proof (state)\nthis:\n  f (y x) \\<in># image_mset f Y \\<and> gt (f (y x)) (f x)\n\ngoal (1 subgoal):\n 1. \\<And>fx.\n       fx \\<in># image_mset f X \\<Longrightarrow>\n       \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "thus \"\\<exists>fy. fy \\<in># ?fY \\<and> gt fy fx\""], ["proof (prove)\nusing this:\n  f (y x) \\<in># image_mset f Y \\<and> gt (f (y x)) (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx", "unfolding fx"], ["proof (prove)\nusing this:\n  f (y x) \\<in># image_mset f Y \\<and> gt (f (y x)) (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy (f x)", "by auto"], ["proof (state)\nthis:\n  \\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<forall>fx.\n     fx \\<in># image_mset f X \\<longrightarrow>\n     (\\<exists>fy. fy \\<in># image_mset f Y \\<and> gt fy fx)\n\ngoal (2 subgoals):\n 1. image_mset f Y \\<noteq> {#}\n 2. image_mset f Y \\<subseteq># image_mset f (mset ys)", "qed (auto simp: y_nemp y_sub_ys image_mset_subseteq_mono)"], ["proof (state)\nthis:\n  msetext_dersh gt (map f ys) (map f xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_dersh_trans:\n  assumes\n    zs_a: \"zs \\<in> lists A\" and\n    ys_a: \"ys \\<in> lists A\" and\n    xs_a: \"xs \\<in> lists A\" and\n    trans: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    zs_gt_ys: \"msetext_dersh gt zs ys\" and\n    ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"msetext_dersh gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt zs xs", "proof (rule mult_imp_msetext_dersh_rel[OF _ _ _ trans])"], ["proof (state)\ngoal (3 subgoals):\n 1. set_mset (mset zs) \\<subseteq> A\n 2. set_mset (mset xs) \\<subseteq> A\n 3. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "show \"set_mset (mset zs) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (mset zs) \\<subseteq> A", "using zs_a"], ["proof (prove)\nusing this:\n  zs \\<in> lists A\n\ngoal (1 subgoal):\n 1. set_mset (mset zs) \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set_mset (mset zs) \\<subseteq> A\n\ngoal (2 subgoals):\n 1. set_mset (mset xs) \\<subseteq> A\n 2. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. set_mset (mset xs) \\<subseteq> A\n 2. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "show \"set_mset (mset xs) \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set_mset (mset xs) \\<subseteq> A", "using xs_a"], ["proof (prove)\nusing this:\n  xs \\<in> lists A\n\ngoal (1 subgoal):\n 1. set_mset (mset xs) \\<subseteq> A", "by auto"], ["proof (state)\nthis:\n  set_mset (mset xs) \\<subseteq> A\n\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "let ?Gt = \"{(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "have \"(mset xs, mset ys) \\<in> mult ?Gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset xs, mset ys)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "by (rule msetext_dersh_imp_mult_rel[OF ys_a xs_a ys_gt_xs])"], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "moreover"], ["proof (state)\nthis:\n  (mset xs, mset ys)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "have \"(mset ys, mset zs) \\<in> mult ?Gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (mset ys, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "by (rule msetext_dersh_imp_mult_rel[OF zs_a ys_a zs_gt_ys])"], ["proof (state)\nthis:\n  (mset ys, mset zs)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "ultimately"], ["proof (chain)\npicking this:\n  (mset xs, mset ys)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  (mset ys, mset zs)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "show \"(mset xs, mset zs) \\<in> mult ?Gt\""], ["proof (prove)\nusing this:\n  (mset xs, mset ys)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n  (mset ys, mset zs)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}", "unfolding mult_def"], ["proof (prove)\nusing this:\n  (mset xs, mset ys)\n  \\<in> (mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+\n  (mset ys, mset zs)\n  \\<in> (mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+\n\ngoal (1 subgoal):\n 1. (mset xs, mset zs)\n    \\<in> (mult1 {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x})\\<^sup>+", "by simp"], ["proof (state)\nthis:\n  (mset xs, mset zs)\n  \\<in> mult {(x, y). x \\<in> A \\<and> y \\<in> A \\<and> gt y x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_dersh_irrefl_from_trans:\n  assumes\n    trans: \"\\<forall>z \\<in> set xs. \\<forall>y \\<in> set xs. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    irrefl: \"\\<forall>x \\<in> set xs. \\<not> gt x x\"\n  shows \"\\<not> msetext_dersh gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> msetext_dersh gt xs xs", "unfolding msetext_dersh_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<nexists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># mset xs \\<and>\n       mset xs = mset xs - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof clarify"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "fix Y X"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "assume y_nemp: \"Y \\<noteq> {#}\" and y_sub_xs: \"Y \\<subseteq># mset xs\" and xs_eq: \"mset xs = mset xs - Y + X\" and\n    ex_y: \"\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\""], ["proof (state)\nthis:\n  Y \\<noteq> {#}\n  Y \\<subseteq># mset xs\n  mset xs = mset xs - Y + X\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "have x_eq_y: \"X = Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = Y", "using y_sub_xs xs_eq"], ["proof (prove)\nusing this:\n  Y \\<subseteq># mset xs\n  mset xs = mset xs - Y + X\n\ngoal (1 subgoal):\n 1. X = Y", "by (metis diff_union_cancelL subset_mset.diff_add)"], ["proof (state)\nthis:\n  X = Y\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "let ?Gt = \"{(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"?Gt \\<subseteq> set_mset Y \\<times> set_mset Y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n    \\<subseteq> set_mset Y \\<times> set_mset Y", "by auto"], ["proof (state)\nthis:\n  {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n  \\<subseteq> set_mset Y \\<times> set_mset Y\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "hence fin: \"finite ?Gt\""], ["proof (prove)\nusing this:\n  {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n  \\<subseteq> set_mset Y \\<times> set_mset Y\n\ngoal (1 subgoal):\n 1. finite {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "by (auto dest!: infinite_super)"], ["proof (state)\nthis:\n  finite {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  finite {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"irrefl ?Gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. irrefl {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "unfolding irrefl_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>a.\n       (a, a) \\<notin> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "using irrefl y_sub_xs"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>set xs. \\<not> gt x x\n  Y \\<subseteq># mset xs\n\ngoal (1 subgoal):\n 1. \\<forall>a.\n       (a, a) \\<notin> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "by (fastforce dest!: set_mset_mono)"], ["proof (state)\nthis:\n  irrefl {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  irrefl {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "have \"trans ?Gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. trans {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "unfolding trans_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y)\n       \\<in> {(y, x).\n              y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x} \\<longrightarrow>\n       (y, z)\n       \\<in> {(y, x).\n              y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x} \\<longrightarrow>\n       (x, z) \\<in> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "using trans y_sub_xs"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set xs.\n     \\<forall>y\\<in>set xs.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  Y \\<subseteq># mset xs\n\ngoal (1 subgoal):\n 1. \\<forall>x y z.\n       (x, y)\n       \\<in> {(y, x).\n              y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x} \\<longrightarrow>\n       (y, z)\n       \\<in> {(y, x).\n              y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x} \\<longrightarrow>\n       (x, z) \\<in> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "by (fastforce dest!: set_mset_mono)"], ["proof (state)\nthis:\n  trans {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  finite {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n  irrefl {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n  trans {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "have acyc: \"acyclic ?Gt\""], ["proof (prove)\nusing this:\n  finite {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n  irrefl {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n  trans {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. acyclicP (\\<lambda>y x. y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x)", "by (rule finite_irrefl_trans_imp_wf[THEN wf_acyclic])"], ["proof (state)\nthis:\n  acyclicP (\\<lambda>y x. y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "have fin_y: \"finite (set_mset Y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (set_mset Y)", "using y_sub_xs"], ["proof (prove)\nusing this:\n  Y \\<subseteq># mset xs\n\ngoal (1 subgoal):\n 1. finite (set_mset Y)", "by simp"], ["proof (state)\nthis:\n  finite (set_mset Y)\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "hence cyc: \"\\<not> acyclic ?Gt\""], ["proof (prove)\nusing this:\n  finite (set_mset Y)\n\ngoal (1 subgoal):\n 1. \\<not> acyclicP\n            (\\<lambda>y x. y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x)", "proof (rule finite_nonempty_ex_succ_imp_cyclic)"], ["proof (state)\ngoal (2 subgoals):\n 1. set_mset Y \\<noteq> {}\n 2. \\<forall>x\\<in>#Y.\n       \\<exists>y\\<in>#Y.\n          (y, x) \\<in> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "show \"\\<forall>x \\<in># Y. \\<exists>y \\<in># Y. (y, x) \\<in> ?Gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#Y.\n       \\<exists>y\\<in>#Y.\n          (y, x) \\<in> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "using ex_y[unfolded x_eq_y]"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     x \\<in># Y \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>#Y.\n       \\<exists>y\\<in>#Y.\n          (y, x) \\<in> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}", "by auto"], ["proof (state)\nthis:\n  \\<forall>x\\<in>#Y.\n     \\<exists>y\\<in>#Y.\n        (y, x) \\<in> {(y, x). y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x}\n\ngoal (1 subgoal):\n 1. set_mset Y \\<noteq> {}", "qed (auto simp: y_nemp)"], ["proof (state)\nthis:\n  \\<not> acyclicP (\\<lambda>y x. y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. \\<And>Y X.\n       \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset xs;\n        mset xs = mset xs - Y + X;\n        \\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n       \\<Longrightarrow> False", "show False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using acyc cyc"], ["proof (prove)\nusing this:\n  acyclicP (\\<lambda>y x. y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x)\n  \\<not> acyclicP (\\<lambda>y x. y \\<in># Y \\<and> x \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. False", "by sat"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_dersh_snoc: \"msetext_dersh gt (xs @ [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt (xs @ [x]) xs", "unfolding msetext_dersh_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># mset (xs @ [x]) \\<and>\n       mset xs = mset (xs @ [x]) - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof (intro exI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># mset (xs @ [x])\n 3. mset xs = mset (xs @ [x]) - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "show \"mset xs = mset (xs @ [x]) - {#x#} + {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs = mset (xs @ [x]) - {#x#} + {#}", "by simp"], ["proof (state)\nthis:\n  mset xs = mset (xs @ [x]) - {#x#} + {#}\n\ngoal (3 subgoals):\n 1. {#x#} \\<noteq> {#}\n 2. {#x#} \\<subseteq># mset (xs @ [x])\n 3. \\<forall>xa.\n       xa \\<in># {#} \\<longrightarrow>\n       (\\<exists>y. y \\<in># {#x#} \\<and> gt y xa)", "qed auto"], ["", "lemma msetext_dersh_compat_cons:\n  assumes ys_gt_xs: \"msetext_dersh gt ys xs\"\n  shows \"msetext_dersh gt (x # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt (x # ys) (x # xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msetext_dersh gt (x # ys) (x # xs)", "obtain Y X where\n    y_nemp: \"Y \\<noteq> {#}\" and y_sub_ys: \"Y \\<subseteq># mset ys\" and xs_eq: \"mset xs = mset ys - Y + X\" and\n    ex_y: \"\\<forall>x. x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset ys;\n         mset xs = mset ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_dersh_def Let_def mset_map]"], ["proof (prove)\nusing this:\n  \\<exists>Y X.\n     Y \\<noteq> {#} \\<and>\n     Y \\<subseteq># mset ys \\<and>\n     mset xs = mset ys - Y + X \\<and>\n     (\\<forall>x.\n         x \\<in># X \\<longrightarrow>\n         (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal (1 subgoal):\n 1. (\\<And>Y X.\n        \\<lbrakk>Y \\<noteq> {#}; Y \\<subseteq># mset ys;\n         mset xs = mset ys - Y + X;\n         \\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  Y \\<noteq> {#}\n  Y \\<subseteq># mset ys\n  mset xs = mset ys - Y + X\n  \\<forall>x.\n     x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. msetext_dersh gt (x # ys) (x # xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt (x # ys) (x # xs)", "unfolding msetext_dersh_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># mset (x # ys) \\<and>\n       mset (x # xs) = mset (x # ys) - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof (intro exI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># mset (x # ys)\n 3. mset (x # xs) = mset (x # ys) - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "show \"Y \\<subseteq># mset (x # ys)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Y \\<subseteq># mset (x # ys)", "using y_sub_ys"], ["proof (prove)\nusing this:\n  Y \\<subseteq># mset ys\n\ngoal (1 subgoal):\n 1. Y \\<subseteq># mset (x # ys)", "by (metis add_mset_add_single mset.simps(2) mset_subset_eq_add_left\n        subset_mset.add_increasing2)"], ["proof (state)\nthis:\n  Y \\<subseteq># mset (x # ys)\n\ngoal (3 subgoals):\n 1. Y \\<noteq> {#}\n 2. mset (x # xs) = mset (x # ys) - Y + ?X1\n 3. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. Y \\<noteq> {#}\n 2. mset (x # xs) = mset (x # ys) - Y + ?X1\n 3. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)", "show \"mset (x # xs) = mset (x # ys) - Y + X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (x # xs) = mset (x # ys) - Y + X", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. mset (x # xs) = mset (x # ys) - Y + X", "have \"X + (mset ys - Y) = mset xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X + (mset ys - Y) = mset xs", "by (simp add: union_commute xs_eq)"], ["proof (state)\nthis:\n  X + (mset ys - Y) = mset xs\n\ngoal (1 subgoal):\n 1. mset (x # xs) = mset (x # ys) - Y + X", "hence \"mset (x # xs) = X + (mset (x # ys) - Y)\""], ["proof (prove)\nusing this:\n  X + (mset ys - Y) = mset xs\n\ngoal (1 subgoal):\n 1. mset (x # xs) = X + (mset (x # ys) - Y)", "by (metis add_mset_add_single mset.simps(2) mset_subset_eq_multiset_union_diff_commute\n          union_mset_add_mset_right y_sub_ys)"], ["proof (state)\nthis:\n  mset (x # xs) = X + (mset (x # ys) - Y)\n\ngoal (1 subgoal):\n 1. mset (x # xs) = mset (x # ys) - Y + X", "thus ?thesis"], ["proof (prove)\nusing this:\n  mset (x # xs) = X + (mset (x # ys) - Y)\n\ngoal (1 subgoal):\n 1. mset (x # xs) = mset (x # ys) - Y + X", "by (simp add: union_commute)"], ["proof (state)\nthis:\n  mset (x # xs) = mset (x # ys) - Y + X\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset (x # xs) = mset (x # ys) - Y + X\n\ngoal (2 subgoals):\n 1. Y \\<noteq> {#}\n 2. \\<forall>x.\n       x \\<in># X \\<longrightarrow> (\\<exists>y. y \\<in># Y \\<and> gt y x)", "qed (auto simp: y_nemp ex_y)"], ["proof (state)\nthis:\n  msetext_dersh gt (x # ys) (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_dersh_compat_snoc: \"msetext_dersh gt ys xs \\<Longrightarrow> msetext_dersh gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs \\<Longrightarrow>\n    msetext_dersh gt (ys @ [x]) (xs @ [x])", "using msetext_dersh_compat_cons[of gt ys xs x]"], ["proof (prove)\nusing this:\n  msetext_dersh gt ys xs \\<Longrightarrow>\n  msetext_dersh gt (x # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs \\<Longrightarrow>\n    msetext_dersh gt (ys @ [x]) (xs @ [x])", "unfolding msetext_dersh_def"], ["proof (prove)\nusing this:\n  let N = mset ys; M = mset xs\n  in \\<exists>Y X.\n        Y \\<noteq> {#} \\<and>\n        Y \\<subseteq># N \\<and>\n        M = N - Y + X \\<and>\n        (\\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x)) \\<Longrightarrow>\n  let N = mset (x # ys); M = mset (x # xs)\n  in \\<exists>Y X.\n        Y \\<noteq> {#} \\<and>\n        Y \\<subseteq># N \\<and>\n        M = N - Y + X \\<and>\n        (\\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x))\n\ngoal (1 subgoal):\n 1. let N = mset ys; M = mset xs\n    in \\<exists>Y X.\n          Y \\<noteq> {#} \\<and>\n          Y \\<subseteq># N \\<and>\n          M = N - Y + X \\<and>\n          (\\<forall>x.\n              x \\<in># X \\<longrightarrow>\n              (\\<exists>y. y \\<in># Y \\<and> gt y x)) \\<Longrightarrow>\n    let N = mset (ys @ [x]); M = mset (xs @ [x])\n    in \\<exists>Y X.\n          Y \\<noteq> {#} \\<and>\n          Y \\<subseteq># N \\<and>\n          M = N - Y + X \\<and>\n          (\\<forall>x.\n              x \\<in># X \\<longrightarrow>\n              (\\<exists>y. y \\<in># Y \\<and> gt y x))", "by simp"], ["", "lemma msetext_dersh_compat_list:\n  assumes y_gt_x: \"gt y x\"\n  shows \"msetext_dersh gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt (xs @ y # xs') (xs @ x # xs')", "unfolding msetext_dersh_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>Y X.\n       Y \\<noteq> {#} \\<and>\n       Y \\<subseteq># mset (xs @ y # xs') \\<and>\n       mset (xs @ x # xs') = mset (xs @ y # xs') - Y + X \\<and>\n       (\\<forall>x.\n           x \\<in># X \\<longrightarrow>\n           (\\<exists>y. y \\<in># Y \\<and> gt y x))", "proof (intro exI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># mset (xs @ y # xs')\n 3. mset (xs @ x # xs') = mset (xs @ y # xs') - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "show \"mset (xs @ x # xs') = mset (xs @ y # xs') - {#y#} + {#x#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (xs @ x # xs') = mset (xs @ y # xs') - {#y#} + {#x#}", "by auto"], ["proof (state)\nthis:\n  mset (xs @ x # xs') = mset (xs @ y # xs') - {#y#} + {#x#}\n\ngoal (3 subgoals):\n 1. {#y#} \\<noteq> {#}\n 2. {#y#} \\<subseteq># mset (xs @ y # xs')\n 3. \\<forall>xa.\n       xa \\<in># {#x#} \\<longrightarrow>\n       (\\<exists>ya. ya \\<in># {#y#} \\<and> gt ya xa)", "qed (auto intro: y_gt_x)"], ["", "lemma msetext_dersh_singleton: \"msetext_dersh gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt [y] [x] = gt y x", "unfolding msetext_dersh_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<exists>Y X.\n        Y \\<noteq> {#} \\<and>\n        Y \\<subseteq># mset [y] \\<and>\n        mset [x] = mset [y] - Y + X \\<and>\n        (\\<forall>x.\n            x \\<in># X \\<longrightarrow>\n            (\\<exists>y. y \\<in># Y \\<and> gt y x))) =\n    gt y x", "by (auto dest: nonempty_subseteq_mset_eq_singleton simp: nonempty_subseteq_mset_iff_singleton)"], ["", "lemma msetext_dersh_wf:\n  assumes wf_gt: \"wfP (\\<lambda>x y. gt y x)\"\n  shows \"wfP (\\<lambda>xs ys. msetext_dersh gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys. msetext_dersh gt ys xs)", "proof (rule wfP_subset, rule wfP_app[of \"\\<lambda>xs ys. (xs, ys) \\<in> mult {(x, y). gt y x}\" mset])"], ["proof (state)\ngoal (2 subgoals):\n 1. wfP (\\<lambda>xs ys. (xs, ys) \\<in> mult {(x, y). gt y x})\n 2. (\\<lambda>xs ys. msetext_dersh gt ys xs)\n    \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})", "show \"wfP (\\<lambda>xs ys. (xs, ys) \\<in> mult {(x, y). gt y x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys. (xs, ys) \\<in> mult {(x, y). gt y x})", "using wf_gt"], ["proof (prove)\nusing this:\n  wfP (\\<lambda>x y. gt y x)\n\ngoal (1 subgoal):\n 1. wfP (\\<lambda>xs ys. (xs, ys) \\<in> mult {(x, y). gt y x})", "unfolding wfP_def"], ["proof (prove)\nusing this:\n  wf {(x, y). gt y x}\n\ngoal (1 subgoal):\n 1. wf {(xs, ys). (xs, ys) \\<in> mult {(x, y). gt y x}}", "by (auto intro: wf_mult)"], ["proof (state)\nthis:\n  wfP (\\<lambda>xs ys. (xs, ys) \\<in> mult {(x, y). gt y x})\n\ngoal (1 subgoal):\n 1. (\\<lambda>xs ys. msetext_dersh gt ys xs)\n    \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>xs ys. msetext_dersh gt ys xs)\n    \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})", "show \"(\\<lambda>xs ys. msetext_dersh gt ys xs) \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>xs ys. msetext_dersh gt ys xs)\n    \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})", "using msetext_dersh_imp_mult"], ["proof (prove)\nusing this:\n  msetext_dersh ?gt ?ys ?xs \\<Longrightarrow>\n  (mset ?xs, mset ?ys) \\<in> mult {(x, y). ?gt y x}\n\ngoal (1 subgoal):\n 1. (\\<lambda>xs ys. msetext_dersh gt ys xs)\n    \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})", "by blast"], ["proof (state)\nthis:\n  (\\<lambda>xs ys. msetext_dersh gt ys xs)\n  \\<le> (\\<lambda>x y. (mset x, mset y) \\<in> mult {(x, y). gt y x})\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation msetext_dersh: ext msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext msetext_dersh", "by standard (fact msetext_dersh_mono_strong, rule msetext_dersh_map_strong, metis in_listsD)"], ["", "interpretation msetext_dersh: ext_trans_before_irrefl msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_trans_before_irrefl msetext_dersh", "by standard (fact msetext_dersh_trans, fact msetext_dersh_irrefl_from_trans)"], ["", "interpretation msetext_dersh: ext_snoc msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_snoc msetext_dersh", "by standard (fact msetext_dersh_snoc)"], ["", "interpretation msetext_dersh: ext_compat_cons msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_cons msetext_dersh", "by standard (fact msetext_dersh_compat_cons)"], ["", "interpretation msetext_dersh: ext_compat_snoc msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_snoc msetext_dersh", "by standard (fact msetext_dersh_compat_snoc)"], ["", "interpretation msetext_dersh: ext_compat_list msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list msetext_dersh", "by standard (rule msetext_dersh_compat_list)"], ["", "interpretation msetext_dersh: ext_singleton msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton msetext_dersh", "by standard (rule msetext_dersh_singleton)"], ["", "interpretation msetext_dersh: ext_wf msetext_dersh"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf msetext_dersh", "by standard (fact msetext_dersh_wf)"], ["", "subsection \\<open>Huet--Oppen Multiset Extension\\<close>"], ["", "definition msetext_huet where\n  \"msetext_huet gt ys xs = (let N = mset ys; M = mset xs in\n     M \\<noteq> N \\<and> (\\<forall>x. count M x > count N x \\<longrightarrow> (\\<exists>y. gt y x \\<and> count N y > count M y)))\""], ["", "lemma msetext_huet_imp_count_gt:\n  assumes ys_gt_xs: \"msetext_huet gt ys xs\"\n  shows \"\\<exists>x. count (mset ys) x > count (mset xs) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "obtain x where \"count (mset ys) x \\<noteq> count (mset xs) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count (mset ys) x \\<noteq> count (mset xs) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count (mset ys) x \\<noteq> count (mset xs) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (fastforce intro: multiset_eqI)"], ["proof (state)\nthis:\n  count (mset ys) x \\<noteq> count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "moreover"], ["proof (state)\nthis:\n  count (mset ys) x \\<noteq> count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "{"], ["proof (state)\nthis:\n  count (mset ys) x \\<noteq> count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "assume \"count (mset ys) x < count (mset xs) x\""], ["proof (state)\nthis:\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "hence ?thesis"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "by blast"], ["proof (state)\nthis:\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "}"], ["proof (state)\nthis:\n  count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "moreover"], ["proof (state)\nthis:\n  count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "{"], ["proof (state)\nthis:\n  count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "assume \"count (mset ys) x > count (mset xs) x\""], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "hence ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "by fast"], ["proof (state)\nthis:\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "}"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "ultimately"], ["proof (chain)\npicking this:\n  count (mset ys) x \\<noteq> count (mset xs) x\n  count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x", "show ?thesis"], ["proof (prove)\nusing this:\n  count (mset ys) x \\<noteq> count (mset xs) x\n  count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<exists>x. count (mset xs) x < count (mset ys) x", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>x. count (mset xs) x < count (mset ys) x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_huet_imp_dersh:\n  assumes huet: \"msetext_huet gt ys xs\"\n  shows \"msetext_dersh gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_dersh gt ys xs", "proof (unfold msetext_dersh_def Let_def, intro exI conjI)"], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># mset ys\n 3. mset xs = mset ys - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "let ?X = \"mset xs - mset ys\""], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># mset ys\n 3. mset xs = mset ys - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "let ?Y = \"mset ys - mset xs\""], ["proof (state)\ngoal (4 subgoals):\n 1. ?Y \\<noteq> {#}\n 2. ?Y \\<subseteq># mset ys\n 3. mset xs = mset ys - ?Y + ?X1\n 4. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># ?Y \\<and> gt y x)", "show \"?Y \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset ys - mset xs \\<noteq> {#}", "by (metis msetext_huet_imp_count_gt[OF huet] empty_iff in_diff_count set_mset_empty)"], ["proof (state)\nthis:\n  mset ys - mset xs \\<noteq> {#}\n\ngoal (3 subgoals):\n 1. mset ys - mset xs \\<subseteq># mset ys\n 2. mset xs = mset ys - (mset ys - mset xs) + ?X1\n 3. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># mset ys - mset xs \\<and> gt y x)", "show \"?Y \\<subseteq># mset ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset ys - mset xs \\<subseteq># mset ys", "by auto"], ["proof (state)\nthis:\n  mset ys - mset xs \\<subseteq># mset ys\n\ngoal (2 subgoals):\n 1. mset xs = mset ys - (mset ys - mset xs) + ?X1\n 2. \\<forall>x.\n       x \\<in># ?X1 \\<longrightarrow>\n       (\\<exists>y. y \\<in># mset ys - mset xs \\<and> gt y x)", "show \"mset xs = mset ys - ?Y + ?X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs = mset ys - (mset ys - mset xs) + (mset xs - mset ys)", "by (metis add.commute diff_intersect_right_idem multiset_inter_def subset_mset.inf.cobounded2\n      subset_mset.le_imp_diff_is_add)"], ["proof (state)\nthis:\n  mset xs = mset ys - (mset ys - mset xs) + (mset xs - mset ys)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># mset xs - mset ys \\<longrightarrow>\n       (\\<exists>y. y \\<in># mset ys - mset xs \\<and> gt y x)", "show \"\\<forall>x. x \\<in># ?X \\<longrightarrow> (\\<exists>y. y \\<in># ?Y \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># mset xs - mset ys \\<longrightarrow>\n       (\\<exists>y. y \\<in># mset ys - mset xs \\<and> gt y x)", "using huet[unfolded msetext_huet_def Let_def, THEN conjunct2]"], ["proof (prove)\nusing this:\n  \\<forall>x.\n     count (mset ys) x < count (mset xs) x \\<longrightarrow>\n     (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)\n\ngoal (1 subgoal):\n 1. \\<forall>x.\n       x \\<in># mset xs - mset ys \\<longrightarrow>\n       (\\<exists>y. y \\<in># mset ys - mset xs \\<and> gt y x)", "by (meson in_diff_count)"], ["proof (state)\nthis:\n  \\<forall>x.\n     x \\<in># mset xs - mset ys \\<longrightarrow>\n     (\\<exists>y. y \\<in># mset ys - mset xs \\<and> gt y x)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>\nThe following proof is based on that of @{thm[source] mult_imp_less_multiset\\<^sub>H\\<^sub>O}.\n\\<close>"], ["", "lemma mult_imp_msetext_huet:\n  assumes\n    irrefl: \"irreflp gt\" and trans: \"transp gt\" and\n    in_mult: \"(mset xs, mset ys) \\<in> mult {(x, y). gt y x}\"\n  shows \"msetext_huet gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt ys xs", "using in_mult"], ["proof (prove)\nusing this:\n  (mset xs, mset ys) \\<in> mult {(x, y). gt y x}\n\ngoal (1 subgoal):\n 1. msetext_huet gt ys xs", "unfolding mult_def msetext_huet_def Let_def"], ["proof (prove)\nusing this:\n  (mset xs, mset ys) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys \\<and>\n    (\\<forall>x.\n        count (mset ys) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))", "proof (induct rule: trancl_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>y.\n       (mset xs, y) \\<in> mult1 {(x, y). gt y x} \\<Longrightarrow>\n       mset xs \\<noteq> y \\<and>\n       (\\<forall>x.\n           count y x < count (mset xs) x \\<longrightarrow>\n           (\\<exists>ya. gt ya x \\<and> count (mset xs) ya < count y ya))\n 2. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "case (base Ys)"], ["proof (state)\nthis:\n  (mset xs, Ys) \\<in> mult1 {(x, y). gt y x}\n\ngoal (2 subgoals):\n 1. \\<And>y.\n       (mset xs, y) \\<in> mult1 {(x, y). gt y x} \\<Longrightarrow>\n       mset xs \\<noteq> y \\<and>\n       (\\<forall>x.\n           count y x < count (mset xs) x \\<longrightarrow>\n           (\\<exists>ya. gt ya x \\<and> count (mset xs) ya < count y ya))\n 2. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "thus ?case"], ["proof (prove)\nusing this:\n  (mset xs, Ys) \\<in> mult1 {(x, y). gt y x}\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Ys \\<and>\n    (\\<forall>x.\n        count Ys x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))", "using irrefl"], ["proof (prove)\nusing this:\n  (mset xs, Ys) \\<in> mult1 {(x, y). gt y x}\n  irreflp gt\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Ys \\<and>\n    (\\<forall>x.\n        count Ys x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))", "unfolding irreflp_def msetext_huet_def Let_def mult1_def"], ["proof (prove)\nusing this:\n  (mset xs, Ys)\n  \\<in> {(N, M).\n         \\<exists>a M0 K.\n            M = add_mset a M0 \\<and>\n            N = M0 + K \\<and>\n            (\\<forall>b.\n                b \\<in># K \\<longrightarrow> (b, a) \\<in> {(x, y). gt y x})}\n  \\<forall>a. \\<not> gt a a\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Ys \\<and>\n    (\\<forall>x.\n        count Ys x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))", "by (auto 0 3 split: if_splits)"], ["proof (state)\nthis:\n  mset xs \\<noteq> Ys \\<and>\n  (\\<forall>x.\n      count Ys x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "case (step Ys Zs)"], ["proof (state)\nthis:\n  (mset xs, Ys) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+\n  (Ys, Zs) \\<in> mult1 {(x, y). gt y x}\n  mset xs \\<noteq> Ys \\<and>\n  (\\<forall>x.\n      count Ys x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "have asym[unfolded antisym_def, simplified]: \"antisymp gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. antisymp gt", "by (rule irreflp_transp_imp_antisymP[OF irrefl trans])"], ["proof (state)\nthis:\n  antisymp gt\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "from step(3)"], ["proof (chain)\npicking this:\n  mset xs \\<noteq> Ys \\<and>\n  (\\<forall>x.\n      count Ys x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))", "have \"mset xs \\<noteq> Ys\" and\n    **: \"\\<And>x. count Ys x < count (mset xs) x \\<Longrightarrow> (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y)\""], ["proof (prove)\nusing this:\n  mset xs \\<noteq> Ys \\<and>\n  (\\<forall>x.\n      count Ys x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y))\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Ys &&&\n    (\\<And>x.\n        count Ys x < count (mset xs) x \\<Longrightarrow>\n        \\<exists>y. gt y x \\<and> count (mset xs) y < count Ys y)", "by blast+"], ["proof (state)\nthis:\n  mset xs \\<noteq> Ys\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "from step(2)"], ["proof (chain)\npicking this:\n  (Ys, Zs) \\<in> mult1 {(x, y). gt y x}", "obtain M0 a K where\n    *: \"Zs = M0 + {#a#}\" \"Ys = M0 + K\" \"a \\<notin># K\" \"\\<And>b. b \\<in># K \\<Longrightarrow> gt a b\""], ["proof (prove)\nusing this:\n  (Ys, Zs) \\<in> mult1 {(x, y). gt y x}\n\ngoal (1 subgoal):\n 1. (\\<And>M0 a K.\n        \\<lbrakk>Zs = M0 + {#a#}; Ys = M0 + K; a \\<notin># K;\n         \\<And>b. b \\<in># K \\<Longrightarrow> gt a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using irrefl"], ["proof (prove)\nusing this:\n  (Ys, Zs) \\<in> mult1 {(x, y). gt y x}\n  irreflp gt\n\ngoal (1 subgoal):\n 1. (\\<And>M0 a K.\n        \\<lbrakk>Zs = M0 + {#a#}; Ys = M0 + K; a \\<notin># K;\n         \\<And>b. b \\<in># K \\<Longrightarrow> gt a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding mult1_def irreflp_def"], ["proof (prove)\nusing this:\n  (Ys, Zs)\n  \\<in> {(N, M).\n         \\<exists>a M0 K.\n            M = add_mset a M0 \\<and>\n            N = M0 + K \\<and>\n            (\\<forall>b.\n                b \\<in># K \\<longrightarrow> (b, a) \\<in> {(x, y). gt y x})}\n  \\<forall>a. \\<not> gt a a\n\ngoal (1 subgoal):\n 1. (\\<And>M0 a K.\n        \\<lbrakk>Zs = M0 + {#a#}; Ys = M0 + K; a \\<notin># K;\n         \\<And>b. b \\<in># K \\<Longrightarrow> gt a b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  Zs = M0 + {#a#}\n  Ys = M0 + K\n  a \\<notin># K\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "have \"mset xs \\<noteq> Zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs", "proof (cases \"K = {#}\")"], ["proof (state)\ngoal (2 subgoals):\n 1. K = {#} \\<Longrightarrow> mset xs \\<noteq> Zs\n 2. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "case True"], ["proof (state)\nthis:\n  K = {#}\n\ngoal (2 subgoals):\n 1. K = {#} \\<Longrightarrow> mset xs \\<noteq> Zs\n 2. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "thus ?thesis"], ["proof (prove)\nusing this:\n  K = {#}\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs", "using \\<open>mset xs \\<noteq> Ys\\<close> ** *(1,2) irrefl[unfolded irreflp_def]"], ["proof (prove)\nusing this:\n  K = {#}\n  mset xs \\<noteq> Ys\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n  Zs = M0 + {#a#}\n  Ys = M0 + K\n  \\<forall>a. \\<not> gt a a\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs", "by (metis One_nat_def add.comm_neutral count_single diff_union_cancelL lessI\n        minus_multiset.rep_eq not_add_less2 plus_multiset.rep_eq union_commute zero_less_diff)"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "case False"], ["proof (state)\nthis:\n  K \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "thus ?thesis"], ["proof (prove)\nusing this:\n  K \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "obtain aa :: \"'a \\<Rightarrow> 'a\" where\n        f1: \"\\<forall>a. \\<not> count Ys a < count (mset xs) a \\<or> gt (aa a) a \\<and>\n          count (mset xs) (aa a) < count Ys (aa a)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>aa.\n        \\<forall>a.\n           \\<not> count Ys a < count (mset xs) a \\<or>\n           gt (aa a) a \\<and>\n           count (mset xs) (aa a) < count Ys (aa a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using \"**\""], ["proof (prove)\nusing this:\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n\ngoal (1 subgoal):\n 1. (\\<And>aa.\n        \\<forall>a.\n           \\<not> count Ys a < count (mset xs) a \\<or>\n           gt (aa a) a \\<and>\n           count (mset xs) (aa a) < count Ys (aa a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by moura"], ["proof (state)\nthis:\n  \\<forall>a.\n     \\<not> count Ys a < count (mset xs) a \\<or>\n     gt (aa a) a \\<and> count (mset xs) (aa a) < count Ys (aa a)\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "have f2: \"K + M0 = Ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K + M0 = Ys", "using \"*\"(2) union_ac(2)"], ["proof (prove)\nusing this:\n  Ys = M0 + K\n  ?M + ?N = ?N + ?M\n\ngoal (1 subgoal):\n 1. K + M0 = Ys", "by blast"], ["proof (state)\nthis:\n  K + M0 = Ys\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "have f3: \"\\<And>aa. count Zs aa = count M0 aa + count {#a#} aa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>aa. count Zs aa = count M0 aa + count {#a#} aa", "by (simp add: \"*\"(1))"], ["proof (state)\nthis:\n  count Zs ?aa = count M0 ?aa + count {#a#} ?aa\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "have f4: \"\\<And>a. count Ys a = count K a + count M0 a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a. count Ys a = count K a + count M0 a", "using f2"], ["proof (prove)\nusing this:\n  K + M0 = Ys\n\ngoal (1 subgoal):\n 1. \\<And>a. count Ys a = count K a + count M0 a", "by auto"], ["proof (state)\nthis:\n  count Ys ?a = count K ?a + count M0 ?a\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "have f5: \"count K a = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count K a = 0", "by (meson \"*\"(3) count_inI)"], ["proof (state)\nthis:\n  count K a = 0\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "have \"Zs - M0 = {#a#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Zs - M0 = {#a#}", "using \"*\"(1) add_diff_cancel_left'"], ["proof (prove)\nusing this:\n  Zs = M0 + {#a#}\n  ?a + ?b - ?a = ?b\n\ngoal (1 subgoal):\n 1. Zs - M0 = {#a#}", "by blast"], ["proof (state)\nthis:\n  Zs - M0 = {#a#}\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "then"], ["proof (chain)\npicking this:\n  Zs - M0 = {#a#}", "have f6: \"count M0 a < count Zs a\""], ["proof (prove)\nusing this:\n  Zs - M0 = {#a#}\n\ngoal (1 subgoal):\n 1. count M0 a < count Zs a", "by (metis in_diff_count union_single_eq_member)"], ["proof (state)\nthis:\n  count M0 a < count Zs a\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "have \"\\<And>m. count m a = 0 + count m a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>m. count m a = 0 + count m a", "by simp"], ["proof (state)\nthis:\n  count ?m a = 0 + count ?m a\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "moreover"], ["proof (state)\nthis:\n  count ?m a = 0 + count ?m a\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "{"], ["proof (state)\nthis:\n  count ?m a = 0 + count ?m a\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "assume \"aa a \\<noteq> a\""], ["proof (state)\nthis:\n  aa a \\<noteq> a\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "then"], ["proof (chain)\npicking this:\n  aa a \\<noteq> a", "have \"mset xs = Zs \\<and> count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n          count K (aa a) + count M0 (aa a) < count Zs (aa a)\""], ["proof (prove)\nusing this:\n  aa a \\<noteq> a\n\ngoal (1 subgoal):\n 1. mset xs = Zs \\<and>\n    count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n    count K (aa a) + count M0 (aa a) < count Zs (aa a)", "using f5 f3 f2 f1 \"*\"(4) asym"], ["proof (prove)\nusing this:\n  aa a \\<noteq> a\n  count K a = 0\n  count Zs ?aa = count M0 ?aa + count {#a#} ?aa\n  K + M0 = Ys\n  \\<forall>a.\n     \\<not> count Ys a < count (mset xs) a \\<or>\n     gt (aa a) a \\<and> count (mset xs) (aa a) < count Ys (aa a)\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  antisymp gt\n\ngoal (1 subgoal):\n 1. mset xs = Zs \\<and>\n    count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n    count K (aa a) + count M0 (aa a) < count Zs (aa a)", "by (auto dest!: antisympD)"], ["proof (state)\nthis:\n  mset xs = Zs \\<and>\n  count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n  count K (aa a) + count M0 (aa a) < count Zs (aa a)\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "}"], ["proof (state)\nthis:\n  aa a \\<noteq> a \\<Longrightarrow>\n  mset xs = Zs \\<and>\n  count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n  count K (aa a) + count M0 (aa a) < count Zs (aa a)\n\ngoal (1 subgoal):\n 1. K \\<noteq> {#} \\<Longrightarrow> mset xs \\<noteq> Zs", "ultimately"], ["proof (chain)\npicking this:\n  count ?m a = 0 + count ?m a\n  aa a \\<noteq> a \\<Longrightarrow>\n  mset xs = Zs \\<and>\n  count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n  count K (aa a) + count M0 (aa a) < count Zs (aa a)", "show ?thesis"], ["proof (prove)\nusing this:\n  count ?m a = 0 + count ?m a\n  aa a \\<noteq> a \\<Longrightarrow>\n  mset xs = Zs \\<and>\n  count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n  count K (aa a) + count M0 (aa a) < count Zs (aa a)\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs", "using f6 f5 f4 f1"], ["proof (prove)\nusing this:\n  count ?m a = 0 + count ?m a\n  aa a \\<noteq> a \\<Longrightarrow>\n  mset xs = Zs \\<and>\n  count Zs (aa a) < count K (aa a) + count M0 (aa a) \\<longrightarrow>\n  count K (aa a) + count M0 (aa a) < count Zs (aa a)\n  count M0 a < count Zs a\n  count K a = 0\n  count Ys ?a = count K ?a + count M0 ?a\n  \\<forall>a.\n     \\<not> count Ys a < count (mset xs) a \\<or>\n     gt (aa a) a \\<and> count (mset xs) (aa a) < count Ys (aa a)\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs", "by (metis less_imp_not_less)"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "moreover"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "{"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "assume \"count Zs a \\<le> count (mset xs) a\""], ["proof (state)\nthis:\n  count Zs a \\<le> count (mset xs) a\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "with \\<open>a \\<notin># K\\<close>"], ["proof (chain)\npicking this:\n  a \\<notin># K\n  count Zs a \\<le> count (mset xs) a", "have \"count Ys a < count (mset xs) a\""], ["proof (prove)\nusing this:\n  a \\<notin># K\n  count Zs a \\<le> count (mset xs) a\n\ngoal (1 subgoal):\n 1. count Ys a < count (mset xs) a", "unfolding *(1,2)"], ["proof (prove)\nusing this:\n  a \\<notin># K\n  count (M0 + {#a#}) a \\<le> count (mset xs) a\n\ngoal (1 subgoal):\n 1. count (M0 + K) a < count (mset xs) a", "by (auto simp add: not_in_iff)"], ["proof (state)\nthis:\n  count Ys a < count (mset xs) a\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "with **"], ["proof (chain)\npicking this:\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n  count Ys a < count (mset xs) a", "obtain z where z: \"gt z a\" \"count (mset xs) z < count Ys z\""], ["proof (prove)\nusing this:\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n  count Ys a < count (mset xs) a\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z a; count (mset xs) z < count Ys z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt z a\n  count (mset xs) z < count Ys z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "with *"], ["proof (chain)\npicking this:\n  Zs = M0 + {#a#}\n  Ys = M0 + K\n  a \\<notin># K\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  gt z a\n  count (mset xs) z < count Ys z", "have \"count Ys z \\<le> count Zs z\""], ["proof (prove)\nusing this:\n  Zs = M0 + {#a#}\n  Ys = M0 + K\n  a \\<notin># K\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  gt z a\n  count (mset xs) z < count Ys z\n\ngoal (1 subgoal):\n 1. count Ys z \\<le> count Zs z", "using asym"], ["proof (prove)\nusing this:\n  Zs = M0 + {#a#}\n  Ys = M0 + K\n  a \\<notin># K\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  gt z a\n  count (mset xs) z < count Ys z\n  antisymp gt\n\ngoal (1 subgoal):\n 1. count Ys z \\<le> count Zs z", "by (auto simp: intro: count_inI dest: antisympD)"], ["proof (state)\nthis:\n  count Ys z \\<le> count Zs z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "with z"], ["proof (chain)\npicking this:\n  gt z a\n  count (mset xs) z < count Ys z\n  count Ys z \\<le> count Zs z", "have \"\\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\""], ["proof (prove)\nusing this:\n  gt z a\n  count (mset xs) z < count Ys z\n  count Ys z \\<le> count Zs z\n\ngoal (1 subgoal):\n 1. \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z", "by auto"], ["proof (state)\nthis:\n  \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "}"], ["proof (state)\nthis:\n  count Zs a \\<le> count (mset xs) a \\<Longrightarrow>\n  \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "note count_a = this"], ["proof (state)\nthis:\n  count Zs a \\<le> count (mset xs) a \\<Longrightarrow>\n  \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "{"], ["proof (state)\nthis:\n  count Zs a \\<le> count (mset xs) a \\<Longrightarrow>\n  \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "fix y"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "assume count_y: \"count Zs y < count (mset xs) y\""], ["proof (state)\nthis:\n  count Zs y < count (mset xs) y\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "have \"\\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "proof (cases \"y = a\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y = a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. y \\<noteq> a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "case True"], ["proof (state)\nthis:\n  y = a\n\ngoal (2 subgoals):\n 1. y = a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. y \\<noteq> a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with count_y count_a"], ["proof (chain)\npicking this:\n  count Zs y < count (mset xs) y\n  count Zs a \\<le> count (mset xs) a \\<Longrightarrow>\n  \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\n  y = a", "show ?thesis"], ["proof (prove)\nusing this:\n  count Zs y < count (mset xs) y\n  count Zs a \\<le> count (mset xs) a \\<Longrightarrow>\n  \\<exists>z. gt z a \\<and> count (mset xs) z < count Zs z\n  y = a\n\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. y \\<noteq> a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<noteq> a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "case False"], ["proof (state)\nthis:\n  y \\<noteq> a\n\ngoal (1 subgoal):\n 1. y \\<noteq> a \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "proof (cases \"y \\<in># K\")"], ["proof (state)\ngoal (2 subgoals):\n 1. y \\<in># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "case True"], ["proof (state)\nthis:\n  y \\<in># K\n\ngoal (2 subgoals):\n 1. y \\<in># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with *(4)"], ["proof (chain)\npicking this:\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  y \\<in># K", "have \"gt a y\""], ["proof (prove)\nusing this:\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  y \\<in># K\n\ngoal (1 subgoal):\n 1. gt a y", "by simp"], ["proof (state)\nthis:\n  gt a y\n\ngoal (2 subgoals):\n 1. y \\<in># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "then"], ["proof (chain)\npicking this:\n  gt a y", "show ?thesis"], ["proof (prove)\nusing this:\n  gt a y\n\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "by (cases \"count Zs a \\<le> count (mset xs) a\",\n            blast dest: count_a trans[unfolded transp_def, rule_format], auto dest: count_a)"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "case False"], ["proof (state)\nthis:\n  y \\<notin># K\n\ngoal (1 subgoal):\n 1. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with \\<open>y \\<noteq> a\\<close>"], ["proof (chain)\npicking this:\n  y \\<noteq> a\n  y \\<notin># K", "have \"count Zs y = count Ys y\""], ["proof (prove)\nusing this:\n  y \\<noteq> a\n  y \\<notin># K\n\ngoal (1 subgoal):\n 1. count Zs y = count Ys y", "unfolding *(1,2)"], ["proof (prove)\nusing this:\n  y \\<noteq> a\n  y \\<notin># K\n\ngoal (1 subgoal):\n 1. count (M0 + {#a#}) y = count (M0 + K) y", "by (simp add: not_in_iff)"], ["proof (state)\nthis:\n  count Zs y = count Ys y\n\ngoal (1 subgoal):\n 1. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with count_y **"], ["proof (chain)\npicking this:\n  count Zs y < count (mset xs) y\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n  count Zs y = count Ys y", "obtain z where z: \"gt z y\" \"count (mset xs) z < count Ys z\""], ["proof (prove)\nusing this:\n  count Zs y < count (mset xs) y\n  count Ys ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y. gt y ?x \\<and> count (mset xs) y < count Ys y\n  count Zs y = count Ys y\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z y; count (mset xs) z < count Ys z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  gt z y\n  count (mset xs) z < count Ys z\n\ngoal (1 subgoal):\n 1. y \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "proof (cases \"z \\<in># K\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z \\<in># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "case True"], ["proof (state)\nthis:\n  z \\<in># K\n\ngoal (2 subgoals):\n 1. z \\<in># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with *(4)"], ["proof (chain)\npicking this:\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  z \\<in># K", "have \"gt a z\""], ["proof (prove)\nusing this:\n  ?b \\<in># K \\<Longrightarrow> gt a ?b\n  z \\<in># K\n\ngoal (1 subgoal):\n 1. gt a z", "by simp"], ["proof (state)\nthis:\n  gt a z\n\ngoal (2 subgoals):\n 1. z \\<in># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n 2. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with z(1)"], ["proof (chain)\npicking this:\n  gt z y\n  gt a z", "show ?thesis"], ["proof (prove)\nusing this:\n  gt z y\n  gt a z\n\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "by (cases \"count Zs a \\<le> count (mset xs) a\")\n              (blast dest: count_a not_le_imp_less trans[unfolded transp_def, rule_format])+"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "case False"], ["proof (state)\nthis:\n  z \\<notin># K\n\ngoal (1 subgoal):\n 1. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with \\<open>a \\<notin># K\\<close>"], ["proof (chain)\npicking this:\n  a \\<notin># K\n  z \\<notin># K", "have \"count Ys z \\<le> count Zs z\""], ["proof (prove)\nusing this:\n  a \\<notin># K\n  z \\<notin># K\n\ngoal (1 subgoal):\n 1. count Ys z \\<le> count Zs z", "unfolding *"], ["proof (prove)\nusing this:\n  a \\<notin># K\n  z \\<notin># K\n\ngoal (1 subgoal):\n 1. count (M0 + K) z \\<le> count (M0 + {#a#}) z", "by (auto simp add: not_in_iff)"], ["proof (state)\nthis:\n  count Ys z \\<le> count Zs z\n\ngoal (1 subgoal):\n 1. z \\<notin># K \\<Longrightarrow>\n    \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "with z"], ["proof (chain)\npicking this:\n  gt z y\n  count (mset xs) z < count Ys z\n  count Ys z \\<le> count Zs z", "show ?thesis"], ["proof (prove)\nusing this:\n  gt z y\n  count (mset xs) z < count Ys z\n  count Ys z \\<le> count Zs z\n\ngoal (1 subgoal):\n 1. \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x", "by auto"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>x. gt x y \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "}"], ["proof (state)\nthis:\n  count Zs ?y2 < count (mset xs) ?y2 \\<Longrightarrow>\n  \\<exists>x. gt x ?y2 \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. \\<And>y z.\n       \\<lbrakk>(mset xs, y) \\<in> (mult1 {(x, y). gt y x})\\<^sup>+;\n        (y, z) \\<in> mult1 {(x, y). gt y x};\n        mset xs \\<noteq> y \\<and>\n        (\\<forall>x.\n            count y x < count (mset xs) x \\<longrightarrow>\n            (\\<exists>ya.\n                gt ya x \\<and> count (mset xs) ya < count y ya))\\<rbrakk>\n       \\<Longrightarrow> mset xs \\<noteq> z \\<and>\n                         (\\<forall>x.\n                             count z x < count (mset xs) x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt y x \\<and>\n                                 count (mset xs) y < count z y))", "ultimately"], ["proof (chain)\npicking this:\n  mset xs \\<noteq> Zs\n  count Zs ?y2 < count (mset xs) ?y2 \\<Longrightarrow>\n  \\<exists>x. gt x ?y2 \\<and> count (mset xs) x < count Zs x", "show ?case"], ["proof (prove)\nusing this:\n  mset xs \\<noteq> Zs\n  count Zs ?y2 < count (mset xs) ?y2 \\<Longrightarrow>\n  \\<exists>x. gt x ?y2 \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs \\<and>\n    (\\<forall>x.\n        count Zs x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count Zs y))", "unfolding msetext_huet_def Let_def"], ["proof (prove)\nusing this:\n  mset xs \\<noteq> Zs\n  count Zs ?y2 < count (mset xs) ?y2 \\<Longrightarrow>\n  \\<exists>x. gt x ?y2 \\<and> count (mset xs) x < count Zs x\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> Zs \\<and>\n    (\\<forall>x.\n        count Zs x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count Zs y))", "by blast"], ["proof (state)\nthis:\n  mset xs \\<noteq> Zs \\<and>\n  (\\<forall>x.\n      count Zs x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count Zs y))\n\ngoal:\nNo subgoals!", "qed"], ["", "theorem msetext_huet_eq_dersh: \"irreflp gt \\<Longrightarrow> transp gt \\<Longrightarrow> msetext_dersh gt = msetext_huet gt\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>irreflp gt; transp gt\\<rbrakk>\n    \\<Longrightarrow> msetext_dersh gt = msetext_huet gt", "using msetext_huet_imp_dersh msetext_dersh_imp_mult mult_imp_msetext_huet"], ["proof (prove)\nusing this:\n  msetext_huet ?gt ?ys ?xs \\<Longrightarrow> msetext_dersh ?gt ?ys ?xs\n  msetext_dersh ?gt ?ys ?xs \\<Longrightarrow>\n  (mset ?xs, mset ?ys) \\<in> mult {(x, y). ?gt y x}\n  \\<lbrakk>irreflp ?gt; transp ?gt;\n   (mset ?xs, mset ?ys) \\<in> mult {(x, y). ?gt y x}\\<rbrakk>\n  \\<Longrightarrow> msetext_huet ?gt ?ys ?xs\n\ngoal (1 subgoal):\n 1. \\<lbrakk>irreflp gt; transp gt\\<rbrakk>\n    \\<Longrightarrow> msetext_dersh gt = msetext_huet gt", "by fast"], ["", "lemma msetext_huet_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> msetext_huet gt ys xs \\<Longrightarrow> msetext_huet gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     msetext_huet gt ys xs\\<rbrakk>\n    \\<Longrightarrow> msetext_huet gt' ys xs", "unfolding msetext_huet_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     let N = mset ys; M = mset xs\n     in M \\<noteq> N \\<and>\n        (\\<forall>x.\n            count N x < count M x \\<longrightarrow>\n            (\\<exists>y. gt y x \\<and> count M y < count N y))\\<rbrakk>\n    \\<Longrightarrow> let N = mset ys; M = mset xs\n                      in M \\<noteq> N \\<and>\n                         (\\<forall>x.\n                             count N x < count M x \\<longrightarrow>\n                             (\\<exists>y.\n                                 gt' y x \\<and> count M y < count N y))", "by (metis less_le_trans mem_Collect_eq not_le not_less0 set_mset_mset[unfolded set_mset_def])"], ["", "lemma msetext_huet_map:\n  assumes\n    fin: \"finite A\" and\n    ys_a: \"ys \\<in> lists A\" and xs_a: \"xs \\<in> lists A\" and\n    irrefl_f: \"\\<forall>x \\<in> A. \\<not> gt (f x) (f x)\" and\n    trans_f: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt (f z) (f y) \\<longrightarrow> gt (f y) (f x) \\<longrightarrow> gt (f z) (f x)\" and\n    compat_f: \"\\<forall>y \\<in> A. \\<forall>x \\<in> A. gt y x \\<longrightarrow> gt (f y) (f x)\" and\n    ys_gt_xs: \"msetext_huet gt ys xs\"\n  shows \"msetext_huet gt (map f ys) (map f xs)\" (is \"msetext_huet _ ?fys ?fxs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt (map f ys) (map f xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msetext_huet gt (map f ys) (map f xs)", "have irrefl: \"\\<forall>x \\<in> A. \\<not> gt x x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. \\<not> gt x x", "using irrefl_f compat_f"], ["proof (prove)\nusing this:\n  \\<forall>x\\<in>A. \\<not> gt (f x) (f x)\n  \\<forall>y\\<in>A.\n     \\<forall>x\\<in>A. gt y x \\<longrightarrow> gt (f y) (f x)\n\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>A. \\<not> gt x x", "by blast"], ["proof (state)\nthis:\n  \\<forall>x\\<in>A. \\<not> gt x x\n\ngoal (1 subgoal):\n 1. msetext_huet gt (map f ys) (map f xs)", "have\n    ms_xs_ne_ys: \"mset xs \\<noteq> mset ys\" and\n    ex_gt: \"\\<forall>x. count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys &&&\n    \\<forall>x.\n       count (mset ys) x < count (mset xs) x \\<longrightarrow>\n       (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys &&&\n    \\<forall>x.\n       count (mset ys) x < count (mset xs) x \\<longrightarrow>\n       (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)", "by blast+"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset ys\n  \\<forall>x.\n     count (mset ys) x < count (mset xs) x \\<longrightarrow>\n     (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)\n\ngoal (1 subgoal):\n 1. msetext_huet gt (map f ys) (map f xs)", "have ex_y: \"\\<exists>y. gt (f y) (f x) \\<and> count (mset ?fxs) (f y) < count (mset (map f ys)) (f y)\"\n    if cnt_x: \"count (mset xs) x > count (mset ys) x\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have x_in_a: \"x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A", "using cnt_x xs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n  xs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "obtain y where y_gt_x: \"gt y x\" and cnt_y: \"count (mset ys) y > count (mset xs) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>gt y x; count (mset xs) y < count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cnt_x ex_gt"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n  \\<forall>x.\n     count (mset ys) x < count (mset xs) x \\<longrightarrow>\n     (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>gt y x; count (mset xs) y < count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt y x\n  count (mset xs) y < count (mset ys) y\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have y_in_a: \"y \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> A", "using cnt_y ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) y < count (mset ys) y\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have wf_gt_f: \"wfP (\\<lambda>y x. y \\<in> A \\<and> x \\<in> A \\<and> gt (f y) (f x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>y x. y \\<in> A \\<and> x \\<in> A \\<and> gt (f y) (f x))", "by (rule finite_irreflp_transp_imp_wfp)\n        (auto elim: trans_f[rule_format] simp: fin irrefl_f Collect_case_prod_Sigma irreflp_def\n           transp_def)"], ["proof (state)\nthis:\n  wfP (\\<lambda>y x. y \\<in> A \\<and> x \\<in> A \\<and> gt (f y) (f x))\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "obtain yy where\n      fyy_gt_fx: \"gt (f yy) (f x)\" and\n      cnt_yy: \"count (mset ys) yy > count (mset xs) yy\" and\n      max_yy: \"\\<forall>y \\<in> A. yy \\<in> A \\<longrightarrow> gt (f y) (f yy) \\<longrightarrow> gt (f y) (f x) \\<longrightarrow>\n        count (mset xs) y \\<ge> count (mset ys) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        \\<lbrakk>gt (f yy) (f x); count (mset xs) yy < count (mset ys) yy;\n         \\<forall>y\\<in>A.\n            yy \\<in> A \\<longrightarrow>\n            gt (f y) (f yy) \\<longrightarrow>\n            gt (f y) (f x) \\<longrightarrow>\n            count (mset ys) y \\<le> count (mset xs) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wfP_eq_minimal[THEN iffD1, OF wf_gt_f, rule_format,\n          of y \"{y. gt (f y) (f x) \\<and> count (mset xs) y < count (mset ys) y}\", simplified]\n        y_gt_x cnt_y"], ["proof (prove)\nusing this:\n  gt (f y) (f x) \\<and>\n  count (mset xs) y < count (mset ys) y \\<Longrightarrow>\n  \\<exists>z.\n     gt (f z) (f x) \\<and>\n     count (mset xs) z < count (mset ys) z \\<and>\n     (\\<forall>y.\n         y \\<in> A \\<and> z \\<in> A \\<and> gt (f y) (f z) \\<longrightarrow>\n         gt (f y) (f x) \\<longrightarrow>\n         \\<not> count (mset xs) y < count (mset ys) y)\n  gt y x\n  count (mset xs) y < count (mset ys) y\n\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        \\<lbrakk>gt (f yy) (f x); count (mset xs) yy < count (mset ys) yy;\n         \\<forall>y\\<in>A.\n            yy \\<in> A \\<longrightarrow>\n            gt (f y) (f yy) \\<longrightarrow>\n            gt (f y) (f x) \\<longrightarrow>\n            count (mset ys) y \\<le> count (mset xs) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis compat_f not_less x_in_a y_in_a)"], ["proof (state)\nthis:\n  gt (f yy) (f x)\n  count (mset xs) yy < count (mset ys) yy\n  \\<forall>y\\<in>A.\n     yy \\<in> A \\<longrightarrow>\n     gt (f y) (f yy) \\<longrightarrow>\n     gt (f y) (f x) \\<longrightarrow>\n     count (mset ys) y \\<le> count (mset xs) y\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have yy_in_a: \"yy \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yy \\<in> A", "using cnt_yy ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) yy < count (mset ys) yy\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. yy \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  yy \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "{"], ["proof (state)\nthis:\n  yy \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "assume \"count (mset ?fxs) (f yy) \\<ge> count (mset ?fys) (f yy)\""], ["proof (state)\nthis:\n  count (mset (map f ys)) (f yy) \\<le> count (mset (map f xs)) (f yy)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "then"], ["proof (chain)\npicking this:\n  count (mset (map f ys)) (f yy) \\<le> count (mset (map f xs)) (f yy)", "obtain u where fu_eq_fyy: \"f u = f yy\" and cnt_u: \"count (mset xs) u > count (mset ys) u\""], ["proof (prove)\nusing this:\n  count (mset (map f ys)) (f yy) \\<le> count (mset (map f xs)) (f yy)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>f u = f yy; count (mset ys) u < count (mset xs) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using count_image_mset_le_imp_lt cnt_yy mset_map"], ["proof (prove)\nusing this:\n  count (mset (map f ys)) (f yy) \\<le> count (mset (map f xs)) (f yy)\n  \\<lbrakk>count (image_mset ?f ?M) (?f ?a)\n           \\<le> count (image_mset ?f ?N) (?f ?a);\n   count ?N ?a < count ?M ?a\\<rbrakk>\n  \\<Longrightarrow> \\<exists>b. ?f b = ?f ?a \\<and> count ?M b < count ?N b\n  count (mset xs) yy < count (mset ys) yy\n  mset (map ?f ?xs) = image_mset ?f (mset ?xs)\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>f u = f yy; count (mset ys) u < count (mset xs) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags))"], ["proof (state)\nthis:\n  f u = f yy\n  count (mset ys) u < count (mset xs) u\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have u_in_a: \"u \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> A", "using cnt_u xs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) u < count (mset xs) u\n  xs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. u \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  u \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "obtain v where v_gt_u: \"gt v u\" and cnt_v: \"count (mset ys) v > count (mset xs) v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>gt v u; count (mset xs) v < count (mset ys) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cnt_u ex_gt"], ["proof (prove)\nusing this:\n  count (mset ys) u < count (mset xs) u\n  \\<forall>x.\n     count (mset ys) x < count (mset xs) x \\<longrightarrow>\n     (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y)\n\ngoal (1 subgoal):\n 1. (\\<And>v.\n        \\<lbrakk>gt v u; count (mset xs) v < count (mset ys) v\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt v u\n  count (mset xs) v < count (mset ys) v\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have v_in_a: \"v \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. v \\<in> A", "using cnt_v ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) v < count (mset ys) v\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. v \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  v \\<in> A\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have fv_gt_fu: \"gt (f v) (f u)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt (f v) (f u)", "using v_gt_u compat_f v_in_a u_in_a"], ["proof (prove)\nusing this:\n  gt v u\n  \\<forall>y\\<in>A.\n     \\<forall>x\\<in>A. gt y x \\<longrightarrow> gt (f y) (f x)\n  v \\<in> A\n  u \\<in> A\n\ngoal (1 subgoal):\n 1. gt (f v) (f u)", "by blast"], ["proof (state)\nthis:\n  gt (f v) (f u)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "hence fv_gt_fyy: \"gt (f v) (f yy)\""], ["proof (prove)\nusing this:\n  gt (f v) (f u)\n\ngoal (1 subgoal):\n 1. gt (f v) (f yy)", "by (simp only: fu_eq_fyy)"], ["proof (state)\nthis:\n  gt (f v) (f yy)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "have \"gt (f v) (f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt (f v) (f x)", "using fv_gt_fyy fyy_gt_fx v_in_a yy_in_a x_in_a trans_f"], ["proof (prove)\nusing this:\n  gt (f v) (f yy)\n  gt (f yy) (f x)\n  v \\<in> A\n  yy \\<in> A\n  x \\<in> A\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt (f z) (f y) \\<longrightarrow>\n           gt (f y) (f x) \\<longrightarrow> gt (f z) (f x)\n\ngoal (1 subgoal):\n 1. gt (f v) (f x)", "by blast"], ["proof (state)\nthis:\n  gt (f v) (f x)\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "hence False"], ["proof (prove)\nusing this:\n  gt (f v) (f x)\n\ngoal (1 subgoal):\n 1. False", "using max_yy[rule_format, of v] fv_gt_fyy v_in_a yy_in_a cnt_v"], ["proof (prove)\nusing this:\n  gt (f v) (f x)\n  \\<lbrakk>v \\<in> A; yy \\<in> A; gt (f v) (f yy); gt (f v) (f x)\\<rbrakk>\n  \\<Longrightarrow> count (mset ys) v \\<le> count (mset xs) v\n  gt (f v) (f yy)\n  v \\<in> A\n  yy \\<in> A\n  count (mset xs) v < count (mset ys) v\n\ngoal (1 subgoal):\n 1. False", "by linarith"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "}"], ["proof (state)\nthis:\n  count (mset (map f ys)) (f yy)\n  \\<le> count (mset (map f xs)) (f yy) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset (map f ys)) (f yy)\n  \\<le> count (mset (map f xs)) (f yy) \\<Longrightarrow>\n  False\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "using fyy_gt_fx leI"], ["proof (prove)\nusing this:\n  count (mset (map f ys)) (f yy)\n  \\<le> count (mset (map f xs)) (f yy) \\<Longrightarrow>\n  False\n  gt (f yy) (f x)\n  \\<not> ?x < ?y \\<Longrightarrow> ?y \\<le> ?x\n\ngoal (1 subgoal):\n 1. \\<exists>y.\n       gt (f y) (f x) \\<and>\n       count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)", "by blast"], ["proof (state)\nthis:\n  \\<exists>y.\n     gt (f y) (f x) \\<and>\n     count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  count (mset ys) ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y.\n     gt (f y) (f ?x) \\<and>\n     count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)\n\ngoal (1 subgoal):\n 1. msetext_huet gt (map f ys) (map f xs)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt (map f ys) (map f xs)", "unfolding msetext_huet_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (map f xs) \\<noteq> mset (map f ys) \\<and>\n    (\\<forall>x.\n        count (mset (map f ys)) x\n        < count (mset (map f xs)) x \\<longrightarrow>\n        (\\<exists>y.\n            gt y x \\<and>\n            count (mset (map f xs)) y < count (mset (map f ys)) y))", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. mset (map f xs) \\<noteq> mset (map f ys)\n 2. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. mset (map f xs) \\<noteq> mset (map f ys)\n 2. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "assume len_eq: \"length xs = length ys\""], ["proof (state)\nthis:\n  length xs = length ys\n\ngoal (2 subgoals):\n 1. mset (map f xs) \\<noteq> mset (map f ys)\n 2. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "obtain x where cnt_x: \"count (mset xs) x > count (mset ys) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using len_eq ms_xs_ne_ys"], ["proof (prove)\nusing this:\n  length xs = length ys\n  mset xs \\<noteq> mset ys\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count (mset ys) x < count (mset xs) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis size_eq_ex_count_lt size_mset)"], ["proof (state)\nthis:\n  count (mset ys) x < count (mset xs) x\n\ngoal (2 subgoals):\n 1. mset (map f xs) \\<noteq> mset (map f ys)\n 2. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "hence \"mset ?fxs \\<noteq> mset ?fys\""], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. mset (map f xs) \\<noteq> mset (map f ys)", "using ex_y"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n  count (mset ys) ?x < count (mset xs) ?x \\<Longrightarrow>\n  \\<exists>y.\n     gt (f y) (f ?x) \\<and>\n     count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)\n\ngoal (1 subgoal):\n 1. mset (map f xs) \\<noteq> mset (map f ys)", "by fastforce"], ["proof (state)\nthis:\n  mset (map f xs) \\<noteq> mset (map f ys)\n\ngoal (2 subgoals):\n 1. mset (map f xs) \\<noteq> mset (map f ys)\n 2. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "}"], ["proof (state)\nthis:\n  length xs = length ys \\<Longrightarrow>\n  mset (map f xs) \\<noteq> mset (map f ys)\n\ngoal (2 subgoals):\n 1. mset (map f xs) \\<noteq> mset (map f ys)\n 2. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "thus \"mset ?fxs \\<noteq> mset (map f ys)\""], ["proof (prove)\nusing this:\n  length xs = length ys \\<Longrightarrow>\n  mset (map f xs) \\<noteq> mset (map f ys)\n\ngoal (1 subgoal):\n 1. mset (map f xs) \\<noteq> mset (map f ys)", "by (metis length_map size_mset)"], ["proof (state)\nthis:\n  mset (map f xs) \\<noteq> mset (map f ys)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "fix fx"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "assume cnt_fx: \"count (mset ?fxs) fx > count (mset ?fys) fx\""], ["proof (state)\nthis:\n  count (mset (map f ys)) fx < count (mset (map f xs)) fx\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "then"], ["proof (chain)\npicking this:\n  count (mset (map f ys)) fx < count (mset (map f xs)) fx", "obtain x where fx: \"fx = f x\" and cnt_x: \"count (mset xs) x > count (mset ys) x\""], ["proof (prove)\nusing this:\n  count (mset (map f ys)) fx < count (mset (map f xs)) fx\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>fx = f x; count (mset ys) x < count (mset xs) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using count_image_mset_lt_imp_lt mset_map"], ["proof (prove)\nusing this:\n  count (mset (map f ys)) fx < count (mset (map f xs)) fx\n  count (image_mset ?f ?M) ?b\n  < count (image_mset ?f ?N) ?b \\<Longrightarrow>\n  \\<exists>x. ?f x = ?b \\<and> count ?M x < count ?N x\n  mset (map ?f ?xs) = image_mset ?f (mset ?xs)\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>fx = f x; count (mset ys) x < count (mset xs) x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags))"], ["proof (state)\nthis:\n  fx = f x\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset (map f ys)) x\n       < count (mset (map f xs)) x \\<Longrightarrow>\n       \\<exists>y.\n          gt y x \\<and>\n          count (mset (map f xs)) y < count (mset (map f ys)) y", "thus \"\\<exists>fy. gt fy fx \\<and> count (mset ?fxs) fy < count (mset (map f ys)) fy\""], ["proof (prove)\nusing this:\n  fx = f x\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<exists>fy.\n       gt fy fx \\<and>\n       count (mset (map f xs)) fy < count (mset (map f ys)) fy", "using ex_y[OF cnt_x]"], ["proof (prove)\nusing this:\n  fx = f x\n  count (mset ys) x < count (mset xs) x\n  \\<exists>y.\n     gt (f y) (f x) \\<and>\n     count (mset (map f xs)) (f y) < count (mset (map f ys)) (f y)\n\ngoal (1 subgoal):\n 1. \\<exists>fy.\n       gt fy fx \\<and>\n       count (mset (map f xs)) fy < count (mset (map f ys)) fy", "by blast"], ["proof (state)\nthis:\n  \\<exists>fy.\n     gt fy fx \\<and> count (mset (map f xs)) fy < count (mset (map f ys)) fy\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msetext_huet gt (map f ys) (map f xs)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_huet_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> msetext_huet gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> gt x x \\<Longrightarrow>\n    \\<not> msetext_huet gt xs xs", "unfolding msetext_huet_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> gt x x \\<Longrightarrow>\n    \\<not> (let N = mset xs; M = mset xs\n            in M \\<noteq> N \\<and>\n               (\\<forall>x.\n                   count N x < count M x \\<longrightarrow>\n                   (\\<exists>y. gt y x \\<and> count M y < count N y)))", "by simp"], ["", "lemma msetext_huet_trans_from_irrefl:\n  assumes\n    fin: \"finite A\" and\n    zs_a: \"zs \\<in> lists A\" and ys_a: \"ys \\<in> lists A\" and xs_a: \"xs \\<in> lists A\" and\n    irrefl: \"\\<forall>x \\<in> A. \\<not> gt x x\" and\n    trans: \"\\<forall>z \\<in> A. \\<forall>y \\<in> A. \\<forall>x \\<in> A. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    zs_gt_ys: \"msetext_huet gt zs ys\" and\n    ys_gt_xs: \"msetext_huet gt ys xs\"\n  shows \"msetext_huet gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt zs xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. msetext_huet gt zs xs", "have wf_gt: \"wfP (\\<lambda>y x. y \\<in> A \\<and> x \\<in> A \\<and> gt y x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>y x. y \\<in> A \\<and> x \\<in> A \\<and> gt y x)", "by (rule finite_irreflp_transp_imp_wfp)\n      (auto elim: trans[rule_format] simp: fin irrefl Collect_case_prod_Sigma irreflp_def\n         transp_def)"], ["proof (state)\nthis:\n  wfP (\\<lambda>y x. y \\<in> A \\<and> x \\<in> A \\<and> gt y x)\n\ngoal (1 subgoal):\n 1. msetext_huet gt zs xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt zs xs", "unfolding msetext_huet_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset zs \\<and>\n    (\\<forall>x.\n        count (mset zs) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y))", "proof (intro conjI allI impI)"], ["proof (state)\ngoal (2 subgoals):\n 1. mset xs \\<noteq> mset zs\n 2. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "obtain x where cnt_x: \"count (mset zs) x > count (mset ys) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count (mset ys) x < count (mset zs) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using msetext_huet_imp_count_gt[OF zs_gt_ys]"], ["proof (prove)\nusing this:\n  \\<exists>x. count (mset ys) x < count (mset zs) x\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        count (mset ys) x < count (mset zs) x \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  count (mset ys) x < count (mset zs) x\n\ngoal (2 subgoals):\n 1. mset xs \\<noteq> mset zs\n 2. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have x_in_a: \"x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A", "using cnt_x zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset zs) x\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (2 subgoals):\n 1. mset xs \\<noteq> mset zs\n 2. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "obtain xx where\n      cnt_xx: \"count (mset zs) xx > count (mset ys) xx\" and\n      max_xx: \"\\<forall>y \\<in> A. xx \\<in> A \\<longrightarrow> gt y xx \\<longrightarrow> count (mset ys) y \\<ge> count (mset zs) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>xx.\n        \\<lbrakk>count (mset ys) xx < count (mset zs) xx;\n         \\<forall>y\\<in>A.\n            xx \\<in> A \\<longrightarrow>\n            gt y xx \\<longrightarrow>\n            count (mset zs) y \\<le> count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wfP_eq_minimal[THEN iffD1, OF wf_gt, rule_format,\n          of x \"{y. count (mset ys) y < count (mset zs) y}\", simplified]\n        cnt_x"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset zs) x \\<Longrightarrow>\n  \\<exists>z.\n     count (mset ys) z < count (mset zs) z \\<and>\n     (\\<forall>y.\n         y \\<in> A \\<and> z \\<in> A \\<and> gt y z \\<longrightarrow>\n         \\<not> count (mset ys) y < count (mset zs) y)\n  count (mset ys) x < count (mset zs) x\n\ngoal (1 subgoal):\n 1. (\\<And>xx.\n        \\<lbrakk>count (mset ys) xx < count (mset zs) xx;\n         \\<forall>y\\<in>A.\n            xx \\<in> A \\<longrightarrow>\n            gt y xx \\<longrightarrow>\n            count (mset zs) y \\<le> count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  count (mset ys) xx < count (mset zs) xx\n  \\<forall>y\\<in>A.\n     xx \\<in> A \\<longrightarrow>\n     gt y xx \\<longrightarrow> count (mset zs) y \\<le> count (mset ys) y\n\ngoal (2 subgoals):\n 1. mset xs \\<noteq> mset zs\n 2. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have xx_in_a: \"xx \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. xx \\<in> A", "using cnt_xx zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) xx < count (mset zs) xx\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. xx \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  xx \\<in> A\n\ngoal (2 subgoals):\n 1. mset xs \\<noteq> mset zs\n 2. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "show \"mset xs \\<noteq> mset zs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset zs", "proof (cases \"count (mset ys) xx \\<ge> count (mset xs) xx\")"], ["proof (state)\ngoal (2 subgoals):\n 1. count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs\n 2. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "case True"], ["proof (state)\nthis:\n  count (mset xs) xx \\<le> count (mset ys) xx\n\ngoal (2 subgoals):\n 1. count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs\n 2. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) xx \\<le> count (mset ys) xx\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset zs", "using cnt_xx"], ["proof (prove)\nusing this:\n  count (mset xs) xx \\<le> count (mset ys) xx\n  count (mset ys) xx < count (mset zs) xx\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset zs", "by fastforce"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset zs\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "case False"], ["proof (state)\nthis:\n  \\<not> count (mset xs) xx \\<le> count (mset ys) xx\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "hence \"count (mset ys) xx < count (mset xs) xx\""], ["proof (prove)\nusing this:\n  \\<not> count (mset xs) xx \\<le> count (mset ys) xx\n\ngoal (1 subgoal):\n 1. count (mset ys) xx < count (mset xs) xx", "by fastforce"], ["proof (state)\nthis:\n  count (mset ys) xx < count (mset xs) xx\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "then"], ["proof (chain)\npicking this:\n  count (mset ys) xx < count (mset xs) xx", "obtain z where z_gt_xx: \"gt z xx\" and cnt_z: \"count (mset ys) z > count (mset xs) z\""], ["proof (prove)\nusing this:\n  count (mset ys) xx < count (mset xs) xx\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z xx; count (mset xs) z < count (mset ys) z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset ys) xx < count (mset xs) xx\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z xx; count (mset xs) z < count (mset ys) z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt z xx\n  count (mset xs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "have z_in_a: \"z \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> A", "using cnt_z ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) z < count (mset ys) z\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. z \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "have \"count (mset zs) z \\<le> count (mset ys) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset zs) z \\<le> count (mset ys) z", "using max_xx[rule_format, of z] z_in_a xx_in_a z_gt_xx"], ["proof (prove)\nusing this:\n  \\<lbrakk>z \\<in> A; xx \\<in> A; gt z xx\\<rbrakk>\n  \\<Longrightarrow> count (mset zs) z \\<le> count (mset ys) z\n  z \\<in> A\n  xx \\<in> A\n  gt z xx\n\ngoal (1 subgoal):\n 1. count (mset zs) z \\<le> count (mset ys) z", "by blast"], ["proof (state)\nthis:\n  count (mset zs) z \\<le> count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "moreover"], ["proof (state)\nthis:\n  count (mset zs) z \\<le> count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "{"], ["proof (state)\nthis:\n  count (mset zs) z \\<le> count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "assume \"count (mset zs) z < count (mset ys) z\""], ["proof (state)\nthis:\n  count (mset zs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "then"], ["proof (chain)\npicking this:\n  count (mset zs) z < count (mset ys) z", "obtain u where u_gt_z: \"gt u z\" and cnt_u: \"count (mset ys) u < count (mset zs) u\""], ["proof (prove)\nusing this:\n  count (mset zs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>gt u z; count (mset ys) u < count (mset zs) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zs_gt_ys[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset zs) z < count (mset ys) z\n  mset ys \\<noteq> mset zs \\<and>\n  (\\<forall>x.\n      count (mset zs) x < count (mset ys) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset ys) y < count (mset zs) y))\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>gt u z; count (mset ys) u < count (mset zs) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt u z\n  count (mset ys) u < count (mset zs) u\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "have u_in_a: \"u \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> A", "using cnt_u zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) u < count (mset zs) u\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. u \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  u \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "have u_gt_xx: \"gt u xx\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt u xx", "using trans u_in_a z_in_a xx_in_a u_gt_z z_gt_xx"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  u \\<in> A\n  z \\<in> A\n  xx \\<in> A\n  gt u z\n  gt z xx\n\ngoal (1 subgoal):\n 1. gt u xx", "by blast"], ["proof (state)\nthis:\n  gt u xx\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "have False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using max_xx[rule_format, of u] u_in_a xx_in_a u_gt_xx cnt_u"], ["proof (prove)\nusing this:\n  \\<lbrakk>u \\<in> A; xx \\<in> A; gt u xx\\<rbrakk>\n  \\<Longrightarrow> count (mset zs) u \\<le> count (mset ys) u\n  u \\<in> A\n  xx \\<in> A\n  gt u xx\n  count (mset ys) u < count (mset zs) u\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "}"], ["proof (state)\nthis:\n  count (mset zs) z < count (mset ys) z \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "ultimately"], ["proof (chain)\npicking this:\n  count (mset zs) z \\<le> count (mset ys) z\n  count (mset zs) z < count (mset ys) z \\<Longrightarrow> False", "have \"count (mset zs) z = count (mset ys) z\""], ["proof (prove)\nusing this:\n  count (mset zs) z \\<le> count (mset ys) z\n  count (mset zs) z < count (mset ys) z \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. count (mset zs) z = count (mset ys) z", "by fastforce"], ["proof (state)\nthis:\n  count (mset zs) z = count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) xx \\<le> count (mset ys) xx \\<Longrightarrow>\n    mset xs \\<noteq> mset zs", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset zs) z = count (mset ys) z\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset zs", "using cnt_z"], ["proof (prove)\nusing this:\n  count (mset zs) z = count (mset ys) z\n  count (mset xs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset zs", "by fastforce"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset zs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset zs\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "assume cnt_x_xz: \"count (mset zs) x < count (mset xs) x\""], ["proof (state)\nthis:\n  count (mset zs) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have x_in_a: \"x \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A", "using cnt_x_xz xs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset zs) x < count (mset xs) x\n  xs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "let ?case = \"\\<exists>y. gt y x \\<and> count (mset zs) y > count (mset xs) y\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "assume cnt_x: \"count (mset zs) x < count (mset ys) x\""], ["proof (state)\nthis:\n  count (mset zs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "then"], ["proof (chain)\npicking this:\n  count (mset zs) x < count (mset ys) x", "obtain y where y_gt_x: \"gt y x\" and cnt_y: \"count (mset zs) y > count (mset ys) y\""], ["proof (prove)\nusing this:\n  count (mset zs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>gt y x; count (mset ys) y < count (mset zs) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zs_gt_ys[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset zs) x < count (mset ys) x\n  mset ys \\<noteq> mset zs \\<and>\n  (\\<forall>x.\n      count (mset zs) x < count (mset ys) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset ys) y < count (mset zs) y))\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>gt y x; count (mset ys) y < count (mset zs) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt y x\n  count (mset ys) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have y_in_a: \"y \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> A", "using cnt_y zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) y < count (mset zs) y\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "obtain yy where\n        yy_gt_x: \"gt yy x\" and\n        cnt_yy: \"count (mset zs) yy > count (mset ys) yy\" and\n        max_yy: \"\\<forall>y \\<in> A. yy \\<in> A \\<longrightarrow> gt y yy \\<longrightarrow> gt y x \\<longrightarrow> count (mset ys) y \\<ge> count (mset zs) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        \\<lbrakk>gt yy x; count (mset ys) yy < count (mset zs) yy;\n         \\<forall>y\\<in>A.\n            yy \\<in> A \\<longrightarrow>\n            gt y yy \\<longrightarrow>\n            gt y x \\<longrightarrow>\n            count (mset zs) y \\<le> count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wfP_eq_minimal[THEN iffD1, OF wf_gt, rule_format,\n            of y \"{y. gt y x \\<and> count (mset ys) y < count (mset zs) y}\", simplified]\n          y_gt_x cnt_y"], ["proof (prove)\nusing this:\n  gt y x \\<and> count (mset ys) y < count (mset zs) y \\<Longrightarrow>\n  \\<exists>z.\n     gt z x \\<and>\n     count (mset ys) z < count (mset zs) z \\<and>\n     (\\<forall>y.\n         y \\<in> A \\<and> z \\<in> A \\<and> gt y z \\<longrightarrow>\n         gt y x \\<longrightarrow>\n         \\<not> count (mset ys) y < count (mset zs) y)\n  gt y x\n  count (mset ys) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        \\<lbrakk>gt yy x; count (mset ys) yy < count (mset zs) yy;\n         \\<forall>y\\<in>A.\n            yy \\<in> A \\<longrightarrow>\n            gt y yy \\<longrightarrow>\n            gt y x \\<longrightarrow>\n            count (mset zs) y \\<le> count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  gt yy x\n  count (mset ys) yy < count (mset zs) yy\n  \\<forall>y\\<in>A.\n     yy \\<in> A \\<longrightarrow>\n     gt y yy \\<longrightarrow>\n     gt y x \\<longrightarrow> count (mset zs) y \\<le> count (mset ys) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have yy_in_a: \"yy \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yy \\<in> A", "using cnt_yy zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) yy < count (mset zs) yy\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. yy \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  yy \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "proof (cases \"count (mset ys) yy \\<ge> count (mset xs) yy\")"], ["proof (state)\ngoal (2 subgoals):\n 1. count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n 2. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "case True"], ["proof (state)\nthis:\n  count (mset xs) yy \\<le> count (mset ys) yy\n\ngoal (2 subgoals):\n 1. count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n 2. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) yy \\<le> count (mset ys) yy\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "using yy_gt_x cnt_yy"], ["proof (prove)\nusing this:\n  count (mset xs) yy \\<le> count (mset ys) yy\n  gt yy x\n  count (mset ys) yy < count (mset zs) yy\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "case False"], ["proof (state)\nthis:\n  \\<not> count (mset xs) yy \\<le> count (mset ys) yy\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "hence \"count (mset ys) yy < count (mset xs) yy\""], ["proof (prove)\nusing this:\n  \\<not> count (mset xs) yy \\<le> count (mset ys) yy\n\ngoal (1 subgoal):\n 1. count (mset ys) yy < count (mset xs) yy", "by fastforce"], ["proof (state)\nthis:\n  count (mset ys) yy < count (mset xs) yy\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "then"], ["proof (chain)\npicking this:\n  count (mset ys) yy < count (mset xs) yy", "obtain z where z_gt_yy: \"gt z yy\" and cnt_z: \"count (mset ys) z > count (mset xs) z\""], ["proof (prove)\nusing this:\n  count (mset ys) yy < count (mset xs) yy\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z yy; count (mset xs) z < count (mset ys) z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset ys) yy < count (mset xs) yy\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z yy; count (mset xs) z < count (mset ys) z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt z yy\n  count (mset xs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have z_in_a: \"z \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> A", "using cnt_z ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) z < count (mset ys) z\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. z \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have z_gt_x: \"gt z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt z x", "using trans z_in_a yy_in_a x_in_a z_gt_yy yy_gt_x"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  z \\<in> A\n  yy \\<in> A\n  x \\<in> A\n  gt z yy\n  gt yy x\n\ngoal (1 subgoal):\n 1. gt z x", "by blast"], ["proof (state)\nthis:\n  gt z x\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have \"count (mset zs) z \\<le> count (mset ys) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset zs) z \\<le> count (mset ys) z", "using max_yy[rule_format, of z] z_in_a yy_in_a z_gt_yy z_gt_x"], ["proof (prove)\nusing this:\n  \\<lbrakk>z \\<in> A; yy \\<in> A; gt z yy; gt z x\\<rbrakk>\n  \\<Longrightarrow> count (mset zs) z \\<le> count (mset ys) z\n  z \\<in> A\n  yy \\<in> A\n  gt z yy\n  gt z x\n\ngoal (1 subgoal):\n 1. count (mset zs) z \\<le> count (mset ys) z", "by blast"], ["proof (state)\nthis:\n  count (mset zs) z \\<le> count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "moreover"], ["proof (state)\nthis:\n  count (mset zs) z \\<le> count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "{"], ["proof (state)\nthis:\n  count (mset zs) z \\<le> count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "assume \"count (mset zs) z < count (mset ys) z\""], ["proof (state)\nthis:\n  count (mset zs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "then"], ["proof (chain)\npicking this:\n  count (mset zs) z < count (mset ys) z", "obtain u where u_gt_z: \"gt u z\" and cnt_u: \"count (mset ys) u < count (mset zs) u\""], ["proof (prove)\nusing this:\n  count (mset zs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>gt u z; count (mset ys) u < count (mset zs) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zs_gt_ys[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset zs) z < count (mset ys) z\n  mset ys \\<noteq> mset zs \\<and>\n  (\\<forall>x.\n      count (mset zs) x < count (mset ys) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset ys) y < count (mset zs) y))\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>gt u z; count (mset ys) u < count (mset zs) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt u z\n  count (mset ys) u < count (mset zs) u\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have u_in_a: \"u \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> A", "using cnt_u zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) u < count (mset zs) u\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. u \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  u \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have u_gt_yy: \"gt u yy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt u yy", "using trans u_in_a z_in_a yy_in_a u_gt_z z_gt_yy"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  u \\<in> A\n  z \\<in> A\n  yy \\<in> A\n  gt u z\n  gt z yy\n\ngoal (1 subgoal):\n 1. gt u yy", "by blast"], ["proof (state)\nthis:\n  gt u yy\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have u_gt_x: \"gt u x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt u x", "using trans u_in_a z_in_a x_in_a u_gt_z z_gt_x"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  u \\<in> A\n  z \\<in> A\n  x \\<in> A\n  gt u z\n  gt z x\n\ngoal (1 subgoal):\n 1. gt u x", "by blast"], ["proof (state)\nthis:\n  gt u x\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using max_yy[rule_format, of u] u_in_a yy_in_a u_gt_yy u_gt_x cnt_u"], ["proof (prove)\nusing this:\n  \\<lbrakk>u \\<in> A; yy \\<in> A; gt u yy; gt u x\\<rbrakk>\n  \\<Longrightarrow> count (mset zs) u \\<le> count (mset ys) u\n  u \\<in> A\n  yy \\<in> A\n  gt u yy\n  gt u x\n  count (mset ys) u < count (mset zs) u\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "}"], ["proof (state)\nthis:\n  count (mset zs) z < count (mset ys) z \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "ultimately"], ["proof (chain)\npicking this:\n  count (mset zs) z \\<le> count (mset ys) z\n  count (mset zs) z < count (mset ys) z \\<Longrightarrow> False", "have \"count (mset zs) z = count (mset ys) z\""], ["proof (prove)\nusing this:\n  count (mset zs) z \\<le> count (mset ys) z\n  count (mset zs) z < count (mset ys) z \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. count (mset zs) z = count (mset ys) z", "by fastforce"], ["proof (state)\nthis:\n  count (mset zs) z = count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset xs) yy \\<le> count (mset ys) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset zs) z = count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "using z_gt_x cnt_z"], ["proof (prove)\nusing this:\n  count (mset zs) z = count (mset ys) z\n  gt z x\n  count (mset xs) z < count (mset ys) z\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "}"], ["proof (state)\nthis:\n  count (mset zs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "moreover"], ["proof (state)\nthis:\n  count (mset zs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "{"], ["proof (state)\nthis:\n  count (mset zs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "assume \"count (mset zs) x \\<ge> count (mset ys) x\""], ["proof (state)\nthis:\n  count (mset ys) x \\<le> count (mset zs) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "hence \"count (mset ys) x < count (mset xs) x\""], ["proof (prove)\nusing this:\n  count (mset ys) x \\<le> count (mset zs) x\n\ngoal (1 subgoal):\n 1. count (mset ys) x < count (mset xs) x", "using cnt_x_xz"], ["proof (prove)\nusing this:\n  count (mset ys) x \\<le> count (mset zs) x\n  count (mset zs) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. count (mset ys) x < count (mset xs) x", "by fastforce"], ["proof (state)\nthis:\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "then"], ["proof (chain)\npicking this:\n  count (mset ys) x < count (mset xs) x", "obtain y where y_gt_x: \"gt y x\" and cnt_y: \"count (mset ys) y > count (mset xs) y\""], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>gt y x; count (mset xs) y < count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset ys) x < count (mset xs) x\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. (\\<And>y.\n        \\<lbrakk>gt y x; count (mset xs) y < count (mset ys) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt y x\n  count (mset xs) y < count (mset ys) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have y_in_a: \"y \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<in> A", "using cnt_y ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) y < count (mset ys) y\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. y \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  y \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "obtain yy where\n        yy_gt_x: \"gt yy x\" and\n        cnt_yy: \"count (mset ys) yy > count (mset xs) yy\" and\n        max_yy: \"\\<forall>y \\<in> A. yy \\<in> A \\<longrightarrow> gt y yy \\<longrightarrow> gt y x \\<longrightarrow> count (mset xs) y \\<ge> count (mset ys) y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        \\<lbrakk>gt yy x; count (mset xs) yy < count (mset ys) yy;\n         \\<forall>y\\<in>A.\n            yy \\<in> A \\<longrightarrow>\n            gt y yy \\<longrightarrow>\n            gt y x \\<longrightarrow>\n            count (mset ys) y \\<le> count (mset xs) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wfP_eq_minimal[THEN iffD1, OF wf_gt, rule_format,\n            of y \"{y. gt y x \\<and> count (mset xs) y < count (mset ys) y}\", simplified]\n          y_gt_x cnt_y"], ["proof (prove)\nusing this:\n  gt y x \\<and> count (mset xs) y < count (mset ys) y \\<Longrightarrow>\n  \\<exists>z.\n     gt z x \\<and>\n     count (mset xs) z < count (mset ys) z \\<and>\n     (\\<forall>y.\n         y \\<in> A \\<and> z \\<in> A \\<and> gt y z \\<longrightarrow>\n         gt y x \\<longrightarrow>\n         \\<not> count (mset xs) y < count (mset ys) y)\n  gt y x\n  count (mset xs) y < count (mset ys) y\n\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        \\<lbrakk>gt yy x; count (mset xs) yy < count (mset ys) yy;\n         \\<forall>y\\<in>A.\n            yy \\<in> A \\<longrightarrow>\n            gt y yy \\<longrightarrow>\n            gt y x \\<longrightarrow>\n            count (mset ys) y \\<le> count (mset xs) y\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  gt yy x\n  count (mset xs) yy < count (mset ys) yy\n  \\<forall>y\\<in>A.\n     yy \\<in> A \\<longrightarrow>\n     gt y yy \\<longrightarrow>\n     gt y x \\<longrightarrow> count (mset ys) y \\<le> count (mset xs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have yy_in_a: \"yy \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yy \\<in> A", "using cnt_yy ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) yy < count (mset ys) yy\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. yy \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  yy \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "proof (cases \"count (mset zs) yy \\<ge> count (mset ys) yy\")"], ["proof (state)\ngoal (2 subgoals):\n 1. count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n 2. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "case True"], ["proof (state)\nthis:\n  count (mset ys) yy \\<le> count (mset zs) yy\n\ngoal (2 subgoals):\n 1. count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n 2. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset ys) yy \\<le> count (mset zs) yy\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "using yy_gt_x cnt_yy"], ["proof (prove)\nusing this:\n  count (mset ys) yy \\<le> count (mset zs) yy\n  gt yy x\n  count (mset xs) yy < count (mset ys) yy\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "case False"], ["proof (state)\nthis:\n  \\<not> count (mset ys) yy \\<le> count (mset zs) yy\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "hence \"count (mset zs) yy < count (mset ys) yy\""], ["proof (prove)\nusing this:\n  \\<not> count (mset ys) yy \\<le> count (mset zs) yy\n\ngoal (1 subgoal):\n 1. count (mset zs) yy < count (mset ys) yy", "by fastforce"], ["proof (state)\nthis:\n  count (mset zs) yy < count (mset ys) yy\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "then"], ["proof (chain)\npicking this:\n  count (mset zs) yy < count (mset ys) yy", "obtain z where z_gt_yy: \"gt z yy\" and cnt_z: \"count (mset zs) z > count (mset ys) z\""], ["proof (prove)\nusing this:\n  count (mset zs) yy < count (mset ys) yy\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z yy; count (mset ys) z < count (mset zs) z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using zs_gt_ys[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset zs) yy < count (mset ys) yy\n  mset ys \\<noteq> mset zs \\<and>\n  (\\<forall>x.\n      count (mset zs) x < count (mset ys) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset ys) y < count (mset zs) y))\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>gt z yy; count (mset ys) z < count (mset zs) z\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt z yy\n  count (mset ys) z < count (mset zs) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have z_in_a: \"z \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. z \\<in> A", "using cnt_z zs_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset ys) z < count (mset zs) z\n  zs \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. z \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  z \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have z_gt_x: \"gt z x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt z x", "using trans z_in_a yy_in_a x_in_a z_gt_yy yy_gt_x"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  z \\<in> A\n  yy \\<in> A\n  x \\<in> A\n  gt z yy\n  gt yy x\n\ngoal (1 subgoal):\n 1. gt z x", "by blast"], ["proof (state)\nthis:\n  gt z x\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have \"count (mset ys) z \\<le> count (mset xs) z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset ys) z \\<le> count (mset xs) z", "using max_yy[rule_format, of z] z_in_a yy_in_a z_gt_yy z_gt_x"], ["proof (prove)\nusing this:\n  \\<lbrakk>z \\<in> A; yy \\<in> A; gt z yy; gt z x\\<rbrakk>\n  \\<Longrightarrow> count (mset ys) z \\<le> count (mset xs) z\n  z \\<in> A\n  yy \\<in> A\n  gt z yy\n  gt z x\n\ngoal (1 subgoal):\n 1. count (mset ys) z \\<le> count (mset xs) z", "by blast"], ["proof (state)\nthis:\n  count (mset ys) z \\<le> count (mset xs) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "moreover"], ["proof (state)\nthis:\n  count (mset ys) z \\<le> count (mset xs) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "{"], ["proof (state)\nthis:\n  count (mset ys) z \\<le> count (mset xs) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "assume \"count (mset ys) z < count (mset xs) z\""], ["proof (state)\nthis:\n  count (mset ys) z < count (mset xs) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "then"], ["proof (chain)\npicking this:\n  count (mset ys) z < count (mset xs) z", "obtain u where u_gt_z: \"gt u z\" and cnt_u: \"count (mset xs) u < count (mset ys) u\""], ["proof (prove)\nusing this:\n  count (mset ys) z < count (mset xs) z\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>gt u z; count (mset xs) u < count (mset ys) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using ys_gt_xs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  count (mset ys) z < count (mset xs) z\n  mset xs \\<noteq> mset ys \\<and>\n  (\\<forall>x.\n      count (mset ys) x < count (mset xs) x \\<longrightarrow>\n      (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))\n\ngoal (1 subgoal):\n 1. (\\<And>u.\n        \\<lbrakk>gt u z; count (mset xs) u < count (mset ys) u\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  gt u z\n  count (mset xs) u < count (mset ys) u\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have u_in_a: \"u \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. u \\<in> A", "using cnt_u ys_a dual_order.strict_trans2"], ["proof (prove)\nusing this:\n  count (mset xs) u < count (mset ys) u\n  ys \\<in> lists A\n  \\<lbrakk>?b < ?a; ?c \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n\ngoal (1 subgoal):\n 1. u \\<in> A", "by fastforce"], ["proof (state)\nthis:\n  u \\<in> A\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have u_gt_yy: \"gt u yy\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt u yy", "using trans u_in_a z_in_a yy_in_a u_gt_z z_gt_yy"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  u \\<in> A\n  z \\<in> A\n  yy \\<in> A\n  gt u z\n  gt z yy\n\ngoal (1 subgoal):\n 1. gt u yy", "by blast"], ["proof (state)\nthis:\n  gt u yy\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have u_gt_x: \"gt u x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt u x", "using trans u_in_a z_in_a x_in_a u_gt_z z_gt_x"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>A.\n     \\<forall>y\\<in>A.\n        \\<forall>x\\<in>A.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  u \\<in> A\n  z \\<in> A\n  x \\<in> A\n  gt u z\n  gt z x\n\ngoal (1 subgoal):\n 1. gt u x", "by blast"], ["proof (state)\nthis:\n  gt u x\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "have False"], ["proof (prove)\ngoal (1 subgoal):\n 1. False", "using max_yy[rule_format, of u] u_in_a yy_in_a u_gt_yy u_gt_x cnt_u"], ["proof (prove)\nusing this:\n  \\<lbrakk>u \\<in> A; yy \\<in> A; gt u yy; gt u x\\<rbrakk>\n  \\<Longrightarrow> count (mset ys) u \\<le> count (mset xs) u\n  u \\<in> A\n  yy \\<in> A\n  gt u yy\n  gt u x\n  count (mset xs) u < count (mset ys) u\n\ngoal (1 subgoal):\n 1. False", "by fastforce"], ["proof (state)\nthis:\n  False\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "}"], ["proof (state)\nthis:\n  count (mset ys) z < count (mset xs) z \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "ultimately"], ["proof (chain)\npicking this:\n  count (mset ys) z \\<le> count (mset xs) z\n  count (mset ys) z < count (mset xs) z \\<Longrightarrow> False", "have \"count (mset ys) z = count (mset xs) z\""], ["proof (prove)\nusing this:\n  count (mset ys) z \\<le> count (mset xs) z\n  count (mset ys) z < count (mset xs) z \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. count (mset ys) z = count (mset xs) z", "by fastforce"], ["proof (state)\nthis:\n  count (mset ys) z = count (mset xs) z\n\ngoal (1 subgoal):\n 1. \\<not> count (mset ys) yy \\<le> count (mset zs) yy \\<Longrightarrow>\n    \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset ys) z = count (mset xs) z\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "using z_gt_x cnt_z"], ["proof (prove)\nusing this:\n  count (mset ys) z = count (mset xs) z\n  gt z x\n  count (mset ys) z < count (mset zs) z\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "}"], ["proof (state)\nthis:\n  count (mset ys) x \\<le> count (mset zs) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       count (mset zs) x < count (mset xs) x \\<Longrightarrow>\n       \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "ultimately"], ["proof (chain)\npicking this:\n  count (mset zs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n  count (mset ys) x \\<le> count (mset zs) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "show \"\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\""], ["proof (prove)\nusing this:\n  count (mset zs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n  count (mset ys) x \\<le> count (mset zs) x \\<Longrightarrow>\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal (1 subgoal):\n 1. \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>y. gt y x \\<and> count (mset xs) y < count (mset zs) y\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  msetext_huet gt zs xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma msetext_huet_snoc: \"msetext_huet gt (xs @ [x]) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt (xs @ [x]) xs", "unfolding msetext_huet_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset (xs @ [x]) \\<and>\n    (\\<forall>xa.\n        count (mset (xs @ [x])) xa < count (mset xs) xa \\<longrightarrow>\n        (\\<exists>y.\n            gt y xa \\<and> count (mset xs) y < count (mset (xs @ [x])) y))", "by simp"], ["", "lemma msetext_huet_compat_cons: \"msetext_huet gt ys xs \\<Longrightarrow> msetext_huet gt (x # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt ys xs \\<Longrightarrow>\n    msetext_huet gt (x # ys) (x # xs)", "unfolding msetext_huet_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys \\<and>\n    (\\<forall>x.\n        count (mset ys) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y.\n            gt y x \\<and>\n            count (mset xs) y < count (mset ys) y)) \\<Longrightarrow>\n    mset (x # xs) \\<noteq> mset (x # ys) \\<and>\n    (\\<forall>xa.\n        count (mset (x # ys)) xa\n        < count (mset (x # xs)) xa \\<longrightarrow>\n        (\\<exists>y.\n            gt y xa \\<and>\n            count (mset (x # xs)) y < count (mset (x # ys)) y))", "by auto"], ["", "lemma msetext_huet_compat_snoc: \"msetext_huet gt ys xs \\<Longrightarrow> msetext_huet gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. msetext_huet gt ys xs \\<Longrightarrow>\n    msetext_huet gt (ys @ [x]) (xs @ [x])", "unfolding msetext_huet_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys \\<and>\n    (\\<forall>x.\n        count (mset ys) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y.\n            gt y x \\<and>\n            count (mset xs) y < count (mset ys) y)) \\<Longrightarrow>\n    mset (xs @ [x]) \\<noteq> mset (ys @ [x]) \\<and>\n    (\\<forall>xa.\n        count (mset (ys @ [x])) xa\n        < count (mset (xs @ [x])) xa \\<longrightarrow>\n        (\\<exists>y.\n            gt y xa \\<and>\n            count (mset (xs @ [x])) y < count (mset (ys @ [x])) y))", "by auto"], ["", "lemma msetext_huet_compat_list: \"y \\<noteq> x \\<Longrightarrow> gt y x \\<Longrightarrow> msetext_huet gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n    \\<Longrightarrow> msetext_huet gt (xs @ y # xs') (xs @ x # xs')", "unfolding msetext_huet_def Let_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n    \\<Longrightarrow> mset (xs @ x # xs') \\<noteq>\n                      mset (xs @ y # xs') \\<and>\n                      (\\<forall>xa.\n                          count (mset (xs @ y # xs')) xa\n                          < count (mset (xs @ x # xs')) xa \\<longrightarrow>\n                          (\\<exists>ya.\n                              gt ya xa \\<and>\n                              count (mset (xs @ x # xs')) ya\n                              < count (mset (xs @ y # xs')) ya))", "by auto"], ["", "lemma msetext_huet_singleton: \"y \\<noteq> x \\<Longrightarrow> msetext_huet gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow> msetext_huet gt [y] [x] = gt y x", "unfolding msetext_huet_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. y \\<noteq> x \\<Longrightarrow>\n    (let N = mset [y]; M = mset [x]\n     in M \\<noteq> N \\<and>\n        (\\<forall>x.\n            count N x < count M x \\<longrightarrow>\n            (\\<exists>y. gt y x \\<and> count M y < count N y))) =\n    gt y x", "by simp"], ["", "lemma msetext_huet_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. msetext_huet gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. gt y x) \\<Longrightarrow>\n    wfP (\\<lambda>xs ys. msetext_huet gt ys xs)", "by (erule wfP_subset[OF msetext_dersh_wf]) (auto intro: msetext_huet_imp_dersh)"], ["", "lemma msetext_huet_hd_or_tl:\n  assumes\n    trans: \"\\<forall>z y x. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    total: \"\\<forall>y x. gt y x \\<or> gt x y \\<or> y = x\" and\n    len_eq: \"length ys = length xs\" and\n    yys_gt_xxs: \"msetext_huet gt (y # ys) (x # xs)\"\n  shows \"gt y x \\<or> msetext_huet gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "let ?Y = \"mset (y # ys)\""], ["proof (state)\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "let ?X = \"mset (x # xs)\""], ["proof (state)\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "let ?Ya = \"mset ys\""], ["proof (state)\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "let ?Xa = \"mset xs\""], ["proof (state)\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have Y_ne_X: \"?Y \\<noteq> ?X\" and\n    ex_gt_Y: \"\\<And>xa. count ?X xa > count ?Y xa \\<Longrightarrow> \\<exists>ya. gt ya xa \\<and> count ?Y ya > count ?X ya\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset (y # ys) \\<noteq> mset (x # xs) &&&\n    (\\<And>xa.\n        count (mset (y # ys)) xa\n        < count (mset (x # xs)) xa \\<Longrightarrow>\n        \\<exists>ya.\n           gt ya xa \\<and>\n           count (mset (x # xs)) ya < count (mset (y # ys)) ya)", "using yys_gt_xxs[unfolded msetext_huet_def Let_def]"], ["proof (prove)\nusing this:\n  mset (x # xs) \\<noteq> mset (y # ys) \\<and>\n  (\\<forall>xa.\n      count (mset (y # ys)) xa < count (mset (x # xs)) xa \\<longrightarrow>\n      (\\<exists>ya.\n          gt ya xa \\<and>\n          count (mset (x # xs)) ya < count (mset (y # ys)) ya))\n\ngoal (1 subgoal):\n 1. mset (y # ys) \\<noteq> mset (x # xs) &&&\n    (\\<And>xa.\n        count (mset (y # ys)) xa\n        < count (mset (x # xs)) xa \\<Longrightarrow>\n        \\<exists>ya.\n           gt ya xa \\<and>\n           count (mset (x # xs)) ya < count (mset (y # ys)) ya)", "by auto"], ["proof (state)\nthis:\n  mset (y # ys) \\<noteq> mset (x # xs)\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  \\<exists>ya.\n     gt ya ?xa \\<and> count (mset (x # xs)) ya < count (mset (y # ys)) ya\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "obtain yy where\n    yy: \"\\<And>xa. count ?X xa > count ?Y xa \\<Longrightarrow> gt (yy xa) xa \\<and> count ?Y (yy xa) > count ?X (yy xa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        (\\<And>xa.\n            count (mset (y # ys)) xa\n            < count (mset (x # xs)) xa \\<Longrightarrow>\n            gt (yy xa) xa \\<and>\n            count (mset (x # xs)) (yy xa)\n            < count (mset (y # ys)) (yy xa)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex_gt_Y"], ["proof (prove)\nusing this:\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  \\<exists>ya.\n     gt ya ?xa \\<and> count (mset (x # xs)) ya < count (mset (y # ys)) ya\n\ngoal (1 subgoal):\n 1. (\\<And>yy.\n        (\\<And>xa.\n            count (mset (y # ys)) xa\n            < count (mset (x # xs)) xa \\<Longrightarrow>\n            gt (yy xa) xa \\<and>\n            count (mset (x # xs)) (yy xa)\n            < count (mset (y # ys)) (yy xa)) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have cnt_Y_pres: \"count ?Ya xa > count ?Xa xa\" if \"count ?Y xa > count ?X xa\" and \"xa \\<noteq> y\" for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset xs) xa < count (mset ys) xa", "using that"], ["proof (prove)\nusing this:\n  count (mset (x # xs)) xa < count (mset (y # ys)) xa\n  xa \\<noteq> y\n\ngoal (1 subgoal):\n 1. count (mset xs) xa < count (mset ys) xa", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  \\<lbrakk>count (mset (x # xs)) ?xa < count (mset (y # ys)) ?xa;\n   ?xa \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> count (mset xs) ?xa < count (mset ys) ?xa\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have cnt_X_pres: \"count ?Xa xa > count ?Ya xa\" if \"count ?X xa > count ?Y xa\" and \"xa \\<noteq> x\" for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset ys) xa < count (mset xs) xa", "using that"], ["proof (prove)\nusing this:\n  count (mset (y # ys)) xa < count (mset (x # xs)) xa\n  xa \\<noteq> x\n\ngoal (1 subgoal):\n 1. count (mset ys) xa < count (mset xs) xa", "by (auto split: if_splits)"], ["proof (state)\nthis:\n  \\<lbrakk>count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa;\n   ?xa \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> count (mset ys) ?xa < count (mset xs) ?xa\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "{"], ["proof (state)\nthis:\n  \\<lbrakk>count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa;\n   ?xa \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> count (mset ys) ?xa < count (mset xs) ?xa\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "assume y_eq_x: \"y = x\""], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have \"?Xa \\<noteq> ?Ya\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys", "using y_eq_x Y_ne_X"], ["proof (prove)\nusing this:\n  y = x\n  mset (y # ys) \\<noteq> mset (x # xs)\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys", "by simp"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset ys\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "moreover"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset ys\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have \"\\<And>xa. count ?Xa xa > count ?Ya xa \\<Longrightarrow> \\<exists>ya. gt ya xa \\<and> count ?Ya ya > count ?Xa ya\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "fix xa :: 'a"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "assume a1: \"count (mset ys) xa < count (mset xs) xa\""], ["proof (state)\nthis:\n  count (mset ys) xa < count (mset xs) xa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "from ex_gt_Y"], ["proof (chain)\npicking this:\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  \\<exists>ya.\n     gt ya ?xa \\<and> count (mset (x # xs)) ya < count (mset (y # ys)) ya", "obtain aa :: \"'a \\<Rightarrow> 'a\" where\n        f3: \"\\<forall>a. \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or> gt (aa a) a \\<and>\n          count (mset (x # xs)) (aa a) < count (mset (y # ys)) (aa a)\""], ["proof (prove)\nusing this:\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  \\<exists>ya.\n     gt ya ?xa \\<and> count (mset (x # xs)) ya < count (mset (y # ys)) ya\n\ngoal (1 subgoal):\n 1. (\\<And>aa.\n        \\<forall>a.\n           \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or>\n           gt (aa a) a \\<and>\n           count (mset (x # xs)) (aa a)\n           < count (mset (y # ys)) (aa a) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis (full_types))"], ["proof (state)\nthis:\n  \\<forall>a.\n     \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or>\n     gt (aa a) a \\<and>\n     count (mset (x # xs)) (aa a) < count (mset (y # ys)) (aa a)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "then"], ["proof (chain)\npicking this:\n  \\<forall>a.\n     \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or>\n     gt (aa a) a \\<and>\n     count (mset (x # xs)) (aa a) < count (mset (y # ys)) (aa a)", "have f4: \"\\<And>a. count (mset (x # xs)) (aa a) < count (mset (x # ys)) (aa a) \\<or>\n          \\<not> count (mset (x # ys)) a < count (mset (x # xs)) a\""], ["proof (prove)\nusing this:\n  \\<forall>a.\n     \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or>\n     gt (aa a) a \\<and>\n     count (mset (x # xs)) (aa a) < count (mset (y # ys)) (aa a)\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       count (mset (x # xs)) (aa a) < count (mset (x # ys)) (aa a) \\<or>\n       \\<not> count (mset (x # ys)) a < count (mset (x # xs)) a", "using y_eq_x"], ["proof (prove)\nusing this:\n  \\<forall>a.\n     \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or>\n     gt (aa a) a \\<and>\n     count (mset (x # xs)) (aa a) < count (mset (y # ys)) (aa a)\n  y = x\n\ngoal (1 subgoal):\n 1. \\<And>a.\n       count (mset (x # xs)) (aa a) < count (mset (x # ys)) (aa a) \\<or>\n       \\<not> count (mset (x # ys)) a < count (mset (x # xs)) a", "by meson"], ["proof (state)\nthis:\n  count (mset (x # xs)) (aa ?a) < count (mset (x # ys)) (aa ?a) \\<or>\n  \\<not> count (mset (x # ys)) ?a < count (mset (x # xs)) ?a\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"\\<And>a as aa. count (mset ((a::'a) # as)) aa = count (mset as) aa \\<or> aa = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a as aa.\n       count (mset (a # as)) aa = count (mset as) aa \\<or> aa = a", "by fastforce"], ["proof (state)\nthis:\n  count (mset (?a # ?as)) ?aa = count (mset ?as) ?aa \\<or> ?aa = ?a\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "then"], ["proof (chain)\npicking this:\n  count (mset (?a # ?as)) ?aa = count (mset ?as) ?aa \\<or> ?aa = ?a", "have \"xa = x \\<or> count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)\""], ["proof (prove)\nusing this:\n  count (mset (?a # ?as)) ?aa = count (mset ?as) ?aa \\<or> ?aa = ?a\n\ngoal (1 subgoal):\n 1. xa = x \\<or>\n    count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)", "using f4 a1"], ["proof (prove)\nusing this:\n  count (mset (?a # ?as)) ?aa = count (mset ?as) ?aa \\<or> ?aa = ?a\n  count (mset (x # xs)) (aa ?a) < count (mset (x # ys)) (aa ?a) \\<or>\n  \\<not> count (mset (x # ys)) ?a < count (mset (x # xs)) ?a\n  count (mset ys) xa < count (mset xs) xa\n\ngoal (1 subgoal):\n 1. xa = x \\<or>\n    count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)", "by (metis (no_types))"], ["proof (state)\nthis:\n  xa = x \\<or> count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       count (mset ys) xa < count (mset xs) xa \\<Longrightarrow>\n       \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "then"], ["proof (chain)\npicking this:\n  xa = x \\<or> count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)", "show \"\\<exists>a. gt a xa \\<and> count (mset xs) a < count (mset ys) a\""], ["proof (prove)\nusing this:\n  xa = x \\<or> count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)\n\ngoal (1 subgoal):\n 1. \\<exists>a. gt a xa \\<and> count (mset xs) a < count (mset ys) a", "using f3 y_eq_x a1"], ["proof (prove)\nusing this:\n  xa = x \\<or> count (mset (x # xs)) (aa xa) < count (mset (x # ys)) (aa xa)\n  \\<forall>a.\n     \\<not> count (mset (y # ys)) a < count (mset (x # xs)) a \\<or>\n     gt (aa a) a \\<and>\n     count (mset (x # xs)) (aa a) < count (mset (y # ys)) (aa a)\n  y = x\n  count (mset ys) xa < count (mset xs) xa\n\ngoal (1 subgoal):\n 1. \\<exists>a. gt a xa \\<and> count (mset xs) a < count (mset ys) a", "by (metis (no_types) Suc_less_eq count_add_mset mset.simps(2))"], ["proof (state)\nthis:\n  \\<exists>a. gt a xa \\<and> count (mset xs) a < count (mset ys) a\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "ultimately"], ["proof (chain)\npicking this:\n  mset xs \\<noteq> mset ys\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"msetext_huet gt ys xs\""], ["proof (prove)\nusing this:\n  mset xs \\<noteq> mset ys\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. msetext_huet gt ys xs", "unfolding msetext_huet_def Let_def"], ["proof (prove)\nusing this:\n  mset xs \\<noteq> mset ys\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys \\<and>\n    (\\<forall>x.\n        count (mset ys) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))", "by simp"], ["proof (state)\nthis:\n  msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "}"], ["proof (state)\nthis:\n  y = x \\<Longrightarrow> msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "moreover"], ["proof (state)\nthis:\n  y = x \\<Longrightarrow> msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "{"], ["proof (state)\nthis:\n  y = x \\<Longrightarrow> msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "assume x_gt_y: \"gt x y\" and y_ngt_x: \"\\<not> gt y x\""], ["proof (state)\nthis:\n  gt x y\n  \\<not> gt y x\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "hence y_ne_x: \"y \\<noteq> x\""], ["proof (prove)\nusing this:\n  gt x y\n  \\<not> gt y x\n\ngoal (1 subgoal):\n 1. y \\<noteq> x", "by fast"], ["proof (state)\nthis:\n  y \\<noteq> x\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "obtain z where z_cnt: \"count ?X z > count ?Y z\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        count (mset (y # ys)) z < count (mset (x # xs)) z \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using size_eq_ex_count_lt[of ?Y ?X] size_mset size_mset len_eq Y_ne_X"], ["proof (prove)\nusing this:\n  \\<lbrakk>size (mset (y # ys)) = size (mset (x # xs));\n   mset (y # ys) \\<noteq> mset (x # xs)\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa.\n                       count (mset (y # ys)) xa < count (mset (x # xs)) xa\n  size (mset ?xs) = length ?xs\n  size (mset ?xs) = length ?xs\n  length ys = length xs\n  mset (y # ys) \\<noteq> mset (x # xs)\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        count (mset (y # ys)) z < count (mset (x # xs)) z \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  count (mset (y # ys)) z < count (mset (x # xs)) z\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have Xa_ne_Ya: \"?Xa \\<noteq> ?Ya\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys", "proof (cases \"z = x\")"], ["proof (state)\ngoal (2 subgoals):\n 1. z = x \\<Longrightarrow> mset xs \\<noteq> mset ys\n 2. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "case True"], ["proof (state)\nthis:\n  z = x\n\ngoal (2 subgoals):\n 1. z = x \\<Longrightarrow> mset xs \\<noteq> mset ys\n 2. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "hence \"yy z \\<noteq> y\""], ["proof (prove)\nusing this:\n  z = x\n\ngoal (1 subgoal):\n 1. yy z \\<noteq> y", "using y_ngt_x yy z_cnt"], ["proof (prove)\nusing this:\n  z = x\n  \\<not> gt y x\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n  count (mset (y # ys)) z < count (mset (x # xs)) z\n\ngoal (1 subgoal):\n 1. yy z \\<noteq> y", "by blast"], ["proof (state)\nthis:\n  yy z \\<noteq> y\n\ngoal (2 subgoals):\n 1. z = x \\<Longrightarrow> mset xs \\<noteq> mset ys\n 2. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "hence \"count ?Ya (yy z) > count ?Xa (yy z)\""], ["proof (prove)\nusing this:\n  yy z \\<noteq> y\n\ngoal (1 subgoal):\n 1. count (mset xs) (yy z) < count (mset ys) (yy z)", "using cnt_Y_pres yy z_cnt"], ["proof (prove)\nusing this:\n  yy z \\<noteq> y\n  \\<lbrakk>count (mset (x # xs)) ?xa < count (mset (y # ys)) ?xa;\n   ?xa \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> count (mset xs) ?xa < count (mset ys) ?xa\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n  count (mset (y # ys)) z < count (mset (x # xs)) z\n\ngoal (1 subgoal):\n 1. count (mset xs) (yy z) < count (mset ys) (yy z)", "by blast"], ["proof (state)\nthis:\n  count (mset xs) (yy z) < count (mset ys) (yy z)\n\ngoal (2 subgoals):\n 1. z = x \\<Longrightarrow> mset xs \\<noteq> mset ys\n 2. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) (yy z) < count (mset ys) (yy z)\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys", "by auto"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset ys\n\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "case False"], ["proof (state)\nthis:\n  z \\<noteq> x\n\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "hence \"count ?Xa z > count ?Ya z\""], ["proof (prove)\nusing this:\n  z \\<noteq> x\n\ngoal (1 subgoal):\n 1. count (mset ys) z < count (mset xs) z", "using z_cnt cnt_X_pres"], ["proof (prove)\nusing this:\n  z \\<noteq> x\n  count (mset (y # ys)) z < count (mset (x # xs)) z\n  \\<lbrakk>count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa;\n   ?xa \\<noteq> x\\<rbrakk>\n  \\<Longrightarrow> count (mset ys) ?xa < count (mset xs) ?xa\n\ngoal (1 subgoal):\n 1. count (mset ys) z < count (mset xs) z", "by blast"], ["proof (state)\nthis:\n  count (mset ys) z < count (mset xs) z\n\ngoal (1 subgoal):\n 1. z \\<noteq> x \\<Longrightarrow> mset xs \\<noteq> mset ys", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset ys) z < count (mset xs) z\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys", "by auto"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset ys\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  mset xs \\<noteq> mset ys\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "have \"\\<exists>ya. gt ya xa \\<and> count ?Ya ya > count ?Xa ya\"\n      if xa_cnta: \"count ?Xa xa > count ?Ya xa\" for xa"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "proof (cases \"xa = y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "case xa_eq_y: True"], ["proof (state)\nthis:\n  xa = y\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "{"], ["proof (state)\nthis:\n  xa = y\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "assume \"count ?Ya x > count ?Xa x\""], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "moreover"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"gt x xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt x xa", "unfolding xa_eq_y"], ["proof (prove)\ngoal (1 subgoal):\n 1. gt x y", "by (rule x_gt_y)"], ["proof (state)\nthis:\n  gt x xa\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "ultimately"], ["proof (chain)\npicking this:\n  count (mset xs) x < count (mset ys) x\n  gt x xa", "have ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) x < count (mset ys) x\n  gt x xa\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by fast"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "}"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "moreover"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "{"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "assume \"count ?Xa x \\<ge> count ?Ya x\""], ["proof (state)\nthis:\n  count (mset ys) x \\<le> count (mset xs) x\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "hence x_cnt: \"count ?X x > count ?Y x\""], ["proof (prove)\nusing this:\n  count (mset ys) x \\<le> count (mset xs) x\n\ngoal (1 subgoal):\n 1. count (mset (y # ys)) x < count (mset (x # xs)) x", "by (simp add: y_ne_x)"], ["proof (state)\nthis:\n  count (mset (y # ys)) x < count (mset (x # xs)) x\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "hence yyx_gt_x: \"gt (yy x) x\" and yyx_cnt: \"count ?Y (yy x) > count ?X (yy x)\""], ["proof (prove)\nusing this:\n  count (mset (y # ys)) x < count (mset (x # xs)) x\n\ngoal (1 subgoal):\n 1. gt (yy x) x &&&\n    count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)", "using yy"], ["proof (prove)\nusing this:\n  count (mset (y # ys)) x < count (mset (x # xs)) x\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n\ngoal (1 subgoal):\n 1. gt (yy x) x &&&\n    count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)", "by blast+"], ["proof (state)\nthis:\n  gt (yy x) x\n  count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have yyx_ne_y: \"yy x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yy x \\<noteq> y", "using y_ngt_x yyx_gt_x"], ["proof (prove)\nusing this:\n  \\<not> gt y x\n  gt (yy x) x\n\ngoal (1 subgoal):\n 1. yy x \\<noteq> y", "by auto"], ["proof (state)\nthis:\n  yy x \\<noteq> y\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"gt (yy x) xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt (yy x) xa", "unfolding xa_eq_y"], ["proof (prove)\ngoal (1 subgoal):\n 1. gt (yy x) y", "using trans yyx_gt_x x_gt_y"], ["proof (prove)\nusing this:\n  \\<forall>z y x. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  gt (yy x) x\n  gt x y\n\ngoal (1 subgoal):\n 1. gt (yy x) y", "by blast"], ["proof (state)\nthis:\n  gt (yy x) xa\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "moreover"], ["proof (state)\nthis:\n  gt (yy x) xa\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"count ?Ya (yy x) > count ?Xa (yy x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset xs) (yy x) < count (mset ys) (yy x)", "using cnt_Y_pres yyx_cnt yyx_ne_y"], ["proof (prove)\nusing this:\n  \\<lbrakk>count (mset (x # xs)) ?xa < count (mset (y # ys)) ?xa;\n   ?xa \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> count (mset xs) ?xa < count (mset ys) ?xa\n  count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)\n  yy x \\<noteq> y\n\ngoal (1 subgoal):\n 1. count (mset xs) (yy x) < count (mset ys) (yy x)", "by blast"], ["proof (state)\nthis:\n  count (mset xs) (yy x) < count (mset ys) (yy x)\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "ultimately"], ["proof (chain)\npicking this:\n  gt (yy x) xa\n  count (mset xs) (yy x) < count (mset ys) (yy x)", "have ?thesis"], ["proof (prove)\nusing this:\n  gt (yy x) xa\n  count (mset xs) (yy x) < count (mset ys) (yy x)\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by blast"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "}"], ["proof (state)\nthis:\n  count (mset ys) x \\<le> count (mset xs) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (2 subgoals):\n 1. xa = y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "ultimately"], ["proof (chain)\npicking this:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n  count (mset ys) x \\<le> count (mset xs) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "show ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n  count (mset ys) x \\<le> count (mset xs) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "case False"], ["proof (state)\nthis:\n  xa \\<noteq> y\n\ngoal (1 subgoal):\n 1. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "hence xa_cnt: \"count ?X xa > count ?Y xa\""], ["proof (prove)\nusing this:\n  xa \\<noteq> y\n\ngoal (1 subgoal):\n 1. count (mset (y # ys)) xa < count (mset (x # xs)) xa", "using xa_cnta"], ["proof (prove)\nusing this:\n  xa \\<noteq> y\n  count (mset ys) xa < count (mset xs) xa\n\ngoal (1 subgoal):\n 1. count (mset (y # ys)) xa < count (mset (x # xs)) xa", "by fastforce"], ["proof (state)\nthis:\n  count (mset (y # ys)) xa < count (mset (x # xs)) xa\n\ngoal (1 subgoal):\n 1. xa \\<noteq> y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "proof (cases \"yy xa = y \\<and> count ?Ya y \\<le> count ?Xa y\")"], ["proof (state)\ngoal (2 subgoals):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. \\<not> (yy xa = y \\<and>\n            count (mset ys) y \\<le> count (mset xs) y) \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "case yyxa_ne_y_or: False"], ["proof (state)\nthis:\n  \\<not> (yy xa = y \\<and> count (mset ys) y \\<le> count (mset xs) y)\n\ngoal (2 subgoals):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. \\<not> (yy xa = y \\<and>\n            count (mset ys) y \\<le> count (mset xs) y) \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have yyxa_gt_xa: \"gt (yy xa) xa\" and yyxa_cnt: \"count ?Y (yy xa) > count ?X (yy xa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt (yy xa) xa &&&\n    count (mset (x # xs)) (yy xa) < count (mset (y # ys)) (yy xa)", "using yy[OF xa_cnt]"], ["proof (prove)\nusing this:\n  gt (yy xa) xa \\<and>\n  count (mset (x # xs)) (yy xa) < count (mset (y # ys)) (yy xa)\n\ngoal (1 subgoal):\n 1. gt (yy xa) xa &&&\n    count (mset (x # xs)) (yy xa) < count (mset (y # ys)) (yy xa)", "by blast+"], ["proof (state)\nthis:\n  gt (yy xa) xa\n  count (mset (x # xs)) (yy xa) < count (mset (y # ys)) (yy xa)\n\ngoal (2 subgoals):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. \\<not> (yy xa = y \\<and>\n            count (mset ys) y \\<le> count (mset xs) y) \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"count ?Ya (yy xa) > count ?Xa (yy xa)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset xs) (yy xa) < count (mset ys) (yy xa)", "using cnt_Y_pres yyxa_cnt yyxa_ne_y_or"], ["proof (prove)\nusing this:\n  \\<lbrakk>count (mset (x # xs)) ?xa < count (mset (y # ys)) ?xa;\n   ?xa \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> count (mset xs) ?xa < count (mset ys) ?xa\n  count (mset (x # xs)) (yy xa) < count (mset (y # ys)) (yy xa)\n  \\<not> (yy xa = y \\<and> count (mset ys) y \\<le> count (mset xs) y)\n\ngoal (1 subgoal):\n 1. count (mset xs) (yy xa) < count (mset ys) (yy xa)", "by fastforce"], ["proof (state)\nthis:\n  count (mset xs) (yy xa) < count (mset ys) (yy xa)\n\ngoal (2 subgoals):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n 2. \\<not> (yy xa = y \\<and>\n            count (mset ys) y \\<le> count (mset xs) y) \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "thus ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) (yy xa) < count (mset ys) (yy xa)\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "using yyxa_gt_xa"], ["proof (prove)\nusing this:\n  count (mset xs) (yy xa) < count (mset ys) (yy xa)\n  gt (yy xa) xa\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by blast"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "case True"], ["proof (state)\nthis:\n  yy xa = y \\<and> count (mset ys) y \\<le> count (mset xs) y\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "note yyxa_eq_y = this[THEN conjunct1] and y_cnt = this[THEN conjunct2]"], ["proof (state)\nthis:\n  yy xa = y\n  count (mset ys) y \\<le> count (mset xs) y\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "{"], ["proof (state)\nthis:\n  yy xa = y\n  count (mset ys) y \\<le> count (mset xs) y\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "assume \"count ?Ya x > count ?Xa x\""], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "moreover"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"gt x xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt x xa", "using trans x_gt_y xa_cnt yy yyxa_eq_y"], ["proof (prove)\nusing this:\n  \\<forall>z y x. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  gt x y\n  count (mset (y # ys)) xa < count (mset (x # xs)) xa\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n  yy xa = y\n\ngoal (1 subgoal):\n 1. gt x xa", "by blast"], ["proof (state)\nthis:\n  gt x xa\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "ultimately"], ["proof (chain)\npicking this:\n  count (mset xs) x < count (mset ys) x\n  gt x xa", "have ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) x < count (mset ys) x\n  gt x xa\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by fast"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "}"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "moreover"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "{"], ["proof (state)\nthis:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "assume \"count ?Xa x \\<ge> count ?Ya x\""], ["proof (state)\nthis:\n  count (mset ys) x \\<le> count (mset xs) x\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "hence x_cnt: \"count ?X x > count ?Y x\""], ["proof (prove)\nusing this:\n  count (mset ys) x \\<le> count (mset xs) x\n\ngoal (1 subgoal):\n 1. count (mset (y # ys)) x < count (mset (x # xs)) x", "by (simp add: y_ne_x)"], ["proof (state)\nthis:\n  count (mset (y # ys)) x < count (mset (x # xs)) x\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "hence yyx_gt_x: \"gt (yy x) x\" and yyx_cnt: \"count ?Y (yy x) > count ?X (yy x)\""], ["proof (prove)\nusing this:\n  count (mset (y # ys)) x < count (mset (x # xs)) x\n\ngoal (1 subgoal):\n 1. gt (yy x) x &&&\n    count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)", "using yy"], ["proof (prove)\nusing this:\n  count (mset (y # ys)) x < count (mset (x # xs)) x\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n\ngoal (1 subgoal):\n 1. gt (yy x) x &&&\n    count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)", "by blast+"], ["proof (state)\nthis:\n  gt (yy x) x\n  count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have yyx_ne_y: \"yy x \\<noteq> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. yy x \\<noteq> y", "using y_ngt_x yyx_gt_x"], ["proof (prove)\nusing this:\n  \\<not> gt y x\n  gt (yy x) x\n\ngoal (1 subgoal):\n 1. yy x \\<noteq> y", "by auto"], ["proof (state)\nthis:\n  yy x \\<noteq> y\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"gt (yy x) xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt (yy x) xa", "using trans x_gt_y xa_cnt yy yyx_gt_x yyxa_eq_y"], ["proof (prove)\nusing this:\n  \\<forall>z y x. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  gt x y\n  count (mset (y # ys)) xa < count (mset (x # xs)) xa\n  count (mset (y # ys)) ?xa < count (mset (x # xs)) ?xa \\<Longrightarrow>\n  gt (yy ?xa) ?xa \\<and>\n  count (mset (x # xs)) (yy ?xa) < count (mset (y # ys)) (yy ?xa)\n  gt (yy x) x\n  yy xa = y\n\ngoal (1 subgoal):\n 1. gt (yy x) xa", "by blast"], ["proof (state)\nthis:\n  gt (yy x) xa\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "moreover"], ["proof (state)\nthis:\n  gt (yy x) xa\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "have \"count ?Ya (yy x) > count ?Xa (yy x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. count (mset xs) (yy x) < count (mset ys) (yy x)", "using cnt_Y_pres yyx_cnt yyx_ne_y"], ["proof (prove)\nusing this:\n  \\<lbrakk>count (mset (x # xs)) ?xa < count (mset (y # ys)) ?xa;\n   ?xa \\<noteq> y\\<rbrakk>\n  \\<Longrightarrow> count (mset xs) ?xa < count (mset ys) ?xa\n  count (mset (x # xs)) (yy x) < count (mset (y # ys)) (yy x)\n  yy x \\<noteq> y\n\ngoal (1 subgoal):\n 1. count (mset xs) (yy x) < count (mset ys) (yy x)", "by blast"], ["proof (state)\nthis:\n  count (mset xs) (yy x) < count (mset ys) (yy x)\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "ultimately"], ["proof (chain)\npicking this:\n  gt (yy x) xa\n  count (mset xs) (yy x) < count (mset ys) (yy x)", "have ?thesis"], ["proof (prove)\nusing this:\n  gt (yy x) xa\n  count (mset xs) (yy x) < count (mset ys) (yy x)\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by blast"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "}"], ["proof (state)\nthis:\n  count (mset ys) x \\<le> count (mset xs) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. yy xa = y \\<and>\n    count (mset ys) y \\<le> count (mset xs) y \\<Longrightarrow>\n    \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "ultimately"], ["proof (chain)\npicking this:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n  count (mset ys) x \\<le> count (mset xs) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "show ?thesis"], ["proof (prove)\nusing this:\n  count (mset xs) x < count (mset ys) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n  count (mset ys) x \\<le> count (mset xs) x \\<Longrightarrow>\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>ya. gt ya xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "hence \"msetext_huet gt ys xs\""], ["proof (prove)\nusing this:\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. msetext_huet gt ys xs", "unfolding msetext_huet_def Let_def"], ["proof (prove)\nusing this:\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys \\<and>\n    (\\<forall>x.\n        count (mset ys) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))", "using Xa_ne_Ya"], ["proof (prove)\nusing this:\n  count (mset ys) ?xa < count (mset xs) ?xa \\<Longrightarrow>\n  \\<exists>ya. gt ya ?xa \\<and> count (mset xs) ya < count (mset ys) ya\n  mset xs \\<noteq> mset ys\n\ngoal (1 subgoal):\n 1. mset xs \\<noteq> mset ys \\<and>\n    (\\<forall>x.\n        count (mset ys) x < count (mset xs) x \\<longrightarrow>\n        (\\<exists>y. gt y x \\<and> count (mset xs) y < count (mset ys) y))", "by fast"], ["proof (state)\nthis:\n  msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "}"], ["proof (state)\nthis:\n  \\<lbrakk>gt x y; \\<not> gt y x\\<rbrakk>\n  \\<Longrightarrow> msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "ultimately"], ["proof (chain)\npicking this:\n  y = x \\<Longrightarrow> msetext_huet gt ys xs\n  \\<lbrakk>gt x y; \\<not> gt y x\\<rbrakk>\n  \\<Longrightarrow> msetext_huet gt ys xs", "show ?thesis"], ["proof (prove)\nusing this:\n  y = x \\<Longrightarrow> msetext_huet gt ys xs\n  \\<lbrakk>gt x y; \\<not> gt y x\\<rbrakk>\n  \\<Longrightarrow> msetext_huet gt ys xs\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "using total"], ["proof (prove)\nusing this:\n  y = x \\<Longrightarrow> msetext_huet gt ys xs\n  \\<lbrakk>gt x y; \\<not> gt y x\\<rbrakk>\n  \\<Longrightarrow> msetext_huet gt ys xs\n  \\<forall>y x. gt y x \\<or> gt x y \\<or> y = x\n\ngoal (1 subgoal):\n 1. gt y x \\<or> msetext_huet gt ys xs", "by blast"], ["proof (state)\nthis:\n  gt y x \\<or> msetext_huet gt ys xs\n\ngoal:\nNo subgoals!", "qed"], ["", "interpretation msetext_huet: ext msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext msetext_huet", "by standard (fact msetext_huet_mono_strong, fact msetext_huet_map)"], ["", "interpretation msetext_huet: ext_irrefl_before_trans msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_before_trans msetext_huet", "by standard (fact msetext_huet_irrefl, fact msetext_huet_trans_from_irrefl)"], ["", "interpretation msetext_huet: ext_snoc msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_snoc msetext_huet", "by standard (fact msetext_huet_snoc)"], ["", "interpretation msetext_huet: ext_compat_cons msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_cons msetext_huet", "by standard (fact msetext_huet_compat_cons)"], ["", "interpretation msetext_huet: ext_compat_snoc msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_snoc msetext_huet", "by standard (fact msetext_huet_compat_snoc)"], ["", "interpretation msetext_huet: ext_compat_list msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list msetext_huet", "by standard (fact msetext_huet_compat_list)"], ["", "interpretation msetext_huet: ext_singleton msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton msetext_huet", "by standard (fact msetext_huet_singleton)"], ["", "interpretation msetext_huet: ext_wf msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf msetext_huet", "by standard (fact msetext_huet_wf)"], ["", "interpretation msetext_huet: ext_hd_or_tl msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_hd_or_tl msetext_huet", "by standard (rule msetext_huet_hd_or_tl)"], ["", "interpretation msetext_huet: ext_wf_bounded msetext_huet"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf_bounded msetext_huet", "by standard"], ["", "subsection \\<open>Componentwise Extension\\<close>"], ["", "definition cwiseext :: \"('a \\<Rightarrow> 'a \\<Rightarrow> bool) \\<Rightarrow> 'a list \\<Rightarrow> 'a list \\<Rightarrow> bool\" where\n  \"cwiseext gt ys xs \\<longleftrightarrow> length ys = length xs\n     \\<and> (\\<forall>i < length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i)\n     \\<and> (\\<exists>i < length ys. gt (ys ! i) (xs ! i))\""], ["", "lemma cwiseext_imp_len_lexext:\n  assumes cw: \"cwiseext gt ys xs\"\n  shows \"len_lexext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. len_lexext gt ys xs", "have len_eq: \"length ys = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs", "using cw[unfolded cwiseext_def]"], ["proof (prove)\nusing this:\n  length ys = length xs \\<and>\n  (\\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n  (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\n\ngoal (1 subgoal):\n 1. length ys = length xs", "by sat"], ["proof (state)\nthis:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs", "moreover"], ["proof (state)\nthis:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs", "have \"lexext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt ys xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. lexext gt ys xs", "obtain j where\n      j_len: \"j < length ys\" and\n      j_gt: \"gt (ys ! j) (xs ! j)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ys; gt (ys ! j) (xs ! j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using cw[unfolded cwiseext_def]"], ["proof (prove)\nusing this:\n  length ys = length xs \\<and>\n  (\\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n  (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j < length ys; gt (ys ! j) (xs ! j)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  j < length ys\n  gt (ys ! j) (xs ! j)\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "then"], ["proof (chain)\npicking this:\n  j < length ys\n  gt (ys ! j) (xs ! j)", "obtain j0 where\n      j0_len: \"j0 < length ys\" and\n      j0_gt: \"gt (ys ! j0) (xs ! j0)\" and\n      j0_min: \"\\<And>i. i < j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\""], ["proof (prove)\nusing this:\n  j < length ys\n  gt (ys ! j) (xs ! j)\n\ngoal (1 subgoal):\n 1. (\\<And>j0.\n        \\<lbrakk>j0 < length ys; gt (ys ! j0) (xs ! j0);\n         \\<And>i.\n            i < j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using wf_eq_minimal[THEN iffD1, OF wf_less, rule_format, of _ \"{i. gt (ys ! i) (xs ! i)}\",\n        simplified, OF j_gt]"], ["proof (prove)\nusing this:\n  j < length ys\n  gt (ys ! j) (xs ! j)\n  \\<exists>z.\n     gt (ys ! z) (xs ! z) \\<and> (\\<forall>y<z. \\<not> gt (ys ! y) (xs ! y))\n\ngoal (1 subgoal):\n 1. (\\<And>j0.\n        \\<lbrakk>j0 < length ys; gt (ys ! j0) (xs ! j0);\n         \\<And>i.\n            i < j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis less_trans nat_neq_iff)"], ["proof (state)\nthis:\n  j0 < length ys\n  gt (ys ! j0) (xs ! j0)\n  ?i < j0 \\<Longrightarrow> \\<not> gt (ys ! ?i) (xs ! ?i)\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "have j0_eq: \"\\<And>i. i < j0 \\<Longrightarrow> ys ! i = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < j0 \\<Longrightarrow> ys ! i = xs ! i", "using cw[unfolded cwiseext_def]"], ["proof (prove)\nusing this:\n  length ys = length xs \\<and>\n  (\\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n  (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i. i < j0 \\<Longrightarrow> ys ! i = xs ! i", "by (metis j0_len j0_min less_trans)"], ["proof (state)\nthis:\n  ?i < j0 \\<Longrightarrow> ys ! ?i = xs ! ?i\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "have \"lexext gt (drop j0 ys) (drop j0 xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt (drop j0 ys) (drop j0 xs)", "using lexext_Cons[of gt _ _ \"drop (Suc j0) ys\" \"drop (Suc j0) xs\", OF j0_gt]"], ["proof (prove)\nusing this:\n  lexext gt (ys ! j0 # drop (Suc j0) ys) (xs ! j0 # drop (Suc j0) xs)\n\ngoal (1 subgoal):\n 1. lexext gt (drop j0 ys) (drop j0 xs)", "by (metis Cons_nth_drop_Suc j0_len len_eq)"], ["proof (state)\nthis:\n  lexext gt (drop j0 ys) (drop j0 xs)\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  lexext gt (drop j0 ys) (drop j0 xs)\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "using cw len_eq j0_len j0_min"], ["proof (prove)\nusing this:\n  lexext gt (drop j0 ys) (drop j0 xs)\n  cwiseext gt ys xs\n  length ys = length xs\n  j0 < length ys\n  ?i < j0 \\<Longrightarrow> \\<not> gt (ys ! ?i) (xs ! ?i)\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "proof (induct j0 arbitrary: ys xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "case (Suc k)"], ["proof (state)\nthis:\n  \\<lbrakk>lexext gt (drop k ?ys) (drop k ?xs); cwiseext gt ?ys ?xs;\n   length ?ys = length ?xs; k < length ?ys;\n   \\<And>i. i < k \\<Longrightarrow> \\<not> gt (?ys ! i) (?xs ! i)\\<rbrakk>\n  \\<Longrightarrow> lexext gt ?ys ?xs\n  lexext gt (drop (Suc k) ys) (drop (Suc k) xs)\n  cwiseext gt ys xs\n  length ys = length xs\n  Suc k < length ys\n  ?i < Suc k \\<Longrightarrow> \\<not> gt (ys ! ?i) (xs ! ?i)\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "note ih0 = this(1) and gts_dropSk = this(2) and cw = this(3) and len_eq = this(4) and\n        Sk_len = this(5) and Sk_min = this(6)"], ["proof (state)\nthis:\n  \\<lbrakk>lexext gt (drop k ?ys) (drop k ?xs); cwiseext gt ?ys ?xs;\n   length ?ys = length ?xs; k < length ?ys;\n   \\<And>i. i < k \\<Longrightarrow> \\<not> gt (?ys ! i) (?xs ! i)\\<rbrakk>\n  \\<Longrightarrow> lexext gt ?ys ?xs\n  lexext gt (drop (Suc k) ys) (drop (Suc k) xs)\n  cwiseext gt ys xs\n  length ys = length xs\n  Suc k < length ys\n  ?i < Suc k \\<Longrightarrow> \\<not> gt (ys ! ?i) (xs ! ?i)\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "have Sk_eq: \"\\<And>i. i < Suc k \\<Longrightarrow> ys ! i = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < Suc k \\<Longrightarrow> ys ! i = xs ! i", "using cw[unfolded cwiseext_def]"], ["proof (prove)\nusing this:\n  length ys = length xs \\<and>\n  (\\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n  (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\n\ngoal (1 subgoal):\n 1. \\<And>i. i < Suc k \\<Longrightarrow> ys ! i = xs ! i", "by (metis Sk_len Sk_min less_trans)"], ["proof (state)\nthis:\n  ?i < Suc k \\<Longrightarrow> ys ! ?i = xs ! ?i\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "have k_len: \"k < length ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. k < length ys", "using Sk_len"], ["proof (prove)\nusing this:\n  Suc k < length ys\n\ngoal (1 subgoal):\n 1. k < length ys", "by simp"], ["proof (state)\nthis:\n  k < length ys\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "have k_min: \"\\<And>i. i < k \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < k \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)", "using Sk_min"], ["proof (prove)\nusing this:\n  ?i < Suc k \\<Longrightarrow> \\<not> gt (ys ! ?i) (xs ! ?i)\n\ngoal (1 subgoal):\n 1. \\<And>i. i < k \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)", "by simp"], ["proof (state)\nthis:\n  ?i < k \\<Longrightarrow> \\<not> gt (ys ! ?i) (xs ! ?i)\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "have k_eq: \"\\<And>i. i < k \\<Longrightarrow> ys ! i = xs ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i. i < k \\<Longrightarrow> ys ! i = xs ! i", "using Sk_eq"], ["proof (prove)\nusing this:\n  ?i < Suc k \\<Longrightarrow> ys ! ?i = xs ! ?i\n\ngoal (1 subgoal):\n 1. \\<And>i. i < k \\<Longrightarrow> ys ! i = xs ! i", "by simp"], ["proof (state)\nthis:\n  ?i < k \\<Longrightarrow> ys ! ?i = xs ! ?i\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "note ih = ih0[OF _ cw len_eq k_len k_min]"], ["proof (state)\nthis:\n  \\<lbrakk>lexext gt (drop k ys) (drop k xs);\n   \\<And>i. i < k \\<Longrightarrow> i < k\\<rbrakk>\n  \\<Longrightarrow> lexext gt ys xs\n\ngoal (2 subgoals):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs\n 2. \\<And>j0 ys xs.\n       \\<lbrakk>\\<And>ys xs.\n                   \\<lbrakk>lexext gt (drop j0 ys) (drop j0 xs);\n                    cwiseext gt ys xs; length ys = length xs;\n                    j0 < length ys;\n                    \\<And>i.\n                       i < j0 \\<Longrightarrow>\n                       \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n                   \\<Longrightarrow> lexext gt ys xs;\n        lexext gt (drop (Suc j0) ys) (drop (Suc j0) xs); cwiseext gt ys xs;\n        length ys = length xs; Suc j0 < length ys;\n        \\<And>i.\n           i < Suc j0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt ys xs", "proof (cases \"k < length ys\")"], ["proof (state)\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "case k_lt_ys: True"], ["proof (state)\nthis:\n  k < length ys\n\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "note k_lt_xs = k_lt_ys[unfolded len_eq]"], ["proof (state)\nthis:\n  k < length xs\n\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "obtain x where x: \"x = xs ! k\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x. x = xs ! k \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by simp"], ["proof (state)\nthis:\n  x = xs ! k\n\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "hence y: \"x = ys ! k\""], ["proof (prove)\nusing this:\n  x = xs ! k\n\ngoal (1 subgoal):\n 1. x = ys ! k", "using Sk_eq[of k]"], ["proof (prove)\nusing this:\n  x = xs ! k\n  k < Suc k \\<Longrightarrow> ys ! k = xs ! k\n\ngoal (1 subgoal):\n 1. x = ys ! k", "by simp"], ["proof (state)\nthis:\n  x = ys ! k\n\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "have dropk_xs: \"drop k xs = x # drop (Suc k) xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop k xs = x # drop (Suc k) xs", "using k_lt_xs x"], ["proof (prove)\nusing this:\n  k < length xs\n  x = xs ! k\n\ngoal (1 subgoal):\n 1. drop k xs = x # drop (Suc k) xs", "by (simp add: Cons_nth_drop_Suc)"], ["proof (state)\nthis:\n  drop k xs = x # drop (Suc k) xs\n\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "have dropk_ys: \"drop k ys = x # drop (Suc k) ys\""], ["proof (prove)\ngoal (1 subgoal):\n 1. drop k ys = x # drop (Suc k) ys", "using k_lt_ys y"], ["proof (prove)\nusing this:\n  k < length ys\n  x = ys ! k\n\ngoal (1 subgoal):\n 1. drop k ys = x # drop (Suc k) ys", "by (simp add: Cons_nth_drop_Suc)"], ["proof (state)\nthis:\n  drop k ys = x # drop (Suc k) ys\n\ngoal (2 subgoals):\n 1. k < length ys \\<Longrightarrow> lexext gt ys xs\n 2. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. lexext gt ys xs", "by (rule ih, unfold dropk_xs dropk_ys, rule lexext_Cons_eq[OF gts_dropSk])"], ["proof (state)\nthis:\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "case False"], ["proof (state)\nthis:\n  \\<not> k < length ys\n\ngoal (1 subgoal):\n 1. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "hence \"drop k xs = []\" and \"drop k ys = []\""], ["proof (prove)\nusing this:\n  \\<not> k < length ys\n\ngoal (1 subgoal):\n 1. drop k xs = [] &&& drop k ys = []", "using len_eq"], ["proof (prove)\nusing this:\n  \\<not> k < length ys\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. drop k xs = [] &&& drop k ys = []", "by simp_all"], ["proof (state)\nthis:\n  drop k xs = []\n  drop k ys = []\n\ngoal (1 subgoal):\n 1. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "hence \"lexext gt [] []\""], ["proof (prove)\nusing this:\n  drop k xs = []\n  drop k ys = []\n\ngoal (1 subgoal):\n 1. lexext gt [] []", "using gts_dropSk"], ["proof (prove)\nusing this:\n  drop k xs = []\n  drop k ys = []\n  lexext gt (drop (Suc k) ys) (drop (Suc k) xs)\n\ngoal (1 subgoal):\n 1. lexext gt [] []", "by simp"], ["proof (state)\nthis:\n  lexext gt [] []\n\ngoal (1 subgoal):\n 1. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "hence \"lexext gt (drop k ys) (drop k xs)\""], ["proof (prove)\nusing this:\n  lexext gt [] []\n\ngoal (1 subgoal):\n 1. lexext gt (drop k ys) (drop k xs)", "by simp"], ["proof (state)\nthis:\n  lexext gt (drop k ys) (drop k xs)\n\ngoal (1 subgoal):\n 1. \\<not> k < length ys \\<Longrightarrow> lexext gt ys xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  lexext gt (drop k ys) (drop k xs)\n\ngoal (1 subgoal):\n 1. lexext gt ys xs", "by (rule ih)"], ["proof (state)\nthis:\n  lexext gt ys xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. \\<And>ys xs.\n       \\<lbrakk>lexext gt (drop 0 ys) (drop 0 xs); cwiseext gt ys xs;\n        length ys = length xs; 0 < length ys;\n        \\<And>i.\n           i < 0 \\<Longrightarrow> \\<not> gt (ys ! i) (xs ! i)\\<rbrakk>\n       \\<Longrightarrow> lexext gt ys xs", "qed simp"], ["proof (state)\nthis:\n  lexext gt ys xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs", "ultimately"], ["proof (chain)\npicking this:\n  length ys = length xs\n  lexext gt ys xs", "show ?thesis"], ["proof (prove)\nusing this:\n  length ys = length xs\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. len_lexext gt ys xs", "unfolding lenext_def"], ["proof (prove)\nusing this:\n  length ys = length xs\n  lexext gt ys xs\n\ngoal (1 subgoal):\n 1. length xs < length ys \\<or> length ys = length xs \\<and> lexext gt ys xs", "by sat"], ["proof (state)\nthis:\n  len_lexext gt ys xs\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma cwiseext_mono_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt' y x) \\<Longrightarrow> cwiseext gt ys xs \\<Longrightarrow> cwiseext gt' ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     cwiseext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> cwiseext gt' ys xs", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs. gt y x \\<longrightarrow> gt' y x;\n     length ys = length xs \\<and>\n     (\\<forall>i<length ys.\n         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n     (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs \\<and>\n                      (\\<forall>i<length ys.\n                          gt' (ys ! i) (xs ! i) \\<or>\n                          ys ! i = xs ! i) \\<and>\n                      (\\<exists>i<length ys. gt' (ys ! i) (xs ! i))", "by (induct, force, fast)"], ["", "lemma cwiseext_map_strong:\n  \"(\\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt y x \\<longrightarrow> gt (f y) (f x)) \\<Longrightarrow> cwiseext gt ys xs \\<Longrightarrow>\n   cwiseext gt (map f ys) (map f xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs.\n                   gt y x \\<longrightarrow> gt (f y) (f x);\n     cwiseext gt ys xs\\<rbrakk>\n    \\<Longrightarrow> cwiseext gt (map f ys) (map f xs)", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<forall>y\\<in>set ys.\n                \\<forall>x\\<in>set xs.\n                   gt y x \\<longrightarrow> gt (f y) (f x);\n     length ys = length xs \\<and>\n     (\\<forall>i<length ys.\n         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n     (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\\<rbrakk>\n    \\<Longrightarrow> length (map f ys) = length (map f xs) \\<and>\n                      (\\<forall>i<length (map f ys).\n                          gt (map f ys ! i) (map f xs ! i) \\<or>\n                          map f ys ! i = map f xs ! i) \\<and>\n                      (\\<exists>i<length (map f ys).\n                          gt (map f ys ! i) (map f xs ! i))", "by auto"], ["", "lemma cwiseext_irrefl: \"(\\<forall>x \\<in> set xs. \\<not> gt x x) \\<Longrightarrow> \\<not> cwiseext gt xs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> gt x x \\<Longrightarrow>\n    \\<not> cwiseext gt xs xs", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>x\\<in>set xs. \\<not> gt x x \\<Longrightarrow>\n    \\<not> (length xs = length xs \\<and>\n            (\\<forall>i<length xs.\n                gt (xs ! i) (xs ! i) \\<or> xs ! i = xs ! i) \\<and>\n            (\\<exists>i<length xs. gt (xs ! i) (xs ! i)))", "by (blast intro: nth_mem)"], ["", "lemma cwiseext_trans_strong:\n  assumes\n    \"\\<forall>z \\<in> set zs. \\<forall>y \\<in> set ys. \\<forall>x \\<in> set xs. gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\" and\n    \"cwiseext gt zs ys\" and \"cwiseext gt ys xs\"\n  shows \"cwiseext gt zs xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt zs xs", "using assms"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set zs.\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  cwiseext gt zs ys\n  cwiseext gt ys xs\n\ngoal (1 subgoal):\n 1. cwiseext gt zs xs", "unfolding cwiseext_def"], ["proof (prove)\nusing this:\n  \\<forall>z\\<in>set zs.\n     \\<forall>y\\<in>set ys.\n        \\<forall>x\\<in>set xs.\n           gt z y \\<longrightarrow> gt y x \\<longrightarrow> gt z x\n  length zs = length ys \\<and>\n  (\\<forall>i<length zs. gt (zs ! i) (ys ! i) \\<or> zs ! i = ys ! i) \\<and>\n  (\\<exists>i<length zs. gt (zs ! i) (ys ! i))\n  length ys = length xs \\<and>\n  (\\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n  (\\<exists>i<length ys. gt (ys ! i) (xs ! i))\n\ngoal (1 subgoal):\n 1. length zs = length xs \\<and>\n    (\\<forall>i<length zs.\n        gt (zs ! i) (xs ! i) \\<or> zs ! i = xs ! i) \\<and>\n    (\\<exists>i<length zs. gt (zs ! i) (xs ! i))", "by (metis (mono_tags) nth_mem)"], ["", "lemma cwiseext_compat_cons: \"cwiseext gt ys xs \\<Longrightarrow> cwiseext gt (x # ys) (x # xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt ys xs \\<Longrightarrow> cwiseext gt (x # ys) (x # xs)", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs \\<and>\n    (\\<forall>i<length ys.\n        gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n    (\\<exists>i<length ys. gt (ys ! i) (xs ! i)) \\<Longrightarrow>\n    length (x # ys) = length (x # xs) \\<and>\n    (\\<forall>i<length (x # ys).\n        gt ((x # ys) ! i) ((x # xs) ! i) \\<or>\n        (x # ys) ! i = (x # xs) ! i) \\<and>\n    (\\<exists>i<length (x # ys). gt ((x # ys) ! i) ((x # xs) ! i))", "proof (elim conjE, intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (x # ys) = length (x # xs)\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i) \\<or>\n                         (x # ys) ! i = (x # xs) ! i\n 3. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i)", "assume\n    \"length ys = length xs\" and\n    \"\\<forall>i < length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\""], ["proof (state)\nthis:\n  length ys = length xs\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (x # ys) = length (x # xs)\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i) \\<or>\n                         (x # ys) ! i = (x # xs) ! i\n 3. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i)", "thus \"\\<forall>i < length (x # ys). gt ((x # ys) ! i) ((x # xs) ! i) \\<or> (x # ys) ! i = (x # xs) ! i\""], ["proof (prove)\nusing this:\n  length ys = length xs\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (x # ys).\n       gt ((x # ys) ! i) ((x # xs) ! i) \\<or> (x # ys) ! i = (x # xs) ! i", "by (simp add: nth_Cons')"], ["proof (state)\nthis:\n  \\<forall>i<length (x # ys).\n     gt ((x # ys) ! i) ((x # xs) ! i) \\<or> (x # ys) ! i = (x # xs) ! i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (x # ys) = length (x # xs)\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (x # ys) = length (x # xs)\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i)", "assume \"\\<exists>i < length ys. gt (ys ! i) (xs ! i)\""], ["proof (state)\nthis:\n  \\<exists>i<length ys. gt (ys ! i) (xs ! i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (x # ys) = length (x # xs)\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (x # ys).\n                         gt ((x # ys) ! i) ((x # xs) ! i)", "thus \"\\<exists>i < length (x # ys). gt ((x # ys) ! i) ((x # xs) ! i)\""], ["proof (prove)\nusing this:\n  \\<exists>i<length ys. gt (ys ! i) (xs ! i)\n\ngoal (1 subgoal):\n 1. \\<exists>i<length (x # ys). gt ((x # ys) ! i) ((x # xs) ! i)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>i<length (x # ys). gt ((x # ys) ! i) ((x # xs) ! i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (x # ys) = length (x # xs)", "qed auto"], ["", "lemma cwiseext_compat_snoc: \"cwiseext gt ys xs \\<Longrightarrow> cwiseext gt (ys @ [x]) (xs @ [x])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt ys xs \\<Longrightarrow> cwiseext gt (ys @ [x]) (xs @ [x])", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs \\<and>\n    (\\<forall>i<length ys.\n        gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n    (\\<exists>i<length ys. gt (ys ! i) (xs ! i)) \\<Longrightarrow>\n    length (ys @ [x]) = length (xs @ [x]) \\<and>\n    (\\<forall>i<length (ys @ [x]).\n        gt ((ys @ [x]) ! i) ((xs @ [x]) ! i) \\<or>\n        (ys @ [x]) ! i = (xs @ [x]) ! i) \\<and>\n    (\\<exists>i<length (ys @ [x]). gt ((ys @ [x]) ! i) ((xs @ [x]) ! i))", "proof (elim conjE, intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (ys @ [x]) = length (xs @ [x])\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i) \\<or>\n                         (ys @ [x]) ! i = (xs @ [x]) ! i\n 3. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)", "assume\n    \"length ys = length xs\" and\n    \"\\<forall>i < length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\""], ["proof (state)\nthis:\n  length ys = length xs\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (ys @ [x]) = length (xs @ [x])\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i) \\<or>\n                         (ys @ [x]) ! i = (xs @ [x]) ! i\n 3. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)", "thus \"\\<forall>i < length (ys @ [x]).\n    gt ((ys @ [x]) ! i) ((xs @ [x]) ! i) \\<or> (ys @ [x]) ! i = (xs @ [x]) ! i\""], ["proof (prove)\nusing this:\n  length ys = length xs\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (ys @ [x]).\n       gt ((ys @ [x]) ! i) ((xs @ [x]) ! i) \\<or>\n       (ys @ [x]) ! i = (xs @ [x]) ! i", "by (simp add: nth_append)"], ["proof (state)\nthis:\n  \\<forall>i<length (ys @ [x]).\n     gt ((ys @ [x]) ! i) ((xs @ [x]) ! i) \\<or>\n     (ys @ [x]) ! i = (xs @ [x]) ! i\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (ys @ [x]) = length (xs @ [x])\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (ys @ [x]) = length (xs @ [x])\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)", "assume\n    \"length ys = length xs\" and\n    \"\\<exists>i < length ys. gt (ys ! i) (xs ! i)\""], ["proof (state)\nthis:\n  length ys = length xs\n  \\<exists>i<length ys. gt (ys ! i) (xs ! i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (ys @ [x]) = length (xs @ [x])\n 2. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length (ys @ [x]).\n                         gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)", "thus \"\\<exists>i < length (ys @ [x]). gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)\""], ["proof (prove)\nusing this:\n  length ys = length xs\n  \\<exists>i<length ys. gt (ys ! i) (xs ! i)\n\ngoal (1 subgoal):\n 1. \\<exists>i<length (ys @ [x]). gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)", "by (metis length_append_singleton less_Suc_eq nth_append)"], ["proof (state)\nthis:\n  \\<exists>i<length (ys @ [x]). gt ((ys @ [x]) ! i) ((xs @ [x]) ! i)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>length ys = length xs;\n     \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i;\n     \\<exists>i<length ys. gt (ys ! i) (xs ! i)\\<rbrakk>\n    \\<Longrightarrow> length (ys @ [x]) = length (xs @ [x])", "qed auto"], ["", "lemma cwiseext_compat_list:\n  assumes y_gt_x: \"gt y x\"\n  shows \"cwiseext gt (xs @ y # xs') (xs @ x # xs')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt (xs @ y # xs') (xs @ x # xs')", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (xs @ y # xs') = length (xs @ x # xs') \\<and>\n    (\\<forall>i<length (xs @ y # xs').\n        gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i) \\<or>\n        (xs @ y # xs') ! i = (xs @ x # xs') ! i) \\<and>\n    (\\<exists>i<length (xs @ y # xs').\n        gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i))", "proof (intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. length (xs @ y # xs') = length (xs @ x # xs')\n 2. \\<forall>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i) \\<or>\n       (xs @ y # xs') ! i = (xs @ x # xs') ! i\n 3. \\<exists>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)", "show \"\\<forall>i < length (xs @ y # xs'). gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)\n    \\<or> (xs @ y # xs') ! i = (xs @ x # xs') ! i\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i) \\<or>\n       (xs @ y # xs') ! i = (xs @ x # xs') ! i", "using y_gt_x"], ["proof (prove)\nusing this:\n  gt y x\n\ngoal (1 subgoal):\n 1. \\<forall>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i) \\<or>\n       (xs @ y # xs') ! i = (xs @ x # xs') ! i", "by (simp add: nth_Cons' nth_append)"], ["proof (state)\nthis:\n  \\<forall>i<length (xs @ y # xs').\n     gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i) \\<or>\n     (xs @ y # xs') ! i = (xs @ x # xs') ! i\n\ngoal (2 subgoals):\n 1. length (xs @ y # xs') = length (xs @ x # xs')\n 2. \\<exists>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. length (xs @ y # xs') = length (xs @ x # xs')\n 2. \\<exists>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)", "show \"\\<exists>i < length (xs @ y # xs'). gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)", "using y_gt_x"], ["proof (prove)\nusing this:\n  gt y x\n\ngoal (1 subgoal):\n 1. \\<exists>i<length (xs @ y # xs').\n       gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)", "by (metis add_diff_cancel_right' append_is_Nil_conv diff_less length_append\n      length_greater_0_conv list.simps(3) nth_append_length)"], ["proof (state)\nthis:\n  \\<exists>i<length (xs @ y # xs').\n     gt ((xs @ y # xs') ! i) ((xs @ x # xs') ! i)\n\ngoal (1 subgoal):\n 1. length (xs @ y # xs') = length (xs @ x # xs')", "qed auto"], ["", "lemma cwiseext_singleton: \"cwiseext gt [y] [x] \\<longleftrightarrow> gt y x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt [y] [x] = gt y x", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (length [y] = length [x] \\<and>\n     (\\<forall>i<length [y].\n         gt ([y] ! i) ([x] ! i) \\<or> [y] ! i = [x] ! i) \\<and>\n     (\\<exists>i<length [y]. gt ([y] ! i) ([x] ! i))) =\n    gt y x", "by auto"], ["", "lemma cwiseext_wf: \"wfP (\\<lambda>x y. gt y x) \\<Longrightarrow> wfP (\\<lambda>xs ys. cwiseext gt ys xs)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. wfP (\\<lambda>x y. gt y x) \\<Longrightarrow>\n    wfP (\\<lambda>xs ys. cwiseext gt ys xs)", "by (auto intro: cwiseext_imp_len_lexext wfP_subset[OF len_lexext_wf])"], ["", "lemma cwiseext_hd_or_tl: \"cwiseext gt (y # ys) (x # xs) \\<Longrightarrow> gt y x \\<or> cwiseext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt (y # ys) (x # xs) \\<Longrightarrow>\n    gt y x \\<or> cwiseext gt ys xs", "unfolding cwiseext_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. length (y # ys) = length (x # xs) \\<and>\n    (\\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n        (y # ys) ! i = (x # xs) ! i) \\<and>\n    (\\<exists>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i)) \\<Longrightarrow>\n    gt y x \\<or>\n    length ys = length xs \\<and>\n    (\\<forall>i<length ys.\n        gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n    (\\<exists>i<length ys. gt (ys ! i) (xs ! i))", "proof (elim conjE, intro disj_imp[THEN iffD2, rule_format] conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n 3. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "assume\n    \"\\<exists>i < length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i)\" and\n    \"\\<not> gt y x\""], ["proof (state)\nthis:\n  \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i)\n  \\<not> gt y x\n\ngoal (3 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n 3. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "thus \"\\<exists>i < length ys. gt (ys ! i) (xs ! i)\""], ["proof (prove)\nusing this:\n  \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i)\n  \\<not> gt y x\n\ngoal (1 subgoal):\n 1. \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "by (metis (no_types) One_nat_def diff_le_self diff_less dual_order.strict_trans2\n      length_Cons less_Suc_eq linorder_neqE_nat not_less0 nth_Cons')"], ["proof (state)\nthis:\n  \\<exists>i<length ys. gt (ys ! i) (xs ! i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     \\<not> gt y x\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i", "qed auto"], ["", "locale ext_cwiseext = ext_compat_list + ext_compat_cons\nbegin"], ["", "context\n  fixes gt :: \"'a \\<Rightarrow> 'a \\<Rightarrow> bool\"\n  assumes\n    gt_irrefl: \"\\<not> gt x x\" and\n    trans_gt: \"ext gt zs ys \\<Longrightarrow> ext gt ys xs \\<Longrightarrow> ext gt zs xs\"\nbegin"], ["", "lemma\n  assumes ys_gtcw_xs: \"cwiseext gt ys xs\"\n  shows \"ext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext gt ys xs", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ext gt ys xs", "have \"length ys = length xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. length ys = length xs", "by (rule ys_gtcw_xs[unfolded cwiseext_def, THEN conjunct1])"], ["proof (state)\nthis:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. ext gt ys xs", "thus ?thesis"], ["proof (prove)\nusing this:\n  length ys = length xs\n\ngoal (1 subgoal):\n 1. ext gt ys xs", "using ys_gtcw_xs"], ["proof (prove)\nusing this:\n  length ys = length xs\n  cwiseext gt ys xs\n\ngoal (1 subgoal):\n 1. ext gt ys xs", "proof (induct rule: list_induct2)"], ["proof (state)\ngoal (2 subgoals):\n 1. cwiseext gt [] [] \\<Longrightarrow> ext gt [] []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "case Nil"], ["proof (state)\nthis:\n  cwiseext gt [] []\n\ngoal (2 subgoals):\n 1. cwiseext gt [] [] \\<Longrightarrow> ext gt [] []\n 2. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "thus ?case"], ["proof (prove)\nusing this:\n  cwiseext gt [] []\n\ngoal (1 subgoal):\n 1. ext gt [] []", "unfolding cwiseext_def"], ["proof (prove)\nusing this:\n  length [] = length [] \\<and>\n  (\\<forall>i<length []. gt ([] ! i) ([] ! i) \\<or> [] ! i = [] ! i) \\<and>\n  (\\<exists>i<length []. gt ([] ! i) ([] ! i))\n\ngoal (1 subgoal):\n 1. ext gt [] []", "by simp"], ["proof (state)\nthis:\n  ext gt [] []\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "case (Cons y ys x xs)"], ["proof (state)\nthis:\n  length ys = length xs\n  cwiseext gt ys xs \\<Longrightarrow> ext gt ys xs\n  cwiseext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "note len_ys_eq_xs = this(1) and ih = this(2) and yys_gtcw_xxs = this(3)"], ["proof (state)\nthis:\n  length ys = length xs\n  cwiseext gt ys xs \\<Longrightarrow> ext gt ys xs\n  cwiseext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "have xys_gts_xxs: \"ext gt (x # ys) (x # xs)\" if ys_ne_xs: \"ys \\<noteq> xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ext gt (x # ys) (x # xs)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. ext gt (x # ys) (x # xs)", "have ys_gtcw_xs: \"cwiseext gt ys xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. cwiseext gt ys xs", "using yys_gtcw_xxs"], ["proof (prove)\nusing this:\n  cwiseext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. cwiseext gt ys xs", "unfolding cwiseext_def"], ["proof (prove)\nusing this:\n  length (y # ys) = length (x # xs) \\<and>\n  (\\<forall>i<length (y # ys).\n      gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n      (y # ys) ! i = (x # xs) ! i) \\<and>\n  (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\n\ngoal (1 subgoal):\n 1. length ys = length xs \\<and>\n    (\\<forall>i<length ys.\n        gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i) \\<and>\n    (\\<exists>i<length ys. gt (ys ! i) (xs ! i))", "proof (elim conjE, intro conjI)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n 3. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "assume\n          \"\\<forall>i < length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i\""], ["proof (state)\nthis:\n  \\<forall>i<length (y # ys).\n     gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n 3. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "hence ge: \"\\<forall>i < length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\""], ["proof (prove)\nusing this:\n  \\<forall>i<length (y # ys).\n     gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i\n\ngoal (1 subgoal):\n 1. \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i", "by auto"], ["proof (state)\nthis:\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n\ngoal (3 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n 3. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "thus \"\\<exists>i < length ys. gt (ys ! i) (xs ! i)\""], ["proof (prove)\nusing this:\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n\ngoal (1 subgoal):\n 1. \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "using ys_ne_xs len_ys_eq_xs nth_equalityI"], ["proof (prove)\nusing this:\n  \\<forall>i<length ys. gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i\n  ys \\<noteq> xs\n  length ys = length xs\n  \\<lbrakk>length ?xs = length ?ys;\n   \\<And>i. i < length ?xs \\<Longrightarrow> ?xs ! i = ?ys ! i\\<rbrakk>\n  \\<Longrightarrow> ?xs = ?ys\n\ngoal (1 subgoal):\n 1. \\<exists>i<length ys. gt (ys ! i) (xs ! i)", "by blast"], ["proof (state)\nthis:\n  \\<exists>i<length ys. gt (ys ! i) (xs ! i)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> length ys = length xs\n 2. \\<lbrakk>length (y # ys) = length (x # xs);\n     \\<forall>i<length (y # ys).\n        gt ((y # ys) ! i) ((x # xs) ! i) \\<or> (y # ys) ! i = (x # xs) ! i;\n     \\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i);\n     length (y # ys) = length (x # xs) \\<and>\n     (\\<forall>i<length (y # ys).\n         gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n         (y # ys) ! i = (x # xs) ! i) \\<and>\n     (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\\<rbrakk>\n    \\<Longrightarrow> \\<forall>i<length ys.\n                         gt (ys ! i) (xs ! i) \\<or> ys ! i = xs ! i", "qed auto"], ["proof (state)\nthis:\n  cwiseext gt ys xs\n\ngoal (1 subgoal):\n 1. ext gt (x # ys) (x # xs)", "hence \"ext gt ys xs\""], ["proof (prove)\nusing this:\n  cwiseext gt ys xs\n\ngoal (1 subgoal):\n 1. ext gt ys xs", "by (rule ih)"], ["proof (state)\nthis:\n  ext gt ys xs\n\ngoal (1 subgoal):\n 1. ext gt (x # ys) (x # xs)", "thus \"ext gt (x # ys) (x # xs)\""], ["proof (prove)\nusing this:\n  ext gt ys xs\n\ngoal (1 subgoal):\n 1. ext gt (x # ys) (x # xs)", "by (rule compat_cons)"], ["proof (state)\nthis:\n  ext gt (x # ys) (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ys \\<noteq> xs \\<Longrightarrow> ext gt (x # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "have \"gt y x \\<or> y = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gt y x \\<or> y = x", "using yys_gtcw_xxs"], ["proof (prove)\nusing this:\n  cwiseext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. gt y x \\<or> y = x", "unfolding cwiseext_def"], ["proof (prove)\nusing this:\n  length (y # ys) = length (x # xs) \\<and>\n  (\\<forall>i<length (y # ys).\n      gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n      (y # ys) ! i = (x # xs) ! i) \\<and>\n  (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\n\ngoal (1 subgoal):\n 1. gt y x \\<or> y = x", "by fastforce"], ["proof (state)\nthis:\n  gt y x \\<or> y = x\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "moreover"], ["proof (state)\nthis:\n  gt y x \\<or> y = x\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "{"], ["proof (state)\nthis:\n  gt y x \\<or> y = x\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "assume y_eq_x: \"y = x\""], ["proof (state)\nthis:\n  y = x\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "proof (cases \"ys = xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = xs \\<Longrightarrow> ext gt (y # ys) (x # xs)\n 2. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "case True"], ["proof (state)\nthis:\n  ys = xs\n\ngoal (2 subgoals):\n 1. ys = xs \\<Longrightarrow> ext gt (y # ys) (x # xs)\n 2. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "hence False"], ["proof (prove)\nusing this:\n  ys = xs\n\ngoal (1 subgoal):\n 1. False", "using y_eq_x gt_irrefl yys_gtcw_xxs"], ["proof (prove)\nusing this:\n  ys = xs\n  y = x\n  \\<not> gt ?x ?x\n  cwiseext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. False", "unfolding cwiseext_def"], ["proof (prove)\nusing this:\n  ys = xs\n  y = x\n  \\<not> gt ?x ?x\n  length (y # ys) = length (x # xs) \\<and>\n  (\\<forall>i<length (y # ys).\n      gt ((y # ys) ! i) ((x # xs) ! i) \\<or>\n      (y # ys) ! i = (x # xs) ! i) \\<and>\n  (\\<exists>i<length (y # ys). gt ((y # ys) ! i) ((x # xs) ! i))\n\ngoal (1 subgoal):\n 1. False", "by presburger"], ["proof (state)\nthis:\n  False\n\ngoal (2 subgoals):\n 1. ys = xs \\<Longrightarrow> ext gt (y # ys) (x # xs)\n 2. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  False\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "by sat"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "case False"], ["proof (state)\nthis:\n  ys \\<noteq> xs\n\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "using y_eq_x xys_gts_xxs"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs\n  y = x\n  ys \\<noteq> xs \\<Longrightarrow> ext gt (x # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "by simp"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "}"], ["proof (state)\nthis:\n  y = x \\<Longrightarrow> ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "moreover"], ["proof (state)\nthis:\n  y = x \\<Longrightarrow> ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "{"], ["proof (state)\nthis:\n  y = x \\<Longrightarrow> ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "assume \"y \\<noteq> x\" and \"gt y x\""], ["proof (state)\nthis:\n  y \\<noteq> x\n  gt y x\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "hence yys_gts_xys: \"ext gt (y # ys) (x # ys)\""], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  gt y x\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # ys)", "using compat_list[of _ _ gt \"[]\"]"], ["proof (prove)\nusing this:\n  y \\<noteq> x\n  gt y x\n  \\<lbrakk>?y \\<noteq> ?x; gt ?y ?x\\<rbrakk>\n  \\<Longrightarrow> ext gt ([] @ ?y # ?xs') ([] @ ?x # ?xs')\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # ys)", "by simp"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # ys)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "have ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "proof (cases \"ys = xs\")"], ["proof (state)\ngoal (2 subgoals):\n 1. ys = xs \\<Longrightarrow> ext gt (y # ys) (x # xs)\n 2. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "case ys_eq_xs: True"], ["proof (state)\nthis:\n  ys = xs\n\ngoal (2 subgoals):\n 1. ys = xs \\<Longrightarrow> ext gt (y # ys) (x # xs)\n 2. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ys = xs\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "using yys_gts_xys"], ["proof (prove)\nusing this:\n  ys = xs\n  ext gt (y # ys) (x # ys)\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "by simp"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "case False"], ["proof (state)\nthis:\n  ys \\<noteq> xs\n\ngoal (1 subgoal):\n 1. ys \\<noteq> xs \\<Longrightarrow> ext gt (y # ys) (x # xs)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "using yys_gts_xys xys_gts_xxs trans_gt"], ["proof (prove)\nusing this:\n  ys \\<noteq> xs\n  ext gt (y # ys) (x # ys)\n  ys \\<noteq> xs \\<Longrightarrow> ext gt (x # ys) (x # xs)\n  \\<lbrakk>ext gt ?zs ?ys; ext gt ?ys ?xs\\<rbrakk>\n  \\<Longrightarrow> ext gt ?zs ?xs\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "by blast"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "}"], ["proof (state)\nthis:\n  \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n  \\<Longrightarrow> ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. \\<And>x xs y ys.\n       \\<lbrakk>length xs = length ys;\n        cwiseext gt xs ys \\<Longrightarrow> ext gt xs ys;\n        cwiseext gt (x # xs) (y # ys)\\<rbrakk>\n       \\<Longrightarrow> ext gt (x # xs) (y # ys)", "ultimately"], ["proof (chain)\npicking this:\n  gt y x \\<or> y = x\n  y = x \\<Longrightarrow> ext gt (y # ys) (x # xs)\n  \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n  \\<Longrightarrow> ext gt (y # ys) (x # xs)", "show ?case"], ["proof (prove)\nusing this:\n  gt y x \\<or> y = x\n  y = x \\<Longrightarrow> ext gt (y # ys) (x # xs)\n  \\<lbrakk>y \\<noteq> x; gt y x\\<rbrakk>\n  \\<Longrightarrow> ext gt (y # ys) (x # xs)\n\ngoal (1 subgoal):\n 1. ext gt (y # ys) (x # xs)", "by sat"], ["proof (state)\nthis:\n  ext gt (y # ys) (x # xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ext gt ys xs\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"], ["", "interpretation cwiseext: ext cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext cwiseext", "by standard (fact cwiseext_mono_strong, rule cwiseext_map_strong, metis in_listsD)"], ["", "interpretation cwiseext: ext_irrefl_trans_strong cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_irrefl_trans_strong cwiseext", "by standard (fact cwiseext_irrefl, fact cwiseext_trans_strong)"], ["", "interpretation cwiseext: ext_compat_cons cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_cons cwiseext", "by standard (fact cwiseext_compat_cons)"], ["", "interpretation cwiseext: ext_compat_snoc cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_snoc cwiseext", "by standard (fact cwiseext_compat_snoc)"], ["", "interpretation cwiseext: ext_compat_list cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_compat_list cwiseext", "by standard (rule cwiseext_compat_list)"], ["", "interpretation cwiseext: ext_singleton cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_singleton cwiseext", "by standard (rule cwiseext_singleton)"], ["", "interpretation cwiseext: ext_wf cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf cwiseext", "by standard (rule cwiseext_wf)"], ["", "interpretation cwiseext: ext_hd_or_tl cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_hd_or_tl cwiseext", "by standard (rule cwiseext_hd_or_tl)"], ["", "interpretation cwiseext: ext_wf_bounded cwiseext"], ["proof (prove)\ngoal (1 subgoal):\n 1. ext_wf_bounded cwiseext", "by standard"], ["", "end"]]}