{"file_name": "/home/qj213/afp-2021-10-22/thys/Design_Theory/Designs_And_Graphs.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Design_Theory", "problem_names": ["lemma verts_not_empty: \"verts G \\<noteq> {}\"", "lemma arc_to_block_to_ends: \"{fst (arc_to_ends G e), snd (arc_to_ends G e)} = arc_to_block e\"", "lemma arc_to_block_to_ends_swap: \"{snd (arc_to_ends G e), fst (arc_to_ends G e)} = arc_to_block e\"", "lemma arc_to_ends_to_block: \"arc_to_block e = {x, y} \\<Longrightarrow> \n  arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)\"", "lemma arc_to_block_sym: \"arc_to_ends G e1 = (u, v) \\<Longrightarrow> arc_to_ends G e2 = (v, u) \\<Longrightarrow> \n  arc_to_block e1 = arc_to_block e2\"", "lemma  arcs_blocks_ends: \"(x, y) \\<in> arcs_ends G \\<Longrightarrow> {x, y} \\<in># arcs_blocks\"", "lemma arc_ends_blocks_subset: \"E \\<subseteq> arcs G \\<Longrightarrow> (x, y) \\<in> ((arc_to_ends G) ` E) \\<Longrightarrow> \n  {x, y} \\<in> (arc_to_block ` E)\"", "lemma arc_blocks_end_subset: assumes \"E \\<subseteq> arcs G\"  and \"{x, y} \\<in> (arc_to_block ` E)\"\n  shows \"(x, y) \\<in> ((arc_to_ends G) ` E) \\<or> (y, x) \\<in> ((arc_to_ends G) ` E)\"", "lemma arcs_ends_blocks: \"{x, y} \\<in># arcs_blocks \\<Longrightarrow> (x, y) \\<in> arcs_ends G \\<and> (y, x) \\<in> arcs_ends G\"", "lemma arcs_blocks_iff: \"{x, y} \\<in># arcs_blocks \\<longleftrightarrow> (x, y) \\<in> arcs_ends G \\<and> (y, x) \\<in> arcs_ends G\"", "lemma arcs_ends_wf: \"(x, y) \\<in> arcs_ends G \\<Longrightarrow> x \\<in> verts G \\<and> y \\<in> verts G\"", "lemma arcs_blocks_elem: \"bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists> x y . bl = {x, y}\"", "lemma arcs_ends_blocks_wf: \n  assumes \"bl \\<in># arcs_blocks\" \n  shows \"bl \\<subseteq> verts G\"", "lemma arcs_blocks_simple: \"bl \\<in># arcs_blocks \\<Longrightarrow> count (arcs_blocks) bl = 1\"", "lemma arcs_blocks_ne: \"arcs G \\<noteq> {} \\<Longrightarrow> arcs_blocks \\<noteq> {#}\"", "lemma (in graph) graph_block_size: assumes \"bl \\<in># arcs_blocks\" shows \"card bl = 2\"", "lemma in_out_arcs_reflexive: \"v \\<in> verts G \\<Longrightarrow> (e \\<in> (in_arcs G v) \\<Longrightarrow> \n    \\<exists> e' . (e' \\<in> (out_arcs G v) \\<and> head G e' = tail G e))\"", "lemma out_in_arcs_reflexive: \"v \\<in> verts G \\<Longrightarrow> (e \\<in> (out_arcs G v) \\<Longrightarrow> \n    \\<exists> e' . (e' \\<in> (in_arcs G v) \\<and> tail G e' = head G e))\"", "lemma in_arcs_single_per_vert: \n  assumes \"v \\<in> verts G\" and \"u \\<in> verts G\"\n  assumes \"e1 \\<in> in_arcs G v\" and \" e2 \\<in> in_arcs G v\" \n  assumes \"tail G e1 = u\" and \"tail G e2 = u\"\n  shows \"e1 = e2\"", "lemma out_arcs_single_per_vert: \n  assumes \"v \\<in> verts G\" and \"u \\<in> verts G\"\n  assumes \"e1 \\<in> out_arcs G v\" and \" e2 \\<in> out_arcs G v\" \n  assumes \"head G e1 = u\" and \"head G e2 = u\"\n  shows \"e1 = e2\"", "lemma arc_to_block_is_inj_in_arcs: \"inj_on arc_to_block (in_arcs G v)\"", "lemma arc_to_block_is_inj_out_arcs: \"inj_on arc_to_block (out_arcs G v)\"", "lemma in_out_arcs_reflexive_uniq: \"v \\<in> verts G \\<Longrightarrow> (e \\<in> (in_arcs G v) \\<Longrightarrow> \n    \\<exists>! e' . (e' \\<in> (out_arcs G v) \\<and> head G e' = tail G e))\"", "lemma out_in_arcs_reflexive_uniq: \"v \\<in> verts G \\<Longrightarrow> e \\<in> (out_arcs G v) \\<Longrightarrow> \n    \\<exists>! e' . (e' \\<in> (in_arcs G v) \\<and> tail G e' = head G e)\"", "lemma in_eq_out_arc_ends: \"(u, v) \\<in> ((arc_to_ends G) ` (in_arcs G v)) \\<longleftrightarrow> \n    (v, u) \\<in> ((arc_to_ends G) ` (out_arcs G v))\"", "lemma in_degree_eq_card_arc_ends: \"in_degree G v = card ((arc_to_ends G) ` (in_arcs G v))\"", "lemma in_degree_eq_card_arc_blocks: \"in_degree G v = card (arc_to_block ` (in_arcs G v))\"", "lemma out_degree_eq_card_arc_blocks: \"out_degree G v = card (arc_to_block ` (out_arcs G v))\"", "lemma out_degree_eq_card_arc_ends: \"out_degree G v = card ((arc_to_ends G) ` (out_arcs G v))\"", "lemma bij_betw_in_out_arcs: \"bij_betw (\\<lambda> (u, v) . (v, u)) ((arc_to_ends G) ` (in_arcs G v)) \n    ((arc_to_ends G) ` (out_arcs G v))\"", "lemma in_eq_out_degree: \"in_degree G v = out_degree G v\"", "lemma in_out_arcs_blocks: \"arc_to_block ` (in_arcs G v) = arc_to_block ` (out_arcs G v)\"", "lemma rep_vertices_in_blocks [simp]: \n  assumes \"x \\<in> verts G\"\n  shows \"size {# e \\<in># arcs_blocks . x \\<in> e #} = \\<r>\"", "lemma graph_in_degree_r_imp_reg[intro]: assumes \"graph G\"\n  assumes \"(\\<And> v . v \\<in> (verts G) \\<Longrightarrow> in_degree G v = \\<r>)\"\n  shows \"regular_graph G \\<r>\"", "lemma graph_out_degree_r_imp_reg[intro]: assumes \"graph G\"\n  assumes \"(\\<And> v . v \\<in> (verts G) \\<Longrightarrow> out_degree G v = \\<r>)\"\n  shows \"regular_graph G \\<r>\""], "translations": [["", "lemma verts_not_empty: \"verts G \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. verts G \\<noteq> {}", "using wf arcs_not_empty head_in_verts"], ["proof (prove)\nusing this:\n  wf {(x, y). x < y}\n  arcs G \\<noteq> {}\n  ?e \\<in> arcs G \\<Longrightarrow> head G ?e \\<in> verts G\n\ngoal (1 subgoal):\n 1. verts G \\<noteq> {}", "by fastforce"], ["", "end"], ["", "subsection \\<open>Arcs to Blocks\\<close>"], ["", "text \\<open>A digraph uses a pair of points to define an ordered edge. In the case of simple graphs, \nboth possible orderings will be in the arcs set. Blocks are inherently unordered, and as such \na method is required to convert between the two representations\\<close>"], ["", "context graph\nbegin"], ["", "definition arc_to_block :: \"'b \\<Rightarrow> 'a set\" where\n  \"arc_to_block e \\<equiv> {tail G e, head G e}\""], ["", "lemma arc_to_block_to_ends: \"{fst (arc_to_ends G e), snd (arc_to_ends G e)} = arc_to_block e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {fst (arc_to_ends G e), snd (arc_to_ends G e)} = arc_to_block e", "by (simp add: arc_to_ends_def arc_to_block_def)"], ["", "lemma arc_to_block_to_ends_swap: \"{snd (arc_to_ends G e), fst (arc_to_ends G e)} = arc_to_block e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {snd (arc_to_ends G e), fst (arc_to_ends G e)} = arc_to_block e", "using arc_to_block_to_ends"], ["proof (prove)\nusing this:\n  {fst (arc_to_ends G ?e), snd (arc_to_ends G ?e)} = arc_to_block ?e\n\ngoal (1 subgoal):\n 1. {snd (arc_to_ends G e), fst (arc_to_ends G e)} = arc_to_block e", "by (simp add: arc_to_block_to_ends insert_commute)"], ["", "lemma arc_to_ends_to_block: \"arc_to_block e = {x, y} \\<Longrightarrow> \n  arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_block e = {x, y} \\<Longrightarrow>\n    arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)", "by (metis arc_to_block_def arc_to_ends_def doubleton_eq_iff)"], ["", "lemma arc_to_block_sym: \"arc_to_ends G e1 = (u, v) \\<Longrightarrow> arc_to_ends G e2 = (v, u) \\<Longrightarrow> \n  arc_to_block e1 = arc_to_block e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>arc_to_ends G e1 = (u, v); arc_to_ends G e2 = (v, u)\\<rbrakk>\n    \\<Longrightarrow> arc_to_block e1 = arc_to_block e2", "by (simp add: arc_to_block_def arc_to_ends_def insert_commute)"], ["", "definition arcs_blocks :: \"'a set multiset\" where\n\"arcs_blocks \\<equiv> mset_set (arc_to_block ` (arcs G))\""], ["", "lemma  arcs_blocks_ends: \"(x, y) \\<in> arcs_ends G \\<Longrightarrow> {x, y} \\<in># arcs_blocks\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<Longrightarrow> {x, y} \\<in># arcs_blocks", "proof (auto simp add: arcs_ends_def arcs_blocks_def )"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>(x, y) = arc_to_ends G xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> {x, y} \\<in> arc_to_block ` arcs G", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>(x, y) = arc_to_ends G xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> {x, y} \\<in> arc_to_block ` arcs G", "assume assm1: \"(x, y) = arc_to_ends G xa\" and assm2: \"xa \\<in> arcs G\""], ["proof (state)\nthis:\n  (x, y) = arc_to_ends G xa\n  xa \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>(x, y) = arc_to_ends G xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> {x, y} \\<in> arc_to_block ` arcs G", "obtain z where zin: \"z \\<in> (arc_to_block ` (arcs G))\" and \"z = arc_to_block xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> arc_to_block ` arcs G; z = arc_to_block xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assm2"], ["proof (prove)\nusing this:\n  xa \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> arc_to_block ` arcs G; z = arc_to_block xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z \\<in> arc_to_block ` arcs G\n  z = arc_to_block xa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>(x, y) = arc_to_ends G xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> {x, y} \\<in> arc_to_block ` arcs G", "thus \"{x, y} \\<in> arc_to_block ` (arcs G)\""], ["proof (prove)\nusing this:\n  z \\<in> arc_to_block ` arcs G\n  z = arc_to_block xa\n\ngoal (1 subgoal):\n 1. {x, y} \\<in> arc_to_block ` arcs G", "using assm1 arc_to_block_to_ends"], ["proof (prove)\nusing this:\n  z \\<in> arc_to_block ` arcs G\n  z = arc_to_block xa\n  (x, y) = arc_to_ends G xa\n  {fst (arc_to_ends G ?e), snd (arc_to_ends G ?e)} = arc_to_block ?e\n\ngoal (1 subgoal):\n 1. {x, y} \\<in> arc_to_block ` arcs G", "by (metis fst_conv snd_conv)"], ["proof (state)\nthis:\n  {x, y} \\<in> arc_to_block ` arcs G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arc_ends_blocks_subset: \"E \\<subseteq> arcs G \\<Longrightarrow> (x, y) \\<in> ((arc_to_ends G) ` E) \\<Longrightarrow> \n  {x, y} \\<in> (arc_to_block ` E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>E \\<subseteq> arcs G; (x, y) \\<in> arc_to_ends G ` E\\<rbrakk>\n    \\<Longrightarrow> {x, y} \\<in> arc_to_block ` E", "by (auto simp add: arc_to_ends_def arc_to_block_def )"], ["", "lemma arc_blocks_end_subset: assumes \"E \\<subseteq> arcs G\"  and \"{x, y} \\<in> (arc_to_block ` E)\"\n  shows \"(x, y) \\<in> ((arc_to_ends G) ` E) \\<or> (y, x) \\<in> ((arc_to_ends G) ` E)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` E \\<or> (y, x) \\<in> arc_to_ends G ` E", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` E \\<or> (y, x) \\<in> arc_to_ends G ` E", "obtain e where \"e \\<in> E\" and \"arc_to_block e = {x,y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> E; arc_to_block e = {x, y}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  E \\<subseteq> arcs G\n  {x, y} \\<in> arc_to_block ` E\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> E; arc_to_block e = {x, y}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  e \\<in> E\n  arc_to_block e = {x, y}\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` E \\<or> (y, x) \\<in> arc_to_ends G ` E", "then"], ["proof (chain)\npicking this:\n  e \\<in> E\n  arc_to_block e = {x, y}", "have \"arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)\""], ["proof (prove)\nusing this:\n  e \\<in> E\n  arc_to_block e = {x, y}\n\ngoal (1 subgoal):\n 1. arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)", "using arc_to_ends_to_block"], ["proof (prove)\nusing this:\n  e \\<in> E\n  arc_to_block e = {x, y}\n  arc_to_block ?e = {?x, ?y} \\<Longrightarrow>\n  arc_to_ends G ?e = (?x, ?y) \\<or> arc_to_ends G ?e = (?y, ?x)\n\ngoal (1 subgoal):\n 1. arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)", "by simp"], ["proof (state)\nthis:\n  arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` E \\<or> (y, x) \\<in> arc_to_ends G ` E", "thus ?thesis"], ["proof (prove)\nusing this:\n  arc_to_ends G e = (x, y) \\<or> arc_to_ends G e = (y, x)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` E \\<or> (y, x) \\<in> arc_to_ends G ` E", "by (metis \\<open>e \\<in> E\\<close> image_iff)"], ["proof (state)\nthis:\n  (x, y) \\<in> arc_to_ends G ` E \\<or> (y, x) \\<in> arc_to_ends G ` E\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arcs_ends_blocks: \"{x, y} \\<in># arcs_blocks \\<Longrightarrow> (x, y) \\<in> arcs_ends G \\<and> (y, x) \\<in> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {x, y} \\<in># arcs_blocks \\<Longrightarrow>\n    x \\<rightarrow> y \\<and> y \\<rightarrow> x", "proof (auto simp add: arcs_ends_def arcs_blocks_def )"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> arc_to_ends G ` arcs G\n 2. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "fix xa"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> arc_to_ends G ` arcs G\n 2. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "assume assm1: \"{x, y} = arc_to_block  xa\" and assm2: \"xa \\<in> (arcs G)\""], ["proof (state)\nthis:\n  {x, y} = arc_to_block xa\n  xa \\<in> arcs G\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> arc_to_ends G ` arcs G\n 2. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "obtain z where zin: \"z \\<in> (arc_to_ends G ` (arcs G))\" and \"z = arc_to_ends G xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> arc_to_ends G ` arcs G;\n         z = arc_to_ends G xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assm2"], ["proof (prove)\nusing this:\n  xa \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (\\<And>z.\n        \\<lbrakk>z \\<in> arc_to_ends G ` arcs G;\n         z = arc_to_ends G xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  z \\<in> arc_to_ends G ` arcs G\n  z = arc_to_ends G xa\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> arc_to_ends G ` arcs G\n 2. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "then"], ["proof (chain)\npicking this:\n  z \\<in> arc_to_ends G ` arcs G\n  z = arc_to_ends G xa", "have \"z = (x, y) \\<or> z = (y, x)\""], ["proof (prove)\nusing this:\n  z \\<in> arc_to_ends G ` arcs G\n  z = arc_to_ends G xa\n\ngoal (1 subgoal):\n 1. z = (x, y) \\<or> z = (y, x)", "using arc_to_block_to_ends assm1"], ["proof (prove)\nusing this:\n  z \\<in> arc_to_ends G ` arcs G\n  z = arc_to_ends G xa\n  {fst (arc_to_ends G ?e), snd (arc_to_ends G ?e)} = arc_to_block ?e\n  {x, y} = arc_to_block xa\n\ngoal (1 subgoal):\n 1. z = (x, y) \\<or> z = (y, x)", "by (metis arc_to_ends_def doubleton_eq_iff fst_conv snd_conv)"], ["proof (state)\nthis:\n  z = (x, y) \\<or> z = (y, x)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> arc_to_ends G ` arcs G\n 2. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "(* Slow *)"], ["proof (state)\nthis:\n  z = (x, y) \\<or> z = (y, x)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (x, y) \\<in> arc_to_ends G ` arcs G\n 2. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "thus \"(x, y) \\<in> arc_to_ends G ` (arcs G)\""], ["proof (prove)\nusing this:\n  z = (x, y) \\<or> z = (y, x)\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` arcs G", "using assm2"], ["proof (prove)\nusing this:\n  z = (x, y) \\<or> z = (y, x)\n  xa \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (x, y) \\<in> arc_to_ends G ` arcs G", "by (metis arcs_ends_def arcs_ends_symmetric sym_arcs zin)"], ["proof (state)\nthis:\n  (x, y) \\<in> arc_to_ends G ` arcs G\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "assume assm1: \"{x, y} = arc_to_block  xa\" and assm2: \"xa \\<in> (arcs G)\""], ["proof (state)\nthis:\n  {x, y} = arc_to_block xa\n  xa \\<in> arcs G\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>{x, y} = arc_to_block xa; xa \\<in> arcs G\\<rbrakk>\n       \\<Longrightarrow> (y, x) \\<in> arc_to_ends G ` arcs G", "thus \"(y, x) \\<in> arc_to_ends G ` arcs G\""], ["proof (prove)\nusing this:\n  {x, y} = arc_to_block xa\n  xa \\<in> arcs G\n\ngoal (1 subgoal):\n 1. (y, x) \\<in> arc_to_ends G ` arcs G", "using arcs_ends_def"], ["proof (prove)\nusing this:\n  {x, y} = arc_to_block xa\n  xa \\<in> arcs G\n  arcs_ends ?G \\<equiv> arc_to_ends ?G ` arcs ?G\n\ngoal (1 subgoal):\n 1. (y, x) \\<in> arc_to_ends G ` arcs G", "by (metis (mono_tags, hide_lams) arc_blocks_end_subset graph_symmetric image_iff subset_refl)"], ["proof (state)\nthis:\n  (y, x) \\<in> arc_to_ends G ` arcs G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arcs_blocks_iff: \"{x, y} \\<in># arcs_blocks \\<longleftrightarrow> (x, y) \\<in> arcs_ends G \\<and> (y, x) \\<in> arcs_ends G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ({x, y} \\<in># arcs_blocks) =\n    (x \\<rightarrow> y \\<and> y \\<rightarrow> x)", "using arcs_ends_blocks arcs_blocks_ends"], ["proof (prove)\nusing this:\n  {?x, ?y} \\<in># arcs_blocks \\<Longrightarrow>\n  ?x \\<rightarrow> ?y \\<and> ?y \\<rightarrow> ?x\n  ?x \\<rightarrow> ?y \\<Longrightarrow> {?x, ?y} \\<in># arcs_blocks\n\ngoal (1 subgoal):\n 1. ({x, y} \\<in># arcs_blocks) =\n    (x \\<rightarrow> y \\<and> y \\<rightarrow> x)", "by blast"], ["", "lemma arcs_ends_wf: \"(x, y) \\<in> arcs_ends G \\<Longrightarrow> x \\<in> verts G \\<and> y \\<in> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<rightarrow> y \\<Longrightarrow>\n    x \\<in> verts G \\<and> y \\<in> verts G", "by auto"], ["", "lemma arcs_blocks_elem: \"bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists> x y . bl = {x, y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists>x y. bl = {x, y}", "apply (auto simp add: arcs_blocks_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<in> arcs G; bl = arc_to_block x\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xa y. arc_to_block x = {xa, y}", "by (meson arc_to_block_def)"], ["", "lemma arcs_ends_blocks_wf: \n  assumes \"bl \\<in># arcs_blocks\" \n  shows \"bl \\<subseteq> verts G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<subseteq> verts G", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. bl \\<subseteq> verts G", "obtain x y where blpair: \"bl = {x, y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. bl = {x, y} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using arcs_blocks_elem assms"], ["proof (prove)\nusing this:\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists>x y. ?bl = {x, y}\n  bl \\<in># arcs_blocks\n\ngoal (1 subgoal):\n 1. (\\<And>x y. bl = {x, y} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  bl = {x, y}\n\ngoal (1 subgoal):\n 1. bl \\<subseteq> verts G", "then"], ["proof (chain)\npicking this:\n  bl = {x, y}", "have \"(x, y) \\<in> arcs_ends G\""], ["proof (prove)\nusing this:\n  bl = {x, y}\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y", "using arcs_ends_blocks assms"], ["proof (prove)\nusing this:\n  bl = {x, y}\n  {?x, ?y} \\<in># arcs_blocks \\<Longrightarrow>\n  ?x \\<rightarrow> ?y \\<and> ?y \\<rightarrow> ?x\n  bl \\<in># arcs_blocks\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y", "by simp"], ["proof (state)\nthis:\n  x \\<rightarrow> y\n\ngoal (1 subgoal):\n 1. bl \\<subseteq> verts G", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<rightarrow> y\n\ngoal (1 subgoal):\n 1. bl \\<subseteq> verts G", "using arcs_ends_wf blpair"], ["proof (prove)\nusing this:\n  x \\<rightarrow> y\n  ?x \\<rightarrow> ?y \\<Longrightarrow>\n  ?x \\<in> verts G \\<and> ?y \\<in> verts G\n  bl = {x, y}\n\ngoal (1 subgoal):\n 1. bl \\<subseteq> verts G", "by auto"], ["proof (state)\nthis:\n  bl \\<subseteq> verts G\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma arcs_blocks_simple: \"bl \\<in># arcs_blocks \\<Longrightarrow> count (arcs_blocks) bl = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># arcs_blocks \\<Longrightarrow> count arcs_blocks bl = 1", "by (simp add: arcs_blocks_def)"], ["", "lemma arcs_blocks_ne: \"arcs G \\<noteq> {} \\<Longrightarrow> arcs_blocks \\<noteq> {#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arcs G \\<noteq> {} \\<Longrightarrow> arcs_blocks \\<noteq> {#}", "by (simp add: arcs_blocks_iff arcs_blocks_def mset_set_empty_iff)"], ["", "end"], ["", "subsection \\<open>Graphs are designs\\<close>"], ["", "text \\<open>Prove that a graph is a number of different types of designs\\<close>"], ["", "sublocale graph \\<subseteq> design \"verts G\" \"arcs_blocks\""], ["proof (prove)\ngoal (1 subgoal):\n 1. design (verts G) arcs_blocks", "using arcs_ends_blocks_wf arcs_blocks_elem"], ["proof (prove)\nusing this:\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> ?bl \\<subseteq> verts G\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists>x y. ?bl = {x, y}\n\ngoal (1 subgoal):\n 1. design (verts G) arcs_blocks", "by (unfold_locales) (auto)"], ["", "sublocale graph \\<subseteq> simple_design \"verts G\" \"arcs_blocks\""], ["proof (prove)\ngoal (1 subgoal):\n 1. simple_design (verts G) arcs_blocks", "using arcs_ends_blocks_wf arcs_blocks_elem arcs_blocks_simple"], ["proof (prove)\nusing this:\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> ?bl \\<subseteq> verts G\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists>x y. ?bl = {x, y}\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> multiplicity ?bl = 1\n\ngoal (1 subgoal):\n 1. simple_design (verts G) arcs_blocks", "by (unfold_locales) (auto)"], ["", "locale non_empty_graph = graph + non_empty_digraph"], ["", "sublocale non_empty_graph \\<subseteq> proper_design \"verts G\" \"arcs_blocks\""], ["proof (prove)\ngoal (1 subgoal):\n 1. proper_design (verts G) arcs_blocks", "using arcs_blocks_ne arcs_not_empty"], ["proof (prove)\nusing this:\n  arcs G \\<noteq> {} \\<Longrightarrow> arcs_blocks \\<noteq> {#}\n  arcs G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. proper_design (verts G) arcs_blocks", "by (unfold_locales) simp"], ["", "lemma (in graph) graph_block_size: assumes \"bl \\<in># arcs_blocks\" shows \"card bl = 2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card bl = 2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card bl = 2", "obtain x y where blrep: \"bl = {x, y}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x y. bl = {x, y} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms arcs_blocks_elem"], ["proof (prove)\nusing this:\n  bl \\<in># arcs_blocks\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> \\<exists>x y. ?bl = {x, y}\n\ngoal (1 subgoal):\n 1. (\\<And>x y. bl = {x, y} \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by fastforce"], ["proof (state)\nthis:\n  bl = {x, y}\n\ngoal (1 subgoal):\n 1. card bl = 2", "then"], ["proof (chain)\npicking this:\n  bl = {x, y}", "have \"(x, y) \\<in> arcs_ends G\""], ["proof (prove)\nusing this:\n  bl = {x, y}\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y", "using arcs_ends_blocks assms"], ["proof (prove)\nusing this:\n  bl = {x, y}\n  {?x, ?y} \\<in># arcs_blocks \\<Longrightarrow>\n  ?x \\<rightarrow> ?y \\<and> ?y \\<rightarrow> ?x\n  bl \\<in># arcs_blocks\n\ngoal (1 subgoal):\n 1. x \\<rightarrow> y", "by simp"], ["proof (state)\nthis:\n  x \\<rightarrow> y\n\ngoal (1 subgoal):\n 1. card bl = 2", "then"], ["proof (chain)\npicking this:\n  x \\<rightarrow> y", "have \"x \\<noteq> y\""], ["proof (prove)\nusing this:\n  x \\<rightarrow> y\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "using no_loops"], ["proof (prove)\nusing this:\n  x \\<rightarrow> y\n  ?e \\<in> arcs G \\<Longrightarrow> tail G ?e \\<noteq> head G ?e\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "using adj_not_same"], ["proof (prove)\nusing this:\n  x \\<rightarrow> y\n  ?e \\<in> arcs G \\<Longrightarrow> tail G ?e \\<noteq> head G ?e\n  ?a \\<rightarrow> ?a \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. x \\<noteq> y", "by blast"], ["proof (state)\nthis:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. card bl = 2", "thus ?thesis"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n\ngoal (1 subgoal):\n 1. card bl = 2", "using blrep"], ["proof (prove)\nusing this:\n  x \\<noteq> y\n  bl = {x, y}\n\ngoal (1 subgoal):\n 1. card bl = 2", "by simp"], ["proof (state)\nthis:\n  card bl = 2\n\ngoal:\nNo subgoals!", "qed"], ["", "sublocale non_empty_graph \\<subseteq> block_design \"verts G\" \"arcs_blocks\" 2"], ["proof (prove)\ngoal (1 subgoal):\n 1. block_design (verts G) arcs_blocks 2", "using arcs_not_empty graph_block_size arcs_blocks_ne"], ["proof (prove)\nusing this:\n  arcs G \\<noteq> {}\n  ?bl \\<in># arcs_blocks \\<Longrightarrow> card ?bl = 2\n  arcs G \\<noteq> {} \\<Longrightarrow> arcs_blocks \\<noteq> {#}\n\ngoal (1 subgoal):\n 1. block_design (verts G) arcs_blocks 2", "by (unfold_locales) simp_all"], ["", "subsection \\<open>R-regular graphs\\<close>"], ["", "text \\<open>To reason on r-regular graphs and their link to designs, we require a number of extensions to \nlemmas reasoning around the degrees of vertices\\<close>"], ["", "context sym_digraph\nbegin"], ["", "lemma in_out_arcs_reflexive: \"v \\<in> verts G \\<Longrightarrow> (e \\<in> (in_arcs G v) \\<Longrightarrow> \n    \\<exists> e' . (e' \\<in> (out_arcs G v) \\<and> head G e' = tail G e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> verts G; e \\<in> in_arcs G v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> out_arcs G v \\<and> head G e' = tail G e", "using symmetric_conv sym_arcs"], ["proof (prove)\nusing this:\n  symmetric ?G =\n  (\\<forall>e1\\<in>arcs ?G.\n      \\<exists>e2\\<in>arcs ?G.\n         tail ?G e1 = head ?G e2 \\<and> head ?G e1 = tail ?G e2)\n  symmetric G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> verts G; e \\<in> in_arcs G v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> out_arcs G v \\<and> head G e' = tail G e", "by fastforce"], ["", "lemma out_in_arcs_reflexive: \"v \\<in> verts G \\<Longrightarrow> (e \\<in> (out_arcs G v) \\<Longrightarrow> \n    \\<exists> e' . (e' \\<in> (in_arcs G v) \\<and> tail G e' = head G e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> verts G; e \\<in> out_arcs G v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> in_arcs G v \\<and> tail G e' = head G e", "using symmetric_conv sym_arcs"], ["proof (prove)\nusing this:\n  symmetric ?G =\n  (\\<forall>e1\\<in>arcs ?G.\n      \\<exists>e2\\<in>arcs ?G.\n         tail ?G e1 = head ?G e2 \\<and> head ?G e1 = tail ?G e2)\n  symmetric G\n\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> verts G; e \\<in> out_arcs G v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> in_arcs G v \\<and> tail G e' = head G e", "by fastforce"], ["", "end"], ["", "context nomulti_digraph\nbegin"], ["", "lemma in_arcs_single_per_vert: \n  assumes \"v \\<in> verts G\" and \"u \\<in> verts G\"\n  assumes \"e1 \\<in> in_arcs G v\" and \" e2 \\<in> in_arcs G v\" \n  assumes \"tail G e1 = u\" and \"tail G e2 = u\"\n  shows \"e1 = e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 = e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 = e2", "have in_arcs1: \"e1 \\<in> arcs G\" and in_arcs2: \"e2 \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<in> arcs G &&& e2 \\<in> arcs G", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> verts G\n  u \\<in> verts G\n  e1 \\<in> in_arcs G v\n  e2 \\<in> in_arcs G v\n  tail G e1 = u\n  tail G e2 = u\n\ngoal (1 subgoal):\n 1. e1 \\<in> arcs G &&& e2 \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  e1 \\<in> arcs G\n  e2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. e1 = e2", "have \"arc_to_ends G e1 = arc_to_ends G e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_ends G e1 = arc_to_ends G e2", "using assms arc_to_ends_def"], ["proof (prove)\nusing this:\n  v \\<in> verts G\n  u \\<in> verts G\n  e1 \\<in> in_arcs G v\n  e2 \\<in> in_arcs G v\n  tail G e1 = u\n  tail G e2 = u\n  arc_to_ends ?G ?e \\<equiv> (tail ?G ?e, head ?G ?e)\n\ngoal (1 subgoal):\n 1. arc_to_ends G e1 = arc_to_ends G e2", "by (metis in_in_arcs_conv)"], ["proof (state)\nthis:\n  arc_to_ends G e1 = arc_to_ends G e2\n\ngoal (1 subgoal):\n 1. e1 = e2", "thus ?thesis"], ["proof (prove)\nusing this:\n  arc_to_ends G e1 = arc_to_ends G e2\n\ngoal (1 subgoal):\n 1. e1 = e2", "using in_arcs1 in_arcs2 no_multi_arcs"], ["proof (prove)\nusing this:\n  arc_to_ends G e1 = arc_to_ends G e2\n  e1 \\<in> arcs G\n  e2 \\<in> arcs G\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n\ngoal (1 subgoal):\n 1. e1 = e2", "by simp"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma out_arcs_single_per_vert: \n  assumes \"v \\<in> verts G\" and \"u \\<in> verts G\"\n  assumes \"e1 \\<in> out_arcs G v\" and \" e2 \\<in> out_arcs G v\" \n  assumes \"head G e1 = u\" and \"head G e2 = u\"\n  shows \"e1 = e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 = e2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. e1 = e2", "have in_arcs1: \"e1 \\<in> arcs G\" and in_arcs2: \"e2 \\<in> arcs G\""], ["proof (prove)\ngoal (1 subgoal):\n 1. e1 \\<in> arcs G &&& e2 \\<in> arcs G", "using assms"], ["proof (prove)\nusing this:\n  v \\<in> verts G\n  u \\<in> verts G\n  e1 \\<in> out_arcs G v\n  e2 \\<in> out_arcs G v\n  head G e1 = u\n  head G e2 = u\n\ngoal (1 subgoal):\n 1. e1 \\<in> arcs G &&& e2 \\<in> arcs G", "by auto"], ["proof (state)\nthis:\n  e1 \\<in> arcs G\n  e2 \\<in> arcs G\n\ngoal (1 subgoal):\n 1. e1 = e2", "have \"arc_to_ends G e1 = arc_to_ends G e2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_ends G e1 = arc_to_ends G e2", "using assms arc_to_ends_def"], ["proof (prove)\nusing this:\n  v \\<in> verts G\n  u \\<in> verts G\n  e1 \\<in> out_arcs G v\n  e2 \\<in> out_arcs G v\n  head G e1 = u\n  head G e2 = u\n  arc_to_ends ?G ?e \\<equiv> (tail ?G ?e, head ?G ?e)\n\ngoal (1 subgoal):\n 1. arc_to_ends G e1 = arc_to_ends G e2", "by (metis in_out_arcs_conv)"], ["proof (state)\nthis:\n  arc_to_ends G e1 = arc_to_ends G e2\n\ngoal (1 subgoal):\n 1. e1 = e2", "thus ?thesis"], ["proof (prove)\nusing this:\n  arc_to_ends G e1 = arc_to_ends G e2\n\ngoal (1 subgoal):\n 1. e1 = e2", "using in_arcs1 in_arcs2 no_multi_arcs"], ["proof (prove)\nusing this:\n  arc_to_ends G e1 = arc_to_ends G e2\n  e1 \\<in> arcs G\n  e2 \\<in> arcs G\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n\ngoal (1 subgoal):\n 1. e1 = e2", "by simp"], ["proof (state)\nthis:\n  e1 = e2\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Some helpers on the transformation arc definition\\<close>"], ["", "context graph\nbegin"], ["", "lemma arc_to_block_is_inj_in_arcs: \"inj_on arc_to_block (in_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on arc_to_block (in_arcs G v)", "apply (auto simp add: arc_to_block_def inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>{tail G x, head G x} = {tail G y, head G x}; x \\<in> arcs G;\n        v = head G x; y \\<in> arcs G; head G y = head G x\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (metis arc_to_ends_def doubleton_eq_iff no_multi_arcs)"], ["", "lemma arc_to_block_is_inj_out_arcs: \"inj_on arc_to_block (out_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on arc_to_block (out_arcs G v)", "apply (auto simp add: arc_to_block_def inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>{tail G x, head G x} = {tail G x, head G y}; x \\<in> arcs G;\n        v = tail G x; y \\<in> arcs G; tail G y = tail G x\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (metis arc_to_ends_def doubleton_eq_iff no_multi_arcs)"], ["", "lemma in_out_arcs_reflexive_uniq: \"v \\<in> verts G \\<Longrightarrow> (e \\<in> (in_arcs G v) \\<Longrightarrow> \n    \\<exists>! e' . (e' \\<in> (out_arcs G v) \\<and> head G e' = tail G e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> verts G; e \\<in> in_arcs G v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!e'.\n                         e' \\<in> out_arcs G v \\<and> head G e' = tail G e", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> arcs G; v = head G e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> arcs G \\<and>\n                         tail G e' = head G e \\<and> head G e' = tail G e\n 2. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = head G e; e' \\<in> arcs G;\n        y \\<in> arcs G; tail G e' = head G e; head G e' = tail G e;\n        tail G y = head G e; head G y = tail G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "using symmetric_conv"], ["proof (prove)\nusing this:\n  symmetric ?G =\n  (\\<forall>e1\\<in>arcs ?G.\n      \\<exists>e2\\<in>arcs ?G.\n         tail ?G e1 = head ?G e2 \\<and> head ?G e1 = tail ?G e2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> arcs G; v = head G e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> arcs G \\<and>\n                         tail G e' = head G e \\<and> head G e' = tail G e\n 2. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = head G e; e' \\<in> arcs G;\n        y \\<in> arcs G; tail G e' = head G e; head G e' = tail G e;\n        tail G y = head G e; head G y = tail G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = head G e; e' \\<in> arcs G;\n        y \\<in> arcs G; tail G e' = head G e; head G e' = tail G e;\n        tail G y = head G e; head G y = tail G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "using out_arcs_single_per_vert"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> verts G; ?u \\<in> verts G; ?e1.0 \\<in> out_arcs G ?v;\n   ?e2.0 \\<in> out_arcs G ?v; head G ?e1.0 = ?u; head G ?e2.0 = ?u\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n\ngoal (1 subgoal):\n 1. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = head G e; e' \\<in> arcs G;\n        y \\<in> arcs G; tail G e' = head G e; head G e' = tail G e;\n        tail G y = head G e; head G y = tail G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "by (metis head_in_verts in_out_arcs_conv)"], ["", "lemma out_in_arcs_reflexive_uniq: \"v \\<in> verts G \\<Longrightarrow> e \\<in> (out_arcs G v) \\<Longrightarrow> \n    \\<exists>! e' . (e' \\<in> (in_arcs G v) \\<and> tail G e' = head G e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>v \\<in> verts G; e \\<in> out_arcs G v\\<rbrakk>\n    \\<Longrightarrow> \\<exists>!e'.\n                         e' \\<in> in_arcs G v \\<and> tail G e' = head G e", "apply auto"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> arcs G; v = tail G e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> arcs G \\<and>\n                         head G e' = tail G e \\<and> tail G e' = head G e\n 2. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = tail G e; e' \\<in> arcs G;\n        y \\<in> arcs G; head G e' = tail G e; tail G e' = head G e;\n        head G y = tail G e; tail G y = head G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "using symmetric_conv"], ["proof (prove)\nusing this:\n  symmetric ?G =\n  (\\<forall>e1\\<in>arcs ?G.\n      \\<exists>e2\\<in>arcs ?G.\n         tail ?G e1 = head ?G e2 \\<and> head ?G e1 = tail ?G e2)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>e \\<in> arcs G; v = tail G e\\<rbrakk>\n    \\<Longrightarrow> \\<exists>e'.\n                         e' \\<in> arcs G \\<and>\n                         head G e' = tail G e \\<and> tail G e' = head G e\n 2. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = tail G e; e' \\<in> arcs G;\n        y \\<in> arcs G; head G e' = tail G e; tail G e' = head G e;\n        head G y = tail G e; tail G y = head G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "apply fastforce"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = tail G e; e' \\<in> arcs G;\n        y \\<in> arcs G; head G e' = tail G e; tail G e' = head G e;\n        head G y = tail G e; tail G y = head G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "using in_arcs_single_per_vert"], ["proof (prove)\nusing this:\n  \\<lbrakk>?v \\<in> verts G; ?u \\<in> verts G; ?e1.0 \\<in> in_arcs G ?v;\n   ?e2.0 \\<in> in_arcs G ?v; tail G ?e1.0 = ?u; tail G ?e2.0 = ?u\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n\ngoal (1 subgoal):\n 1. \\<And>e' y.\n       \\<lbrakk>e \\<in> arcs G; v = tail G e; e' \\<in> arcs G;\n        y \\<in> arcs G; head G e' = tail G e; tail G e' = head G e;\n        head G y = tail G e; tail G y = head G e\\<rbrakk>\n       \\<Longrightarrow> e' = y", "by (metis tail_in_verts in_in_arcs_conv)"], ["", "lemma in_eq_out_arc_ends: \"(u, v) \\<in> ((arc_to_ends G) ` (in_arcs G v)) \\<longleftrightarrow> \n    (v, u) \\<in> ((arc_to_ends G) ` (out_arcs G v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((u, v) \\<in> arc_to_ends G ` in_arcs G v) =\n    ((v, u) \\<in> arc_to_ends G ` out_arcs G v)", "using arc_to_ends_def in_in_arcs_conv in_out_arcs_conv"], ["proof (prove)\nusing this:\n  arc_to_ends ?G ?e \\<equiv> (tail ?G ?e, head ?G ?e)\n  (?e \\<in> in_arcs ?G ?v) = (?e \\<in> arcs ?G \\<and> head ?G ?e = ?v)\n  (?e \\<in> out_arcs ?G ?v) = (?e \\<in> arcs ?G \\<and> tail ?G ?e = ?v)\n\ngoal (1 subgoal):\n 1. ((u, v) \\<in> arc_to_ends G ` in_arcs G v) =\n    ((v, u) \\<in> arc_to_ends G ` out_arcs G v)", "by (smt (z3) Pair_inject adj_in_verts(1) dominatesI image_iff out_in_arcs_reflexive_uniq)"], ["", "lemma in_degree_eq_card_arc_ends: \"in_degree G v = card ((arc_to_ends G) ` (in_arcs G v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree G v = card (arc_to_ends G ` in_arcs G v)", "apply (simp add: in_degree_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs G v) = card (arc_to_ends G ` in_arcs G v)", "using  no_multi_arcs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n\ngoal (1 subgoal):\n 1. card (in_arcs G v) = card (arc_to_ends G ` in_arcs G v)", "by (metis card_image in_arcs_in_arcs inj_onI)"], ["", "lemma in_degree_eq_card_arc_blocks: \"in_degree G v = card (arc_to_block ` (in_arcs G v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree G v = card (arc_to_block ` in_arcs G v)", "apply (simp add: in_degree_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (in_arcs G v) = card (arc_to_block ` in_arcs G v)", "using no_multi_arcs arc_to_block_is_inj_in_arcs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n  inj_on arc_to_block (in_arcs G ?v)\n\ngoal (1 subgoal):\n 1. card (in_arcs G v) = card (arc_to_block ` in_arcs G v)", "by (simp add: card_image)"], ["", "lemma out_degree_eq_card_arc_blocks: \"out_degree G v = card (arc_to_block ` (out_arcs G v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_degree G v = card (arc_to_block ` out_arcs G v)", "apply (simp add: out_degree_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (out_arcs G v) = card (arc_to_block ` out_arcs G v)", "using no_multi_arcs arc_to_block_is_inj_out_arcs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n  inj_on arc_to_block (out_arcs G ?v)\n\ngoal (1 subgoal):\n 1. card (out_arcs G v) = card (arc_to_block ` out_arcs G v)", "by (simp add: card_image)"], ["", "lemma out_degree_eq_card_arc_ends: \"out_degree G v = card ((arc_to_ends G) ` (out_arcs G v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. out_degree G v = card (arc_to_ends G ` out_arcs G v)", "apply (simp add: out_degree_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. card (out_arcs G v) = card (arc_to_ends G ` out_arcs G v)", "using no_multi_arcs"], ["proof (prove)\nusing this:\n  \\<lbrakk>?e1.0 \\<in> arcs G; ?e2.0 \\<in> arcs G;\n   arc_to_ends G ?e1.0 = arc_to_ends G ?e2.0\\<rbrakk>\n  \\<Longrightarrow> ?e1.0 = ?e2.0\n\ngoal (1 subgoal):\n 1. card (out_arcs G v) = card (arc_to_ends G ` out_arcs G v)", "by (metis card_image out_arcs_in_arcs inj_onI)"], ["", "lemma bij_betw_in_out_arcs: \"bij_betw (\\<lambda> (u, v) . (v, u)) ((arc_to_ends G) ` (in_arcs G v)) \n    ((arc_to_ends G) ` (out_arcs G v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>(u, v). (v, u)) (arc_to_ends G ` in_arcs G v)\n     (arc_to_ends G ` out_arcs G v)", "apply (auto simp add: bij_betw_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. inj_on (\\<lambda>(u, v). (v, u)) (arc_to_ends G ` in_arcs G v)\n 2. \\<And>aa ba x.\n       \\<lbrakk>(aa, ba) = arc_to_ends G x; x \\<in> arcs G;\n        v = head G x\\<rbrakk>\n       \\<Longrightarrow> (ba, aa)\n                         \\<in> arc_to_ends G ` out_arcs G (head G x)\n 3. \\<And>a b x.\n       \\<lbrakk>(a, b) = arc_to_ends G x; x \\<in> arcs G;\n        v = tail G x\\<rbrakk>\n       \\<Longrightarrow> arc_to_ends G x\n                         \\<in> (\\<lambda>x.\n                                   case x of (u, v) \\<Rightarrow> (v, u)) `\n                               arc_to_ends G ` in_arcs G (tail G x)", "apply (simp add: swap_inj_on)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>aa ba x.\n       \\<lbrakk>(aa, ba) = arc_to_ends G x; x \\<in> arcs G;\n        v = head G x\\<rbrakk>\n       \\<Longrightarrow> (ba, aa)\n                         \\<in> arc_to_ends G ` out_arcs G (head G x)\n 2. \\<And>a b x.\n       \\<lbrakk>(a, b) = arc_to_ends G x; x \\<in> arcs G;\n        v = tail G x\\<rbrakk>\n       \\<Longrightarrow> arc_to_ends G x\n                         \\<in> (\\<lambda>x.\n                                   case x of (u, v) \\<Rightarrow> (v, u)) `\n                               arc_to_ends G ` in_arcs G (tail G x)", "apply (metis Pair_inject arc_to_ends_def image_eqI in_eq_out_arc_ends in_in_arcs_conv)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>a b x.\n       \\<lbrakk>(a, b) = arc_to_ends G x; x \\<in> arcs G;\n        v = tail G x\\<rbrakk>\n       \\<Longrightarrow> arc_to_ends G x\n                         \\<in> (\\<lambda>x.\n                                   case x of (u, v) \\<Rightarrow> (v, u)) `\n                               arc_to_ends G ` in_arcs G (tail G x)", "by (metis arc_to_ends_def imageI in_eq_out_arc_ends in_out_arcs_conv pair_imageI)"], ["", "lemma in_eq_out_degree: \"in_degree G v = out_degree G v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. in_degree G v = out_degree G v", "using bij_betw_in_out_arcs bij_betw_same_card in_degree_eq_card_arc_ends \n    out_degree_eq_card_arc_ends"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>(u, v). (v, u)) (arc_to_ends G ` in_arcs G ?v)\n   (arc_to_ends G ` out_arcs G ?v)\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n  in_degree G ?v = card (arc_to_ends G ` in_arcs G ?v)\n  out_degree G ?v = card (arc_to_ends G ` out_arcs G ?v)\n\ngoal (1 subgoal):\n 1. in_degree G v = out_degree G v", "by auto"], ["", "lemma in_out_arcs_blocks: \"arc_to_block ` (in_arcs G v) = arc_to_block ` (out_arcs G v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. arc_to_block ` in_arcs G v = arc_to_block ` out_arcs G v", "proof (auto)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "fix xa"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "assume a1: \"xa \\<in> arcs G\" and a2: \"v = head G xa\""], ["proof (state)\nthis:\n  xa \\<in> arcs G\n  v = head G xa\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  xa \\<in> arcs G\n  v = head G xa", "have \"xa \\<in> in_arcs G v\""], ["proof (prove)\nusing this:\n  xa \\<in> arcs G\n  v = head G xa\n\ngoal (1 subgoal):\n 1. xa \\<in> in_arcs G v", "by simp"], ["proof (state)\nthis:\n  xa \\<in> in_arcs G v\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  xa \\<in> in_arcs G v", "obtain e where out: \"e \\<in> out_arcs G v\" and \"head G e = tail G xa\""], ["proof (prove)\nusing this:\n  xa \\<in> in_arcs G v\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> out_arcs G v; head G e = tail G xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using out_in_arcs_reflexive_uniq"], ["proof (prove)\nusing this:\n  xa \\<in> in_arcs G v\n  \\<lbrakk>?v \\<in> verts G; ?e \\<in> out_arcs G ?v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!e'.\n                       e' \\<in> in_arcs G ?v \\<and> tail G e' = head G ?e\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> out_arcs G v; head G e = tail G xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e \\<in> out_arcs G v\n  head G e = tail G xa\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  e \\<in> out_arcs G v\n  head G e = tail G xa", "have \"arc_to_ends G e = (v, tail G xa)\""], ["proof (prove)\nusing this:\n  e \\<in> out_arcs G v\n  head G e = tail G xa\n\ngoal (1 subgoal):\n 1. arc_to_ends G e = (v, tail G xa)", "by (simp add: arc_to_ends_def)"], ["proof (state)\nthis:\n  arc_to_ends G e = (v, tail G xa)\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  arc_to_ends G e = (v, tail G xa)", "have \"arc_to_block xa = arc_to_block e\""], ["proof (prove)\nusing this:\n  arc_to_ends G e = (v, tail G xa)\n\ngoal (1 subgoal):\n 1. arc_to_block xa = arc_to_block e", "using arc_to_block_sym"], ["proof (prove)\nusing this:\n  arc_to_ends G e = (v, tail G xa)\n  \\<lbrakk>arc_to_ends G ?e1.0 = (?u, ?v);\n   arc_to_ends G ?e2.0 = (?v, ?u)\\<rbrakk>\n  \\<Longrightarrow> arc_to_block ?e1.0 = arc_to_block ?e2.0\n\ngoal (1 subgoal):\n 1. arc_to_block xa = arc_to_block e", "by (metis a2 arc_to_ends_def)"], ["proof (state)\nthis:\n  arc_to_block xa = arc_to_block e\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = head G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` out_arcs G (head G xa)\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  arc_to_block xa = arc_to_block e", "show \"arc_to_block xa \\<in> arc_to_block ` out_arcs G (head G xa)\""], ["proof (prove)\nusing this:\n  arc_to_block xa = arc_to_block e\n\ngoal (1 subgoal):\n 1. arc_to_block xa \\<in> arc_to_block ` out_arcs G (head G xa)", "using out a2"], ["proof (prove)\nusing this:\n  arc_to_block xa = arc_to_block e\n  e \\<in> out_arcs G v\n  v = head G xa\n\ngoal (1 subgoal):\n 1. arc_to_block xa \\<in> arc_to_block ` out_arcs G (head G xa)", "by blast"], ["proof (state)\nthis:\n  arc_to_block xa \\<in> arc_to_block ` out_arcs G (head G xa)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "fix xa"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "assume a1: \"xa \\<in> arcs G\" and a2: \"v = tail G xa\""], ["proof (state)\nthis:\n  xa \\<in> arcs G\n  v = tail G xa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  xa \\<in> arcs G\n  v = tail G xa", "have \"xa \\<in> out_arcs G v\""], ["proof (prove)\nusing this:\n  xa \\<in> arcs G\n  v = tail G xa\n\ngoal (1 subgoal):\n 1. xa \\<in> out_arcs G v", "by simp"], ["proof (state)\nthis:\n  xa \\<in> out_arcs G v\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  xa \\<in> out_arcs G v", "obtain e where ina: \"e \\<in> in_arcs G v\" and \"tail G e = head G xa\""], ["proof (prove)\nusing this:\n  xa \\<in> out_arcs G v\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> in_arcs G v; tail G e = head G xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using out_in_arcs_reflexive_uniq"], ["proof (prove)\nusing this:\n  xa \\<in> out_arcs G v\n  \\<lbrakk>?v \\<in> verts G; ?e \\<in> out_arcs G ?v\\<rbrakk>\n  \\<Longrightarrow> \\<exists>!e'.\n                       e' \\<in> in_arcs G ?v \\<and> tail G e' = head G ?e\n\ngoal (1 subgoal):\n 1. (\\<And>e.\n        \\<lbrakk>e \\<in> in_arcs G v; tail G e = head G xa\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by force"], ["proof (state)\nthis:\n  e \\<in> in_arcs G v\n  tail G e = head G xa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  e \\<in> in_arcs G v\n  tail G e = head G xa", "have \"arc_to_ends G e = (head G xa, v)\""], ["proof (prove)\nusing this:\n  e \\<in> in_arcs G v\n  tail G e = head G xa\n\ngoal (1 subgoal):\n 1. arc_to_ends G e = (head G xa, v)", "by (simp add: arc_to_ends_def)"], ["proof (state)\nthis:\n  arc_to_ends G e = (head G xa, v)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  arc_to_ends G e = (head G xa, v)", "have \"arc_to_block xa = arc_to_block e\""], ["proof (prove)\nusing this:\n  arc_to_ends G e = (head G xa, v)\n\ngoal (1 subgoal):\n 1. arc_to_block xa = arc_to_block e", "using arc_to_block_sym"], ["proof (prove)\nusing this:\n  arc_to_ends G e = (head G xa, v)\n  \\<lbrakk>arc_to_ends G ?e1.0 = (?u, ?v);\n   arc_to_ends G ?e2.0 = (?v, ?u)\\<rbrakk>\n  \\<Longrightarrow> arc_to_block ?e1.0 = arc_to_block ?e2.0\n\ngoal (1 subgoal):\n 1. arc_to_block xa = arc_to_block e", "by (metis a2 arc_to_ends_def)"], ["proof (state)\nthis:\n  arc_to_block xa = arc_to_block e\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<in> arcs G; v = tail G xa\\<rbrakk>\n       \\<Longrightarrow> arc_to_block xa\n                         \\<in> arc_to_block ` in_arcs G (tail G xa)", "then"], ["proof (chain)\npicking this:\n  arc_to_block xa = arc_to_block e", "show \"arc_to_block xa \\<in> arc_to_block ` in_arcs G (tail G xa)\""], ["proof (prove)\nusing this:\n  arc_to_block xa = arc_to_block e\n\ngoal (1 subgoal):\n 1. arc_to_block xa \\<in> arc_to_block ` in_arcs G (tail G xa)", "using ina a2"], ["proof (prove)\nusing this:\n  arc_to_block xa = arc_to_block e\n  e \\<in> in_arcs G v\n  v = tail G xa\n\ngoal (1 subgoal):\n 1. arc_to_block xa \\<in> arc_to_block ` in_arcs G (tail G xa)", "by blast"], ["proof (state)\nthis:\n  arc_to_block xa \\<in> arc_to_block ` in_arcs G (tail G xa)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>A regular digraph is defined as one where the in degree equals the out degree which in turn \nequals some fixed integer $\\mathrm{r}$\\<close>"], ["", "locale regular_digraph = wf_digraph + \n  fixes \\<r> :: int\n  assumes in_deg_r: \"v \\<in> verts G \\<Longrightarrow> in_degree G v = \\<r>\"\n  assumes out_deg_r: \"v \\<in> verts G \\<Longrightarrow> out_degree G v = \\<r>\""], ["", "locale regular_graph = graph + regular_digraph\nbegin"], ["", "lemma rep_vertices_in_blocks [simp]: \n  assumes \"x \\<in> verts G\"\n  shows \"size {# e \\<in># arcs_blocks . x \\<in> e #} = \\<r>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "have \"\\<And> e . e \\<in> (arc_to_block ` (arcs G)) \\<Longrightarrow> x \\<in> e \\<Longrightarrow> e \\<in> (arc_to_block ` in_arcs G x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>e.\n       \\<lbrakk>e \\<in> arc_to_block ` arcs G; x \\<in> e\\<rbrakk>\n       \\<Longrightarrow> e \\<in> arc_to_block ` in_arcs G x", "using arc_to_block_def in_in_arcs_conv insert_commute insert_iff singleton_iff sym_arcs \n      symmetric_conv"], ["proof (prove)\nusing this:\n  arc_to_block ?e \\<equiv> {tail G ?e, head G ?e}\n  (?e \\<in> in_arcs ?G ?v) = (?e \\<in> arcs ?G \\<and> head ?G ?e = ?v)\n  insert ?x (insert ?y ?A) = insert ?y (insert ?x ?A)\n  (?a \\<in> insert ?b ?A) = (?a = ?b \\<or> ?a \\<in> ?A)\n  (?b \\<in> {?a}) = (?b = ?a)\n  symmetric G\n  symmetric ?G =\n  (\\<forall>e1\\<in>arcs ?G.\n      \\<exists>e2\\<in>arcs ?G.\n         tail ?G e1 = head ?G e2 \\<and> head ?G e1 = tail ?G e2)\n\ngoal (1 subgoal):\n 1. \\<And>e.\n       \\<lbrakk>e \\<in> arc_to_block ` arcs G; x \\<in> e\\<rbrakk>\n       \\<Longrightarrow> e \\<in> arc_to_block ` in_arcs G x", "by fastforce"], ["proof (state)\nthis:\n  \\<lbrakk>?e \\<in> arc_to_block ` arcs G; x \\<in> ?e\\<rbrakk>\n  \\<Longrightarrow> ?e \\<in> arc_to_block ` in_arcs G x\n\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?e \\<in> arc_to_block ` arcs G; x \\<in> ?e\\<rbrakk>\n  \\<Longrightarrow> ?e \\<in> arc_to_block ` in_arcs G x", "have \"{ e \\<in> (arc_to_block ` (arcs G)) . x \\<in> e} =  (arc_to_block ` (in_arcs G x))\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?e \\<in> arc_to_block ` arcs G; x \\<in> ?e\\<rbrakk>\n  \\<Longrightarrow> ?e \\<in> arc_to_block ` in_arcs G x\n\ngoal (1 subgoal):\n 1. {e \\<in> arc_to_block ` arcs G. x \\<in> e} = arc_to_block ` in_arcs G x", "using arc_to_block_def"], ["proof (prove)\nusing this:\n  \\<lbrakk>?e \\<in> arc_to_block ` arcs G; x \\<in> ?e\\<rbrakk>\n  \\<Longrightarrow> ?e \\<in> arc_to_block ` in_arcs G x\n  arc_to_block ?e \\<equiv> {tail G ?e, head G ?e}\n\ngoal (1 subgoal):\n 1. {e \\<in> arc_to_block ` arcs G. x \\<in> e} = arc_to_block ` in_arcs G x", "by auto"], ["proof (state)\nthis:\n  {e \\<in> arc_to_block ` arcs G. x \\<in> e} = arc_to_block ` in_arcs G x\n\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "then"], ["proof (chain)\npicking this:\n  {e \\<in> arc_to_block ` arcs G. x \\<in> e} = arc_to_block ` in_arcs G x", "have \"card { e \\<in> (arc_to_block ` (arcs G)) . x \\<in> e} = \\<r>\""], ["proof (prove)\nusing this:\n  {e \\<in> arc_to_block ` arcs G. x \\<in> e} = arc_to_block ` in_arcs G x\n\ngoal (1 subgoal):\n 1. int (card {e \\<in> arc_to_block ` arcs G. x \\<in> e}) = \\<r>", "using in_deg_r in_degree_eq_card_arc_blocks assms"], ["proof (prove)\nusing this:\n  {e \\<in> arc_to_block ` arcs G. x \\<in> e} = arc_to_block ` in_arcs G x\n  ?v \\<in> verts G \\<Longrightarrow> int (in_degree G ?v) = \\<r>\n  in_degree G ?v = card (arc_to_block ` in_arcs G ?v)\n  x \\<in> verts G\n\ngoal (1 subgoal):\n 1. int (card {e \\<in> arc_to_block ` arcs G. x \\<in> e}) = \\<r>", "by auto"], ["proof (state)\nthis:\n  int (card {e \\<in> arc_to_block ` arcs G. x \\<in> e}) = \\<r>\n\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "thus ?thesis"], ["proof (prove)\nusing this:\n  int (card {e \\<in> arc_to_block ` arcs G. x \\<in> e}) = \\<r>\n\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "using arcs_blocks_def finite_arcs"], ["proof (prove)\nusing this:\n  int (card {e \\<in> arc_to_block ` arcs G. x \\<in> e}) = \\<r>\n  arcs_blocks \\<equiv> mset_set (arc_to_block ` arcs G)\n  finite (arcs G)\n\ngoal (1 subgoal):\n 1. int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>", "by force"], ["proof (state)\nthis:\n  int (size (filter_mset ((\\<in>) x) arcs_blocks)) = \\<r>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "text \\<open>Intro rules for regular graphs\\<close>"], ["", "lemma graph_in_degree_r_imp_reg[intro]: assumes \"graph G\"\n  assumes \"(\\<And> v . v \\<in> (verts G) \\<Longrightarrow> in_degree G v = \\<r>)\"\n  shows \"regular_graph G \\<r>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "interpret g: graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  graph G\n  ?v \\<in> verts G \\<Longrightarrow> in_degree G ?v = \\<r>\n\ngoal (1 subgoal):\n 1. graph G", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "interpret wf: wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "by (simp add: g.wf_digraph_axioms)"], ["proof (state)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "using assms(2) g.in_eq_out_degree"], ["proof (prove)\nusing this:\n  ?v \\<in> verts G \\<Longrightarrow> in_degree G ?v = \\<r>\n  in_degree G ?v = out_degree G ?v\n\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "by (unfold_locales) simp_all"], ["proof (state)\nthis:\n  regular_graph G (int \\<r>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma graph_out_degree_r_imp_reg[intro]: assumes \"graph G\"\n  assumes \"(\\<And> v . v \\<in> (verts G) \\<Longrightarrow> out_degree G v = \\<r>)\"\n  shows \"regular_graph G \\<r>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "interpret g: graph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. graph G", "using assms"], ["proof (prove)\nusing this:\n  graph G\n  ?v \\<in> verts G \\<Longrightarrow> out_degree G ?v = \\<r>\n\ngoal (1 subgoal):\n 1. graph G", "by simp"], ["proof (state)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "interpret wf: wf_digraph G"], ["proof (prove)\ngoal (1 subgoal):\n 1. wf_digraph G", "by (simp add: g.wf_digraph_axioms)"], ["proof (state)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "using assms(2) g.in_eq_out_degree"], ["proof (prove)\nusing this:\n  ?v \\<in> verts G \\<Longrightarrow> out_degree G ?v = \\<r>\n  in_degree G ?v = out_degree G ?v\n\ngoal (1 subgoal):\n 1. regular_graph G (int \\<r>)", "by (unfold_locales) simp_all"], ["proof (state)\nthis:\n  regular_graph G (int \\<r>)\n\ngoal:\nNo subgoals!", "qed"], ["", "text \\<open>Regular graphs (non-empty) can be shown to be a constant rep design\\<close>"], ["", "locale non_empty_regular_graph = regular_graph + non_empty_digraph"], ["", "sublocale non_empty_regular_graph \\<subseteq> non_empty_graph"], ["proof (prove)\ngoal (1 subgoal):\n 1. Designs_And_Graphs.non_empty_graph G", "by unfold_locales"], ["", "sublocale non_empty_regular_graph \\<subseteq> constant_rep_design \"verts G\" \"arcs_blocks\" \\<r>"], ["proof (prove)\ngoal (1 subgoal):\n 1. constant_rep_design (verts G) arcs_blocks \\<r>", "using arcs_blocks_ne arcs_not_empty"], ["proof (prove)\nusing this:\n  arcs G \\<noteq> {} \\<Longrightarrow> arcs_blocks \\<noteq> {#}\n  arcs G \\<noteq> {}\n\ngoal (1 subgoal):\n 1. constant_rep_design (verts G) arcs_blocks \\<r>", "by (unfold_locales)(simp_all add: point_replication_number_def)"], ["", "end"]]}