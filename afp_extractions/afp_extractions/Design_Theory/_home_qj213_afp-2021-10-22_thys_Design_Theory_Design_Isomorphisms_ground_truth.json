{"file_name": "/home/qj213/afp-2021-10-22/thys/Design_Theory/Design_Isomorphisms.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Design_Theory", "problem_names": ["lemma image_block_set_constant_size: \"size (B) = size (blocks_image B f)\"", "lemma (in incidence_system) image_set_system_wellformed: \n  \"incidence_system (f ` \\<V>) (blocks_image \\<B> f)\"", "lemma (in finite_incidence_system) image_set_system_finite: \n  \"finite_incidence_system (f ` \\<V>) (blocks_image \\<B> f)\"", "lemma iso_eq_order: \"card \\<V> = card \\<V>'\"", "lemma iso_eq_block_num: \"size \\<B> = size \\<B>'\"", "lemma iso_block_img_alt_rep: \"{# \\<pi> ` bl . bl \\<in># \\<B>#} = \\<B>'\"", "lemma inv_iso_block_img: \"image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>\"", "lemma inverse_incidence_sys_iso: \"incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\"", "lemma iso_points_map: \"\\<pi> ` \\<V> = \\<V>'\"", "lemma iso_points_inv_map: \"(inv_into \\<V> \\<pi>) `  \\<V>' = \\<V>\"", "lemma iso_points_ss_card: \n  assumes \"ps \\<subseteq> \\<V>\"\n  shows \"card ps = card (\\<pi> ` ps)\"", "lemma iso_block_in: \"bl \\<in># \\<B> \\<Longrightarrow> (\\<pi> ` bl) \\<in># \\<B>'\"", "lemma iso_inv_block_in: \"x \\<in># \\<B>' \\<Longrightarrow> x \\<in> (`) \\<pi> ` set_mset \\<B>\"", "lemma iso_img_block_orig_exists: \"x \\<in># \\<B>' \\<Longrightarrow> \\<exists> bl . bl \\<in># \\<B> \\<and> x = \\<pi> ` bl\"", "lemma iso_blocks_map_inj: \"x \\<in># \\<B> \\<Longrightarrow> y \\<in># \\<B> \\<Longrightarrow> \\<pi> ` x = \\<pi> ` y \\<Longrightarrow> x = y\"", "lemma iso_bij_betwn_block_sets: \"bij_betw ((`) \\<pi>) (set_mset \\<B>) (set_mset \\<B>')\"", "lemma iso_bij_betwn_block_sets_inv: \"bij_betw ((`) (inv_into \\<V> \\<pi>)) (set_mset \\<B>') (set_mset \\<B>)\"", "lemma iso_bij_betw_individual_blocks: \"bl \\<in># \\<B> \\<Longrightarrow> bij_betw \\<pi> bl (\\<pi> ` bl)\"", "lemma iso_bij_betw_individual_blocks_inv: \"bl \\<in># \\<B> \\<Longrightarrow> bij_betw (inv_into \\<V> \\<pi>) (\\<pi> ` bl) bl\"", "lemma iso_bij_betw_individual_blocks_inv_alt: \n    \"bl \\<in># \\<B>' \\<Longrightarrow> bij_betw (inv_into \\<V> \\<pi>) bl ((inv_into \\<V> \\<pi>) ` bl)\"", "lemma iso_inv_block_in_alt:  \"(\\<pi> ` bl) \\<in># \\<B>' \\<Longrightarrow> bl \\<subseteq> \\<V> \\<Longrightarrow> bl \\<in># \\<B>\"", "lemma iso_img_block_not_in: \n  assumes \"x \\<notin># \\<B>\"\n  assumes \"x \\<subseteq> \\<V>\"\n  shows \"(\\<pi> ` x) \\<notin># \\<B>'\"", "lemma iso_block_multiplicity:\n  assumes  \"bl \\<subseteq> \\<V>\" \n  shows \"source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\"", "lemma iso_point_in_block_img_iff: \"p \\<in> \\<V> \\<Longrightarrow> bl \\<in># \\<B> \\<Longrightarrow> p \\<in> bl \\<longleftrightarrow> (\\<pi> p) \\<in> (\\<pi> ` bl)\"", "lemma iso_point_subset_block_iff: \"p \\<subseteq> \\<V> \\<Longrightarrow> bl \\<in># \\<B> \\<Longrightarrow> p \\<subseteq> bl \\<longleftrightarrow> (\\<pi> ` p) \\<subseteq> (\\<pi> ` bl)\"", "lemma iso_is_image_block: \"\\<B>' = blocks_image \\<B> \\<pi>\"", "lemma inverse_design_isomorphism: \"design_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\"", "lemma isomorphic_designs_symmetric: \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow> (\\<V>', \\<B>') \\<cong>\\<^sub>D (\\<V>, \\<B>)\"", "lemma isomorphic_designs_implies_bij: \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow> \\<exists> \\<pi> . bij_betw \\<pi> \\<V> \\<V>'\"", "lemma isomorphic_designs_implies_block_map: \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow> \\<exists> \\<pi> . image_mset ((`) \\<pi>) \\<B> = \\<B>'\"", "lemma isomorphic_designsI [intro]: \"design \\<V>' \\<B>' \\<Longrightarrow> bij_betw \\<pi> \\<V> \\<V>' \\<Longrightarrow> image_mset ((`) \\<pi>) \\<B> = \\<B>' \n    \\<Longrightarrow> (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')\"", "lemma eq_designs_isomorphic: \n  assumes \"\\<V> = \\<V>'\"\n  assumes \"\\<B> = \\<B>'\"\n  shows \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')\"", "lemma design_iso_point_rep_num_eq: \n  assumes \"p \\<in> \\<V>\"\n  shows \"\\<B> rep p = \\<B>' rep (\\<pi> p)\"", "lemma design_iso_rep_numbers_eq: \"source.replication_numbers = target.replication_numbers\"", "lemma design_iso_block_size_eq: \"bl \\<in># \\<B> \\<Longrightarrow> card bl = card (\\<pi> ` bl)\"", "lemma design_iso_block_sizes_eq: \"source.sys_block_sizes = target.sys_block_sizes\"", "lemma design_iso_points_index_eq: \n  assumes \"ps \\<subseteq> \\<V>\" \n  shows \"\\<B> index ps = \\<B>' index (\\<pi> ` ps)\"", "lemma design_iso_points_indices_imp: \n  assumes \"x \\<in> source.point_indices t\"\n  shows \"x \\<in> target.point_indices t\"", "lemma design_iso_points_indices_eq: \"source.point_indices t = target.point_indices t\"", "lemma design_iso_block_intersect_num_eq: \n  assumes \"b1 \\<in># \\<B>\"\n  assumes \"b2 \\<in># \\<B>\"\n  shows \"b1 |\\<inter>| b2 = (\\<pi> ` b1) |\\<inter>| (\\<pi> ` b2)\"", "lemma design_iso_inter_numbers_imp: \n  assumes \"x \\<in> source.intersection_numbers\" \n  shows \"x \\<in> target.intersection_numbers\"", "lemma design_iso_intersection_numbers: \"source.intersection_numbers = target.intersection_numbers\"", "lemma design_iso_n_intersect_num: \n  assumes \"b1 \\<in># \\<B>\" \n  assumes \"b2 \\<in># \\<B>\" \n  shows \"b1 |\\<inter>|\\<^sub>n b2 = ((\\<pi> ` b1) |\\<inter>|\\<^sub>n (\\<pi> ` b2))\"", "lemma subdesign_iso_implies:\n  assumes \"sub_set_system V B \\<V> \\<B>\"\n  shows \"sub_set_system (\\<pi> ` V) (blocks_image B \\<pi>) \\<V>' \\<B>'\"", "lemma subdesign_image_is_design: \n  assumes \"sub_set_system V B \\<V> \\<B>\"\n  assumes \"design V B\"\n  shows \"design (\\<pi> ` V) (blocks_image B \\<pi>)\"", "lemma sub_design_isomorphism: \n  assumes \"sub_set_system V B \\<V> \\<B>\"\n  assumes \"design V B\"\n  shows \"design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>\""], "translations": [["", "lemma image_block_set_constant_size: \"size (B) = size (blocks_image B f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size B = size (blocks_image B f)", "by (simp add: blocks_image_def)"], ["", "lemma (in incidence_system) image_set_system_wellformed: \n  \"incidence_system (f ` \\<V>) (blocks_image \\<B> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incidence_system (f ` \\<V>) (blocks_image \\<B> f)", "by (unfold_locales, auto simp add: blocks_image_def) (meson image_eqI wf_invalid_point)"], ["", "lemma (in finite_incidence_system) image_set_system_finite: \n  \"finite_incidence_system (f ` \\<V>) (blocks_image \\<B> f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_incidence_system (f ` \\<V>) (blocks_image \\<B> f)", "using image_set_system_wellformed finite_sets"], ["proof (prove)\nusing this:\n  incidence_system (?f ` \\<V>) (blocks_image \\<B> ?f)\n  finite \\<V>\n\ngoal (1 subgoal):\n 1. finite_incidence_system (f ` \\<V>) (blocks_image \\<B> f)", "by (intro_locales) (simp_all add: blocks_image_def finite_incidence_system_axioms.intro)"], ["", "subsection \\<open>Incidence System Isomorphisms\\<close>"], ["", "text \\<open>Isomorphism's are defined by the Handbook of Combinatorial Designs \n\\cite{colbournHandbookCombinatorialDesigns2007}\\<close>"], ["", "locale incidence_system_isomorphism = source: incidence_system \\<V> \\<B> + target: incidence_system \\<V>' \\<B>'\n  for \"\\<V>\" and \"\\<B>\" and \"\\<V>'\" and \"\\<B>'\" + fixes bij_map (\"\\<pi>\")\n  assumes bij: \"bij_betw \\<pi> \\<V> \\<V>'\"\n  assumes block_img: \"image_mset ((`) \\<pi>) \\<B> = \\<B>'\"\nbegin"], ["", "lemma iso_eq_order: \"card \\<V> = card \\<V>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card \\<V> = card \\<V>'", "using bij bij_betw_same_card"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. card \\<V> = card \\<V>'", "by auto"], ["", "lemma iso_eq_block_num: \"size \\<B> = size \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size \\<B> = size \\<B>'", "using block_img"], ["proof (prove)\nusing this:\n  image_mset ((`) \\<pi>) \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. size \\<B> = size \\<B>'", "by (metis size_image_mset)"], ["", "lemma iso_block_img_alt_rep: \"{# \\<pi> ` bl . bl \\<in># \\<B>#} = \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset ((`) \\<pi>) \\<B> = \\<B>'", "using block_img"], ["proof (prove)\nusing this:\n  image_mset ((`) \\<pi>) \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. image_mset ((`) \\<pi>) \\<B> = \\<B>'", "by simp"], ["", "lemma inv_iso_block_img: \"image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "have \"\\<And> x. x \\<in> \\<V> \\<Longrightarrow> ((inv_into \\<V> \\<pi>) \\<circ> \\<pi>) x = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<V> \\<Longrightarrow>\n       (inv_into \\<V> \\<pi> \\<circ> \\<pi>) x = x", "using bij bij_betw_inv_into_left comp_apply"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?a \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> inv_into ?A ?f (?f ?a) = ?a\n  (?f \\<circ> ?g) ?x = ?f (?g ?x)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> \\<V> \\<Longrightarrow>\n       (inv_into \\<V> \\<pi> \\<circ> \\<pi>) x = x", "by fastforce"], ["proof (state)\nthis:\n  ?x \\<in> \\<V> \\<Longrightarrow>\n  (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "then"], ["proof (chain)\npicking this:\n  ?x \\<in> \\<V> \\<Longrightarrow>\n  (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x", "have \"\\<And> bl x . bl \\<in># \\<B> \\<Longrightarrow> x \\<in> bl  \\<Longrightarrow> ((inv_into \\<V> \\<pi>) \\<circ> \\<pi>) x = x\""], ["proof (prove)\nusing this:\n  ?x \\<in> \\<V> \\<Longrightarrow>\n  (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x\n\ngoal (1 subgoal):\n 1. \\<And>bl x.\n       \\<lbrakk>bl \\<in># \\<B>; x \\<in> bl\\<rbrakk>\n       \\<Longrightarrow> (inv_into \\<V> \\<pi> \\<circ> \\<pi>) x = x", "using source.wellformed"], ["proof (prove)\nusing this:\n  ?x \\<in> \\<V> \\<Longrightarrow>\n  (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x\n  ?b \\<in># \\<B> \\<Longrightarrow> ?b \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. \\<And>bl x.\n       \\<lbrakk>bl \\<in># \\<B>; x \\<in> bl\\<rbrakk>\n       \\<Longrightarrow> (inv_into \\<V> \\<pi> \\<circ> \\<pi>) x = x", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>?bl \\<in># \\<B>; ?x \\<in> ?bl\\<rbrakk>\n  \\<Longrightarrow> (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?bl \\<in># \\<B>; ?x \\<in> ?bl\\<rbrakk>\n  \\<Longrightarrow> (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x", "have img: \"\\<And> bl . bl \\<in># \\<B> \\<Longrightarrow> image ((inv_into \\<V> \\<pi>) \\<circ> \\<pi>) bl = bl\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?bl \\<in># \\<B>; ?x \\<in> ?bl\\<rbrakk>\n  \\<Longrightarrow> (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ?x = ?x\n\ngoal (1 subgoal):\n 1. \\<And>bl.\n       bl \\<in># \\<B> \\<Longrightarrow>\n       (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ` bl = bl", "by simp"], ["proof (state)\nthis:\n  ?bl \\<in># \\<B> \\<Longrightarrow>\n  (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ` ?bl = ?bl\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "have \"image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = image_mset ((`) (inv_into \\<V> \\<pi>)) (image_mset ((`) \\<pi>) \\<B>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n    image_mset ((`) (inv_into \\<V> \\<pi>)) (image_mset ((`) \\<pi>) \\<B>)", "using block_img"], ["proof (prove)\nusing this:\n  image_mset ((`) \\<pi>) \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n    image_mset ((`) (inv_into \\<V> \\<pi>)) (image_mset ((`) \\<pi>) \\<B>)", "by simp"], ["proof (state)\nthis:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n  image_mset ((`) (inv_into \\<V> \\<pi>)) (image_mset ((`) \\<pi>) \\<B>)\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "then"], ["proof (chain)\npicking this:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n  image_mset ((`) (inv_into \\<V> \\<pi>)) (image_mset ((`) \\<pi>) \\<B>)", "have \"image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = image_mset ((`) ((inv_into \\<V> \\<pi>) \\<circ> \\<pi>)) \\<B>\""], ["proof (prove)\nusing this:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n  image_mset ((`) (inv_into \\<V> \\<pi>)) (image_mset ((`) \\<pi>) \\<B>)\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n    image_mset ((`) (inv_into \\<V> \\<pi> \\<circ> \\<pi>)) \\<B>", "by (metis (no_types, hide_lams) comp_apply image_comp multiset.map_comp multiset.map_cong0)"], ["proof (state)\nthis:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n  image_mset ((`) (inv_into \\<V> \\<pi> \\<circ> \\<pi>)) \\<B>\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "thus ?thesis"], ["proof (prove)\nusing this:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n  image_mset ((`) (inv_into \\<V> \\<pi> \\<circ> \\<pi>)) \\<B>\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "using img"], ["proof (prove)\nusing this:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' =\n  image_mset ((`) (inv_into \\<V> \\<pi> \\<circ> \\<pi>)) \\<B>\n  ?bl \\<in># \\<B> \\<Longrightarrow>\n  (inv_into \\<V> \\<pi> \\<circ> \\<pi>) ` ?bl = ?bl\n\ngoal (1 subgoal):\n 1. image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>", "by simp"], ["proof (state)\nthis:\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma inverse_incidence_sys_iso: \"incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)", "using bij bij_betw_inv_into inv_iso_block_img"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n  bij_betw ?f ?A ?B \\<Longrightarrow> bij_betw (inv_into ?A ?f) ?B ?A\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>\n\ngoal (1 subgoal):\n 1. incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)", "by (unfold_locales) simp"], ["", "lemma iso_points_map: \"\\<pi> ` \\<V> = \\<V>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` \\<V> = \\<V>'", "using bij"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n\ngoal (1 subgoal):\n 1. \\<pi> ` \\<V> = \\<V>'", "by (simp add: bij_betw_imp_surj_on)"], ["", "lemma iso_points_inv_map: \"(inv_into \\<V> \\<pi>) `  \\<V>' = \\<V>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv_into \\<V> \\<pi> ` \\<V>' = \\<V>", "using incidence_system_isomorphism.iso_points_map inverse_incidence_sys_iso"], ["proof (prove)\nusing this:\n  incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>'\n   ?bij_map \\<Longrightarrow>\n  ?bij_map ` ?\\<V> = ?\\<V>'\n  incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\n\ngoal (1 subgoal):\n 1. inv_into \\<V> \\<pi> ` \\<V>' = \\<V>", "by blast"], ["", "lemma iso_points_ss_card: \n  assumes \"ps \\<subseteq> \\<V>\"\n  shows \"card ps = card (\\<pi> ` ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card ps = card (\\<pi> ` ps)", "using assms bij bij_betw_same_card bij_betw_subset"], ["proof (prove)\nusing this:\n  ps \\<subseteq> \\<V>\n  bij_betw \\<pi> \\<V> \\<V>'\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?B \\<subseteq> ?A; ?f ` ?B = ?B'\\<rbrakk>\n  \\<Longrightarrow> bij_betw ?f ?B ?B'\n\ngoal (1 subgoal):\n 1. card ps = card (\\<pi> ` ps)", "by blast"], ["", "lemma iso_block_in: \"bl \\<in># \\<B> \\<Longrightarrow> (\\<pi> ` bl) \\<in># \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow> \\<pi> ` bl \\<in># \\<B>'", "using iso_block_img_alt_rep"], ["proof (prove)\nusing this:\n  image_mset ((`) \\<pi>) \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow> \\<pi> ` bl \\<in># \\<B>'", "by (metis image_eqI in_image_mset)"], ["", "lemma iso_inv_block_in: \"x \\<in># \\<B>' \\<Longrightarrow> x \\<in> (`) \\<pi> ` set_mset \\<B>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in># \\<B>' \\<Longrightarrow> x \\<in> (`) \\<pi> ` set_mset \\<B>", "by (metis block_img in_image_mset)"], ["", "lemma iso_img_block_orig_exists: \"x \\<in># \\<B>' \\<Longrightarrow> \\<exists> bl . bl \\<in># \\<B> \\<and> x = \\<pi> ` bl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in># \\<B>' \\<Longrightarrow>\n    \\<exists>bl. bl \\<in># \\<B> \\<and> x = \\<pi> ` bl", "using iso_inv_block_in"], ["proof (prove)\nusing this:\n  ?x \\<in># \\<B>' \\<Longrightarrow> ?x \\<in> (`) \\<pi> ` set_mset \\<B>\n\ngoal (1 subgoal):\n 1. x \\<in># \\<B>' \\<Longrightarrow>\n    \\<exists>bl. bl \\<in># \\<B> \\<and> x = \\<pi> ` bl", "by blast"], ["", "lemma iso_blocks_map_inj: \"x \\<in># \\<B> \\<Longrightarrow> y \\<in># \\<B> \\<Longrightarrow> \\<pi> ` x = \\<pi> ` y \\<Longrightarrow> x = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in># \\<B>; y \\<in># \\<B>; \\<pi> ` x = \\<pi> ` y\\<rbrakk>\n    \\<Longrightarrow> x = y", "using image_inv_into_cancel incidence_system.wellformed iso_points_inv_map iso_points_map"], ["proof (prove)\nusing this:\n  \\<lbrakk>?f ` ?A = ?A'; ?B' \\<subseteq> ?A'\\<rbrakk>\n  \\<Longrightarrow> ?f ` inv_into ?A ?f ` ?B' = ?B'\n  \\<lbrakk>incidence_system ?point_set ?block_collection;\n   ?b \\<in># ?block_collection\\<rbrakk>\n  \\<Longrightarrow> ?b \\<subseteq> ?point_set\n  inv_into \\<V> \\<pi> ` \\<V>' = \\<V>\n  \\<pi> ` \\<V> = \\<V>'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in># \\<B>; y \\<in># \\<B>; \\<pi> ` x = \\<pi> ` y\\<rbrakk>\n    \\<Longrightarrow> x = y", "by (metis (no_types, lifting) source.incidence_system_axioms subset_image_iff)"], ["", "lemma iso_bij_betwn_block_sets: \"bij_betw ((`) \\<pi>) (set_mset \\<B>) (set_mset \\<B>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((`) \\<pi>) (set_mset \\<B>) (set_mset \\<B>')", "apply ( simp add: bij_betw_def inj_on_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>#\\<B>.\n        \\<forall>y\\<in>#\\<B>.\n           \\<pi> ` x = \\<pi> ` y \\<longrightarrow> x = y) \\<and>\n    (`) \\<pi> ` set_mset \\<B> = set_mset \\<B>'", "using iso_block_in iso_inv_block_in iso_blocks_map_inj"], ["proof (prove)\nusing this:\n  ?bl \\<in># \\<B> \\<Longrightarrow> \\<pi> ` ?bl \\<in># \\<B>'\n  ?x \\<in># \\<B>' \\<Longrightarrow> ?x \\<in> (`) \\<pi> ` set_mset \\<B>\n  \\<lbrakk>?x \\<in># \\<B>; ?y \\<in># \\<B>; \\<pi> ` ?x = \\<pi> ` ?y\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. (\\<forall>x\\<in>#\\<B>.\n        \\<forall>y\\<in>#\\<B>.\n           \\<pi> ` x = \\<pi> ` y \\<longrightarrow> x = y) \\<and>\n    (`) \\<pi> ` set_mset \\<B> = set_mset \\<B>'", "by auto"], ["", "lemma iso_bij_betwn_block_sets_inv: \"bij_betw ((`) (inv_into \\<V> \\<pi>)) (set_mset \\<B>') (set_mset \\<B>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((`) (inv_into \\<V> \\<pi>)) (set_mset \\<B>') (set_mset \\<B>)", "using incidence_system_isomorphism.iso_bij_betwn_block_sets inverse_incidence_sys_iso"], ["proof (prove)\nusing this:\n  incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>'\n   ?bij_map \\<Longrightarrow>\n  bij_betw ((`) ?bij_map) (set_mset ?\\<B>) (set_mset ?\\<B>')\n  incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\n\ngoal (1 subgoal):\n 1. bij_betw ((`) (inv_into \\<V> \\<pi>)) (set_mset \\<B>') (set_mset \\<B>)", "by blast"], ["", "lemma iso_bij_betw_individual_blocks: \"bl \\<in># \\<B> \\<Longrightarrow> bij_betw \\<pi> bl (\\<pi> ` bl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow> bij_betw \\<pi> bl (\\<pi> ` bl)", "using bij bij_betw_subset source.wellformed"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?B \\<subseteq> ?A; ?f ` ?B = ?B'\\<rbrakk>\n  \\<Longrightarrow> bij_betw ?f ?B ?B'\n  ?b \\<in># \\<B> \\<Longrightarrow> ?b \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow> bij_betw \\<pi> bl (\\<pi> ` bl)", "by blast"], ["", "lemma iso_bij_betw_individual_blocks_inv: \"bl \\<in># \\<B> \\<Longrightarrow> bij_betw (inv_into \\<V> \\<pi>) (\\<pi> ` bl) bl\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow>\n    bij_betw (inv_into \\<V> \\<pi>) (\\<pi> ` bl) bl", "using bij bij_betw_subset source.wellformed bij_betw_inv_into_subset"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?B \\<subseteq> ?A; ?f ` ?B = ?B'\\<rbrakk>\n  \\<Longrightarrow> bij_betw ?f ?B ?B'\n  ?b \\<in># \\<B> \\<Longrightarrow> ?b \\<subseteq> \\<V>\n  \\<lbrakk>bij_betw ?f ?A ?A'; ?B \\<subseteq> ?A; ?f ` ?B = ?B'\\<rbrakk>\n  \\<Longrightarrow> bij_betw (inv_into ?A ?f) ?B' ?B\n\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow>\n    bij_betw (inv_into \\<V> \\<pi>) (\\<pi> ` bl) bl", "by fastforce"], ["", "lemma iso_bij_betw_individual_blocks_inv_alt: \n    \"bl \\<in># \\<B>' \\<Longrightarrow> bij_betw (inv_into \\<V> \\<pi>) bl ((inv_into \\<V> \\<pi>) ` bl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># \\<B>' \\<Longrightarrow>\n    bij_betw (inv_into \\<V> \\<pi>) bl (inv_into \\<V> \\<pi> ` bl)", "using incidence_system_isomorphism.iso_bij_betw_individual_blocks inverse_incidence_sys_iso"], ["proof (prove)\nusing this:\n  \\<lbrakk>incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map;\n   ?bl \\<in># ?\\<B>\\<rbrakk>\n  \\<Longrightarrow> bij_betw ?bij_map ?bl (?bij_map ` ?bl)\n  incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\n\ngoal (1 subgoal):\n 1. bl \\<in># \\<B>' \\<Longrightarrow>\n    bij_betw (inv_into \\<V> \\<pi>) bl (inv_into \\<V> \\<pi> ` bl)", "by blast"], ["", "lemma iso_inv_block_in_alt:  \"(\\<pi> ` bl) \\<in># \\<B>' \\<Longrightarrow> bl \\<subseteq> \\<V> \\<Longrightarrow> bl \\<in># \\<B>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi> ` bl \\<in># \\<B>'; bl \\<subseteq> \\<V>\\<rbrakk>\n    \\<Longrightarrow> bl \\<in># \\<B>", "using image_eqI image_inv_into_cancel inv_iso_block_img iso_points_inv_map"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b = ?f ?x; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> ?b \\<in> ?f ` ?A\n  \\<lbrakk>?f ` ?A = ?A'; ?B' \\<subseteq> ?A'\\<rbrakk>\n  \\<Longrightarrow> ?f ` inv_into ?A ?f ` ?B' = ?B'\n  image_mset ((`) (inv_into \\<V> \\<pi>)) \\<B>' = \\<B>\n  inv_into \\<V> \\<pi> ` \\<V>' = \\<V>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<pi> ` bl \\<in># \\<B>'; bl \\<subseteq> \\<V>\\<rbrakk>\n    \\<Longrightarrow> bl \\<in># \\<B>", "by (metis (no_types, lifting) iso_points_map multiset.set_map subset_image_iff)"], ["", "lemma iso_img_block_not_in: \n  assumes \"x \\<notin># \\<B>\"\n  assumes \"x \\<subseteq> \\<V>\"\n  shows \"(\\<pi> ` x) \\<notin># \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` x \\<notin># \\<B>'", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> \\<pi> ` x \\<notin># \\<B>' \\<Longrightarrow> False", "assume a: \"\\<not> \\<pi> ` x \\<notin># \\<B>'\""], ["proof (state)\nthis:\n  \\<not> \\<pi> ` x \\<notin># \\<B>'\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi> ` x \\<notin># \\<B>' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> \\<pi> ` x \\<notin># \\<B>'", "have a: \"\\<pi> ` x \\<in># \\<B>'\""], ["proof (prove)\nusing this:\n  \\<not> \\<pi> ` x \\<notin># \\<B>'\n\ngoal (1 subgoal):\n 1. \\<pi> ` x \\<in># \\<B>'", "by simp"], ["proof (state)\nthis:\n  \\<pi> ` x \\<in># \\<B>'\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi> ` x \\<notin># \\<B>' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<pi> ` x \\<in># \\<B>'", "have \"\\<And> y . y \\<in> (\\<pi> ` x) \\<Longrightarrow> (inv_into \\<V> \\<pi>) y \\<in> \\<V>\""], ["proof (prove)\nusing this:\n  \\<pi> ` x \\<in># \\<B>'\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> \\<pi> ` x \\<Longrightarrow> inv_into \\<V> \\<pi> y \\<in> \\<V>", "using target.wf_invalid_point iso_points_inv_map"], ["proof (prove)\nusing this:\n  \\<pi> ` x \\<in># \\<B>'\n  \\<lbrakk>?x \\<notin> \\<V>'; ?b \\<in># \\<B>'\\<rbrakk>\n  \\<Longrightarrow> ?x \\<notin> ?b\n  inv_into \\<V> \\<pi> ` \\<V>' = \\<V>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> \\<pi> ` x \\<Longrightarrow> inv_into \\<V> \\<pi> y \\<in> \\<V>", "by auto"], ["proof (state)\nthis:\n  ?y \\<in> \\<pi> ` x \\<Longrightarrow> inv_into \\<V> \\<pi> ?y \\<in> \\<V>\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi> ` x \\<notin># \\<B>' \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ?y \\<in> \\<pi> ` x \\<Longrightarrow> inv_into \\<V> \\<pi> ?y \\<in> \\<V>", "have \"((`) (inv_into \\<V> \\<pi>)) (\\<pi> ` x) \\<in># \\<B>\""], ["proof (prove)\nusing this:\n  ?y \\<in> \\<pi> ` x \\<Longrightarrow> inv_into \\<V> \\<pi> ?y \\<in> \\<V>\n\ngoal (1 subgoal):\n 1. inv_into \\<V> \\<pi> ` \\<pi> ` x \\<in># \\<B>", "using iso_bij_betwn_block_sets_inv"], ["proof (prove)\nusing this:\n  ?y \\<in> \\<pi> ` x \\<Longrightarrow> inv_into \\<V> \\<pi> ?y \\<in> \\<V>\n  bij_betw ((`) (inv_into \\<V> \\<pi>)) (set_mset \\<B>') (set_mset \\<B>)\n\ngoal (1 subgoal):\n 1. inv_into \\<V> \\<pi> ` \\<pi> ` x \\<in># \\<B>", "by (meson a bij_betw_apply)"], ["proof (state)\nthis:\n  inv_into \\<V> \\<pi> ` \\<pi> ` x \\<in># \\<B>\n\ngoal (1 subgoal):\n 1. \\<not> \\<pi> ` x \\<notin># \\<B>' \\<Longrightarrow> False", "thus False"], ["proof (prove)\nusing this:\n  inv_into \\<V> \\<pi> ` \\<pi> ` x \\<in># \\<B>\n\ngoal (1 subgoal):\n 1. False", "using a assms(1) assms(2) iso_inv_block_in_alt"], ["proof (prove)\nusing this:\n  inv_into \\<V> \\<pi> ` \\<pi> ` x \\<in># \\<B>\n  \\<pi> ` x \\<in># \\<B>'\n  x \\<notin># \\<B>\n  x \\<subseteq> \\<V>\n  \\<lbrakk>\\<pi> ` ?bl \\<in># \\<B>'; ?bl \\<subseteq> \\<V>\\<rbrakk>\n  \\<Longrightarrow> ?bl \\<in># \\<B>\n\ngoal (1 subgoal):\n 1. False", "by blast"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_block_multiplicity:\n  assumes  \"bl \\<subseteq> \\<V>\" \n  shows \"source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "proof (cases \"bl \\<in># \\<B>\")"], ["proof (state)\ngoal (2 subgoals):\n 1. bl \\<in># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n 2. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "case True"], ["proof (state)\nthis:\n  bl \\<in># \\<B>\n\ngoal (2 subgoals):\n 1. bl \\<in># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n 2. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "have \"inj_on ((`) \\<pi>) (set_mset \\<B>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) \\<pi>) (set_mset \\<B>)", "using bij_betw_imp_inj_on iso_bij_betwn_block_sets"], ["proof (prove)\nusing this:\n  bij_betw ?f ?A ?B \\<Longrightarrow> inj_on ?f ?A\n  bij_betw ((`) \\<pi>) (set_mset \\<B>) (set_mset \\<B>')\n\ngoal (1 subgoal):\n 1. inj_on ((`) \\<pi>) (set_mset \\<B>)", "by auto"], ["proof (state)\nthis:\n  inj_on ((`) \\<pi>) (set_mset \\<B>)\n\ngoal (2 subgoals):\n 1. bl \\<in># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n 2. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "then"], ["proof (chain)\npicking this:\n  inj_on ((`) \\<pi>) (set_mset \\<B>)", "have \"count \\<B> bl = count \\<B>' (\\<pi> ` bl)\""], ["proof (prove)\nusing this:\n  inj_on ((`) \\<pi>) (set_mset \\<B>)\n\ngoal (1 subgoal):\n 1. source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "using count_image_mset_le_count_inj_on count_image_mset_ge_count True block_img inv_into_f_f \n      less_le_not_le order.not_eq_order_implies_strict"], ["proof (prove)\nusing this:\n  inj_on ((`) \\<pi>) (set_mset \\<B>)\n  inj_on ?f (set_mset ?M) \\<Longrightarrow>\n  count (image_mset ?f ?M) ?y \\<le> count ?M (inv_into (set_mset ?M) ?f ?y)\n  count ?A ?b \\<le> count (image_mset ?f ?A) (?f ?b)\n  bl \\<in># \\<B>\n  image_mset ((`) \\<pi>) \\<B> = \\<B>'\n  \\<lbrakk>inj_on ?f ?A; ?x \\<in> ?A\\<rbrakk>\n  \\<Longrightarrow> inv_into ?A ?f (?f ?x) = ?x\n  (?x < ?y) = (?x \\<le> ?y \\<and> \\<not> ?y \\<le> ?x)\n  \\<lbrakk>?a \\<noteq> ?b; ?a \\<le> ?b\\<rbrakk> \\<Longrightarrow> ?a < ?b\n\ngoal (1 subgoal):\n 1. source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "by metis"], ["proof (state)\nthis:\n  source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n\ngoal (2 subgoals):\n 1. bl \\<in># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n 2. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "thus ?thesis"], ["proof (prove)\nusing this:\n  source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n\ngoal (1 subgoal):\n 1. source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "by simp"], ["proof (state)\nthis:\n  source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n\ngoal (1 subgoal):\n 1. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "case False"], ["proof (state)\nthis:\n  bl \\<notin># \\<B>\n\ngoal (1 subgoal):\n 1. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "have s_mult: \"source.multiplicity bl = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. source.multiplicity bl = 0", "by (simp add: False count_eq_zero_iff)"], ["proof (state)\nthis:\n  source.multiplicity bl = 0\n\ngoal (1 subgoal):\n 1. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "then"], ["proof (chain)\npicking this:\n  source.multiplicity bl = 0", "have \"target.multiplicity (\\<pi> ` bl) = 0\""], ["proof (prove)\nusing this:\n  source.multiplicity bl = 0\n\ngoal (1 subgoal):\n 1. target.multiplicity (\\<pi> ` bl) = 0", "using False count_inI iso_inv_block_in_alt"], ["proof (prove)\nusing this:\n  source.multiplicity bl = 0\n  bl \\<notin># \\<B>\n  (count ?M ?x = 0 \\<Longrightarrow> False) \\<Longrightarrow> ?x \\<in># ?M\n  \\<lbrakk>\\<pi> ` ?bl \\<in># \\<B>'; ?bl \\<subseteq> \\<V>\\<rbrakk>\n  \\<Longrightarrow> ?bl \\<in># \\<B>\n\ngoal (1 subgoal):\n 1. target.multiplicity (\\<pi> ` bl) = 0", "by (metis assms)"], ["proof (state)\nthis:\n  target.multiplicity (\\<pi> ` bl) = 0\n\ngoal (1 subgoal):\n 1. bl \\<notin># \\<B> \\<Longrightarrow>\n    source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "thus ?thesis"], ["proof (prove)\nusing this:\n  target.multiplicity (\\<pi> ` bl) = 0\n\ngoal (1 subgoal):\n 1. source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "using s_mult"], ["proof (prove)\nusing this:\n  target.multiplicity (\\<pi> ` bl) = 0\n  source.multiplicity bl = 0\n\ngoal (1 subgoal):\n 1. source.multiplicity bl = target.multiplicity (\\<pi> ` bl)", "by simp"], ["proof (state)\nthis:\n  source.multiplicity bl = target.multiplicity (\\<pi> ` bl)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma iso_point_in_block_img_iff: \"p \\<in> \\<V> \\<Longrightarrow> bl \\<in># \\<B> \\<Longrightarrow> p \\<in> bl \\<longleftrightarrow> (\\<pi> p) \\<in> (\\<pi> ` bl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<in> \\<V>; bl \\<in># \\<B>\\<rbrakk>\n    \\<Longrightarrow> (p \\<in> bl) = (\\<pi> p \\<in> \\<pi> ` bl)", "by (metis bij bij_betw_imp_surj_on iso_bij_betw_individual_blocks_inv bij_betw_inv_into_left imageI)"], ["", "lemma iso_point_subset_block_iff: \"p \\<subseteq> \\<V> \\<Longrightarrow> bl \\<in># \\<B> \\<Longrightarrow> p \\<subseteq> bl \\<longleftrightarrow> (\\<pi> ` p) \\<subseteq> (\\<pi> ` bl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>p \\<subseteq> \\<V>; bl \\<in># \\<B>\\<rbrakk>\n    \\<Longrightarrow> (p \\<subseteq> bl) =\n                      (\\<pi> ` p \\<subseteq> \\<pi> ` bl)", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>p \\<subseteq> \\<V>; bl \\<in># \\<B>;\n        \\<pi> ` p \\<subseteq> \\<pi> ` bl; x \\<in> p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> bl", "using image_subset_iff iso_point_in_block_img_iff subset_iff"], ["proof (prove)\nusing this:\n  (?f ` ?A \\<subseteq> ?B) = (\\<forall>x\\<in>?A. ?f x \\<in> ?B)\n  \\<lbrakk>?p \\<in> \\<V>; ?bl \\<in># \\<B>\\<rbrakk>\n  \\<Longrightarrow> (?p \\<in> ?bl) = (\\<pi> ?p \\<in> \\<pi> ` ?bl)\n  (?A \\<subseteq> ?B) =\n  (\\<forall>t. t \\<in> ?A \\<longrightarrow> t \\<in> ?B)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>p \\<subseteq> \\<V>; bl \\<in># \\<B>;\n        \\<pi> ` p \\<subseteq> \\<pi> ` bl; x \\<in> p\\<rbrakk>\n       \\<Longrightarrow> x \\<in> bl", "by metis"], ["", "lemma iso_is_image_block: \"\\<B>' = blocks_image \\<B> \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<B>' = blocks_image \\<B> \\<pi>", "unfolding blocks_image_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<B>' = image_mset ((`) \\<pi>) \\<B>", "by (simp add: block_img iso_points_map)"], ["", "end"], ["", "subsection \\<open>Design Isomorphisms\\<close>"], ["", "text \\<open>Apply the concept of isomorphisms to designs only\\<close>"], ["", "locale design_isomorphism = incidence_system_isomorphism \\<V> \\<B> \\<V>' \\<B>' \\<pi> + source: design \\<V> \\<B> + \n  target: design \\<V>' \\<B>' for \\<V> and \\<B> and \\<V>' and \\<B>' and bij_map (\"\\<pi>\")"], ["", "context design_isomorphism\nbegin"], ["", "lemma inverse_design_isomorphism: \"design_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. design_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)", "using inverse_incidence_sys_iso source.wf_design target.wf_design"], ["proof (prove)\nusing this:\n  incidence_system_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\n  design \\<V> \\<B>\n  design \\<V>' \\<B>'\n\ngoal (1 subgoal):\n 1. design_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)", "by (simp add: design_isomorphism.intro)"], ["", "end"], ["", "subsubsection \\<open>Isomorphism Operation\\<close>"], ["", "text \\<open>Define the concept of isomorphic designs outside the scope of locale\\<close>"], ["", "definition isomorphic_designs (infixl \"\\<cong>\\<^sub>D\" 50) where\n\"\\<D> \\<cong>\\<^sub>D \\<D>' \\<longleftrightarrow> (\\<exists> \\<pi> . design_isomorphism (fst \\<D>) (snd \\<D>) (fst \\<D>') (snd \\<D>') \\<pi>)\""], ["", "lemma isomorphic_designs_symmetric: \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow> (\\<V>', \\<B>') \\<cong>\\<^sub>D (\\<V>, \\<B>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    (\\<V>', \\<B>') \\<cong>\\<^sub>D (\\<V>, \\<B>)", "using isomorphic_designs_def design_isomorphism.inverse_design_isomorphism"], ["proof (prove)\nusing this:\n  (?\\<D> \\<cong>\\<^sub>D ?\\<D>') =\n  (\\<exists>\\<pi>.\n      design_isomorphism (fst ?\\<D>) (snd ?\\<D>) (fst ?\\<D>') (snd ?\\<D>')\n       \\<pi>)\n  design_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map \\<Longrightarrow>\n  design_isomorphism ?\\<V>' ?\\<B>' ?\\<V> ?\\<B> (inv_into ?\\<V> ?bij_map)\n\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    (\\<V>', \\<B>') \\<cong>\\<^sub>D (\\<V>, \\<B>)", "by metis"], ["", "lemma isomorphic_designs_implies_bij: \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow> \\<exists> \\<pi> . bij_betw \\<pi> \\<V> \\<V>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    \\<exists>\\<pi>. bij_betw \\<pi> \\<V> \\<V>'", "using incidence_system_isomorphism.bij isomorphic_designs_def"], ["proof (prove)\nusing this:\n  incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>'\n   ?bij_map \\<Longrightarrow>\n  bij_betw ?bij_map ?\\<V> ?\\<V>'\n  (?\\<D> \\<cong>\\<^sub>D ?\\<D>') =\n  (\\<exists>\\<pi>.\n      design_isomorphism (fst ?\\<D>) (snd ?\\<D>) (fst ?\\<D>') (snd ?\\<D>')\n       \\<pi>)\n\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    \\<exists>\\<pi>. bij_betw \\<pi> \\<V> \\<V>'", "by (metis design_isomorphism.axioms(1) fst_conv)"], ["", "lemma isomorphic_designs_implies_block_map: \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow> \\<exists> \\<pi> . image_mset ((`) \\<pi>) \\<B> = \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    \\<exists>\\<pi>. image_mset ((`) \\<pi>) \\<B> = \\<B>'", "using incidence_system_isomorphism.block_img isomorphic_designs_def"], ["proof (prove)\nusing this:\n  incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>'\n   ?bij_map \\<Longrightarrow>\n  image_mset ((`) ?bij_map) ?\\<B> = ?\\<B>'\n  (?\\<D> \\<cong>\\<^sub>D ?\\<D>') =\n  (\\<exists>\\<pi>.\n      design_isomorphism (fst ?\\<D>) (snd ?\\<D>) (fst ?\\<D>') (snd ?\\<D>')\n       \\<pi>)\n\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    \\<exists>\\<pi>. image_mset ((`) \\<pi>) \\<B> = \\<B>'", "using design_isomorphism.axioms(1)"], ["proof (prove)\nusing this:\n  incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>'\n   ?bij_map \\<Longrightarrow>\n  image_mset ((`) ?bij_map) ?\\<B> = ?\\<B>'\n  (?\\<D> \\<cong>\\<^sub>D ?\\<D>') =\n  (\\<exists>\\<pi>.\n      design_isomorphism (fst ?\\<D>) (snd ?\\<D>) (fst ?\\<D>') (snd ?\\<D>')\n       \\<pi>)\n  design_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map \\<Longrightarrow>\n  incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map\n\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>') \\<Longrightarrow>\n    \\<exists>\\<pi>. image_mset ((`) \\<pi>) \\<B> = \\<B>'", "by fastforce"], ["", "context design\nbegin"], ["", "lemma isomorphic_designsI [intro]: \"design \\<V>' \\<B>' \\<Longrightarrow> bij_betw \\<pi> \\<V> \\<V>' \\<Longrightarrow> image_mset ((`) \\<pi>) \\<B> = \\<B>' \n    \\<Longrightarrow> (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>design \\<V>' \\<B>'; bij_betw \\<pi> \\<V> \\<V>';\n     image_mset ((`) \\<pi>) \\<B> = \\<B>'\\<rbrakk>\n    \\<Longrightarrow> (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "using design_isomorphism.intro isomorphic_designs_def wf_design image_set_system_wellformed"], ["proof (prove)\nusing this:\n  \\<lbrakk>incidence_system_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map;\n   design ?\\<V> ?\\<B>; design ?\\<V>' ?\\<B>'\\<rbrakk>\n  \\<Longrightarrow> design_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map\n  (?\\<D> \\<cong>\\<^sub>D ?\\<D>') =\n  (\\<exists>\\<pi>.\n      design_isomorphism (fst ?\\<D>) (snd ?\\<D>) (fst ?\\<D>') (snd ?\\<D>')\n       \\<pi>)\n  design \\<V> \\<B>\n  incidence_system (?f ` \\<V>) (blocks_image \\<B> ?f)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>design \\<V>' \\<B>'; bij_betw \\<pi> \\<V> \\<V>';\n     image_mset ((`) \\<pi>) \\<B> = \\<B>'\\<rbrakk>\n    \\<Longrightarrow> (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "by (metis bij_betw_imp_surj_on blocks_image_def fst_conv incidence_system_axioms \n      incidence_system_isomorphism.intro incidence_system_isomorphism_axioms_def snd_conv)"], ["", "lemma eq_designs_isomorphic: \n  assumes \"\\<V> = \\<V>'\"\n  assumes \"\\<B> = \\<B>'\"\n  shows \"(\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "interpret d1: design \\<V> \\<B>"], ["proof (prove)\ngoal (1 subgoal):\n 1. design \\<V> \\<B>", "using assms"], ["proof (prove)\nusing this:\n  \\<V> = \\<V>'\n  \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. design \\<V> \\<B>", "using wf_design"], ["proof (prove)\nusing this:\n  \\<V> = \\<V>'\n  \\<B> = \\<B>'\n  design \\<V> \\<B>\n\ngoal (1 subgoal):\n 1. design \\<V> \\<B>", "by auto"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "interpret d2: design \\<V>' \\<B>'"], ["proof (prove)\ngoal (1 subgoal):\n 1. design \\<V>' \\<B>'", "using assms"], ["proof (prove)\nusing this:\n  \\<V> = \\<V>'\n  \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. design \\<V>' \\<B>'", "using wf_design"], ["proof (prove)\nusing this:\n  \\<V> = \\<V>'\n  \\<B> = \\<B>'\n  design \\<V> \\<B>\n\ngoal (1 subgoal):\n 1. design \\<V>' \\<B>'", "by blast"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "have \"design_isomorphism \\<V> \\<B> \\<V>' \\<B>' id\""], ["proof (prove)\ngoal (1 subgoal):\n 1. design_isomorphism \\<V> \\<B> \\<V>' \\<B>' id", "using assms"], ["proof (prove)\nusing this:\n  \\<V> = \\<V>'\n  \\<B> = \\<B>'\n\ngoal (1 subgoal):\n 1. design_isomorphism \\<V> \\<B> \\<V>' \\<B>' id", "by (unfold_locales) simp_all"], ["proof (state)\nthis:\n  design_isomorphism \\<V> \\<B> \\<V>' \\<B>' id\n\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "thus ?thesis"], ["proof (prove)\nusing this:\n  design_isomorphism \\<V> \\<B> \\<V>' \\<B>' id\n\ngoal (1 subgoal):\n 1. (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')", "unfolding isomorphic_designs_def"], ["proof (prove)\nusing this:\n  design_isomorphism \\<V> \\<B> \\<V>' \\<B>' id\n\ngoal (1 subgoal):\n 1. Ex (design_isomorphism (fst (\\<V>, \\<B>)) (snd (\\<V>, \\<B>))\n         (fst (\\<V>', \\<B>')) (snd (\\<V>', \\<B>')))", "by auto"], ["proof (state)\nthis:\n  (\\<V>, \\<B>) \\<cong>\\<^sub>D (\\<V>', \\<B>')\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "context design_isomorphism\nbegin"], ["", "subsubsection \\<open>Design Properties/Operations under Isomorphism\\<close>"], ["", "lemma design_iso_point_rep_num_eq: \n  assumes \"p \\<in> \\<V>\"\n  shows \"\\<B> rep p = \\<B>' rep (\\<pi> p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<B> rep p = \\<B>' rep \\<pi> p", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<B> rep p = \\<B>' rep \\<pi> p", "have \"{#b \\<in># \\<B> . p \\<in> b#} = {#b \\<in># \\<B> . \\<pi> p \\<in> \\<pi> ` b#}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. filter_mset ((\\<in>) p) \\<B> =\n    {#b \\<in># \\<B>. \\<pi> p \\<in> \\<pi> ` b#}", "using assms filter_mset_cong iso_point_in_block_img_iff assms"], ["proof (prove)\nusing this:\n  p \\<in> \\<V>\n  \\<lbrakk>?M = ?M';\n   \\<And>a. a \\<in># ?M \\<Longrightarrow> ?P a = ?Q a\\<rbrakk>\n  \\<Longrightarrow> filter_mset ?P ?M = filter_mset ?Q ?M\n  \\<lbrakk>?p \\<in> \\<V>; ?bl \\<in># \\<B>\\<rbrakk>\n  \\<Longrightarrow> (?p \\<in> ?bl) = (\\<pi> ?p \\<in> \\<pi> ` ?bl)\n  p \\<in> \\<V>\n\ngoal (1 subgoal):\n 1. filter_mset ((\\<in>) p) \\<B> =\n    {#b \\<in># \\<B>. \\<pi> p \\<in> \\<pi> ` b#}", "by force"], ["proof (state)\nthis:\n  filter_mset ((\\<in>) p) \\<B> = {#b \\<in># \\<B>. \\<pi> p \\<in> \\<pi> ` b#}\n\ngoal (1 subgoal):\n 1. \\<B> rep p = \\<B>' rep \\<pi> p", "then"], ["proof (chain)\npicking this:\n  filter_mset ((\\<in>) p) \\<B> = {#b \\<in># \\<B>. \\<pi> p \\<in> \\<pi> ` b#}", "have \"{#b \\<in># \\<B>' . \\<pi> p \\<in> b#} = image_mset ((`) \\<pi>) {#b \\<in># \\<B> . p \\<in> b#}\""], ["proof (prove)\nusing this:\n  filter_mset ((\\<in>) p) \\<B> = {#b \\<in># \\<B>. \\<pi> p \\<in> \\<pi> ` b#}\n\ngoal (1 subgoal):\n 1. filter_mset ((\\<in>) (\\<pi> p)) \\<B>' =\n    image_mset ((`) \\<pi>) (filter_mset ((\\<in>) p) \\<B>)", "by (simp add: image_mset_filter_swap block_img)"], ["proof (state)\nthis:\n  filter_mset ((\\<in>) (\\<pi> p)) \\<B>' =\n  image_mset ((`) \\<pi>) (filter_mset ((\\<in>) p) \\<B>)\n\ngoal (1 subgoal):\n 1. \\<B> rep p = \\<B>' rep \\<pi> p", "thus ?thesis"], ["proof (prove)\nusing this:\n  filter_mset ((\\<in>) (\\<pi> p)) \\<B>' =\n  image_mset ((`) \\<pi>) (filter_mset ((\\<in>) p) \\<B>)\n\ngoal (1 subgoal):\n 1. \\<B> rep p = \\<B>' rep \\<pi> p", "by (simp add: point_replication_number_def)"], ["proof (state)\nthis:\n  \\<B> rep p = \\<B>' rep \\<pi> p\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma design_iso_rep_numbers_eq: \"source.replication_numbers = target.replication_numbers\""], ["proof (prove)\ngoal (1 subgoal):\n 1. source.replication_numbers = target.replication_numbers", "apply (simp add: source.replication_numbers_def target.replication_numbers_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<B> rep x |x. x \\<in> \\<V>} = {\\<B>' rep x |x. x \\<in> \\<V>'}", "using  design_iso_point_rep_num_eq design_isomorphism.design_iso_point_rep_num_eq iso_points_map"], ["proof (prove)\nusing this:\n  ?p \\<in> \\<V> \\<Longrightarrow> \\<B> rep ?p = \\<B>' rep \\<pi> ?p\n  \\<lbrakk>design_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map;\n   ?p \\<in> ?\\<V>\\<rbrakk>\n  \\<Longrightarrow> ?\\<B> rep ?p = ?\\<B>' rep ?bij_map ?p\n  \\<pi> ` \\<V> = \\<V>'\n\ngoal (1 subgoal):\n 1. {\\<B> rep x |x. x \\<in> \\<V>} = {\\<B>' rep x |x. x \\<in> \\<V>'}", "by (metis (no_types, hide_lams) imageI inverse_design_isomorphism iso_points_inv_map)"], ["", "lemma design_iso_block_size_eq: \"bl \\<in># \\<B> \\<Longrightarrow> card bl = card (\\<pi> ` bl)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow> card bl = card (\\<pi> ` bl)", "using card_image_le finite_subset_image image_inv_into_cancel"], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> card (?f ` ?A) \\<le> card ?A\n  \\<lbrakk>finite ?B; ?B \\<subseteq> ?f ` ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>C\\<subseteq>?A. finite C \\<and> ?B = ?f ` C\n  \\<lbrakk>?f ` ?A = ?A'; ?B' \\<subseteq> ?A'\\<rbrakk>\n  \\<Longrightarrow> ?f ` inv_into ?A ?f ` ?B' = ?B'\n\ngoal (1 subgoal):\n 1. bl \\<in># \\<B> \\<Longrightarrow> card bl = card (\\<pi> ` bl)", "by (metis iso_points_inv_map iso_points_map le_antisym source.finite_blocks source.wellformed)"], ["", "lemma design_iso_block_sizes_eq: \"source.sys_block_sizes = target.sys_block_sizes\""], ["proof (prove)\ngoal (1 subgoal):\n 1. source.sys_block_sizes = target.sys_block_sizes", "apply (simp add: source.sys_block_sizes_def target.sys_block_sizes_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. {int (card bl) |bl. bl \\<in># \\<B>} =\n    {int (card bl) |bl. bl \\<in># \\<B>'}", "by (metis (no_types, hide_lams) design_iso_block_size_eq iso_block_in iso_img_block_orig_exists)"], ["", "lemma design_iso_points_index_eq: \n  assumes \"ps \\<subseteq> \\<V>\" \n  shows \"\\<B> index ps = \\<B>' index (\\<pi> ` ps)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<B> index ps = \\<B>' index \\<pi> ` ps", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<B> index ps = \\<B>' index \\<pi> ` ps", "have \"\\<And> b . b \\<in># \\<B> \\<Longrightarrow> ((ps \\<subseteq> b) = ((\\<pi> ` ps) \\<subseteq> \\<pi> ` b))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in># \\<B> \\<Longrightarrow>\n       (ps \\<subseteq> b) = (\\<pi> ` ps \\<subseteq> \\<pi> ` b)", "using iso_point_subset_block_iff assms"], ["proof (prove)\nusing this:\n  \\<lbrakk>?p \\<subseteq> \\<V>; ?bl \\<in># \\<B>\\<rbrakk>\n  \\<Longrightarrow> (?p \\<subseteq> ?bl) =\n                    (\\<pi> ` ?p \\<subseteq> \\<pi> ` ?bl)\n  ps \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. \\<And>b.\n       b \\<in># \\<B> \\<Longrightarrow>\n       (ps \\<subseteq> b) = (\\<pi> ` ps \\<subseteq> \\<pi> ` b)", "by blast"], ["proof (state)\nthis:\n  ?b \\<in># \\<B> \\<Longrightarrow>\n  (ps \\<subseteq> ?b) = (\\<pi> ` ps \\<subseteq> \\<pi> ` ?b)\n\ngoal (1 subgoal):\n 1. \\<B> index ps = \\<B>' index \\<pi> ` ps", "then"], ["proof (chain)\npicking this:\n  ?b \\<in># \\<B> \\<Longrightarrow>\n  (ps \\<subseteq> ?b) = (\\<pi> ` ps \\<subseteq> \\<pi> ` ?b)", "have \"{#b \\<in># \\<B> . ps \\<subseteq> b#} = {#b \\<in># \\<B> . (\\<pi> ` ps) \\<subseteq> (\\<pi> ` b)#}\""], ["proof (prove)\nusing this:\n  ?b \\<in># \\<B> \\<Longrightarrow>\n  (ps \\<subseteq> ?b) = (\\<pi> ` ps \\<subseteq> \\<pi> ` ?b)\n\ngoal (1 subgoal):\n 1. filter_mset ((\\<subseteq>) ps) \\<B> =\n    {#b \\<in># \\<B>. \\<pi> ` ps \\<subseteq> \\<pi> ` b#}", "using assms filter_mset_cong"], ["proof (prove)\nusing this:\n  ?b \\<in># \\<B> \\<Longrightarrow>\n  (ps \\<subseteq> ?b) = (\\<pi> ` ps \\<subseteq> \\<pi> ` ?b)\n  ps \\<subseteq> \\<V>\n  \\<lbrakk>?M = ?M';\n   \\<And>a. a \\<in># ?M \\<Longrightarrow> ?P a = ?Q a\\<rbrakk>\n  \\<Longrightarrow> filter_mset ?P ?M = filter_mset ?Q ?M\n\ngoal (1 subgoal):\n 1. filter_mset ((\\<subseteq>) ps) \\<B> =\n    {#b \\<in># \\<B>. \\<pi> ` ps \\<subseteq> \\<pi> ` b#}", "by force"], ["proof (state)\nthis:\n  filter_mset ((\\<subseteq>) ps) \\<B> =\n  {#b \\<in># \\<B>. \\<pi> ` ps \\<subseteq> \\<pi> ` b#}\n\ngoal (1 subgoal):\n 1. \\<B> index ps = \\<B>' index \\<pi> ` ps", "then"], ["proof (chain)\npicking this:\n  filter_mset ((\\<subseteq>) ps) \\<B> =\n  {#b \\<in># \\<B>. \\<pi> ` ps \\<subseteq> \\<pi> ` b#}", "have \"{#b \\<in># \\<B>' . \\<pi> ` ps \\<subseteq> b#} = image_mset ((`) \\<pi>) {#b \\<in># \\<B> . ps \\<subseteq> b#}\""], ["proof (prove)\nusing this:\n  filter_mset ((\\<subseteq>) ps) \\<B> =\n  {#b \\<in># \\<B>. \\<pi> ` ps \\<subseteq> \\<pi> ` b#}\n\ngoal (1 subgoal):\n 1. filter_mset ((\\<subseteq>) (\\<pi> ` ps)) \\<B>' =\n    image_mset ((`) \\<pi>) (filter_mset ((\\<subseteq>) ps) \\<B>)", "by (simp add: image_mset_filter_swap block_img)"], ["proof (state)\nthis:\n  filter_mset ((\\<subseteq>) (\\<pi> ` ps)) \\<B>' =\n  image_mset ((`) \\<pi>) (filter_mset ((\\<subseteq>) ps) \\<B>)\n\ngoal (1 subgoal):\n 1. \\<B> index ps = \\<B>' index \\<pi> ` ps", "thus ?thesis"], ["proof (prove)\nusing this:\n  filter_mset ((\\<subseteq>) (\\<pi> ` ps)) \\<B>' =\n  image_mset ((`) \\<pi>) (filter_mset ((\\<subseteq>) ps) \\<B>)\n\ngoal (1 subgoal):\n 1. \\<B> index ps = \\<B>' index \\<pi> ` ps", "by (simp add: points_index_def)"], ["proof (state)\nthis:\n  \\<B> index ps = \\<B>' index \\<pi> ` ps\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma design_iso_points_indices_imp: \n  assumes \"x \\<in> source.point_indices t\"\n  shows \"x \\<in> target.point_indices t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "obtain ps where t: \"card ps = t\" and ss: \"ps \\<subseteq> \\<V>\" and x: \"\\<B> index ps = x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<lbrakk>int (card ps) = t; ps \\<subseteq> \\<V>;\n         int (\\<B> index ps) = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> source.point_indices t\n\ngoal (1 subgoal):\n 1. (\\<And>ps.\n        \\<lbrakk>int (card ps) = t; ps \\<subseteq> \\<V>;\n         int (\\<B> index ps) = x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: source.point_indices_def)"], ["proof (state)\nthis:\n  int (card ps) = t\n  ps \\<subseteq> \\<V>\n  int (\\<B> index ps) = x\n\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "then"], ["proof (chain)\npicking this:\n  int (card ps) = t\n  ps \\<subseteq> \\<V>\n  int (\\<B> index ps) = x", "have x_val: \"x = \\<B>' index (\\<pi> ` ps)\""], ["proof (prove)\nusing this:\n  int (card ps) = t\n  ps \\<subseteq> \\<V>\n  int (\\<B> index ps) = x\n\ngoal (1 subgoal):\n 1. x = int (\\<B>' index \\<pi> ` ps)", "using design_iso_points_index_eq"], ["proof (prove)\nusing this:\n  int (card ps) = t\n  ps \\<subseteq> \\<V>\n  int (\\<B> index ps) = x\n  ?ps \\<subseteq> \\<V> \\<Longrightarrow>\n  \\<B> index ?ps = \\<B>' index \\<pi> ` ?ps\n\ngoal (1 subgoal):\n 1. x = int (\\<B>' index \\<pi> ` ps)", "by auto"], ["proof (state)\nthis:\n  x = int (\\<B>' index \\<pi> ` ps)\n\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "have x_img: \" (\\<pi> ` ps) \\<subseteq> \\<V>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` ps \\<subseteq> \\<V>'", "using ss bij iso_points_map"], ["proof (prove)\nusing this:\n  ps \\<subseteq> \\<V>\n  bij_betw \\<pi> \\<V> \\<V>'\n  \\<pi> ` \\<V> = \\<V>'\n\ngoal (1 subgoal):\n 1. \\<pi> ` ps \\<subseteq> \\<V>'", "by fastforce"], ["proof (state)\nthis:\n  \\<pi> ` ps \\<subseteq> \\<V>'\n\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "then"], ["proof (chain)\npicking this:\n  \\<pi> ` ps \\<subseteq> \\<V>'", "have \"card (\\<pi> ` ps) = t\""], ["proof (prove)\nusing this:\n  \\<pi> ` ps \\<subseteq> \\<V>'\n\ngoal (1 subgoal):\n 1. int (card (\\<pi> ` ps)) = t", "using t ss iso_points_ss_card"], ["proof (prove)\nusing this:\n  \\<pi> ` ps \\<subseteq> \\<V>'\n  int (card ps) = t\n  ps \\<subseteq> \\<V>\n  ?ps \\<subseteq> \\<V> \\<Longrightarrow> card ?ps = card (\\<pi> ` ?ps)\n\ngoal (1 subgoal):\n 1. int (card (\\<pi> ` ps)) = t", "by auto"], ["proof (state)\nthis:\n  int (card (\\<pi> ` ps)) = t\n\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "then"], ["proof (chain)\npicking this:\n  int (card (\\<pi> ` ps)) = t", "show ?thesis"], ["proof (prove)\nusing this:\n  int (card (\\<pi> ` ps)) = t\n\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "using target.point_indices_elem_in x_img x_val"], ["proof (prove)\nusing this:\n  int (card (\\<pi> ` ps)) = t\n  \\<lbrakk>?ps \\<subseteq> \\<V>'; card ?ps = ?t\\<rbrakk>\n  \\<Longrightarrow> int (\\<B>' index ?ps)\n                    \\<in> target.point_indices (int ?t)\n  \\<pi> ` ps \\<subseteq> \\<V>'\n  x = int (\\<B>' index \\<pi> ` ps)\n\ngoal (1 subgoal):\n 1. x \\<in> target.point_indices t", "by blast"], ["proof (state)\nthis:\n  x \\<in> target.point_indices t\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma design_iso_points_indices_eq: \"source.point_indices t = target.point_indices t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. source.point_indices t = target.point_indices t", "using inverse_design_isomorphism design_isomorphism.design_iso_points_indices_imp\n    design_iso_points_indices_imp"], ["proof (prove)\nusing this:\n  design_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\n  \\<lbrakk>design_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map;\n   ?x \\<in> incidence_system.point_indices ?\\<V> ?\\<B> ?t\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> incidence_system.point_indices ?\\<V>' ?\\<B>' ?t\n  ?x \\<in> source.point_indices ?t \\<Longrightarrow>\n  ?x \\<in> target.point_indices ?t\n\ngoal (1 subgoal):\n 1. source.point_indices t = target.point_indices t", "by blast"], ["", "lemma design_iso_block_intersect_num_eq: \n  assumes \"b1 \\<in># \\<B>\"\n  assumes \"b2 \\<in># \\<B>\"\n  shows \"b1 |\\<inter>| b2 = (\\<pi> ` b1) |\\<inter>| (\\<pi> ` b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 |\\<inter>| b2 = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. b1 |\\<inter>| b2 = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "have split: \"\\<pi> ` (b1 \\<inter> b2) = (\\<pi> ` b1) \\<inter> (\\<pi> ` b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` (b1 \\<inter> b2) = \\<pi> ` b1 \\<inter> \\<pi> ` b2", "using assms bij bij_betw_inter_subsets"], ["proof (prove)\nusing this:\n  b1 \\<in># \\<B>\n  b2 \\<in># \\<B>\n  bij_betw \\<pi> \\<V> \\<V>'\n  \\<lbrakk>bij_betw ?f ?A ?B; ?a1.0 \\<subseteq> ?A;\n   ?a2.0 \\<subseteq> ?A\\<rbrakk>\n  \\<Longrightarrow> ?f ` (?a1.0 \\<inter> ?a2.0) =\n                    ?f ` ?a1.0 \\<inter> ?f ` ?a2.0\n\ngoal (1 subgoal):\n 1. \\<pi> ` (b1 \\<inter> b2) = \\<pi> ` b1 \\<inter> \\<pi> ` b2", "by (metis source.wellformed)"], ["proof (state)\nthis:\n  \\<pi> ` (b1 \\<inter> b2) = \\<pi> ` b1 \\<inter> \\<pi> ` b2\n\ngoal (1 subgoal):\n 1. b1 |\\<inter>| b2 = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<pi> ` (b1 \\<inter> b2) = \\<pi> ` b1 \\<inter> \\<pi> ` b2\n\ngoal (1 subgoal):\n 1. b1 |\\<inter>| b2 = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "using source.wellformed"], ["proof (prove)\nusing this:\n  \\<pi> ` (b1 \\<inter> b2) = \\<pi> ` b1 \\<inter> \\<pi> ` b2\n  ?b \\<in># \\<B> \\<Longrightarrow> ?b \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. b1 |\\<inter>| b2 = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "by (simp add: intersection_number_def iso_points_ss_card split assms(2) inf.coboundedI2)"], ["proof (state)\nthis:\n  b1 |\\<inter>| b2 = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma design_iso_inter_numbers_imp: \n  assumes \"x \\<in> source.intersection_numbers\" \n  shows \"x \\<in> target.intersection_numbers\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "obtain b1 b2 where 1: \"b1 \\<in># \\<B>\" and 2: \"b2 \\<in># (remove1_mset b1 \\<B>)\" and xval: \"x = b1 |\\<inter>| b2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b1 b2.\n        \\<lbrakk>b1 \\<in># \\<B>; b2 \\<in># remove1_mset b1 \\<B>;\n         x = b1 |\\<inter>| b2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using assms"], ["proof (prove)\nusing this:\n  x \\<in> source.intersection_numbers\n\ngoal (1 subgoal):\n 1. (\\<And>b1 b2.\n        \\<lbrakk>b1 \\<in># \\<B>; b2 \\<in># remove1_mset b1 \\<B>;\n         x = b1 |\\<inter>| b2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: source.intersection_numbers_def)"], ["proof (state)\nthis:\n  b1 \\<in># \\<B>\n  b2 \\<in># remove1_mset b1 \\<B>\n  x = b1 |\\<inter>| b2\n\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "then"], ["proof (chain)\npicking this:\n  b1 \\<in># \\<B>\n  b2 \\<in># remove1_mset b1 \\<B>\n  x = b1 |\\<inter>| b2", "have pi1: \"\\<pi> ` b1 \\<in># \\<B>'\""], ["proof (prove)\nusing this:\n  b1 \\<in># \\<B>\n  b2 \\<in># remove1_mset b1 \\<B>\n  x = b1 |\\<inter>| b2\n\ngoal (1 subgoal):\n 1. \\<pi> ` b1 \\<in># \\<B>'", "by (simp add: iso_block_in)"], ["proof (state)\nthis:\n  \\<pi> ` b1 \\<in># \\<B>'\n\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "have pi2: \"\\<pi> ` b2 \\<in># (remove1_mset (\\<pi> ` b1) \\<B>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` b2 \\<in># remove1_mset (\\<pi> ` b1) \\<B>'", "using iso_block_in 2"], ["proof (prove)\nusing this:\n  ?bl \\<in># \\<B> \\<Longrightarrow> \\<pi> ` ?bl \\<in># \\<B>'\n  b2 \\<in># remove1_mset b1 \\<B>\n\ngoal (1 subgoal):\n 1. \\<pi> ` b2 \\<in># remove1_mset (\\<pi> ` b1) \\<B>'", "by (metis (no_types, lifting) \"1\" block_img image_mset_remove1_mset_if in_remove1_mset_neq \n        iso_blocks_map_inj more_than_one_mset_mset_diff multiset.set_map)"], ["proof (state)\nthis:\n  \\<pi> ` b2 \\<in># remove1_mset (\\<pi> ` b1) \\<B>'\n\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "have \"x = (\\<pi> ` b1) |\\<inter>| (\\<pi> ` b2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "using 1 2 design_iso_block_intersect_num_eq"], ["proof (prove)\nusing this:\n  b1 \\<in># \\<B>\n  b2 \\<in># remove1_mset b1 \\<B>\n  \\<lbrakk>?b1.0 \\<in># \\<B>; ?b2.0 \\<in># \\<B>\\<rbrakk>\n  \\<Longrightarrow> ?b1.0 |\\<inter>| ?b2.0 =\n                    \\<pi> ` ?b1.0 |\\<inter>| \\<pi> ` ?b2.0\n\ngoal (1 subgoal):\n 1. x = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "by (metis in_diffD xval)"], ["proof (state)\nthis:\n  x = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2\n\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "then"], ["proof (chain)\npicking this:\n  x = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2", "have \"x \\<in> {b1 |\\<inter>| b2 | b1 b2 . b1 \\<in># \\<B>' \\<and> b2 \\<in># (\\<B>' - {#b1#})}\""], ["proof (prove)\nusing this:\n  x = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2\n\ngoal (1 subgoal):\n 1. x \\<in> {b1 |\\<inter>| b2 |b1 b2.\n             b1 \\<in># \\<B>' \\<and> b2 \\<in># remove1_mset b1 \\<B>'}", "using pi1 pi2"], ["proof (prove)\nusing this:\n  x = \\<pi> ` b1 |\\<inter>| \\<pi> ` b2\n  \\<pi> ` b1 \\<in># \\<B>'\n  \\<pi> ` b2 \\<in># remove1_mset (\\<pi> ` b1) \\<B>'\n\ngoal (1 subgoal):\n 1. x \\<in> {b1 |\\<inter>| b2 |b1 b2.\n             b1 \\<in># \\<B>' \\<and> b2 \\<in># remove1_mset b1 \\<B>'}", "by blast"], ["proof (state)\nthis:\n  x \\<in> {b1 |\\<inter>| b2 |b1 b2.\n           b1 \\<in># \\<B>' \\<and> b2 \\<in># remove1_mset b1 \\<B>'}\n\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "then"], ["proof (chain)\npicking this:\n  x \\<in> {b1 |\\<inter>| b2 |b1 b2.\n           b1 \\<in># \\<B>' \\<and> b2 \\<in># remove1_mset b1 \\<B>'}", "show ?thesis"], ["proof (prove)\nusing this:\n  x \\<in> {b1 |\\<inter>| b2 |b1 b2.\n           b1 \\<in># \\<B>' \\<and> b2 \\<in># remove1_mset b1 \\<B>'}\n\ngoal (1 subgoal):\n 1. x \\<in> target.intersection_numbers", "by (simp add: target.intersection_numbers_def)"], ["proof (state)\nthis:\n  x \\<in> target.intersection_numbers\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma design_iso_intersection_numbers: \"source.intersection_numbers = target.intersection_numbers\""], ["proof (prove)\ngoal (1 subgoal):\n 1. source.intersection_numbers = target.intersection_numbers", "using inverse_design_isomorphism design_isomorphism.design_iso_inter_numbers_imp \n      design_iso_inter_numbers_imp"], ["proof (prove)\nusing this:\n  design_isomorphism \\<V>' \\<B>' \\<V> \\<B> (inv_into \\<V> \\<pi>)\n  \\<lbrakk>design_isomorphism ?\\<V> ?\\<B> ?\\<V>' ?\\<B>' ?bij_map;\n   ?x \\<in> incidence_system.intersection_numbers ?\\<B>\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> incidence_system.intersection_numbers ?\\<B>'\n  ?x \\<in> source.intersection_numbers \\<Longrightarrow>\n  ?x \\<in> target.intersection_numbers\n\ngoal (1 subgoal):\n 1. source.intersection_numbers = target.intersection_numbers", "by blast"], ["", "lemma design_iso_n_intersect_num: \n  assumes \"b1 \\<in># \\<B>\" \n  assumes \"b2 \\<in># \\<B>\" \n  shows \"b1 |\\<inter>|\\<^sub>n b2 = ((\\<pi> ` b1) |\\<inter>|\\<^sub>n (\\<pi> ` b2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "let ?A = \"{x . x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "let ?B = \"{y . y \\<subseteq> (\\<pi> ` b1) \\<and> y \\<subseteq> (\\<pi> ` b2) \\<and> card y = n}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "have b1v: \"b1 \\<subseteq> \\<V>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b1 \\<subseteq> \\<V>", "by (simp add: assms(1) source.wellformed)"], ["proof (state)\nthis:\n  b1 \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "have b2v: \"b2 \\<subseteq> \\<V>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. b2 \\<subseteq> \\<V>", "by (simp add: assms(2) source.wellformed)"], ["proof (state)\nthis:\n  b2 \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "then"], ["proof (chain)\npicking this:\n  b2 \\<subseteq> \\<V>", "have \"\\<And>x y . x \\<subseteq> b1 \\<Longrightarrow> x \\<subseteq> b2 \\<Longrightarrow> y \\<subseteq> b1 \\<Longrightarrow> y \\<subseteq> b2 \\<Longrightarrow>  \\<pi> ` x = \\<pi> ` y \\<Longrightarrow> x = y\""], ["proof (prove)\nusing this:\n  b2 \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<subseteq> b1; x \\<subseteq> b2; y \\<subseteq> b1;\n        y \\<subseteq> b2; \\<pi> ` x = \\<pi> ` y\\<rbrakk>\n       \\<Longrightarrow> x = y", "using b1v bij"], ["proof (prove)\nusing this:\n  b2 \\<subseteq> \\<V>\n  b1 \\<subseteq> \\<V>\n  bij_betw \\<pi> \\<V> \\<V>'\n\ngoal (1 subgoal):\n 1. \\<And>x y.\n       \\<lbrakk>x \\<subseteq> b1; x \\<subseteq> b2; y \\<subseteq> b1;\n        y \\<subseteq> b2; \\<pi> ` x = \\<pi> ` y\\<rbrakk>\n       \\<Longrightarrow> x = y", "by (metis bij_betw_imp_surj_on bij_betw_inv_into_subset dual_order.trans)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<subseteq> b1; ?x \\<subseteq> b2; ?y \\<subseteq> b1;\n   ?y \\<subseteq> b2; \\<pi> ` ?x = \\<pi> ` ?y\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?x \\<subseteq> b1; ?x \\<subseteq> b2; ?y \\<subseteq> b1;\n   ?y \\<subseteq> b2; \\<pi> ` ?x = \\<pi> ` ?y\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y", "have inj: \"inj_on ((`) \\<pi>) ?A\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<subseteq> b1; ?x \\<subseteq> b2; ?y \\<subseteq> b1;\n   ?y \\<subseteq> b2; \\<pi> ` ?x = \\<pi> ` ?y\\<rbrakk>\n  \\<Longrightarrow> ?x = ?y\n\ngoal (1 subgoal):\n 1. inj_on ((`) \\<pi>)\n     {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}", "by (simp add: inj_on_def)"], ["proof (state)\nthis:\n  inj_on ((`) \\<pi>)\n   {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "have eqcard: \"\\<And>xa. xa \\<subseteq> b1 \\<Longrightarrow> xa \\<subseteq> b2 \\<Longrightarrow> card (\\<pi> ` xa) = card xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa", "using b1v b2v bij"], ["proof (prove)\nusing this:\n  b1 \\<subseteq> \\<V>\n  b2 \\<subseteq> \\<V>\n  bij_betw \\<pi> \\<V> \\<V>'\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa", "using iso_points_ss_card"], ["proof (prove)\nusing this:\n  b1 \\<subseteq> \\<V>\n  b2 \\<subseteq> \\<V>\n  bij_betw \\<pi> \\<V> \\<V>'\n  ?ps \\<subseteq> \\<V> \\<Longrightarrow> card ?ps = card (\\<pi> ` ?ps)\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa", "by auto"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<subseteq> b1; ?xa \\<subseteq> b2\\<rbrakk>\n  \\<Longrightarrow> card (\\<pi> ` ?xa) = card ?xa\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "have surj: \"\\<And>x. x \\<subseteq> \\<pi> ` b1 \\<Longrightarrow> x \\<subseteq> \\<pi> ` b2  \\<Longrightarrow> \n                x \\<in> {(\\<pi> ` xa) | xa . xa \\<subseteq> b1 \\<and> xa \\<subseteq> b2 \\<and> card xa = card x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "assume x1: \"x \\<subseteq> \\<pi> ` b1\" and x2: \"x \\<subseteq> \\<pi> ` b2\""], ["proof (state)\nthis:\n  x \\<subseteq> \\<pi> ` b1\n  x \\<subseteq> \\<pi> ` b2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "then"], ["proof (chain)\npicking this:\n  x \\<subseteq> \\<pi> ` b1\n  x \\<subseteq> \\<pi> ` b2", "obtain xa where eq_x: \"\\<pi> ` xa = x\" and ss: \"xa \\<subseteq> \\<V>\""], ["proof (prove)\nusing this:\n  x \\<subseteq> \\<pi> ` b1\n  x \\<subseteq> \\<pi> ` b2\n\ngoal (1 subgoal):\n 1. (\\<And>xa.\n        \\<lbrakk>\\<pi> ` xa = x; xa \\<subseteq> \\<V>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis b1v dual_order.trans subset_imageE)"], ["proof (state)\nthis:\n  \\<pi> ` xa = x\n  xa \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "then"], ["proof (chain)\npicking this:\n  \\<pi> ` xa = x\n  xa \\<subseteq> \\<V>", "have f1: \"xa \\<subseteq> b1\""], ["proof (prove)\nusing this:\n  \\<pi> ` xa = x\n  xa \\<subseteq> \\<V>\n\ngoal (1 subgoal):\n 1. xa \\<subseteq> b1", "by (simp add: x1 assms(1) iso_point_subset_block_iff)"], ["proof (state)\nthis:\n  xa \\<subseteq> b1\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "then"], ["proof (chain)\npicking this:\n  xa \\<subseteq> b1", "have f2: \"xa \\<subseteq> b2\""], ["proof (prove)\nusing this:\n  xa \\<subseteq> b1\n\ngoal (1 subgoal):\n 1. xa \\<subseteq> b2", "by (simp add: eq_x ss assms(2) iso_point_subset_block_iff x2)"], ["proof (state)\nthis:\n  xa \\<subseteq> b2\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "then"], ["proof (chain)\npicking this:\n  xa \\<subseteq> b2", "have f3: \"card xa = card x\""], ["proof (prove)\nusing this:\n  xa \\<subseteq> b2\n\ngoal (1 subgoal):\n 1. card xa = card x", "using bij"], ["proof (prove)\nusing this:\n  xa \\<subseteq> b2\n  bij_betw \\<pi> \\<V> \\<V>'\n\ngoal (1 subgoal):\n 1. card xa = card x", "by (simp add: eq_x ss iso_points_ss_card)"], ["proof (state)\nthis:\n  card xa = card x\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n       \\<Longrightarrow> x \\<in> {\\<pi> ` xa |xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "then"], ["proof (chain)\npicking this:\n  card xa = card x", "show \"x \\<in> {(\\<pi> ` xa) | xa . xa \\<subseteq> b1 \\<and> xa \\<subseteq> b2 \\<and> card xa = card x}\""], ["proof (prove)\nusing this:\n  card xa = card x\n\ngoal (1 subgoal):\n 1. x \\<in> {\\<pi> ` xa |xa.\n             xa \\<subseteq> b1 \\<and>\n             xa \\<subseteq> b2 \\<and> card xa = card x}", "using f1 f2 f3 \\<open>\\<pi> ` xa = x\\<close>"], ["proof (prove)\nusing this:\n  card xa = card x\n  xa \\<subseteq> b1\n  xa \\<subseteq> b2\n  card xa = card x\n  \\<pi> ` xa = x\n\ngoal (1 subgoal):\n 1. x \\<in> {\\<pi> ` xa |xa.\n             xa \\<subseteq> b1 \\<and>\n             xa \\<subseteq> b2 \\<and> card xa = card x}", "by auto"], ["proof (state)\nthis:\n  x \\<in> {\\<pi> ` xa |xa.\n           xa \\<subseteq> b1 \\<and>\n           xa \\<subseteq> b2 \\<and> card xa = card x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<subseteq> \\<pi> ` b1; ?x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> {\\<pi> ` xa |xa.\n                              xa \\<subseteq> b1 \\<and>\n                              xa \\<subseteq> b2 \\<and> card xa = card ?x}\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "have \"bij_betw ( (`) \\<pi>) ?A ?B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw ((`) \\<pi>)\n     {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n     {y. y \\<subseteq> \\<pi> ` b1 \\<and>\n         y \\<subseteq> \\<pi> ` b2 \\<and> card y = n}", "proof (auto simp add: bij_betw_def)"], ["proof (state)\ngoal (3 subgoals):\n 1. inj_on ((`) \\<pi>)\n     {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n 2. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2; n = card xa\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa\n 3. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2;\n        n = card x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (`) \\<pi> `\n                                 {xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "show \"inj_on ((`) \\<pi>) {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on ((`) \\<pi>)\n     {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}", "using inj"], ["proof (prove)\nusing this:\n  inj_on ((`) \\<pi>)\n   {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n\ngoal (1 subgoal):\n 1. inj_on ((`) \\<pi>)\n     {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}", "by simp"], ["proof (state)\nthis:\n  inj_on ((`) \\<pi>)\n   {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n\ngoal (2 subgoals):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2; n = card xa\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa\n 2. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2;\n        n = card x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (`) \\<pi> `\n                                 {xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "show \"\\<And>xa. xa \\<subseteq> b1 \\<Longrightarrow> xa \\<subseteq> b2 \\<Longrightarrow> n = card xa \\<Longrightarrow> card (\\<pi> ` xa) = card xa\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2; n = card xa\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa", "using eqcard"], ["proof (prove)\nusing this:\n  \\<lbrakk>?xa \\<subseteq> b1; ?xa \\<subseteq> b2\\<rbrakk>\n  \\<Longrightarrow> card (\\<pi> ` ?xa) = card ?xa\n\ngoal (1 subgoal):\n 1. \\<And>xa.\n       \\<lbrakk>xa \\<subseteq> b1; xa \\<subseteq> b2; n = card xa\\<rbrakk>\n       \\<Longrightarrow> card (\\<pi> ` xa) = card xa", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?xa \\<subseteq> b1; ?xa \\<subseteq> b2; n = card ?xa\\<rbrakk>\n  \\<Longrightarrow> card (\\<pi> ` ?xa) = card ?xa\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2;\n        n = card x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (`) \\<pi> `\n                                 {xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "show \"\\<And>x. x \\<subseteq> \\<pi> ` b1 \\<Longrightarrow> x \\<subseteq> \\<pi> ` b2 \\<Longrightarrow> n = card x \\<Longrightarrow> \n            x \\<in> (`) \\<pi> ` {xa. xa \\<subseteq> b1 \\<and> xa \\<subseteq> b2 \\<and> card xa = card x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2;\n        n = card x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (`) \\<pi> `\n                                 {xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "using surj"], ["proof (prove)\nusing this:\n  \\<lbrakk>?x \\<subseteq> \\<pi> ` b1; ?x \\<subseteq> \\<pi> ` b2\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> {\\<pi> ` xa |xa.\n                              xa \\<subseteq> b1 \\<and>\n                              xa \\<subseteq> b2 \\<and> card xa = card ?x}\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       \\<lbrakk>x \\<subseteq> \\<pi> ` b1; x \\<subseteq> \\<pi> ` b2;\n        n = card x\\<rbrakk>\n       \\<Longrightarrow> x \\<in> (`) \\<pi> `\n                                 {xa.\n                                  xa \\<subseteq> b1 \\<and>\n                                  xa \\<subseteq> b2 \\<and> card xa = card x}", "by (simp add: setcompr_eq_image)"], ["proof (state)\nthis:\n  \\<lbrakk>?x \\<subseteq> \\<pi> ` b1; ?x \\<subseteq> \\<pi> ` b2;\n   n = card ?x\\<rbrakk>\n  \\<Longrightarrow> ?x \\<in> (`) \\<pi> `\n                             {xa.\n                              xa \\<subseteq> b1 \\<and>\n                              xa \\<subseteq> b2 \\<and> card xa = card ?x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  bij_betw ((`) \\<pi>)\n   {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n   {y. y \\<subseteq> \\<pi> ` b1 \\<and>\n       y \\<subseteq> \\<pi> ` b2 \\<and> card y = n}\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "thus ?thesis"], ["proof (prove)\nusing this:\n  bij_betw ((`) \\<pi>)\n   {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n   {y. y \\<subseteq> \\<pi> ` b1 \\<and>\n       y \\<subseteq> \\<pi> ` b2 \\<and> card y = n}\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "using bij_betw_same_card"], ["proof (prove)\nusing this:\n  bij_betw ((`) \\<pi>)\n   {x. x \\<subseteq> b1 \\<and> x \\<subseteq> b2 \\<and> card x = n}\n   {y. y \\<subseteq> \\<pi> ` b1 \\<and>\n       y \\<subseteq> \\<pi> ` b2 \\<and> card y = n}\n  bij_betw ?f ?A ?B \\<Longrightarrow> card ?A = card ?B\n\ngoal (1 subgoal):\n 1. (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)", "by (auto simp add: n_intersect_number_def)"], ["proof (state)\nthis:\n  (b1 |\\<inter>|\\<^sub>n b2) = (\\<pi> ` b1 |\\<inter>|\\<^sub>n \\<pi> ` b2)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subdesign_iso_implies:\n  assumes \"sub_set_system V B \\<V> \\<B>\"\n  shows \"sub_set_system (\\<pi> ` V) (blocks_image B \\<pi>) \\<V>' \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sub_set_system (\\<pi> ` V) (blocks_image B \\<pi>) \\<V>' \\<B>'", "proof (unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<pi> ` V \\<subseteq> \\<V>'\n 2. blocks_image B \\<pi> \\<subseteq># \\<B>'", "show \"\\<pi> ` V \\<subseteq> \\<V>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<pi> ` V \\<subseteq> \\<V>'", "by (metis assms image_mono iso_points_map sub_set_system.points_subset)"], ["proof (state)\nthis:\n  \\<pi> ` V \\<subseteq> \\<V>'\n\ngoal (1 subgoal):\n 1. blocks_image B \\<pi> \\<subseteq># \\<B>'", "show \"blocks_image B \\<pi> \\<subseteq># \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. blocks_image B \\<pi> \\<subseteq># \\<B>'", "by (metis assms block_img blocks_image_def image_mset_subseteq_mono sub_set_system.blocks_subset)"], ["proof (state)\nthis:\n  blocks_image B \\<pi> \\<subseteq># \\<B>'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma subdesign_image_is_design: \n  assumes \"sub_set_system V B \\<V> \\<B>\"\n  assumes \"design V B\"\n  shows \"design (\\<pi> ` V) (blocks_image B \\<pi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "interpret fin: finite_incidence_system \"(\\<pi> ` V)\" \"(blocks_image B \\<pi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite_incidence_system (\\<pi> ` V) (blocks_image B \\<pi>)", "using assms(2)"], ["proof (prove)\nusing this:\n  design V B\n\ngoal (1 subgoal):\n 1. finite_incidence_system (\\<pi> ` V) (blocks_image B \\<pi>)", "by (simp add: design.axioms(1) finite_incidence_system.image_set_system_finite)"], ["proof (state)\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "interpret des: sub_design V B \\<V> \\<B>"], ["proof (prove)\ngoal (1 subgoal):\n 1. sub_design V B \\<V> \\<B>", "using assms design.wf_design_iff"], ["proof (prove)\nusing this:\n  sub_set_system V B \\<V> \\<B>\n  design V B\n  \\<lbrakk>design ?point_set ?block_collection;\n   ?bl \\<in># ?block_collection\\<rbrakk>\n  \\<Longrightarrow> design ?point_set ?block_collection =\n                    (?bl \\<subseteq> ?point_set \\<and>\n                     finite ?point_set \\<and> ?bl \\<noteq> {})\n\ngoal (1 subgoal):\n 1. sub_design V B \\<V> \\<B>", "by (unfold_locales, auto simp add: sub_set_system.points_subset sub_set_system.blocks_subset)"], ["proof (state)\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "have bl_img: \"blocks_image B \\<pi> \\<subseteq># \\<B>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. blocks_image B \\<pi> \\<subseteq># \\<B>'", "by (simp add: blocks_image_def des.blocks_subset image_mset_subseteq_mono iso_is_image_block)"], ["proof (state)\nthis:\n  blocks_image B \\<pi> \\<subseteq># \\<B>'\n\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "then"], ["proof (chain)\npicking this:\n  blocks_image B \\<pi> \\<subseteq># \\<B>'", "show ?thesis"], ["proof (prove)\nusing this:\n  blocks_image B \\<pi> \\<subseteq># \\<B>'\n\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "proof (unfold_locales, auto)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>{} \\<in># blocks_image B \\<pi>;\n     blocks_image B \\<pi> \\<subseteq># \\<B>'\\<rbrakk>\n    \\<Longrightarrow> False", "show \"{} \\<in># blocks_image B \\<pi> \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. {} \\<in># blocks_image B \\<pi> \\<Longrightarrow> False", "using assms subdesign_iso_implies target.blocks_nempty bl_img"], ["proof (prove)\nusing this:\n  sub_set_system V B \\<V> \\<B>\n  design V B\n  sub_set_system ?V ?B \\<V> \\<B> \\<Longrightarrow>\n  sub_set_system (\\<pi> ` ?V) (blocks_image ?B \\<pi>) \\<V>' \\<B>'\n  ?bl \\<in># \\<B>' \\<Longrightarrow> ?bl \\<noteq> {}\n  blocks_image B \\<pi> \\<subseteq># \\<B>'\n\ngoal (1 subgoal):\n 1. {} \\<in># blocks_image B \\<pi> \\<Longrightarrow> False", "by auto"], ["proof (state)\nthis:\n  {} \\<in># blocks_image B \\<pi> \\<Longrightarrow> False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  design (\\<pi> ` V) (blocks_image B \\<pi>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma sub_design_isomorphism: \n  assumes \"sub_set_system V B \\<V> \\<B>\"\n  assumes \"design V B\"\n  shows \"design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>", "interpret design \"(\\<pi> ` V)\" \"(blocks_image B \\<pi>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. design (\\<pi> ` V) (blocks_image B \\<pi>)", "by (simp add: assms(1) assms(2) subdesign_image_is_design)"], ["proof (state)\ngoal (1 subgoal):\n 1. design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>", "interpret des: design V B"], ["proof (prove)\ngoal (1 subgoal):\n 1. design V B", "by fact"], ["proof (state)\ngoal (1 subgoal):\n 1. design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>", "proof (unfold_locales)"], ["proof (state)\ngoal (2 subgoals):\n 1. bij_betw \\<pi> V (\\<pi> ` V)\n 2. image_mset ((`) \\<pi>) B = blocks_image B \\<pi>", "show \"bij_betw \\<pi> V (\\<pi> ` V)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw \\<pi> V (\\<pi> ` V)", "using bij"], ["proof (prove)\nusing this:\n  bij_betw \\<pi> \\<V> \\<V>'\n\ngoal (1 subgoal):\n 1. bij_betw \\<pi> V (\\<pi> ` V)", "by (metis assms(1) bij_betw_subset sub_set_system.points_subset)"], ["proof (state)\nthis:\n  bij_betw \\<pi> V (\\<pi> ` V)\n\ngoal (1 subgoal):\n 1. image_mset ((`) \\<pi>) B = blocks_image B \\<pi>", "show \"image_mset ((`) \\<pi>) B = blocks_image B \\<pi>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. image_mset ((`) \\<pi>) B = blocks_image B \\<pi>", "by (simp add: blocks_image_def)"], ["proof (state)\nthis:\n  image_mset ((`) \\<pi>) B = blocks_image B \\<pi>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  design_isomorphism V B (\\<pi> ` V) (blocks_image B \\<pi>) \\<pi>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}