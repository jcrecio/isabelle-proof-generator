{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Revisions/OperationalSemantics.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Revisions", "problem_names": ["lemma only_new_introduces_lids [intro, dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_new: \"\\<And>\\<sigma> \\<tau> \\<E> v. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Ref (VE v)])\"\n  shows \"LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\"", "lemma only_fork_introduces_rids [intro, dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_fork: \"\\<And>\\<sigma> \\<tau> \\<E> e. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Rfork e])\"\n  shows \"RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\"", "lemma only_fork_introduces_rids' [dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_fork: \"\\<And>\\<sigma> \\<tau> \\<E> e. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Rfork e])\"\n  shows \"r' \\<notin> RID\\<^sub>G s \\<Longrightarrow> r' \\<notin> RID\\<^sub>G s'\"", "lemma only_new_introduces_lids' [dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_new: \"\\<And>\\<sigma> \\<tau> \\<E> v. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Ref (VE v)])\"\n  shows \"l \\<notin> LID\\<^sub>G s \\<Longrightarrow> l \\<notin> LID\\<^sub>G s'\"", "lemma domains_subsume_globallyI [intro]:\n  \"(\\<And>r \\<sigma> \\<tau> e. s r = Some (\\<sigma>,\\<tau>,e) \\<Longrightarrow> \\<S> (\\<sigma>,\\<tau>,e)) \\<Longrightarrow> domains_subsume_globally s\"", "lemma subsumes_accessibleI [intro]: \n  \"(r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1)) \\<Longrightarrow> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> doms (the (s r\\<^sub>1))) \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s\"", "lemma subsumes_accessible_globallyI [intro]:\n  \"(\\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2 \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2. s r\\<^sub>1 = Some (\\<sigma>\\<^sub>1,\\<tau>\\<^sub>1,e\\<^sub>1) \\<Longrightarrow> s r\\<^sub>2 = Some (\\<sigma>\\<^sub>2,\\<tau>\\<^sub>2,e\\<^sub>2) \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s) \\<Longrightarrow> \\<A>\\<^sub>G s\"", "lemma \\<S>\\<^sub>G_imp_\\<A>_refl:\n  assumes \n    \\<S>\\<^sub>G_s: \"\\<S>\\<^sub>G s\" and\n    r_in_dom: \"r \\<in> dom s\"\n  shows \"\\<A> r r s\"", "lemma step_preserves_\\<S>\\<^sub>G_and_\\<A>\\<^sub>G:\n  assumes \n    step: \"revision_step r s s'\" and\n    \\<S>\\<^sub>G_s: \"\\<S>\\<^sub>G s\" and\n    \\<A>\\<^sub>G_s: \"\\<A>\\<^sub>G s\"\n  shows \"\\<S>\\<^sub>G s'\" \"\\<A>\\<^sub>G s'\""], "translations": [["", "lemma only_new_introduces_lids [intro, dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_new: \"\\<And>\\<sigma> \\<tau> \\<E> v. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Ref (VE v)])\"\n  shows \"LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "proof (use step in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "case fork"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'_)]), r'_ \n  \\<mapsto> (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'_ \\<notin> RID\\<^sub>G s\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "thus ?thesis"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'_)]), r'_ \n  \\<mapsto> (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'_ \\<notin> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "by (auto simp add: fun_upd_twist ID_distr_global_conditional)"], ["proof (state)\nthis:\n  LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "case (join _ _ _ r' _ _ _)"], ["proof (state)\nthis:\n  s' = (s(r \\<mapsto> (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "hence \"r \\<noteq> r'\""], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (1 subgoal):\n 1. r \\<noteq> r'", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> r'\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "using join"], ["proof (prove)\nusing this:\n  r \\<noteq> r'\n  s' = (s(r \\<mapsto> (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "by (auto simp add: fun_upd_twist dest!: in_combination_in_component)"], ["proof (state)\nthis:\n  LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> LID\\<^sub>G s' \\<subseteq> LID\\<^sub>G s", "qed (auto simp add: not_new fun_upd_twist ID_distr_global_conditional dest: LID\\<^sub>SI(2))"], ["", "lemma only_fork_introduces_rids [intro, dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_fork: \"\\<And>\\<sigma> \\<tau> \\<E> e. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Rfork e])\"\n  shows \"RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "proof (use step in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "case get"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "then"], ["proof (chain)\npicking this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)", "show ?thesis"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "case fork"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'_)]), r'_ \n  \\<mapsto> (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'_ \\<notin> RID\\<^sub>G s\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "then"], ["proof (chain)\npicking this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'_)]), r'_ \n  \\<mapsto> (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'_ \\<notin> RID\\<^sub>G s", "show ?thesis"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'_)]), r'_ \n  \\<mapsto> (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'_ \\<notin> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "by (simp add: not_fork)"], ["proof (state)\nthis:\n  RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "case (join _ _ _r' _ _ _)"], ["proof (state)\nthis:\n  s' = (s(r \\<mapsto> (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "hence \"r \\<noteq> r'\""], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (1 subgoal):\n 1. r \\<noteq> r'", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> r'\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "then"], ["proof (chain)\npicking this:\n  r \\<noteq> r'", "show ?thesis"], ["proof (prove)\nusing this:\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "using join"], ["proof (prove)\nusing this:\n  r \\<noteq> r'\n  s' = (s(r \\<mapsto> (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (1 subgoal):\n 1. RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "by (auto simp add: fun_upd_twist dest!: in_combination_in_component)"], ["proof (state)\nthis:\n  RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> RID\\<^sub>G s' \\<subseteq> RID\\<^sub>G s", "qed (auto simp add: ID_distr_global_conditional)"], ["", "lemma only_fork_introduces_rids' [dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_fork: \"\\<And>\\<sigma> \\<tau> \\<E> e. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Rfork e])\"\n  shows \"r' \\<notin> RID\\<^sub>G s \\<Longrightarrow> r' \\<notin> RID\\<^sub>G s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<notin> RID\\<^sub>G s \\<Longrightarrow> r' \\<notin> RID\\<^sub>G s'", "using assms"], ["proof (prove)\nusing this:\n  revision_step r s s'\n  s r \\<noteq> Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e])\n\ngoal (1 subgoal):\n 1. r' \\<notin> RID\\<^sub>G s \\<Longrightarrow> r' \\<notin> RID\\<^sub>G s'", "by blast"], ["", "lemma only_new_introduces_lids' [dest]:\n  assumes \n    step: \"revision_step r s s'\" and\n    not_new: \"\\<And>\\<sigma> \\<tau> \\<E> v. s r \\<noteq> Some (\\<sigma>,\\<tau>,\\<E>[Ref (VE v)])\"\n  shows \"l \\<notin> LID\\<^sub>G s \\<Longrightarrow> l \\<notin> LID\\<^sub>G s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s \\<Longrightarrow> l \\<notin> LID\\<^sub>G s'", "using assms"], ["proof (prove)\nusing this:\n  revision_step r s s'\n  s r \\<noteq> Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Ref (VE ?v)])\n\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s \\<Longrightarrow> l \\<notin> LID\\<^sub>G s'", "by blast"], ["", "subsection \\<open>Domain subsumption\\<close>"], ["", "subsubsection Definitions"], ["", "definition domains_subsume :: \"('r,'l,'v) local_state \\<Rightarrow> bool\" (\"\\<S>\") where\n  \"\\<S> ls = (LID\\<^sub>L ls \\<subseteq> doms ls)\""], ["", "definition domains_subsume_globally :: \"('r,'l,'v) global_state \\<Rightarrow> bool\" (\"\\<S>\\<^sub>G\") where\n  \"\\<S>\\<^sub>G s = (\\<forall>r ls. s r = Some ls \\<longrightarrow> \\<S> ls)\""], ["", "lemma domains_subsume_globallyI [intro]:\n  \"(\\<And>r \\<sigma> \\<tau> e. s r = Some (\\<sigma>,\\<tau>,e) \\<Longrightarrow> \\<S> (\\<sigma>,\\<tau>,e)) \\<Longrightarrow> domains_subsume_globally s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r \\<sigma> \\<tau> e.\n        s r = Some (\\<sigma>, \\<tau>, e) \\<Longrightarrow>\n        \\<S> (\\<sigma>, \\<tau>, e)) \\<Longrightarrow>\n    \\<S>\\<^sub>G s", "using domains_subsume_globally_def"], ["proof (prove)\nusing this:\n  \\<S>\\<^sub>G ?s =\n  (\\<forall>r ls. ?s r = Some ls \\<longrightarrow> \\<S> ls)\n\ngoal (1 subgoal):\n 1. (\\<And>r \\<sigma> \\<tau> e.\n        s r = Some (\\<sigma>, \\<tau>, e) \\<Longrightarrow>\n        \\<S> (\\<sigma>, \\<tau>, e)) \\<Longrightarrow>\n    \\<S>\\<^sub>G s", "by auto"], ["", "definition subsumes_accessible :: \"'r \\<Rightarrow> 'r \\<Rightarrow> ('r,'l,'v) global_state \\<Rightarrow> bool\" (\"\\<A>\") where\n  \"\\<A> r\\<^sub>1 r\\<^sub>2 s = (r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1)) \\<longrightarrow> (LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> doms (the (s r\\<^sub>1))))\""], ["", "lemma subsumes_accessibleI [intro]: \n  \"(r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1)) \\<Longrightarrow> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> doms (the (s r\\<^sub>1))) \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1)) \\<Longrightarrow>\n     LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n     \\<subseteq> doms (the (s r\\<^sub>1))) \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s", "using subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. (r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1)) \\<Longrightarrow>\n     LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n     \\<subseteq> doms (the (s r\\<^sub>1))) \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s", "by auto"], ["", "definition subsumes_accessible_globally :: \"('r,'l,'v) global_state \\<Rightarrow> bool\" (\"\\<A>\\<^sub>G\") where\n  \"\\<A>\\<^sub>G s = (\\<forall>r\\<^sub>1 r\\<^sub>2. r\\<^sub>1 \\<in> dom s \\<longrightarrow> r\\<^sub>2 \\<in> dom s \\<longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s)\""], ["", "lemma subsumes_accessible_globallyI [intro]:\n  \"(\\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2 \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2. s r\\<^sub>1 = Some (\\<sigma>\\<^sub>1,\\<tau>\\<^sub>1,e\\<^sub>1) \\<Longrightarrow> s r\\<^sub>2 = Some (\\<sigma>\\<^sub>2,\\<tau>\\<^sub>2,e\\<^sub>2) \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s) \\<Longrightarrow> \\<A>\\<^sub>G s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2\n        \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2.\n        \\<lbrakk>s r\\<^sub>1 =\n                 Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1);\n         s r\\<^sub>2 =\n         Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s) \\<Longrightarrow>\n    \\<A>\\<^sub>G s", "using subsumes_accessible_globally_def"], ["proof (prove)\nusing this:\n  \\<A>\\<^sub>G ?s =\n  (\\<forall>r\\<^sub>1 r\\<^sub>2.\n      r\\<^sub>1 \\<in> dom ?s \\<longrightarrow>\n      r\\<^sub>2 \\<in> dom ?s \\<longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 ?s)\n\ngoal (1 subgoal):\n 1. (\\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2\n        \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2.\n        \\<lbrakk>s r\\<^sub>1 =\n                 Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1);\n         s r\\<^sub>2 =\n         Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\\<rbrakk>\n        \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s) \\<Longrightarrow>\n    \\<A>\\<^sub>G s", "by auto"], ["", "subsubsection \\<open>The theorem\\<close>"], ["", "lemma \\<S>\\<^sub>G_imp_\\<A>_refl:\n  assumes \n    \\<S>\\<^sub>G_s: \"\\<S>\\<^sub>G s\" and\n    r_in_dom: \"r \\<in> dom s\"\n  shows \"\\<A> r r s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r r s", "using assms"], ["proof (prove)\nusing this:\n  \\<S>\\<^sub>G s\n  r \\<in> dom s\n\ngoal (1 subgoal):\n 1. \\<A> r r s", "by (auto simp add: domains_subsume_def domains_subsume_globally_def subsumes_accessibleI)"], ["", "lemma step_preserves_\\<S>\\<^sub>G_and_\\<A>\\<^sub>G:\n  assumes \n    step: \"revision_step r s s'\" and\n    \\<S>\\<^sub>G_s: \"\\<S>\\<^sub>G s\" and\n    \\<A>\\<^sub>G_s: \"\\<A>\\<^sub>G s\"\n  shows \"\\<S>\\<^sub>G s'\" \"\\<A>\\<^sub>G s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<^sub>G s' &&& \\<A>\\<^sub>G s'", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<S>\\<^sub>G s'\n 2. \\<A>\\<^sub>G s'", "show \"\\<S>\\<^sub>G s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S>\\<^sub>G s'", "proof (rule domains_subsume_globallyI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r \\<sigma> \\<tau> e.\n       s' r = Some (\\<sigma>, \\<tau>, e) \\<Longrightarrow>\n       \\<S> (\\<sigma>, \\<tau>, e)", "fix r' \\<sigma> \\<tau> e"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r \\<sigma> \\<tau> e.\n       s' r = Some (\\<sigma>, \\<tau>, e) \\<Longrightarrow>\n       \\<S> (\\<sigma>, \\<tau>, e)", "assume s'_r: \"s' r' = Some (\\<sigma>,\\<tau>,e)\""], ["proof (state)\nthis:\n  s' r' = Some (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. \\<And>r \\<sigma> \\<tau> e.\n       s' r = Some (\\<sigma>, \\<tau>, e) \\<Longrightarrow>\n       \\<S> (\\<sigma>, \\<tau>, e)", "show \"\\<S> (\\<sigma>,\\<tau>,e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "proof (cases \"s' r' = s r'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. s' r' = s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. s' r' \\<noteq> s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case True"], ["proof (state)\nthis:\n  s' r' = s r'\n\ngoal (2 subgoals):\n 1. s' r' = s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. s' r' \\<noteq> s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "then"], ["proof (chain)\npicking this:\n  s' r' = s r'", "show ?thesis"], ["proof (prove)\nusing this:\n  s' r' = s r'\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "using \\<S>\\<^sub>G_s domains_subsume_globally_def s'_r"], ["proof (prove)\nusing this:\n  s' r' = s r'\n  \\<S>\\<^sub>G s\n  \\<S>\\<^sub>G ?s =\n  (\\<forall>r ls. ?s r = Some ls \\<longrightarrow> \\<S> ls)\n  s' r' = Some (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by auto"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. s' r' \\<noteq> s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s' r' \\<noteq> s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case r'_was_updated: False"], ["proof (state)\nthis:\n  s' r' \\<noteq> s r'\n\ngoal (1 subgoal):\n 1. s' r' \\<noteq> s r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "proof (use step in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case (app \\<sigma>' \\<tau>' \\<E>' _ e' v')"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [subst (VE v') x_ e']))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Apply (VE (Lambda x_ e')) (VE v')])\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "by (metis fun_upd_apply app(1) r'_was_updated)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union> LID\\<^sub>C \\<E>' \\<union> LID\\<^sub>E e' \\<union> LID\\<^sub>V v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r))\n    \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n                LID\\<^sub>C \\<E>' \\<union>\n                LID\\<^sub>E e' \\<union>\n                LID\\<^sub>V v'", "using app(1)"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [subst (VE v') x_ e']))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r))\n    \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n                LID\\<^sub>C \\<E>' \\<union>\n                LID\\<^sub>E e' \\<union>\n                LID\\<^sub>V v'", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r))\n  \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n              LID\\<^sub>C \\<E>' \\<union>\n              LID\\<^sub>E e' \\<union>\n              LID\\<^sub>V v'\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r))\n  \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n              LID\\<^sub>C \\<E>' \\<union>\n              LID\\<^sub>E e' \\<union>\n              LID\\<^sub>V v'\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>C \\<E>' \\<union>\n    LID\\<^sub>E e' \\<union>\n    LID\\<^sub>V v' =\n    LID\\<^sub>L (the (s r))", "using app(2)"], ["proof (prove)\nusing this:\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Apply (VE (Lambda x_ e')) (VE v')])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>C \\<E>' \\<union>\n    LID\\<^sub>E e' \\<union>\n    LID\\<^sub>V v' =\n    LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n  LID\\<^sub>C \\<E>' \\<union>\n  LID\\<^sub>E e' \\<union>\n  LID\\<^sub>V v' =\n  LID\\<^sub>L (the (s r))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n  LID\\<^sub>C \\<E>' \\<union>\n  LID\\<^sub>E e' \\<union>\n  LID\\<^sub>V v' =\n  LID\\<^sub>L (the (s r))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def local.app(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "using app"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [subst (VE v') x_ e']))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Apply (VE (Lambda x_ e')) (VE v')])\n\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "by simp"], ["proof (state)\nthis:\n  doms (the (s r)) = doms (the (s' r))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E> [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E> [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 9. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case ifTrue"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "by (metis fun_upd_apply ifTrue(1) r'_was_updated)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "using ifTrue"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def ifTrue(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "by (simp add: ifTrue)"], ["proof (state)\nthis:\n  doms (the (s r)) = doms (the (s' r))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 8. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case ifFalse"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "by (metis fun_upd_apply ifFalse(1) r'_was_updated)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "using ifFalse"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def ifFalse(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "by (simp add: ifFalse)"], ["proof (state)\nthis:\n  doms (the (s r)) = doms (the (s' r))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 7. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case (new \\<sigma>' \\<tau>' \\<E>' v' l')"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "by (metis fun_upd_apply new(1) r'_was_updated)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) = insert l' (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union> LID\\<^sub>V v' \\<union> LID\\<^sub>C \\<E>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) =\n    insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) =\n    insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>')", "have \"l' \\<notin> LID\\<^sub>S \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<notin> LID\\<^sub>S \\<tau>'", "using new(2-3)"], ["proof (prove)\nusing this:\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. l' \\<notin> LID\\<^sub>S \\<tau>'", "by auto"], ["proof (state)\nthis:\n  l' \\<notin> LID\\<^sub>S \\<tau>'\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) =\n    insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>')", "thus ?thesis"], ["proof (prove)\nusing this:\n  l' \\<notin> LID\\<^sub>S \\<tau>'\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) =\n    insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>')", "using new(1)"], ["proof (prove)\nusing this:\n  l' \\<notin> LID\\<^sub>S \\<tau>'\n  s' = s(r \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) =\n    insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>')", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) =\n  insert l'\n   (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>V v' \\<union>\n    LID\\<^sub>C \\<E>')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) =\n  insert l'\n   (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>V v' \\<union>\n    LID\\<^sub>C \\<E>')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) =\n  insert l'\n   (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>V v' \\<union>\n    LID\\<^sub>C \\<E>')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = insert l' (LID\\<^sub>L (the (s r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>') =\n    insert l' (LID\\<^sub>L (the (s r)))", "using new"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. insert l'\n     (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n      LID\\<^sub>V v' \\<union>\n      LID\\<^sub>C \\<E>') =\n    insert l' (LID\\<^sub>L (the (s r)))", "by auto"], ["proof (state)\nthis:\n  insert l'\n   (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>V v' \\<union>\n    LID\\<^sub>C \\<E>') =\n  insert l' (LID\\<^sub>L (the (s r)))\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  insert l'\n   (LID\\<^sub>S \\<sigma>' \\<union> LID\\<^sub>S \\<tau>' \\<union>\n    LID\\<^sub>V v' \\<union>\n    LID\\<^sub>C \\<E>') =\n  insert l' (LID\\<^sub>L (the (s r)))\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> insert l' (doms (the (s r)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert l' (LID\\<^sub>L (the (s r)))\n    \\<subseteq> insert l' (doms (the (s r)))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def insert_mono new(2) option.sel)"], ["proof (state)\nthis:\n  insert l' (LID\\<^sub>L (the (s r)))\n  \\<subseteq> insert l' (doms (the (s r)))\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  insert l' (LID\\<^sub>L (the (s r)))\n  \\<subseteq> insert l' (doms (the (s r)))\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. insert l' (doms (the (s r))) = doms (the (s' r))", "using new"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. insert l' (doms (the (s r))) = doms (the (s' r))", "by auto"], ["proof (state)\nthis:\n  insert l' (doms (the (s r))) = doms (the (s' r))\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 6. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case get"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "by (metis fun_upd_apply get(1) r'_was_updated)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) = LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) = LID\\<^sub>L (the (s r))", "using get"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) = LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) = LID\\<^sub>L (the (s r))\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) = LID\\<^sub>L (the (s r))\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def get(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "by (simp add: get(1-2))"], ["proof (state)\nthis:\n  doms (the (s r)) = doms (the (s' r))\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 5. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case set"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r'", "by (metis fun_upd_apply set(1) r'_was_updated)"], ["proof (state)\nthis:\n  r = r'\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "using set(1-2)"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def set(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<subseteq> doms (the (s' r))", "using set(1-2)"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<subseteq> doms (the (s' r))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r)) \\<subseteq> doms (the (s' r))\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 4. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case (fork \\<sigma>' \\<tau>' _ _ r'')"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r = r' \\<or> r'' = r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r = r' \\<or> r'' = r'", "using fork r'_was_updated"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\n  s' r' \\<noteq> s r'\n\ngoal (1 subgoal):\n 1. r = r' \\<or> r'' = r'", "by auto"], ["proof (state)\nthis:\n  r = r' \\<or> r'' = r'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 3. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "then"], ["proof (chain)\npicking this:\n  r = r' \\<or> r'' = r'", "show ?thesis"], ["proof (prove)\nusing this:\n  r = r' \\<or> r'' = r'\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "assume \"r = r'\""], ["proof (state)\nthis:\n  r = r'\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "using fork(1-2)"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def fork(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "using fork"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. doms (the (s r)) = doms (the (s' r))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r)) = doms (the (s' r))\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "assume \"r'' = r'\""], ["proof (state)\nthis:\n  r'' = r'\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r'')) \\<subseteq> LID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r'')) \\<subseteq> LID\\<^sub>L (the (s r))", "using fork(1-2)"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r'')) \\<subseteq> LID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r'')) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r'')) \\<subseteq> LID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))", "by (metis \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def fork(2) option.sel)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<subseteq> doms (the (s r))\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = dom \\<sigma>' \\<union> dom \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = dom \\<sigma>' \\<union> dom \\<tau>'", "using fork"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. doms (the (s r)) = dom \\<sigma>' \\<union> dom \\<tau>'", "by simp"], ["proof (state)\nthis:\n  doms (the (s r)) = dom \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  doms (the (s r)) = dom \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = dom (\\<sigma>';;\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' = dom (\\<sigma>';;\\<tau>')", "by (simp add: dom_combination_dom_union)"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' = dom (\\<sigma>';;\\<tau>')\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' = dom (\\<sigma>';;\\<tau>')\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (\\<sigma>';;\\<tau>') = doms (the (s' r''))", "using fork"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>_ [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e_))\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. dom (\\<sigma>';;\\<tau>') = doms (the (s' r''))", "by simp"], ["proof (state)\nthis:\n  dom (\\<sigma>';;\\<tau>') = doms (the (s' r''))\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r'')) \\<subseteq> doms (the (s' r''))", "have \"\\<S> (the (s' r''))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r'')) \\<subseteq> doms (the (s' r''))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r''))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r''))\n\ngoal (1 subgoal):\n 1. r'' = r' \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r''))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by (simp add: \\<open>r'' = r'\\<close> s'_r)"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case (join \\<sigma>' \\<tau>' _ r'' \\<sigma>'' \\<tau>'' _)"], ["proof (state)\nthis:\n  s' = (s(r \\<mapsto> (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>_ [VE (CV Unit)])))\n  (r'' := None)\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"r' = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' = r", "by (metis fun_upd_def join(1) option.simps(3) r'_was_updated s'_r)"], ["proof (state)\nthis:\n  r' = r\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"LID\\<^sub>L (the (s' r)) \\<subseteq> LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r))\n    \\<subseteq> LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''", "using join"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>_ [VE (CV Unit)])))\n  (r'' := None)\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r))\n    \\<subseteq> LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r))\n  \\<subseteq> LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r))\n  \\<subseteq> LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n    \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''", "by (metis Un_mono \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def join(2) option.sel subset_refl)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n  \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n  \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n    \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))", "using join(3)"], ["proof (prove)\nusing this:\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n    \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n  \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  doms (the (s r)) \\<union> LID\\<^sub>S \\<tau>''\n  \\<subseteq> doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> doms (the (s r)) \\<union> doms (the (s r''))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))\n    \\<subseteq> doms (the (s r)) \\<union> doms (the (s r''))", "by (metis (no_types, lifting) Un_absorb \\<S>\\<^sub>G_s domains_subsume_def domains_subsume_globally_def join(3) option.sel sup.orderI sup_mono)"], ["proof (state)\nthis:\n  doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))\n  \\<subseteq> doms (the (s r)) \\<union> doms (the (s r''))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  doms (the (s r)) \\<union> LID\\<^sub>L (the (s r''))\n  \\<subseteq> doms (the (s r)) \\<union> doms (the (s r''))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union> dom \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<union> doms (the (s r'')) =\n    dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n    dom \\<tau>''", "using join"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>_ [VE (CV Unit)])))\n  (r'' := None)\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n\ngoal (1 subgoal):\n 1. doms (the (s r)) \\<union> doms (the (s r'')) =\n    dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n    dom \\<tau>''", "by auto"], ["proof (state)\nthis:\n  doms (the (s r)) \\<union> doms (the (s r'')) =\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n  dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  doms (the (s r)) \\<union> doms (the (s r'')) =\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n  dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union> LID\\<^sub>S \\<sigma>'' \\<union> dom \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                LID\\<^sub>S \\<sigma>'' \\<union>\n                dom \\<tau>''", "by auto"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n  dom \\<tau>''\n  \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n              LID\\<^sub>S \\<sigma>'' \\<union>\n              dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>'' \\<union>\n  dom \\<tau>''\n  \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n              LID\\<^sub>S \\<sigma>'' \\<union>\n              dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n    LID\\<^sub>S \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                dom \\<sigma>' \\<union>\n                dom \\<tau>' \\<union>\n                dom \\<tau>''", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n    LID\\<^sub>S \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                dom \\<sigma>' \\<union>\n                dom \\<tau>' \\<union>\n                dom \\<tau>''", "have r_r'': \"\\<A> r r'' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r r'' s", "using \\<A>\\<^sub>G_s join(2-3) subsumes_accessible_globally_def"], ["proof (prove)\nusing this:\n  \\<A>\\<^sub>G s\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n  \\<A>\\<^sub>G ?s =\n  (\\<forall>r\\<^sub>1 r\\<^sub>2.\n      r\\<^sub>1 \\<in> dom ?s \\<longrightarrow>\n      r\\<^sub>2 \\<in> dom ?s \\<longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 ?s)\n\ngoal (1 subgoal):\n 1. \\<A> r r'' s", "by auto"], ["proof (state)\nthis:\n  \\<A> r r'' s\n\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n    LID\\<^sub>S \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                dom \\<sigma>' \\<union>\n                dom \\<tau>' \\<union>\n                dom \\<tau>''", "have r_accesses_r'': \"r'' \\<in> RID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<in> RID\\<^sub>L (the (s r))", "using join"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>_ [VE (CV Unit)])))\n  (r'' := None)\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n\ngoal (1 subgoal):\n 1. r'' \\<in> RID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  r'' \\<in> RID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n    LID\\<^sub>S \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                dom \\<sigma>' \\<union>\n                dom \\<tau>' \\<union>\n                dom \\<tau>''", "have \"LID\\<^sub>S \\<sigma>'' \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>'' \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>'", "using join subsumes_accessible_def r_r'' r_accesses_r''"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>_ [VE (CV Unit)])))\n  (r'' := None)\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n  \\<A> r r'' s\n  r'' \\<in> RID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>'' \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>'", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma>'' \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n    LID\\<^sub>S \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                dom \\<sigma>' \\<union>\n                dom \\<tau>' \\<union>\n                dom \\<tau>''", "thus ?thesis"], ["proof (prove)\nusing this:\n  LID\\<^sub>S \\<sigma>'' \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n    LID\\<^sub>S \\<sigma>'' \\<union>\n    dom \\<tau>''\n    \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n                dom \\<sigma>' \\<union>\n                dom \\<tau>' \\<union>\n                dom \\<tau>''", "by auto"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n  LID\\<^sub>S \\<sigma>'' \\<union>\n  dom \\<tau>''\n  \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n              dom \\<sigma>' \\<union>\n              dom \\<tau>' \\<union>\n              dom \\<tau>''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n  LID\\<^sub>S \\<sigma>'' \\<union>\n  dom \\<tau>''\n  \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n              dom \\<sigma>' \\<union>\n              dom \\<tau>' \\<union>\n              dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n  LID\\<^sub>S \\<sigma>'' \\<union>\n  dom \\<tau>''\n  \\<subseteq> dom \\<sigma>' \\<union> dom \\<tau>' \\<union>\n              dom \\<sigma>' \\<union>\n              dom \\<tau>' \\<union>\n              dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>' \\<union>\n    dom \\<tau>' \\<union>\n    dom \\<tau>'' =\n    dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>''", "by auto"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>' \\<union>\n  dom \\<tau>' \\<union>\n  dom \\<tau>'' =\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<sigma>' \\<union>\n  dom \\<tau>' \\<union>\n  dom \\<tau>'' =\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>''\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>'' =\n    dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'')", "by (auto simp add: dom_combination_dom_union)"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>'' =\n  dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "also"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>' \\<union> dom \\<tau>'' =\n  dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "have \"... = doms (the (s' r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'') = doms (the (s' r))", "using join"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>_ [VE (CV Unit)])))\n  (r'' := None)\n  s r = Some (\\<sigma>', \\<tau>', \\<E>_ [Rjoin (VE (Rid r''))])\n  s r'' = Some (\\<sigma>'', \\<tau>'', VE v_)\n\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'') = doms (the (s' r))", "by auto"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom (\\<tau>';;\\<tau>'') = doms (the (s' r))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))", "have \"\\<S> (the (s' r))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>L (the (s' r)) \\<subseteq> doms (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (the (s' r))", "by (simp add: domains_subsume_def)"], ["proof (state)\nthis:\n  \\<S> (the (s' r))\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)\n 2. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "using \\<open>r' = r\\<close> s'_r"], ["proof (prove)\nusing this:\n  \\<S> (the (s' r))\n  r' = r\n  s' r' = Some (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by auto"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<S> (\\<sigma>, \\<tau>, e)", "then"], ["proof (chain)\npicking this:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None", "show ?thesis"], ["proof (prove)\nusing this:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "using s'_r"], ["proof (prove)\nusing this:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None\n  s' r' = Some (\\<sigma>, \\<tau>, e)\n\ngoal (1 subgoal):\n 1. \\<S> (\\<sigma>, \\<tau>, e)", "by blast"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<S> (\\<sigma>, \\<tau>, e)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<S>\\<^sub>G s'\n\ngoal (1 subgoal):\n 1. \\<A>\\<^sub>G s'", "show \"\\<A>\\<^sub>G s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A>\\<^sub>G s'", "proof (rule subsumes_accessible_globallyI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2\n       \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2.\n       \\<lbrakk>s' r\\<^sub>1 =\n                Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1);\n        s' r\\<^sub>2 =\n        Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "fix r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2 \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2\n       \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2.\n       \\<lbrakk>s' r\\<^sub>1 =\n                Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1);\n        s' r\\<^sub>2 =\n        Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume \n      s'_r\\<^sub>1: \"s' r\\<^sub>1 = Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1)\" and\n      s'_r\\<^sub>2: \"s' r\\<^sub>2 = Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\""], ["proof (state)\nthis:\n  s' r\\<^sub>1 = Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1)\n  s' r\\<^sub>2 = Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<And>r\\<^sub>1 \\<sigma>\\<^sub>1 \\<tau>\\<^sub>1 e\\<^sub>1 r\\<^sub>2\n       \\<sigma>\\<^sub>2 \\<tau>\\<^sub>2 e\\<^sub>2.\n       \\<lbrakk>s' r\\<^sub>1 =\n                Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1);\n        s' r\\<^sub>2 =\n        Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (cases \"r\\<^sub>1 = r\\<^sub>2\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r\\<^sub>2 \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case True"], ["proof (state)\nthis:\n  r\\<^sub>1 = r\\<^sub>2\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r\\<^sub>2 \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "using \\<S>\\<^sub>G_imp_\\<A>_refl \\<open>\\<S>\\<^sub>G s'\\<close> s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r\\<^sub>2\n  \\<lbrakk>\\<S>\\<^sub>G ?s; ?r \\<in> dom ?s\\<rbrakk>\n  \\<Longrightarrow> \\<A> ?r ?r ?s\n  \\<S>\\<^sub>G s'\n  s' r\\<^sub>1 = Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "by blast"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case r\\<^sub>1_neq_r\\<^sub>2: False"], ["proof (state)\nthis:\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n\ngoal (1 subgoal):\n 1. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have r\\<^sub>1_nor_r\\<^sub>2_updated_implies_thesis: \"s' r\\<^sub>1 = s r\\<^sub>1 \\<Longrightarrow> s' r\\<^sub>2 = s r\\<^sub>2 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_unchanged: \"s' r\\<^sub>1 = s r\\<^sub>1\" and r\\<^sub>2_unchanged: \"s' r\\<^sub>2 = s r\\<^sub>2\""], ["proof (state)\nthis:\n  s' r\\<^sub>1 = s r\\<^sub>1\n  s' r\\<^sub>2 = s r\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domIff option.discI r\\<^sub>1_unchanged r\\<^sub>2_unchanged s'_r\\<^sub>1 s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>1_unchanged r\\<^sub>2_unchanged subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  s' r\\<^sub>1 = s r\\<^sub>1\n  s' r\\<^sub>2 = s r\\<^sub>2\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "by auto"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have r\\<^sub>1_or_r\\<^sub>2_updated_implies_thesis: \"s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or> s' r\\<^sub>2 \\<noteq> s r\\<^sub>2 \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or>\n    s' r\\<^sub>2 \\<noteq> s r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or>\n    s' r\\<^sub>2 \\<noteq> s r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_or_r\\<^sub>2_updated: \"s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or> s' r\\<^sub>2 \\<noteq> s r\\<^sub>2\""], ["proof (state)\nthis:\n  s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or> s' r\\<^sub>2 \\<noteq> s r\\<^sub>2\n\ngoal (1 subgoal):\n 1. s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or>\n    s' r\\<^sub>2 \\<noteq> s r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (use step in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case app"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_other app(1) r\\<^sub>1_or_r\\<^sub>2_updated)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_eq_r: \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using app"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using app r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>1_eq_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domI fun_upd_other app r\\<^sub>1_eq_r s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "using app"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>2_eq_r: \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using app"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using app(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_eq_r r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s domIff fun_upd_other app option.discI r\\<^sub>2_eq_r s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (simp add: app)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case ifTrue"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_other ifTrue(1) r\\<^sub>1_or_r\\<^sub>2_updated)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_eq_r: \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using ifTrue"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using ifTrue r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>1_eq_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domI fun_upd_other ifTrue r\\<^sub>1_eq_r s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "using ifTrue"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>2_eq_r: \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using ifTrue"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using ifTrue(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_eq_r r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s domIff fun_upd_other ifTrue option.discI r\\<^sub>2_eq_r s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (simp add: ifTrue)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case ifFalse"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_other ifFalse(1) r\\<^sub>1_or_r\\<^sub>2_updated)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_eq_r: \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using ifFalse"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using ifFalse r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>1_eq_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domI fun_upd_other ifFalse r\\<^sub>1_eq_r s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "using ifFalse"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>2_eq_r: \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using ifFalse"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using ifFalse(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_eq_r r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s domIff fun_upd_other ifFalse option.discI r\\<^sub>2_eq_r s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (simp add: ifFalse)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case new"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (Loc l_)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l_ \\<notin> LID\\<^sub>G s\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_other new(1) r\\<^sub>1_or_r\\<^sub>2_updated)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_eq_r: \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using new"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (Loc l_)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l_ \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using new r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>1_eq_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (Loc l_)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l_ \\<notin> LID\\<^sub>G s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domI fun_upd_other new(1-2) r\\<^sub>1_eq_r s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "using new"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (Loc l_)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l_ \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>2_eq_r: \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using new"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (Loc l_)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l_ \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using new(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_eq_r r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (Loc l_)]))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s domIff fun_upd_other new(1-2) option.discI r\\<^sub>2_eq_r s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (auto simp add: new)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case get"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_other get(1) r\\<^sub>1_or_r\\<^sub>2_updated)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_eq_r: \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using get"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using get r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>1_eq_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [VE y]));\n        s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))]);\n        r\\<^sub>1 = r;\n        (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_) = Some y;\n        r\\<^sub>2 \\<notin> RID\\<^sub>S \\<sigma>_;\n        r\\<^sub>2 \\<notin> RID\\<^sub>C \\<E>_;\n        r\\<^sub>2 \\<in> RID\\<^sub>V y\\<rbrakk>\n       \\<Longrightarrow> r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>_", "by (meson RID\\<^sub>SI)"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "(* by (auto 1 3) *)"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domI fun_upd_other get(1-2) r\\<^sub>1_eq_r s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "using get"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>2_eq_r: \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using get"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using get(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_eq_r r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s domIff fun_upd_other get(1-2) option.discI r\\<^sub>2_eq_r s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (simp add: get)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case set"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_other set(1) r\\<^sub>1_or_r\\<^sub>2_updated)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>1_eq_r: \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using set"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using set r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>1_eq_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s domI fun_upd_other set(1-2) r\\<^sub>1_eq_r s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "using set"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume r\\<^sub>2_eq_r: \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using set"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using set(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_eq_r r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s domIff fun_upd_other set(1-2) option.discI r\\<^sub>2_eq_r s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (auto simp add: set)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case (fork \\<sigma> \\<tau> \\<E> e r')"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have s'_r: \"s' r = Some (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' r = Some (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')])", "using fork"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. s' r = Some (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')])", "by auto"], ["proof (state)\nthis:\n  s' r = Some (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')])\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have s'_r': \"s' r' = Some (\\<sigma>;;\\<tau>, \\<epsilon>, e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' r' = Some (\\<sigma>;;\\<tau>, \\<epsilon>, e)", "by (simp add: local.fork(1))"], ["proof (state)\nthis:\n  s' r' = Some (\\<sigma>;;\\<tau>, \\<epsilon>, e)\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have case1: \"r\\<^sub>1 = r \\<Longrightarrow> r\\<^sub>2 \\<noteq> r \\<Longrightarrow> r\\<^sub>2 \\<noteq> r' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r;\n     r\\<^sub>2 \\<noteq> r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume \"r\\<^sub>1 = r\" \"r\\<^sub>2 \\<noteq> r\" \"r\\<^sub>2 \\<noteq> r'\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n  r\\<^sub>2 \\<noteq> r\n  r\\<^sub>2 \\<noteq> r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using fork(1-2)"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by (simp add: \\<open>r\\<^sub>2 \\<noteq> r'\\<close>)"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using fork \\<open>r\\<^sub>1 = r\\<close> \\<open>r\\<^sub>2 \\<noteq> r'\\<close> r\\<^sub>2_in_s'_r\\<^sub>1 s'_r"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\n  r\\<^sub>1 = r\n  r\\<^sub>2 \\<noteq> r'\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  s' r = Some (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')])\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s \\<open>r\\<^sub>1 = r\\<close> \\<open>r\\<^sub>2 \\<noteq> r'\\<close> domIff fun_upd_other fork(1-2) option.discI s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (simp add: \\<open>r\\<^sub>1 = r\\<close> fork(2) s'_r)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r;\n   r\\<^sub>2 \\<noteq> r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have case2: \"r\\<^sub>1 \\<noteq> r \\<Longrightarrow> r\\<^sub>1 \\<noteq> r' \\<Longrightarrow> r\\<^sub>2 = r \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n     r\\<^sub>2 = r\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume \"r\\<^sub>1 \\<noteq> r\" \"r\\<^sub>1 \\<noteq> r'\" \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 \\<noteq> r\n  r\\<^sub>1 \\<noteq> r'\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>S ((the (s r\\<^sub>2))\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "using \\<open>r\\<^sub>1 \\<noteq> r'\\<close> \\<open>r\\<^sub>1 \\<noteq> r\\<close> fork r\\<^sub>2_in_s'_r\\<^sub>1 s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  r\\<^sub>1 \\<noteq> r'\n  r\\<^sub>1 \\<noteq> r\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  s' r\\<^sub>1 = Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "using \\<open>r\\<^sub>1 \\<noteq> r'\\<close> \\<open>r\\<^sub>1 \\<noteq> r\\<close> fork(1) r\\<^sub>2_in_s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  r\\<^sub>1 \\<noteq> r'\n  r\\<^sub>1 \\<noteq> r\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s \\<open>r\\<^sub>1 \\<noteq> r'\\<close> \\<open>r\\<^sub>2 = r\\<close> domIff fun_upd_other fork(1-2) option.discI s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (simp add: \\<open>r\\<^sub>1 \\<noteq> r'\\<close> \\<open>r\\<^sub>1 \\<noteq> r\\<close> fork(1))"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n   r\\<^sub>2 = r\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have case3: \"r\\<^sub>1 = r' \\<Longrightarrow> r\\<^sub>2 \\<noteq> r \\<Longrightarrow> r\\<^sub>2 \\<noteq> r' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r;\n     r\\<^sub>2 \\<noteq> r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "fix l"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume \"r\\<^sub>1 = r'\" \"r\\<^sub>2 \\<noteq> r\" \"r\\<^sub>2 \\<noteq> r'\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r'\n  r\\<^sub>2 \\<noteq> r\n  r\\<^sub>2 \\<noteq> r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "hence \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\""], ["proof (prove)\nusing this:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "using RID\\<^sub>LI(3) \\<open>r\\<^sub>1 = r'\\<close> fork(2) s'_r'"], ["proof (prove)\nusing this:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  \\<lbrakk>?s = (?\\<sigma>, ?\\<tau>, ?e); ?r \\<in> RID\\<^sub>E ?e\\<rbrakk>\n  \\<Longrightarrow> ?r \\<in> RID\\<^sub>L ?s\n  r\\<^sub>1 = r'\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  s' r' = Some (\\<sigma>;;\\<tau>, \\<epsilon>, e)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"s r\\<^sub>2 = s' r\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s r\\<^sub>2 = s' r\\<^sub>2", "by (simp add: \\<open>r\\<^sub>2 \\<noteq> r'\\<close> \\<open>r\\<^sub>2 \\<noteq> r\\<close> fork(1))"], ["proof (state)\nthis:\n  s r\\<^sub>2 = s' r\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "hence \"\\<A> r r\\<^sub>2 s\""], ["proof (prove)\nusing this:\n  s r\\<^sub>2 = s' r\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<A> r r\\<^sub>2 s", "using \\<A>\\<^sub>G_s fork(2) s'_r\\<^sub>2 subsumes_accessible_globally_def"], ["proof (prove)\nusing this:\n  s r\\<^sub>2 = s' r\\<^sub>2\n  \\<A>\\<^sub>G s\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  s' r\\<^sub>2 = Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\n  \\<A>\\<^sub>G ?s =\n  (\\<forall>r\\<^sub>1 r\\<^sub>2.\n      r\\<^sub>1 \\<in> dom ?s \\<longrightarrow>\n      r\\<^sub>2 \\<in> dom ?s \\<longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 ?s)\n\ngoal (1 subgoal):\n 1. \\<A> r r\\<^sub>2 s", "by auto"], ["proof (state)\nthis:\n  \\<A> r r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "hence \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s r))\""], ["proof (prove)\nusing this:\n  \\<A> r r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r))", "by (simp add: \\<open>r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\\<close> \\<open>s r\\<^sub>2 = s' r\\<^sub>2\\<close> subsumes_accessible_def)"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom \\<sigma> \\<union> dom \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r)) = dom \\<sigma> \\<union> dom \\<tau>", "by (simp add: fork(2))"], ["proof (state)\nthis:\n  doms (the (s r)) = dom \\<sigma> \\<union> dom \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  doms (the (s r)) = dom \\<sigma> \\<union> dom \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom (\\<sigma>;;\\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom \\<tau> = dom (\\<sigma>;;\\<tau>)", "by (simp add: dom_combination_dom_union)"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau> = dom (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau> = dom (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = doms (the (s' r'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom (\\<sigma>;;\\<tau>) = doms (the (s' r'))", "by (simp add: s'_r')"], ["proof (state)\nthis:\n  dom (\\<sigma>;;\\<tau>) = doms (the (s' r'))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r; r\\<^sub>2 \\<noteq> r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r'))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r'))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "using \\<open>r\\<^sub>1 = r'\\<close>"], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r'))\n  r\\<^sub>1 = r'\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r;\n   r\\<^sub>2 \\<noteq> r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have case4: \"r\\<^sub>1 \\<noteq> r \\<Longrightarrow> r\\<^sub>1 \\<noteq> r' \\<Longrightarrow> r\\<^sub>2 = r' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n     r\\<^sub>2 = r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n     r\\<^sub>2 = r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume \"r\\<^sub>1 \\<noteq> r\" \"r\\<^sub>1 \\<noteq> r'\" \"r\\<^sub>2 = r'\""], ["proof (state)\nthis:\n  r\\<^sub>1 \\<noteq> r\n  r\\<^sub>1 \\<noteq> r'\n  r\\<^sub>2 = r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n     r\\<^sub>2 = r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s r\\<^sub>1))", "using \\<open>r\\<^sub>1 \\<noteq> r'\\<close> \\<open>r\\<^sub>1 \\<noteq> r\\<close> \\<open>r\\<^sub>2 = r'\\<close> fork(1,3) s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  r\\<^sub>1 \\<noteq> r'\n  r\\<^sub>1 \\<noteq> r\n  r\\<^sub>2 = r'\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  r' \\<notin> RID\\<^sub>G s\n  s' r\\<^sub>1 = Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n     r\\<^sub>2 = r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "hence \"r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s' r\\<^sub>1))", "by (simp add: \\<open>r\\<^sub>1 \\<noteq> r'\\<close> \\<open>r\\<^sub>1 \\<noteq> r\\<close> fork(1))"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n     r\\<^sub>2 = r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "thus ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>2 \\<notin> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "by blast"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n   r\\<^sub>2 = r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have case5: \"r\\<^sub>1 = r \\<Longrightarrow> r\\<^sub>2 = r' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r'\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume \"r\\<^sub>1 = r\" \"r\\<^sub>2 = r'\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n  r\\<^sub>2 = r'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S ((the (s' r\\<^sub>2))\\<^sub>\\<sigma>) = LID\\<^sub>S (\\<sigma>;;\\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (\\<sigma>;;\\<tau>)", "by (simp add: \\<open>r\\<^sub>2 = r'\\<close> s'_r')"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (\\<sigma>;;\\<tau>)\n    \\<subseteq> LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (\\<sigma>;;\\<tau>)\n  \\<subseteq> LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (\\<sigma>;;\\<tau>)\n  \\<subseteq> LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>\n    \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>1))", "by (simp add: \\<open>r\\<^sub>1 = r\\<close> s'_r)"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>\n  \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma> \\<union> LID\\<^sub>S \\<tau>\n  \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (metis \\<open>\\<S>\\<^sub>G s'\\<close> \\<open>r\\<^sub>1 = r\\<close> domains_subsume_def domains_subsume_globally_def option.sel s'_r)"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r';\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have case6: \"r\\<^sub>1 = r' \\<Longrightarrow> r\\<^sub>2 = r \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r\\<rbrakk>\n    \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "assume \"r\\<^sub>1 = r'\" \"r\\<^sub>2 = r\" \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r'\n  r\\<^sub>2 = r\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>2))", "by (simp add: s'_r\\<^sub>2 subsetI)"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> LID\\<^sub>L (the (s' r\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>2))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r\\<^sub>2)) \\<subseteq> doms (the (s' r\\<^sub>2))", "using \\<open>\\<S>\\<^sub>G s'\\<close> domains_subsume_def domains_subsume_globally_def s'_r\\<^sub>2"], ["proof (prove)\nusing this:\n  \\<S>\\<^sub>G s'\n  \\<S> ?ls = (LID\\<^sub>L ?ls \\<subseteq> doms ?ls)\n  \\<S>\\<^sub>G ?s =\n  (\\<forall>r ls. ?s r = Some ls \\<longrightarrow> \\<S> ls)\n  s' r\\<^sub>2 = Some (\\<sigma>\\<^sub>2, \\<tau>\\<^sub>2, e\\<^sub>2)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>L (the (s' r\\<^sub>2)) \\<subseteq> doms (the (s' r\\<^sub>2))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r\\<^sub>2)) \\<subseteq> doms (the (s' r\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>L (the (s' r\\<^sub>2)) \\<subseteq> doms (the (s' r\\<^sub>2))\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom \\<sigma> \\<union> dom \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s' r\\<^sub>2)) = dom \\<sigma> \\<union> dom \\<tau>", "by (simp add: \\<open>r\\<^sub>2 = r\\<close> s'_r)"], ["proof (state)\nthis:\n  doms (the (s' r\\<^sub>2)) = dom \\<sigma> \\<union> dom \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  doms (the (s' r\\<^sub>2)) = dom \\<sigma> \\<union> dom \\<tau>\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom (\\<sigma>;;\\<tau>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom \\<tau> = dom (\\<sigma>;;\\<tau>)", "by (simp add: dom_combination_dom_union)"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau> = dom (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r;\n     r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\\<rbrakk>\n    \\<Longrightarrow> LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n                      \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> dom (\\<sigma>;;\\<tau>)", "show \" LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> dom (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "using \\<open>r\\<^sub>1 = r'\\<close> s'_r'"], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> dom (\\<sigma>;;\\<tau>)\n  r\\<^sub>1 = r'\n  s' r' = Some (\\<sigma>;;\\<tau>, \\<epsilon>, e)\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "using case1 case2 case3 case4 case5 case6 fork(1) r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>1_nor_r\\<^sub>2_updated_implies_thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 \\<noteq> r;\n   r\\<^sub>2 \\<noteq> r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n   r\\<^sub>2 = r\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 \\<noteq> r;\n   r\\<^sub>2 \\<noteq> r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  \\<lbrakk>r\\<^sub>1 \\<noteq> r; r\\<^sub>1 \\<noteq> r';\n   r\\<^sub>2 = r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  \\<lbrakk>r\\<^sub>1 = r; r\\<^sub>2 = r'\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  \\<lbrakk>r\\<^sub>1 = r'; r\\<^sub>2 = r\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  r\\<^sub>1 \\<noteq> r\\<^sub>2\n  \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "by fastforce"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case (join \\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v)"], ["proof (state)\nthis:\n  s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>', \\<tau>', VE v)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "have \"r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "by (metis fun_upd_def join(1) option.simps(3) r\\<^sub>1_or_r\\<^sub>2_updated s'_r\\<^sub>1 s'_r\\<^sub>2)"], ["proof (state)\nthis:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "then"], ["proof (chain)\npicking this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r", "show ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>1 = r \\<or> r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume \"r\\<^sub>1 = r\""], ["proof (state)\nthis:\n  r\\<^sub>1 = r\n\ngoal (2 subgoals):\n 1. r\\<^sub>1 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n 2. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "proof (cases \"r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "case r\\<^sub>2_in_\\<tau>': True"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by (metis \\<open>r\\<^sub>1 = r\\<close> fun_upd_def join(1) option.distinct(1) r\\<^sub>1_neq_r\\<^sub>2 s'_r\\<^sub>2)"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r'))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r'))", "have r\\<^sub>2_in_s_r': \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r'))", "by (simp add: join(3) r\\<^sub>2_in_\\<tau>')"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r'))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r'))", "have \"\\<A> r' r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r' r\\<^sub>2 s", "by (metis \\<A>\\<^sub>G_s \\<open>r\\<^sub>1 = r\\<close> domI fun_upd_def join(1) join(3) r\\<^sub>1_neq_r\\<^sub>2 s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r' r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r'))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r'))", "using \\<open>\\<A> r' r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r' subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r' r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r'))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r'))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r'))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r'))\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r'))\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom \\<sigma>' \\<union> dom \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r')) = dom \\<sigma>' \\<union> dom \\<tau>'", "by (simp add: join(3))"], ["proof (state)\nthis:\n  doms (the (s r')) = dom \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  doms (the (s r')) = dom \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'", "by auto"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>'\n  \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  dom \\<sigma>' \\<union> dom \\<tau>'\n  \\<subseteq> LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'", "have \"r' \\<in> RID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<in> RID\\<^sub>L (the (s r))", "by (simp add: join(2))"], ["proof (state)\nthis:\n  r' \\<in> RID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'", "have \"\\<A> r r' s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r r' s", "using \\<A>\\<^sub>G_s join(2-3) subsumes_accessible_globally_def"], ["proof (prove)\nusing this:\n  \\<A>\\<^sub>G s\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>', \\<tau>', VE v)\n  \\<A>\\<^sub>G ?s =\n  (\\<forall>r\\<^sub>1 r\\<^sub>2.\n      r\\<^sub>1 \\<in> dom ?s \\<longrightarrow>\n      r\\<^sub>2 \\<in> dom ?s \\<longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 ?s)\n\ngoal (1 subgoal):\n 1. \\<A> r r' s", "by auto"], ["proof (state)\nthis:\n  \\<A> r r' s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'", "using \\<open>\\<A> r r' s\\<close> join(2-3) subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r r' s\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>', \\<tau>', VE v)\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n    \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'", "by auto"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n  \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n  \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S \\<sigma>' \\<union> dom \\<tau>'\n  \\<subseteq> dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>'\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>' =\n    dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')", "by (auto simp add: dom_combination_dom_union)"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>' =\n  dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau> \\<union> dom \\<tau>' =\n  dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>') = doms (the (s' r\\<^sub>1))", "using join"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>', \\<tau>', VE v)\n\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>') = doms (the (s' r\\<^sub>1))", "by (auto simp add: \\<open>r\\<^sub>1 = r\\<close>)"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>') = doms (the (s' r\\<^sub>1))\n\ngoal (2 subgoals):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))\n 2. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "case r\\<^sub>2_nin_\\<tau>': False"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by (metis \\<open>r\\<^sub>1 = r\\<close> fun_upd_def join(1) option.distinct(1) r\\<^sub>1_neq_r\\<^sub>2 s'_r\\<^sub>2)"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "have \"RID\\<^sub>L (the (s' r\\<^sub>1)) = RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S (\\<tau>;;\\<tau>') \\<union> RID\\<^sub>C \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RID\\<^sub>L (the (s' r\\<^sub>1)) =\n    RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S (\\<tau>;;\\<tau>') \\<union>\n    RID\\<^sub>C \\<E>", "by (metis (no_types, lifting) ID_distr_completion(1) ID_distr_local(2) \\<open>r\\<^sub>1 = r\\<close> expr.simps(153) fun_upd_apply local.join(1) option.discI option.sel s'_r\\<^sub>1 sup_bot.right_neutral val.simps(66))"], ["proof (state)\nthis:\n  RID\\<^sub>L (the (s' r\\<^sub>1)) =\n  RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S (\\<tau>;;\\<tau>') \\<union>\n  RID\\<^sub>C \\<E>\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "hence \"r\\<^sub>2 \\<in> RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S \\<tau> \\<union> RID\\<^sub>C \\<E>\""], ["proof (prove)\nusing this:\n  RID\\<^sub>L (the (s' r\\<^sub>1)) =\n  RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S (\\<tau>;;\\<tau>') \\<union>\n  RID\\<^sub>C \\<E>\n\ngoal (1 subgoal):\n 1. r\\<^sub>2\n    \\<in> RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S \\<tau> \\<union>\n          RID\\<^sub>C \\<E>", "using r\\<^sub>2_in_s'_r\\<^sub>1 r\\<^sub>2_nin_\\<tau>'"], ["proof (prove)\nusing this:\n  RID\\<^sub>L (the (s' r\\<^sub>1)) =\n  RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S (\\<tau>;;\\<tau>') \\<union>\n  RID\\<^sub>C \\<E>\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n  r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2\n    \\<in> RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S \\<tau> \\<union>\n          RID\\<^sub>C \\<E>", "by auto"], ["proof (state)\nthis:\n  r\\<^sub>2\n  \\<in> RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S \\<tau> \\<union>\n        RID\\<^sub>C \\<E>\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "thus ?thesis"], ["proof (prove)\nusing this:\n  r\\<^sub>2\n  \\<in> RID\\<^sub>S \\<sigma> \\<union> RID\\<^sub>S \\<tau> \\<union>\n        RID\\<^sub>C \\<E>\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))", "by (simp add: join(2))"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s \\<open>r\\<^sub>1 = r\\<close> join(1-2) domIff fun_upd_def option.discI s'_r\\<^sub>2 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def \\<open>r\\<^sub>1 = r\\<close>"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = dom \\<sigma> \\<union> dom \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) = dom \\<sigma> \\<union> dom \\<tau>", "by (simp add: \\<open>r\\<^sub>1 = r\\<close> join(2))"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) = dom \\<sigma> \\<union> dom \\<tau>\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) = dom \\<sigma> \\<union> dom \\<tau>\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom \\<tau>\n    \\<subseteq> dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')", "by (auto simp add: dom_combination_dom_union)"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau>\n  \\<subseteq> dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom \\<tau>\n  \\<subseteq> dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>')\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... = doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>') = doms (the (s' r\\<^sub>1))", "using join \\<open>r\\<^sub>1 = r\\<close>"], ["proof (prove)\nusing this:\n  s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r' := None)\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\n  s r' = Some (\\<sigma>', \\<tau>', VE v)\n  r\\<^sub>1 = r\n\ngoal (1 subgoal):\n 1. dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>') = doms (the (s' r\\<^sub>1))", "by auto"], ["proof (state)\nthis:\n  dom \\<sigma> \\<union> dom (\\<tau>;;\\<tau>') = doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<notin> RID\\<^sub>S \\<tau>' \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show ?thesis"], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "assume \"r\\<^sub>2 = r\""], ["proof (state)\nthis:\n  r\\<^sub>2 = r\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 = r \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "proof (rule subsumes_accessibleI)"], ["proof (state)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "assume r\\<^sub>2_in_s'_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\""], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) = LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n    LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)", "by (metis (no_types, lifting) LID_snapshot.simps fun_upd_apply join(1-2) option.discI option.sel s'_r\\<^sub>2)"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) =\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have r\\<^sub>2_in_s_r\\<^sub>1: \"r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))", "by (metis \\<open>r\\<^sub>2 = r\\<close> fun_upd_apply local.join(1) option.discI r\\<^sub>1_neq_r\\<^sub>2 r\\<^sub>2_in_s'_r\\<^sub>1 s'_r\\<^sub>1)"], ["proof (state)\nthis:\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "have \"\\<A> r\\<^sub>1 r\\<^sub>2 s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s", "by (metis (no_types, lifting) \\<A>\\<^sub>G_s \\<open>r\\<^sub>2 = r\\<close> domIff fun_upd_apply join(1-2) option.discI s'_r\\<^sub>1 subsumes_accessible_globally_def)"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "using \\<open>\\<A> r\\<^sub>1 r\\<^sub>2 s\\<close> r\\<^sub>2_in_s_r\\<^sub>1 subsumes_accessible_def"], ["proof (prove)\nusing this:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s\n  r\\<^sub>2 \\<in> RID\\<^sub>L (the (s r\\<^sub>1))\n  \\<A> ?r\\<^sub>1 ?r\\<^sub>2 ?s =\n  (?r\\<^sub>2 \\<in> RID\\<^sub>L (the (?s ?r\\<^sub>1)) \\<longrightarrow>\n   LID\\<^sub>S (the (?s ?r\\<^sub>2)\\<^sub>\\<sigma>)\n   \\<subseteq> doms (the (?s ?r\\<^sub>1)))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s r\\<^sub>1))", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "also"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "have \"... \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))", "by (metis \\<open>r\\<^sub>2 = r\\<close> eq_refl fun_upd_def local.join(1) option.distinct(1) r\\<^sub>1_neq_r\\<^sub>2 s'_r\\<^sub>1)"], ["proof (state)\nthis:\n  doms (the (s r\\<^sub>1)) \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. r\\<^sub>2 \\<in> RID\\<^sub>L (the (s' r\\<^sub>1)) \\<Longrightarrow>\n    LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "finally"], ["proof (chain)\npicking this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))", "show \"LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>) \\<subseteq> doms (the (s' r\\<^sub>1))\""], ["proof (prove)\nusing this:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n    \\<subseteq> doms (the (s' r\\<^sub>1))", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>S (the (s' r\\<^sub>2)\\<^sub>\\<sigma>)\n  \\<subseteq> doms (the (s' r\\<^sub>1))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'", "thus ?thesis"], ["proof (prove)\nusing this:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "using s'_r\\<^sub>1"], ["proof (prove)\nusing this:\n  s' = \\<epsilon>\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s r'_ = None\n  s' r\\<^sub>1 = Some (\\<sigma>\\<^sub>1, \\<tau>\\<^sub>1, e\\<^sub>1)\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "by blast"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or>\n  s' r\\<^sub>2 \\<noteq> s r\\<^sub>2 \\<Longrightarrow>\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. r\\<^sub>1 \\<noteq> r\\<^sub>2 \\<Longrightarrow>\n    \\<A> r\\<^sub>1 r\\<^sub>2 s'", "show \"\\<A> r\\<^sub>1 r\\<^sub>2 s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "using r\\<^sub>1_nor_r\\<^sub>2_updated_implies_thesis r\\<^sub>1_or_r\\<^sub>2_updated_implies_thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>s' r\\<^sub>1 = s r\\<^sub>1; s' r\\<^sub>2 = s r\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> \\<A> r\\<^sub>1 r\\<^sub>2 s'\n  s' r\\<^sub>1 \\<noteq> s r\\<^sub>1 \\<or>\n  s' r\\<^sub>2 \\<noteq> s r\\<^sub>2 \\<Longrightarrow>\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal (1 subgoal):\n 1. \\<A> r\\<^sub>1 r\\<^sub>2 s'", "by blast"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A> r\\<^sub>1 r\\<^sub>2 s'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<A>\\<^sub>G s'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Relaxed definition of the operational semantics\\<close>"], ["", "inductive revision_step_relaxed :: \"'r \\<Rightarrow> ('r,'l,'v) global_state \\<Rightarrow> ('r,'l,'v) global_state \\<Rightarrow> bool\" where\n  app: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Apply (VE (Lambda x e)) (VE v)]) \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[subst (VE v) x e])))\"\n| ifTrue: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Ite (VE (CV T)) e1 e2]) \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[e1])))\"\n| ifFalse: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Ite (VE (CV F)) e1 e2]) \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[e2])))\"\n(* store operations *)\n| new: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Ref (VE v)]) \\<Longrightarrow> l \\<notin> \\<Union> { doms ls | ls. ls \\<in> ran s } \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E>[VE (Loc l)])))\"\n| get: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Read (VE (Loc l))]) \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (the ((\\<sigma>;;\\<tau>) l))])))\"\n| set: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Assign (VE (Loc l)) (VE v)]) \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E>[VE (CV Unit)])))\"\n(* synchronization operations *)\n| fork: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Rfork e]) \\<Longrightarrow> r' \\<notin> RID\\<^sub>G s \\<Longrightarrow> revision_step_relaxed r s (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (Rid r')]), r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\"\n| join: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Rjoin (VE (Rid r'))]) \\<Longrightarrow> s r' = Some (\\<sigma>', \\<tau>', VE v) \\<Longrightarrow> revision_step_relaxed r s (s(r := Some (\\<sigma>, (\\<tau>;;\\<tau>'), \\<E>[VE (CV Unit)]), r' := None))\"\n| join\\<^sub>\\<epsilon>: \"s r = Some (\\<sigma>, \\<tau>, \\<E>[Rjoin (VE (Rid r'))]) \\<Longrightarrow> s r' = None \\<Longrightarrow> revision_step_relaxed r s \\<epsilon>\""], ["", "inductive_cases revision_step_relaxedE [elim, consumes 1, case_names app ifTrue ifFalse new get set fork join join\\<^sub>\\<epsilon>]: \n  \"revision_step_relaxed r s s'\""], ["", "end"], ["", "(* substitution locale *)"], ["", "end"], ["", "(* theory *)"]]}