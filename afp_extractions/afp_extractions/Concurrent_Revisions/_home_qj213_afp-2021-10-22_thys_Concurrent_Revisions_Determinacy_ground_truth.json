{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Revisions/Determinacy.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Revisions", "problem_names": ["lemma app_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\"\n  shows \"(revision_step r s s') = (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))))\" (is \"?l = ?r\")", "lemma ifTrue_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\"\n  shows \"(revision_step r s s') = (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))))\" (is \"?l = ?r\")", "lemma ifFalse_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\"\n  shows \"(revision_step r s s') = (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))))\" (is \"?l = ?r\")", "lemma new_pseudodeterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\"\n  shows \"(revision_step r s s') = (\\<exists>l. l \\<notin> LID\\<^sub>G s \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))))\" (is \"?l = ?r\")", "lemma get_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))])\"\n  shows \"(revision_step r s s') = (l \\<in> dom (\\<sigma>;;\\<tau>) \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))))\" (is \"?l = ?r\")", "lemma set_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)])\"\n  shows \"(revision_step r s s') = (l \\<in> dom (\\<sigma>;;\\<tau>) \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))))\" (is \"?l = ?r\")", "lemma fork_pseudodeterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\"\n  shows \"(revision_step r s s') = (\\<exists>r'. r' \\<notin> RID\\<^sub>G (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))))\" (is \"?l = ?r\")", "lemma rjoin_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\" and\n    s_r': \"s r' = Some (\\<sigma>', \\<tau>', VE v)\"\n  shows \"(revision_step r s s') = (s' = (s(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)]), r' := None)))\" (is \"?l = ?r\")", "lemma rjoin\\<^sub>\\<epsilon>_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\" and\n    s_r': \"s r' = None\"\n  shows \"(revision_step r s s') = (s' = \\<epsilon>)\" (is \"?l = ?r\")", "lemma local_determinism:\n  assumes\n    left: \"revision_step r s\\<^sub>1 s\\<^sub>2\" and\n    right: \"revision_step r s\\<^sub>1 s\\<^sub>2'\"\n  shows \"s\\<^sub>2 \\<approx> s\\<^sub>2'\"", "lemma SLC_sym:\n  \"\\<exists>s\\<^sub>3' s\\<^sub>3. s\\<^sub>3' \\<approx> s\\<^sub>3 \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3' \\<or> s\\<^sub>2 = s\\<^sub>3') \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3 \\<or> s\\<^sub>2' = s\\<^sub>3) \\<Longrightarrow>\n   \\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3 \\<or> s\\<^sub>2' = s\\<^sub>3) \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3' \\<or> s\\<^sub>2 = s\\<^sub>3')\"", "lemma SLC_commute: \n  \"\\<lbrakk> s\\<^sub>3 = s\\<^sub>3'; revision_step r' s\\<^sub>2 s\\<^sub>3; revision_step r s\\<^sub>2' s\\<^sub>3' \\<rbrakk> \\<Longrightarrow> \n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_join\\<^sub>\\<epsilon>:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Rjoin (VE (Rid r''))])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = \\<epsilon>\" and\n    side: \"s\\<^sub>1 r'' = None\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma join_and_local_commute:\n  assumes\n    \"s\\<^sub>2 = s\\<^sub>1(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E>[VE (CV Unit)]), r'' := None)\"\n    \"s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> ls)\"\n    \"r \\<noteq> r'\"\n    \"r' \\<noteq> r''\"\n    \"revision_step r' s\\<^sub>2 (s\\<^sub>1(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E>[VE (CV Unit)]), r'' := None, r' := Some ls))\"\n    \"s\\<^sub>2' r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\"\n    \"s\\<^sub>2' r'' = Some (\\<sigma>', \\<tau>', VE v)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_join:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Rjoin (VE (Rid r''))])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = (s\\<^sub>1(r := Some (\\<sigma>, (\\<tau>;;\\<tau>'), \\<E>[VE (CV Unit)]), r'' := None))\" and\n    side: \"s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\" and \n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma local_steps_commute:\n  assumes\n    \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> x)\"\n    \"s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> y)\"\n    \"revision_step r' (s\\<^sub>1(r \\<mapsto> x)) (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto> y))\"\n    \"revision_step r (s\\<^sub>1(r' \\<mapsto> y)) (s\\<^sub>1(r' \\<mapsto> y, r \\<mapsto> x))\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma local_and_fork_commute:\n  assumes\n    \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> x)\"\n    \"s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\"\n    \"s\\<^sub>2 r' = Some (\\<sigma>, \\<tau>, \\<E>[Rfork e])\"\n    \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\"\n    \"revision_step r s\\<^sub>2' (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))\"\n    \"r \\<noteq> r'\"\n    \"r \\<noteq> r''\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. (s\\<^sub>3 \\<approx> s\\<^sub>3') \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_app:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Apply (VE (Lambda x e)) (VE v)])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[subst (VE v) x e]))\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_ifTrue:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Ite (VE (CV T)) e1 e2])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[e1]))\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_ifFalse:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Ite (VE (CV F)) e1 e2])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[e2]))\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_set:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Assign (VE (Loc l)) (VE v)])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E>[VE (CV Unit)]))\" and\n    side: \"l \\<in> dom (\\<sigma>;;\\<tau>)\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_get:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (the ((\\<sigma>;;\\<tau>) l))]))\" and\n    side: \"l \\<in> dom (\\<sigma>;;\\<tau>)\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_new:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Ref (VE v)])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\" and\n    side: \"l \\<notin> LID\\<^sub>G s\\<^sub>1\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC_fork:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (Rid left_forkee)]), left_forkee \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\" and\n    side: \"left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "theorem strong_local_confluence:\n  assumes \n    l: \"revision_step r s\\<^sub>1 s\\<^sub>2\" and\n    r: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\"", "lemma SLC:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto> s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1 \\<leadsto> s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>= s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>= s\\<^sub>3'\"", "lemma SLC_top_relaxed:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>= s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1 \\<leadsto> s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>= s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>= s\\<^sub>3'\"", "lemma in_renamed_in_unlabelled_val: \n  \"bij \\<alpha> \\<Longrightarrow> (\\<alpha> r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V \\<alpha> \\<beta> v)) = (r \\<in> RID\\<^sub>V v)\"\n  \"bij \\<beta> \\<Longrightarrow> (\\<beta> l \\<in> LID\\<^sub>V (\\<R>\\<^sub>V \\<alpha> \\<beta> v)) = (l \\<in> LID\\<^sub>V v)\"", "lemma in_renamed_in_unlabelled_expr:\n  \"bij \\<alpha> \\<Longrightarrow> (\\<alpha> r \\<in> RID\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> v)) = (r \\<in> RID\\<^sub>E v)\"\n  \"bij \\<beta> \\<Longrightarrow> (\\<beta> l \\<in> LID\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> v)) = (l \\<in> LID\\<^sub>E v)\"", "lemma in_renamed_in_unlabelled_store:\n  assumes \n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows\n    \"(\\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) = (r \\<in> RID\\<^sub>S \\<sigma>)\"\n    \"(\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) = (l \\<in> LID\\<^sub>S \\<sigma>)\"", "lemma in_renamed_in_unlabelled_local:\n  assumes\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows\n    \"(\\<alpha> r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L \\<alpha> \\<beta> ls)) = (r \\<in> RID\\<^sub>L ls)\"\n    \"(\\<beta> l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L \\<alpha> \\<beta> ls)) = (l \\<in> LID\\<^sub>L ls)\"", "lemma in_renamed_in_unlabelled_global:\n  assumes\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows\n    \"(\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) = (r \\<in> RID\\<^sub>G s)\"\n    \"(\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) = (l \\<in> LID\\<^sub>G s)\"", "lemma mimicking:\n  assumes\n    step: \"revision_step r s s'\" and\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows \"revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s) (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\"", "lemma mimic_single_step:\n  assumes\n    s\\<^sub>1s\\<^sub>1': \"s\\<^sub>1 \\<approx> s\\<^sub>1'\" and\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto> s\\<^sub>2\"\n  shows \"\\<exists>s\\<^sub>2'. (s\\<^sub>2 \\<approx> s\\<^sub>2') \\<and> s\\<^sub>1' \\<leadsto> s\\<^sub>2'\"", "lemma mimic_trans:\n  assumes\n    s\\<^sub>1_eq_s\\<^sub>1': \"s\\<^sub>1 \\<approx> s\\<^sub>1'\" and\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\"\n  shows \"\\<exists>s\\<^sub>2'. s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and> s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\"", "lemma strip_lemma:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1 \\<leadsto>\\<^sup>= s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\"", "lemma confluence_modulo_equivalence:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\" and\n    equiv: \"s\\<^sub>1 \\<approx> s\\<^sub>1'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\"", "theorem determinacy:\n  assumes \n    prog_expr: \"program_expr e\" and\n    e_terminates_in_s: \"e \\<down> s\" and\n    e_terminates_in_s': \"e \\<down> s'\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows \"s \\<approx> s'\""], "translations": [["", "lemma app_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\"\n  shows \"(revision_step r s s') = (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e])))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))\n 2. s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e])) \\<Longrightarrow>\n    revision_step r s s'", "assume ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))\n 2. s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e])) \\<Longrightarrow>\n    revision_step r s s'", "thus ?r"], ["proof (prove)\nusing this:\n  revision_step r s s'\n\ngoal (1 subgoal):\n 1. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))", "by (cases rule: revision_stepE) (use s_r in auto)"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))\n\ngoal (1 subgoal):\n 1. s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e])) \\<Longrightarrow>\n    revision_step r s s'", "qed (simp add: s_r revision_step.app)"], ["", "lemma ifTrue_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\"\n  shows \"(revision_step r s s') = (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1])))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))\n 2. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1])) \\<Longrightarrow>\n    revision_step r s s'", "assume ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))\n 2. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1])) \\<Longrightarrow>\n    revision_step r s s'", "thus ?r"], ["proof (prove)\nusing this:\n  revision_step r s s'\n\ngoal (1 subgoal):\n 1. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))", "by (cases rule: revision_stepE) (use s_r in auto)"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))\n\ngoal (1 subgoal):\n 1. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1])) \\<Longrightarrow>\n    revision_step r s s'", "qed (simp add: s_r revision_step.ifTrue)"], ["", "lemma ifFalse_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\"\n  shows \"(revision_step r s s') = (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2])))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))\n 2. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2])) \\<Longrightarrow>\n    revision_step r s s'", "assume ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))\n 2. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2])) \\<Longrightarrow>\n    revision_step r s s'", "thus ?r"], ["proof (prove)\nusing this:\n  revision_step r s s'\n\ngoal (1 subgoal):\n 1. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))", "by (cases rule: revision_stepE) (use s_r in auto)"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))\n\ngoal (1 subgoal):\n 1. s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2])) \\<Longrightarrow>\n    revision_step r s s'", "qed (simp add: s_r revision_step.ifFalse)"], ["", "lemma new_pseudodeterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\"\n  shows \"(revision_step r s s') = (\\<exists>l. l \\<notin> LID\\<^sub>G s \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (\\<exists>l.\n        l \\<notin> LID\\<^sub>G s \\<and>\n        s' = s(r \\<mapsto>\n        (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)])))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    \\<exists>l.\n       l \\<notin> LID\\<^sub>G s \\<and>\n       s' = s(r \\<mapsto>\n       (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n 2. \\<exists>l.\n       l \\<notin> LID\\<^sub>G s \\<and>\n       s' = s(r \\<mapsto>\n       (\\<sigma>, \\<tau>(l \\<mapsto> v),\n        \\<E> [VE (Loc l)])) \\<Longrightarrow>\n    revision_step r s s'", "assume ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    \\<exists>l.\n       l \\<notin> LID\\<^sub>G s \\<and>\n       s' = s(r \\<mapsto>\n       (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n 2. \\<exists>l.\n       l \\<notin> LID\\<^sub>G s \\<and>\n       s' = s(r \\<mapsto>\n       (\\<sigma>, \\<tau>(l \\<mapsto> v),\n        \\<E> [VE (Loc l)])) \\<Longrightarrow>\n    revision_step r s s'", "thus ?r"], ["proof (prove)\nusing this:\n  revision_step r s s'\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       l \\<notin> LID\\<^sub>G s \\<and>\n       s' = s(r \\<mapsto>\n       (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))", "by (cases rule: revision_stepE) (use s_r in auto)"], ["proof (state)\nthis:\n  \\<exists>l.\n     l \\<notin> LID\\<^sub>G s \\<and>\n     s' = s(r \\<mapsto>\n     (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n\ngoal (1 subgoal):\n 1. \\<exists>l.\n       l \\<notin> LID\\<^sub>G s \\<and>\n       s' = s(r \\<mapsto>\n       (\\<sigma>, \\<tau>(l \\<mapsto> v),\n        \\<E> [VE (Loc l)])) \\<Longrightarrow>\n    revision_step r s s'", "qed (auto simp add: s_r revision_step.new)"], ["", "lemma get_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))])\"\n  shows \"(revision_step r s s') = (l \\<in> dom (\\<sigma>;;\\<tau>) \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n     s' = s(r \\<mapsto>\n     (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))])))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))\n 2. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>,\n     \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))])) \\<Longrightarrow>\n    revision_step r s s'", "assume ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))\n 2. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>,\n     \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))])) \\<Longrightarrow>\n    revision_step r s s'", "thus ?r"], ["proof (prove)\nusing this:\n  revision_step r s s'\n\ngoal (1 subgoal):\n 1. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))", "by (cases rule: revision_stepE) (use s_r in auto)"], ["proof (state)\nthis:\n  l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n  s' = s(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))\n\ngoal (1 subgoal):\n 1. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>,\n     \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))])) \\<Longrightarrow>\n    revision_step r s s'", "qed (use revision_step.get in \\<open>auto simp add: s_r\\<close>)"], ["", "lemma set_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)])\"\n  shows \"(revision_step r s s') = (l \\<in> dom (\\<sigma>;;\\<tau>) \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n     s' = s(r \\<mapsto>\n     (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)])))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))\n 2. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l \\<mapsto> v),\n     \\<E> [VE (CV Unit)])) \\<Longrightarrow>\n    revision_step r s s'", "assume ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))\n 2. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l \\<mapsto> v),\n     \\<E> [VE (CV Unit)])) \\<Longrightarrow>\n    revision_step r s s'", "thus ?r"], ["proof (prove)\nusing this:\n  revision_step r s s'\n\ngoal (1 subgoal):\n 1. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))", "by (cases rule: revision_stepE) (use s_r in auto)"], ["proof (state)\nthis:\n  l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))\n\ngoal (1 subgoal):\n 1. l \\<in> dom (\\<sigma>;;\\<tau>) \\<and>\n    s' = s(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l \\<mapsto> v),\n     \\<E> [VE (CV Unit)])) \\<Longrightarrow>\n    revision_step r s s'", "qed (auto simp add: s_r revision_step.set)"], ["", "lemma fork_pseudodeterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\"\n  shows \"(revision_step r s s') = (\\<exists>r'. r' \\<notin> RID\\<^sub>G (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and> s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (\\<exists>r'.\n        r' \\<notin> RID\\<^sub>G\n                     (s(r \\<mapsto>\n                      (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n        s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n        \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 2. \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)) \\<Longrightarrow>\n    revision_step r s s'", "assume step: ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 2. \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)) \\<Longrightarrow>\n    revision_step r s s'", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "proof (use step in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E>' x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E>' [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E>' [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 2. \\<And>\\<sigma>' \\<tau>' \\<E>' e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E>' [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 3. \\<And>\\<sigma>' \\<tau>' \\<E>' e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E>' [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 4. \\<And>\\<sigma>' \\<tau>' \\<E>' v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E>' [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 5. \\<And>\\<sigma>' \\<tau>' \\<E>' l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>'\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 6. \\<And>\\<sigma>' \\<tau>' \\<E>' l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E>' [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 7. \\<And>\\<sigma>' \\<tau>' \\<E>' ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 8. \\<And>\\<sigma>' \\<tau>' \\<E>' r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>' [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 9. \\<And>\\<sigma>' \\<tau>' \\<E>' r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "case (fork \\<sigma> \\<tau> \\<E> e r')"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E>' x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E>' [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E>' [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 2. \\<And>\\<sigma>' \\<tau>' \\<E>' e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E>' [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 3. \\<And>\\<sigma>' \\<tau>' \\<E>' e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E>' [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 4. \\<And>\\<sigma>' \\<tau>' \\<E>' v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E>' [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 5. \\<And>\\<sigma>' \\<tau>' \\<E>' l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>'\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 6. \\<And>\\<sigma>' \\<tau>' \\<E>' l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E>' [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 7. \\<And>\\<sigma>' \\<tau>' \\<E>' ea r'.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>';;\\<tau>', \\<epsilon>, ea));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork ea]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 8. \\<And>\\<sigma>' \\<tau>' \\<E>' r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>' [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 9. \\<And>\\<sigma>' \\<tau>' \\<E>' r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "by (rule exI[where x=r']) (use fork s_r in auto)"], ["proof (state)\nthis:\n  \\<exists>r'.\n     r' \\<notin> RID\\<^sub>G\n                  (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n     s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n     (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma>' \\<tau>' \\<E>' x ea v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>', \\<E>' [subst (VE v) x ea]));\n        s r =\n        Some\n         (\\<sigma>', \\<tau>',\n          \\<E>' [Apply (VE (Lambda x ea)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 2. \\<And>\\<sigma>' \\<tau>' \\<E>' e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [e1]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E>' [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 3. \\<And>\\<sigma>' \\<tau>' \\<E>' e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [e2]));\n        s r =\n        Some (\\<sigma>', \\<tau>', \\<E>' [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 4. \\<And>\\<sigma>' \\<tau>' \\<E>' v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E>' [VE (Loc l)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 5. \\<And>\\<sigma>' \\<tau>' \\<E>' l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>',\n                 \\<E>'\n                  [VE (the (if \\<tau>' l = None then \\<sigma>' l\n                            else \\<tau>' l))]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 6. \\<And>\\<sigma>' \\<tau>' \\<E>' l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>', \\<tau>'(l \\<mapsto> v), \\<E>' [VE (CV Unit)]));\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>';;\\<tau>')\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 7. \\<And>\\<sigma>' \\<tau>' \\<E>' r' \\<sigma>'' \\<tau>'' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>', \\<tau>';;\\<tau>'', \\<E>' [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>'', \\<tau>'', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 8. \\<And>\\<sigma>' \\<tau>' \\<E>' r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>', \\<tau>', \\<E>' [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>r'.\n                            r' \\<notin> RID\\<^sub>G\n   (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n                            s' = s(r \\<mapsto>\n                            (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n                            \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "qed (auto simp add: s_r)"], ["proof (state)\nthis:\n  \\<exists>r'.\n     r' \\<notin> RID\\<^sub>G\n                  (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n     s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n     (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. \\<exists>r'.\n       r' \\<notin> RID\\<^sub>G\n                    (s(r \\<mapsto>\n                     (\\<sigma>, \\<tau>, \\<E> [Rfork e]))) \\<and>\n       s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \n       \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)) \\<Longrightarrow>\n    revision_step r s s'", "qed (auto simp add: s_r revision_step.fork map_upd_triv)"], ["", "lemma rjoin_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\" and\n    s_r': \"s r' = Some (\\<sigma>', \\<tau>', VE v)\"\n  shows \"(revision_step r s s') = (s' = (s(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)]), r' := None)))\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' =\n    (s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n     (r' := None))", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r' := None)\n 2. s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r' := None) \\<Longrightarrow>\n    revision_step r s s'", "assume step: ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow>\n    s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r' := None)\n 2. s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r' := None) \\<Longrightarrow>\n    revision_step r s s'", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r' := None)", "by (cases rule: revision_stepE[OF step]) (use s_r s_r' in auto)"], ["proof (state)\nthis:\n  s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r' := None)\n\ngoal (1 subgoal):\n 1. s' = (s(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r' := None) \\<Longrightarrow>\n    revision_step r s s'", "qed (meson s_r s_r' revision_step.join)"], ["", "lemma rjoin\\<^sub>\\<epsilon>_deterministic [simp]:\n  assumes\n    s_r: \"s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))])\" and\n    s_r': \"s r' = None\"\n  shows \"(revision_step r s s') = (s' = \\<epsilon>)\" (is \"?l = ?r\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s s' = (s' = \\<epsilon>)", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow> s' = \\<epsilon>\n 2. s' = \\<epsilon> \\<Longrightarrow> revision_step r s s'", "assume step: ?l"], ["proof (state)\nthis:\n  revision_step r s s'\n\ngoal (2 subgoals):\n 1. revision_step r s s' \\<Longrightarrow> s' = \\<epsilon>\n 2. s' = \\<epsilon> \\<Longrightarrow> revision_step r s s'", "show ?r"], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = \\<epsilon>", "by (cases rule: revision_stepE[OF step]) (use s_r s_r' in auto)"], ["proof (state)\nthis:\n  s' = \\<epsilon>\n\ngoal (1 subgoal):\n 1. s' = \\<epsilon> \\<Longrightarrow> revision_step r s s'", "qed (simp add: revision_step.join\\<^sub>\\<epsilon> s_r s_r')"], ["", "subsection \\<open>Strong local confluence\\<close>"], ["", "subsubsection \\<open>Local determinism\\<close>"], ["", "lemma local_determinism:\n  assumes\n    left: \"revision_step r s\\<^sub>1 s\\<^sub>2\" and\n    right: \"revision_step r s\\<^sub>1 s\\<^sub>2'\"\n  shows \"s\\<^sub>2 \\<approx> s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<approx> s\\<^sub>2'", "proof (use left in \\<open>induct rule:revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "case (new \\<sigma> \\<tau> \\<E> v l)"], ["proof (state)\nthis:\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "from new(2) right"], ["proof (chain)\npicking this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  revision_step r s\\<^sub>1 s\\<^sub>2'", "obtain l' where \n    side: \"l' \\<notin> LID\\<^sub>G s\\<^sub>1\" and\n    s\\<^sub>2': \"s\\<^sub>2' = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>(l' \\<mapsto> v), \\<E>[VE (Loc l')]))\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  revision_step r s\\<^sub>1 s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>l'.\n        \\<lbrakk>l' \\<notin> LID\\<^sub>G s\\<^sub>1;\n         s\\<^sub>2' = s\\<^sub>1(r \\<mapsto>\n         (\\<sigma>, \\<tau>(l' \\<mapsto> v), \\<E> [VE (Loc l')]))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n  s\\<^sub>2' = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l' \\<mapsto> v), \\<E> [VE (Loc l')]))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "let \"?\\<beta>\" = \"id(l := l', l' := l)\""], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "have bij_\\<beta>: \"bij ?\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (id(l := l', l' := l))", "by (rule swap_bij)"], ["proof (state)\nthis:\n  bij (id(l := l', l' := l))\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "have renaming: \"\\<R>\\<^sub>G id ?\\<beta> s\\<^sub>2 = s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l', l' := l)) s\\<^sub>2 = s\\<^sub>2'", "by (use new side s\\<^sub>2' bij_\\<beta> in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G id (id(l := l', l' := l)) s\\<^sub>2 = s\\<^sub>2'\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<approx> s\\<^sub>2'", "by (rule eq_statesI[OF renaming bij_id bij_\\<beta>])"], ["proof (state)\nthis:\n  s\\<^sub>2 \\<approx> s\\<^sub>2'\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "case (fork \\<sigma> \\<tau> \\<E> e r')"], ["proof (state)\nthis:\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n  r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "from fork(2) right"], ["proof (chain)\npicking this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  revision_step r s\\<^sub>1 s\\<^sub>2'", "obtain r'' where \n    side: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>1\" and\n    s\\<^sub>2': \"s\\<^sub>2' = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  revision_step r s\\<^sub>1 s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>r''.\n        \\<lbrakk>r'' \\<notin> RID\\<^sub>G s\\<^sub>1;\n         s\\<^sub>2' = s\\<^sub>1(r \\<mapsto>\n         (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n         (\\<sigma>;;\\<tau>, \\<epsilon>, e))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>2' = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "let \"?\\<alpha>\" = \"id(r' := r'', r'' := r')\""], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "have bij_\\<alpha>: \"bij ?\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (id(r' := r'', r'' := r'))", "by (rule swap_bij)"], ["proof (state)\nthis:\n  bij (id(r' := r'', r'' := r'))\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "have renaming: \"\\<R>\\<^sub>G ?\\<alpha> id s\\<^sub>2 = s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(r' := r'', r'' := r')) id s\\<^sub>2 = s\\<^sub>2'", "by (use fork side s\\<^sub>2' bij_\\<alpha> in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G (id(r' := r'', r'' := r')) id s\\<^sub>2 = s\\<^sub>2'\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<approx> s\\<^sub>2'", "by (rule eq_statesI[OF renaming bij_\\<alpha> bij_id])"], ["proof (state)\nthis:\n  s\\<^sub>2 \\<approx> s\\<^sub>2'\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2 =\n                (s\\<^sub>1(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s\\<^sub>2 = \\<epsilon>;\n        s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s\\<^sub>1 r' = None\\<rbrakk>\n       \\<Longrightarrow> s\\<^sub>2 \\<approx> s\\<^sub>2'", "qed ((rule eq_statesI[of id id], use assms in auto)[1])+"], ["", "subsubsection \\<open>General principles\\<close>"], ["", "lemma SLC_sym:\n  \"\\<exists>s\\<^sub>3' s\\<^sub>3. s\\<^sub>3' \\<approx> s\\<^sub>3 \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3' \\<or> s\\<^sub>2 = s\\<^sub>3') \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3 \\<or> s\\<^sub>2' = s\\<^sub>3) \\<Longrightarrow>\n   \\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3 \\<or> s\\<^sub>2' = s\\<^sub>3) \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3' \\<or> s\\<^sub>2 = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3' s\\<^sub>3.\n       s\\<^sub>3' \\<approx> s\\<^sub>3 \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3' \\<or>\n        s\\<^sub>2 = s\\<^sub>3') \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3 \\<or>\n        s\\<^sub>2' = s\\<^sub>3) \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3 \\<or>\n        s\\<^sub>2' = s\\<^sub>3) \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3' \\<or> s\\<^sub>2 = s\\<^sub>3')", "by (metis \\<alpha>\\<beta>_sym)"], ["", "lemma SLC_commute: \n  \"\\<lbrakk> s\\<^sub>3 = s\\<^sub>3'; revision_step r' s\\<^sub>2 s\\<^sub>3; revision_step r s\\<^sub>2' s\\<^sub>3' \\<rbrakk> \\<Longrightarrow> \n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>3 = s\\<^sub>3'; revision_step r' s\\<^sub>2 s\\<^sub>3;\n     revision_step r s\\<^sub>2' s\\<^sub>3'\\<rbrakk>\n    \\<Longrightarrow> s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                      (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                       s\\<^sub>2 = s\\<^sub>3) \\<and>\n                      (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                       s\\<^sub>2' = s\\<^sub>3')", "using \\<alpha>\\<beta>_refl"], ["proof (prove)\nusing this:\n  ?s \\<approx> ?s\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>3 = s\\<^sub>3'; revision_step r' s\\<^sub>2 s\\<^sub>3;\n     revision_step r s\\<^sub>2' s\\<^sub>3'\\<rbrakk>\n    \\<Longrightarrow> s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                      (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                       s\\<^sub>2 = s\\<^sub>3) \\<and>\n                      (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                       s\\<^sub>2' = s\\<^sub>3')", "by auto"], ["", "subsubsection \\<open>Case join-epsilon\\<close>"], ["", "lemma SLC_join\\<^sub>\\<epsilon>:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Rjoin (VE (Rid r''))])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = \\<epsilon>\" and\n    side: \"s\\<^sub>1 r'' = None\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have right_collapsed_case: \"s\\<^sub>2' = \\<epsilon> \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' = \\<epsilon> \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule exI[where x=\\<epsilon>], rule exI[where x=\\<epsilon>], use s\\<^sub>2 in auto)"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon> \\<Longrightarrow>\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step_still_available_case: \"s\\<^sub>2' \\<noteq> \\<epsilon> \\<Longrightarrow> s\\<^sub>2' r = s\\<^sub>1 r \\<Longrightarrow> s\\<^sub>2' r'' = None \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>2' \\<noteq> \\<epsilon>; s\\<^sub>2' r = s\\<^sub>1 r;\n     s\\<^sub>2' r'' = None\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                         s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                         (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                          s\\<^sub>2 = s\\<^sub>3) \\<and>\n                         (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                          s\\<^sub>2' = s\\<^sub>3')", "by (rule exI[where x=\\<epsilon>], rule exI[where x=\\<epsilon>]) (use assms in auto)"], ["proof (state)\nthis:\n  \\<lbrakk>s\\<^sub>2' \\<noteq> \\<epsilon>; s\\<^sub>2' r = s\\<^sub>1 r;\n   s\\<^sub>2' r'' = None\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                        s\\<^sub>2 = s\\<^sub>3) \\<and>\n                       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                        s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (join _ _ _ right_joinee)"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (right_joinee := None)\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid right_joinee))])\n  s\\<^sub>1 right_joinee = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r_unchanged_left: \"s\\<^sub>2' r = s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "using join assms"], ["proof (prove)\nusing this:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (right_joinee := None)\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid right_joinee))])\n  s\\<^sub>1 right_joinee = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 = \\<epsilon>\n  s\\<^sub>1 r'' = None\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r = s\\<^sub>1 r\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r'_unchanged_right: \"s\\<^sub>2' r'' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = None", "using join assms"], ["proof (prove)\nusing this:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (right_joinee := None)\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid right_joinee))])\n  s\\<^sub>1 right_joinee = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 = \\<epsilon>\n  s\\<^sub>1 r'' = None\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = None", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r'' = None\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have \"right_joinee \\<noteq> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_joinee \\<noteq> r'", "using join(2-3)"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid right_joinee))])\n  s\\<^sub>1 right_joinee = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (1 subgoal):\n 1. right_joinee \\<noteq> r'", "by auto"], ["proof (state)\nthis:\n  right_joinee \\<noteq> r'\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "hence s\\<^sub>2'_nonempty: \"s\\<^sub>2' \\<noteq> \\<epsilon>\""], ["proof (prove)\nusing this:\n  right_joinee \\<noteq> r'\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' \\<noteq> \\<epsilon>", "using assms join"], ["proof (prove)\nusing this:\n  right_joinee \\<noteq> r'\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 = \\<epsilon>\n  s\\<^sub>1 r'' = None\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (right_joinee := None)\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid right_joinee))])\n  s\\<^sub>1 right_joinee = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' \\<noteq> \\<epsilon>", "by (auto simp add: fun_upd_twist)"], ["proof (state)\nthis:\n  s\\<^sub>2' \\<noteq> \\<epsilon>\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule left_step_still_available_case[OF s\\<^sub>2'_nonempty r_unchanged_left r'_unchanged_right])"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule right_collapsed_case, use join\\<^sub>\\<epsilon>(2-3) right in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule left_step_still_available_case, use side neq s\\<^sub>1_r right in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Case join\\<close>"], ["", "lemma join_and_local_commute:\n  assumes\n    \"s\\<^sub>2 = s\\<^sub>1(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E>[VE (CV Unit)]), r'' := None)\"\n    \"s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> ls)\"\n    \"r \\<noteq> r'\"\n    \"r' \\<noteq> r''\"\n    \"revision_step r' s\\<^sub>2 (s\\<^sub>1(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E>[VE (CV Unit)]), r'' := None, r' := Some ls))\"\n    \"s\\<^sub>2' r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\"\n    \"s\\<^sub>2' r'' = Some (\\<sigma>', \\<tau>', VE v)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "apply (rule exI[where x=\"s\\<^sub>1(r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E>[VE (CV Unit)]), r'' := None, r' := Some ls)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3'.\n       (s\\<^sub>1(r \\<mapsto>\n        (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n       (r'' := None)(r' \\<mapsto> ls) \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2\n         ((s\\<^sub>1(r \\<mapsto>\n           (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n          (r'' := None)(r' \\<mapsto> ls)) \\<or>\n        s\\<^sub>2 =\n        (s\\<^sub>1(r \\<mapsto>\n         (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n        (r'' := None)(r' \\<mapsto> ls)) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "apply (rule exI[where x=\"s\\<^sub>1(r' := Some ls, r := Some (\\<sigma>, \\<tau>;;\\<tau>', \\<E>[VE (CV Unit)]), r'' := None)\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<^sub>1(r \\<mapsto>\n     (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r'' := None)(r' \\<mapsto>\n    ls) \\<approx> (s\\<^sub>1(r' \\<mapsto> ls, r \\<mapsto>\n                   (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n    (r'' := None) \\<and>\n    (revision_step r' s\\<^sub>2\n      ((s\\<^sub>1(r \\<mapsto>\n        (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n       (r'' := None)(r' \\<mapsto> ls)) \\<or>\n     s\\<^sub>2 =\n     (s\\<^sub>1(r \\<mapsto>\n      (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n     (r'' := None)(r' \\<mapsto> ls)) \\<and>\n    (revision_step r s\\<^sub>2'\n      ((s\\<^sub>1(r' \\<mapsto> ls, r \\<mapsto>\n        (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n       (r'' := None)) \\<or>\n     s\\<^sub>2' =\n     (s\\<^sub>1(r' \\<mapsto> ls, r \\<mapsto>\n      (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n     (r'' := None))", "by (rule SLC_commute, use assms in auto)"], ["", "lemma SLC_join:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Rjoin (VE (Rid r''))])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = (s\\<^sub>1(r := Some (\\<sigma>, (\\<tau>;;\\<tau>'), \\<E>[VE (CV Unit)]), r'' := None))\" and\n    side: \"s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\" and \n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r'_not_joined: \"r' \\<noteq> r''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> r''", "using right side"], ["proof (prove)\nusing this:\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n\ngoal (1 subgoal):\n 1. r' \\<noteq> r''", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> r''\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (use new right s\\<^sub>1_r in auto)"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule join_and_local_commute, use assms r'_not_joined new l_fresh_left in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r''')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r''')]), r''' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r'_unchanged_left: \"s\\<^sub>2 r' = s\\<^sub>1 r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "using fork assms"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r''')]), r''' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r'''_fresh_left: \"r''' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r''' \\<notin> RID\\<^sub>G s\\<^sub>2", "using left_step fork(3) only_fork_introduces_rids' s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>1\n  \\<lbrakk>revision_step ?r ?s ?s';\n   \\<And>\\<sigma> \\<tau> \\<E> e.\n      ?s ?r \\<noteq> Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> ?r' \\<notin> RID\\<^sub>G ?s'\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n\ngoal (1 subgoal):\n 1. r''' \\<notin> RID\\<^sub>G s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r_unchanged_right: \"s\\<^sub>2' r = s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "using fork assms"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r''')]), r''' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r = s\\<^sub>1 r\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_unchanged_right: \"s\\<^sub>2' r'' = s\\<^sub>1 r''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = s\\<^sub>1 r''", "using fork assms"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r''')]), r''' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = s\\<^sub>1 r''", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r'' = s\\<^sub>1 r''\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3\" = \"s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r''')\""], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3'\" = \"s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None)\""], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (rule exI[where x=\"?s\\<^sub>3\"],rule exI[where x=\"?s\\<^sub>3'\"], rule SLC_commute)"], ["proof (state)\ngoal (3 subgoals):\n 1. s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r''') = s\\<^sub>2'\n    (r := s\\<^sub>2 r, r'' := None)\n 2. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r'''))\n 3. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "show \"?s\\<^sub>3 = ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r''') = s\\<^sub>2'\n    (r := s\\<^sub>2 r, r'' := None)", "using fork(1) fork(3) neq r'_not_joined s\\<^sub>1_r s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r''')]), r''' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>1\n  r \\<noteq> r'\n  r' \\<noteq> r''\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n\ngoal (1 subgoal):\n 1. s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r''') = s\\<^sub>2'\n    (r := s\\<^sub>2 r, r'' := None)", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r''') = s\\<^sub>2'\n  (r := s\\<^sub>2 r, r'' := None)\n\ngoal (2 subgoals):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r'''))\n 2. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "show \"revision_step r' s\\<^sub>2 ?s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r'''))", "using fork(1-2) r'_unchanged_left r'''_fresh_left"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r''')]), r''' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n  r''' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r'''))", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := s\\<^sub>2' r'''))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "show \"revision_step r s\\<^sub>2' ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "using r''_unchanged_right r_unchanged_right s\\<^sub>1_r s\\<^sub>2 side"], ["proof (prove)\nusing this:\n  s\\<^sub>2' r'' = s\\<^sub>1 r''\n  s\\<^sub>2' r = s\\<^sub>1 r\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (join _ _ _ r''')"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r''' := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'''))])\n  s\\<^sub>1 r''' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r'_unchanged_left: \"s\\<^sub>2 r' = s\\<^sub>1 r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "using join(2) neq r'_not_joined s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'''))])\n  r \\<noteq> r'\n  r' \\<noteq> r''\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r_unchanged_right: \"s\\<^sub>2' r = s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "using join(1,3) neq s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r''' := None)\n  s\\<^sub>1 r''' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n  r \\<noteq> r'\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r = s\\<^sub>1 r\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (cases \"r'' = r'''\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r'' = r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case True"], ["proof (state)\nthis:\n  r'' = r'''\n\ngoal (2 subgoals):\n 1. r'' = r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r'''_none_left: \"s\\<^sub>2 r''' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 r''' = None", "by (simp add: True s\\<^sub>2)"], ["proof (state)\nthis:\n  s\\<^sub>2 r''' = None\n\ngoal (2 subgoals):\n 1. r'' = r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r''_none_right: \"s\\<^sub>2' r'' = None\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = None", "by (simp add: True join(1))"], ["proof (state)\nthis:\n  s\\<^sub>2' r'' = None\n\ngoal (2 subgoals):\n 1. r'' = r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (rule exI[where x=\\<epsilon>], rule exI[where x=\\<epsilon>], rule SLC_commute)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<epsilon> = \\<epsilon>\n 2. revision_step r' s\\<^sub>2 \\<epsilon>\n 3. revision_step r s\\<^sub>2' \\<epsilon>", "show \"\\<epsilon> = \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon> = \\<epsilon>", "by (rule refl)"], ["proof (state)\nthis:\n  \\<epsilon> = \\<epsilon>\n\ngoal (2 subgoals):\n 1. revision_step r' s\\<^sub>2 \\<epsilon>\n 2. revision_step r s\\<^sub>2' \\<epsilon>", "show \"revision_step r' s\\<^sub>2 \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2 \\<epsilon>", "using r'_unchanged_left r'''_none_left join(2)"], ["proof (prove)\nusing this:\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n  s\\<^sub>2 r''' = None\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'''))])\n\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2 \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2 \\<epsilon>\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' \\<epsilon>", "show \"revision_step r s\\<^sub>2' \\<epsilon>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' \\<epsilon>", "using r_unchanged_right r''_none_right s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  s\\<^sub>2' r = s\\<^sub>1 r\n  s\\<^sub>2' r'' = None\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' \\<epsilon>", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2' \\<epsilon>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case False"], ["proof (state)\nthis:\n  r'' \\<noteq> r'''\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r'''_unchanged_left: \"s\\<^sub>2 r''' = s\\<^sub>1 r'''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 r''' = s\\<^sub>1 r'''", "using False join(1,3) s\\<^sub>2 r_unchanged_right"], ["proof (prove)\nusing this:\n  r'' \\<noteq> r'''\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r''' := None)\n  s\\<^sub>1 r''' = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>2' r = s\\<^sub>1 r\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 r''' = s\\<^sub>1 r'''", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2 r''' = s\\<^sub>1 r'''\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r''_unchanged_right': \"s\\<^sub>2' r'' = s\\<^sub>1 r''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = s\\<^sub>1 r''", "using False join(1) r'_not_joined side"], ["proof (prove)\nusing this:\n  r'' \\<noteq> r'''\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r''' := None)\n  r' \\<noteq> r''\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r'' = s\\<^sub>1 r''", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r'' = s\\<^sub>1 r''\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3\" = \"s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None)\""], ["proof (state)\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3'\" = \"s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None)\""], ["proof (state)\ngoal (1 subgoal):\n 1. r'' \\<noteq> r''' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (rule exI[where x=\"?s\\<^sub>3\"], rule exI[where x=\"?s\\<^sub>3'\"], rule SLC_commute)"], ["proof (state)\ngoal (3 subgoals):\n 1. s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None) = s\\<^sub>2'\n    (r := s\\<^sub>2 r, r'' := None)\n 2. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None))\n 3. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "show \"?s\\<^sub>3 = ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None) = s\\<^sub>2'\n    (r := s\\<^sub>2 r, r'' := None)", "using join(1) neq r'_not_joined r_unchanged_right s\\<^sub>1_r s\\<^sub>2 s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r''' := None)\n  r \\<noteq> r'\n  r' \\<noteq> r''\n  s\\<^sub>2' r = s\\<^sub>1 r\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n\ngoal (1 subgoal):\n 1. s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None) = s\\<^sub>2'\n    (r := s\\<^sub>2 r, r'' := None)", "by fastforce"], ["proof (state)\nthis:\n  s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None) = s\\<^sub>2'\n  (r := s\\<^sub>2 r, r'' := None)\n\ngoal (2 subgoals):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None))\n 2. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "show \"revision_step r' s\\<^sub>2 ?s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None))", "by (simp add: join r'''_unchanged_left r'_unchanged_left)"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2 (s\\<^sub>2(r' := s\\<^sub>2' r', r''' := None))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "show \"revision_step r s\\<^sub>2' ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "using r''_unchanged_right' r_unchanged_right s\\<^sub>1_r side s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>2' r'' = s\\<^sub>1 r''\n  s\\<^sub>2' r = s\\<^sub>1 r\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r''))])\n  s\\<^sub>1 r'' = Some (\\<sigma>', \\<tau>', VE v)\n  s\\<^sub>2 =\n  (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n  (r'' := None)\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, r'' := None))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use left_step neq right join\\<^sub>\\<epsilon> in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule join_and_local_commute, use assms r'_not_joined in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Case local\\<close>"], ["", "lemma local_steps_commute:\n  assumes\n    \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> x)\"\n    \"s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> y)\"\n    \"revision_step r' (s\\<^sub>1(r \\<mapsto> x)) (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto> y))\"\n    \"revision_step r (s\\<^sub>1(r' \\<mapsto> y)) (s\\<^sub>1(r' \\<mapsto> y, r \\<mapsto> x))\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (metis (no_types, lifting) assms fun_upd_twist fun_upd_upd local_determinism)"], ["", "lemma local_and_fork_commute:\n  assumes\n    \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> x)\"\n    \"s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\"\n    \"s\\<^sub>2 r' = Some (\\<sigma>, \\<tau>, \\<E>[Rfork e])\"\n    \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\"\n    \"revision_step r s\\<^sub>2' (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))\"\n    \"r \\<noteq> r'\"\n    \"r \\<noteq> r''\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. (s\\<^sub>3 \\<approx> s\\<^sub>3') \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof(rule exI[where x=\"s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\"],\n        rule exI[where x=\"s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x)\"],\n        rule SLC_commute)"], ["proof (state)\ngoal (3 subgoals):\n 1. s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e)) = s\\<^sub>1(r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x)\n 2. revision_step r' s\\<^sub>2\n     (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n      (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n      (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\n 3. revision_step r s\\<^sub>2'\n     (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))", "show \"s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)) = \n    s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e)) = s\\<^sub>1(r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x)", "using assms revision_step.fork"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> x)\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s\\<^sub>2 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))\n  r \\<noteq> r'\n  r \\<noteq> r''\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n\ngoal (1 subgoal):\n 1. s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e)) = s\\<^sub>1(r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x)", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e)) = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x)\n\ngoal (2 subgoals):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n      (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n      (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\n 2. revision_step r s\\<^sub>2'\n     (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))", "show \"revision_step r' s\\<^sub>2 (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n      (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n      (\\<sigma>;;\\<tau>, \\<epsilon>, e)))", "using assms(1) assms(3) assms(4) revision_step.fork"], ["proof (prove)\nusing this:\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> x)\n  s\\<^sub>2 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n      (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n      (\\<sigma>;;\\<tau>, \\<epsilon>, e)))", "by blast"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>1(r \\<mapsto> x, r' \\<mapsto>\n    (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))", "show \"revision_step r s\\<^sub>2' (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))", "using assms(5)"], ["proof (prove)\nusing this:\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))", "by blast"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>1(r' \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e), r \\<mapsto> x))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SLC_app:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Apply (VE (Lambda x e)) (VE v)])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[subst (VE v) x e]))\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r =\n  Some (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case new: (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (simp add: s\\<^sub>1_r new(3))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_steps_commute) (use new l_fresh_left assms in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r'')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2", "by (rule only_fork_introduces_rids'[OF left_step]) (simp add: s\\<^sub>1_r fork(3))+"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_and_fork_commute[OF s\\<^sub>2 fork(1)]) (use fork neq s\\<^sub>2 r''_fresh_left s\\<^sub>1_r in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step right neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step right neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule local_steps_commute[OF s\\<^sub>2], use assms in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SLC_ifTrue:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Ite (VE (CV T)) e1 e2])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[e1]))\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (simp add: s\\<^sub>1_r new(3))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_steps_commute) (use new l_fresh_left assms in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r'')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2", "by (rule only_fork_introduces_rids'[OF left_step]) (simp add: s\\<^sub>1_r fork(3))+"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_and_fork_commute[OF s\\<^sub>2 fork(1)]) (use fork neq s\\<^sub>2 r''_fresh_left s\\<^sub>1_r in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step right neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step right neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule local_steps_commute[OF s\\<^sub>2], use assms in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SLC_ifFalse:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Ite (VE (CV F)) e1 e2])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[e2]))\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (simp add: s\\<^sub>1_r new(3))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_steps_commute) (use new l_fresh_left assms in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r'')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2", "by (rule only_fork_introduces_rids'[OF left_step]) (simp add: s\\<^sub>1_r fork(3))+"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_and_fork_commute[OF s\\<^sub>2 fork(1)]) (use fork neq s\\<^sub>2 r''_fresh_left s\\<^sub>1_r in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step right neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step right neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule local_steps_commute[OF s\\<^sub>2], use assms in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SLC_set:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Assign (VE (Loc l)) (VE v)])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E>[VE (CV Unit)]))\" and\n    side: \"l \\<in> dom (\\<sigma>;;\\<tau>)\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]))\n  l \\<in> dom (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (simp add: s\\<^sub>1_r new(3))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_steps_commute) (use new l_fresh_left assms in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r'')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2", "by (rule only_fork_introduces_rids'[OF left_step]) (simp add: s\\<^sub>1_r fork(3))+"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_and_fork_commute[OF s\\<^sub>2 fork(1)]) (use fork neq s\\<^sub>2 r''_fresh_left s\\<^sub>1_r side in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule local_steps_commute[OF s\\<^sub>2], use assms in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SLC_get:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (the ((\\<sigma>;;\\<tau>) l))]))\" and\n    side: \"l \\<in> dom (\\<sigma>;;\\<tau>)\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (the ((\\<sigma>;;\\<tau>) l))]))\n  l \\<in> dom (\\<sigma>;;\\<tau>)\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (simp add: s\\<^sub>1_r new(3))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_steps_commute) (use new l_fresh_left assms in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r'')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2", "by (rule only_fork_introduces_rids'[OF left_step]) (simp add: s\\<^sub>1_r fork(3))+"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_and_fork_commute[OF s\\<^sub>2 fork(1)]) (use fork neq s\\<^sub>2 r''_fresh_left s\\<^sub>1_r side in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "qed ((rule local_steps_commute[OF s\\<^sub>2], use assms in auto)[1])+"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Case new\\<close>"], ["", "lemma SLC_new:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E>[Ref (VE v)])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\" and\n    side: \"l \\<notin> LID\\<^sub>G s\\<^sub>1\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case app"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_app) (use app assms(1-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case ifTrue"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_ifTrue) (use ifTrue assms(1-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case ifFalse"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_ifFalse) (use ifFalse assms(1-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new \\<sigma>' \\<tau>' \\<E>' v' l')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r'_unchanged_left: \"s\\<^sub>2 r' = s\\<^sub>1 r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "using new(2) neq s\\<^sub>2"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  r \\<noteq> r'\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r_unchanged_right: \"s\\<^sub>2' r = s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "by (simp add: new(1) neq s\\<^sub>1_r)"], ["proof (state)\nthis:\n  s\\<^sub>2' r = s\\<^sub>1 r\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (cases \"l = l'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case True"], ["proof (state)\nthis:\n  l = l'\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "obtain l'' where l''_fresh_left: \"l'' \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>l''.\n        l'' \\<notin> LID\\<^sub>G s\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (meson ex_new_if_finite left_step lid_inf reach RID\\<^sub>L_finite_invariant reachable_imp_identifiers_finite(2))"], ["proof (state)\nthis:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "hence l_l'': \"l \\<noteq> l''\""], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. l \\<noteq> l''", "by (auto simp add: s\\<^sub>2)"], ["proof (state)\nthis:\n  l \\<noteq> l''\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have l''_fresh_s\\<^sub>1: \"l'' \\<notin> LID\\<^sub>G s\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>G s\\<^sub>1", "using assms True new l''_fresh_left"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  r \\<noteq> r'\n  reachable s\\<^sub>1\n  infinite UNIV\n  l = l'\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>G s\\<^sub>1", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "hence l''_fresh_right': \"l'' \\<notin> LID\\<^sub>G s\\<^sub>2'\""], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>G s\\<^sub>2'", "using True l_l'' new(1-2)"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  l = l'\n  l \\<noteq> l''\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>G s\\<^sub>2'", "by auto"], ["proof (state)\nthis:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2'\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?\\<beta>\" = \"id(l := l'', l'' := l)\""], ["proof (state)\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have bij_\\<beta>: \"bij ?\\<beta>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (id(l := l'', l'' := l))", "by (simp add: swap_bij)"], ["proof (state)\nthis:\n  bij (id(l := l'', l'' := l))\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3\" = \"s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))\""], ["proof (state)\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_convergence: \"revision_step r' s\\<^sub>2 ?s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')])))", "using l''_fresh_left new(2) r'_unchanged_left"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')])))", "by auto"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>2(r' \\<mapsto>\n    (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')])))\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3'\" = \"s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))\""], ["proof (state)\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have right_convergence: \"revision_step r s\\<^sub>2' ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r \\<mapsto>\n      (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')])))", "using l''_fresh_right' new(1) neq s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2'\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n  r \\<noteq> r'\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r \\<mapsto>\n      (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')])))", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')])))\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have equiv: \"?s\\<^sub>3 \\<approx> ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2(r' \\<mapsto>\n    (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'),\n     \\<E>' [VE (Loc l'')])) \\<approx> s\\<^sub>2'\n    (r \\<mapsto> (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "proof (rule eq_statesI[of id ?\\<beta>])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))\n 2. bij id\n 3. bij (id(l := l'', l'' := l))", "show \"\\<R>\\<^sub>G id ?\\<beta> ?s\\<^sub>3 = ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have s\\<^sub>1: \"\\<R>\\<^sub>G id ?\\<beta> s\\<^sub>1 = s\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l)) s\\<^sub>1 = s\\<^sub>1", "using l''_fresh_s\\<^sub>1 side"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l)) s\\<^sub>1 = s\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G id (id(l := l'', l'' := l)) s\\<^sub>1 = s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have \\<sigma>: \"\\<R>\\<^sub>S id ?\\<beta> \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma> = \\<sigma>", "using l''_fresh_s\\<^sub>1 s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma> = \\<sigma>", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma> = \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have \\<E>: \"\\<R>\\<^sub>C id ?\\<beta> \\<E> = \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E> = \\<E>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l \\<notin> LID\\<^sub>C \\<E>\n 2. l'' \\<notin> LID\\<^sub>C \\<E>", "show \"l \\<notin> LID\\<^sub>C \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>C \\<E>", "using s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>C \\<E>", "by auto"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>C \\<E>\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>C \\<E>", "show \"l'' \\<notin> LID\\<^sub>C \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>C \\<E>", "using l''_fresh_left s\\<^sub>2"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>C \\<E>", "by auto"], ["proof (state)\nthis:\n  l'' \\<notin> LID\\<^sub>C \\<E>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E> = \\<E>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have \\<tau>lv: \"\\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) = (\\<tau>(l'' \\<mapsto> v))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) =\n    \\<tau>(l'' \\<mapsto> v)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) =\n    \\<tau>(l'' \\<mapsto> v)", "have \\<tau>: \"\\<R>\\<^sub>S id ?\\<beta> \\<tau> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<tau> = \\<tau>", "using l''_fresh_s\\<^sub>1 s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<tau> = \\<tau>", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<tau> = \\<tau>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) =\n    \\<tau>(l'' \\<mapsto> v)", "have v: \"\\<R>\\<^sub>V id ?\\<beta> v = v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>V id (id(l := l'', l'' := l)) v = v", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. l \\<notin> LID\\<^sub>V v\n 2. l'' \\<notin> LID\\<^sub>V v", "show \"l \\<notin> LID\\<^sub>V v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>V v", "using s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>V v", "by auto"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>V v", "show \"l'' \\<notin> LID\\<^sub>V v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>V v", "using l''_fresh_s\\<^sub>1 s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)])\n\ngoal (1 subgoal):\n 1. l'' \\<notin> LID\\<^sub>V v", "by auto"], ["proof (state)\nthis:\n  l'' \\<notin> LID\\<^sub>V v\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>V id (id(l := l'', l'' := l)) v = v\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) =\n    \\<tau>(l'' \\<mapsto> v)", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) =\n    \\<tau>(l'' \\<mapsto> v)", "by (simp add: \\<tau> v bij_\\<beta>)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) = \\<tau>\n  (l'' \\<mapsto> v)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) = \\<tau>\n  (l'' \\<mapsto> v)\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have \\<sigma>': \"\\<R>\\<^sub>S id ?\\<beta> \\<sigma>' = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma>' = \\<sigma>'", "using l''_fresh_s\\<^sub>1 new(2-3)"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma>' = \\<sigma>'", "by (auto simp add: True ID_distr_global_conditional)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma>' = \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have \\<E>': \"\\<R>\\<^sub>C id ?\\<beta> \\<E>' = \\<E>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E>' = \\<E>'", "using l''_fresh_s\\<^sub>1 new(2-3)"], ["proof (prove)\nusing this:\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E>' = \\<E>'", "by (auto simp add: True ID_distr_global_conditional)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E>' = \\<E>'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "have \\<tau>l''v: \"\\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) = (\\<tau>'(l \\<mapsto> v'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n    \\<tau>'(l \\<mapsto> v')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n    \\<tau>'(l \\<mapsto> v')", "have \\<tau>': \"\\<R>\\<^sub>S id ?\\<beta> \\<tau>' = \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<tau>' = \\<tau>'", "using new(2-3) l''_fresh_s\\<^sub>1"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<tau>' = \\<tau>'", "by (auto simp add: True ID_distr_global_conditional)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<tau>' = \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n    \\<tau>'(l \\<mapsto> v')", "have v': \"\\<R>\\<^sub>V id ?\\<beta> v' = v'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>V id (id(l := l'', l'' := l)) v' = v'", "using new(2-3) l''_fresh_s\\<^sub>1"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Ref (VE v')])\n  l' \\<notin> LID\\<^sub>G s\\<^sub>1\n  l'' \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>V id (id(l := l'', l'' := l)) v' = v'", "by (auto simp add: True ID_distr_global_conditional)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>V id (id(l := l'', l'' := l)) v' = v'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n    \\<tau>'(l \\<mapsto> v')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n    \\<tau>'(l \\<mapsto> v')", "by (simp add: \\<tau>' v' bij_\\<beta>)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n  \\<tau>'(l \\<mapsto> v')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n  \\<tau>'(l \\<mapsto> v')\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "using True neq s\\<^sub>1 \\<sigma> \\<E> \\<tau>lv \\<sigma>' \\<E>' \\<tau>l''v s\\<^sub>2 l_l'' new(1)"], ["proof (prove)\nusing this:\n  l = l'\n  r \\<noteq> r'\n  \\<R>\\<^sub>G id (id(l := l'', l'' := l)) s\\<^sub>1 = s\\<^sub>1\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma> = \\<sigma>\n  \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E> = \\<E>\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>(l \\<mapsto> v)) = \\<tau>\n  (l'' \\<mapsto> v)\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) \\<sigma>' = \\<sigma>'\n  \\<R>\\<^sub>C id (id(l := l'', l'' := l)) \\<E>' = \\<E>'\n  \\<R>\\<^sub>S id (id(l := l'', l'' := l)) (\\<tau>'(l'' \\<mapsto> v')) =\n  \\<tau>'(l \\<mapsto> v')\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]))\n  l \\<noteq> l''\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l' \\<mapsto> v'), \\<E>' [VE (Loc l')]))\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n     (s\\<^sub>2(r' \\<mapsto>\n      (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n    s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n   (s\\<^sub>2(r' \\<mapsto>\n    (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n  s\\<^sub>2'(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G id (id(l := l'', l'' := l))\n   (s\\<^sub>2(r' \\<mapsto>\n    (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')]))) =\n  s\\<^sub>2'(r \\<mapsto>\n  (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))\n\ngoal (2 subgoals):\n 1. bij id\n 2. bij (id(l := l'', l'' := l))", "qed (simp add: bij_\\<beta>)+"], ["proof (state)\nthis:\n  s\\<^sub>2(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'),\n   \\<E>' [VE (Loc l'')])) \\<approx> s\\<^sub>2'\n  (r \\<mapsto> (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))\n\ngoal (2 subgoals):\n 1. l = l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "using left_convergence right_convergence equiv"], ["proof (prove)\nusing this:\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>2(r' \\<mapsto>\n    (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'), \\<E>' [VE (Loc l'')])))\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>2'(r \\<mapsto>\n    (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')])))\n  s\\<^sub>2(r' \\<mapsto>\n  (\\<sigma>', \\<tau>'(l'' \\<mapsto> v'),\n   \\<E>' [VE (Loc l'')])) \\<approx> s\\<^sub>2'\n  (r \\<mapsto> (\\<sigma>, \\<tau>(l'' \\<mapsto> v), \\<E> [VE (Loc l'')]))\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case False"], ["proof (state)\nthis:\n  l \\<noteq> l'\n\ngoal (1 subgoal):\n 1. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2'", "by (rule revision_stepE[OF left_step]) (use False side new(1-2) in \\<open>auto simp add: s\\<^sub>1_r\\<close>)"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have l'_fresh_right: \"l' \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l' \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule revision_stepE[OF right]) (use False new(3) assms(1-3) in \\<open>auto simp add: new(2)\\<close>)"], ["proof (state)\nthis:\n  l' \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. l \\<noteq> l' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_steps_commute[OF s\\<^sub>2 new(1)]) (use new assms l_fresh_left l'_fresh_right s\\<^sub>2 in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case get"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_get) (use get assms(1-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case set"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_set) (use set assms(1-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork _ _ _ _ r'')"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>_;;\\<tau>_, \\<epsilon>, e_))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rfork e_])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2", "by (rule only_fork_introduces_rids'[OF left_step]) (simp add: s\\<^sub>1_r fork(3))+"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_right: \"l \\<notin> LID\\<^sub>G s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2'", "by (rule only_new_introduces_lids'[OF right]) (simp add: side fork(2))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule local_and_fork_commute[OF s\\<^sub>2 fork(1)]) (use fork(1-2) neq s\\<^sub>2 l_fresh_right r''_fresh_left s\\<^sub>1_r in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step neq in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Case fork\\<close>"], ["", "lemma SLC_fork:\n  assumes\n    s\\<^sub>1_r: \"s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\" and\n    s\\<^sub>2: \"s\\<^sub>2 = (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (Rid left_forkee)]), left_forkee \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\" and\n    side: \"left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\" and\n    right: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    neq: \"r \\<noteq> r'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "using s\\<^sub>1_r s\\<^sub>2 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>1 s\\<^sub>2", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (use right in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case app"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s\\<^sub>1 r' =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_app) (use assms(1-5) app in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case ifTrue"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e1_]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV T)) e1_ e2_])\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_ifTrue) (use assms(1-5) ifTrue in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case ifFalse"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [e2_]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ite (VE (CV F)) e1_ e2_])\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_ifFalse) (use assms(1-5) ifFalse in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "(* symmetry is intentionally not exploited: this would require the lid_inf assumption *)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\\<^sub>1\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have l_fresh_left: \"l \\<notin> LID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. l \\<notin> LID\\<^sub>G s\\<^sub>2", "by (rule only_new_introduces_lids'[OF left_step]) (simp add: s\\<^sub>1_r new(3))+"], ["proof (state)\nthis:\n  l \\<notin> LID\\<^sub>G s\\<^sub>2\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_right: \"left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'", "by (rule only_fork_introduces_rids'[OF right]) (simp add: side new(2))+"], ["proof (state)\nthis:\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule local_and_fork_commute[OF new(1) s\\<^sub>2]) (use new(1-2) neq s\\<^sub>1_r r''_fresh_right l_fresh_left s\\<^sub>2 in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case get"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_,\n   \\<E>_\n    [VE (the (if \\<tau>_ l_ = None then \\<sigma>_ l_ else \\<tau>_ l_))]))\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Read (VE (Loc l_))])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (5 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_get) (use assms(1-5) get in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case set"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l_ \\<mapsto> v_), \\<E>_ [VE (CV Unit)]))\n  s\\<^sub>1 r' =\n  Some (\\<sigma>_, \\<tau>_, \\<E>_ [Assign (VE (Loc l_)) (VE v_)])\n  l_ \\<in> dom (\\<sigma>_;;\\<tau>_)\n\ngoal (4 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s\\<^sub>1 r' =\n        Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 4. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_set) (use assms(1-5) set in \\<open>auto simp add: ID_distr_global_conditional\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case (fork \\<sigma>' \\<tau>' \\<E>' e' right_forkee)"], ["proof (state)\nthis:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>', \\<E>' [VE (Rid right_forkee)]), right_forkee \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r'_unchanged_left: \"s\\<^sub>2 r' = s\\<^sub>1 r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "using side fork(2) neq s\\<^sub>2"], ["proof (prove)\nusing this:\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r \\<noteq> r'\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 r' = s\\<^sub>1 r'", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have r_unchanged_right: \"s\\<^sub>2' r = s\\<^sub>1 r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "using fork(1,3) neq s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>', \\<E>' [VE (Rid right_forkee)]), right_forkee \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n  r \\<noteq> r'\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n\ngoal (1 subgoal):\n 1. s\\<^sub>2' r = s\\<^sub>1 r", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2' r = s\\<^sub>1 r\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have \"r \\<noteq> left_forkee\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<noteq> left_forkee", "using s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. r \\<noteq> left_forkee", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> left_forkee\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have \"r \\<noteq> right_forkee\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<noteq> right_forkee", "using fork(3) s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n\ngoal (1 subgoal):\n 1. r \\<noteq> right_forkee", "by auto"], ["proof (state)\nthis:\n  r \\<noteq> right_forkee\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have \"r' \\<noteq> left_forkee\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> left_forkee", "using fork(2) side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. r' \\<noteq> left_forkee", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> left_forkee\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "have \"r' \\<noteq> right_forkee\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r' \\<noteq> right_forkee", "using fork(2) fork(3)"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. r' \\<noteq> right_forkee", "by auto"], ["proof (state)\nthis:\n  r' \\<noteq> right_forkee\n\ngoal (3 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e r'a.\n       \\<lbrakk>s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'a)]), r'a \\<mapsto>\n                (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r'a \\<notin> RID\\<^sub>G s\\<^sub>1\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 3. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (cases \"left_forkee = right_forkee\")"], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case True"], ["proof (state)\nthis:\n  left_forkee = right_forkee\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "obtain r'' where r''_fresh_left: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r''.\n        r'' \\<notin> RID\\<^sub>G s\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using RID\\<^sub>G_finite_invariant ex_new_if_finite left_step reach reachable_imp_identifiers_finite(1) rid_inf"], ["proof (prove)\nusing this:\n  \\<lbrakk>revision_step ?r ?s ?s'; finite (RID\\<^sub>G ?s)\\<rbrakk>\n  \\<Longrightarrow> finite (RID\\<^sub>G ?s')\n  \\<lbrakk>infinite UNIV; finite ?A\\<rbrakk>\n  \\<Longrightarrow> \\<exists>a. a \\<notin> ?A\n  revision_step r s\\<^sub>1 s\\<^sub>2\n  reachable s\\<^sub>1\n  reachable ?s \\<Longrightarrow> finite (RID\\<^sub>G ?s)\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. (\\<And>r''.\n        r'' \\<notin> RID\\<^sub>G s\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "hence \"r'' \\<noteq> left_forkee\""], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> left_forkee", "using assms(2)"], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> left_forkee", "by auto"], ["proof (state)\nthis:\n  r'' \\<noteq> left_forkee\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have \"r'' \\<noteq> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<noteq> r", "using r''_fresh_left s\\<^sub>2"], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> r", "by auto"], ["proof (state)\nthis:\n  r'' \\<noteq> r\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have \"r'' \\<noteq> r'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<noteq> r'", "using fork(2) r''_fresh_left r'_unchanged_left"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n\ngoal (1 subgoal):\n 1. r'' \\<noteq> r'", "by auto"], ["proof (state)\nthis:\n  r'' \\<noteq> r'\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have \"r'' \\<notin> RID\\<^sub>G (s\\<^sub>1(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (Rid left_forkee)])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r''\n    \\<notin> RID\\<^sub>G\n              (s\\<^sub>1(r \\<mapsto>\n               (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)])))", "by (metis (mono_tags, lifting) RID\\<^sub>G_def True UnI1 \\<open>r \\<noteq> right_forkee\\<close> domIff fun_upd_other fun_upd_triv in_restricted_global_in_updated_global(1) fork(3) r''_fresh_left s\\<^sub>2)"], ["proof (state)\nthis:\n  r''\n  \\<notin> RID\\<^sub>G\n            (s\\<^sub>1(r \\<mapsto>\n             (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)])))\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "hence \"r'' \\<notin> RID\\<^sub>G (s\\<^sub>1(r := None))\""], ["proof (prove)\nusing this:\n  r''\n  \\<notin> RID\\<^sub>G\n            (s\\<^sub>1(r \\<mapsto>\n             (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)])))\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G (s\\<^sub>1(r := None))", "by blast"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G (s\\<^sub>1(r := None))\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_s\\<^sub>1: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>1", "using \\<open>r \\<noteq> left_forkee\\<close> s\\<^sub>2 r''_fresh_left s\\<^sub>1_r \\<open>r'' \\<noteq> r\\<close> \\<open>r'' \\<notin> RID\\<^sub>G (s\\<^sub>1(r := None))\\<close>"], ["proof (prove)\nusing this:\n  r \\<noteq> left_forkee\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r'' \\<noteq> r\n  r'' \\<notin> RID\\<^sub>G (s\\<^sub>1(r := None))\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>1", "by (auto simp add: ID_distr_global_conditional)"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have r''_fresh_right: \"r'' \\<notin> RID\\<^sub>G s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2'", "using True \\<open>r'' \\<noteq> left_forkee\\<close> \\<open>r' \\<noteq> right_forkee\\<close> \\<open>r'' \\<noteq> r'\\<close> r''_fresh_s\\<^sub>1 fork(2) r''_fresh_s\\<^sub>1"], ["proof (prove)\nusing this:\n  left_forkee = right_forkee\n  r'' \\<noteq> left_forkee\n  r' \\<noteq> right_forkee\n  r'' \\<noteq> r'\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>G s\\<^sub>2'", "by (auto simp add: fork(1) ID_distr_global_conditional fun_upd_twist)"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2'\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let ?\\<alpha> = \"id(left_forkee := r'', r'' := left_forkee)\""], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have bij_\\<alpha>: \"bij ?\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (id(left_forkee := r'', r'' := left_forkee))", "by (simp add: swap_bij)"], ["proof (state)\nthis:\n  bij (id(left_forkee := r'', r'' := left_forkee))\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3\" = \"s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))\""], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_convergence: \"revision_step r' s\\<^sub>2 ?s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')))", "using fork(2) r''_fresh_left r'_unchanged_left revision_step.fork"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')))", "by auto"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')))\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "let \"?s\\<^sub>3'\" = \"s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E>[VE (Rid r'')]), r'' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\""], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have right_convergence: \"revision_step r s\\<^sub>2' ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))", "using r''_fresh_right r_unchanged_right revision_step.fork s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2'\n  s\\<^sub>2' r = s\\<^sub>1 r\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n      \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have equiv: \"?s\\<^sub>3 \\<approx> ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')) \\<approx> s\\<^sub>2'(r \n    \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n    (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "proof (rule eq_statesI[of ?\\<alpha> id])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n 2. bij (id(left_forkee := r'', r'' := left_forkee))\n 3. bij id", "show \"\\<R>\\<^sub>G ?\\<alpha> id ?s\\<^sub>3 = ?s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have s\\<^sub>1: \"\\<R>\\<^sub>G ?\\<alpha> id s\\<^sub>1 = s\\<^sub>1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id s\\<^sub>1 =\n    s\\<^sub>1", "using r''_fresh_s\\<^sub>1 side"], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id s\\<^sub>1 =\n    s\\<^sub>1", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id s\\<^sub>1 =\n  s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have \\<sigma>: \"\\<R>\\<^sub>S ?\\<alpha> id \\<sigma> = \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma> =\n    \\<sigma>", "using r''_fresh_s\\<^sub>1 s\\<^sub>1_r True fork(3)"], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  left_forkee = right_forkee\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma> =\n    \\<sigma>", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma> =\n  \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have \\<tau>: \"\\<R>\\<^sub>S ?\\<alpha> id \\<tau> = \\<tau>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau> =\n    \\<tau>", "using r''_fresh_s\\<^sub>1 s\\<^sub>1_r True fork(3)"], ["proof (prove)\nusing this:\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  left_forkee = right_forkee\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau> =\n    \\<tau>", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau> =\n  \\<tau>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have \\<E>: \"\\<R>\\<^sub>C ?\\<alpha> id \\<E> = \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>C (id(left_forkee := r'', r'' := left_forkee)) id \\<E> = \\<E>", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee \\<notin> RID\\<^sub>C \\<E>\n 2. r'' \\<notin> RID\\<^sub>C \\<E>", "show \"left_forkee \\<notin> RID\\<^sub>C \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>C \\<E>", "using s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>C \\<E>", "by auto"], ["proof (state)\nthis:\n  left_forkee \\<notin> RID\\<^sub>C \\<E>\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>C \\<E>", "show \"r'' \\<notin> RID\\<^sub>C \\<E>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>C \\<E>", "using True \\<open>r \\<noteq> right_forkee\\<close> r''_fresh_left s\\<^sub>2"], ["proof (prove)\nusing this:\n  left_forkee = right_forkee\n  r \\<noteq> right_forkee\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>C \\<E>", "by auto"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>C \\<E>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>C (id(left_forkee := r'', r'' := left_forkee)) id \\<E> = \\<E>\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have e: \"\\<R>\\<^sub>E ?\\<alpha> id e = e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E (id(left_forkee := r'', r'' := left_forkee)) id e = e", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee \\<notin> RID\\<^sub>E e\n 2. r'' \\<notin> RID\\<^sub>E e", "show \"left_forkee \\<notin> RID\\<^sub>E e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>E e", "using s\\<^sub>1_r side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>E e", "by auto"], ["proof (state)\nthis:\n  left_forkee \\<notin> RID\\<^sub>E e\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>E e", "show \"r'' \\<notin> RID\\<^sub>E e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>E e", "using True \\<open>r \\<noteq> right_forkee\\<close> r''_fresh_left s\\<^sub>2"], ["proof (prove)\nusing this:\n  left_forkee = right_forkee\n  r \\<noteq> right_forkee\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>2\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>E e", "by auto"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>E e\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>E (id(left_forkee := r'', r'' := left_forkee)) id e = e\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have \\<sigma>': \"\\<R>\\<^sub>S ?\\<alpha> id \\<sigma>' = \\<sigma>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma>' =\n    \\<sigma>'", "using fork(2) r''_fresh_s\\<^sub>1 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma>' =\n    \\<sigma>'", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma>' =\n  \\<sigma>'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have \\<tau>': \"\\<R>\\<^sub>S ?\\<alpha> id \\<tau>' = \\<tau>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau>' =\n    \\<tau>'", "using fork(2) r''_fresh_s\\<^sub>1 side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau>' =\n    \\<tau>'", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau>' =\n  \\<tau>'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have \\<E>': \"\\<R>\\<^sub>C ?\\<alpha> id \\<E>' = \\<E>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>C (id(left_forkee := r'', r'' := left_forkee)) id \\<E>' =\n    \\<E>'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee \\<notin> RID\\<^sub>C \\<E>'\n 2. r'' \\<notin> RID\\<^sub>C \\<E>'", "show \"left_forkee \\<notin> RID\\<^sub>C \\<E>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>C \\<E>'", "using fork(2) side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>C \\<E>'", "by auto"], ["proof (state)\nthis:\n  left_forkee \\<notin> RID\\<^sub>C \\<E>'\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>C \\<E>'", "show \"r'' \\<notin> RID\\<^sub>C \\<E>'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>C \\<E>'", "using fork(2) r''_fresh_s\\<^sub>1"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>C \\<E>'", "by auto"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>C \\<E>'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>C (id(left_forkee := r'', r'' := left_forkee)) id \\<E>' = \\<E>'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "have e': \"\\<R>\\<^sub>E ?\\<alpha> id e' = e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E (id(left_forkee := r'', r'' := left_forkee)) id e' = e'", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. left_forkee \\<notin> RID\\<^sub>E e'\n 2. r'' \\<notin> RID\\<^sub>E e'", "show \"left_forkee \\<notin> RID\\<^sub>E e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>E e'", "using fork(2) side"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>E e'", "by auto"], ["proof (state)\nthis:\n  left_forkee \\<notin> RID\\<^sub>E e'\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>E e'", "show \"r'' \\<notin> RID\\<^sub>E e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>E e'", "using fork(2) r''_fresh_s\\<^sub>1"], ["proof (prove)\nusing this:\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  r'' \\<notin> RID\\<^sub>G s\\<^sub>1\n\ngoal (1 subgoal):\n 1. r'' \\<notin> RID\\<^sub>E e'", "by auto"], ["proof (state)\nthis:\n  r'' \\<notin> RID\\<^sub>E e'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>E (id(left_forkee := r'', r'' := left_forkee)) id e' = e'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "using True fork(1) neq \\<sigma> \\<tau> \\<E> e  \\<sigma>' \\<tau>' \\<E>' e' s\\<^sub>1 s\\<^sub>2\n            bij_\\<alpha> \\<open>r'' \\<noteq> left_forkee\\<close> \\<open>r' \\<noteq> left_forkee\\<close> \\<open>r \\<noteq> left_forkee\\<close> \\<open>r'' \\<noteq> r\\<close> \\<open>r'' \\<noteq> r'\\<close>"], ["proof (prove)\nusing this:\n  left_forkee = right_forkee\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>', \\<E>' [VE (Rid right_forkee)]), right_forkee \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))\n  r \\<noteq> r'\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma> =\n  \\<sigma>\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau> =\n  \\<tau>\n  \\<R>\\<^sub>C (id(left_forkee := r'', r'' := left_forkee)) id \\<E> = \\<E>\n  \\<R>\\<^sub>E (id(left_forkee := r'', r'' := left_forkee)) id e = e\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<sigma>' =\n  \\<sigma>'\n  \\<R>\\<^sub>S (id(left_forkee := r'', r'' := left_forkee)) id \\<tau>' =\n  \\<tau>'\n  \\<R>\\<^sub>C (id(left_forkee := r'', r'' := left_forkee)) id \\<E>' = \\<E>'\n  \\<R>\\<^sub>E (id(left_forkee := r'', r'' := left_forkee)) id e' = e'\n  \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id s\\<^sub>1 =\n  s\\<^sub>1\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  bij (id(left_forkee := r'', r'' := left_forkee))\n  r'' \\<noteq> left_forkee\n  r' \\<noteq> left_forkee\n  r \\<noteq> left_forkee\n  r'' \\<noteq> r\n  r'' \\<noteq> r'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n     (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]),\n      r'' \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n    s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n   (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n  s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G (id(left_forkee := r'', r'' := left_forkee)) id\n   (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))) =\n  s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (2 subgoals):\n 1. bij (id(left_forkee := r'', r'' := left_forkee))\n 2. bij id", "qed (simp add: bij_\\<alpha>)+"], ["proof (state)\nthis:\n  s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')) \\<approx> s\\<^sub>2'(r \n  \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (2 subgoals):\n 1. left_forkee = right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "using equiv left_convergence right_convergence"], ["proof (prove)\nusing this:\n  s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')) \\<approx> s\\<^sub>2'(r \n  \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>2(r' \\<mapsto> (\\<sigma>', \\<tau>', \\<E>' [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e')))\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>2'(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r'')]), r'' \n    \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e)))\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by blast"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case False"], ["proof (state)\nthis:\n  left_forkee \\<noteq> right_forkee\n\ngoal (1 subgoal):\n 1. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have right_forkee_fresh_left: \"right_forkee \\<notin> RID\\<^sub>G s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. right_forkee \\<notin> RID\\<^sub>G s\\<^sub>2", "using False \\<open>r \\<noteq> left_forkee\\<close> \\<open>r \\<noteq> right_forkee\\<close> fork(3) s\\<^sub>1_r"], ["proof (prove)\nusing this:\n  left_forkee \\<noteq> right_forkee\n  r \\<noteq> left_forkee\n  r \\<noteq> right_forkee\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n\ngoal (1 subgoal):\n 1. right_forkee \\<notin> RID\\<^sub>G s\\<^sub>2", "by (auto simp add: s\\<^sub>2 ID_distr_global_conditional, auto)"], ["proof (state)\nthis:\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "have left_forkee_fresh_right: \"left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'", "using False \\<open>r' \\<noteq> right_forkee\\<close> \\<open>r' \\<noteq> left_forkee\\<close> side fork(2)"], ["proof (prove)\nusing this:\n  left_forkee \\<noteq> right_forkee\n  r' \\<noteq> right_forkee\n  r' \\<noteq> left_forkee\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>1\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n\ngoal (1 subgoal):\n 1. left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'", "by (auto simp add: fork(1) ID_distr_global_conditional fun_upd_twist)"], ["proof (state)\nthis:\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. left_forkee \\<noteq> right_forkee \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof(rule exI[where x=\"s\\<^sub>2(r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee)\"],\n            rule exI[where x=\"s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee)\"],\n            rule SLC_commute)"], ["proof (state)\ngoal (3 subgoals):\n 1. s\\<^sub>2\n    (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee) =\n    s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee)\n 2. revision_step r' s\\<^sub>2\n     (s\\<^sub>2\n      (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee))\n 3. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))", "show \"s\\<^sub>2(r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee) = s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2\n    (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee) =\n    s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee)", "using False \\<open>r \\<noteq> right_forkee\\<close> \\<open>r' \\<noteq> left_forkee\\<close> \\<open>r' \\<noteq> right_forkee\\<close> fork(1) neq s\\<^sub>2"], ["proof (prove)\nusing this:\n  left_forkee \\<noteq> right_forkee\n  r \\<noteq> right_forkee\n  r' \\<noteq> left_forkee\n  r' \\<noteq> right_forkee\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>', \\<E>' [VE (Rid right_forkee)]), right_forkee \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))\n  r \\<noteq> r'\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. s\\<^sub>2\n    (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee) =\n    s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee)", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>2(r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee) =\n  s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee)\n\ngoal (2 subgoals):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2\n      (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee))\n 2. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))", "show \"revision_step r' s\\<^sub>2 (s\\<^sub>2(r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2\n      (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee))", "using fork(1-2) r'_unchanged_left revision_step.fork right_forkee_fresh_left"], ["proof (prove)\nusing this:\n  s\\<^sub>2' = s\\<^sub>1(r' \\<mapsto>\n  (\\<sigma>', \\<tau>', \\<E>' [VE (Rid right_forkee)]), right_forkee \n  \\<mapsto> (\\<sigma>';;\\<tau>', \\<epsilon>, e'))\n  s\\<^sub>1 r' = Some (\\<sigma>', \\<tau>', \\<E>' [Rfork e'])\n  s\\<^sub>2 r' = s\\<^sub>1 r'\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n  right_forkee \\<notin> RID\\<^sub>G s\\<^sub>2\n\ngoal (1 subgoal):\n 1. revision_step r' s\\<^sub>2\n     (s\\<^sub>2\n      (r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee))", "by auto"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>2\n   (s\\<^sub>2(r' := s\\<^sub>2' r', right_forkee := s\\<^sub>2' right_forkee))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))", "show \"revision_step r s\\<^sub>2' (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))", "using left_forkee_fresh_right r_unchanged_right revision_step.fork s\\<^sub>1_r s\\<^sub>2"], ["proof (prove)\nusing this:\n  left_forkee \\<notin> RID\\<^sub>G s\\<^sub>2'\n  s\\<^sub>2' r = s\\<^sub>1 r\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n  s\\<^sub>1 r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  s\\<^sub>2 = s\\<^sub>1(r \\<mapsto>\n  (\\<sigma>, \\<tau>, \\<E> [VE (Rid left_forkee)]), left_forkee \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. revision_step r s\\<^sub>2'\n     (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>2'\n   (s\\<^sub>2'(r := s\\<^sub>2 r, left_forkee := s\\<^sub>2 left_forkee))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join"], ["proof (state)\nthis:\n  s\\<^sub>2' =\n  (s\\<^sub>1(r' \\<mapsto>\n   (\\<sigma>_, \\<tau>_;;\\<tau>'_, \\<E>_ [VE (CV Unit)])))\n  (r'_ := None)\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = Some (\\<sigma>'_, \\<tau>'_, VE v_)\n\ngoal (2 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s\\<^sub>2' =\n                (s\\<^sub>1(r' \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r'a := None);\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')\n 2. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join, use join left_step assms(3-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "case join\\<^sub>\\<epsilon>"], ["proof (state)\nthis:\n  s\\<^sub>2' = \\<epsilon>\n  s\\<^sub>1 r' = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Rjoin (VE (Rid r'_))])\n  s\\<^sub>1 r'_ = None\n\ngoal (1 subgoal):\n 1. \\<And>\\<sigma> \\<tau> \\<E> r'a.\n       \\<lbrakk>s\\<^sub>2' = \\<epsilon>;\n        s\\<^sub>1 r' = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'a))]);\n        s\\<^sub>1 r'a = None\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n                             s\\<^sub>2 = s\\<^sub>3) \\<and>\n                            (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n                             s\\<^sub>2' = s\\<^sub>3')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (rule SLC_sym, rule SLC_join\\<^sub>\\<epsilon>, use join\\<^sub>\\<epsilon> left_step assms(3-5) in auto)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>The theorem\\<close>"], ["", "theorem strong_local_confluence:\n  assumes \n    l: \"revision_step r s\\<^sub>1 s\\<^sub>2\" and\n    r: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3) \\<and> (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "proof (cases \"r = r'\")"], ["proof (state)\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. r \\<noteq> r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case True"], ["proof (state)\nthis:\n  r = r'\n\ngoal (2 subgoals):\n 1. r = r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n 2. r \\<noteq> r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "thus ?thesis"], ["proof (prove)\nusing this:\n  r = r'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (metis l local_determinism r)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. r \\<noteq> r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<noteq> r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "case neq: False"], ["proof (state)\nthis:\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. r \\<noteq> r' \\<Longrightarrow>\n    \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "thus ?thesis"], ["proof (prove)\nusing this:\n  r \\<noteq> r'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n        s\\<^sub>2 = s\\<^sub>3) \\<and>\n       (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')", "by (cases rule: revision_stepE[OF l]) (auto simp add: assms SLC_app SLC_ifTrue\n    SLC_ifFalse SLC_new SLC_get SLC_set SLC_fork SLC_join SLC_join\\<^sub>\\<epsilon>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or>\n      s\\<^sub>2 = s\\<^sub>3) \\<and>\n     (revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3')\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Diagram Tiling\\<close>"], ["", "subsubsection \\<open>Strong local confluence diagrams\\<close>"], ["", "lemma SLC:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto> s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1 \\<leadsto> s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>= s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>= s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "from s\\<^sub>1s\\<^sub>2"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2", "obtain r where l: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        revision_step r s\\<^sub>1 s\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "from s\\<^sub>1s\\<^sub>2'"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2'", "obtain r' where r: \"revision_step r' s\\<^sub>1 s\\<^sub>2'\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        revision_step r' s\\<^sub>1 s\\<^sub>2' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "obtain s\\<^sub>3 s\\<^sub>3' where \n    s\\<^sub>3_eq_s\\<^sub>3': \"s\\<^sub>3 \\<approx> s\\<^sub>3'\" and\n    l_join: \"revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3\" and\n    r_join: \"revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>3 s\\<^sub>3'.\n        \\<lbrakk>s\\<^sub>3 \\<approx> s\\<^sub>3';\n         revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3;\n         revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n         s\\<^sub>2' = s\\<^sub>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using l r reach lid_inf rid_inf strong_local_confluence"], ["proof (prove)\nusing this:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n  revision_step r' s\\<^sub>1 s\\<^sub>2'\n  reachable s\\<^sub>1\n  infinite UNIV\n  infinite UNIV\n  \\<lbrakk>revision_step ?r ?s\\<^sub>1 ?s\\<^sub>2;\n   revision_step ?r' ?s\\<^sub>1 ?s\\<^sub>2'; reachable ?s\\<^sub>1;\n   infinite UNIV; infinite UNIV\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (revision_step ?r' ?s\\<^sub>2 s\\<^sub>3 \\<or>\n                        ?s\\<^sub>2 = s\\<^sub>3) \\<and>\n                       (revision_step ?r ?s\\<^sub>2' s\\<^sub>3' \\<or>\n                        ?s\\<^sub>2' = s\\<^sub>3')\n\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>3 s\\<^sub>3'.\n        \\<lbrakk>s\\<^sub>3 \\<approx> s\\<^sub>3';\n         revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3;\n         revision_step r s\\<^sub>2' s\\<^sub>3' \\<or>\n         s\\<^sub>2' = s\\<^sub>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by metis"], ["proof (state)\nthis:\n  s\\<^sub>3 \\<approx> s\\<^sub>3'\n  revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3\n  revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "have s\\<^sub>2s\\<^sub>3: \"s\\<^sub>2 \\<leadsto>\\<^sup>= s\\<^sub>3\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>=", "using l_join steps_def"], ["proof (prove)\nusing this:\n  revision_step r' s\\<^sub>2 s\\<^sub>3 \\<or> s\\<^sub>2 = s\\<^sub>3\n  [\\<leadsto>] = {(s, s') |s s'. \\<exists>r. revision_step r s s'}\n\ngoal (1 subgoal):\n 1. (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>=", "by auto"], ["proof (state)\nthis:\n  (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "have s\\<^sub>2's\\<^sub>3: \"s\\<^sub>2' \\<leadsto>\\<^sup>= s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "using r_join steps_def"], ["proof (prove)\nusing this:\n  revision_step r s\\<^sub>2' s\\<^sub>3' \\<or> s\\<^sub>2' = s\\<^sub>3'\n  [\\<leadsto>] = {(s, s') |s s'. \\<exists>r. revision_step r s s'}\n\ngoal (1 subgoal):\n 1. (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "by auto"], ["proof (state)\nthis:\n  (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "using s\\<^sub>2's\\<^sub>3 s\\<^sub>2s\\<^sub>3 s\\<^sub>3_eq_s\\<^sub>3'"], ["proof (prove)\nusing this:\n  (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>=\n  s\\<^sub>3 \\<approx> s\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "by blast"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n     (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma SLC_top_relaxed:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>= s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1 \\<leadsto> s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows\n    \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>= s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>= s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "have 1: \"s\\<^sub>1 \\<leadsto> s\\<^sub>2 \\<Longrightarrow> s\\<^sub>1 \\<leadsto> s\\<^sub>2' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>1 \\<leadsto> s\\<^sub>2;\n     s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                         s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                         (s\\<^sub>2, s\\<^sub>3)\n                         \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                         (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "using SLC lid_inf reach rid_inf"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s\\<^sub>1 \\<leadsto> ?s\\<^sub>2;\n   ?s\\<^sub>1 \\<leadsto> ?s\\<^sub>2'; reachable ?s\\<^sub>1; infinite UNIV;\n   infinite UNIV\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (?s\\<^sub>2, s\\<^sub>3)\n                       \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                       (?s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n  infinite UNIV\n  reachable s\\<^sub>1\n  infinite UNIV\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>1 \\<leadsto> s\\<^sub>2;\n     s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                         s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                         (s\\<^sub>2, s\\<^sub>3)\n                         \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                         (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>s\\<^sub>1 \\<leadsto> s\\<^sub>2;\n   s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (s\\<^sub>2, s\\<^sub>3)\n                       \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "have 2: \"s\\<^sub>1 = s\\<^sub>2 \\<Longrightarrow> s\\<^sub>1 \\<leadsto> s\\<^sub>2' \\<Longrightarrow> ?thesis\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>s\\<^sub>1 = s\\<^sub>2; s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n    \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                         s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                         (s\\<^sub>2, s\\<^sub>3)\n                         \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                         (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "by (rule exI[where x=\"s\\<^sub>2'\"], rule exI[where x=\"s\\<^sub>2'\"]) (auto simp add: \\<alpha>\\<beta>_refl)"], ["proof (state)\nthis:\n  \\<lbrakk>s\\<^sub>1 = s\\<^sub>2; s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (s\\<^sub>2, s\\<^sub>3)\n                       \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "using assms 1 2"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>]\\<^sup>=\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2'\n  reachable s\\<^sub>1\n  infinite UNIV\n  infinite UNIV\n  \\<lbrakk>s\\<^sub>1 \\<leadsto> s\\<^sub>2;\n   s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (s\\<^sub>2, s\\<^sub>3)\n                       \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n  \\<lbrakk>s\\<^sub>1 = s\\<^sub>2; s\\<^sub>1 \\<leadsto> s\\<^sub>2'\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       (s\\<^sub>2, s\\<^sub>3)\n                       \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n                       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n       (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     (s\\<^sub>2, s\\<^sub>3) \\<in> [\\<leadsto>]\\<^sup>= \\<and>\n     (s\\<^sub>2', s\\<^sub>3') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Mimicking diagrams\\<close>"], ["", "declare bind_eq_None_conv [simp]"], ["", "declare bind_eq_Some_conv [simp]"], ["", "lemma in_renamed_in_unlabelled_val: \n  \"bij \\<alpha> \\<Longrightarrow> (\\<alpha> r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V \\<alpha> \\<beta> v)) = (r \\<in> RID\\<^sub>V v)\"\n  \"bij \\<beta> \\<Longrightarrow> (\\<beta> l \\<in> LID\\<^sub>V (\\<R>\\<^sub>V \\<alpha> \\<beta> v)) = (l \\<in> LID\\<^sub>V v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bij \\<alpha> \\<Longrightarrow>\n     (\\<alpha> r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V \\<alpha> \\<beta> v)) =\n     (r \\<in> RID\\<^sub>V v)) &&&\n    (bij \\<beta> \\<Longrightarrow>\n     (\\<beta> l \\<in> LID\\<^sub>V (\\<R>\\<^sub>V \\<alpha> \\<beta> v)) =\n     (l \\<in> LID\\<^sub>V v))", "by (auto simp add: bij_is_inj inj_image_mem_iff val.set_map(1-2))"], ["", "lemma in_renamed_in_unlabelled_expr:\n  \"bij \\<alpha> \\<Longrightarrow> (\\<alpha> r \\<in> RID\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> v)) = (r \\<in> RID\\<^sub>E v)\"\n  \"bij \\<beta> \\<Longrightarrow> (\\<beta> l \\<in> LID\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> v)) = (l \\<in> LID\\<^sub>E v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (bij \\<alpha> \\<Longrightarrow>\n     (\\<alpha> r \\<in> RID\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> v)) =\n     (r \\<in> RID\\<^sub>E v)) &&&\n    (bij \\<beta> \\<Longrightarrow>\n     (\\<beta> l \\<in> LID\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> v)) =\n     (l \\<in> LID\\<^sub>E v))", "by (auto simp add: bij_is_inj inj_image_mem_iff expr.set_map(1-2))"], ["", "lemma in_renamed_in_unlabelled_store:\n  assumes \n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows\n    \"(\\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) = (r \\<in> RID\\<^sub>S \\<sigma>)\"\n    \"(\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) = (l \\<in> LID\\<^sub>S \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> r\n     \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (r \\<in> RID\\<^sub>S \\<sigma>) &&&\n    (\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (l \\<in> LID\\<^sub>S \\<sigma>)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<alpha> r\n     \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (r \\<in> RID\\<^sub>S \\<sigma>)\n 2. (\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (l \\<in> LID\\<^sub>S \\<sigma>)", "show \"(\\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) = (r \\<in> RID\\<^sub>S \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> r\n     \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (r \\<in> RID\\<^sub>S \\<sigma>)", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> r\n    \\<in> RID\\<^sub>S\n           (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>S \\<sigma>\n 2. r \\<in> RID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "assume \"\\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (state)\nthis:\n  \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<alpha> r\n    \\<in> RID\\<^sub>S\n           (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>S \\<sigma>\n 2. r \\<in> RID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "thus \"r \\<in> RID\\<^sub>S \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>S \\<sigma>", "proof (rule RID\\<^sub>SE)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v;\n        \\<alpha> r \\<in> RID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>S \\<sigma>", "fix l v"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v;\n        \\<alpha> r \\<in> RID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>S \\<sigma>", "assume map: \"\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v\" and \\<alpha>r: \"\\<alpha> r \\<in> RID\\<^sub>V v\""], ["proof (state)\nthis:\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v\n  \\<alpha> r \\<in> RID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. \\<And>l v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v;\n        \\<alpha> r \\<in> RID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>S \\<sigma>", "hence \"\\<sigma> (inv \\<beta> l) = Some (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\""], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v\n  \\<alpha> r \\<in> RID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. \\<sigma> (inv \\<beta> l) =\n    Some (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)", "using bij_\\<alpha> bij_\\<beta>"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v\n  \\<alpha> r \\<in> RID\\<^sub>V v\n  bij \\<alpha>\n  bij \\<beta>\n\ngoal (1 subgoal):\n 1. \\<sigma> (inv \\<beta> l) =\n    Some (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)", "by (auto simp add: bij_is_inj)"], ["proof (state)\nthis:\n  \\<sigma> (inv \\<beta> l) =\n  Some (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\n\ngoal (1 subgoal):\n 1. \\<And>l v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v;\n        \\<alpha> r \\<in> RID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>S \\<sigma>", "have \"r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)", "using bij_\\<alpha> bij_\\<beta> \\<alpha>r map"], ["proof (prove)\nusing this:\n  bij \\<alpha>\n  bij \\<beta>\n  \\<alpha> r \\<in> RID\\<^sub>V v\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)", "by (auto simp add: bij_is_inj in_renamed_in_unlabelled_val(1))"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\n\ngoal (1 subgoal):\n 1. \\<And>l v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l = Some v;\n        \\<alpha> r \\<in> RID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>S \\<sigma>", "show \"r \\<in> RID\\<^sub>S \\<sigma>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>S \\<sigma>", "using \\<open>\\<sigma> (inv \\<beta> l) = Some (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\\<close> \\<open>r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\\<close>"], ["proof (prove)\nusing this:\n  \\<sigma> (inv \\<beta> l) =\n  Some (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\n  r \\<in> RID\\<^sub>V (\\<R>\\<^sub>V (inv \\<alpha>) (inv \\<beta>) v)\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>S \\<sigma>", "by blast"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>S \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "assume \"r \\<in> RID\\<^sub>S \\<sigma>\""], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "thus \"\\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (prove)\nusing this:\n  r \\<in> RID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "by (metis (mono_tags, lifting) RID\\<^sub>SE RID\\<^sub>SI bij_\\<alpha> bij_\\<beta> fun_upd_same fun_upd_triv \n      in_renamed_in_unlabelled_val(1) renaming_distr_store)"], ["proof (state)\nthis:\n  \\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<alpha> r \\<in> RID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n  (r \\<in> RID\\<^sub>S \\<sigma>)\n\ngoal (1 subgoal):\n 1. (\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (l \\<in> LID\\<^sub>S \\<sigma>)", "show \"(\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) = (l \\<in> LID\\<^sub>S \\<sigma>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n    (l \\<in> LID\\<^sub>S \\<sigma>)", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>S\n           (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>S \\<sigma>\n 2. l \\<in> LID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "assume \"\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (state)\nthis:\n  \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>S\n           (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>S \\<sigma>\n 2. l \\<in> LID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "thus \"l \\<in> LID\\<^sub>S \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma>", "proof (rule LID\\<^sub>SE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>S \\<sigma>\n 2. \\<And>l' v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v;\n        \\<beta> l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> l \\<in> LID\\<^sub>S \\<sigma>", "assume \"\\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (state)\nthis:\n  \\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>S \\<sigma>\n 2. \\<And>l' v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v;\n        \\<beta> l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> l \\<in> LID\\<^sub>S \\<sigma>", "thus \"l \\<in> LID\\<^sub>S \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma>", "by (auto simp add: LID\\<^sub>SI(1) bij_\\<beta> bijection.intro bijection.inv_left)"], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v;\n        \\<beta> l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> l \\<in> LID\\<^sub>S \\<sigma>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v;\n        \\<beta> l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> l \\<in> LID\\<^sub>S \\<sigma>", "fix v l'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v;\n        \\<beta> l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> l \\<in> LID\\<^sub>S \\<sigma>", "assume \"\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v\" \"\\<beta> l \\<in> LID\\<^sub>V v\""], ["proof (state)\nthis:\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v\n  \\<beta> l \\<in> LID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v;\n        \\<beta> l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> l \\<in> LID\\<^sub>S \\<sigma>", "thus \"l \\<in> LID\\<^sub>S \\<sigma>\""], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v\n  \\<beta> l \\<in> LID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma>", "using bij_\\<beta>"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma> l' = Some v\n  \\<beta> l \\<in> LID\\<^sub>V v\n  bij \\<beta>\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma>", "by (auto simp add: LID\\<^sub>SI(2) in_renamed_in_unlabelled_val(2))"], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>S \\<sigma>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "assume \"l \\<in> LID\\<^sub>S \\<sigma>\""], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>S \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "thus \"\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (prove)\nusing this:\n  l \\<in> LID\\<^sub>S \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "proof (rule LID\\<^sub>SE)"], ["proof (state)\ngoal (2 subgoals):\n 1. l \\<in> dom \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n 2. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "assume \"l \\<in> dom \\<sigma>\""], ["proof (state)\nthis:\n  l \\<in> dom \\<sigma>\n\ngoal (2 subgoals):\n 1. l \\<in> dom \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n 2. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "hence \"\\<exists>\\<sigma>' v. \\<sigma> = (\\<sigma>'(l \\<mapsto> v))\""], ["proof (prove)\nusing this:\n  l \\<in> dom \\<sigma>\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>' v. \\<sigma> = \\<sigma>'(l \\<mapsto> v)", "by fastforce"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>' v. \\<sigma> = \\<sigma>'(l \\<mapsto> v)\n\ngoal (2 subgoals):\n 1. l \\<in> dom \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n 2. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "hence \"\\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>' v. \\<sigma> = \\<sigma>'(l \\<mapsto> v)\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "using bij_\\<beta>"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>' v. \\<sigma> = \\<sigma>'(l \\<mapsto> v)\n  bij \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  \\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (2 subgoals):\n 1. l \\<in> dom \\<sigma> \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n 2. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "thus \"\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<beta> l \\<in> dom (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "by auto"], ["proof (state)\nthis:\n  \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "fix v l'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "assume \"\\<sigma> l' = Some v\" and l_in_v: \"l \\<in> LID\\<^sub>V v\""], ["proof (state)\nthis:\n  \\<sigma> l' = Some v\n  l \\<in> LID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "hence \"\\<exists>\\<sigma>'. \\<sigma> = (\\<sigma>'(l' \\<mapsto> v))\""], ["proof (prove)\nusing this:\n  \\<sigma> l' = Some v\n  l \\<in> LID\\<^sub>V v\n\ngoal (1 subgoal):\n 1. \\<exists>\\<sigma>'. \\<sigma> = \\<sigma>'(l' \\<mapsto> v)", "by force"], ["proof (state)\nthis:\n  \\<exists>\\<sigma>'. \\<sigma> = \\<sigma>'(l' \\<mapsto> v)\n\ngoal (1 subgoal):\n 1. \\<And>l' v.\n       \\<lbrakk>\\<sigma> l' = Some v; l \\<in> LID\\<^sub>V v\\<rbrakk>\n       \\<Longrightarrow> \\<beta> l\n                         \\<in> LID\\<^sub>S\n                                (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "thus \"\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\""], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>'. \\<sigma> = \\<sigma>'(l' \\<mapsto> v)\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "using l_in_v bij_\\<beta>"], ["proof (prove)\nusing this:\n  \\<exists>\\<sigma>'. \\<sigma> = \\<sigma>'(l' \\<mapsto> v)\n  l \\<in> LID\\<^sub>V v\n  bij \\<beta>\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)", "by (auto simp add: LID\\<^sub>SI(2) in_renamed_in_unlabelled_val(2))"], ["proof (state)\nthis:\n  \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<beta> l \\<in> LID\\<^sub>S (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>)) =\n  (l \\<in> LID\\<^sub>S \\<sigma>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma in_renamed_in_unlabelled_local:\n  assumes\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows\n    \"(\\<alpha> r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L \\<alpha> \\<beta> ls)) = (r \\<in> RID\\<^sub>L ls)\"\n    \"(\\<beta> l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L \\<alpha> \\<beta> ls)) = (l \\<in> LID\\<^sub>L ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L \\<alpha> \\<beta> ls)) =\n    (r \\<in> RID\\<^sub>L ls) &&&\n    (\\<beta> l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L \\<alpha> \\<beta> ls)) =\n    (l \\<in> LID\\<^sub>L ls)", "by (cases ls, simp add: assms in_renamed_in_unlabelled_expr in_renamed_in_unlabelled_store)+"], ["", "lemma in_renamed_in_unlabelled_global:\n  assumes\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows\n    \"(\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) = (r \\<in> RID\\<^sub>G s)\"\n    \"(\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) = (l \\<in> LID\\<^sub>G s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (r \\<in> RID\\<^sub>G s) &&&\n    (\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (l \\<in> LID\\<^sub>G s)", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. (\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (r \\<in> RID\\<^sub>G s)\n 2. (\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (l \\<in> LID\\<^sub>G s)", "show \"(\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) = (r \\<in> RID\\<^sub>G s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (r \\<in> RID\\<^sub>G s)", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> r\n    \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>G s\n 2. r \\<in> RID\\<^sub>G s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "assume \"\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (state)\nthis:\n  \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (2 subgoals):\n 1. \\<alpha> r\n    \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>G s\n 2. r \\<in> RID\\<^sub>G s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "thus \"r \\<in> RID\\<^sub>G s\""], ["proof (prove)\nusing this:\n  \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s", "proof (rule RID\\<^sub>GE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>G s\n 2. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "assume \"\\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (state)\nthis:\n  \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (2 subgoals):\n 1. \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>G s\n 2. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "hence \"r \\<in> dom s\""], ["proof (prove)\nusing this:\n  \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (1 subgoal):\n 1. r \\<in> dom s", "by (metis bij_\\<alpha> domIff fun_upd_same fun_upd_triv renaming_distr_global(2))"], ["proof (state)\nthis:\n  r \\<in> dom s\n\ngoal (2 subgoals):\n 1. \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    r \\<in> RID\\<^sub>G s\n 2. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "thus \"r \\<in> RID\\<^sub>G s\""], ["proof (prove)\nusing this:\n  r \\<in> dom s\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s", "by auto"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "fix r' ls"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "assume \\<R>sr': \"\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls\" and \\<alpha>r: \"\\<alpha> r \\<in> RID\\<^sub>L ls\""], ["proof (state)\nthis:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls\n  \\<alpha> r \\<in> RID\\<^sub>L ls\n\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "have s_inv_\\<alpha>r': \"s (inv \\<alpha> r') = Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "have \"inv \\<alpha> r' \\<in> dom s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inv \\<alpha> r' \\<in> dom s", "using \\<R>sr'"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls\n\ngoal (1 subgoal):\n 1. inv \\<alpha> r' \\<in> dom s", "by auto"], ["proof (state)\nthis:\n  inv \\<alpha> r' \\<in> dom s\n\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "then"], ["proof (chain)\npicking this:\n  inv \\<alpha> r' \\<in> dom s", "obtain ls' where s_inv_\\<alpha>r: \"s (inv \\<alpha> r') = Some ls'\""], ["proof (prove)\nusing this:\n  inv \\<alpha> r' \\<in> dom s\n\ngoal (1 subgoal):\n 1. (\\<And>ls'.\n        s (inv \\<alpha> r') = Some ls' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s (inv \\<alpha> r') = Some ls'\n\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "hence \"\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some (\\<R>\\<^sub>L \\<alpha> \\<beta> ls')\""], ["proof (prove)\nusing this:\n  s (inv \\<alpha> r') = Some ls'\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G \\<alpha> \\<beta> s r' =\n    Some (\\<R>\\<^sub>L \\<alpha> \\<beta> ls')", "by simp"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r' =\n  Some (\\<R>\\<^sub>L \\<alpha> \\<beta> ls')\n\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "hence \"ls = (\\<R>\\<^sub>L \\<alpha> \\<beta> ls')\""], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r' =\n  Some (\\<R>\\<^sub>L \\<alpha> \\<beta> ls')\n\ngoal (1 subgoal):\n 1. ls = \\<R>\\<^sub>L \\<alpha> \\<beta> ls'", "using \\<R>sr'"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r' =\n  Some (\\<R>\\<^sub>L \\<alpha> \\<beta> ls')\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls\n\ngoal (1 subgoal):\n 1. ls = \\<R>\\<^sub>L \\<alpha> \\<beta> ls'", "by auto"], ["proof (state)\nthis:\n  ls = \\<R>\\<^sub>L \\<alpha> \\<beta> ls'\n\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "thus ?thesis"], ["proof (prove)\nusing this:\n  ls = \\<R>\\<^sub>L \\<alpha> \\<beta> ls'\n\ngoal (1 subgoal):\n 1. s (inv \\<alpha> r') =\n    Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "by (metis \\<R>\\<^sub>L_inv s_inv_\\<alpha>r bij_\\<alpha> bij_\\<beta>)"], ["proof (state)\nthis:\n  s (inv \\<alpha> r') = Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  s (inv \\<alpha> r') = Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "have r_in: \"r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "by (metis bij_\\<alpha> bij_\\<beta> bij_imp_bij_inv bijection.intro bijection.inv_left in_renamed_in_unlabelled_local(1) \\<alpha>r)"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r' = Some ls;\n        \\<alpha> r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> r \\<in> RID\\<^sub>G s", "show \"r \\<in> RID\\<^sub>G s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s", "using r_in s_inv_\\<alpha>r'"], ["proof (prove)\nusing this:\n  r \\<in> RID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n  s (inv \\<alpha> r') = Some (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s", "by blast"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>G s\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "assume \"r \\<in> RID\\<^sub>G s\""], ["proof (state)\nthis:\n  r \\<in> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. r \\<in> RID\\<^sub>G s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "thus \"\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\nusing this:\n  r \\<in> RID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "proof (rule RID\\<^sub>GE)"], ["proof (state)\ngoal (2 subgoals):\n 1. r \\<in> dom s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n 2. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "assume \"r \\<in> dom s\""], ["proof (state)\nthis:\n  r \\<in> dom s\n\ngoal (2 subgoals):\n 1. r \\<in> dom s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n 2. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "hence \"\\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\nusing this:\n  r \\<in> dom s\n\ngoal (1 subgoal):\n 1. \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "by (metis (mono_tags, lifting) bij_\\<alpha> domD domI fun_upd_same fun_upd_triv renaming_distr_global(1))"], ["proof (state)\nthis:\n  \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (2 subgoals):\n 1. r \\<in> dom s \\<Longrightarrow>\n    \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n 2. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "thus \"\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\nusing this:\n  \\<alpha> r \\<in> dom (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (1 subgoal):\n 1. \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "by auto"], ["proof (state)\nthis:\n  \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "fix r' ls"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "assume \"s r' = Some ls\" \"r \\<in> RID\\<^sub>L ls\""], ["proof (state)\nthis:\n  s r' = Some ls\n  r \\<in> RID\\<^sub>L ls\n\ngoal (1 subgoal):\n 1. \\<And>r' ls.\n       \\<lbrakk>s r' = Some ls; r \\<in> RID\\<^sub>L ls\\<rbrakk>\n       \\<Longrightarrow> \\<alpha> r\n                         \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "thus \"\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\nusing this:\n  s r' = Some ls\n  r \\<in> RID\\<^sub>L ls\n\ngoal (1 subgoal):\n 1. \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "by (metis ID_distr_global(1) UnI2 bij_\\<alpha> bij_\\<beta> fun_upd_triv in_renamed_in_unlabelled_local(1) insertI2 renaming_distr_global(1))"], ["proof (state)\nthis:\n  \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<alpha> r \\<in> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n  (r \\<in> RID\\<^sub>G s)\n\ngoal (1 subgoal):\n 1. (\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (l \\<in> LID\\<^sub>G s)", "show \"(\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) = (l \\<in> LID\\<^sub>G s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n    (l \\<in> LID\\<^sub>G s)", "proof (rule iffI)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>G s\n 2. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "assume \"\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (state)\nthis:\n  \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>G s\n 2. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "from this"], ["proof (chain)\npicking this:\n  \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "obtain r ls where Rs_ls: \"\\<R>\\<^sub>G \\<alpha> \\<beta> s r = Some ls\" and \\<beta>l_in_ls: \"\\<beta> l \\<in> LID\\<^sub>L ls\""], ["proof (prove)\nusing this:\n  \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (1 subgoal):\n 1. (\\<And>r ls.\n        \\<lbrakk>\\<R>\\<^sub>G \\<alpha> \\<beta> s r = Some ls;\n         \\<beta> l \\<in> LID\\<^sub>L ls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r = Some ls\n  \\<beta> l \\<in> LID\\<^sub>L ls\n\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>G s\n 2. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "hence \"l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\""], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s r = Some ls\n  \\<beta> l \\<in> LID\\<^sub>L ls\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)", "by (metis bij_\\<alpha> bij_\\<beta> bij_imp_bij_inv bijection.intro bijection.inv_left in_renamed_in_unlabelled_local(2))"], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>G s\n 2. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "hence \"l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G (inv \\<alpha>) (inv \\<beta>) (\\<R>\\<^sub>G \\<alpha> \\<beta> s))\""], ["proof (prove)\nusing this:\n  l \\<in> LID\\<^sub>L (\\<R>\\<^sub>L (inv \\<alpha>) (inv \\<beta>) ls)\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G\n             (\\<R>\\<^sub>G (inv \\<alpha>) (inv \\<beta>)\n               (\\<R>\\<^sub>G \\<alpha> \\<beta> s))", "by (metis (mono_tags, lifting) LID\\<^sub>GI Rs_ls bij_\\<alpha> bij_imp_bij_inv fun_upd_idem_iff renaming_distr_global(1))"], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>G\n           (\\<R>\\<^sub>G (inv \\<alpha>) (inv \\<beta>)\n             (\\<R>\\<^sub>G \\<alpha> \\<beta> s))\n\ngoal (2 subgoals):\n 1. \\<beta> l\n    \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s) \\<Longrightarrow>\n    l \\<in> LID\\<^sub>G s\n 2. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "thus \"l \\<in> LID\\<^sub>G s\""], ["proof (prove)\nusing this:\n  l \\<in> LID\\<^sub>G\n           (\\<R>\\<^sub>G (inv \\<alpha>) (inv \\<beta>)\n             (\\<R>\\<^sub>G \\<alpha> \\<beta> s))\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G s", "using bij_\\<alpha> bij_\\<beta>"], ["proof (prove)\nusing this:\n  l \\<in> LID\\<^sub>G\n           (\\<R>\\<^sub>G (inv \\<alpha>) (inv \\<beta>)\n             (\\<R>\\<^sub>G \\<alpha> \\<beta> s))\n  bij \\<alpha>\n  bij \\<beta>\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G s", "by (metis \\<R>\\<^sub>G_inv)"], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "assume \"l \\<in> LID\\<^sub>G s\""], ["proof (state)\nthis:\n  l \\<in> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "then"], ["proof (chain)\npicking this:\n  l \\<in> LID\\<^sub>G s", "obtain r s' ls where \"s = (s'(r \\<mapsto> ls))\" \"l \\<in> LID\\<^sub>L ls\""], ["proof (prove)\nusing this:\n  l \\<in> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. (\\<And>s' r ls.\n        \\<lbrakk>s = s'(r \\<mapsto> ls); l \\<in> LID\\<^sub>L ls\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis LID\\<^sub>GE fun_upd_triv)"], ["proof (state)\nthis:\n  s = s'(r \\<mapsto> ls)\n  l \\<in> LID\\<^sub>L ls\n\ngoal (1 subgoal):\n 1. l \\<in> LID\\<^sub>G s \\<Longrightarrow>\n    \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "thus \"\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\nusing this:\n  s = s'(r \\<mapsto> ls)\n  l \\<in> LID\\<^sub>L ls\n\ngoal (1 subgoal):\n 1. \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "by (simp add: bij_\\<alpha> bij_\\<beta> in_renamed_in_unlabelled_local(2))"], ["proof (state)\nthis:\n  \\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<beta> l \\<in> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)) =\n  (l \\<in> LID\\<^sub>G s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mimicking:\n  assumes\n    step: \"revision_step r s s'\" and\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\"\n  shows \"revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s) (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "proof (use step in \\<open>cases rule: revision_stepE\\<close>)"], ["proof (state)\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "case app"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (9 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> x e v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>, \\<E> [subst (VE v) x e]));\n        s r =\n        Some\n         (\\<sigma>, \\<tau>, \\<E> [Apply (VE (Lambda x e)) (VE v)])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 9. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "then"], ["proof (chain)\npicking this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])", "show ?thesis"], ["proof (prove)\nusing this:\n  s' = s(r \\<mapsto> (\\<sigma>_, \\<tau>_, \\<E>_ [subst (VE v_) x_ e_]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Apply (VE (Lambda x_ e_)) (VE v_)])\n\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "by (auto simp add: bij_\\<alpha> bij_\\<beta> bijection.intro bijection.inv_left renaming_distr_subst)"], ["proof (state)\nthis:\n  revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n   (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "next"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "case (new _ _ _ _ l)"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "have \\<beta>l_fresh: \"\\<beta> l \\<notin> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<beta> l \\<notin> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "by (simp add: bij_\\<alpha> bij_\\<beta> in_renamed_in_unlabelled_global(2) new(3))"], ["proof (state)\nthis:\n  \\<beta> l \\<notin> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (8 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> v l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (Loc l)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ref (VE v)]);\n        l \\<notin> LID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 8. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "using \\<beta>l_fresh new"], ["proof (prove)\nusing this:\n  \\<beta> l \\<notin> LID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n  s' = s(r \\<mapsto>\n  (\\<sigma>_, \\<tau>_(l \\<mapsto> v_), \\<E>_ [VE (Loc l)]))\n  s r = Some (\\<sigma>_, \\<tau>_, \\<E>_ [Ref (VE v_)])\n  l \\<notin> LID\\<^sub>G s\n\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "by (auto simp add: bij_\\<alpha> bij_\\<beta> bijection.intro bijection.inv_left)"], ["proof (state)\nthis:\n  revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n   (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "case (fork \\<sigma> \\<tau> \\<E> e r')"], ["proof (state)\nthis:\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n  r' \\<notin> RID\\<^sub>G s\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "have \\<alpha>r'_fresh: \"\\<alpha> r' \\<notin> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<alpha> r' \\<notin> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)", "by (simp add: bij_\\<alpha> bij_\\<beta> in_renamed_in_unlabelled_global(1) fork(3))"], ["proof (state)\nthis:\n  \\<alpha> r' \\<notin> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "have s_r_as_upd: \"s = (s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e])))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))", "using fork(2)"], ["proof (prove)\nusing this:\n  s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e])\n\ngoal (1 subgoal):\n 1. s = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))", "by auto"], ["proof (state)\nthis:\n  s = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [Rfork e]))\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "have src: \"\\<R>\\<^sub>G \\<alpha> \\<beta> s (\\<alpha> r) = Some (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>, \\<R>\\<^sub>S \\<alpha> \\<beta> \\<tau>, (\\<R>\\<^sub>C \\<alpha> \\<beta> \\<E>) [Rfork (\\<R>\\<^sub>E \\<alpha> \\<beta> e)])\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G \\<alpha> \\<beta> s (\\<alpha> r) =\n    Some\n     (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>,\n      \\<R>\\<^sub>S \\<alpha> \\<beta> \\<tau>,\n      (\\<R>\\<^sub>C \\<alpha> \\<beta> \\<E>)\n       [Rfork (\\<R>\\<^sub>E \\<alpha> \\<beta> e)])", "by (subst s_r_as_upd, simp add: bij_\\<alpha>)"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s (\\<alpha> r) =\n  Some\n   (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>,\n    \\<R>\\<^sub>S \\<alpha> \\<beta> \\<tau>,\n    (\\<R>\\<^sub>C \\<alpha> \\<beta> \\<E>)\n     [Rfork (\\<R>\\<^sub>E \\<alpha> \\<beta> e)])\n\ngoal (7 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> e r'.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]),\n                r' \\<mapsto> (\\<sigma>;;\\<tau>, \\<epsilon>, e));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rfork e]);\n        r' \\<notin> RID\\<^sub>G s\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 7. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "using \\<alpha>r'_fresh src revision_step.fork fork(1) bij_\\<alpha>"], ["proof (prove)\nusing this:\n  \\<alpha> r' \\<notin> RID\\<^sub>G (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s (\\<alpha> r) =\n  Some\n   (\\<R>\\<^sub>S \\<alpha> \\<beta> \\<sigma>,\n    \\<R>\\<^sub>S \\<alpha> \\<beta> \\<tau>,\n    (\\<R>\\<^sub>C \\<alpha> \\<beta> \\<E>)\n     [Rfork (\\<R>\\<^sub>E \\<alpha> \\<beta> e)])\n  \\<lbrakk>?s ?r = Some (?\\<sigma>, ?\\<tau>, ?\\<E> [Rfork ?e]);\n   ?r' \\<notin> RID\\<^sub>G ?s\\<rbrakk>\n  \\<Longrightarrow> revision_step ?r ?s\n                     (?s(?r \\<mapsto>\n                      (?\\<sigma>, ?\\<tau>, ?\\<E> [VE (Rid ?r')]), ?r' \n                      \\<mapsto> (?\\<sigma>;;?\\<tau>, \\<epsilon>, ?e)))\n  s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [VE (Rid r')]), r' \\<mapsto>\n  (\\<sigma>;;\\<tau>, \\<epsilon>, e))\n  bij \\<alpha>\n\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "by auto"], ["proof (state)\nthis:\n  revision_step (\\<alpha> r) (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n   (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n\ngoal (6 subgoals):\n 1. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e1]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV T)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 2. \\<And>\\<sigma> \\<tau> \\<E> e1 e2.\n       \\<lbrakk>s' = s(r \\<mapsto> (\\<sigma>, \\<tau>, \\<E> [e2]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Ite (VE (CV F)) e1 e2])\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 3. \\<And>\\<sigma> \\<tau> \\<E> l.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>,\n                 \\<E>\n                  [VE (the (if \\<tau> l = None then \\<sigma> l\n                            else \\<tau> l))]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Read (VE (Loc l))]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 4. \\<And>\\<sigma> \\<tau> \\<E> l v.\n       \\<lbrakk>s' = s(r \\<mapsto>\n                (\\<sigma>, \\<tau>(l \\<mapsto> v), \\<E> [VE (CV Unit)]));\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Assign (VE (Loc l)) (VE v)]);\n        l \\<in> dom (\\<sigma>;;\\<tau>)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 5. \\<And>\\<sigma> \\<tau> \\<E> r' \\<sigma>' \\<tau>' v.\n       \\<lbrakk>s' =\n                (s(r \\<mapsto>\n                 (\\<sigma>, \\<tau>;;\\<tau>', \\<E> [VE (CV Unit)])))\n                (r' := None);\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = Some (\\<sigma>', \\<tau>', VE v)\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')\n 6. \\<And>\\<sigma> \\<tau> \\<E> r'.\n       \\<lbrakk>s' = \\<epsilon>;\n        s r = Some (\\<sigma>, \\<tau>, \\<E> [Rjoin (VE (Rid r'))]);\n        s r' = None\\<rbrakk>\n       \\<Longrightarrow> revision_step (\\<alpha> r)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s)\n                          (\\<R>\\<^sub>G \\<alpha> \\<beta> s')", "qed (auto simp add: bij_\\<alpha> bij_\\<beta> bijection.intro bijection.inv_left)"], ["", "lemma mimic_single_step:\n  assumes\n    s\\<^sub>1s\\<^sub>1': \"s\\<^sub>1 \\<approx> s\\<^sub>1'\" and\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto> s\\<^sub>2\"\n  shows \"\\<exists>s\\<^sub>2'. (s\\<^sub>2 \\<approx> s\\<^sub>2') \\<and> s\\<^sub>1' \\<leadsto> s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "from s\\<^sub>1s\\<^sub>1'"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<approx> s\\<^sub>1'", "obtain \\<alpha> \\<beta> where \n    bij_\\<alpha>: \"bij \\<alpha>\" and \n    bij_\\<beta>: \"bij \\<beta>\" and\n    R: \"\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> \\<beta>.\n        \\<lbrakk>bij \\<alpha>; bij \\<beta>;\n         \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bij \\<alpha>\n  bij \\<beta>\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "from s\\<^sub>1s\\<^sub>2"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2", "obtain r where step: \"revision_step r s\\<^sub>1 s\\<^sub>2\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>r.\n        revision_step r s\\<^sub>1 s\\<^sub>2 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  revision_step r s\\<^sub>1 s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "have mirrored_step: \"revision_step (\\<alpha> r) s\\<^sub>1' (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) s\\<^sub>1'\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)", "using R bij_\\<alpha> bij_\\<beta> step mimicking"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\n  bij \\<alpha>\n  bij \\<beta>\n  revision_step r s\\<^sub>1 s\\<^sub>2\n  \\<lbrakk>revision_step ?r ?s ?s'; bij ?\\<alpha>; bij ?\\<beta>\\<rbrakk>\n  \\<Longrightarrow> revision_step (?\\<alpha> ?r)\n                     (\\<R>\\<^sub>G ?\\<alpha> ?\\<beta> ?s)\n                     (\\<R>\\<^sub>G ?\\<alpha> ?\\<beta> ?s')\n\ngoal (1 subgoal):\n 1. revision_step (\\<alpha> r) s\\<^sub>1'\n     (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)", "by auto"], ["proof (state)\nthis:\n  revision_step (\\<alpha> r) s\\<^sub>1'\n   (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "have eq: \"s\\<^sub>2 \\<approx> (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<approx> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2", "using bij_\\<alpha> bij_\\<beta>"], ["proof (prove)\nusing this:\n  bij \\<alpha>\n  bij \\<beta>\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<approx> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>2 \\<approx> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "have s\\<^sub>1's\\<^sub>2': \"s\\<^sub>1' \\<leadsto> (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>1' \\<leadsto> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2", "using mirrored_step"], ["proof (prove)\nusing this:\n  revision_step (\\<alpha> r) s\\<^sub>1'\n   (\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2)\n\ngoal (1 subgoal):\n 1. s\\<^sub>1' \\<leadsto> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2", "by auto"], ["proof (state)\nthis:\n  s\\<^sub>1' \\<leadsto> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "from eq s\\<^sub>1's\\<^sub>2'"], ["proof (chain)\npicking this:\n  s\\<^sub>2 \\<approx> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2\n  s\\<^sub>1' \\<leadsto> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2", "show ?thesis"], ["proof (prove)\nusing this:\n  s\\<^sub>2 \\<approx> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2\n  s\\<^sub>1' \\<leadsto> \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto> s\\<^sub>2'", "by blast"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>2'.\n     s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and> s\\<^sub>1' \\<leadsto> s\\<^sub>2'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma mimic_trans:\n  assumes\n    s\\<^sub>1_eq_s\\<^sub>1': \"s\\<^sub>1 \\<approx> s\\<^sub>1'\" and\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\"\n  shows \"\\<exists>s\\<^sub>2'. s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and> s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "from s\\<^sub>1_eq_s\\<^sub>1'"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<approx> s\\<^sub>1'", "obtain \\<alpha> \\<beta> where\n    bij_\\<alpha>: \"bij \\<alpha>\" and\n    bij_\\<beta>: \"bij \\<beta>\" and\n    R: \"\\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n\ngoal (1 subgoal):\n 1. (\\<And>\\<alpha> \\<beta>.\n        \\<lbrakk>bij \\<alpha>; bij \\<beta>;\n         \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  bij \\<alpha>\n  bij \\<beta>\n  \\<R>\\<^sub>G \\<alpha> \\<beta> s\\<^sub>1 = s\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "from s\\<^sub>1s\\<^sub>2"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2", "obtain n where \"(s\\<^sub>1,s\\<^sub>2) \\<in> [\\<leadsto>]^^n\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using rtrancl_power"], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\n  (?p \\<in> ?R\\<^sup>*) = (\\<exists>n. ?p \\<in> ?R ^^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "thus ?thesis"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2'.\n       s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "proof (induct n arbitrary: s\\<^sub>2)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>2.\n       (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0 \\<Longrightarrow>\n       \\<exists>s\\<^sub>2'.\n          s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n          s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n 2. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "case 0"], ["proof (state)\nthis:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>2.\n       (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0 \\<Longrightarrow>\n       \\<exists>s\\<^sub>2'.\n          s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n          s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n 2. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "thus ?case"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2''.\n       s\\<^sub>2 \\<approx> s\\<^sub>2'' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2''", "using s\\<^sub>1_eq_s\\<^sub>1'"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2''.\n       s\\<^sub>2 \\<approx> s\\<^sub>2'' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2''", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>2''.\n     s\\<^sub>2 \\<approx> s\\<^sub>2'' \\<and>\n     s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2''\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "case (Suc n)"], ["proof (state)\nthis:\n  (s\\<^sub>1, ?s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n  \\<exists>s\\<^sub>2'.\n     ?s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n     s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "obtain x where n_steps: \"(s\\<^sub>1, x) \\<in> [\\<leadsto>]^^n\" and step: \"x \\<leadsto> s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>(s\\<^sub>1, x) \\<in> [\\<leadsto>] ^^ n;\n         x \\<leadsto> s\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc.prems"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>(s\\<^sub>1, x) \\<in> [\\<leadsto>] ^^ n;\n         x \\<leadsto> s\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (s\\<^sub>1, x) \\<in> [\\<leadsto>] ^^ n\n  x \\<leadsto> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "obtain x' where x_eq_x': \"x \\<approx> x'\" and s\\<^sub>1'x: \"s\\<^sub>1' \\<leadsto>\\<^sup>* x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x \\<approx> x'; s\\<^sub>1' \\<leadsto>\\<^sup>* x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Suc.hyps n_steps"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, ?s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n  \\<exists>s\\<^sub>2'.\n     ?s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n     s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, x) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. (\\<And>x'.\n        \\<lbrakk>x \\<approx> x'; s\\<^sub>1' \\<leadsto>\\<^sup>* x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<approx> x'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* x'\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "obtain s\\<^sub>2' where s\\<^sub>2_eq_s\\<^sub>2': \"s\\<^sub>2 \\<approx> s\\<^sub>2'\" and x's\\<^sub>2': \"x' \\<leadsto> s\\<^sub>2'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>2''.\n        \\<lbrakk>s\\<^sub>2 \\<approx> s\\<^sub>2'';\n         x' \\<leadsto> s\\<^sub>2''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson step mimic_single_step x_eq_x')"], ["proof (state)\nthis:\n  s\\<^sub>2 \\<approx> s\\<^sub>2'\n  x' \\<leadsto> s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>2.\n       \\<lbrakk>\\<And>s\\<^sub>2.\n                   (s\\<^sub>1, s\\<^sub>2)\n                   \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n                   \\<exists>s\\<^sub>2'.\n                      s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                      s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                            s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                            s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2''.\n       s\\<^sub>2 \\<approx> s\\<^sub>2'' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2''", "using s\\<^sub>1'x s\\<^sub>2_eq_s\\<^sub>2' trancl_into_rtrancl x's\\<^sub>2'"], ["proof (prove)\nusing this:\n  s\\<^sub>1' \\<leadsto>\\<^sup>* x'\n  s\\<^sub>2 \\<approx> s\\<^sub>2'\n  (?a, ?b) \\<in> ?r\\<^sup>+ \\<Longrightarrow> (?a, ?b) \\<in> ?r\\<^sup>*\n  x' \\<leadsto> s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>2''.\n       s\\<^sub>2 \\<approx> s\\<^sub>2'' \\<and>\n       s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2''", "by auto"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>2''.\n     s\\<^sub>2 \\<approx> s\\<^sub>2'' \\<and>\n     s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2''\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>2'.\n     s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n     s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Strip diagram\\<close>"], ["", "lemma strip_lemma:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1 \\<leadsto>\\<^sup>= s\\<^sub>2'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "from s\\<^sub>1s\\<^sub>2"], ["proof (chain)\npicking this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2", "obtain n where \"(s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>]^^n\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using rtrancl_power"], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\n  (?p \\<in> ?R\\<^sup>*) = (\\<exists>n. ?p \\<in> ?R ^^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "from reach s\\<^sub>1s\\<^sub>2' and this"], ["proof (chain)\npicking this:\n  reachable s\\<^sub>1\n  (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  reachable s\\<^sub>1\n  (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "proof (induct n arbitrary: s\\<^sub>1 s\\<^sub>2 s\\<^sub>2')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "case 0"], ["proof (state)\nthis:\n  reachable s\\<^sub>1\n  (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "hence \"s\\<^sub>1 = s\\<^sub>2\""], ["proof (prove)\nusing this:\n  reachable s\\<^sub>1\n  (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n\ngoal (1 subgoal):\n 1. s\\<^sub>1 = s\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  s\\<^sub>1 = s\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "hence s\\<^sub>2s\\<^sub>2': \"s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2'\""], ["proof (prove)\nusing this:\n  s\\<^sub>1 = s\\<^sub>2\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2'", "using \"0.prems\"(2)"], ["proof (prove)\nusing this:\n  s\\<^sub>1 = s\\<^sub>2\n  (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2'", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2'\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "by (rule exI[where x=s\\<^sub>2'], rule exI[where x=s\\<^sub>2']) (use s\\<^sub>2s\\<^sub>2' in \\<open>simp add: \\<alpha>\\<beta>_refl\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n     s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "case (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>reachable ?s\\<^sub>1;\n   (?s\\<^sub>1, ?s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n   (?s\\<^sub>1, ?s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       ?s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                       ?s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n  reachable s\\<^sub>1\n  (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain a where s\\<^sub>1a: \"s\\<^sub>1 \\<leadsto> a\" and as\\<^sub>2: \"(a, s\\<^sub>2) \\<in> [\\<leadsto>]^^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>s\\<^sub>1 \\<leadsto> a;\n         (a, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson Suc.prems(3) relpow_Suc_D2)"], ["proof (state)\nthis:\n  s\\<^sub>1 \\<leadsto> a\n  (a, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain b c where \"b \\<approx> c\" \"a \\<leadsto>\\<^sup>= b\" \"s\\<^sub>2' \\<leadsto>\\<^sup>= c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b c.\n        \\<lbrakk>b \\<approx> c; (a, b) \\<in> [\\<leadsto>]\\<^sup>=;\n         (s\\<^sub>2', c) \\<in> [\\<leadsto>]\\<^sup>=\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (metis (mono_tags, lifting) SLC_top_relaxed Suc.prems(1) Suc.prems(2) \\<alpha>\\<beta>_sym lid_inf rid_inf s\\<^sub>1a)"], ["proof (state)\nthis:\n  b \\<approx> c\n  (a, b) \\<in> [\\<leadsto>]\\<^sup>=\n  (s\\<^sub>2', c) \\<in> [\\<leadsto>]\\<^sup>=\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain d e where \"d \\<approx> e\" \"s\\<^sub>2 \\<leadsto>\\<^sup>* d\" \"b \\<leadsto>\\<^sup>* e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>d e.\n        \\<lbrakk>d \\<approx> e; s\\<^sub>2 \\<leadsto>\\<^sup>* d;\n         b \\<leadsto>\\<^sup>* e\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson Suc.hyps Suc.prems(1) \\<open>a \\<leadsto>\\<^sup>= b\\<close> as\\<^sub>2 reachability_closed_under_execution_step s\\<^sub>1a valid_stepE)"], ["proof (state)\nthis:\n  d \\<approx> e\n  s\\<^sub>2 \\<leadsto>\\<^sup>* d\n  b \\<leadsto>\\<^sup>* e\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain f where \"c \\<leadsto>\\<^sup>* f\" \"e \\<approx> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f.\n        \\<lbrakk>c \\<leadsto>\\<^sup>* f; e \\<approx> f\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson  \\<open>b \\<approx> c\\<close> \\<open>b \\<leadsto>\\<^sup>* e\\<close> mimic_trans)"], ["proof (state)\nthis:\n  c \\<leadsto>\\<^sup>* f\n  e \\<approx> f\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "have \"d \\<approx> f\""], ["proof (prove)\ngoal (1 subgoal):\n 1. d \\<approx> f", "using \\<alpha>\\<beta>_trans \\<open>d \\<approx> e\\<close> \\<open>e \\<approx> f\\<close>"], ["proof (prove)\nusing this:\n  \\<lbrakk>?s \\<approx> ?s'; ?s' \\<approx> ?s''\\<rbrakk>\n  \\<Longrightarrow> ?s \\<approx> ?s''\n  d \\<approx> e\n  e \\<approx> f\n\ngoal (1 subgoal):\n 1. d \\<approx> f", "by auto"], ["proof (state)\nthis:\n  d \\<approx> f\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1;\n        (s\\<^sub>1, s\\<^sub>2') \\<in> [\\<leadsto>]\\<^sup>=;\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "then"], ["proof (chain)\npicking this:\n  d \\<approx> f", "show ?case"], ["proof (prove)\nusing this:\n  d \\<approx> f\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "by (metis (no_types, lifting) \\<open>c \\<leadsto>\\<^sup>* f\\<close> \\<open>s\\<^sub>2 \\<leadsto>\\<^sup>* d\\<close> \\<open>s\\<^sub>2' \\<leadsto>\\<^sup>= c\\<close> r_into_rtrancl rtrancl_reflcl rtrancl_trans)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n     s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n     s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection \\<open>Confluence diagram\\<close>"], ["", "lemma confluence_modulo_equivalence:\n  assumes\n    s\\<^sub>1s\\<^sub>2: \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\" and\n    s\\<^sub>1s\\<^sub>2': \"s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\" and\n    equiv: \"s\\<^sub>1 \\<approx> s\\<^sub>1'\" and\n    reach: \"reachable (s\\<^sub>1 :: ('r,'l,'v) global_state)\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows \"\\<exists>s\\<^sub>3 s\\<^sub>3'. s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and> s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and> s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain n where \"(s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>]^^n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using s\\<^sub>1s\\<^sub>2 rtrancl_power"], ["proof (prove)\nusing this:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2\n  (?p \\<in> ?R\\<^sup>*) = (\\<exists>n. ?p \\<in> ?R ^^ n)\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "from reach equiv s\\<^sub>1s\\<^sub>2' and this"], ["proof (chain)\npicking this:\n  reachable s\\<^sub>1\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n", "show ?thesis"], ["proof (prove)\nusing this:\n  reachable s\\<^sub>1\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\n\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "proof (induct n arbitrary: s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2')"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "case base: 0"], ["proof (state)\nthis:\n  reachable s\\<^sub>1\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "hence \"s\\<^sub>1 = s\\<^sub>2\""], ["proof (prove)\nusing this:\n  reachable s\\<^sub>1\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\n\ngoal (1 subgoal):\n 1. s\\<^sub>1 = s\\<^sub>2", "by simp"], ["proof (state)\nthis:\n  s\\<^sub>1 = s\\<^sub>2\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain s\\<^sub>2'' where \"s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2''\" \"s\\<^sub>2' \\<approx> s\\<^sub>2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>2''.\n        \\<lbrakk>s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2'';\n         s\\<^sub>2' \\<approx> s\\<^sub>2''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using \\<alpha>\\<beta>_sym base.prems(2,3) mimic_trans"], ["proof (prove)\nusing this:\n  ?s \\<approx> ?s' \\<Longrightarrow> ?s' \\<approx> ?s\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  \\<lbrakk>?s\\<^sub>1 \\<approx> ?s\\<^sub>1';\n   ?s\\<^sub>1 \\<leadsto>\\<^sup>* ?s\\<^sub>2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>2'.\n                       ?s\\<^sub>2 \\<approx> s\\<^sub>2' \\<and>\n                       ?s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>2''.\n        \\<lbrakk>s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2'';\n         s\\<^sub>2' \\<approx> s\\<^sub>2''\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2''\n  s\\<^sub>2' \\<approx> s\\<^sub>2''\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "have \"s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2''\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2''", "using \\<open>s\\<^sub>1 = s\\<^sub>2\\<close> \\<open>s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2''\\<close>"], ["proof (prove)\nusing this:\n  s\\<^sub>1 = s\\<^sub>2\n  s\\<^sub>1 \\<leadsto>\\<^sup>* s\\<^sub>2''\n\ngoal (1 subgoal):\n 1. s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2''", "by blast"], ["proof (state)\nthis:\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2''\n\ngoal (2 subgoals):\n 1. \\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ 0\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n 2. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "by (rule exI[where x=s\\<^sub>2''], rule exI[where x=s\\<^sub>2']) (auto simp add: \\<alpha>\\<beta>_sym \\<open>s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>2''\\<close> \\<open>s\\<^sub>2' \\<approx> s\\<^sub>2''\\<close>)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n     s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "case step: (Suc n)"], ["proof (state)\nthis:\n  \\<lbrakk>reachable ?s\\<^sub>1; ?s\\<^sub>1 \\<approx> ?s\\<^sub>1';\n   ?s\\<^sub>1' \\<leadsto>\\<^sup>* ?s\\<^sub>2';\n   (?s\\<^sub>1, ?s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       ?s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                       ?s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n  reachable s\\<^sub>1\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain a where s\\<^sub>1a: \"(s\\<^sub>1, a) \\<in> [\\<leadsto>]^^n\" and as\\<^sub>2: \"a \\<leadsto> s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>(s\\<^sub>1, a) \\<in> [\\<leadsto>] ^^ n;\n         a \\<leadsto> s\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using step.prems(4)"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\n\ngoal (1 subgoal):\n 1. (\\<And>a.\n        \\<lbrakk>(s\\<^sub>1, a) \\<in> [\\<leadsto>] ^^ n;\n         a \\<leadsto> s\\<^sub>2\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (s\\<^sub>1, a) \\<in> [\\<leadsto>] ^^ n\n  a \\<leadsto> s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "have \"reachable a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable a", "using reachability_closed_under_execution relpow_imp_rtrancl s\\<^sub>1a step.prems(1)"], ["proof (prove)\nusing this:\n  \\<lbrakk>reachable ?s; ?s \\<leadsto>\\<^sup>* ?s'\\<rbrakk>\n  \\<Longrightarrow> reachable ?s'\n  ?p \\<in> ?R ^^ ?n \\<Longrightarrow> ?p \\<in> ?R\\<^sup>*\n  (s\\<^sub>1, a) \\<in> [\\<leadsto>] ^^ n\n  reachable s\\<^sub>1\n\ngoal (1 subgoal):\n 1. reachable a", "by blast"], ["proof (state)\nthis:\n  reachable a\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain b c where \"a \\<leadsto>\\<^sup>* b\" \"s\\<^sub>2' \\<leadsto>\\<^sup>* c\" \"b \\<approx> c\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>b c.\n        \\<lbrakk>a \\<leadsto>\\<^sup>* b; s\\<^sub>2' \\<leadsto>\\<^sup>* c;\n         b \\<approx> c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using s\\<^sub>1a step.hyps step.prems(1-3)"], ["proof (prove)\nusing this:\n  (s\\<^sub>1, a) \\<in> [\\<leadsto>] ^^ n\n  \\<lbrakk>reachable ?s\\<^sub>1; ?s\\<^sub>1 \\<approx> ?s\\<^sub>1';\n   ?s\\<^sub>1' \\<leadsto>\\<^sup>* ?s\\<^sub>2';\n   (?s\\<^sub>1, ?s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                       ?s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                       ?s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n  reachable s\\<^sub>1\n  s\\<^sub>1 \\<approx> s\\<^sub>1'\n  s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2'\n\ngoal (1 subgoal):\n 1. (\\<And>b c.\n        \\<lbrakk>a \\<leadsto>\\<^sup>* b; s\\<^sub>2' \\<leadsto>\\<^sup>* c;\n         b \\<approx> c\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  a \\<leadsto>\\<^sup>* b\n  s\\<^sub>2' \\<leadsto>\\<^sup>* c\n  b \\<approx> c\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "have \"a \\<leadsto>\\<^sup>* s\\<^sub>2\""], ["proof (prove)\ngoal (1 subgoal):\n 1. a \\<leadsto>\\<^sup>* s\\<^sub>2", "by (simp add: as\\<^sub>2 r_into_rtrancl)"], ["proof (state)\nthis:\n  a \\<leadsto>\\<^sup>* s\\<^sub>2\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain s\\<^sub>3 d where \"s\\<^sub>3 \\<approx> d\" \"s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3\" \"b \\<leadsto>\\<^sup>* d\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>3 d.\n        \\<lbrakk>s\\<^sub>3 \\<approx> d;\n         s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3;\n         b \\<leadsto>\\<^sup>* d\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson \\<alpha>\\<beta>_sym \\<open>a \\<leadsto>\\<^sup>* b\\<close> \\<open>reachable a\\<close> as\\<^sub>2 lid_inf refl_rewritesI rid_inf strip_lemma)"], ["proof (state)\nthis:\n  s\\<^sub>3 \\<approx> d\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3\n  b \\<leadsto>\\<^sup>* d\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "obtain s\\<^sub>3' where \"s\\<^sub>3 \\<approx> s\\<^sub>3'\" \"c \\<leadsto>\\<^sup>* s\\<^sub>3'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s\\<^sub>3'.\n        \\<lbrakk>s\\<^sub>3 \\<approx> s\\<^sub>3';\n         c \\<leadsto>\\<^sup>* s\\<^sub>3'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (meson \\<alpha>\\<beta>_trans \\<open>b \\<approx> c\\<close> \\<open>b \\<leadsto>\\<^sup>* d\\<close> \\<open>s\\<^sub>3 \\<approx> d\\<close> mimic_trans)"], ["proof (state)\nthis:\n  s\\<^sub>3 \\<approx> s\\<^sub>3'\n  c \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal (1 subgoal):\n 1. \\<And>n s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n       \\<lbrakk>\\<And>s\\<^sub>1 s\\<^sub>1' s\\<^sub>2 s\\<^sub>2'.\n                   \\<lbrakk>reachable s\\<^sub>1;\n                    s\\<^sub>1 \\<approx> s\\<^sub>1';\n                    s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n                    (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ n\\<rbrakk>\n                   \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n  s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n  s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n  s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3';\n        reachable s\\<^sub>1; s\\<^sub>1 \\<approx> s\\<^sub>1';\n        s\\<^sub>1' \\<leadsto>\\<^sup>* s\\<^sub>2';\n        (s\\<^sub>1, s\\<^sub>2) \\<in> [\\<leadsto>] ^^ Suc n\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s\\<^sub>3 s\\<^sub>3'.\n                            s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n                            s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n                            s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>s\\<^sub>3 s\\<^sub>3'.\n       s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n       s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n       s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'", "by (meson \\<open>c \\<leadsto>\\<^sup>* s\\<^sub>3'\\<close> \\<open>s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3\\<close> \\<open>s\\<^sub>2' \\<leadsto>\\<^sup>* c\\<close> \\<open>s\\<^sub>3 \\<approx> s\\<^sub>3'\\<close> transD trans_rtrancl)"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n     s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<exists>s\\<^sub>3 s\\<^sub>3'.\n     s\\<^sub>3 \\<approx> s\\<^sub>3' \\<and>\n     s\\<^sub>2 \\<leadsto>\\<^sup>* s\\<^sub>3 \\<and>\n     s\\<^sub>2' \\<leadsto>\\<^sup>* s\\<^sub>3'\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Determinacy\\<close>"], ["", "theorem determinacy:\n  assumes \n    prog_expr: \"program_expr e\" and\n    e_terminates_in_s: \"e \\<down> s\" and\n    e_terminates_in_s': \"e \\<down> s'\" and\n    lid_inf: \"infinite (UNIV :: 'l set)\" and\n    rid_inf: \"infinite (UNIV :: 'r set)\"\n  shows \"s \\<approx> s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<approx> s'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<approx> s'", "obtain r where x: \"(\\<epsilon>(r \\<mapsto> (\\<epsilon>,\\<epsilon>,e))) \\<leadsto>\\<^sup>* s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r.\n        \\<epsilon>(r \\<mapsto>\n        (\\<epsilon>, \\<epsilon>, e)) \\<leadsto>\\<^sup>* s \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis e_terminates_in_s execution_def maximal_execution_def terminates_in_def)"], ["proof (state)\nthis:\n  \\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e)) \\<leadsto>\\<^sup>* s\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "obtain r' where y: \"(\\<epsilon>(r' \\<mapsto> (\\<epsilon>,\\<epsilon>,e))) \\<leadsto>\\<^sup>* s'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>r'.\n        \\<epsilon>(r' \\<mapsto>\n        (\\<epsilon>, \\<epsilon>, e)) \\<leadsto>\\<^sup>* s' \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (metis e_terminates_in_s' execution_def maximal_execution_def terminates_in_def)"], ["proof (state)\nthis:\n  \\<epsilon>(r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e)) \\<leadsto>\\<^sup>* s'\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "let \"?\\<alpha>\" = \"id(r := r', r' := r)\""], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<approx> s'", "have bij_\\<alpha>: \"bij ?\\<alpha>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij (id(r := r', r' := r))", "by (simp add: swap_bij)"], ["proof (state)\nthis:\n  bij (id(r := r', r' := r))\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "have equiv: \"(\\<epsilon>(r \\<mapsto> (\\<epsilon>,\\<epsilon>,e))) \\<approx> (\\<epsilon>(r' \\<mapsto> (\\<epsilon>,\\<epsilon>,e)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e)) \\<approx> \\<epsilon>\n    (r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))", "proof (rule eq_statesI[of ?\\<alpha> id])"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<R>\\<^sub>G (id(r := r', r' := r)) id\n     (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e))) =\n    \\<epsilon>(r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))\n 2. bij (id(r := r', r' := r))\n 3. bij id", "show \"\\<R>\\<^sub>G ?\\<alpha> id (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e))) = \\<epsilon>(r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(r := r', r' := r)) id\n     (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e))) =\n    \\<epsilon>(r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))", "using bij_\\<alpha> prog_expr"], ["proof (prove)\nusing this:\n  bij (id(r := r', r' := r))\n  program_expr e\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>G (id(r := r', r' := r)) id\n     (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e))) =\n    \\<epsilon>(r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))", "by auto"], ["proof (state)\nthis:\n  \\<R>\\<^sub>G (id(r := r', r' := r)) id\n   (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e))) =\n  \\<epsilon>(r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))\n\ngoal (2 subgoals):\n 1. bij (id(r := r', r' := r))\n 2. bij id", "qed (simp add: bij_\\<alpha>)+"], ["proof (state)\nthis:\n  \\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e)) \\<approx> \\<epsilon>\n  (r' \\<mapsto> (\\<epsilon>, \\<epsilon>, e))\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "have reach: \"reachable (\\<epsilon>(r \\<mapsto> (\\<epsilon>,\\<epsilon>,e)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reachable (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e)))", "by (simp add: initial_state_reachable prog_expr)"], ["proof (state)\nthis:\n  reachable (\\<epsilon>(r \\<mapsto> (\\<epsilon>, \\<epsilon>, e)))\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "have \"\\<exists>a b. (a \\<approx> b) \\<and> s \\<leadsto>\\<^sup>* a \\<and> s' \\<leadsto>\\<^sup>* b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>a b.\n       a \\<approx> b \\<and>\n       s \\<leadsto>\\<^sup>* a \\<and> s' \\<leadsto>\\<^sup>* b", "by (rule confluence_modulo_equivalence[OF x y equiv reach lid_inf rid_inf])"], ["proof (state)\nthis:\n  \\<exists>a b.\n     a \\<approx> b \\<and>\n     s \\<leadsto>\\<^sup>* a \\<and> s' \\<leadsto>\\<^sup>* b\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "from this"], ["proof (chain)\npicking this:\n  \\<exists>a b.\n     a \\<approx> b \\<and>\n     s \\<leadsto>\\<^sup>* a \\<and> s' \\<leadsto>\\<^sup>* b", "obtain a b where \"s \\<leadsto>\\<^sup>* a\" \"s' \\<leadsto>\\<^sup>* b\" \"a \\<approx> b\""], ["proof (prove)\nusing this:\n  \\<exists>a b.\n     a \\<approx> b \\<and>\n     s \\<leadsto>\\<^sup>* a \\<and> s' \\<leadsto>\\<^sup>* b\n\ngoal (1 subgoal):\n 1. (\\<And>a b.\n        \\<lbrakk>s \\<leadsto>\\<^sup>* a; s' \\<leadsto>\\<^sup>* b;\n         a \\<approx> b\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  s \\<leadsto>\\<^sup>* a\n  s' \\<leadsto>\\<^sup>* b\n  a \\<approx> b\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "have \"s = a\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s = a", "by (meson \\<open>s \\<leadsto>\\<^sup>* a\\<close> e_terminates_in_s maximal_execution_def rtranclD terminates_in_def tranclD)"], ["proof (state)\nthis:\n  s = a\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "have \"s' = b\""], ["proof (prove)\ngoal (1 subgoal):\n 1. s' = b", "by (meson \\<open>s' \\<leadsto>\\<^sup>* b\\<close> converse_rtranclE e_terminates_in_s' maximal_execution_def terminates_in_def)"], ["proof (state)\nthis:\n  s' = b\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. s \\<approx> s'", "using \\<open>a \\<approx> b\\<close> \\<open>s = a\\<close> \\<open>s' = b\\<close>"], ["proof (prove)\nusing this:\n  a \\<approx> b\n  s = a\n  s' = b\n\ngoal (1 subgoal):\n 1. s \\<approx> s'", "by auto"], ["proof (state)\nthis:\n  s \\<approx> s'\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "(* substitution locale *)"], ["", "end"]]}