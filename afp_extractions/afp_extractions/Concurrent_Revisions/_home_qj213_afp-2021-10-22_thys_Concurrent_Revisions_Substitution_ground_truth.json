{"file_name": "/home/qj213/afp-2021-10-22/thys/Concurrent_Revisions/Substitution.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Concurrent_Revisions", "problem_names": ["lemma rid_substE [dest]: \"r \\<in> RID\\<^sub>E (subst (VE v) x e) \\<Longrightarrow> r \\<notin> RID\\<^sub>E e \\<Longrightarrow> r \\<in> RID\\<^sub>V v\"", "lemma lid_substE [dest]: \"l \\<in> LID\\<^sub>E (subst (VE v) x e) \\<Longrightarrow> l \\<notin> LID\\<^sub>E e \\<Longrightarrow> l \\<in> LID\\<^sub>V v\"", "lemma constant_function_models_substitution: \n  \"substitution constant_function\"", "lemma var_renaming_preserves_size: (* for termination proof *)\n  fixes \n    v :: \"('r,'l,'v) val\" and\n    e :: \"('r,'l,'v) expr\" and\n    \\<alpha> :: \"'r \\<Rightarrow> 'r'\" and\n    \\<beta> :: \"'l \\<Rightarrow> 'l'\" and\n    \\<zeta> :: \"'v \\<Rightarrow> 'v'\"\n  shows\n  \"size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v\"\n  \"size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e\"", "lemma nat_subst\\<^sub>E_distr:\n  fixes e :: \"('r,'l,nat) expr\"\n  shows \"\\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') = nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x (\\<R>\\<^sub>E \\<alpha> \\<beta> e')\"", "lemma nat_subst\\<^sub>E_introduces_no_rids:\n  fixes e' :: \"('r,'l,nat) expr\"\n  shows \"RID\\<^sub>E (nat_subst\\<^sub>E e x e') \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'\"", "lemma nat_subst\\<^sub>E_introduces_no_lids: \n  fixes e' :: \"('r,'l,nat) expr\"\n  shows \"LID\\<^sub>E (nat_subst\\<^sub>E e x e') \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'\"", "lemma nat_subst\\<^sub>E_models_substitution: \"substitution nat_subst\\<^sub>E\""], "translations": [["", "lemma rid_substE [dest]: \"r \\<in> RID\\<^sub>E (subst (VE v) x e) \\<Longrightarrow> r \\<notin> RID\\<^sub>E e \\<Longrightarrow> r \\<in> RID\\<^sub>V v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<in> RID\\<^sub>E (subst (VE v) x e);\n     r \\<notin> RID\\<^sub>E e\\<rbrakk>\n    \\<Longrightarrow> r \\<in> RID\\<^sub>V v", "using subst_introduces_no_rids"], ["proof (prove)\nusing this:\n  RID\\<^sub>E (subst ?e ?x ?e')\n  \\<subseteq> RID\\<^sub>E ?e \\<union> RID\\<^sub>E ?e'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>r \\<in> RID\\<^sub>E (subst (VE v) x e);\n     r \\<notin> RID\\<^sub>E e\\<rbrakk>\n    \\<Longrightarrow> r \\<in> RID\\<^sub>V v", "by fastforce"], ["", "lemma lid_substE [dest]: \"l \\<in> LID\\<^sub>E (subst (VE v) x e) \\<Longrightarrow> l \\<notin> LID\\<^sub>E e \\<Longrightarrow> l \\<in> LID\\<^sub>V v\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<in> LID\\<^sub>E (subst (VE v) x e);\n     l \\<notin> LID\\<^sub>E e\\<rbrakk>\n    \\<Longrightarrow> l \\<in> LID\\<^sub>V v", "using subst_introduces_no_lids"], ["proof (prove)\nusing this:\n  LID\\<^sub>E (subst ?e ?x ?e')\n  \\<subseteq> LID\\<^sub>E ?e \\<union> LID\\<^sub>E ?e'\n\ngoal (1 subgoal):\n 1. \\<lbrakk>l \\<in> LID\\<^sub>E (subst (VE v) x e);\n     l \\<notin> LID\\<^sub>E e\\<rbrakk>\n    \\<Longrightarrow> l \\<in> LID\\<^sub>V v", "by fastforce"], ["", "end"], ["", "(* substitution locale *)"], ["", "subsection \\<open>Trivial model\\<close>"], ["", "fun constant_function :: \"('r,'l,'v) expr \\<Rightarrow> 'v \\<Rightarrow> ('r,'l,'v) expr \\<Rightarrow> ('r,'l,'v) expr\" where \n  \"constant_function e x e' = VE (CV Unit)\""], ["", "lemma constant_function_models_substitution: \n  \"substitution constant_function\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitution constant_function", "by (auto simp add: substitution_def)"], ["", "subsection \\<open>Example model\\<close>"], ["", "subsubsection Preliminaries"], ["", "notation set3_val (\"\\<V>\\<^sub>V\")"], ["", "notation set3_expr (\"\\<V>\\<^sub>E\")"], ["", "abbreviation rename_vars_val :: \"('v \\<Rightarrow> 'v) \\<Rightarrow> ('r,'l,'v) val \\<Rightarrow> ('r,'l,'v) val\" (\"\\<R>\\<V>\\<^sub>V\") where\n  \"\\<R>\\<V>\\<^sub>V \\<zeta> \\<equiv> map_val id id \\<zeta>\""], ["", "abbreviation rename_vars_expr :: \"('v \\<Rightarrow> 'v) \\<Rightarrow> ('r,'l,'v) expr \\<Rightarrow> ('r,'l,'v) expr\" (\"\\<R>\\<V>\\<^sub>E\") where\n  \"\\<R>\\<V>\\<^sub>E \\<zeta> \\<equiv> map_expr id id \\<zeta>\""], ["", "lemma var_renaming_preserves_size: (* for termination proof *)\n  fixes \n    v :: \"('r,'l,'v) val\" and\n    e :: \"('r,'l,'v) expr\" and\n    \\<alpha> :: \"'r \\<Rightarrow> 'r'\" and\n    \\<beta> :: \"'l \\<Rightarrow> 'l'\" and\n    \\<zeta> :: \"'v \\<Rightarrow> 'v'\"\n  shows\n  \"size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v\"\n  \"size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e\""], ["proof (prove)\ngoal (1 subgoal):\n 1. size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v &&&\n    size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e", "proof -"], ["proof (state)\ngoal (2 subgoals):\n 1. size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v\n 2. size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e", "have \"(\\<forall>(\\<alpha> :: 'r \\<Rightarrow> 'r') (\\<beta> :: 'l \\<Rightarrow> 'l') (\\<zeta> :: 'v \\<Rightarrow> 'v'). size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v) \\<and> \n        (\\<forall>(\\<alpha> :: 'r \\<Rightarrow> 'r') (\\<beta> :: 'l \\<Rightarrow> 'l') (\\<zeta> :: 'v \\<Rightarrow> 'v'). size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<alpha> \\<beta> \\<zeta>.\n        size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v) \\<and>\n    (\\<forall>\\<alpha> \\<beta> \\<zeta>.\n        size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e)", "by (induct rule: val_expr.induct) auto"], ["proof (state)\nthis:\n  (\\<forall>\\<alpha> \\<beta> \\<zeta>.\n      size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v) \\<and>\n  (\\<forall>\\<alpha> \\<beta> \\<zeta>.\n      size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e)\n\ngoal (2 subgoals):\n 1. size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v\n 2. size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e", "thus \n    \"size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v\" \n    \"size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e\""], ["proof (prove)\nusing this:\n  (\\<forall>\\<alpha> \\<beta> \\<zeta>.\n      size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v) \\<and>\n  (\\<forall>\\<alpha> \\<beta> \\<zeta>.\n      size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e)\n\ngoal (1 subgoal):\n 1. size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v &&&\n    size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e", "by auto"], ["proof (state)\nthis:\n  size (map_val \\<alpha> \\<beta> \\<zeta> v) = size v\n  size (map_expr \\<alpha> \\<beta> \\<zeta> e) = size e\n\ngoal:\nNo subgoals!", "qed"], ["", "subsubsection Definition"], ["", "function\n  nat_subst\\<^sub>V :: \"('r,'l,nat) expr \\<Rightarrow> nat \\<Rightarrow> ('r,'l,nat) val \\<Rightarrow> ('r,'l,nat) expr\" and\n  nat_subst\\<^sub>E :: \"('r,'l,nat) expr \\<Rightarrow> nat \\<Rightarrow> ('r,'l,nat) expr \\<Rightarrow> ('r,'l,nat) expr\"\n  where\n  \"nat_subst\\<^sub>V e x (CV const) = VE (CV const)\"\n| \"nat_subst\\<^sub>V e x (Var x') = (if x = x' then e else VE (Var x'))\"\n| \"nat_subst\\<^sub>V e x (Loc l) = VE (Loc l)\"\n| \"nat_subst\\<^sub>V e x (Rid r) = VE (Rid r)\"\n| \"nat_subst\\<^sub>V e x (Lambda y e') = VE (\n  if x = y then \n    Lambda y e' \n  else \n    let z = Suc (Max (\\<V>\\<^sub>E e' \\<union> \\<V>\\<^sub>E e)) in\n    Lambda z (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E (id(y := z)) e')))\"\n| \"nat_subst\\<^sub>E e x (VE v') = nat_subst\\<^sub>V e x v'\"\n| \"nat_subst\\<^sub>E e x (Apply l r) = Apply (nat_subst\\<^sub>E e x l) (nat_subst\\<^sub>E e x r)\"\n| \"nat_subst\\<^sub>E e x (Ite e1 e2 e3) = Ite (nat_subst\\<^sub>E e x e1) (nat_subst\\<^sub>E e x e2) (nat_subst\\<^sub>E e x e3)\"\n| \"nat_subst\\<^sub>E e x (Ref e') = Ref (nat_subst\\<^sub>E e x e')\"\n| \"nat_subst\\<^sub>E e x (Read e') = Read (nat_subst\\<^sub>E e x e')\"\n| \"nat_subst\\<^sub>E e x (Assign l r) = Assign (nat_subst\\<^sub>E e x l) (nat_subst\\<^sub>E e x r)\"\n| \"nat_subst\\<^sub>E e x (Rfork e') = Rfork (nat_subst\\<^sub>E e x e')\"\n| \"nat_subst\\<^sub>E e x (Rjoin e')  = Rjoin (nat_subst\\<^sub>E e x e')\""], ["proof (prove)\ngoal (92 subgoals):\n 1. \\<And>P x.\n       \\<lbrakk>\\<And>e xa const.\n                   x = Inl (e, xa, CV const) \\<Longrightarrow> P;\n        \\<And>e xa x'. x = Inl (e, xa, Var x') \\<Longrightarrow> P;\n        \\<And>e xa l. x = Inl (e, xa, Loc l) \\<Longrightarrow> P;\n        \\<And>e xa r. x = Inl (e, xa, Rid r) \\<Longrightarrow> P;\n        \\<And>e xa y e'. x = Inl (e, xa, Lambda y e') \\<Longrightarrow> P;\n        \\<And>e xa v'. x = Inr (e, xa, VE v') \\<Longrightarrow> P;\n        \\<And>e xa l r. x = Inr (e, xa, Apply l r) \\<Longrightarrow> P;\n        \\<And>e xa e1 e2 e3.\n           x = Inr (e, xa, Ite e1 e2 e3) \\<Longrightarrow> P;\n        \\<And>e xa e'. x = Inr (e, xa, Ref e') \\<Longrightarrow> P;\n        \\<And>e xa e'. x = Inr (e, xa, Read e') \\<Longrightarrow> P;\n        \\<And>e xa l r. x = Inr (e, xa, Assign l r) \\<Longrightarrow> P;\n        \\<And>e xa e'. x = Inr (e, xa, Rfork e') \\<Longrightarrow> P;\n        \\<And>e xa e'.\n           x = Inr (e, xa, Rjoin e') \\<Longrightarrow> P\\<rbrakk>\n       \\<Longrightarrow> P\n 2. \\<And>e x const ea xa consta.\n       Inl (e, x, CV const) = Inl (ea, xa, CV consta) \\<Longrightarrow>\n       VE (CV const) = VE (CV consta)\n 3. \\<And>e x const ea xa x'.\n       Inl (e, x, CV const) = Inl (ea, xa, Var x') \\<Longrightarrow>\n       VE (CV const) = (if xa = x' then ea else VE (Var x'))\n 4. \\<And>e x const ea xa l.\n       Inl (e, x, CV const) = Inl (ea, xa, Loc l) \\<Longrightarrow>\n       VE (CV const) = VE (Loc l)\n 5. \\<And>e x const ea xa r.\n       Inl (e, x, CV const) = Inl (ea, xa, Rid r) \\<Longrightarrow>\n       VE (CV const) = VE (Rid r)\n 6. \\<And>e x const ea xa y e'.\n       Inl (e, x, CV const) = Inl (ea, xa, Lambda y e') \\<Longrightarrow>\n       VE (CV const) =\n       VE (if xa = y then Lambda y e'\n           else let z = Suc (Max (\\<V>\\<^sub>E e' \\<union> \\<V>\\<^sub>E ea))\n                in Lambda z\n                    (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC\n                      (Inr (ea, xa, \\<R>\\<V>\\<^sub>E (id(y := z)) e'))))\n 7. \\<And>e x const ea xa v'.\n       Inl (e, x, CV const) = Inr (ea, xa, VE v') \\<Longrightarrow>\n       VE (CV const) =\n       nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inl (ea, xa, v'))\n 8. \\<And>e x const ea xa l r.\n       Inl (e, x, CV const) = Inr (ea, xa, Apply l r) \\<Longrightarrow>\n       VE (CV const) =\n       Apply (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inr (ea, xa, l)))\n        (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inr (ea, xa, r)))\n 9. \\<And>e x const ea xa e1 e2 e3.\n       Inl (e, x, CV const) = Inr (ea, xa, Ite e1 e2 e3) \\<Longrightarrow>\n       VE (CV const) =\n       Ite (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inr (ea, xa, e1)))\n        (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inr (ea, xa, e2)))\n        (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inr (ea, xa, e3)))\n 10. \\<And>e x const ea xa e'.\n        Inl (e, x, CV const) = Inr (ea, xa, Ref e') \\<Longrightarrow>\n        VE (CV const) =\n        Ref (nat_subst\\<^sub>V_nat_subst\\<^sub>E_sumC (Inr (ea, xa, e')))\nA total of 92 subgoals...", "by pat_completeness auto"], ["", "termination"], ["proof (prove)\ngoal (1 subgoal):\n 1. All nat_subst\\<^sub>V_nat_subst\\<^sub>E_dom", "by (relation \"measure (\\<lambda>x. case x of Inl (e,x,v) \\<Rightarrow> size v | Inr (e,x,e') \\<Rightarrow> size e')\")\n     (auto simp add: var_renaming_preserves_size(2))"], ["", "subsubsection \\<open>Proof obligations\\<close>"], ["", "lemma nat_subst\\<^sub>E_distr:\n  fixes e :: \"('r,'l,nat) expr\"\n  shows \"\\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') = nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x (\\<R>\\<^sub>E \\<alpha> \\<beta> e')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> e')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> e')", "fix v' :: \"('r,'l,nat) val\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> e')", "have\n    \"(\\<forall>\\<alpha> \\<beta> x e \\<zeta>. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v')) = nat_subst\\<^sub>V (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x (\\<R>\\<^sub>V \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>V \\<zeta> v'))) \\<and>\n     (\\<forall>\\<alpha> \\<beta> x e \\<zeta>. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e')) = nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>E \\<zeta> e')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>\\<alpha> \\<beta> x e \\<zeta>.\n        \\<R>\\<^sub>E \\<alpha> \\<beta>\n         (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v')) =\n        nat_subst\\<^sub>V (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n         (\\<R>\\<^sub>V \\<alpha> \\<beta>\n           (\\<R>\\<V>\\<^sub>V \\<zeta> v'))) \\<and>\n    (\\<forall>\\<alpha> \\<beta> x e \\<zeta>.\n        \\<R>\\<^sub>E \\<alpha> \\<beta>\n         (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e')) =\n        nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n         (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>E \\<zeta> e')))", "by (induct rule: val_expr.induct) (auto simp add: expr.set_map(3) fun.map_ident)"], ["proof (state)\nthis:\n  (\\<forall>\\<alpha> \\<beta> x e \\<zeta>.\n      \\<R>\\<^sub>E \\<alpha> \\<beta>\n       (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v')) =\n      nat_subst\\<^sub>V (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n       (\\<R>\\<^sub>V \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>V \\<zeta> v'))) \\<and>\n  (\\<forall>\\<alpha> \\<beta> x e \\<zeta>.\n      \\<R>\\<^sub>E \\<alpha> \\<beta>\n       (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e')) =\n      nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n       (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>E \\<zeta> e')))\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> e')", "hence \"\\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E id e')) = nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>E id e'))\""], ["proof (prove)\nusing this:\n  (\\<forall>\\<alpha> \\<beta> x e \\<zeta>.\n      \\<R>\\<^sub>E \\<alpha> \\<beta>\n       (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v')) =\n      nat_subst\\<^sub>V (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n       (\\<R>\\<^sub>V \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>V \\<zeta> v'))) \\<and>\n  (\\<forall>\\<alpha> \\<beta> x e \\<zeta>.\n      \\<R>\\<^sub>E \\<alpha> \\<beta>\n       (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e')) =\n      nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n       (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<V>\\<^sub>E \\<zeta> e')))\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta>\n     (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e')) =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<^sub>E id id e'))", "by blast"], ["proof (state)\nthis:\n  \\<R>\\<^sub>E \\<alpha> \\<beta>\n   (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e')) =\n  nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n   (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<^sub>E id id e'))\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> e')", "thus ?thesis"], ["proof (prove)\nusing this:\n  \\<R>\\<^sub>E \\<alpha> \\<beta>\n   (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e')) =\n  nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n   (\\<R>\\<^sub>E \\<alpha> \\<beta> (\\<R>\\<^sub>E id id e'))\n\ngoal (1 subgoal):\n 1. \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n    nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n     (\\<R>\\<^sub>E \\<alpha> \\<beta> e')", "by simp"], ["proof (state)\nthis:\n  \\<R>\\<^sub>E \\<alpha> \\<beta> (nat_subst\\<^sub>E e x e') =\n  nat_subst\\<^sub>E (\\<R>\\<^sub>E \\<alpha> \\<beta> e) x\n   (\\<R>\\<^sub>E \\<alpha> \\<beta> e')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_subst\\<^sub>E_introduces_no_rids:\n  fixes e' :: \"('r,'l,nat) expr\"\n  shows \"RID\\<^sub>E (nat_subst\\<^sub>E e x e') \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'", "fix v' :: \"('r,'l,nat) val\""], ["proof (state)\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'", "have \n    \"(\\<forall>x e. \\<forall>\\<zeta>. RID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n     (\\<forall>x e. \\<forall>\\<zeta>. RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e')) \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x e \\<zeta>.\n        RID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v'))\n        \\<subseteq> RID\\<^sub>E e \\<union>\n                    RID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n    (\\<forall>x e \\<zeta>.\n        RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n        \\<subseteq> RID\\<^sub>E e \\<union>\n                    RID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))", "by (induct rule: val_expr.induct) (auto 0 4 simp add: expr.set_map(1))"], ["proof (state)\nthis:\n  (\\<forall>x e \\<zeta>.\n      RID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v'))\n      \\<subseteq> RID\\<^sub>E e \\<union>\n                  RID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n  (\\<forall>x e \\<zeta>.\n      RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n      \\<subseteq> RID\\<^sub>E e \\<union>\n                  RID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'", "hence \"RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E id e')) \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E (\\<R>\\<V>\\<^sub>E id e')\""], ["proof (prove)\nusing this:\n  (\\<forall>x e \\<zeta>.\n      RID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v'))\n      \\<subseteq> RID\\<^sub>E e \\<union>\n                  RID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n  (\\<forall>x e \\<zeta>.\n      RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n      \\<subseteq> RID\\<^sub>E e \\<union>\n                  RID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e'))\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E (\\<R>\\<^sub>E id id e')", "by blast"], ["proof (state)\nthis:\n  RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e'))\n  \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E (\\<R>\\<^sub>E id id e')\n\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'", "thus ?thesis"], ["proof (prove)\nusing this:\n  RID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e'))\n  \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E (\\<R>\\<^sub>E id id e')\n\ngoal (1 subgoal):\n 1. RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'", "by simp"], ["proof (state)\nthis:\n  RID\\<^sub>E (nat_subst\\<^sub>E e x e')\n  \\<subseteq> RID\\<^sub>E e \\<union> RID\\<^sub>E e'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_subst\\<^sub>E_introduces_no_lids: \n  fixes e' :: \"('r,'l,nat) expr\"\n  shows \"LID\\<^sub>E (nat_subst\\<^sub>E e x e') \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'", "fix v' :: \"('r,'l,nat) val\""], ["proof (state)\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'", "have \n    \"(\\<forall>x e. \\<forall>\\<zeta>. LID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n     (\\<forall>x e. \\<forall>\\<zeta>. LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e')) \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>x e \\<zeta>.\n        LID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v'))\n        \\<subseteq> LID\\<^sub>E e \\<union>\n                    LID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n    (\\<forall>x e \\<zeta>.\n        LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n        \\<subseteq> LID\\<^sub>E e \\<union>\n                    LID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))", "by (induct rule: val_expr.induct) (auto 0 4 simp add: expr.set_map(2))"], ["proof (state)\nthis:\n  (\\<forall>x e \\<zeta>.\n      LID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v'))\n      \\<subseteq> LID\\<^sub>E e \\<union>\n                  LID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n  (\\<forall>x e \\<zeta>.\n      LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n      \\<subseteq> LID\\<^sub>E e \\<union>\n                  LID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'", "hence \"LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E id e')) \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E (\\<R>\\<V>\\<^sub>E id e')\""], ["proof (prove)\nusing this:\n  (\\<forall>x e \\<zeta>.\n      LID\\<^sub>E (nat_subst\\<^sub>V e x (\\<R>\\<V>\\<^sub>V \\<zeta> v'))\n      \\<subseteq> LID\\<^sub>E e \\<union>\n                  LID\\<^sub>V (\\<R>\\<V>\\<^sub>V \\<zeta> v')) \\<and>\n  (\\<forall>x e \\<zeta>.\n      LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n      \\<subseteq> LID\\<^sub>E e \\<union>\n                  LID\\<^sub>E (\\<R>\\<V>\\<^sub>E \\<zeta> e'))\n\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e'))\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E (\\<R>\\<^sub>E id id e')", "by blast"], ["proof (state)\nthis:\n  LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e'))\n  \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E (\\<R>\\<^sub>E id id e')\n\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'", "thus ?thesis"], ["proof (prove)\nusing this:\n  LID\\<^sub>E (nat_subst\\<^sub>E e x (\\<R>\\<^sub>E id id e'))\n  \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E (\\<R>\\<^sub>E id id e')\n\ngoal (1 subgoal):\n 1. LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n    \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'", "by simp"], ["proof (state)\nthis:\n  LID\\<^sub>E (nat_subst\\<^sub>E e x e')\n  \\<subseteq> LID\\<^sub>E e \\<union> LID\\<^sub>E e'\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nat_subst\\<^sub>E_models_substitution: \"substitution nat_subst\\<^sub>E\""], ["proof (prove)\ngoal (1 subgoal):\n 1. substitution nat_subst\\<^sub>E", "by (simp add: nat_subst\\<^sub>E_distr nat_subst\\<^sub>E_introduces_no_lids nat_subst\\<^sub>E_introduces_no_rids substitution_def)"], ["", "end"]]}