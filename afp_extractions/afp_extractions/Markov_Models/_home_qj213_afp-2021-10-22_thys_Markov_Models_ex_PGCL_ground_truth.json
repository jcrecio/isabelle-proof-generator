{"file_name": "/home/qj213/afp-2021-10-22/thys/Markov_Models/ex/PGCL.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Markov_Models", "problem_names": ["lemma wp_mono: \"mono (wp c)\"", "lemma step_finite: \"finite (step x)\"", "lemma step_non_empty: \"step x \\<noteq> {}\"", "lemma continuous_rF: \"sup_continuous (rF f)\"", "lemma mono_rF: \"mono (rF f)\"", "lemma r_unfold: \"r f \\<omega> = (if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>)) else r f (stl \\<omega>))\"", "lemma mono_r: \"F \\<le> G \\<Longrightarrow> r F \\<omega> \\<le> r G \\<omega>\"", "lemma measurable_rF:\n  assumes F[measurable]: \"F \\<in> borel_measurable step.St\"\n  shows \"rF f F \\<in> borel_measurable step.St\"", "lemma measurable_r[measurable]: \"r f \\<in> borel_measurable step.St\"", "lemma mono_r': \"mono (\\<lambda>F s. \\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D)\"", "lemma E_inf_r:\n  \"step.E_inf s (r f) =\n    lfp (\\<lambda>F s. \\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D) s\"", "lemma E_inf_r_unfold:\n  \"step.E_inf s (r f) = (\\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else step.E_inf t (r f)) \\<partial>measure_pmf D)\"", "lemma E_inf_r_induct[consumes 1, case_names step]:\n  assumes \"P s y\"\n  assumes *: \"\\<And>F s y. P s y \\<Longrightarrow>\n    (\\<And>s y. P s y \\<Longrightarrow> F s \\<le> y) \\<Longrightarrow> (\\<And>s. F s \\<le> step.E_inf s (r f)) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D) \\<le> y\"\n  shows \"step.E_inf s (r f) \\<le> y\"", "lemma E_inf_Skip: \"step.E_inf (Skip, s) (r f) = f s\"", "lemma E_inf_Seq:\n  assumes [simp]: \"\\<And>x. 0 \\<le> f x\"\n  shows \"step.E_inf (Seq a b, s) (r f) = step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\"", "lemma E_inf_While:\n  \"step.E_inf (While g c, s) (r f) =\n    lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\"", "lemma E_inf_r_eq_wp: \"step.E_inf (c, s) (r f) = wp c f s\""], "translations": [["", "lemma wp_mono: \"mono (wp c)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (wp c)", "by (induction c)\n     (auto simp: mono_def le_fun_def intro: order_trans le_infI1 le_infI2\n           intro!: add_mono mult_left_mono lfp_mono[THEN le_funD])"], ["", "abbreviation det :: \"'s pgcl \\<Rightarrow> 's \\<Rightarrow> ('s pgcl \\<times> 's) pmf set\" (\"\\<lless> _, _ \\<ggreater>\") where\n  \"det c s \\<equiv> {return_pmf (c, s)}\""], ["", "subsection \\<open>Operational Semantics\\<close>"], ["", "fun step :: \"('s pgcl \\<times> 's) \\<Rightarrow> ('s pgcl \\<times> 's) pmf set\" where\n  \"step (Skip, s)        = \\<lless>Skip, s\\<ggreater>\"\n| \"step (Abort, s)       = \\<lless>Abort, s\\<ggreater>\"\n| \"step (Assign u, s)    = \\<lless>Skip, u s\\<ggreater>\"\n| \"step (Seq c\\<^sub>1 c\\<^sub>2, s)    = (map_pmf (\\<lambda>(p1', s'). (if p1' = Skip then c\\<^sub>2 else Seq p1' c\\<^sub>2, s'))) ` step (c\\<^sub>1, s)\"\n| \"step (If b c\\<^sub>1 c\\<^sub>2, s)   = (if b s then \\<lless>c\\<^sub>1, s\\<ggreater> else \\<lless>c\\<^sub>2, s\\<ggreater>)\"\n| \"step (Par c\\<^sub>1 c\\<^sub>2, s)    = \\<lless>c\\<^sub>1, s\\<ggreater> \\<union> \\<lless>c\\<^sub>2, s\\<ggreater>\"\n| \"step (Prob p c\\<^sub>1 c\\<^sub>2, s) = {map_pmf (\\<lambda>b. if b then (c\\<^sub>1, s) else (c\\<^sub>2, s)) p}\"\n| \"step (While b c, s)   = (if b s then \\<lless>Seq c (While b c), s\\<ggreater> else \\<lless>Skip, s\\<ggreater>)\""], ["", "lemma step_finite: \"finite (step x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (step x)", "by (induction x rule: step.induct) simp_all"], ["", "lemma step_non_empty: \"step x \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step x \\<noteq> {}", "by (induction x rule: step.induct) simp_all"], ["", "interpretation step: Markov_Decision_Process step"], ["proof (prove)\ngoal (1 subgoal):\n 1. Markov_Decision_Process step", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>s. step s \\<noteq> {}", "qed (rule step_non_empty)"], ["", "definition rF :: \"('s \\<Rightarrow> ennreal) \\<Rightarrow> (('s pgcl \\<times> 's) stream \\<Rightarrow> ennreal) \\<Rightarrow> ('s pgcl \\<times> 's) stream \\<Rightarrow> ennreal\" where\n  \"rF f F \\<omega> = (if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>)) else F (stl \\<omega>))\""], ["", "abbreviation r :: \"('s \\<Rightarrow> ennreal) \\<Rightarrow> ('s pgcl \\<times> 's) stream \\<Rightarrow> ennreal\" where\n  \"r f \\<equiv> lfp (rF f)\""], ["", "lemma continuous_rF: \"sup_continuous (rF f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_continuous (rF f)", "unfolding rF_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_continuous\n     (\\<lambda>F \\<omega>.\n         if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>))\n         else F (stl \\<omega>))", "by (auto simp: sup_continuous_def fun_eq_iff SUP_sup_distrib [symmetric] image_comp\n           split: prod.splits pgcl.splits)"], ["", "lemma mono_rF: \"mono (rF f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (rF f)", "using continuous_rF"], ["proof (prove)\nusing this:\n  sup_continuous (rF ?f)\n\ngoal (1 subgoal):\n 1. mono (rF f)", "by (rule sup_continuous_mono)"], ["", "lemma r_unfold: \"r f \\<omega> = (if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>)) else r f (stl \\<omega>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r f \\<omega> =\n    (if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>))\n     else r f (stl \\<omega>))", "by (subst lfp_unfold[OF mono_rF]) (simp add: rF_def)"], ["", "lemma mono_r: \"F \\<le> G \\<Longrightarrow> r F \\<omega> \\<le> r G \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<le> G \\<Longrightarrow> r F \\<omega> \\<le> r G \\<omega>", "by (rule le_funD[of _ _ \\<omega>], rule lfp_mono)\n     (auto intro!: lfp_mono simp: rF_def le_fun_def max.coboundedI2)"], ["", "lemma measurable_rF:\n  assumes F[measurable]: \"F \\<in> borel_measurable step.St\"\n  shows \"rF f F \\<in> borel_measurable step.St\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rF f F \\<in> borel_measurable step.St", "unfolding rF_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<omega>.\n        if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>))\n        else F (stl \\<omega>))\n    \\<in> borel_measurable step.St", "apply measurable"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>x. f (snd (shd x))) \\<in> borel_measurable step.St\n 2. (\\<lambda>x. F (stl x)) \\<in> borel_measurable step.St\n 3. {\\<omega> \\<in> space step.St. fst (shd \\<omega>) = Skip}\n    \\<in> sets step.St", "apply (rule measurable_compose[OF measurable_shd])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>a. f (snd a)) \\<in> borel_measurable (count_space UNIV)\n 2. (\\<lambda>x. F (stl x)) \\<in> borel_measurable step.St\n 3. {\\<omega> \\<in> space step.St. fst (shd \\<omega>) = Skip}\n    \\<in> sets step.St", "apply measurable []"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>x. F (stl x)) \\<in> borel_measurable step.St\n 2. {\\<omega> \\<in> space step.St. fst (shd \\<omega>) = Skip}\n    \\<in> sets step.St", "apply (rule measurable_compose[OF measurable_stl])"], ["proof (prove)\ngoal (2 subgoals):\n 1. F \\<in> borel_measurable step.St\n 2. {\\<omega> \\<in> space step.St. fst (shd \\<omega>) = Skip}\n    \\<in> sets step.St", "apply measurable []"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<omega> \\<in> space step.St. fst (shd \\<omega>) = Skip}\n    \\<in> sets step.St", "apply (rule predE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred step.St (\\<lambda>x. fst (shd x) = Skip)", "apply (rule measurable_compose[OF measurable_shd])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (count_space UNIV) (\\<lambda>a. fst a = Skip)", "apply measurable"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma measurable_r[measurable]: \"r f \\<in> borel_measurable step.St\""], ["proof (prove)\ngoal (1 subgoal):\n 1. r f \\<in> borel_measurable step.St", "using continuous_rF measurable_rF"], ["proof (prove)\nusing this:\n  sup_continuous (rF ?f)\n  ?F \\<in> borel_measurable step.St \\<Longrightarrow>\n  rF ?f ?F \\<in> borel_measurable step.St\n\ngoal (1 subgoal):\n 1. r f \\<in> borel_measurable step.St", "by (rule borel_measurable_lfp)"], ["", "lemma mono_r': \"mono (\\<lambda>F s. \\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono\n     (\\<lambda>F s.\n         \\<Sqinter>D\\<in>step s.\n            \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                               \\<partial>measure_pmf D)", "by (auto intro!: monoI le_funI INF_mono[OF bexI] nn_integral_mono simp: le_fun_def)"], ["", "lemma E_inf_r:\n  \"step.E_inf s (r f) =\n    lfp (\\<lambda>F s. \\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf s (r f) =\n    lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. step.E_inf s (r f) =\n    lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s", "have \"step.E_inf s (r f) =\n    lfp (\\<lambda>F s. \\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf s (r f) =\n    lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s", "unfolding rF_def[abs_def]"], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf s\n     (lfp (\\<lambda>F \\<omega>.\n              if fst (shd \\<omega>) = Skip then f (snd (shd \\<omega>))\n              else F (stl \\<omega>))) =\n    lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s", "proof (rule step.E_inf_lfp[THEN fun_cong])"], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lambda>(b, a). if fst b = Skip then f (snd b) else a)\n    \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\n 2. \\<And>s. sup_continuous (HOL.If (fst s = Skip) (f (snd s)))\n 3. \\<And>F cfg.\n       F \\<in> borel_measurable step.St \\<Longrightarrow>\n       \\<integral>\\<^sup>+ \\<omega>.\n                            (if fst (state cfg) = Skip\n                             then f (snd (state cfg)) else F \\<omega>)\n                          \\<partial>step.T cfg =\n       (if fst (state cfg) = Skip then f (snd (state cfg))\n        else integral\\<^sup>N (step.T cfg) F)\n 4. \\<And>s. finite (step s)", "let ?F = \"\\<lambda>t x. (if fst t = Skip then f (snd t) else x)\""], ["proof (state)\ngoal (4 subgoals):\n 1. (\\<lambda>(b, a). if fst b = Skip then f (snd b) else a)\n    \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\n 2. \\<And>s. sup_continuous (HOL.If (fst s = Skip) (f (snd s)))\n 3. \\<And>F cfg.\n       F \\<in> borel_measurable step.St \\<Longrightarrow>\n       \\<integral>\\<^sup>+ \\<omega>.\n                            (if fst (state cfg) = Skip\n                             then f (snd (state cfg)) else F \\<omega>)\n                          \\<partial>step.T cfg =\n       (if fst (state cfg) = Skip then f (snd (state cfg))\n        else integral\\<^sup>N (step.T cfg) F)\n 4. \\<And>s. finite (step s)", "show \"(\\<lambda>(s, x). ?F s x) \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(s, x). if fst s = Skip then f (snd s) else x)\n    \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)", "apply (simp add: measurable_split_conv split_beta')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if fst (fst x) = Skip then f (snd (fst x)) else snd x)\n    \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)", "apply (intro borel_measurable_max borel_measurable_const measurable_If predE\n         measurable_compose[OF measurable_snd] measurable_compose[OF measurable_fst])"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>a. f (snd a)) \\<in> borel_measurable (count_space UNIV)\n 2. (\\<lambda>a. a) \\<in> borel_measurable borel\n 3. Measurable.pred (count_space UNIV) (\\<lambda>a. fst a = Skip)", "apply measurable"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>(s, x). if fst s = Skip then f (snd s) else x)\n  \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\n\ngoal (3 subgoals):\n 1. \\<And>s. sup_continuous (HOL.If (fst s = Skip) (f (snd s)))\n 2. \\<And>F cfg.\n       F \\<in> borel_measurable step.St \\<Longrightarrow>\n       \\<integral>\\<^sup>+ \\<omega>.\n                            (if fst (state cfg) = Skip\n                             then f (snd (state cfg)) else F \\<omega>)\n                          \\<partial>step.T cfg =\n       (if fst (state cfg) = Skip then f (snd (state cfg))\n        else integral\\<^sup>N (step.T cfg) F)\n 3. \\<And>s. finite (step s)", "show \"\\<And>s. sup_continuous (?F s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. sup_continuous (HOL.If (fst s = Skip) (f (snd s)))", "by (auto simp: sup_continuous_def SUP_sup_distrib[symmetric] split: prod.split pgcl.split)"], ["proof (state)\nthis:\n  sup_continuous (HOL.If (fst ?s2 = Skip) (f (snd ?s2)))\n\ngoal (2 subgoals):\n 1. \\<And>F cfg.\n       F \\<in> borel_measurable step.St \\<Longrightarrow>\n       \\<integral>\\<^sup>+ \\<omega>.\n                            (if fst (state cfg) = Skip\n                             then f (snd (state cfg)) else F \\<omega>)\n                          \\<partial>step.T cfg =\n       (if fst (state cfg) = Skip then f (snd (state cfg))\n        else integral\\<^sup>N (step.T cfg) F)\n 2. \\<And>s. finite (step s)", "show \"\\<And>F cfg. (\\<integral>\\<^sup>+\\<omega>. ?F (state cfg) (F \\<omega>) \\<partial>step.T cfg) =\n      ?F (state cfg) (nn_integral (step.T cfg) F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>F cfg.\n       \\<integral>\\<^sup>+ \\<omega>.\n                            (if fst (state cfg) = Skip\n                             then f (snd (state cfg)) else F \\<omega>)\n                          \\<partial>step.T cfg =\n       (if fst (state cfg) = Skip then f (snd (state cfg))\n        else integral\\<^sup>N (step.T cfg) F)", "by (auto simp: split: pgcl.split prod.split)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<omega>.\n                       (if fst (state ?cfg3) = Skip\n                        then f (snd (state ?cfg3)) else ?F3 \\<omega>)\n                     \\<partial>step.T ?cfg3 =\n  (if fst (state ?cfg3) = Skip then f (snd (state ?cfg3))\n   else integral\\<^sup>N (step.T ?cfg3) ?F3)\n\ngoal (1 subgoal):\n 1. \\<And>s. finite (step s)", "qed (rule step_finite)"], ["proof (state)\nthis:\n  step.E_inf s (r f) =\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n   s\n\ngoal (1 subgoal):\n 1. step.E_inf s (r f) =\n    lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s", "then"], ["proof (chain)\npicking this:\n  step.E_inf s (r f) =\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n   s", "show ?thesis"], ["proof (prove)\nusing this:\n  step.E_inf s (r f) =\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n   s\n\ngoal (1 subgoal):\n 1. step.E_inf s (r f) =\n    lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s", "by simp"], ["proof (state)\nthis:\n  step.E_inf s (r f) =\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n   s\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma E_inf_r_unfold:\n  \"step.E_inf s (r f) = (\\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else step.E_inf t (r f)) \\<partial>measure_pmf D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf s (r f) =\n    (\\<Sqinter>D\\<in>step s.\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                else step.E_inf t (r f))\n                           \\<partial>measure_pmf D)", "unfolding E_inf_r"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s =\n    (\\<Sqinter>D\\<in>step s.\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                else lfp\n(\\<lambda>F s.\n    \\<Sqinter>D\\<in>step s.\n       \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                          \\<partial>measure_pmf D)\nt)\n                           \\<partial>measure_pmf D)", "by (simp add: lfp_unfold[OF mono_r'])"], ["", "lemma E_inf_r_induct[consumes 1, case_names step]:\n  assumes \"P s y\"\n  assumes *: \"\\<And>F s y. P s y \\<Longrightarrow>\n    (\\<And>s y. P s y \\<Longrightarrow> F s \\<le> y) \\<Longrightarrow> (\\<And>s. F s \\<le> step.E_inf s (r f)) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D) \\<le> y\"\n  shows \"step.E_inf s (r f) \\<le> y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf s (r f) \\<le> y", "using \\<open>P s y\\<close>"], ["proof (prove)\nusing this:\n  P s y\n\ngoal (1 subgoal):\n 1. step.E_inf s (r f) \\<le> y", "unfolding E_inf_r"], ["proof (prove)\nusing this:\n  P s y\n\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n     s\n    \\<le> y", "proof (induction arbitrary: s y rule: lfp_ordinal_induct[OF mono_r'[where f=f]])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S s y.\n       \\<lbrakk>\\<And>s y. P s y \\<Longrightarrow> S s \\<le> y;\n        S \\<le> lfp (\\<lambda>F s.\n                        \\<Sqinter>D\\<in>step s.\n                           \\<integral>\\<^sup>+ t.\n          (if fst t = Skip then f (snd t) else F t)\n        \\<partial>measure_pmf D);\n        P s y\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step s.\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then f (snd t) else S t)\n          \\<partial>measure_pmf D)\n                         \\<le> y\n 2. \\<And>M s y.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x xa. P x xa \\<longrightarrow> S x \\<le> xa;\n        P s y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) s \\<le> y", "case (1 F)"], ["proof (state)\nthis:\n  P ?s ?y \\<Longrightarrow> F ?s \\<le> ?y\n  F \\<le> lfp (\\<lambda>F s.\n                  \\<Sqinter>D\\<in>step s.\n                     \\<integral>\\<^sup>+ t.\n    (if fst t = Skip then f (snd t) else F t)\n  \\<partial>measure_pmf D)\n  P s y\n\ngoal (2 subgoals):\n 1. \\<And>S s y.\n       \\<lbrakk>\\<And>s y. P s y \\<Longrightarrow> S s \\<le> y;\n        S \\<le> lfp (\\<lambda>F s.\n                        \\<Sqinter>D\\<in>step s.\n                           \\<integral>\\<^sup>+ t.\n          (if fst t = Skip then f (snd t) else F t)\n        \\<partial>measure_pmf D);\n        P s y\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step s.\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then f (snd t) else S t)\n          \\<partial>measure_pmf D)\n                         \\<le> y\n 2. \\<And>M s y.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x xa. P x xa \\<longrightarrow> S x \\<le> xa;\n        P s y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) s \\<le> y", "with *[of s y F]"], ["proof (chain)\npicking this:\n  \\<lbrakk>P s y; \\<And>s y. P s y \\<Longrightarrow> F s \\<le> y;\n   \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n  \\<Longrightarrow> (\\<Sqinter>D\\<in>step s.\n                        \\<integral>\\<^sup>+ t.\n       (if fst t = Skip then f (snd t) else F t)\n     \\<partial>measure_pmf D)\n                    \\<le> y\n  P ?s ?y \\<Longrightarrow> F ?s \\<le> ?y\n  F \\<le> lfp (\\<lambda>F s.\n                  \\<Sqinter>D\\<in>step s.\n                     \\<integral>\\<^sup>+ t.\n    (if fst t = Skip then f (snd t) else F t)\n  \\<partial>measure_pmf D)\n  P s y", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>P s y; \\<And>s y. P s y \\<Longrightarrow> F s \\<le> y;\n   \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n  \\<Longrightarrow> (\\<Sqinter>D\\<in>step s.\n                        \\<integral>\\<^sup>+ t.\n       (if fst t = Skip then f (snd t) else F t)\n     \\<partial>measure_pmf D)\n                    \\<le> y\n  P ?s ?y \\<Longrightarrow> F ?s \\<le> ?y\n  F \\<le> lfp (\\<lambda>F s.\n                  \\<Sqinter>D\\<in>step s.\n                     \\<integral>\\<^sup>+ t.\n    (if fst t = Skip then f (snd t) else F t)\n  \\<partial>measure_pmf D)\n  P s y\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>D\\<in>step s.\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> y", "unfolding le_fun_def E_inf_r[where f=f, symmetric]"], ["proof (prove)\nusing this:\n  \\<lbrakk>P s y; \\<And>s y. P s y \\<Longrightarrow> F s \\<le> y;\n   \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n  \\<Longrightarrow> (\\<Sqinter>D\\<in>step s.\n                        \\<integral>\\<^sup>+ t.\n       (if fst t = Skip then f (snd t) else F t)\n     \\<partial>measure_pmf D)\n                    \\<le> y\n  P ?s ?y \\<Longrightarrow> F ?s \\<le> ?y\n  \\<forall>x. F x \\<le> step.E_inf x (r f)\n  P s y\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>D\\<in>step s.\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> y", "by simp"], ["proof (state)\nthis:\n  (\\<Sqinter>D\\<in>step s.\n      \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                         \\<partial>measure_pmf D)\n  \\<le> y\n\ngoal (1 subgoal):\n 1. \\<And>M s y.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x xa. P x xa \\<longrightarrow> S x \\<le> xa;\n        P s y\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) s \\<le> y", "qed (auto intro: SUP_least)"], ["", "lemma E_inf_Skip: \"step.E_inf (Skip, s) (r f) = f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (Skip, s) (r f) = f s", "by (subst E_inf_r_unfold) simp"], ["", "lemma E_inf_Seq:\n  assumes [simp]: \"\\<And>x. 0 \\<le> f x\"\n  shows \"step.E_inf (Seq a b, s) (r f) = step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (Seq a b, s) (r f) =\n    step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. step.E_inf (Seq a b, s) (r f)\n    \\<le> step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n 2. step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n    \\<le> step.E_inf (Seq a b, s) (r f)", "show \"step.E_inf (Seq a b, s) (r f) \\<le> step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (Seq a b, s) (r f)\n    \\<le> step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))", "proof (coinduction arbitrary: a s rule: E_inf_r_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F a sa.\n       \\<lbrakk>\\<And>s y.\n                   \\<exists>a sa.\n                      s = (Seq a b, sa) \\<and>\n                      y =\n                      step.E_inf (a, sa)\n                       (r (\\<lambda>s.\n                              step.E_inf (b, s) (r f))) \\<Longrightarrow>\n                   F s \\<le> y;\n        \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step (Seq a b, sa).\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then f (snd t) else F t)\n          \\<partial>measure_pmf D)\n                         \\<le> step.E_inf (a, sa)\n                                (r (\\<lambda>s. step.E_inf (b, s) (r f)))", "case step"], ["proof (state)\nthis:\n  \\<exists>a s.\n     ?s = (Seq a b, s) \\<and>\n     ?y =\n     step.E_inf (a, s)\n      (r (\\<lambda>s. step.E_inf (b, s) (r f))) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r f)\n\ngoal (1 subgoal):\n 1. \\<And>F a sa.\n       \\<lbrakk>\\<And>s y.\n                   \\<exists>a sa.\n                      s = (Seq a b, sa) \\<and>\n                      y =\n                      step.E_inf (a, sa)\n                       (r (\\<lambda>s.\n                              step.E_inf (b, s) (r f))) \\<Longrightarrow>\n                   F s \\<le> y;\n        \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step (Seq a b, sa).\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then f (snd t) else F t)\n          \\<partial>measure_pmf D)\n                         \\<le> step.E_inf (a, sa)\n                                (r (\\<lambda>s. step.E_inf (b, s) (r f)))", "then"], ["proof (chain)\npicking this:\n  \\<exists>a s.\n     ?s = (Seq a b, s) \\<and>\n     ?y =\n     step.E_inf (a, s)\n      (r (\\<lambda>s. step.E_inf (b, s) (r f))) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r f)", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>a s.\n     ?s = (Seq a b, s) \\<and>\n     ?y =\n     step.E_inf (a, s)\n      (r (\\<lambda>s. step.E_inf (b, s) (r f))) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r f)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>D\\<in>step (Seq a b, sa).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> step.E_inf (a, sa) (r (\\<lambda>s. step.E_inf (b, s) (r f)))", "by (rewrite in \"_ \\<le> \\<hole>\" E_inf_r_unfold)\n         (force intro!: INF_mono[OF bexI] nn_integral_mono intro: le_infI2\n                simp: E_inf_Skip image_comp)"], ["proof (state)\nthis:\n  (\\<Sqinter>D\\<in>step (Seq a b, sa).\n      \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                         \\<partial>measure_pmf D)\n  \\<le> step.E_inf (a, sa) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  step.E_inf (Seq a b, s) (r f)\n  \\<le> step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n\ngoal (1 subgoal):\n 1. step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n    \\<le> step.E_inf (Seq a b, s) (r f)", "show \"step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f))) \\<le> step.E_inf (Seq a b, s) (r f)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n    \\<le> step.E_inf (Seq a b, s) (r f)", "proof (coinduction arbitrary: a s rule: E_inf_r_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F a sa.\n       \\<lbrakk>\\<And>s y.\n                   \\<exists>a sa.\n                      s = (a, sa) \\<and>\n                      y = step.E_inf (Seq a b, sa) (r f) \\<Longrightarrow>\n                   F s \\<le> y;\n        \\<And>s.\n           F s\n           \\<le> step.E_inf s\n                  (r (\\<lambda>s. step.E_inf (b, s) (r f)))\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step (a, sa).\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then step.E_inf (b, snd t) (r f) else F t)\n          \\<partial>measure_pmf D)\n                         \\<le> step.E_inf (Seq a b, sa) (r f)", "case step"], ["proof (state)\nthis:\n  \\<exists>a s.\n     ?s = (a, s) \\<and> ?y = step.E_inf (Seq a b, s) (r f) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n\ngoal (1 subgoal):\n 1. \\<And>F a sa.\n       \\<lbrakk>\\<And>s y.\n                   \\<exists>a sa.\n                      s = (a, sa) \\<and>\n                      y = step.E_inf (Seq a b, sa) (r f) \\<Longrightarrow>\n                   F s \\<le> y;\n        \\<And>s.\n           F s\n           \\<le> step.E_inf s\n                  (r (\\<lambda>s. step.E_inf (b, s) (r f)))\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step (a, sa).\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then step.E_inf (b, snd t) (r f) else F t)\n          \\<partial>measure_pmf D)\n                         \\<le> step.E_inf (Seq a b, sa) (r f)", "then"], ["proof (chain)\npicking this:\n  \\<exists>a s.\n     ?s = (a, s) \\<and> ?y = step.E_inf (Seq a b, s) (r f) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r (\\<lambda>s. step.E_inf (b, s) (r f)))", "show ?case"], ["proof (prove)\nusing this:\n  \\<exists>a s.\n     ?s = (a, s) \\<and> ?y = step.E_inf (Seq a b, s) (r f) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>D\\<in>step (a, sa).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip\n                                then step.E_inf (b, snd t) (r f) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> step.E_inf (Seq a b, sa) (r f)", "by (rewrite in \"_ \\<le> \\<hole>\" E_inf_r_unfold)\n         (force intro!: INF_mono[OF bexI] nn_integral_mono intro: le_infI2\n                simp: E_inf_Skip image_comp)"], ["proof (state)\nthis:\n  (\\<Sqinter>D\\<in>step (a, sa).\n      \\<integral>\\<^sup>+ t. (if fst t = Skip\n                              then step.E_inf (b, snd t) (r f) else F t)\n                         \\<partial>measure_pmf D)\n  \\<le> step.E_inf (Seq a b, sa) (r f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  step.E_inf (a, s) (r (\\<lambda>s. step.E_inf (b, s) (r f)))\n  \\<le> step.E_inf (Seq a b, s) (r f)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma E_inf_While:\n  \"step.E_inf (While g c, s) (r f) =\n    lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f) =\n    lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "proof (rule antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n 2. lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n    \\<le> step.E_inf (While g c, s) (r f)", "have E_inf_While_step: \"step.E_inf (While g c, s) (r f) =\n    (if g s then step.E_inf (c, s) (r (\\<lambda>s. step.E_inf (While g c, s) (r f))) else f s)\" for f s"], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f) =\n    (if g s\n     then step.E_inf (c, s)\n           (r (\\<lambda>s. step.E_inf (While g c, s) (r f)))\n     else f s)", "by (rewrite E_inf_r_unfold) (simp add: min_absorb1 E_inf_Seq)"], ["proof (state)\nthis:\n  step.E_inf (While g c, ?s) (r ?f) =\n  (if g ?s\n   then step.E_inf (c, ?s)\n         (r (\\<lambda>s. step.E_inf (While g c, s) (r ?f)))\n   else ?f ?s)\n\ngoal (2 subgoals):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n 2. lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n    \\<le> step.E_inf (While g c, s) (r f)", "have \"mono (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)\" (is \"mono ?F\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)", "by (auto intro!: mono_r step.E_inf_mono simp: mono_def le_fun_def max.coboundedI2)"], ["proof (state)\nthis:\n  mono (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)\n\ngoal (2 subgoals):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n 2. lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n    \\<le> step.E_inf (While g c, s) (r f)", "then"], ["proof (chain)\npicking this:\n  mono (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)", "show \"lfp ?F s \\<le> step.E_inf (While g c, s) (r f)\""], ["proof (prove)\nusing this:\n  mono (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)\n\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n    \\<le> step.E_inf (While g c, s) (r f)", "proof (induction arbitrary: s rule: lfp_ordinal_induct[consumes 1])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s. S s \\<le> step.E_inf (While g c, s) (r f);\n        S \\<le> lfp (\\<lambda>F s.\n                        if g s then step.E_inf (c, s) (r F)\n                        else f s)\\<rbrakk>\n       \\<Longrightarrow> (if g s then step.E_inf (c, s) (r S) else f s)\n                         \\<le> step.E_inf (While g c, s) (r f)\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             S x \\<le> step.E_inf (While g c, x) (r f) \\<Longrightarrow>\n       (\\<Squnion> M) s \\<le> step.E_inf (While g c, s) (r f)", "case mono"], ["proof (state)\nthis:\n  S_ ?s \\<le> step.E_inf (While g c, ?s) (r f)\n  S_ \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s. S s \\<le> step.E_inf (While g c, s) (r f);\n        S \\<le> lfp (\\<lambda>F s.\n                        if g s then step.E_inf (c, s) (r F)\n                        else f s)\\<rbrakk>\n       \\<Longrightarrow> (if g s then step.E_inf (c, s) (r S) else f s)\n                         \\<le> step.E_inf (While g c, s) (r f)\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             S x \\<le> step.E_inf (While g c, x) (r f) \\<Longrightarrow>\n       (\\<Squnion> M) s \\<le> step.E_inf (While g c, s) (r f)", "then"], ["proof (chain)\npicking this:\n  S_ ?s \\<le> step.E_inf (While g c, ?s) (r f)\n  S_ \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)", "show ?case"], ["proof (prove)\nusing this:\n  S_ ?s \\<le> step.E_inf (While g c, ?s) (r f)\n  S_ \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s)\n\ngoal (1 subgoal):\n 1. (if g s then step.E_inf (c, s) (r S_) else f s)\n    \\<le> step.E_inf (While g c, s) (r f)", "by (rewrite E_inf_While_step) (auto intro!: step.E_inf_mono mono_r le_funI)"], ["proof (state)\nthis:\n  (if g s then step.E_inf (c, s) (r S_) else f s)\n  \\<le> step.E_inf (While g c, s) (r f)\n\ngoal (1 subgoal):\n 1. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             S x \\<le> step.E_inf (While g c, x) (r f) \\<Longrightarrow>\n       (\\<Squnion> M) s \\<le> step.E_inf (While g c, s) (r f)", "qed (auto intro: SUP_least)"], ["proof (state)\nthis:\n  lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n  \\<le> step.E_inf (While g c, s) (r f)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "define w where \"w F s = (\\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then if g (snd t) then F (c, snd t) else f (snd t) else F t) \\<partial>measure_pmf D)\"\n    for F s"], ["proof (state)\nthis:\n  w ?F ?s =\n  (\\<Sqinter>D\\<in>step ?s.\n      \\<integral>\\<^sup>+ t. (if fst t = Skip\n                              then if g (snd t) then ?F (c, snd t)\n                                   else f (snd t)\n                              else ?F t)\n                         \\<partial>measure_pmf D)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "have \"mono w\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono w", "by (auto simp: w_def mono_def le_fun_def intro!: INF_mono[OF bexI] nn_integral_mono) []"], ["proof (state)\nthis:\n  mono w\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "define d where \"d = c\""], ["proof (state)\nthis:\n  d = c\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "define t where \"t = Seq d (While g c)\""], ["proof (state)\nthis:\n  t = Seq d (While g c)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "then"], ["proof (chain)\npicking this:\n  t = Seq d (While g c)", "have \"(t = While g c \\<and> d = c \\<and> g s) \\<or> t = Seq d (While g c)\""], ["proof (prove)\nusing this:\n  t = Seq d (While g c)\n\ngoal (1 subgoal):\n 1. t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)", "by auto"], ["proof (state)\nthis:\n  t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "then"], ["proof (chain)\npicking this:\n  t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)", "have \"step.E_inf (t, s) (r f) \\<le> lfp w (d, s)\""], ["proof (prove)\nusing this:\n  t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)\n\ngoal (1 subgoal):\n 1. step.E_inf (t, s) (r f) \\<le> lfp w (d, s)", "proof (coinduction arbitrary: t d s rule: E_inf_r_induct)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>F t d sa.\n       \\<lbrakk>t = While g c \\<and> d = c \\<and> g sa \\<or>\n                t = Seq d (While g c);\n        \\<And>s y.\n           \\<exists>t d sa.\n              s = (t, sa) \\<and>\n              y = lfp w (d, sa) \\<and>\n              (t = While g c \\<and> d = c \\<and> g sa \\<or>\n               t = Seq d (While g c)) \\<Longrightarrow>\n           F s \\<le> y;\n        \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, sa).\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then f (snd t) else F t)\n          \\<partial>measure_pmf D)\n                         \\<le> lfp w (d, sa)", "case (step F t d s)"], ["proof (state)\nthis:\n  t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)\n  \\<exists>t d s.\n     ?s = (t, s) \\<and>\n     ?y = lfp w (d, s) \\<and>\n     (t = While g c \\<and> d = c \\<and> g s \\<or>\n      t = Seq d (While g c)) \\<Longrightarrow>\n  F ?s \\<le> ?y\n  F ?s \\<le> step.E_inf ?s (r f)\n\ngoal (1 subgoal):\n 1. \\<And>F t d sa.\n       \\<lbrakk>t = While g c \\<and> d = c \\<and> g sa \\<or>\n                t = Seq d (While g c);\n        \\<And>s y.\n           \\<exists>t d sa.\n              s = (t, sa) \\<and>\n              y = lfp w (d, sa) \\<and>\n              (t = While g c \\<and> d = c \\<and> g sa \\<or>\n               t = Seq d (While g c)) \\<Longrightarrow>\n           F s \\<le> y;\n        \\<And>s. F s \\<le> step.E_inf s (r f)\\<rbrakk>\n       \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, sa).\n                             \\<integral>\\<^sup>+ t.\n            (if fst t = Skip then f (snd t) else F t)\n          \\<partial>measure_pmf D)\n                         \\<le> lfp w (d, sa)", "from step(1)"], ["proof (chain)\npicking this:\n  t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)", "show ?case"], ["proof (prove)\nusing this:\n  t = While g c \\<and> d = c \\<and> g s \\<or> t = Seq d (While g c)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "proof (elim conjE disjE)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, s)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "{"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, s)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "fix s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g sa__\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, sa__).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, sa__)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, sa__).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, sa__)", "have \"\\<not> g s \\<Longrightarrow> F (While g c, s) \\<le> f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> g s \\<Longrightarrow> F (While g c, s) \\<le> f s", "using step(3)[of \"(While g c, s)\"]"], ["proof (prove)\nusing this:\n  F (While g c, s) \\<le> step.E_inf (While g c, s) (r f)\n\ngoal (1 subgoal):\n 1. \\<not> g s \\<Longrightarrow> F (While g c, s) \\<le> f s", "by (simp add: E_inf_While_step)"], ["proof (state)\nthis:\n  \\<not> g s \\<Longrightarrow> F (While g c, s) \\<le> f s\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g sa__\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, sa__).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, sa__)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, sa__).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, sa__)", "}"], ["proof (state)\nthis:\n  \\<not> g ?sb2 \\<Longrightarrow> F (While g c, ?sb2) \\<le> f ?sb2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, s)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "note [simp] = this"], ["proof (state)\nthis:\n  \\<not> g ?sb2 \\<Longrightarrow> F (While g c, ?sb2) \\<le> f ?sb2\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, s)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "assume \"t = Seq d (While g c)\""], ["proof (state)\nthis:\n  t = Seq d (While g c)\n\ngoal (2 subgoals):\n 1. \\<lbrakk>t = While g c; d = c; g s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, s)\n 2. t = Seq d (While g c) \\<Longrightarrow>\n    (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "then"], ["proof (chain)\npicking this:\n  t = Seq d (While g c)", "show ?thesis"], ["proof (prove)\nusing this:\n  t = Seq d (While g c)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter>D\\<in>step (t, s).\n        \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                           \\<partial>measure_pmf D)\n    \\<le> lfp w (d, s)", "by (rewrite lfp_unfold[OF \\<open>mono w\\<close>])\n           (auto simp: max.absorb2 w_def intro!: INF_mono[OF bexI] nn_integral_mono step)"], ["proof (state)\nthis:\n  (\\<Sqinter>D\\<in>step (t, s).\n      \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                         \\<partial>measure_pmf D)\n  \\<le> lfp w (d, s)\n\ngoal (1 subgoal):\n 1. \\<lbrakk>t = While g c; d = c; g s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (t, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else F t)\n       \\<partial>measure_pmf D)\n                      \\<le> lfp w (d, s)", "qed (auto intro!: step)"], ["proof (state)\nthis:\n  (\\<Sqinter>D\\<in>step (t, s).\n      \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t)\n                         \\<partial>measure_pmf D)\n  \\<le> lfp w (d, s)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  step.E_inf (t, s) (r f) \\<le> lfp w (d, s)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "also"], ["proof (state)\nthis:\n  step.E_inf (t, s) (r f) \\<le> lfp w (d, s)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "have \"lfp w = lfp (\\<lambda>F s. step.E_inf s (r (\\<lambda>s. if g s then F (c, s) else f s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp w =\n    lfp (\\<lambda>F s.\n            step.E_inf s (r (\\<lambda>s. if g s then F (c, s) else f s)))", "unfolding E_inf_r w_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip\n then if g (snd t) then F (c, snd t) else f (snd t) else F t)\n                                  \\<partial>measure_pmf D) =\n    lfp (\\<lambda>F.\n            lfp (\\<lambda>Fa s.\n                    \\<Sqinter>D\\<in>step s.\n                       \\<integral>\\<^sup>+ t.\n      (if fst t = Skip then if g (snd t) then F (c, snd t) else f (snd t)\n       else Fa t)\n    \\<partial>measure_pmf D))", "by (rule lfp_lfp[symmetric]) (auto simp: le_fun_def intro!: INF_mono[OF bexI] nn_integral_mono)"], ["proof (state)\nthis:\n  lfp w =\n  lfp (\\<lambda>F s.\n          step.E_inf s (r (\\<lambda>s. if g s then F (c, s) else f s)))\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "finally"], ["proof (chain)\npicking this:\n  step.E_inf (t, s) (r f)\n  \\<le> lfp (\\<lambda>F s.\n                step.E_inf s\n                 (r (\\<lambda>s. if g s then F (c, s) else f s)))\n         (d, s)", "have \"step.E_inf (While g c, s) (r f) \\<le> (if g s then \\<dots> (c, s) else f s)\""], ["proof (prove)\nusing this:\n  step.E_inf (t, s) (r f)\n  \\<le> lfp (\\<lambda>F s.\n                step.E_inf s\n                 (r (\\<lambda>s. if g s then F (c, s) else f s)))\n         (d, s)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> (if g s\n           then lfp (\\<lambda>F s.\n                        step.E_inf s\n                         (r (\\<lambda>s. if g s then F (c, s) else f s)))\n                 (c, s)\n           else f s)", "unfolding t_def d_def"], ["proof (prove)\nusing this:\n  step.E_inf (Seq c (While g c), s) (r f)\n  \\<le> lfp (\\<lambda>F s.\n                step.E_inf s\n                 (r (\\<lambda>s. if g s then F (c, s) else f s)))\n         (c, s)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> (if g s\n           then lfp (\\<lambda>F s.\n                        step.E_inf s\n                         (r (\\<lambda>s. if g s then F (c, s) else f s)))\n                 (c, s)\n           else f s)", "by (rewrite E_inf_r_unfold) simp"], ["proof (state)\nthis:\n  step.E_inf (While g c, s) (r f)\n  \\<le> (if g s\n         then lfp (\\<lambda>F s.\n                      step.E_inf s\n                       (r (\\<lambda>s. if g s then F (c, s) else f s)))\n               (c, s)\n         else f s)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "also"], ["proof (state)\nthis:\n  step.E_inf (While g c, s) (r f)\n  \\<le> (if g s\n         then lfp (\\<lambda>F s.\n                      step.E_inf s\n                       (r (\\<lambda>s. if g s then F (c, s) else f s)))\n               (c, s)\n         else f s)\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "have \"\\<dots> = lfp ?F s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (if g s\n     then lfp (\\<lambda>F s.\n                  step.E_inf s\n                   (r (\\<lambda>s. if g s then F (c, s) else f s)))\n           (c, s)\n     else f s) =\n    lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "by (rewrite lfp_rolling[symmetric, of \"\\<lambda>F s. if g s then F (c, s) else f s\"  \"\\<lambda>F s. step.E_inf s (r F)\"])\n       (auto simp: mono_def le_fun_def sup_apply[abs_def] if_distrib[of \"max 0\"] max.coboundedI2 max.absorb2\n                intro!: step.E_inf_mono mono_r cong del: if_weak_cong)"], ["proof (state)\nthis:\n  (if g s\n   then lfp (\\<lambda>F s.\n                step.E_inf s\n                 (r (\\<lambda>s. if g s then F (c, s) else f s)))\n         (c, s)\n   else f s) =\n  lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "finally"], ["proof (chain)\npicking this:\n  step.E_inf (While g c, s) (r f)\n  \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "show \"step.E_inf (While g c, s) (r f) \\<le> \\<dots>\""], ["proof (prove)\nusing this:\n  step.E_inf (While g c, s) (r f)\n  \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f)\n    \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s", "."], ["proof (state)\nthis:\n  step.E_inf (While g c, s) (r f)\n  \\<le> lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Equate Both Semantics\\<close>"], ["", "lemma E_inf_r_eq_wp: \"step.E_inf (c, s) (r f) = wp c f s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (c, s) (r f) = wp c f s", "proof (induction c arbitrary: f s)"], ["proof (state)\ngoal (8 subgoals):\n 1. \\<And>f s. step.E_inf (Skip, s) (r f) = wp Skip f s\n 2. \\<And>f s. step.E_inf (Abort, s) (r f) = wp Abort f s\n 3. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 4. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 5. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 6. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 7. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 8. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case Skip"], ["proof (state)\nthis:\n  \n\ngoal (8 subgoals):\n 1. \\<And>f s. step.E_inf (Skip, s) (r f) = wp Skip f s\n 2. \\<And>f s. step.E_inf (Abort, s) (r f) = wp Abort f s\n 3. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 4. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 5. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 6. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 7. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 8. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (Skip, s) (r f) = wp Skip f s", "by (simp add: E_inf_Skip)"], ["proof (state)\nthis:\n  step.E_inf (Skip, s) (r f) = wp Skip f s\n\ngoal (7 subgoals):\n 1. \\<And>f s. step.E_inf (Abort, s) (r f) = wp Abort f s\n 2. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 3. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 4. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 5. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 6. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 7. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>f s. step.E_inf (Abort, s) (r f) = wp Abort f s\n 2. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 3. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 4. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 5. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 6. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 7. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case Abort"], ["proof (state)\nthis:\n  \n\ngoal (7 subgoals):\n 1. \\<And>f s. step.E_inf (Abort, s) (r f) = wp Abort f s\n 2. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 3. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 4. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 5. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 6. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 7. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (Abort, s) (r f) = wp Abort f s", "proof (intro antisym)"], ["proof (state)\ngoal (2 subgoals):\n 1. step.E_inf (Abort, s) (r f) \\<le> wp Abort f s\n 2. wp Abort f s \\<le> step.E_inf (Abort, s) (r f)", "have \"lfp (\\<lambda>F s. \\<Sqinter>D\\<in>step s. \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t) else F t) \\<partial>measure_pmf D) \\<le>\n      (\\<lambda>s. if \\<exists>t. s = (Abort, t) then 0 else \\<top>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s.\n            \\<Sqinter>D\\<in>step s.\n               \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n else F t)\n                                  \\<partial>measure_pmf D)\n    \\<le> (\\<lambda>s. if \\<exists>t. s = (Abort, t) then 0 else \\<top>)", "by (intro lfp_lowerbound) (auto simp: le_fun_def)"], ["proof (state)\nthis:\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n  \\<le> (\\<lambda>s. if \\<exists>t. s = (Abort, t) then 0 else \\<top>)\n\ngoal (2 subgoals):\n 1. step.E_inf (Abort, s) (r f) \\<le> wp Abort f s\n 2. wp Abort f s \\<le> step.E_inf (Abort, s) (r f)", "then"], ["proof (chain)\npicking this:\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n  \\<le> (\\<lambda>s. if \\<exists>t. s = (Abort, t) then 0 else \\<top>)", "show \"step.E_inf (Abort, s) (r f) \\<le> wp Abort f s\""], ["proof (prove)\nusing this:\n  lfp (\\<lambda>F s.\n          \\<Sqinter>D\\<in>step s.\n             \\<integral>\\<^sup>+ t. (if fst t = Skip then f (snd t)\n                                     else F t)\n                                \\<partial>measure_pmf D)\n  \\<le> (\\<lambda>s. if \\<exists>t. s = (Abort, t) then 0 else \\<top>)\n\ngoal (1 subgoal):\n 1. step.E_inf (Abort, s) (r f) \\<le> wp Abort f s", "by (auto simp: E_inf_r le_fun_def split: if_split_asm)"], ["proof (state)\nthis:\n  step.E_inf (Abort, s) (r f) \\<le> wp Abort f s\n\ngoal (1 subgoal):\n 1. wp Abort f s \\<le> step.E_inf (Abort, s) (r f)", "qed simp"], ["proof (state)\nthis:\n  step.E_inf (Abort, s) (r f) = wp Abort f s\n\ngoal (6 subgoals):\n 1. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 3. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 4. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 5. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 6. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (6 subgoals):\n 1. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 3. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 4. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 5. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 6. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case Assign"], ["proof (state)\nthis:\n  \n\ngoal (6 subgoals):\n 1. \\<And>x f s. step.E_inf (Assign x, s) (r f) = wp (Assign x) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 3. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 4. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 5. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 6. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. step.E_inf (Assign x_, s) (r f) = wp (Assign x_) f s", "by (rewrite E_inf_r_unfold) (simp add: min_absorb1)"], ["proof (state)\nthis:\n  step.E_inf (Assign x_, s) (r f) = wp (Assign x_) f s\n\ngoal (5 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 4. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 5. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 4. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 5. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case (If b c1 c2)"], ["proof (state)\nthis:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (5 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (pgcl.If x1 c1 c2, s) (r f) =\n                         wp (pgcl.If x1 c1 c2) f s\n 4. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 5. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s", "show ?case"], ["proof (prove)\nusing this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (1 subgoal):\n 1. step.E_inf (pgcl.If b c1 c2, s) (r f) = wp (pgcl.If b c1 c2) f s", "by (rewrite E_inf_r_unfold) auto"], ["proof (state)\nthis:\n  step.E_inf (pgcl.If b c1 c2, s) (r f) = wp (pgcl.If b c1 c2) f s\n\ngoal (4 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 4. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (4 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 4. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case (Prob p c1 c2)"], ["proof (state)\nthis:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (4 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Prob x1 c1 c2, s) (r f) =\n                         wp (Prob x1 c1 c2) f s\n 4. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s", "show ?case"], ["proof (prove)\nusing this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (1 subgoal):\n 1. step.E_inf (Prob p c1 c2, s) (r f) = wp (Prob p c1 c2) f s", "apply (rewrite E_inf_r_unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s f. step.E_inf (c1, s) (r f) = wp c1 f s;\n     \\<And>s f. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sqinter>D\\<in>step (Prob p c1 c2, s).\n                          \\<integral>\\<^sup>+ t.\n         (if fst t = Skip then f (snd t) else step.E_inf t (r f))\n       \\<partial>measure_pmf D) =\n                      wp (Prob p c1 c2) f s", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s f. step.E_inf (c1, s) (r f) = wp c1 f s;\n     \\<And>s f. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n    \\<Longrightarrow> \\<integral>\\<^sup>+ t.\n     (if fst (if t then (c1, s) else (c2, s)) = Skip\n      then f (snd (if t then (c1, s) else (c2, s)))\n      else step.E_inf (if t then (c1, s) else (c2, s)) (r f))\n   \\<partial>measure_pmf p =\n                      ennreal (pmf p True) * wp c1 f s +\n                      ennreal (pmf p False) * wp c2 f s", "apply (rewrite nn_integral_measure_pmf_support[of \"UNIV::bool set\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>s f. step.E_inf (c1, s) (r f) = wp c1 f s;\n     \\<And>s f. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n    \\<Longrightarrow> finite UNIV\n 2. \\<And>t.\n       \\<lbrakk>\\<And>s f. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>s f. step.E_inf (c2, s) (r f) = wp c2 f s;\n        t \\<in> UNIV\\<rbrakk>\n       \\<Longrightarrow> 0 \\<le> (if fst (if t then (c1, s) else (c2, s)) =\n                                     Skip\n                                  then f\n  (snd (if t then (c1, s) else (c2, s)))\n                                  else step.E_inf\n  (if t then (c1, s) else (c2, s)) (r f))\n 3. \\<And>t.\n       \\<lbrakk>\\<And>s f. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>s f. step.E_inf (c2, s) (r f) = wp c2 f s; t \\<in> set_pmf p;\n        t \\<notin> UNIV\\<rbrakk>\n       \\<Longrightarrow> (if fst (if t then (c1, s) else (c2, s)) = Skip\n                          then f (snd (if t then (c1, s) else (c2, s)))\n                          else step.E_inf (if t then (c1, s) else (c2, s))\n                                (r f)) =\n                         0\n 4. \\<lbrakk>\\<And>s f. step.E_inf (c1, s) (r f) = wp c1 f s;\n     \\<And>s f. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n    \\<Longrightarrow> (\\<Sum>t\\<in>UNIV.\n                         (if fst (if t then (c1, s) else (c2, s)) = Skip\n                          then f (snd (if t then (c1, s) else (c2, s)))\n                          else step.E_inf (if t then (c1, s) else (c2, s))\n                                (r f)) *\n                         ennreal (pmf p t)) =\n                      ennreal (pmf p True) * wp c1 f s +\n                      ennreal (pmf p False) * wp c2 f s", "apply (auto simp: UNIV_bool ac_simps)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  step.E_inf (Prob p c1 c2, s) (r f) = wp (Prob p c1 c2) f s\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case (Par c1 c2)"], ["proof (state)\nthis:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (3 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Par c1 c2, s) (r f) =\n                         wp (Par c1 c2) f s\n 3. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s", "show ?case"], ["proof (prove)\nusing this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (1 subgoal):\n 1. step.E_inf (Par c1 c2, s) (r f) = wp (Par c1 c2) f s", "by (rewrite E_inf_r_unfold) (auto intro: inf.commute)"], ["proof (state)\nthis:\n  step.E_inf (Par c1 c2, s) (r f) = wp (Par c1 c2) f s\n\ngoal (2 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case (Seq c1 c2)"], ["proof (state)\nthis:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (2 subgoals):\n 1. \\<And>c1 c2 f s.\n       \\<lbrakk>\\<And>f s. step.E_inf (c1, s) (r f) = wp c1 f s;\n        \\<And>f s. step.E_inf (c2, s) (r f) = wp c2 f s\\<rbrakk>\n       \\<Longrightarrow> step.E_inf (Seq c1 c2, s) (r f) =\n                         wp (Seq c1 c2) f s\n 2. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s", "show ?case"], ["proof (prove)\nusing this:\n  step.E_inf (c1, ?s) (r ?f) = wp c1 ?f ?s\n  step.E_inf (c2, ?s) (r ?f) = wp c2 ?f ?s\n\ngoal (1 subgoal):\n 1. step.E_inf (Seq c1 c2, s) (r f) = wp (Seq c1 c2) f s", "by (simp add: E_inf_Seq)"], ["proof (state)\nthis:\n  step.E_inf (Seq c1 c2, s) (r f) = wp (Seq c1 c2) f s\n\ngoal (1 subgoal):\n 1. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "case (While g c)"], ["proof (state)\nthis:\n  step.E_inf (c, ?s) (r ?f) = wp c ?f ?s\n\ngoal (1 subgoal):\n 1. \\<And>x1 c f s.\n       (\\<And>f s. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n       step.E_inf (While x1 c, s) (r f) = wp (While x1 c) f s", "then"], ["proof (chain)\npicking this:\n  step.E_inf (c, ?s) (r ?f) = wp c ?f ?s", "show ?case"], ["proof (prove)\nusing this:\n  step.E_inf (c, ?s) (r ?f) = wp c ?f ?s\n\ngoal (1 subgoal):\n 1. step.E_inf (While g c, s) (r f) = wp (While g c) f s", "apply (simp add: E_inf_While)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s f. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n    lfp (\\<lambda>F s. if g s then step.E_inf (c, s) (r F) else f s) s =\n    lfp (\\<lambda>X s. if g s then wp c X s else f s) s", "apply (rewrite While)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s f. step.E_inf (c, s) (r f) = wp c f s) \\<Longrightarrow>\n    lfp (\\<lambda>F s. if g s then wp c F s else f s) s =\n    lfp (\\<lambda>X s. if g s then wp c X s else f s) s", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  step.E_inf (While g c, s) (r f) = wp (While g c) f s\n\ngoal:\nNo subgoals!", "qed"], ["", "end"]]}