{"file_name": "/home/qj213/afp-2021-10-22/thys/Markov_Models/Discrete_Time_Markov_Chain.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/Markov_Models", "problem_names": ["lemma sstart_eq': \"sstart \\<Omega> (x # xs) = {\\<omega>. shd \\<omega> = x \\<and> stl \\<omega> \\<in> sstart \\<Omega> xs}\"", "lemma measure_eq_stream_space_coinduct[consumes 1, case_names left right cont]:\n  assumes \"R N M\"\n  assumes R_1: \"\\<And>N M. R N M \\<Longrightarrow> N \\<in> space (prob_algebra (stream_space (count_space UNIV)))\"\n    and R_2: \"\\<And>N M. R N M \\<Longrightarrow> M \\<in> space (prob_algebra (stream_space (count_space UNIV)))\"\n    and cont: \"\\<And>N M. R N M \\<Longrightarrow> \\<exists>N' M' p. (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n      (\\<forall>x. N' x \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and> (\\<forall>x. M' x \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and> \n      N = (measure_pmf p \\<bind> (\\<lambda>y. distr (N' y) (stream_space (count_space UNIV)) ((##) y))) \\<and>\n      M = (measure_pmf p \\<bind> (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y)))\"\n  shows \"N = M\"", "lemma countable_reachable: \"countable (acc `` {s})\"", "lemma countable_acc: \"countable X \\<Longrightarrow> countable (acc `` X)\"", "lemma alw_enabled: \"enabled (shd \\<omega>) (stl \\<omega>) \\<Longrightarrow> alw (\\<lambda>\\<omega>. enabled (shd \\<omega>) (stl \\<omega>)) \\<omega>\"", "lemma in_S [measurable (raw)]: \"x \\<in> space S\"", "lemma enabled_Stream: \"enabled x (y ## \\<omega>) \\<longleftrightarrow> y \\<in> K x \\<and> enabled y \\<omega>\"", "lemma measurable_enabled[measurable]:\n  \"Measurable.pred (stream_space (count_space UNIV)) (enabled s)\" (is \"Measurable.pred ?S _\")", "lemma enabled_iff_snth: \"enabled s \\<omega> \\<longleftrightarrow> (\\<forall>i. \\<omega> !! i \\<in> K ((s ## \\<omega>) !! i))\"", "lemma force_enabled_in_set_pmf[simp, intro]: \"shd (force_enabled x \\<omega>) \\<in> K x\"", "lemma enabled_force_enabled: \"enabled x (force_enabled x \\<omega>)\"", "lemma force_enabled: \"enabled x \\<omega> \\<Longrightarrow> force_enabled x \\<omega> = \\<omega>\"", "lemma Ex_enabled: \"\\<exists>\\<omega>. enabled x \\<omega>\"", "lemma measurable_force_enabled: \"force_enabled x \\<in> measurable S S\"", "lemma sets_D: \"sets D = sets (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV))\"", "lemma space_D: \"space D = space (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV))\"", "lemma measurable_D_D: \"measurable D D =\n    measurable (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV)) (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV))\"", "lemma enabled_walk: \"enabled s (walk s \\<omega>)\"", "lemma measurable_walk[measurable]: \"walk s \\<in> measurable D S\"", "lemma space_T[simp]: \"space (T s) = space S\"", "lemma sets_T[simp, measurable_cong]: \"sets (T s) = sets S\"", "lemma measurable_T1[simp]: \"measurable (T s) M = measurable S M\"", "lemma measurable_T2[simp]: \"measurable M (T s) = measurable M S\"", "lemma in_measurable_T1[measurable (raw)]: \"f \\<in> measurable S M \\<Longrightarrow> f \\<in> measurable (T s) M\"", "lemma in_measurable_T2[measurable (raw)]: \"f \\<in> measurable M S \\<Longrightarrow> f \\<in> measurable M (T s)\"", "lemma AE_T_enabled: \"AE \\<omega> in T s. enabled s \\<omega>\"", "lemma emeasure_T_const[simp]: \"emeasure (T s) (space S) = 1\"", "lemma nn_integral_T:\n  assumes f[measurable]: \"f \\<in> borel_measurable S\"\n  shows \"(\\<integral>\\<^sup>+X. f X \\<partial>T s) = (\\<integral>\\<^sup>+t. (\\<integral>\\<^sup>+\\<omega>. f (t ## \\<omega>) \\<partial>T t) \\<partial>K s)\"", "lemma nn_integral_T_gfp:\n  fixes g\n  defines \"l \\<equiv> \\<lambda>f \\<omega>. g (shd \\<omega>) (f (stl \\<omega>))\"\n  assumes [measurable]: \"case_prod g \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\"\n  assumes cont_g[THEN inf_continuous_compose, order_continuous_intros]: \"\\<And>s. inf_continuous (g s)\"\n  assumes int_g: \"\\<And>f s. f \\<in> borel_measurable S \\<Longrightarrow> (\\<integral>\\<^sup>+\\<omega>. g s (f \\<omega>) \\<partial>T s) = g s (\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T s)\"\n  assumes bnd_g: \"\\<And>f s. g s f \\<le> b\" \"0 \\<le> b\" \"b < \\<infinity>\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. gfp l \\<omega> \\<partial>T s) = gfp (\\<lambda>f s. \\<integral>\\<^sup>+t. g t (f t) \\<partial>K s) s\"", "lemma nn_integral_T_lfp:\n  fixes g\n  defines \"l \\<equiv> \\<lambda>f \\<omega>. g (shd \\<omega>) (f (stl \\<omega>))\"\n  assumes [measurable]: \"case_prod g \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\"\n  assumes cont_g[THEN sup_continuous_compose, order_continuous_intros]: \"\\<And>s. sup_continuous (g s)\"\n  assumes int_g: \"\\<And>f s. f \\<in> borel_measurable S \\<Longrightarrow> (\\<integral>\\<^sup>+\\<omega>. g s (f \\<omega>) \\<partial>T s) = g s (\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T s)\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. lfp l \\<omega> \\<partial>T s) = lfp (\\<lambda>f s. \\<integral>\\<^sup>+t. g t (f t) \\<partial>K s) s\"", "lemma emeasure_Collect_T:\n  assumes f[measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {x\\<in>space (T s). P x} = (\\<integral>\\<^sup>+t. emeasure (T t) {x\\<in>space (T t). P (t ## x)} \\<partial>K s)\"", "lemma AE_T_iff:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"(AE \\<omega> in T x. P \\<omega>) \\<longleftrightarrow> (\\<forall>y\\<in>K x. AE \\<omega> in T y. P (y ## \\<omega>))\"", "lemma AE_T_alw:\n  assumes [measurable]: \"Measurable.pred S P\"\n  assumes P: \"\\<And>s. (x, s) \\<in> acc \\<Longrightarrow> AE \\<omega> in T s. P \\<omega>\"\n  shows \"AE \\<omega> in T x. alw P \\<omega>\"", "lemma emeasure_suntil_disj:\n  assumes [measurable]: \"Measurable.pred S P\"\n  assumes *: \"\\<And>t. AE \\<omega> in T t. \\<not> (P \\<sqinter> (HLD X \\<sqinter> nxt (HLD X suntil P))) \\<omega>\"\n  shows \"emeasure (T s) {\\<omega>\\<in>space (T s). (HLD X suntil P) \\<omega>} =\n    lfp (\\<lambda>F s. emeasure (T s) {\\<omega>\\<in>space (T s). P \\<omega>} + (\\<integral>\\<^sup>+t. F t * indicator X t \\<partial>K s)) s\"", "lemma emeasure_HLD_nxt:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {\\<omega>\\<in>space (T s). (X \\<cdot> P) \\<omega>} =\n    (\\<integral>\\<^sup>+x. emeasure (T x) {\\<omega>\\<in>space (T x). P \\<omega>} * indicator X x \\<partial>K s)\"", "lemma emeasure_HLD:\n  \"emeasure (T s) {\\<omega>\\<in>space (T s). HLD X \\<omega>} = emeasure (K s) X\"", "lemma emeasure_suntil_HLD:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {x\\<in>space (T s). (not (HLD {t}) suntil (HLD {t} aand nxt P)) x} =\n   emeasure (T s) {x\\<in>space (T s). ev (HLD {t}) x} * emeasure (T t) {x\\<in>space (T t). P x}\"", "lemma AE_suntil:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"(AE x in T s. (not (HLD {t}) suntil (HLD {t} aand nxt P)) x) \\<longleftrightarrow>\n   (AE x in T s. ev (HLD {t}) x) \\<and> (AE x in T t. P x)\"", "lemma AE_T_fair:\n  assumes \"t' \\<in> K t\"\n  shows \"AE \\<omega> in T s. fair t t' \\<omega>\"", "lemma enabled_imp_trancl:\n  assumes \"alw (HLD B) \\<omega>\" \"enabled s \\<omega>\"\n  shows \"alw (HLD (acc_on B `` {s})) \\<omega>\"", "lemma AE_T_reachable: \"AE \\<omega> in T s. alw (HLD (acc `` {s})) \\<omega>\"", "lemma AE_T_all_fair: \"AE \\<omega> in T s. \\<forall>(t,t')\\<in>SIGMA t:UNIV. K t. fair t t' \\<omega>\"", "lemma fair_imp: assumes \"fair t t' \\<omega>\" \"alw (ev (HLD {t})) \\<omega>\" shows \"alw (ev (HLD {t'})) \\<omega>\"", "lemma AE_T_ev_HLD:\n  assumes exiting: \"\\<And>t. (s, t) \\<in> acc_on (-B) \\<Longrightarrow> \\<exists>t'\\<in>B. (t, t') \\<in> acc\"\n  assumes fin: \"finite (acc_on (-B) `` {s})\"\n  shows \"AE \\<omega> in T s. ev (HLD B) \\<omega>\"", "lemma AE_T_ev_HLD':\n  assumes exiting: \"\\<And>s. s \\<notin> X \\<Longrightarrow> \\<exists>t\\<in>X. (s, t) \\<in> acc\"\n  assumes fin: \"finite (-X)\"\n  shows \"AE \\<omega> in T s. ev (HLD X) \\<omega>\"", "lemma AE_T_max_sfirst:\n  assumes [measurable]: \"Measurable.pred S X\"\n  assumes AE: \"AE \\<omega> in T c. sfirst X (c ## \\<omega>) < \\<infinity>\" and \"0 < e\"\n  shows \"\\<exists>N::nat. \\<P>(\\<omega> in T c. N < sfirst X (c ## \\<omega>)) < e\" (is \"\\<exists>N. ?P N < e\")", "lemma nn_integral_sfirst_finite':\n  assumes \"s \\<notin> H\"\n  assumes [simp]: \"finite (acc_on (-H) `` {s})\"\n  assumes until: \"AE \\<omega> in T s. ev (HLD H) \\<omega>\"\n  shows \"(\\<integral>\\<^sup>+ \\<omega>. sfirst (HLD H) \\<omega> \\<partial>T s) \\<noteq> \\<infinity>\"", "lemma nn_integral_sfirst_finite:\n  assumes [simp]: \"finite (acc_on (-H) `` {s})\"\n  assumes until: \"AE \\<omega> in T s. ev (HLD H) \\<omega>\"\n  shows \"(\\<integral>\\<^sup>+ \\<omega>. sfirst (HLD H) (s ## \\<omega>) \\<partial>T s) \\<noteq> \\<infinity>\"", "lemma prob_T:\n  assumes P: \"Measurable.pred S P\"\n  shows \"\\<P>(\\<omega> in T s. P \\<omega>) = (\\<integral>t. \\<P>(\\<omega> in T t. P (t ## \\<omega>)) \\<partial>K s)\"", "lemma T_subprob[measurable]: \"T \\<in> measurable (measure_pmf I) (subprob_algebra S)\"", "lemma distr_Stream_subprob:\n  \"(\\<lambda>s. distr (T s) S ((##) s)) \\<in> measurable (measure_pmf I) (subprob_algebra S)\"", "lemma sets_T': \"sets (T' I) = sets S\"", "lemma prob_space_T': \"prob_space (T' I)\"", "lemma AE_T':\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"(AE x in T' I. P x) \\<longleftrightarrow> (\\<forall>s\\<in>I. AE x in T s. P (s ## x))\"", "lemma emeasure_T':\n  assumes [measurable]: \"X \\<in> sets S\"\n  shows \"emeasure (T' I) X = (\\<integral>\\<^sup>+s. emeasure (T s) {\\<omega>\\<in>space S. s ## \\<omega> \\<in> X} \\<partial>I)\"", "lemma prob_T':\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"\\<P>(x in T' I. P x) = (\\<integral>s. \\<P>(x in T s. P (s ## x)) \\<partial>I)\"", "lemma T_eq_T': \"T s = T' (K s)\"", "lemma T_eq_bind: \"T s = (measure_pmf (K s) \\<bind> (\\<lambda>t. distr (T t) S ((##) t)))\"", "lemma T_split:\n  \"T s = (T s \\<bind> (\\<lambda>\\<omega>. distr (T ((s ## \\<omega>) !! n)) S (\\<lambda>\\<omega>'. stake n \\<omega> @- \\<omega>')))\"", "lemma nn_integral_T_split:\n  assumes f[measurable]: \"f \\<in> borel_measurable S\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T s) = (\\<integral>\\<^sup>+\\<omega>. (\\<integral>\\<^sup>+\\<omega>'. f (stake n \\<omega> @- \\<omega>') \\<partial>T ((s ## \\<omega>) !! n)) \\<partial>T s)\"", "lemma emeasure_T_split:\n  assumes P[measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {\\<omega>\\<in>space (T s). P \\<omega>} =\n      (\\<integral>\\<^sup>+\\<omega>. emeasure (T ((s ## \\<omega>) !! n)) {\\<omega>'\\<in>space (T ((s ## \\<omega>) !! n)). P (stake n \\<omega> @- \\<omega>')} \\<partial>T s)\"", "lemma prob_T_split:\n  assumes P[measurable]: \"Measurable.pred S P\"\n  shows \"\\<P>(\\<omega> in T s. P \\<omega>) = (\\<integral>\\<omega>. \\<P>(\\<omega>' in T ((s ## \\<omega>) !! n). P (stake n \\<omega> @- \\<omega>')) \\<partial>T s)\"", "lemma enabled_imp_alw:\n  \"(\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X \\<Longrightarrow> x \\<in> X \\<Longrightarrow> enabled x \\<omega> \\<Longrightarrow> alw (HLD X) \\<omega>\"", "lemma alw_HLD_iff_sconst:\n  \"alw (HLD {x}) \\<omega> \\<longleftrightarrow> \\<omega> = sconst x\"", "lemma enabled_iff_sconst:\n  assumes [simp]: \"set_pmf (K x) = {x}\" shows \"enabled x \\<omega> \\<longleftrightarrow> \\<omega> = sconst x\"", "lemma AE_sconst:\n  assumes [simp]: \"set_pmf (K x) = {x}\"\n  shows \"(AE \\<omega> in T x. P \\<omega>) \\<longleftrightarrow> P (sconst x)\"", "lemma ev_eq_lfp: \"ev P = lfp (\\<lambda>F \\<omega>. P \\<omega> \\<or> (\\<not> P \\<omega> \\<and> F (stl \\<omega>)))\"", "lemma INF_eq_zero_iff_ennreal: \"((\\<Sqinter>i\\<in>A. f i) = (0::ennreal)) = (\\<forall>x>0. \\<exists>i\\<in>A. f i < x)\"", "lemma inf_continuous_cmul: \n  fixes c :: ennreal\n  assumes f: \"inf_continuous f\" and c: \"c < \\<top>\" \n  shows \"inf_continuous (\\<lambda>x. c * f x)\"", "lemma AE_T_ev_HLD_infinite:\n  fixes X :: \"'s set\" and r :: real\n  assumes \"r < 1\"\n  assumes r: \"\\<And>x. x \\<in> X \\<Longrightarrow> measure (K x) X \\<le> r\"\n  shows \"AE \\<omega> in T x. ev (HLD (- X)) \\<omega>\"", "lemma space_rT: \"\\<omega> \\<in> space (rT x) \\<longleftrightarrow> enabled x \\<omega>\"", "lemma Collect_enabled_S[measurable]: \"Collect (enabled x) \\<in> sets S\"", "lemma space_rT_in_S: \"space (rT x) \\<in> sets S\"", "lemma sets_rT: \"A \\<in> sets (rT x) \\<longleftrightarrow> A \\<in> sets S \\<and> A \\<subseteq> {\\<omega>. enabled x \\<omega>}\"", "lemma prob_space_rT: \"prob_space (rT x)\"", "lemma measurable_force_enabled2[measurable]: \"force_enabled x \\<in> measurable S (rT x)\"", "lemma space_rT_not_empty[simp]: \"space (rT x) \\<noteq> {}\"", "lemma T_eq_bind': \"T x = do { y \\<leftarrow> measure_pmf (K x) ; \\<omega> \\<leftarrow> T y ; return S (y ## \\<omega>) }\"", "lemma rT_eq_bind: \"rT x = do { y \\<leftarrow> measure_pmf (K x) ; \\<omega> \\<leftarrow> rT y ; return (rT x) (y ## \\<omega>) }\"", "lemma snth_rT: \"(\\<lambda>x. x !! n) \\<in> measurable (rT x) (count_space (acc `` {x}))\"", "lemma T_coinduct[consumes 1, case_names prob sets cont]:\n  assumes \"R x M\"\n  assumes prob: \"\\<And>x M. R x M \\<Longrightarrow> prob_space M\"\n    and sets: \"\\<And>x M. R x M \\<Longrightarrow> sets M = sets S\"\n    and cont': \"\\<And>x M. R x M \\<Longrightarrow> \\<exists>M'. (\\<forall>y\\<in>K x. R y (M' y)) \\<and> (\\<forall>y. sets (M' y) = S \\<and> prob_space (M' y)) \\<and>\n      M = (measure_pmf (K x) \\<bind> (\\<lambda>y. distr (M' y) S ((##) y)))\"\n  shows \"T x = M\"", "lemma T_bisim:\n  assumes M: \"\\<And>x. prob_space (M x)\" \"\\<And>x. sets (M x) = sets S\"\n    and M_eq: \"\\<And>x. M x = (measure_pmf (K x) \\<bind> (\\<lambda>s. distr (M s) S ((##) s)))\"\n  shows \"T = M\"", "lemma T_subprob'[measurable]: \"T \\<in> measurable (count_space UNIV) (subprob_algebra S)\"", "lemma T_subprob''[simp]: \"T a \\<in> space (subprob_algebra S)\"", "lemma AE_not_suntil_coinduct [consumes 1, case_names \\<psi> \\<phi>]:\n  assumes \"P s\"\n  assumes \\<psi>: \"\\<And>s. P s \\<Longrightarrow> s \\<notin> \\<psi>\"\n  assumes \\<phi>: \"\\<And>s t. P s \\<Longrightarrow> s \\<in> \\<phi> \\<Longrightarrow> t \\<in> K s \\<Longrightarrow> P t\"\n  shows \"AE \\<omega> in T s. not (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)\"", "lemma AE_not_suntil_coinduct_strong [consumes 1, case_names \\<psi> \\<phi>]:\n  assumes \"P s\"\n  assumes P_\\<psi>: \"\\<And>s. P s \\<Longrightarrow> s \\<notin> \\<psi>\"\n  assumes P_\\<phi>: \"\\<And>s t. P s \\<Longrightarrow> s \\<in> \\<phi> \\<Longrightarrow> t \\<in> K s \\<Longrightarrow> P t \\<or>\n    (AE \\<omega> in T t. not (HLD \\<phi> suntil HLD \\<psi>) (t ## \\<omega>))\"\n  shows \"AE \\<omega> in T s. not (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)\" (is \"?nuntil s\")", "lemma measurable_\\<rho>[measurable]: \"\\<rho> \\<in> borel_measurable (count_space UNIV)\"", "lemma measurable_reward_until[measurable (raw)]:\n  assumes [measurable]: \"f \\<in> measurable M (count_space UNIV)\"\n  assumes [measurable]: \"g \\<in> measurable M S\"\n  shows \"(\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M\"", "lemma continuous_reward_until:\n  \"sup_continuous (\\<lambda>F s \\<omega>. if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + (F (shd \\<omega>) (stl \\<omega>)))\"", "lemma\n  shows reward_until_unfold: \"reward_until X s \\<omega> =\n        (if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + reward_until X (shd \\<omega>) (stl \\<omega>))\"\n      (is ?unfold)", "lemma reward_until_simps[simp]:\n  shows \"s \\<in> X \\<Longrightarrow> reward_until X s \\<omega> = 0\"\n    and \"s \\<notin> X \\<Longrightarrow> reward_until X s \\<omega> = \\<rho> s + \\<iota> s (shd \\<omega>) + reward_until X (shd \\<omega>) (stl \\<omega>)\"", "lemma reward_until_SCons[simp]:\n  \"reward_until X s (t ## \\<omega>) = (if s \\<in> X then 0 else \\<rho> s + \\<iota> s t + reward_until X t \\<omega>)\"", "lemma nn_integral_reward_until_finite:\n  assumes [simp]: \"finite (acc `` {s})\" (is \"finite (?R `` {s})\")\n  assumes \\<rho>: \"\\<And>t. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> \\<rho> t < \\<infinity>\"\n  assumes \\<iota>: \"\\<And>t t'. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> t' \\<in> K t \\<Longrightarrow> \\<iota> t t' < \\<infinity>\"\n  assumes ev: \"AE \\<omega> in T s. ev (HLD H) \\<omega>\"\n  shows \"(\\<integral>\\<^sup>+ \\<omega>. reward_until H s \\<omega> \\<partial>T s) \\<noteq> \\<infinity>\"", "lemma T_eq_rel_half[consumes 4, case_names prob sets cont]:\n  fixes R :: \"'s \\<Rightarrow> 't \\<Rightarrow> bool\" and f :: \"'s \\<Rightarrow> 't\" and S :: \"'s set\"\n  assumes R_def: \"\\<And>s t. R s t \\<longleftrightarrow> (s \\<in> S \\<and> f s = t)\"\n  assumes A[measurable]: \"A \\<in> sets (stream_space (count_space UNIV))\"\n    and B[measurable]: \"B \\<in> sets (stream_space (count_space UNIV))\"\n    and AB: \"rel_set_strong (stream_all2 R) A B\" and KL: \"rel_fun R (rel_pmf R) K L\" and xy: \"R x y\"\n  shows \"MC_syntax.T K x A = MC_syntax.T L y B\"", "lemma szip_rT[measurable]: \"(\\<lambda>(\\<omega>1, \\<omega>2). szip \\<omega>1 \\<omega>2) \\<in> measurable (K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2) S\"", "lemma measurable_szipE[measurable]: \"szip\\<^sub>E a b \\<in> measurable (K1.S \\<Otimes>\\<^sub>M K2.S) S\"", "lemma T_eq_prod: \"T = (\\<lambda>(x1, x2). do { \\<omega>1 \\<leftarrow> K1.T x1 ; \\<omega>2 \\<leftarrow> K2.T x2 ; return S (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)) })\"\n  (is \"_ = ?B\")", "lemma nn_integral_pT:\n  fixes f assumes [measurable]: \"f \\<in> borel_measurable S\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T (x, y)) = (\\<integral>\\<^sup>+\\<omega>1. \\<integral>\\<^sup>+\\<omega>2. f (szip\\<^sub>E x y (\\<omega>1, \\<omega>2)) \\<partial>K2.T y \\<partial>K1.T x)\"", "lemma prod_eq_prob_T:\n  assumes [measurable]: \"Measurable.pred K1.S P1\" \"Measurable.pred K2.S P2\"\n  shows \"\\<P>(\\<omega> in K1.T x1. P1 \\<omega>) * \\<P>(\\<omega> in K2.T x2. P2 \\<omega>) =\n    \\<P>(\\<omega> in T (x1, x2). P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>))\""], "translations": [["", "lemma sstart_eq': \"sstart \\<Omega> (x # xs) = {\\<omega>. shd \\<omega> = x \\<and> stl \\<omega> \\<in> sstart \\<Omega> xs}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sstart \\<Omega> (x # xs) =\n    {\\<omega>.\n     shd \\<omega> = x \\<and> stl \\<omega> \\<in> sstart \\<Omega> xs}", "by (auto simp: sstart_eq)"], ["", "lemma measure_eq_stream_space_coinduct[consumes 1, case_names left right cont]:\n  assumes \"R N M\"\n  assumes R_1: \"\\<And>N M. R N M \\<Longrightarrow> N \\<in> space (prob_algebra (stream_space (count_space UNIV)))\"\n    and R_2: \"\\<And>N M. R N M \\<Longrightarrow> M \\<in> space (prob_algebra (stream_space (count_space UNIV)))\"\n    and cont: \"\\<And>N M. R N M \\<Longrightarrow> \\<exists>N' M' p. (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n      (\\<forall>x. N' x \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and> (\\<forall>x. M' x \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and> \n      N = (measure_pmf p \\<bind> (\\<lambda>y. distr (N' y) (stream_space (count_space UNIV)) ((##) y))) \\<and>\n      M = (measure_pmf p \\<bind> (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y)))\"\n  shows \"N = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. N = M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. N = M", "let ?S = \"stream_space (count_space UNIV)\""], ["proof (state)\ngoal (1 subgoal):\n 1. N = M", "have \"\\<forall>N M. R N M \\<longrightarrow> (\\<exists>N' M' p. (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n      (\\<forall>x. N' x \\<in> space (prob_algebra ?S)) \\<and> (\\<forall>x. M' x \\<in> space (prob_algebra ?S)) \\<and>\n      N = (measure_pmf p \\<bind> (\\<lambda>y. distr (N' y) ?S ((##) y))) \\<and>\n      M = (measure_pmf p \\<bind> (\\<lambda>y. distr (M' y) ?S ((##) y))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>N M.\n       R N M \\<longrightarrow>\n       (\\<exists>N' M' p.\n           (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n           (\\<forall>x.\n               N' x\n               \\<in> space\n                      (prob_algebra\n                        (stream_space (count_space UNIV)))) \\<and>\n           (\\<forall>x.\n               M' x\n               \\<in> space\n                      (prob_algebra\n                        (stream_space (count_space UNIV)))) \\<and>\n           N =\n           measure_pmf p \\<bind>\n           (\\<lambda>y.\n               distr (N' y) (stream_space (count_space UNIV))\n                ((##) y)) \\<and>\n           M =\n           measure_pmf p \\<bind>\n           (\\<lambda>y.\n               distr (M' y) (stream_space (count_space UNIV)) ((##) y)))", "using cont"], ["proof (prove)\nusing this:\n  R ?N ?M \\<Longrightarrow>\n  \\<exists>N' M' p.\n     (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n     (\\<forall>x.\n         N' x\n         \\<in> space\n                (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n     (\\<forall>x.\n         M' x\n         \\<in> space\n                (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n     ?N =\n     measure_pmf p \\<bind>\n     (\\<lambda>y.\n         distr (N' y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n     ?M =\n     measure_pmf p \\<bind>\n     (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal (1 subgoal):\n 1. \\<forall>N M.\n       R N M \\<longrightarrow>\n       (\\<exists>N' M' p.\n           (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n           (\\<forall>x.\n               N' x\n               \\<in> space\n                      (prob_algebra\n                        (stream_space (count_space UNIV)))) \\<and>\n           (\\<forall>x.\n               M' x\n               \\<in> space\n                      (prob_algebra\n                        (stream_space (count_space UNIV)))) \\<and>\n           N =\n           measure_pmf p \\<bind>\n           (\\<lambda>y.\n               distr (N' y) (stream_space (count_space UNIV))\n                ((##) y)) \\<and>\n           M =\n           measure_pmf p \\<bind>\n           (\\<lambda>y.\n               distr (M' y) (stream_space (count_space UNIV)) ((##) y)))", "by auto"], ["proof (state)\nthis:\n  \\<forall>N M.\n     R N M \\<longrightarrow>\n     (\\<exists>N' M' p.\n         (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n         (\\<forall>x.\n             N' x\n             \\<in> space\n                    (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n         (\\<forall>x.\n             M' x\n             \\<in> space\n                    (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n         N =\n         measure_pmf p \\<bind>\n         (\\<lambda>y.\n             distr (N' y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n         M =\n         measure_pmf p \\<bind>\n         (\\<lambda>y.\n             distr (M' y) (stream_space (count_space UNIV)) ((##) y)))\n\ngoal (1 subgoal):\n 1. N = M", "then"], ["proof (chain)\npicking this:\n  \\<forall>N M.\n     R N M \\<longrightarrow>\n     (\\<exists>N' M' p.\n         (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n         (\\<forall>x.\n             N' x\n             \\<in> space\n                    (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n         (\\<forall>x.\n             M' x\n             \\<in> space\n                    (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n         N =\n         measure_pmf p \\<bind>\n         (\\<lambda>y.\n             distr (N' y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n         M =\n         measure_pmf p \\<bind>\n         (\\<lambda>y.\n             distr (M' y) (stream_space (count_space UNIV)) ((##) y)))", "obtain n m p where\n    p: \"\\<And>N M y. R N M \\<Longrightarrow> y \\<in> set_pmf (p N M) \\<Longrightarrow> R (n N M y) (m N M y)\" and\n    n: \"\\<And>N M x. R N M \\<Longrightarrow> n N M x \\<in> space (prob_algebra ?S)\" and\n    n_eq: \"\\<And>N M y. R N M \\<Longrightarrow> N = (measure_pmf (p N M) \\<bind> (\\<lambda>y. distr (n N M y) ?S ((##) y)))\" and\n    m: \"\\<And>N M x. R N M \\<Longrightarrow> m N M x \\<in> space (prob_algebra ?S)\" and\n    m_eq: \"\\<And>N M y. R N M \\<Longrightarrow> M = (measure_pmf (p N M) \\<bind> (\\<lambda>y. distr (m N M y) ?S ((##) y)))\""], ["proof (prove)\nusing this:\n  \\<forall>N M.\n     R N M \\<longrightarrow>\n     (\\<exists>N' M' p.\n         (\\<forall>y\\<in>set_pmf p. R (N' y) (M' y)) \\<and>\n         (\\<forall>x.\n             N' x\n             \\<in> space\n                    (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n         (\\<forall>x.\n             M' x\n             \\<in> space\n                    (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n         N =\n         measure_pmf p \\<bind>\n         (\\<lambda>y.\n             distr (N' y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n         M =\n         measure_pmf p \\<bind>\n         (\\<lambda>y.\n             distr (M' y) (stream_space (count_space UNIV)) ((##) y)))\n\ngoal (1 subgoal):\n 1. (\\<And>p n m.\n        \\<lbrakk>\\<And>N M y.\n                    \\<lbrakk>R N M; y \\<in> set_pmf (p N M)\\<rbrakk>\n                    \\<Longrightarrow> R (n N M y) (m N M y);\n         \\<And>N M x.\n            R N M \\<Longrightarrow>\n            n N M x\n            \\<in> space (prob_algebra (stream_space (count_space UNIV)));\n         \\<And>N M y.\n            R N M \\<Longrightarrow>\n            N =\n            measure_pmf (p N M) \\<bind>\n            (\\<lambda>y.\n                distr (n N M y) (stream_space (count_space UNIV)) ((##) y));\n         \\<And>N M x.\n            R N M \\<Longrightarrow>\n            m N M x\n            \\<in> space (prob_algebra (stream_space (count_space UNIV)));\n         \\<And>N M y.\n            R N M \\<Longrightarrow>\n            M =\n            measure_pmf (p N M) \\<bind>\n            (\\<lambda>y.\n                distr (m N M y) (stream_space (count_space UNIV))\n                 ((##) y))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "unfolding choice_iff' choice_iff"], ["proof (prove)\nusing this:\n  \\<exists>f fa fb.\n     \\<forall>N M.\n        R N M \\<longrightarrow>\n        (\\<forall>y\\<in>set_pmf (fb N M). R (f N M y) (fa N M y)) \\<and>\n        (\\<forall>x.\n            f N M x\n            \\<in> space\n                   (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n        (\\<forall>x.\n            fa N M x\n            \\<in> space\n                   (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n        N =\n        measure_pmf (fb N M) \\<bind>\n        (\\<lambda>y.\n            distr (f N M y) (stream_space (count_space UNIV))\n             ((##) y)) \\<and>\n        M =\n        measure_pmf (fb N M) \\<bind>\n        (\\<lambda>y.\n            distr (fa N M y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal (1 subgoal):\n 1. (\\<And>p n m.\n        \\<lbrakk>\\<And>N M y.\n                    \\<lbrakk>R N M; y \\<in> set_pmf (p N M)\\<rbrakk>\n                    \\<Longrightarrow> R (n N M y) (m N M y);\n         \\<And>N M x.\n            R N M \\<Longrightarrow>\n            n N M x\n            \\<in> space (prob_algebra (stream_space (count_space UNIV)));\n         \\<And>N M y.\n            R N M \\<Longrightarrow>\n            N =\n            measure_pmf (p N M) \\<bind>\n            (\\<lambda>y.\n                distr (n N M y) (stream_space (count_space UNIV)) ((##) y));\n         \\<And>N M x.\n            R N M \\<Longrightarrow>\n            m N M x\n            \\<in> space (prob_algebra (stream_space (count_space UNIV)));\n         \\<And>N M y.\n            R N M \\<Longrightarrow>\n            M =\n            measure_pmf (p N M) \\<bind>\n            (\\<lambda>y.\n                distr (m N M y) (stream_space (count_space UNIV))\n                 ((##) y))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  \\<lbrakk>R ?N3 ?M3; ?y3 \\<in> set_pmf (p ?N3 ?M3)\\<rbrakk>\n  \\<Longrightarrow> R (n ?N3 ?M3 ?y3) (m ?N3 ?M3 ?y3)\n  R ?N3 ?M3 \\<Longrightarrow>\n  n ?N3 ?M3 ?x3 \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n  R ?N3 ?M3 \\<Longrightarrow>\n  ?N3 =\n  measure_pmf (p ?N3 ?M3) \\<bind>\n  (\\<lambda>y.\n      distr (n ?N3 ?M3 y) (stream_space (count_space UNIV)) ((##) y))\n  R ?N3 ?M3 \\<Longrightarrow>\n  m ?N3 ?M3 ?x3 \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n  R ?N3 ?M3 \\<Longrightarrow>\n  ?M3 =\n  measure_pmf (p ?N3 ?M3) \\<bind>\n  (\\<lambda>y.\n      distr (m ?N3 ?M3 y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal (1 subgoal):\n 1. N = M", "define A where \"A = (SIGMA nm:UNIV. (\\<lambda>x. (n (fst nm) (snd nm) x, m (fst nm) (snd nm) x)) ` p (fst nm) (snd nm))\""], ["proof (state)\nthis:\n  A =\n  (SIGMA nm:UNIV.\n      (\\<lambda>x. (n (fst nm) (snd nm) x, m (fst nm) (snd nm) x)) `\n      set_pmf (p (fst nm) (snd nm)))\n\ngoal (1 subgoal):\n 1. N = M", "have A_singleton: \"A `` {nm} = (\\<lambda>x. (n (fst nm) (snd nm) x, m (fst nm) (snd nm) x)) ` p (fst nm) (snd nm)\" for nm"], ["proof (prove)\ngoal (1 subgoal):\n 1. A `` {nm} =\n    (\\<lambda>x. (n (fst nm) (snd nm) x, m (fst nm) (snd nm) x)) `\n    set_pmf (p (fst nm) (snd nm))", "by (auto simp: A_def)"], ["proof (state)\nthis:\n  A `` {?nm3} =\n  (\\<lambda>x. (n (fst ?nm3) (snd ?nm3) x, m (fst ?nm3) (snd ?nm3) x)) `\n  set_pmf (p (fst ?nm3) (snd ?nm3))\n\ngoal (1 subgoal):\n 1. N = M", "have sets_n[measurable_cong, simp]: \"sets (n N M y) = sets ?S\" if \"R N M\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (n N M y) = sets (stream_space (count_space UNIV))", "using n[OF that, of y]"], ["proof (prove)\nusing this:\n  n N M y \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. sets (n N M y) = sets (stream_space (count_space UNIV))", "by (auto simp: space_prob_algebra)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  sets (n ?N3 ?M3 ?y3) = sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. N = M", "have sets_m[measurable_cong, simp]: \"sets (m N M y) = sets ?S\" if \"R N M\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (m N M y) = sets (stream_space (count_space UNIV))", "using m[OF that, of y]"], ["proof (prove)\nusing this:\n  m N M y \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. sets (m N M y) = sets (stream_space (count_space UNIV))", "by (auto simp: space_prob_algebra)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  sets (m ?N3 ?M3 ?y3) = sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. N = M", "have [simp]: \"R N M \\<Longrightarrow> prob_space (n N M y)\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow> prob_space (n N M y)", "using n[of N M y]"], ["proof (prove)\nusing this:\n  R N M \\<Longrightarrow>\n  n N M y \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow> prob_space (n N M y)", "by (auto simp: space_prob_algebra)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow> prob_space (n ?N3 ?M3 ?y3)\n\ngoal (1 subgoal):\n 1. N = M", "have [simp]: \"R N M \\<Longrightarrow> prob_space (m N M y)\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow> prob_space (m N M y)", "using m[of N M y]"], ["proof (prove)\nusing this:\n  R N M \\<Longrightarrow>\n  m N M y \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow> prob_space (m N M y)", "by (auto simp: space_prob_algebra)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow> prob_space (m ?N3 ?M3 ?y3)\n\ngoal (1 subgoal):\n 1. N = M", "have [measurable]: \"R N M \\<Longrightarrow> n N M \\<in> count_space UNIV \\<rightarrow>\\<^sub>M subprob_algebra ?S\" for N M"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    n N M\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))", "by (rule measurable_prob_algebraD) (auto intro: n)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  n ?N3 ?M3\n  \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n        subprob_algebra (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. N = M", "have [measurable]: \"R N M \\<Longrightarrow> m N M \\<in> count_space UNIV \\<rightarrow>\\<^sub>M subprob_algebra ?S\" for N M"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    m N M\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))", "by (rule measurable_prob_algebraD) (auto intro: m)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  m ?N3 ?M3\n  \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n        subprob_algebra (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. N = M", "define n' where \"n' N M y = distr (n N M y) ?S ((##) y)\" for N M y"], ["proof (state)\nthis:\n  n' ?N ?M ?y =\n  distr (n ?N ?M ?y) (stream_space (count_space UNIV)) ((##) ?y)\n\ngoal (1 subgoal):\n 1. N = M", "define m' where \"m' N M y = distr (m N M y) ?S ((##) y)\" for N M y"], ["proof (state)\nthis:\n  m' ?N ?M ?y =\n  distr (m ?N ?M ?y) (stream_space (count_space UNIV)) ((##) ?y)\n\ngoal (1 subgoal):\n 1. N = M", "have n'_eq: \"R N M \\<Longrightarrow> N = (measure_pmf (p N M) \\<bind> n' N M)\" for N M"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow> N = measure_pmf (p N M) \\<bind> n' N M", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    N =\n    measure_pmf (p N M) \\<bind>\n    (\\<lambda>y. distr (n N M y) (stream_space (count_space UNIV)) ((##) y))", "by (rule n_eq)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  ?N3 = measure_pmf (p ?N3 ?M3) \\<bind> n' ?N3 ?M3\n\ngoal (1 subgoal):\n 1. N = M", "have m'_eq: \"R N M \\<Longrightarrow> M = (measure_pmf (p N M) \\<bind> m' N M)\" for N M"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow> M = measure_pmf (p N M) \\<bind> m' N M", "unfolding m'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    M =\n    measure_pmf (p N M) \\<bind>\n    (\\<lambda>y. distr (m N M y) (stream_space (count_space UNIV)) ((##) y))", "by (rule m_eq)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  ?M3 = measure_pmf (p ?N3 ?M3) \\<bind> m' ?N3 ?M3\n\ngoal (1 subgoal):\n 1. N = M", "have [measurable]: \"R N M \\<Longrightarrow> n' N M \\<in> count_space UNIV \\<rightarrow>\\<^sub>M subprob_algebra ?S\" for N M"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    n' N M\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    (\\<lambda>y. distr (n N M y) (stream_space (count_space UNIV)) ((##) y))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))", "by (rule measurable_distr2[where M=\"?S\"]) measurable"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  n' ?N3 ?M3\n  \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n        subprob_algebra (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. N = M", "have [measurable]: \"R N M \\<Longrightarrow> m' N M \\<in> count_space UNIV \\<rightarrow>\\<^sub>M subprob_algebra ?S\" for N M"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    m' N M\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))", "unfolding m'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    (\\<lambda>y. distr (m N M y) (stream_space (count_space UNIV)) ((##) y))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))", "by (rule measurable_distr2[where M=\"?S\"]) measurable"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  m' ?N3 ?M3\n  \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n        subprob_algebra (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. N = M", "have n'_shd: \"R N M \\<Longrightarrow> distr (n' N M y) (count_space UNIV) shd = measure_pmf (return_pmf y)\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (n' N M y) (count_space UNIV) shd = measure_pmf (return_pmf y)", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (distr (n N M y) (stream_space (count_space UNIV)) ((##) y))\n     (count_space UNIV) shd =\n    measure_pmf (return_pmf y)", "by (subst distr_distr) (auto simp: comp_def prob_space.distr_const return_pmf.rep_eq)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  distr (n' ?N3 ?M3 ?y3) (count_space UNIV) shd =\n  measure_pmf (return_pmf ?y3)\n\ngoal (1 subgoal):\n 1. N = M", "have m'_shd: \"R N M \\<Longrightarrow> distr (m' N M y) (count_space UNIV) shd = measure_pmf (return_pmf y)\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (m' N M y) (count_space UNIV) shd = measure_pmf (return_pmf y)", "unfolding m'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (distr (m N M y) (stream_space (count_space UNIV)) ((##) y))\n     (count_space UNIV) shd =\n    measure_pmf (return_pmf y)", "by (subst distr_distr) (auto simp: comp_def prob_space.distr_const return_pmf.rep_eq)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  distr (m' ?N3 ?M3 ?y3) (count_space UNIV) shd =\n  measure_pmf (return_pmf ?y3)\n\ngoal (1 subgoal):\n 1. N = M", "have n'_stl: \"R N M \\<Longrightarrow> distr (n' N M y) ?S stl = n N M y\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (n' N M y) (stream_space (count_space UNIV)) stl = n N M y", "unfolding n'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (distr (n N M y) (stream_space (count_space UNIV)) ((##) y))\n     (stream_space (count_space UNIV)) stl =\n    n N M y", "by (subst distr_distr) (auto simp: comp_def distr_id2)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  distr (n' ?N3 ?M3 ?y3) (stream_space (count_space UNIV)) stl =\n  n ?N3 ?M3 ?y3\n\ngoal (1 subgoal):\n 1. N = M", "have m'_stl: \"R N M \\<Longrightarrow> distr (m' N M y) ?S stl = m N M y\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (m' N M y) (stream_space (count_space UNIV)) stl = m N M y", "unfolding m'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N M \\<Longrightarrow>\n    distr (distr (m N M y) (stream_space (count_space UNIV)) ((##) y))\n     (stream_space (count_space UNIV)) stl =\n    m N M y", "by (subst distr_distr) (auto simp: comp_def distr_id2)"], ["proof (state)\nthis:\n  R ?N3 ?M3 \\<Longrightarrow>\n  distr (m' ?N3 ?M3 ?y3) (stream_space (count_space UNIV)) stl =\n  m ?N3 ?M3 ?y3\n\ngoal (1 subgoal):\n 1. N = M", "define F where \"F = (A\\<^sup>* `` {(N, M)})\""], ["proof (state)\nthis:\n  F = A\\<^sup>* `` {(N, M)}\n\ngoal (1 subgoal):\n 1. N = M", "have \"countable F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable F", "unfolding F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (A\\<^sup>* `` {(N, M)})", "apply (intro countable_rtrancl countable_insert[of _ \"(N, M)\"] countable_empty)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>Y. countable Y \\<Longrightarrow> countable (A `` Y)", "apply (rule countable_Image)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Y y.\n       \\<lbrakk>countable Y; y \\<in> Y\\<rbrakk>\n       \\<Longrightarrow> countable (A `` {y})\n 2. \\<And>Y. countable Y \\<Longrightarrow> countable Y", "apply (auto simp: A_singleton)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  countable F\n\ngoal (1 subgoal):\n 1. N = M", "have F_NM[simp]: \"(N, M) \\<in> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, M) \\<in> F", "unfolding F_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (N, M) \\<in> A\\<^sup>* `` {(N, M)}", "by auto"], ["proof (state)\nthis:\n  (N, M) \\<in> F\n\ngoal (1 subgoal):\n 1. N = M", "have R_F[simp]: \"R N' M'\" if \"(N', M') \\<in> F\" for N' M'"], ["proof (prove)\ngoal (1 subgoal):\n 1. R N' M'", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. R N' M'", "have \"((N, M), (N', M')) \\<in> A\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((N, M), N', M') \\<in> A\\<^sup>*", "using that"], ["proof (prove)\nusing this:\n  (N', M') \\<in> F\n\ngoal (1 subgoal):\n 1. ((N, M), N', M') \\<in> A\\<^sup>*", "by (auto simp: F_def)"], ["proof (state)\nthis:\n  ((N, M), N', M') \\<in> A\\<^sup>*\n\ngoal (1 subgoal):\n 1. R N' M'", "then"], ["proof (chain)\npicking this:\n  ((N, M), N', M') \\<in> A\\<^sup>*", "show \"R N' M'\""], ["proof (prove)\nusing this:\n  ((N, M), N', M') \\<in> A\\<^sup>*\n\ngoal (1 subgoal):\n 1. R N' M'", "by (induction p==\"(N', M')\" arbitrary: N' M' rule: rtrancl_induct) (auto simp: \\<open>R N M\\<close> A_def p)"], ["proof (state)\nthis:\n  R N' M'\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?N'3, ?M'3) \\<in> F \\<Longrightarrow> R ?N'3 ?M'3\n\ngoal (1 subgoal):\n 1. N = M", "have nm_F: \"(n N' M' y, m N' M' y) \\<in> F\" if \"y \\<in> p N' M'\" \"(N', M') \\<in> F\" for N' M' y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (n N' M' y, m N' M' y) \\<in> F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (n N' M' y, m N' M' y) \\<in> F", "have *: \"((N, M), (N', M')) \\<in> A\\<^sup>*\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ((N, M), N', M') \\<in> A\\<^sup>*", "using that"], ["proof (prove)\nusing this:\n  y \\<in> set_pmf (p N' M')\n  (N', M') \\<in> F\n\ngoal (1 subgoal):\n 1. ((N, M), N', M') \\<in> A\\<^sup>*", "by (auto simp: F_def)"], ["proof (state)\nthis:\n  ((N, M), N', M') \\<in> A\\<^sup>*\n\ngoal (1 subgoal):\n 1. (n N' M' y, m N' M' y) \\<in> F", "with that"], ["proof (chain)\npicking this:\n  y \\<in> set_pmf (p N' M')\n  (N', M') \\<in> F\n  ((N, M), N', M') \\<in> A\\<^sup>*", "show ?thesis"], ["proof (prove)\nusing this:\n  y \\<in> set_pmf (p N' M')\n  (N', M') \\<in> F\n  ((N, M), N', M') \\<in> A\\<^sup>*\n\ngoal (1 subgoal):\n 1. (n N' M' y, m N' M' y) \\<in> F", "apply (simp add: F_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in> set_pmf (p N' M');\n     ((N, M), N', M') \\<in> A\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> ((N, M), n N' M' y, m N' M' y) \\<in> A\\<^sup>*", "apply (intro rtrancl.rtrancl_into_rtrancl[OF *])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>y \\<in> set_pmf (p N' M');\n     ((N, M), N', M') \\<in> A\\<^sup>*\\<rbrakk>\n    \\<Longrightarrow> ((N', M'), n N' M' y, m N' M' y) \\<in> A", "apply (auto simp: A_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (n N' M' y, m N' M' y) \\<in> F\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>?y3 \\<in> set_pmf (p ?N'3 ?M'3); (?N'3, ?M'3) \\<in> F\\<rbrakk>\n  \\<Longrightarrow> (n ?N'3 ?M'3 ?y3, m ?N'3 ?M'3 ?y3) \\<in> F\n\ngoal (1 subgoal):\n 1. N = M", "define \\<Omega> where \"\\<Omega> = (\\<Union>(n, m)\\<in>F. set_pmf (p n m))\""], ["proof (state)\nthis:\n  \\<Omega> = (\\<Union>(n, m)\\<in>F. set_pmf (p n m))\n\ngoal (1 subgoal):\n 1. N = M", "have [measurable]: \"\\<Omega> \\<in> sets (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Omega> \\<in> sets (count_space UNIV)", "by auto"], ["proof (state)\nthis:\n  \\<Omega> \\<in> sets (count_space UNIV)\n\ngoal (1 subgoal):\n 1. N = M", "have in_\\<Omega>: \"(N, M) \\<in> F \\<Longrightarrow> y \\<in> p N M \\<Longrightarrow> y \\<in> \\<Omega>\" for N M y"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(N, M) \\<in> F; y \\<in> set_pmf (p N M)\\<rbrakk>\n    \\<Longrightarrow> y \\<in> \\<Omega>", "by (auto simp: \\<Omega>_def Bex_def)"], ["proof (state)\nthis:\n  \\<lbrakk>(?N3, ?M3) \\<in> F; ?y3 \\<in> set_pmf (p ?N3 ?M3)\\<rbrakk>\n  \\<Longrightarrow> ?y3 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. N = M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. N = M", "proof (intro stream_space_eq_sstart)"], ["proof (state)\ngoal (8 subgoals):\n 1. countable ?S\n 2. prob_space N\n 3. prob_space M\n 4. AE x in N. x \\<in> streams ?S\n 5. AE x in M. x \\<in> streams ?S\n 6. sets N = sets (stream_space (count_space UNIV))\n 7. sets M = sets (stream_space (count_space UNIV))\n 8. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists ?S\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart ?S xs) =\n                         emeasure M (sstart ?S xs)", "from \\<open>countable F\\<close>"], ["proof (chain)\npicking this:\n  countable F", "show \"countable \\<Omega>\""], ["proof (prove)\nusing this:\n  countable F\n\ngoal (1 subgoal):\n 1. countable \\<Omega>", "by (auto simp add: \\<Omega>_def)"], ["proof (state)\nthis:\n  countable \\<Omega>\n\ngoal (7 subgoals):\n 1. prob_space N\n 2. prob_space M\n 3. AE x in N. x \\<in> streams \\<Omega>\n 4. AE x in M. x \\<in> streams \\<Omega>\n 5. sets N = sets (stream_space (count_space UNIV))\n 6. sets M = sets (stream_space (count_space UNIV))\n 7. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "show \"prob_space N\" \"prob_space M\" \"sets N = sets ?S\" \"sets M = sets ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (prob_space N &&& prob_space M) &&&\n    sets N = sets (stream_space (count_space UNIV)) &&&\n    sets M = sets (stream_space (count_space UNIV))", "using R_1[OF \\<open>R N M\\<close>] R_2[OF \\<open>R N M\\<close>]"], ["proof (prove)\nusing this:\n  N \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n  M \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. (prob_space N &&& prob_space M) &&&\n    sets N = sets (stream_space (count_space UNIV)) &&&\n    sets M = sets (stream_space (count_space UNIV))", "by (auto simp add: space_prob_algebra)"], ["proof (state)\nthis:\n  prob_space N\n  prob_space M\n  sets N = sets (stream_space (count_space UNIV))\n  sets M = sets (stream_space (count_space UNIV))\n\ngoal (3 subgoals):\n 1. AE x in N. x \\<in> streams \\<Omega>\n 2. AE x in M. x \\<in> streams \\<Omega>\n 3. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "have \"\\<And>N M. (N, M) \\<in> F \\<Longrightarrow> AE x in N. x !! i \\<in> \\<Omega>\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in N. x !! i \\<in> \\<Omega>", "proof (induction i)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in N. x !! 0 \\<in> \\<Omega>\n 2. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "case 0"], ["proof (state)\nthis:\n  (N, M) \\<in> F\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in N. x !! 0 \\<in> \\<Omega>\n 2. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "note NM = 0[THEN R_F, simp]"], ["proof (state)\nthis:\n  R N M\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in N. x !! 0 \\<in> \\<Omega>\n 2. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in N. x !! 0 \\<in> \\<Omega>", "apply (subst n'_eq[OF NM])"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M) \\<bind> n' N M. x !! 0 \\<in> \\<Omega>", "apply (subst AE_bind[where B=\"?S\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (n' N M)\n 2. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>x. x !! 0 \\<in> \\<Omega>)\n 3. AE x in measure_pmf (p N M). AE y in n' N M x. y !! 0 \\<in> \\<Omega>", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M). AE y in n' N M x. y !! 0 \\<in> \\<Omega>", "apply (auto intro!: AE_distrD[where f=shd and M'=\"count_space UNIV\"]\n                    simp: AE_measure_pmf_iff n[OF NM] n'_shd in_\\<Omega>[OF 0] cong: AE_cong_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AE x in N. x !! 0 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "case (Suc i)"], ["proof (state)\nthis:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x !! i \\<in> \\<Omega>\n  (N, M) \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "note NM = Suc(2)[THEN R_F, simp]"], ["proof (state)\nthis:\n  R N M\n\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in N. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in N. x !! Suc i \\<in> \\<Omega>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in N. x !! Suc i \\<in> \\<Omega>", "apply (subst n'_eq[OF NM])"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M) \\<bind> n' N M. x !! Suc i \\<in> \\<Omega>", "apply (subst AE_bind[where B=\"?S\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (n' N M)\n 2. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>x. x !! Suc i \\<in> \\<Omega>)\n 3. AE x in measure_pmf (p N M). AE y in n' N M x. y !! Suc i \\<in> \\<Omega>", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M). AE y in n' N M x. y !! Suc i \\<in> \\<Omega>", "apply (auto intro!: AE_distrD[where f=stl and M'=\"?S\"] Suc(1)[OF nm_F] Suc(2)\n          simp: AE_measure_pmf_iff n'_stl cong: AE_cong_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AE x in N. x !! Suc i \\<in> \\<Omega>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x !! ?i4 \\<in> \\<Omega>\n\ngoal (3 subgoals):\n 1. AE x in N. x \\<in> streams \\<Omega>\n 2. AE x in M. x \\<in> streams \\<Omega>\n 3. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "then"], ["proof (chain)\npicking this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x !! ?i4 \\<in> \\<Omega>", "have AE_N: \"\\<And>N M. (N, M) \\<in> F \\<Longrightarrow> AE x in N. x \\<in> streams \\<Omega>\""], ["proof (prove)\nusing this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x !! ?i4 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in N. x \\<in> streams \\<Omega>", "unfolding streams_iff_snth AE_all_countable"], ["proof (prove)\nusing this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x !! ?i4 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow>\n       \\<forall>n. AE x in N. x !! n \\<in> \\<Omega>", "by auto"], ["proof (state)\nthis:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x \\<in> streams \\<Omega>\n\ngoal (3 subgoals):\n 1. AE x in N. x \\<in> streams \\<Omega>\n 2. AE x in M. x \\<in> streams \\<Omega>\n 3. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "then"], ["proof (chain)\npicking this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x \\<in> streams \\<Omega>", "show \"AE x in N. x \\<in> streams \\<Omega>\""], ["proof (prove)\nusing this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?N3. x \\<in> streams \\<Omega>\n\ngoal (1 subgoal):\n 1. AE x in N. x \\<in> streams \\<Omega>", "by (blast intro: F_NM)"], ["proof (state)\nthis:\n  AE x in N. x \\<in> streams \\<Omega>\n\ngoal (2 subgoals):\n 1. AE x in M. x \\<in> streams \\<Omega>\n 2. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "have \"\\<And>N M. (N, M) \\<in> F \\<Longrightarrow> AE x in M. x !! i \\<in> \\<Omega>\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in M. x !! i \\<in> \\<Omega>", "proof (induction i arbitrary: N M)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in M. x !! 0 \\<in> \\<Omega>\n 2. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "case 0"], ["proof (state)\nthis:\n  (N, M) \\<in> F\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in M. x !! 0 \\<in> \\<Omega>\n 2. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "note NM = 0[THEN R_F, simp]"], ["proof (state)\nthis:\n  R N M\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in M. x !! 0 \\<in> \\<Omega>\n 2. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in M. x !! 0 \\<in> \\<Omega>", "apply (subst m'_eq[OF NM])"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M) \\<bind> m' N M. x !! 0 \\<in> \\<Omega>", "apply (subst AE_bind[where B=\"?S\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (m' N M)\n 2. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>x. x !! 0 \\<in> \\<Omega>)\n 3. AE x in measure_pmf (p N M). AE y in m' N M x. y !! 0 \\<in> \\<Omega>", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M). AE y in m' N M x. y !! 0 \\<in> \\<Omega>", "apply (auto intro!: AE_distrD[where f=shd and M'=\"count_space UNIV\"]\n                    simp: AE_measure_pmf_iff m[OF NM] m'_shd in_\\<Omega>[OF 0] cong: AE_cong_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AE x in M. x !! 0 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "case (Suc i)"], ["proof (state)\nthis:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x !! i \\<in> \\<Omega>\n  (N, M) \\<in> F\n\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "note NM = Suc(2)[THEN R_F, simp]"], ["proof (state)\nthis:\n  R N M\n\ngoal (1 subgoal):\n 1. \\<And>i N M.\n       \\<lbrakk>\\<And>N M.\n                   (N, M) \\<in> F \\<Longrightarrow>\n                   AE x in M. x !! i \\<in> \\<Omega>;\n        (N, M) \\<in> F\\<rbrakk>\n       \\<Longrightarrow> AE x in M. x !! Suc i \\<in> \\<Omega>", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in M. x !! Suc i \\<in> \\<Omega>", "apply (subst m'_eq[OF NM])"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M) \\<bind> m' N M. x !! Suc i \\<in> \\<Omega>", "apply (subst AE_bind[where B=\"?S\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (m' N M)\n 2. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>x. x !! Suc i \\<in> \\<Omega>)\n 3. AE x in measure_pmf (p N M). AE y in m' N M x. y !! Suc i \\<in> \\<Omega>", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf (p N M). AE y in m' N M x. y !! Suc i \\<in> \\<Omega>", "apply (auto intro!: AE_distrD[where f=stl and M'=\"?S\"] Suc(1)[OF nm_F] Suc(2)\n          simp: AE_measure_pmf_iff m'_stl cong: AE_cong_simp)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AE x in M. x !! Suc i \\<in> \\<Omega>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x !! ?i4 \\<in> \\<Omega>\n\ngoal (2 subgoals):\n 1. AE x in M. x \\<in> streams \\<Omega>\n 2. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "then"], ["proof (chain)\npicking this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x !! ?i4 \\<in> \\<Omega>", "have AE_M: \"\\<And>N M. (N, M) \\<in> F \\<Longrightarrow> AE x in M. x \\<in> streams \\<Omega>\""], ["proof (prove)\nusing this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x !! ?i4 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow> AE x in M. x \\<in> streams \\<Omega>", "unfolding streams_iff_snth AE_all_countable"], ["proof (prove)\nusing this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x !! ?i4 \\<in> \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>N M.\n       (N, M) \\<in> F \\<Longrightarrow>\n       \\<forall>n. AE x in M. x !! n \\<in> \\<Omega>", "by auto"], ["proof (state)\nthis:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x \\<in> streams \\<Omega>\n\ngoal (2 subgoals):\n 1. AE x in M. x \\<in> streams \\<Omega>\n 2. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "then"], ["proof (chain)\npicking this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x \\<in> streams \\<Omega>", "show \"AE x in M. x \\<in> streams \\<Omega>\""], ["proof (prove)\nusing this:\n  (?N3, ?M3) \\<in> F \\<Longrightarrow> AE x in ?M3. x \\<in> streams \\<Omega>\n\ngoal (1 subgoal):\n 1. AE x in M. x \\<in> streams \\<Omega>", "by (blast intro: F_NM)"], ["proof (state)\nthis:\n  AE x in M. x \\<in> streams \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "fix xs"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "assume \"xs \\<in> lists \\<Omega>\""], ["proof (state)\nthis:\n  xs \\<in> lists \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                         emeasure M (sstart \\<Omega> xs)", "with \\<open>(N, M) \\<in> F\\<close>"], ["proof (chain)\npicking this:\n  (N, M) \\<in> F\n  xs \\<in> lists \\<Omega>", "show \"emeasure N (sstart \\<Omega> xs) = emeasure M (sstart \\<Omega> xs)\""], ["proof (prove)\nusing this:\n  (N, M) \\<in> F\n  xs \\<in> lists \\<Omega>\n\ngoal (1 subgoal):\n 1. emeasure N (sstart \\<Omega> xs) = emeasure M (sstart \\<Omega> xs)", "proof (induction xs arbitrary: N M)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>N M.\n       \\<lbrakk>(N, M) \\<in> F; [] \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> []) =\n                         emeasure M (sstart \\<Omega> [])\n 2. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "case Nil"], ["proof (state)\nthis:\n  (N, M) \\<in> F\n  [] \\<in> lists \\<Omega>\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       \\<lbrakk>(N, M) \\<in> F; [] \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> []) =\n                         emeasure M (sstart \\<Omega> [])\n 2. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "have \"prob_space N\" \"prob_space M\" \"sets N = sets ?S\" \"sets M = sets ?S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (prob_space N &&& prob_space M) &&&\n    sets N = sets (stream_space (count_space UNIV)) &&&\n    sets M = sets (stream_space (count_space UNIV))", "using R_1[OF R_F[OF Nil(1)]] R_2[OF R_F[OF Nil(1)]]"], ["proof (prove)\nusing this:\n  N \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n  M \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. (prob_space N &&& prob_space M) &&&\n    sets N = sets (stream_space (count_space UNIV)) &&&\n    sets M = sets (stream_space (count_space UNIV))", "by (auto simp add: space_prob_algebra)"], ["proof (state)\nthis:\n  prob_space N\n  prob_space M\n  sets N = sets (stream_space (count_space UNIV))\n  sets M = sets (stream_space (count_space UNIV))\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       \\<lbrakk>(N, M) \\<in> F; [] \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> []) =\n                         emeasure M (sstart \\<Omega> [])\n 2. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "have \"emeasure N (streams \\<Omega>) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure N (streams \\<Omega>) = 1", "by (rule prob_space.emeasure_eq_1_AE[OF \\<open>prob_space N\\<close> _ AE_N[OF Nil(1)]])\n           (auto simp add: \\<open>sets N = sets ?S\\<close> intro!: streams_sets)"], ["proof (state)\nthis:\n  emeasure N (streams \\<Omega>) = 1\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       \\<lbrakk>(N, M) \\<in> F; [] \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> []) =\n                         emeasure M (sstart \\<Omega> [])\n 2. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "moreover"], ["proof (state)\nthis:\n  emeasure N (streams \\<Omega>) = 1\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       \\<lbrakk>(N, M) \\<in> F; [] \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> []) =\n                         emeasure M (sstart \\<Omega> [])\n 2. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "have \"emeasure M (streams \\<Omega>) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure M (streams \\<Omega>) = 1", "by (rule prob_space.emeasure_eq_1_AE[OF \\<open>prob_space M\\<close> _ AE_M[OF Nil(1)]])\n           (auto simp add: \\<open>sets M = sets ?S\\<close> intro!: streams_sets)"], ["proof (state)\nthis:\n  emeasure M (streams \\<Omega>) = 1\n\ngoal (2 subgoals):\n 1. \\<And>N M.\n       \\<lbrakk>(N, M) \\<in> F; [] \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> []) =\n                         emeasure M (sstart \\<Omega> [])\n 2. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "ultimately"], ["proof (chain)\npicking this:\n  emeasure N (streams \\<Omega>) = 1\n  emeasure M (streams \\<Omega>) = 1", "show ?case"], ["proof (prove)\nusing this:\n  emeasure N (streams \\<Omega>) = 1\n  emeasure M (streams \\<Omega>) = 1\n\ngoal (1 subgoal):\n 1. emeasure N (sstart \\<Omega> []) = emeasure M (sstart \\<Omega> [])", "by simp"], ["proof (state)\nthis:\n  emeasure N (sstart \\<Omega> []) = emeasure M (sstart \\<Omega> [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>(?N3, ?M3) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n  \\<Longrightarrow> emeasure ?N3 (sstart \\<Omega> xs) =\n                    emeasure ?M3 (sstart \\<Omega> xs)\n  (N, M) \\<in> F\n  x # xs \\<in> lists \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "note NM = Cons(2)[THEN R_F, simp]"], ["proof (state)\nthis:\n  R N M\n\ngoal (1 subgoal):\n 1. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "have *: \"(##) y -` sstart \\<Omega> (x # xs) = (if x = y then sstart \\<Omega> xs else {})\" for y"], ["proof (prove)\ngoal (1 subgoal):\n 1. (##) y -` sstart \\<Omega> (x # xs) =\n    (if x = y then sstart \\<Omega> xs else {})", "by auto"], ["proof (state)\nthis:\n  (##) ?y3 -` sstart \\<Omega> (x # xs) =\n  (if x = ?y3 then sstart \\<Omega> xs else {})\n\ngoal (1 subgoal):\n 1. \\<And>a xs N M.\n       \\<lbrakk>\\<And>N M.\n                   \\<lbrakk>(N, M) \\<in> F; xs \\<in> lists \\<Omega>\\<rbrakk>\n                   \\<Longrightarrow> emeasure N (sstart \\<Omega> xs) =\n                                     emeasure M (sstart \\<Omega> xs);\n        (N, M) \\<in> F; a # xs \\<in> lists \\<Omega>\\<rbrakk>\n       \\<Longrightarrow> emeasure N (sstart \\<Omega> (a # xs)) =\n                         emeasure M (sstart \\<Omega> (a # xs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure N (sstart \\<Omega> (x # xs)) =\n    emeasure M (sstart \\<Omega> (x # xs))", "apply (subst n'_eq[OF NM])"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (measure_pmf (p N M) \\<bind> n' N M)\n     (sstart \\<Omega> (x # xs)) =\n    emeasure M (sstart \\<Omega> (x # xs))", "apply (subst (3) m'_eq[OF NM])"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (measure_pmf (p N M) \\<bind> n' N M)\n     (sstart \\<Omega> (x # xs)) =\n    emeasure (measure_pmf (p N M) \\<bind> m' N M) (sstart \\<Omega> (x # xs))", "apply (subst emeasure_bind[OF _ _ sstart_sets])"], ["proof (prove)\ngoal (3 subgoals):\n 1. space (measure_pmf (p N M)) \\<noteq> {}\n 2. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (n' N M)\n 3. \\<integral>\\<^sup>+ xa. emeasure (n' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M) =\n    emeasure (measure_pmf (p N M) \\<bind> m' N M) (sstart \\<Omega> (x # xs))", "apply simp []"], ["proof (prove)\ngoal (2 subgoals):\n 1. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (n' N M)\n 2. \\<integral>\\<^sup>+ xa. emeasure (n' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M) =\n    emeasure (measure_pmf (p N M) \\<bind> m' N M) (sstart \\<Omega> (x # xs))", "apply measurable []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. emeasure (n' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M) =\n    emeasure (measure_pmf (p N M) \\<bind> m' N M) (sstart \\<Omega> (x # xs))", "apply (subst emeasure_bind[OF _ _ sstart_sets])"], ["proof (prove)\ngoal (3 subgoals):\n 1. space (measure_pmf (p N M)) \\<noteq> {}\n 2. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (m' N M)\n 3. \\<integral>\\<^sup>+ xa. emeasure (n' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M) =\n    \\<integral>\\<^sup>+ xa. emeasure (m' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M)", "apply simp []"], ["proof (prove)\ngoal (2 subgoals):\n 1. measure_pmf.random_variable (p N M)\n     (subprob_algebra (stream_space (count_space UNIV))) (m' N M)\n 2. \\<integral>\\<^sup>+ xa. emeasure (n' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M) =\n    \\<integral>\\<^sup>+ xa. emeasure (m' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M)", "apply measurable []"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ xa. emeasure (n' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M) =\n    \\<integral>\\<^sup>+ xa. emeasure (m' N M xa) (sstart \\<Omega> (x # xs))\n                       \\<partial>measure_pmf (p N M)", "apply (intro nn_integral_cong_AE AE_pmfI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf (p N M) \\<Longrightarrow>\n       emeasure (n' N M y) (sstart \\<Omega> (x # xs)) =\n       emeasure (m' N M y) (sstart \\<Omega> (x # xs))", "apply (subst n'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf (p N M) \\<Longrightarrow>\n       emeasure (distr (n N M y) (stream_space (count_space UNIV)) ((##) y))\n        (sstart \\<Omega> (x # xs)) =\n       emeasure (m' N M y) (sstart \\<Omega> (x # xs))", "apply (subst m'_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf (p N M) \\<Longrightarrow>\n       emeasure (distr (n N M y) (stream_space (count_space UNIV)) ((##) y))\n        (sstart \\<Omega> (x # xs)) =\n       emeasure (distr (m N M y) (stream_space (count_space UNIV)) ((##) y))\n        (sstart \\<Omega> (x # xs))", "using Cons(3)"], ["proof (prove)\nusing this:\n  x # xs \\<in> lists \\<Omega>\n\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf (p N M) \\<Longrightarrow>\n       emeasure (distr (n N M y) (stream_space (count_space UNIV)) ((##) y))\n        (sstart \\<Omega> (x # xs)) =\n       emeasure (distr (m N M y) (stream_space (count_space UNIV)) ((##) y))\n        (sstart \\<Omega> (x # xs))", "apply (auto intro!: Cons nm_F\n          simp add: emeasure_distr sets_eq_imp_space_eq[OF sets_n] sets_eq_imp_space_eq[OF sets_m]\n                    space_stream_space *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure N (sstart \\<Omega> (x # xs)) =\n  emeasure M (sstart \\<Omega> (x # xs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  emeasure N (sstart \\<Omega> xs) = emeasure M (sstart \\<Omega> xs)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  N = M\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Discrete Markov Kernel\\<close>"], ["", "locale MC_syntax =\n  fixes K :: \"'s \\<Rightarrow> 's pmf\"\nbegin"], ["", "abbreviation acc :: \"('s \\<times> 's) set\" where\n  \"acc \\<equiv> (SIGMA s:UNIV. K s)\\<^sup>*\""], ["", "abbreviation acc_on :: \"'s set \\<Rightarrow> ('s \\<times> 's) set\" where\n  \"acc_on S \\<equiv> (SIGMA s:UNIV. K s \\<inter> S)\\<^sup>*\""], ["", "lemma countable_reachable: \"countable (acc `` {s})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (acc `` {s})", "by (auto intro!: countable_rtrancl countable_set_pmf simp: Sigma_Image)"], ["", "lemma countable_acc: \"countable X \\<Longrightarrow> countable (acc `` X)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable X \\<Longrightarrow> countable (acc `` X)", "apply (rule countable_Image)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>countable X; y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> countable (acc `` {y})\n 2. countable X \\<Longrightarrow> countable X", "apply (rule countable_reachable)"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable X \\<Longrightarrow> countable X", "apply assumption"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "context\n  notes [[inductive_internals]]\nbegin"], ["", "coinductive enabled where\n  \"enabled (shd \\<omega>) (stl \\<omega>) \\<Longrightarrow> shd \\<omega> \\<in> K s \\<Longrightarrow> enabled s \\<omega>\""], ["", "end"], ["", "lemma alw_enabled: \"enabled (shd \\<omega>) (stl \\<omega>) \\<Longrightarrow> alw (\\<lambda>\\<omega>. enabled (shd \\<omega>) (stl \\<omega>)) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled (shd \\<omega>) (stl \\<omega>) \\<Longrightarrow>\n    alw (\\<lambda>\\<omega>. enabled (shd \\<omega>) (stl \\<omega>)) \\<omega>", "by (coinduction arbitrary: \\<omega> rule: alw_coinduct) (auto elim: enabled.cases)"], ["", "abbreviation \"S \\<equiv> stream_space (count_space UNIV)\""], ["", "lemma in_S [measurable (raw)]: \"x \\<in> space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> space (stream_space (count_space UNIV))", "by (simp add: space_stream_space)"], ["", "inductive_simps enabled_iff: \"enabled s \\<omega>\""], ["", "lemma enabled_Stream: \"enabled x (y ## \\<omega>) \\<longleftrightarrow> y \\<in> K x \\<and> enabled y \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled x (y ## \\<omega>) =\n    (y \\<in> set_pmf (K x) \\<and> enabled y \\<omega>)", "by (subst enabled_iff)  auto"], ["", "lemma measurable_enabled[measurable]:\n  \"Measurable.pred (stream_space (count_space UNIV)) (enabled s)\" (is \"Measurable.pred ?S _\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV)) (enabled s)", "unfolding enabled_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV))\n     (gfp (\\<lambda>p x1 x2.\n              \\<exists>\\<omega> s.\n                 x1 = s \\<and>\n                 x2 = \\<omega> \\<and>\n                 p (shd \\<omega>) (stl \\<omega>) \\<and>\n                 shd \\<omega> \\<in> set_pmf (K s))\n       s)", "proof (coinduction arbitrary: s rule: measurable_gfp2_coinduct)"], ["proof (state)\ngoal (2 subgoals):\n 1. inf_continuous\n     (\\<lambda>p x1 x2.\n         \\<exists>\\<omega> s.\n            x1 = s \\<and>\n            x2 = \\<omega> \\<and>\n            p (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))\n 2. \\<And>A sa.\n       (\\<And>N t.\n           \\<exists>s.\n              N = stream_space (count_space UNIV) \\<and>\n              t = s \\<Longrightarrow>\n           Measurable.pred N (A t)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>x2.\n            \\<exists>\\<omega> s.\n               sa = s \\<and>\n               x2 = \\<omega> \\<and>\n               A (shd \\<omega>) (stl \\<omega>) \\<and>\n               shd \\<omega> \\<in> set_pmf (K s))", "case (step A s)"], ["proof (state)\nthis:\n  \\<exists>s.\n     ?N = stream_space (count_space UNIV) \\<and> ?t = s \\<Longrightarrow>\n  Measurable.pred ?N (A ?t)\n\ngoal (2 subgoals):\n 1. inf_continuous\n     (\\<lambda>p x1 x2.\n         \\<exists>\\<omega> s.\n            x1 = s \\<and>\n            x2 = \\<omega> \\<and>\n            p (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))\n 2. \\<And>A sa.\n       (\\<And>N t.\n           \\<exists>s.\n              N = stream_space (count_space UNIV) \\<and>\n              t = s \\<Longrightarrow>\n           Measurable.pred N (A t)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>x2.\n            \\<exists>\\<omega> s.\n               sa = s \\<and>\n               x2 = \\<omega> \\<and>\n               A (shd \\<omega>) (stl \\<omega>) \\<and>\n               shd \\<omega> \\<in> set_pmf (K s))", "then"], ["proof (chain)\npicking this:\n  \\<exists>s.\n     ?N = stream_space (count_space UNIV) \\<and> ?t = s \\<Longrightarrow>\n  Measurable.pred ?N (A ?t)", "have [measurable]: \"\\<And>t. Measurable.pred ?S (A t)\""], ["proof (prove)\nusing this:\n  \\<exists>s.\n     ?N = stream_space (count_space UNIV) \\<and> ?t = s \\<Longrightarrow>\n  Measurable.pred ?N (A ?t)\n\ngoal (1 subgoal):\n 1. \\<And>t. Measurable.pred (stream_space (count_space UNIV)) (A t)", "by auto"], ["proof (state)\nthis:\n  Measurable.pred (stream_space (count_space UNIV)) (A ?t)\n\ngoal (2 subgoals):\n 1. inf_continuous\n     (\\<lambda>p x1 x2.\n         \\<exists>\\<omega> s.\n            x1 = s \\<and>\n            x2 = \\<omega> \\<and>\n            p (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))\n 2. \\<And>A sa.\n       (\\<And>N t.\n           \\<exists>s.\n              N = stream_space (count_space UNIV) \\<and>\n              t = s \\<Longrightarrow>\n           Measurable.pred N (A t)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>x2.\n            \\<exists>\\<omega> s.\n               sa = s \\<and>\n               x2 = \\<omega> \\<and>\n               A (shd \\<omega>) (stl \\<omega>) \\<and>\n               shd \\<omega> \\<in> set_pmf (K s))", "have *: \"\\<And>x. (\\<exists>\\<omega> t. s = t \\<and> x = \\<omega> \\<and> A (shd \\<omega>) (stl \\<omega>) \\<and> shd \\<omega> \\<in> set_pmf (K t)) \\<longleftrightarrow>\n    (\\<exists>t\\<in>K s. A t (stl x) \\<and> t = shd x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<exists>\\<omega> t.\n           s = t \\<and>\n           x = \\<omega> \\<and>\n           A (shd \\<omega>) (stl \\<omega>) \\<and>\n           shd \\<omega> \\<in> set_pmf (K t)) =\n       (\\<exists>t\\<in>set_pmf (K s). A t (stl x) \\<and> t = shd x)", "by auto"], ["proof (state)\nthis:\n  (\\<exists>\\<omega> t.\n      s = t \\<and>\n      ?x = \\<omega> \\<and>\n      A (shd \\<omega>) (stl \\<omega>) \\<and>\n      shd \\<omega> \\<in> set_pmf (K t)) =\n  (\\<exists>t\\<in>set_pmf (K s). A t (stl ?x) \\<and> t = shd ?x)\n\ngoal (2 subgoals):\n 1. inf_continuous\n     (\\<lambda>p x1 x2.\n         \\<exists>\\<omega> s.\n            x1 = s \\<and>\n            x2 = \\<omega> \\<and>\n            p (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))\n 2. \\<And>A sa.\n       (\\<And>N t.\n           \\<exists>s.\n              N = stream_space (count_space UNIV) \\<and>\n              t = s \\<Longrightarrow>\n           Measurable.pred N (A t)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>x2.\n            \\<exists>\\<omega> s.\n               sa = s \\<and>\n               x2 = \\<omega> \\<and>\n               A (shd \\<omega>) (stl \\<omega>) \\<and>\n               shd \\<omega> \\<in> set_pmf (K s))", "note countable_set_pmf[simp]"], ["proof (state)\nthis:\n  countable (set_pmf ?p)\n\ngoal (2 subgoals):\n 1. inf_continuous\n     (\\<lambda>p x1 x2.\n         \\<exists>\\<omega> s.\n            x1 = s \\<and>\n            x2 = \\<omega> \\<and>\n            p (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))\n 2. \\<And>A sa.\n       (\\<And>N t.\n           \\<exists>s.\n              N = stream_space (count_space UNIV) \\<and>\n              t = s \\<Longrightarrow>\n           Measurable.pred N (A t)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>x2.\n            \\<exists>\\<omega> s.\n               sa = s \\<and>\n               x2 = \\<omega> \\<and>\n               A (shd \\<omega>) (stl \\<omega>) \\<and>\n               shd \\<omega> \\<in> set_pmf (K s))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>x2.\n         \\<exists>\\<omega> s.\n            s = s \\<and>\n            x2 = \\<omega> \\<and>\n            A (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>x2.\n         \\<exists>s\\<in>set_pmf (K s). A s (stl x2) \\<and> s = shd x2)", "by measurable"], ["proof (state)\nthis:\n  Measurable.pred (stream_space (count_space UNIV))\n   (\\<lambda>x2.\n       \\<exists>\\<omega> s.\n          s = s \\<and>\n          x2 = \\<omega> \\<and>\n          A (shd \\<omega>) (stl \\<omega>) \\<and>\n          shd \\<omega> \\<in> set_pmf (K s))\n\ngoal (1 subgoal):\n 1. inf_continuous\n     (\\<lambda>p x1 x2.\n         \\<exists>\\<omega> s.\n            x1 = s \\<and>\n            x2 = \\<omega> \\<and>\n            p (shd \\<omega>) (stl \\<omega>) \\<and>\n            shd \\<omega> \\<in> set_pmf (K s))", "qed (auto simp: inf_continuous_def)"], ["", "lemma enabled_iff_snth: \"enabled s \\<omega> \\<longleftrightarrow> (\\<forall>i. \\<omega> !! i \\<in> K ((s ## \\<omega>) !! i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled s \\<omega> =\n    (\\<forall>i. \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i)))", "proof safe"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       enabled s \\<omega> \\<Longrightarrow>\n       \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\n 2. \\<forall>i.\n       \\<omega> !! i\n       \\<in> set_pmf (K ((s ## \\<omega>) !! i)) \\<Longrightarrow>\n    enabled s \\<omega>", "fix i"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>i.\n       enabled s \\<omega> \\<Longrightarrow>\n       \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\n 2. \\<forall>i.\n       \\<omega> !! i\n       \\<in> set_pmf (K ((s ## \\<omega>) !! i)) \\<Longrightarrow>\n    enabled s \\<omega>", "assume \"enabled s \\<omega>\""], ["proof (state)\nthis:\n  enabled s \\<omega>\n\ngoal (2 subgoals):\n 1. \\<And>i.\n       enabled s \\<omega> \\<Longrightarrow>\n       \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\n 2. \\<forall>i.\n       \\<omega> !! i\n       \\<in> set_pmf (K ((s ## \\<omega>) !! i)) \\<Longrightarrow>\n    enabled s \\<omega>", "then"], ["proof (chain)\npicking this:\n  enabled s \\<omega>", "show \"\\<omega> !! i \\<in> K ((s ## \\<omega>) !! i)\""], ["proof (prove)\nusing this:\n  enabled s \\<omega>\n\ngoal (1 subgoal):\n 1. \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))", "by (induct i arbitrary: s \\<omega>)\n       (force elim: enabled.cases)+"], ["proof (state)\nthis:\n  \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<omega> !! i\n       \\<in> set_pmf (K ((s ## \\<omega>) !! i)) \\<Longrightarrow>\n    enabled s \\<omega>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<omega> !! i\n       \\<in> set_pmf (K ((s ## \\<omega>) !! i)) \\<Longrightarrow>\n    enabled s \\<omega>", "assume \"\\<forall>i. \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\""], ["proof (state)\nthis:\n  \\<forall>i. \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\n\ngoal (1 subgoal):\n 1. \\<forall>i.\n       \\<omega> !! i\n       \\<in> set_pmf (K ((s ## \\<omega>) !! i)) \\<Longrightarrow>\n    enabled s \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<forall>i. \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))", "show \"enabled s \\<omega>\""], ["proof (prove)\nusing this:\n  \\<forall>i. \\<omega> !! i \\<in> set_pmf (K ((s ## \\<omega>) !! i))\n\ngoal (1 subgoal):\n 1. enabled s \\<omega>", "by (coinduction arbitrary: s \\<omega>)\n       (auto elim: allE[of _ \"Suc i\" for i] allE[of _ 0])"], ["proof (state)\nthis:\n  enabled s \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "primcorec force_enabled where\n  \"force_enabled x \\<omega> =\n    (let y = if shd \\<omega> \\<in> K x then shd \\<omega> else (SOME y. y \\<in> K x) in y ## force_enabled y (stl \\<omega>))\""], ["", "lemma force_enabled_in_set_pmf[simp, intro]: \"shd (force_enabled x \\<omega>) \\<in> K x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. shd (force_enabled x \\<omega>) \\<in> set_pmf (K x)", "by (auto simp: some_in_eq set_pmf_not_empty)"], ["", "lemma enabled_force_enabled: \"enabled x (force_enabled x \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled x (force_enabled x \\<omega>)", "by (coinduction arbitrary: x \\<omega>) (auto simp: some_in_eq set_pmf_not_empty)"], ["", "lemma force_enabled: \"enabled x \\<omega> \\<Longrightarrow> force_enabled x \\<omega> = \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled x \\<omega> \\<Longrightarrow> force_enabled x \\<omega> = \\<omega>", "by (coinduction arbitrary: x \\<omega>) (auto elim: enabled.cases)"], ["", "lemma Ex_enabled: \"\\<exists>\\<omega>. enabled x \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>\\<omega>. enabled x \\<omega>", "by (rule exI[of _ \"force_enabled x undefined\"] enabled_force_enabled)+"], ["", "lemma measurable_force_enabled: \"force_enabled x \\<in> measurable S S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. force_enabled x\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "proof (rule measurable_stream_space2)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>xa. force_enabled x xa !! n)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>xa. force_enabled x xa !! n)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV", "show \"(\\<lambda>\\<omega>. force_enabled x \\<omega> !! n) \\<in> measurable S (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<omega>. force_enabled x \\<omega> !! n)\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          count_space UNIV", "proof (induction n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (\\<lambda>\\<omega>. force_enabled x \\<omega> !! 0)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV\n 2. \\<And>n x.\n       (\\<And>x.\n           (\\<lambda>\\<omega>. force_enabled x \\<omega> !! n)\n           \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n                 count_space UNIV) \\<Longrightarrow>\n       (\\<lambda>\\<omega>. force_enabled x \\<omega> !! Suc n)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV", "case (Suc n)"], ["proof (state)\nthis:\n  (\\<lambda>\\<omega>. force_enabled ?x \\<omega> !! n)\n  \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       (\\<lambda>\\<omega>. force_enabled x \\<omega> !! 0)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV\n 2. \\<And>n x.\n       (\\<And>x.\n           (\\<lambda>\\<omega>. force_enabled x \\<omega> !! n)\n           \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n                 count_space UNIV) \\<Longrightarrow>\n       (\\<lambda>\\<omega>. force_enabled x \\<omega> !! Suc n)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<omega>. force_enabled x \\<omega> !! Suc n)\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          count_space UNIV", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<omega>.\n        force_enabled\n         (if shd \\<omega> \\<in> set_pmf (K x) then shd \\<omega>\n          else SOME y. y \\<in> set_pmf (K x))\n         (stl \\<omega>) !!\n        n)\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          count_space UNIV", "apply (rule measurable_compose_countable'[OF measurable_compose[OF measurable_stl Suc], where I=\"set_pmf (K x)\"])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>x.\n        if shd x \\<in> set_pmf (K x) then shd x\n        else SOME y. y \\<in> set_pmf (K x))\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          count_space (set_pmf (K x))\n 2. countable (set_pmf (K x))", "apply (rule measurable_compose[OF measurable_shd])"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>a.\n        if a \\<in> set_pmf (K x) then a else SOME y. y \\<in> set_pmf (K x))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M count_space (set_pmf (K x))\n 2. countable (set_pmf (K x))", "apply (auto simp: countable_set_pmf some_in_eq set_pmf_not_empty)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<omega>. force_enabled x \\<omega> !! Suc n)\n  \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (\\<lambda>\\<omega>. force_enabled x \\<omega> !! 0)\n       \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n             count_space UNIV", "qed (auto intro!: measurable_compose[OF measurable_shd])"], ["proof (state)\nthis:\n  (\\<lambda>\\<omega>. force_enabled x \\<omega> !! n)\n  \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "abbreviation \"D \\<equiv> stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. K s)\""], ["", "lemma sets_D: \"sets D = sets (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))) =\n    sets (stream_space (Pi\\<^sub>M UNIV (\\<lambda>s. count_space UNIV)))", "by (intro sets_stream_space_cong sets_PiM_cong) simp_all"], ["", "lemma space_D: \"space D = space (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))) =\n    space (stream_space (Pi\\<^sub>M UNIV (\\<lambda>s. count_space UNIV)))", "using sets_eq_imp_space_eq[OF sets_D]"], ["proof (prove)\nusing this:\n  space (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))) =\n  space (stream_space (Pi\\<^sub>M UNIV (\\<lambda>s. count_space UNIV)))\n\ngoal (1 subgoal):\n 1. space (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))) =\n    space (stream_space (Pi\\<^sub>M UNIV (\\<lambda>s. count_space UNIV)))", "."], ["", "lemma measurable_D_D: \"measurable D D =\n    measurable (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV)) (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. count_space UNIV))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_space\n     (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n    stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))) =\n    stream_space\n     (Pi\\<^sub>M UNIV (\\<lambda>s. count_space UNIV)) \\<rightarrow>\\<^sub>M\n    stream_space (Pi\\<^sub>M UNIV (\\<lambda>s. count_space UNIV))", "by (simp add: measurable_def space_D sets_D)"], ["", "primcorec walk :: \"'s \\<Rightarrow> ('s \\<Rightarrow> 's) stream \\<Rightarrow> 's stream\" where\n  \"shd (walk s \\<omega>) = (if shd \\<omega> s \\<in> K s then shd \\<omega> s else (SOME t. t \\<in> K s))\"\n| \"stl (walk s \\<omega>) = walk (if shd \\<omega> s \\<in> K s then shd \\<omega> s else (SOME t. t \\<in> K s)) (stl \\<omega>)\""], ["", "lemma enabled_walk: \"enabled s (walk s \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled s (walk s \\<omega>)", "by (coinduction arbitrary: s \\<omega>) (auto simp: some_in_eq set_pmf_not_empty)"], ["", "lemma measurable_walk[measurable]: \"walk s \\<in> measurable D S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "note measurable_compose[OF measurable_snth, intro!]"], ["proof (state)\nthis:\n  ?g \\<in> ?N \\<rightarrow>\\<^sub>M ?L \\<Longrightarrow>\n  (\\<lambda>x. ?g (x !! ?n1)) \\<in> stream_space ?N \\<rightarrow>\\<^sub>M ?L\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "note measurable_compose[OF measurable_component_singleton, intro!]"], ["proof (state)\nthis:\n  \\<lbrakk>?i1 \\<in> ?I1; ?g \\<in> ?M1 ?i1 \\<rightarrow>\\<^sub>M ?L\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. ?g (x ?i1))\n                    \\<in> Pi\\<^sub>M ?I1 ?M1 \\<rightarrow>\\<^sub>M ?L\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "note if_weak_cong[cong del]"], ["proof (state)\nthis:\n  ?b = ?c \\<Longrightarrow>\n  (if ?b then ?x else ?y) = (if ?c then ?x else ?y)\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "note measurable_g = measurable_compose_countable'[OF _ _ countable_reachable]"], ["proof (state)\nthis:\n  \\<lbrakk>\\<And>i.\n              i \\<in> acc `` {?s1} \\<Longrightarrow>\n              ?f i \\<in> ?M \\<rightarrow>\\<^sub>M ?N;\n   ?g \\<in> ?M \\<rightarrow>\\<^sub>M count_space (acc `` {?s1})\\<rbrakk>\n  \\<Longrightarrow> (\\<lambda>x. ?f (?g x) x)\n                    \\<in> ?M \\<rightarrow>\\<^sub>M ?N\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "define n :: nat where \"n = 0\""], ["proof (state)\nthis:\n  n = 0\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "define g where \"g = (\\<lambda>_::('s \\<Rightarrow> 's) stream. s)\""], ["proof (state)\nthis:\n  g = (\\<lambda>_. s)\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "then"], ["proof (chain)\npicking this:\n  g = (\\<lambda>_. s)", "have \"g \\<in> measurable D (count_space (acc `` {s}))\""], ["proof (prove)\nusing this:\n  g = (\\<lambda>_. s)\n\ngoal (1 subgoal):\n 1. g \\<in> stream_space\n             (Pi\\<^sub>M UNIV\n               (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n            count_space (acc `` {s})", "by auto"], ["proof (state)\nthis:\n  g \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          count_space (acc `` {s})\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "then"], ["proof (chain)\npicking this:\n  g \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          count_space (acc `` {s})", "have \"(\\<lambda>x. walk (g x) (sdrop n x)) \\<in> measurable D S\""], ["proof (prove)\nusing this:\n  g \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          count_space (acc `` {s})\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. walk (g x) (sdrop n x))\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "proof (coinduction arbitrary: g n rule: measurable_stream_coinduct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       (\\<lambda>x. shd (walk (g x) (sdrop n x)))\n       \\<in> stream_space\n              (Pi\\<^sub>M UNIV\n                (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n             count_space UNIV\n 2. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       \\<exists>ga na.\n          (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n          (\\<lambda>x. walk (ga x) (sdrop na x)) \\<and>\n          ga \\<in> stream_space\n                    (Pi\\<^sub>M UNIV\n                      (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n                   count_space (acc `` {s})", "case (shd g)"], ["proof (state)\nthis:\n  g \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          count_space (acc `` {s})\n\ngoal (2 subgoals):\n 1. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       (\\<lambda>x. shd (walk (g x) (sdrop n x)))\n       \\<in> stream_space\n              (Pi\\<^sub>M UNIV\n                (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n             count_space UNIV\n 2. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       \\<exists>ga na.\n          (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n          (\\<lambda>x. walk (ga x) (sdrop na x)) \\<and>\n          ga \\<in> stream_space\n                    (Pi\\<^sub>M UNIV\n                      (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n                   count_space (acc `` {s})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. shd (walk (g x) (sdrop n x)))\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          count_space UNIV", "by (fastforce intro: measurable_g[OF _ shd])"], ["proof (state)\nthis:\n  (\\<lambda>x. shd (walk (g x) (sdrop n x)))\n  \\<in> stream_space\n         (Pi\\<^sub>M UNIV\n           (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal (1 subgoal):\n 1. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       \\<exists>ga na.\n          (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n          (\\<lambda>x. walk (ga x) (sdrop na x)) \\<and>\n          ga \\<in> stream_space\n                    (Pi\\<^sub>M UNIV\n                      (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n                   count_space (acc `` {s})", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       \\<exists>ga na.\n          (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n          (\\<lambda>x. walk (ga x) (sdrop na x)) \\<and>\n          ga \\<in> stream_space\n                    (Pi\\<^sub>M UNIV\n                      (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n                   count_space (acc `` {s})", "case (stl g)"], ["proof (state)\nthis:\n  g \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          count_space (acc `` {s})\n\ngoal (1 subgoal):\n 1. \\<And>g n.\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s}) \\<Longrightarrow>\n       \\<exists>ga na.\n          (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n          (\\<lambda>x. walk (ga x) (sdrop na x)) \\<and>\n          ga \\<in> stream_space\n                    (Pi\\<^sub>M UNIV\n                      (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n                   count_space (acc `` {s})", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>g n.\n       (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n       (\\<lambda>x. walk (g x) (sdrop n x)) \\<and>\n       g \\<in> stream_space\n                (Pi\\<^sub>M UNIV\n                  (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n               count_space (acc `` {s})", "by (fastforce simp add: sdrop.simps[symmetric] some_in_eq set_pmf_not_empty\n                    simp del: sdrop.simps intro: rtrancl_into_rtrancl measurable_g[OF _ stl])"], ["proof (state)\nthis:\n  \\<exists>g n.\n     (\\<lambda>x. stl (walk (g x) (sdrop n x))) =\n     (\\<lambda>x. walk (g x) (sdrop n x)) \\<and>\n     g \\<in> stream_space\n              (Pi\\<^sub>M UNIV\n                (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n             count_space (acc `` {s})\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. walk (g x) (sdrop n x))\n  \\<in> stream_space\n         (Pi\\<^sub>M UNIV\n           (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n        stream_space (count_space UNIV)\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>x. walk (g x) (sdrop n x))\n  \\<in> stream_space\n         (Pi\\<^sub>M UNIV\n           (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n        stream_space (count_space UNIV)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. walk (g x) (sdrop n x))\n  \\<in> stream_space\n         (Pi\\<^sub>M UNIV\n           (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n        stream_space (count_space UNIV)\n\ngoal (1 subgoal):\n 1. walk s\n    \\<in> stream_space\n           (Pi\\<^sub>M UNIV\n             (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "by (simp add: g_def n_def)"], ["proof (state)\nthis:\n  walk s\n  \\<in> stream_space\n         (Pi\\<^sub>M UNIV\n           (\\<lambda>x. measure_pmf (K x))) \\<rightarrow>\\<^sub>M\n        stream_space (count_space UNIV)\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Trace Space for Discrete-Time Markov Chains\\<close>"], ["", "definition T :: \"'s \\<Rightarrow> 's stream measure\" where\n  \"T s = distr (stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. K s)) S (walk s)\""], ["", "lemma space_T[simp]: \"space (T s) = space S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (T s) = space (stream_space (count_space UNIV))", "by (simp add: T_def)"], ["", "lemma sets_T[simp, measurable_cong]: \"sets (T s) = sets S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (T s) = sets (stream_space (count_space UNIV))", "by (simp add: T_def)"], ["", "lemma measurable_T1[simp]: \"measurable (T s) M = measurable S M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T s \\<rightarrow>\\<^sub>M M =\n    stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M M", "by (intro measurable_cong_sets) simp_all"], ["", "lemma measurable_T2[simp]: \"measurable M (T s) = measurable M S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M \\<rightarrow>\\<^sub>M T s =\n    M \\<rightarrow>\\<^sub>M stream_space (count_space UNIV)", "by (intro measurable_cong_sets) simp_all"], ["", "lemma in_measurable_T1[measurable (raw)]: \"f \\<in> measurable S M \\<Longrightarrow> f \\<in> measurable (T s) M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n            M \\<Longrightarrow>\n    f \\<in> T s \\<rightarrow>\\<^sub>M M", "by simp"], ["", "lemma in_measurable_T2[measurable (raw)]: \"f \\<in> measurable M S \\<Longrightarrow> f \\<in> measurable M (T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. f \\<in> M \\<rightarrow>\\<^sub>M\n            stream_space (count_space UNIV) \\<Longrightarrow>\n    f \\<in> M \\<rightarrow>\\<^sub>M T s", "by simp"], ["", "lemma AE_T_enabled: \"AE \\<omega> in T s. enabled s \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (enabled s)", "unfolding T_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere\n     (distr (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))))\n       (stream_space (count_space UNIV)) (walk s))\n     (enabled s)", "by (simp add: AE_distr_iff enabled_walk)"], ["", "sublocale T: prob_space \"T s\" for s"], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space (T s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_space (T s)", "interpret P: product_prob_space K UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_prob_space (\\<lambda>x. measure_pmf (K x))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. prob_space (T s)", "interpret prob_space \"stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space\n     (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))))", "by (rule P.prob_space_stream_space)"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_space (T s)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. prob_space (T s)", "show \"prob_space (T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space (T s)", "by (simp add: T_def prob_space_distr)"], ["proof (state)\nthis:\n  prob_space (T s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emeasure_T_const[simp]: \"emeasure (T s) (space S) = 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) (space (stream_space (count_space UNIV))) = 1", "using T.emeasure_space_1[of s]"], ["proof (prove)\nusing this:\n  emeasure (T s) (space (T s)) = 1\n\ngoal (1 subgoal):\n 1. emeasure (T s) (space (stream_space (count_space UNIV))) = 1", "by simp"], ["", "lemma nn_integral_T:\n  assumes f[measurable]: \"f \\<in> borel_measurable S\"\n  shows \"(\\<integral>\\<^sup>+X. f X \\<partial>T s) = (\\<integral>\\<^sup>+t. (\\<integral>\\<^sup>+\\<omega>. f (t ## \\<omega>) \\<partial>T t) \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "interpret product_prob_space K UNIV"], ["proof (prove)\ngoal (1 subgoal):\n 1. product_prob_space (\\<lambda>x. measure_pmf (K x))", ".."], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "interpret D: prob_space \"stream_space (\\<Pi>\\<^sub>M s\\<in>UNIV. K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space\n     (stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))))", "by (rule prob_space_stream_space)"], ["proof (state)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have T: \"\\<And>f s. f \\<in> borel_measurable S \\<Longrightarrow> (\\<integral>\\<^sup>+X. f X \\<partial>T s) = (\\<integral>\\<^sup>+\\<omega>. f (walk s \\<omega>) \\<partial>D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>f s.\n       f \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) f =\n       \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                          \\<partial>stream_space\n                                     (Pi\\<^sub>M UNIV\n (\\<lambda>x. measure_pmf (K x)))", "by (simp add: T_def nn_integral_distr)"], ["proof (state)\nthis:\n  ?f1\n  \\<in> borel_measurable (stream_space (count_space UNIV)) \\<Longrightarrow>\n  integral\\<^sup>N (T ?s1) ?f1 =\n  \\<integral>\\<^sup>+ \\<omega>. ?f1 (walk ?s1 \\<omega>)\n                     \\<partial>stream_space\n                                (Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x)))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have \"(\\<integral>\\<^sup>+X. f X \\<partial>T s) = (\\<integral>\\<^sup>+\\<omega>. f (walk s \\<omega>) \\<partial>D)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                       \\<partial>stream_space\n                                  (Pi\\<^sub>M UNIV\n                                    (\\<lambda>x. measure_pmf (K x)))", "by (rule T) measurable"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) f =\n  \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                     \\<partial>stream_space\n                                (Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x)))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) f =\n  \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                     \\<partial>stream_space\n                                (Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x)))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have \"\\<dots> = (\\<integral>\\<^sup>+d. \\<integral>\\<^sup>+\\<omega>. f (walk s (d ## \\<omega>)) \\<partial>D \\<partial>\\<Pi>\\<^sub>M i\\<in>UNIV. K i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                       \\<partial>stream_space\n                                  (Pi\\<^sub>M UNIV\n                                    (\\<lambda>x. measure_pmf (K x))) =\n    \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n          f (walk s (d ## \\<omega>))\n        \\<partial>stream_space\n                   (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                       \\<partial>Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x))", "by (simp add: P.nn_integral_stream_space)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                     \\<partial>stream_space\n                                (Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x))) =\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (walk s (d ## \\<omega>))\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<omega>. f (walk s \\<omega>)\n                     \\<partial>stream_space\n                                (Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x))) =\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (walk s (d ## \\<omega>))\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have \"\\<dots> = (\\<integral>\\<^sup>+d. (\\<integral>\\<^sup>+\\<omega>. f (d s ## walk (d s) \\<omega>) * indicator {t. t \\<in> K s} (d s) \\<partial>D) \\<partial>\\<Pi>\\<^sub>M i\\<in>UNIV. K i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n          f (walk s (d ## \\<omega>))\n        \\<partial>stream_space\n                   (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                       \\<partial>Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x)) =\n    \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n          f (d s ## walk (d s) \\<omega>) *\n          indicator {t. t \\<in> set_pmf (K s)} (d s)\n        \\<partial>stream_space\n                   (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                       \\<partial>Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x))", "apply (rule nn_integral_cong_AE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in Pi\\<^sub>M UNIV\n             (\\<lambda>x.\n                 measure_pmf\n                  (K x)). \\<integral>\\<^sup>+ \\<omega>.\n         f (walk s (x ## \\<omega>))\n       \\<partial>stream_space\n                  (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))) =\n                          \\<integral>\\<^sup>+ \\<omega>.\n         f (x s ## walk (x s) \\<omega>) *\n         indicator {t. t \\<in> set_pmf (K s)} (x s)\n       \\<partial>stream_space\n                  (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))", "apply (subst walk.ctr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in Pi\\<^sub>M UNIV\n             (\\<lambda>x.\n                 measure_pmf\n                  (K x)). \\<integral>\\<^sup>+ \\<omega>.\n         f ((if shd (x ## \\<omega>) s \\<in> set_pmf (K s)\n             then shd (x ## \\<omega>) s\n             else SOME t. t \\<in> set_pmf (K s)) ##\n            walk\n             (if shd (x ## \\<omega>) s \\<in> set_pmf (K s)\n              then shd (x ## \\<omega>) s else SOME t. t \\<in> set_pmf (K s))\n             (stl (x ## \\<omega>)))\n       \\<partial>stream_space\n                  (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))) =\n                          \\<integral>\\<^sup>+ \\<omega>.\n         f (x s ## walk (x s) \\<omega>) *\n         indicator {t. t \\<in> set_pmf (K s)} (x s)\n       \\<partial>stream_space\n                  (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))", "apply (simp cong del: if_weak_cong)"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in Pi\\<^sub>M UNIV\n             (\\<lambda>x.\n                 measure_pmf\n                  (K x)). x s \\<notin> set_pmf (K s) \\<longrightarrow>\n                          \\<integral>\\<^sup>+ \\<omega>.\n         f ((SOME t. t \\<in> set_pmf (K s)) ##\n            walk (SOME t. t \\<in> set_pmf (K s)) \\<omega>)\n       \\<partial>stream_space\n                  (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))) =\n                          0", "apply (intro UNIV_I AE_component)"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in measure_pmf\n             (K s). x \\<notin> set_pmf (K s) \\<longrightarrow>\n                    \\<integral>\\<^sup>+ \\<omega>.\n   f ((SOME t. t \\<in> set_pmf (K s)) ##\n      walk (SOME t. t \\<in> set_pmf (K s)) \\<omega>)\n \\<partial>stream_space (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x))) =\n                    0", "apply (auto simp: AE_measure_pmf_iff)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (walk s (d ## \\<omega>))\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x)) =\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## walk (d s) \\<omega>) *\n        indicator {t. t \\<in> set_pmf (K s)} (d s)\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (walk s (d ## \\<omega>))\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x)) =\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## walk (d s) \\<omega>) *\n        indicator {t. t \\<in> set_pmf (K s)} (d s)\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have \"\\<dots> = (\\<integral>\\<^sup>+d. \\<integral>\\<^sup>+\\<omega>. f (d s ## \\<omega>) * indicator (K s) (d s) \\<partial>T (d s) \\<partial>\\<Pi>\\<^sub>M i\\<in>UNIV. K i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n          f (d s ## walk (d s) \\<omega>) *\n          indicator {t. t \\<in> set_pmf (K s)} (d s)\n        \\<partial>stream_space\n                   (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                       \\<partial>Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x)) =\n    \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n          f (d s ## \\<omega>) * indicator (set_pmf (K s)) (d s)\n        \\<partial>T (d s)\n                       \\<partial>Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x))", "by (subst T) (simp_all split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## walk (d s) \\<omega>) *\n        indicator {t. t \\<in> set_pmf (K s)} (d s)\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x)) =\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## \\<omega>) * indicator (set_pmf (K s)) (d s)\n      \\<partial>T (d s)\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## walk (d s) \\<omega>) *\n        indicator {t. t \\<in> set_pmf (K s)} (d s)\n      \\<partial>stream_space\n                 (Pi\\<^sub>M UNIV (\\<lambda>x. measure_pmf (K x)))\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x)) =\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## \\<omega>) * indicator (set_pmf (K s)) (d s)\n      \\<partial>T (d s)\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have \"\\<dots> = (\\<integral>\\<^sup>+t. \\<integral>\\<^sup>+\\<omega>. f (t ## \\<omega>) * indicator (K s) t \\<partial>T t \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n          f (d s ## \\<omega>) * indicator (set_pmf (K s)) (d s)\n        \\<partial>T (d s)\n                       \\<partial>Pi\\<^sub>M UNIV\n                                  (\\<lambda>x. measure_pmf (K x)) =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>.\n          f (t ## \\<omega>) * indicator (set_pmf (K s)) t\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "by (subst (2) PiM_component[symmetric]) (simp_all add: nn_integral_distr)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## \\<omega>) * indicator (set_pmf (K s)) (d s)\n      \\<partial>T (d s)\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x)) =\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>.\n        f (t ## \\<omega>) * indicator (set_pmf (K s)) t\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ d. \\<integral>\\<^sup>+ \\<omega>.\n        f (d s ## \\<omega>) * indicator (set_pmf (K s)) (d s)\n      \\<partial>T (d s)\n                     \\<partial>Pi\\<^sub>M UNIV\n                                (\\<lambda>x. measure_pmf (K x)) =\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>.\n        f (t ## \\<omega>) * indicator (set_pmf (K s)) t\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "have \"\\<dots> = (\\<integral>\\<^sup>+t. \\<integral>\\<^sup>+\\<omega>. f (t ## \\<omega>) \\<partial>T t \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>.\n          f (t ## \\<omega>) * indicator (set_pmf (K s)) t\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s) =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "by (rule nn_integral_cong_AE) (simp add: AE_measure_pmf_iff)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>.\n        f (t ## \\<omega>) * indicator (set_pmf (K s)) t\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s) =\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (T s) f =\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s)", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (T s) f =\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s)", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) f =\n  \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>. f (t ## \\<omega>)\n      \\<partial>T t\n                     \\<partial>measure_pmf (K s)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_T_gfp:\n  fixes g\n  defines \"l \\<equiv> \\<lambda>f \\<omega>. g (shd \\<omega>) (f (stl \\<omega>))\"\n  assumes [measurable]: \"case_prod g \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\"\n  assumes cont_g[THEN inf_continuous_compose, order_continuous_intros]: \"\\<And>s. inf_continuous (g s)\"\n  assumes int_g: \"\\<And>f s. f \\<in> borel_measurable S \\<Longrightarrow> (\\<integral>\\<^sup>+\\<omega>. g s (f \\<omega>) \\<partial>T s) = g s (\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T s)\"\n  assumes bnd_g: \"\\<And>f s. g s f \\<le> b\" \"0 \\<le> b\" \"b < \\<infinity>\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. gfp l \\<omega> \\<partial>T s) = gfp (\\<lambda>f s. \\<integral>\\<^sup>+t. g t (f t) \\<partial>K s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (gfp l) =\n    gfp (\\<lambda>f s.\n            \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n     s", "proof (rule nn_integral_gfp)"], ["proof (state)\ngoal (7 subgoals):\n 1. \\<And>s. T.events s = sets ?N\n 2. inf_continuous l\n 3. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 4. \\<And>F.\n       F \\<in> borel_measurable ?N \\<Longrightarrow>\n       l F \\<in> borel_measurable ?N\n 5. \\<And>F s.\n       F \\<in> borel_measurable ?N \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 6. \\<And>s. emeasure (T s) (space (T s)) \\<noteq> 0\n 7. \\<And>F s.\n       F \\<in> borel_measurable ?N \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "show \"\\<And>s. sets (T s) = sets S\" \"\\<And>F. F \\<in> borel_measurable S \\<Longrightarrow> l F \\<in> borel_measurable S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. T.events s = sets (stream_space (count_space UNIV))) &&&\n    (\\<And>F.\n        F \\<in> borel_measurable\n                 (stream_space (count_space UNIV)) \\<Longrightarrow>\n        l F \\<in> borel_measurable (stream_space (count_space UNIV)))", "by (auto simp: l_def)"], ["proof (state)\nthis:\n  T.events ?s1 = sets (stream_space (count_space UNIV))\n  ?F1\n  \\<in> borel_measurable (stream_space (count_space UNIV)) \\<Longrightarrow>\n  l ?F1 \\<in> borel_measurable (stream_space (count_space UNIV))\n\ngoal (5 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>s. emeasure (T s) (space (T s)) \\<noteq> 0\n 5. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "show \"\\<And>s. emeasure (T s) (space (T s)) \\<noteq> 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s. emeasure (T s) (space (T s)) \\<noteq> 0", "by (rewrite T.emeasure_space_1) simp"], ["proof (state)\nthis:\n  emeasure (T ?s1) (space (T ?s1)) \\<noteq> 0\n\ngoal (4 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "{"], ["proof (state)\nthis:\n  emeasure (T ?s1) (space (T ?s1)) \\<noteq> 0\n\ngoal (4 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "fix s F"], ["proof (state)\ngoal (4 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "have \"integral\\<^sup>N (T s) (l F) \\<le> (\\<integral>\\<^sup>+x. b \\<partial>T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (l F)\n    \\<le> \\<integral>\\<^sup>+ x. b \\<partial>T s", "by (intro nn_integral_mono) (simp add: l_def bnd_g)"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (l F) \\<le> \\<integral>\\<^sup>+ x. b \\<partial>T s\n\ngoal (4 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (l F) \\<le> \\<integral>\\<^sup>+ x. b \\<partial>T s\n\ngoal (4 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "have \"\\<dots> < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. b \\<partial>T s < \\<infinity>", "using bnd_g"], ["proof (prove)\nusing this:\n  g ?s1 ?f1 \\<le> b\n  0 \\<le> b\n  b < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. b \\<partial>T s < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. b \\<partial>T s < \\<infinity>\n\ngoal (4 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) < \\<infinity>\n 4. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (T s) (l F) < \\<infinity>", "show \"integral\\<^sup>N (T s) (l F) < \\<infinity>\""], ["proof (prove)\nusing this:\n  integral\\<^sup>N (T s) (l F) < \\<infinity>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (l F) < \\<infinity>", "."], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (l F) < \\<infinity>\n\ngoal (3 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "}"], ["proof (state)\nthis:\n  integral\\<^sup>N (T ?sa3) (l ?F3) < \\<infinity>\n\ngoal (3 subgoals):\n 1. inf_continuous l\n 2. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "show \"inf_continuous (\\<lambda>f s. \\<integral>\\<^sup>+ t. g t (f t) \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))", "proof (intro order_continuous_intros)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s x.\n       measure_pmf.random_variable (K s) borel (\\<lambda>t. g t (x t))\n 2. \\<And>s x.\n       \\<integral>\\<^sup>+ t. g t (x t) \\<partial>measure_pmf (K s) \\<noteq>\n       \\<infinity>", "fix f s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s x.\n       measure_pmf.random_variable (K s) borel (\\<lambda>t. g t (x t))\n 2. \\<And>s x.\n       \\<integral>\\<^sup>+ t. g t (x t) \\<partial>measure_pmf (K s) \\<noteq>\n       \\<infinity>", "have \"(\\<integral>\\<^sup>+ t. g t (f t) \\<partial>K s) \\<le> (\\<integral>\\<^sup>+ t. b \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s)\n    \\<le> \\<integral>\\<^sup>+ t. b \\<partial>measure_pmf (K s)", "by (intro nn_integral_mono bnd_g)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s)\n  \\<le> \\<integral>\\<^sup>+ t. b \\<partial>measure_pmf (K s)\n\ngoal (2 subgoals):\n 1. \\<And>s x.\n       measure_pmf.random_variable (K s) borel (\\<lambda>t. g t (x t))\n 2. \\<And>s x.\n       \\<integral>\\<^sup>+ t. g t (x t) \\<partial>measure_pmf (K s) \\<noteq>\n       \\<infinity>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s)\n  \\<le> \\<integral>\\<^sup>+ t. b \\<partial>measure_pmf (K s)\n\ngoal (2 subgoals):\n 1. \\<And>s x.\n       measure_pmf.random_variable (K s) borel (\\<lambda>t. g t (x t))\n 2. \\<And>s x.\n       \\<integral>\\<^sup>+ t. g t (x t) \\<partial>measure_pmf (K s) \\<noteq>\n       \\<infinity>", "have \"\\<dots> < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. b \\<partial>measure_pmf (K s) < \\<infinity>", "using bnd_g"], ["proof (prove)\nusing this:\n  g ?s1 ?f1 \\<le> b\n  0 \\<le> b\n  b < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. b \\<partial>measure_pmf (K s) < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. b \\<partial>measure_pmf (K s) < \\<infinity>\n\ngoal (2 subgoals):\n 1. \\<And>s x.\n       measure_pmf.random_variable (K s) borel (\\<lambda>t. g t (x t))\n 2. \\<And>s x.\n       \\<integral>\\<^sup>+ t. g t (x t) \\<partial>measure_pmf (K s) \\<noteq>\n       \\<infinity>", "finally"], ["proof (chain)\npicking this:\n  \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s) < \\<infinity>", "show \"(\\<integral>\\<^sup>+ t. g t (f t) \\<partial>K s) \\<noteq> \\<infinity>\""], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s) \\<noteq>\n    \\<infinity>", "by simp"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s) \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<And>s x.\n       measure_pmf.random_variable (K s) borel (\\<lambda>t. g t (x t))", "qed simp"], ["proof (state)\nthis:\n  inf_continuous\n   (\\<lambda>f s.\n       \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n\ngoal (2 subgoals):\n 1. inf_continuous l\n 2. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. inf_continuous l\n 2. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "fix s and F :: \"'s stream \\<Rightarrow> ennreal\""], ["proof (state)\ngoal (2 subgoals):\n 1. inf_continuous l\n 2. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "assume \"F \\<in> borel_measurable S\""], ["proof (state)\nthis:\n  F \\<in> borel_measurable (stream_space (count_space UNIV))\n\ngoal (2 subgoals):\n 1. inf_continuous l\n 2. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "then"], ["proof (chain)\npicking this:\n  F \\<in> borel_measurable (stream_space (count_space UNIV))", "show \"integral\\<^sup>N (T s) (l F) = (\\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F) \\<partial>K s) \""], ["proof (prove)\nusing this:\n  F \\<in> borel_measurable (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (l F) =\n    \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                       \\<partial>measure_pmf (K s)", "by (rewrite nn_integral_T) (simp_all add: l_def int_g)"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (l F) =\n  \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. inf_continuous l", "qed (auto intro!: order_continuous_intros simp: l_def)"], ["", "lemma nn_integral_T_lfp:\n  fixes g\n  defines \"l \\<equiv> \\<lambda>f \\<omega>. g (shd \\<omega>) (f (stl \\<omega>))\"\n  assumes [measurable]: \"case_prod g \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M borel)\"\n  assumes cont_g[THEN sup_continuous_compose, order_continuous_intros]: \"\\<And>s. sup_continuous (g s)\"\n  assumes int_g: \"\\<And>f s. f \\<in> borel_measurable S \\<Longrightarrow> (\\<integral>\\<^sup>+\\<omega>. g s (f \\<omega>) \\<partial>T s) = g s (\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T s)\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. lfp l \\<omega> \\<partial>T s) = lfp (\\<lambda>f s. \\<integral>\\<^sup>+t. g t (f t) \\<partial>K s) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (lfp l) =\n    lfp (\\<lambda>f s.\n            \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n     s", "proof (rule nn_integral_lfp)"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>s. T.events s = sets ?N\n 2. sup_continuous l\n 3. sup_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 4. \\<And>F.\n       F \\<in> borel_measurable ?N \\<Longrightarrow>\n       l F \\<in> borel_measurable ?N\n 5. \\<And>F s.\n       F \\<in> borel_measurable ?N \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "show \"\\<And>s. sets (T s) = sets S\" \"\\<And>F. F \\<in> borel_measurable S \\<Longrightarrow> l F \\<in> borel_measurable S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>s. T.events s = sets (stream_space (count_space UNIV))) &&&\n    (\\<And>F.\n        F \\<in> borel_measurable\n                 (stream_space (count_space UNIV)) \\<Longrightarrow>\n        l F \\<in> borel_measurable (stream_space (count_space UNIV)))", "by (auto simp: l_def)"], ["proof (state)\nthis:\n  T.events ?s1 = sets (stream_space (count_space UNIV))\n  ?F1\n  \\<in> borel_measurable (stream_space (count_space UNIV)) \\<Longrightarrow>\n  l ?F1 \\<in> borel_measurable (stream_space (count_space UNIV))\n\ngoal (3 subgoals):\n 1. sup_continuous l\n 2. sup_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "next"], ["proof (state)\ngoal (3 subgoals):\n 1. sup_continuous l\n 2. sup_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "fix s and F :: \"'s stream \\<Rightarrow> ennreal\""], ["proof (state)\ngoal (3 subgoals):\n 1. sup_continuous l\n 2. sup_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "assume \"F \\<in> borel_measurable S\""], ["proof (state)\nthis:\n  F \\<in> borel_measurable (stream_space (count_space UNIV))\n\ngoal (3 subgoals):\n 1. sup_continuous l\n 2. sup_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))\n 3. \\<And>F s.\n       F \\<in> borel_measurable\n                (stream_space (count_space UNIV)) \\<Longrightarrow>\n       integral\\<^sup>N (T s) (l F) =\n       \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                          \\<partial>measure_pmf (K s)", "then"], ["proof (chain)\npicking this:\n  F \\<in> borel_measurable (stream_space (count_space UNIV))", "show \"integral\\<^sup>N (T s) (l F) = (\\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F) \\<partial>K s) \""], ["proof (prove)\nusing this:\n  F \\<in> borel_measurable (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (l F) =\n    \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                       \\<partial>measure_pmf (K s)", "by (rewrite nn_integral_T) (simp_all add: l_def int_g)"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (l F) =\n  \\<integral>\\<^sup>+ t. g t (integral\\<^sup>N (T t) F)\n                     \\<partial>measure_pmf (K s)\n\ngoal (2 subgoals):\n 1. sup_continuous l\n 2. sup_continuous\n     (\\<lambda>f s.\n         \\<integral>\\<^sup>+ t. g t (f t) \\<partial>measure_pmf (K s))", "qed (auto simp: l_def intro!: order_continuous_intros)"], ["", "lemma emeasure_Collect_T:\n  assumes f[measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {x\\<in>space (T s). P x} = (\\<integral>\\<^sup>+t. emeasure (T t) {x\\<in>space (T t). P (t ## x)} \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {x \\<in> space (T s). P x} =\n    \\<integral>\\<^sup>+ t. emeasure (T t) {x \\<in> space (T t). P (t ## x)}\n                       \\<partial>measure_pmf (K s)", "apply (subst (1 2) nn_integral_indicator[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t. {x \\<in> space (T t). P (t ## x)} \\<in> T.events t\n 2. {x \\<in> space (T s). P x} \\<in> T.events s\n 3. integral\\<^sup>N (T s) (indicator {x \\<in> space (T s). P x}) =\n    \\<integral>\\<^sup>+ t. integral\\<^sup>N (T t)\n                            (indicator {x \\<in> space (T t). P (t ## x)})\n                       \\<partial>measure_pmf (K s)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. {x \\<in> space (T s). P x} \\<in> T.events s\n 2. integral\\<^sup>N (T s) (indicator {x \\<in> space (T s). P x}) =\n    \\<integral>\\<^sup>+ t. integral\\<^sup>N (T t)\n                            (indicator {x \\<in> space (T t). P (t ## x)})\n                       \\<partial>measure_pmf (K s)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (indicator {x \\<in> space (T s). P x}) =\n    \\<integral>\\<^sup>+ t. integral\\<^sup>N (T t)\n                            (indicator {x \\<in> space (T t). P (t ## x)})\n                       \\<partial>measure_pmf (K s)", "apply (subst nn_integral_T)"], ["proof (prove)\ngoal (2 subgoals):\n 1. indicator {x \\<in> space (T s). P x}\n    \\<in> borel_measurable (stream_space (count_space UNIV))\n 2. \\<integral>\\<^sup>+ t. \\<integral>\\<^sup>+ \\<omega>.\n          indicator {x \\<in> space (T s). P x} (t ## \\<omega>)\n        \\<partial>T t\n                       \\<partial>measure_pmf (K s) =\n    \\<integral>\\<^sup>+ t. integral\\<^sup>N (T t)\n                            (indicator {x \\<in> space (T t). P (t ## x)})\n                       \\<partial>measure_pmf (K s)", "apply (auto intro!: nn_integral_cong simp add: space_stream_space indicator_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma AE_T_iff:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"(AE \\<omega> in T x. P \\<omega>) \\<longleftrightarrow> (\\<forall>y\\<in>K x. AE \\<omega> in T y. P (y ## \\<omega>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P =\n    (\\<forall>y\\<in>set_pmf (K x). AE \\<omega> in T y. P (y ## \\<omega>))", "by (simp add: AE_iff_nn_integral nn_integral_T[where s=x])\n     (auto simp add: nn_integral_0_iff_AE AE_measure_pmf_iff split: split_indicator)"], ["", "lemma AE_T_alw:\n  assumes [measurable]: \"Measurable.pred S P\"\n  assumes P: \"\\<And>s. (x, s) \\<in> acc \\<Longrightarrow> AE \\<omega> in T s. P \\<omega>\"\n  shows \"AE \\<omega> in T x. alw P \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "define F where \"F = (\\<lambda>p x. P x \\<and> p (stl x))\""], ["proof (state)\nthis:\n  F = (\\<lambda>p x. P x \\<and> p (stl x))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "have [measurable]: \"\\<And>p. Measurable.pred S p \\<Longrightarrow> Measurable.pred S (F p)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>p.\n       Measurable.pred (stream_space (count_space UNIV)) p \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV)) (F p)", "by (auto simp: F_def)"], ["proof (state)\nthis:\n  Measurable.pred (stream_space (count_space UNIV)) ?p1 \\<Longrightarrow>\n  Measurable.pred (stream_space (count_space UNIV)) (F ?p1)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "have \"almost_everywhere (T s) ((F ^^ i) top)\"\n    if \"(x, s) \\<in> acc\" for i s"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) ((F ^^ i) \\<top>)", "using that"], ["proof (prove)\nusing this:\n  (x, s) \\<in> acc\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) ((F ^^ i) \\<top>)", "proof (induction i arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       (x, s) \\<in> acc \\<Longrightarrow>\n       almost_everywhere (T s) ((F ^^ 0) \\<top>)\n 2. \\<And>i s.\n       \\<lbrakk>\\<And>s.\n                   (x, s) \\<in> acc \\<Longrightarrow>\n                   almost_everywhere (T s) ((F ^^ i) \\<top>);\n        (x, s) \\<in> acc\\<rbrakk>\n       \\<Longrightarrow> almost_everywhere (T s) ((F ^^ Suc i) \\<top>)", "case (Suc i)"], ["proof (state)\nthis:\n  (x, ?s1) \\<in> acc \\<Longrightarrow>\n  almost_everywhere (T ?s1) ((F ^^ i) \\<top>)\n  (x, s) \\<in> acc\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       (x, s) \\<in> acc \\<Longrightarrow>\n       almost_everywhere (T s) ((F ^^ 0) \\<top>)\n 2. \\<And>i s.\n       \\<lbrakk>\\<And>s.\n                   (x, s) \\<in> acc \\<Longrightarrow>\n                   almost_everywhere (T s) ((F ^^ i) \\<top>);\n        (x, s) \\<in> acc\\<rbrakk>\n       \\<Longrightarrow> almost_everywhere (T s) ((F ^^ Suc i) \\<top>)", "then"], ["proof (chain)\npicking this:\n  (x, ?s1) \\<in> acc \\<Longrightarrow>\n  almost_everywhere (T ?s1) ((F ^^ i) \\<top>)\n  (x, s) \\<in> acc", "show ?case"], ["proof (prove)\nusing this:\n  (x, ?s1) \\<in> acc \\<Longrightarrow>\n  almost_everywhere (T ?s1) ((F ^^ i) \\<top>)\n  (x, s) \\<in> acc\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) ((F ^^ Suc i) \\<top>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                (x, s) \\<in> acc \\<Longrightarrow>\n                almost_everywhere (T s) ((F ^^ i) (\\<lambda>a. True));\n     (x, s) \\<in> acc\\<rbrakk>\n    \\<Longrightarrow> almost_everywhere (T s)\n                       (F ((F ^^ i) (\\<lambda>a. True)))", "apply (subst F_def)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                (x, s) \\<in> acc \\<Longrightarrow>\n                almost_everywhere (T s) ((F ^^ i) (\\<lambda>a. True));\n     (x, s) \\<in> acc\\<rbrakk>\n    \\<Longrightarrow> AE x in T s. P x \\<and>\n                                   (F ^^ i) (\\<lambda>a. True) (stl x)", "apply (simp add: P)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                (x, s) \\<in> acc \\<Longrightarrow>\n                almost_everywhere (T s) ((F ^^ i) (\\<lambda>a. True));\n     (x, s) \\<in> acc\\<rbrakk>\n    \\<Longrightarrow> AE x in T s. (F ^^ i) (\\<lambda>a. True) (stl x)", "apply (subst AE_T_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                (x, s) \\<in> acc \\<Longrightarrow>\n                almost_everywhere (T s) ((F ^^ i) (\\<lambda>a. True));\n     (x, s) \\<in> acc\\<rbrakk>\n    \\<Longrightarrow> Measurable.pred (stream_space (count_space UNIV))\n                       (\\<lambda>x. (F ^^ i) (\\<lambda>a. True) (stl x))\n 2. \\<lbrakk>\\<And>s.\n                (x, s) \\<in> acc \\<Longrightarrow>\n                almost_everywhere (T s) ((F ^^ i) (\\<lambda>a. True));\n     (x, s) \\<in> acc\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set_pmf (K s).\n                         AE \\<omega> in T\n   y. (F ^^ i) (\\<lambda>a. True) (stl (y ## \\<omega>))", "apply (measurable; simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                (x, s) \\<in> acc \\<Longrightarrow>\n                almost_everywhere (T s) ((F ^^ i) (\\<lambda>a. True));\n     (x, s) \\<in> acc\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set_pmf (K s).\n                         AE \\<omega> in T\n   y. (F ^^ i) (\\<lambda>a. True) (stl (y ## \\<omega>))", "apply (auto dest: rtrancl_into_rtrancl)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  almost_everywhere (T s) ((F ^^ Suc i) \\<top>)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       (x, s) \\<in> acc \\<Longrightarrow>\n       almost_everywhere (T s) ((F ^^ 0) \\<top>)", "qed simp"], ["proof (state)\nthis:\n  (x, ?s1) \\<in> acc \\<Longrightarrow>\n  almost_everywhere (T ?s1) ((F ^^ ?i1) \\<top>)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "then"], ["proof (chain)\npicking this:\n  (x, ?s1) \\<in> acc \\<Longrightarrow>\n  almost_everywhere (T ?s1) ((F ^^ ?i1) \\<top>)", "have \"almost_everywhere (T x) (gfp F)\""], ["proof (prove)\nusing this:\n  (x, ?s1) \\<in> acc \\<Longrightarrow>\n  almost_everywhere (T ?s1) ((F ^^ ?i1) \\<top>)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (gfp F)", "by (subst inf_continuous_gfp) (auto simp: inf_continuous_def AE_all_countable F_def)"], ["proof (state)\nthis:\n  almost_everywhere (T x) (gfp F)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "then"], ["proof (chain)\npicking this:\n  almost_everywhere (T x) (gfp F)", "show ?thesis"], ["proof (prove)\nusing this:\n  almost_everywhere (T x) (gfp F)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (alw P)", "by (simp add: alw_def F_def)"], ["proof (state)\nthis:\n  almost_everywhere (T x) (alw P)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma emeasure_suntil_disj:\n  assumes [measurable]: \"Measurable.pred S P\"\n  assumes *: \"\\<And>t. AE \\<omega> in T t. \\<not> (P \\<sqinter> (HLD X \\<sqinter> nxt (HLD X suntil P))) \\<omega>\"\n  shows \"emeasure (T s) {\\<omega>\\<in>space (T s). (HLD X suntil P) \\<omega>} =\n    lfp (\\<lambda>F s. emeasure (T s) {\\<omega>\\<in>space (T s). P \\<omega>} + (\\<integral>\\<^sup>+t. F t * indicator X t \\<partial>K s)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). (HLD X suntil P) \\<omega>} =\n    lfp (\\<lambda>F s.\n            emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) X F)\n     s", "unfolding suntil_lfp"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {\\<omega> \\<in> space (T s).\n      lfp (\\<lambda>Pa s. P s \\<or> HLD X s \\<and> Pa (stl s)) \\<omega>} =\n    lfp (\\<lambda>F s.\n            emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) X F)\n     s", "proof (rule emeasure_lfp[where s=s])"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))\n 5. \\<And>Pa sa.\n       \\<lbrakk>T.random_variable s (count_space UNIV) Pa;\n        Pa \\<le> lfp (\\<lambda>a b.\n                         P b \\<or> HLD X b \\<and> a (stl b))\\<rbrakk>\n       \\<Longrightarrow> emeasure (T sa)\n                          {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> Pa (stl \\<omega>)} =\n                         emeasure (T sa)\n                          {\\<omega> \\<in> space (T sa). P \\<omega>} +\n                         (\\<integral>\\<^sup>+t\\<in>X.\n       emeasure (T t) {\\<omega> \\<in> space (T s). Pa \\<omega>}\n                          \\<partial>measure_pmf (K sa))", "fix F t"], ["proof (state)\ngoal (5 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))\n 5. \\<And>Pa sa.\n       \\<lbrakk>T.random_variable s (count_space UNIV) Pa;\n        Pa \\<le> lfp (\\<lambda>a b.\n                         P b \\<or> HLD X b \\<and> a (stl b))\\<rbrakk>\n       \\<Longrightarrow> emeasure (T sa)\n                          {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> Pa (stl \\<omega>)} =\n                         emeasure (T sa)\n                          {\\<omega> \\<in> space (T sa). P \\<omega>} +\n                         (\\<integral>\\<^sup>+t\\<in>X.\n       emeasure (T t) {\\<omega> \\<in> space (T s). Pa \\<omega>}\n                          \\<partial>measure_pmf (K sa))", "assume [measurable]: \"Measurable.pred (T s) F\" and\n    F: \"F \\<le> lfp (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\""], ["proof (state)\nthis:\n  T.random_variable s (count_space UNIV) F\n  F \\<le> lfp (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n\ngoal (5 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))\n 5. \\<And>Pa sa.\n       \\<lbrakk>T.random_variable s (count_space UNIV) Pa;\n        Pa \\<le> lfp (\\<lambda>a b.\n                         P b \\<or> HLD X b \\<and> a (stl b))\\<rbrakk>\n       \\<Longrightarrow> emeasure (T sa)\n                          {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> Pa (stl \\<omega>)} =\n                         emeasure (T sa)\n                          {\\<omega> \\<in> space (T sa). P \\<omega>} +\n                         (\\<integral>\\<^sup>+t\\<in>X.\n       emeasure (T t) {\\<omega> \\<in> space (T s). Pa \\<omega>}\n                          \\<partial>measure_pmf (K sa))", "have \"emeasure (T t) {\\<omega> \\<in> space (T s). P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n    emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} + emeasure (T t) {\\<omega>\\<in>space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T t)\n     {\\<omega> \\<in> space (T s).\n      P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n    emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n    emeasure (T t)\n     {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)}", "proof (rule emeasure_add_AE)"], ["proof (state)\ngoal (5 subgoals):\n 1. {\\<omega> \\<in> space (T t). P \\<omega>} \\<in> T.events t\n 2. {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)}\n    \\<in> T.events t\n 3. {\\<omega> \\<in> space (T s).\n     P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)}\n    \\<in> T.events t\n 4. AE x in T t. (x \\<in> {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> F (stl \\<omega>)}) =\n                 (x \\<in> {\\<omega> \\<in> space (T t). P \\<omega>} \\<or>\n                  x \\<in> {\\<omega> \\<in> space (T t).\n                           HLD X \\<omega> \\<and> F (stl \\<omega>)})\n 5. AE x in T t. \\<not> (x \\<in> {\\<omega> \\<in> space (T t).\n                                  P \\<omega>} \\<and>\n                         x \\<in> {\\<omega> \\<in> space (T t).\n                                  HLD X \\<omega> \\<and> F (stl \\<omega>)})", "show \"AE x in T t. \\<not> (x \\<in> {\\<omega> \\<in> space (T t). P \\<omega>} \\<and> x \\<in> {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in T t. \\<not> (x \\<in> {\\<omega> \\<in> space (T t).\n                                  P \\<omega>} \\<and>\n                         x \\<in> {\\<omega> \\<in> space (T t).\n                                  HLD X \\<omega> \\<and> F (stl \\<omega>)})", "using *"], ["proof (prove)\nusing this:\n  AE \\<omega> in T ?t1. \\<not> (P \\<sqinter>\n                                (HLD X \\<sqinter> nxt (HLD X suntil P)))\n                                \\<omega>\n\ngoal (1 subgoal):\n 1. AE x in T t. \\<not> (x \\<in> {\\<omega> \\<in> space (T t).\n                                  P \\<omega>} \\<and>\n                         x \\<in> {\\<omega> \\<in> space (T t).\n                                  HLD X \\<omega> \\<and> F (stl \\<omega>)})", "by eventually_elim (insert F, auto simp: suntil_lfp[symmetric])"], ["proof (state)\nthis:\n  AE x in T t. \\<not> (x \\<in> {\\<omega> \\<in> space (T t).\n                                P \\<omega>} \\<and>\n                       x \\<in> {\\<omega> \\<in> space (T t).\n                                HLD X \\<omega> \\<and> F (stl \\<omega>)})\n\ngoal (4 subgoals):\n 1. {\\<omega> \\<in> space (T t). P \\<omega>} \\<in> T.events t\n 2. {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)}\n    \\<in> T.events t\n 3. {\\<omega> \\<in> space (T s).\n     P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)}\n    \\<in> T.events t\n 4. AE x in T t. (x \\<in> {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> F (stl \\<omega>)}) =\n                 (x \\<in> {\\<omega> \\<in> space (T t). P \\<omega>} \\<or>\n                  x \\<in> {\\<omega> \\<in> space (T t).\n                           HLD X \\<omega> \\<and> F (stl \\<omega>)})", "qed auto"], ["proof (state)\nthis:\n  emeasure (T t)\n   {\\<omega> \\<in> space (T s).\n    P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)}\n\ngoal (5 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))\n 5. \\<And>Pa sa.\n       \\<lbrakk>T.random_variable s (count_space UNIV) Pa;\n        Pa \\<le> lfp (\\<lambda>a b.\n                         P b \\<or> HLD X b \\<and> a (stl b))\\<rbrakk>\n       \\<Longrightarrow> emeasure (T sa)\n                          {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> Pa (stl \\<omega>)} =\n                         emeasure (T sa)\n                          {\\<omega> \\<in> space (T sa). P \\<omega>} +\n                         (\\<integral>\\<^sup>+t\\<in>X.\n       emeasure (T t) {\\<omega> \\<in> space (T s). Pa \\<omega>}\n                          \\<partial>measure_pmf (K sa))", "also"], ["proof (state)\nthis:\n  emeasure (T t)\n   {\\<omega> \\<in> space (T s).\n    P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)}\n\ngoal (5 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))\n 5. \\<And>Pa sa.\n       \\<lbrakk>T.random_variable s (count_space UNIV) Pa;\n        Pa \\<le> lfp (\\<lambda>a b.\n                         P b \\<or> HLD X b \\<and> a (stl b))\\<rbrakk>\n       \\<Longrightarrow> emeasure (T sa)\n                          {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> Pa (stl \\<omega>)} =\n                         emeasure (T sa)\n                          {\\<omega> \\<in> space (T sa). P \\<omega>} +\n                         (\\<integral>\\<^sup>+t\\<in>X.\n       emeasure (T t) {\\<omega> \\<in> space (T s). Pa \\<omega>}\n                          \\<partial>measure_pmf (K sa))", "have \"emeasure (T t) {\\<omega>\\<in>space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n    (\\<integral>\\<^sup>+t. emeasure (T t) {\\<omega> \\<in> space (T s). F \\<omega>} * indicator X t \\<partial>K t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T t)\n     {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n    \\<integral>\\<^sup>+t\\<in>X.\n                       emeasure (T t)\n                        {\\<omega> \\<in> space (T s). F \\<omega>}\n    \\<partial>measure_pmf (K t)", "by (subst emeasure_Collect_T) (auto intro!: nn_integral_cong split: split_indicator)"], ["proof (state)\nthis:\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t). HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n  \\<integral>\\<^sup>+t\\<in>X.\n                     emeasure (T t) {\\<omega> \\<in> space (T s). F \\<omega>}\n  \\<partial>measure_pmf (K t)\n\ngoal (5 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))\n 5. \\<And>Pa sa.\n       \\<lbrakk>T.random_variable s (count_space UNIV) Pa;\n        Pa \\<le> lfp (\\<lambda>a b.\n                         P b \\<or> HLD X b \\<and> a (stl b))\\<rbrakk>\n       \\<Longrightarrow> emeasure (T sa)\n                          {\\<omega> \\<in> space (T s).\n                           P \\<omega> \\<or>\n                           HLD X \\<omega> \\<and> Pa (stl \\<omega>)} =\n                         emeasure (T sa)\n                          {\\<omega> \\<in> space (T sa). P \\<omega>} +\n                         (\\<integral>\\<^sup>+t\\<in>X.\n       emeasure (T t) {\\<omega> \\<in> space (T s). Pa \\<omega>}\n                          \\<partial>measure_pmf (K sa))", "finally"], ["proof (chain)\npicking this:\n  emeasure (T t)\n   {\\<omega> \\<in> space (T s).\n    P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n  (\\<integral>\\<^sup>+t\\<in>X.\n                      emeasure (T t)\n                       {\\<omega> \\<in> space (T s). F \\<omega>}\n   \\<partial>measure_pmf (K t))", "show \"emeasure (T t) {\\<omega> \\<in> space (T s). P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n    emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} + (\\<integral>\\<^sup>+ t. emeasure (T t) {\\<omega> \\<in> space (T s). F \\<omega>} * indicator X t \\<partial>K t)\""], ["proof (prove)\nusing this:\n  emeasure (T t)\n   {\\<omega> \\<in> space (T s).\n    P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n  (\\<integral>\\<^sup>+t\\<in>X.\n                      emeasure (T t)\n                       {\\<omega> \\<in> space (T s). F \\<omega>}\n   \\<partial>measure_pmf (K t))\n\ngoal (1 subgoal):\n 1. emeasure (T t)\n     {\\<omega> \\<in> space (T s).\n      P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n    emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n    (\\<integral>\\<^sup>+t\\<in>X.\n                        emeasure (T t)\n                         {\\<omega> \\<in> space (T s). F \\<omega>}\n     \\<partial>measure_pmf (K t))", "."], ["proof (state)\nthis:\n  emeasure (T t)\n   {\\<omega> \\<in> space (T s).\n    P \\<omega> \\<or> HLD X \\<omega> \\<and> F (stl \\<omega>)} =\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n  (\\<integral>\\<^sup>+t\\<in>X.\n                      emeasure (T t)\n                       {\\<omega> \\<in> space (T s). F \\<omega>}\n   \\<partial>measure_pmf (K t))\n\ngoal (4 subgoals):\n 1. \\<And>sa. T.events sa = T.events s\n 2. sup_continuous (\\<lambda>a b. P b \\<or> HLD X b \\<and> a (stl b))\n 3. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) X F)\n 4. \\<And>Pa.\n       T.random_variable s (count_space UNIV) Pa \\<Longrightarrow>\n       T.random_variable s (count_space UNIV)\n        (\\<lambda>a. P a \\<or> HLD X a \\<and> Pa (stl a))", "qed (auto intro!: order_continuous_intros split: split_indicator)"], ["", "lemma emeasure_HLD_nxt:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {\\<omega>\\<in>space (T s). (X \\<cdot> P) \\<omega>} =\n    (\\<integral>\\<^sup>+x. emeasure (T x) {\\<omega>\\<in>space (T x). P \\<omega>} * indicator X x \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {\\<omega> \\<in> space (T s). HLD X \\<omega> \\<and> nxt P \\<omega>} =\n    \\<integral>\\<^sup>+x\\<in>X.\n                       emeasure (T x)\n                        {\\<omega> \\<in> space (T x). P \\<omega>}\n    \\<partial>measure_pmf (K s)", "by (subst emeasure_Collect_T)\n     (auto intro!: nn_integral_cong_AE simp: AE_measure_pmf_iff split: split_indicator)"], ["", "lemma emeasure_HLD:\n  \"emeasure (T s) {\\<omega>\\<in>space (T s). HLD X \\<omega>} = emeasure (K s) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). HLD X \\<omega>} =\n    emeasure (measure_pmf (K s)) X", "using emeasure_HLD_nxt[of \"\\<lambda>\\<omega>. True\" s X] T.emeasure_space_1"], ["proof (prove)\nusing this:\n  Measurable.pred (stream_space (count_space UNIV))\n   (\\<lambda>\\<omega>. True) \\<Longrightarrow>\n  emeasure (T s)\n   {\\<omega> \\<in> space (T s).\n    HLD X \\<omega> \\<and> nxt (\\<lambda>\\<omega>. True) \\<omega>} =\n  \\<integral>\\<^sup>+x\\<in>X.\n                     emeasure (T x) {\\<omega> \\<in> space (T x). True}\n  \\<partial>measure_pmf (K s)\n  emeasure (T ?s) (space (T ?s)) = 1\n\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). HLD X \\<omega>} =\n    emeasure (measure_pmf (K s)) X", "by simp"], ["", "lemma emeasure_suntil_HLD:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {x\\<in>space (T s). (not (HLD {t}) suntil (HLD {t} aand nxt P)) x} =\n   emeasure (T s) {x\\<in>space (T s). ev (HLD {t}) x} * emeasure (T t) {x\\<in>space (T t). P x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "let ?P = \"emeasure (T t) {\\<omega>\\<in>space (T t). P \\<omega>}\""], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "let ?F = \"\\<lambda>Q F s. emeasure (T s) {\\<omega>\\<in>space (T s). Q \\<omega>} + (\\<integral>\\<^sup>+t'. F t' * indicator (- {t}) t' \\<partial>K s)\""], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "have \"emeasure (T s) {x\\<in>space (T s). (HLD (-{t}) suntil ({t} \\<cdot> P)) x} = lfp (?F ({t} \\<cdot> P)) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      (HLD (- {t}) suntil (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs)) x} =\n    lfp (\\<lambda>F s.\n            emeasure (T s)\n             {\\<omega> \\<in> space (T s).\n              HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) (- {t}) F)\n     s", "by (rule emeasure_suntil_disj) (auto simp: HLD_iff)"], ["proof (state)\nthis:\n  emeasure (T s)\n   {x \\<in> space (T s).\n    (HLD (- {t}) suntil (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs)) x} =\n  lfp (\\<lambda>F s.\n          emeasure (T s)\n           {\\<omega> \\<in> space (T s).\n            HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n          set_nn_integral (measure_pmf (K s)) (- {t}) F)\n   s\n\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "also"], ["proof (state)\nthis:\n  emeasure (T s)\n   {x \\<in> space (T s).\n    (HLD (- {t}) suntil (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs)) x} =\n  lfp (\\<lambda>F s.\n          emeasure (T s)\n           {\\<omega> \\<in> space (T s).\n            HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n          set_nn_integral (measure_pmf (K s)) (- {t}) F)\n   s\n\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "have \"lfp (?F ({t} \\<cdot> P)) = (\\<lambda>s. lfp (?F (HLD {t})) s * ?P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s.\n            emeasure (T s)\n             {\\<omega> \\<in> space (T s).\n              HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) (- {t}) F) =\n    (\\<lambda>s.\n        lfp (\\<lambda>F s.\n                emeasure (T s)\n                 {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n                set_nn_integral (measure_pmf (K s)) (- {t}) F)\n         s *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})", "proof (rule lfp_transfer[symmetric, where \\<alpha>=\"\\<lambda>x s. x s * emeasure (T t) {\\<omega>\\<in>space (T t). P \\<omega>}\"])"], ["proof (state)\ngoal (5 subgoals):\n 1. sup_continuous\n     (\\<lambda>x s.\n         x s * emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n 2. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 3. mono\n     (\\<lambda>F s.\n         emeasure (T s)\n          {\\<omega> \\<in> space (T s).\n           HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 4. (\\<lambda>s.\n        \\<bottom> s *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n    \\<le> lfp (\\<lambda>F s.\n                  emeasure (T s)\n                   {\\<omega> \\<in> space (T s).\n                    HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n                  set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 5. \\<And>x.\n       x \\<le> lfp (\\<lambda>F s.\n                       emeasure (T s)\n                        {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n                       set_nn_integral (measure_pmf (K s)) (- {t})\n                        F) \\<Longrightarrow>\n       (\\<lambda>s.\n           (emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) (- {t}) x) *\n           emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}) =\n       (\\<lambda>s.\n           emeasure (T s)\n            {\\<omega> \\<in> space (T s).\n             HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n           (\\<integral>\\<^sup>+t'\\<in>- {t}.\n                               (x t' *\n                                emeasure (T t)\n                                 {\\<omega> \\<in> space (T t). P \\<omega>})\n            \\<partial>measure_pmf (K s)))", "fix F"], ["proof (state)\ngoal (5 subgoals):\n 1. sup_continuous\n     (\\<lambda>x s.\n         x s * emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n 2. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 3. mono\n     (\\<lambda>F s.\n         emeasure (T s)\n          {\\<omega> \\<in> space (T s).\n           HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 4. (\\<lambda>s.\n        \\<bottom> s *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n    \\<le> lfp (\\<lambda>F s.\n                  emeasure (T s)\n                   {\\<omega> \\<in> space (T s).\n                    HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n                  set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 5. \\<And>x.\n       x \\<le> lfp (\\<lambda>F s.\n                       emeasure (T s)\n                        {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n                       set_nn_integral (measure_pmf (K s)) (- {t})\n                        F) \\<Longrightarrow>\n       (\\<lambda>s.\n           (emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) (- {t}) x) *\n           emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}) =\n       (\\<lambda>s.\n           emeasure (T s)\n            {\\<omega> \\<in> space (T s).\n             HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n           (\\<integral>\\<^sup>+t'\\<in>- {t}.\n                               (x t' *\n                                emeasure (T t)\n                                 {\\<omega> \\<in> space (T t). P \\<omega>})\n            \\<partial>measure_pmf (K s)))", "show \"(\\<lambda>s. ?F (HLD {t}) F s * ?P) = ?F ({t} \\<cdot> P) (\\<lambda>s. F s * ?P)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        (emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F) *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}) =\n    (\\<lambda>s.\n        emeasure (T s)\n         {\\<omega> \\<in> space (T s).\n          HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n        (\\<integral>\\<^sup>+t'\\<in>- {t}.\n                            (F t' *\n                             emeasure (T t)\n                              {\\<omega> \\<in> space (T t). P \\<omega>})\n         \\<partial>measure_pmf (K s)))", "unfolding emeasure_HLD emeasure_HLD_nxt[OF assms] distrib_right"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>s.\n        emeasure (measure_pmf (K s)) {t} *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>} +\n        set_nn_integral (measure_pmf (K s)) (- {t}) F *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}) =\n    (\\<lambda>s.\n        (\\<integral>\\<^sup>+x\\<in>{t}.\n                            emeasure (T x)\n                             {\\<omega> \\<in> space (T x). P \\<omega>}\n         \\<partial>measure_pmf (K s)) +\n        (\\<integral>\\<^sup>+t'\\<in>- {t}.\n                            (F t' *\n                             emeasure (T t)\n                              {\\<omega> \\<in> space (T t). P \\<omega>})\n         \\<partial>measure_pmf (K s)))", "by (auto simp: fun_eq_iff nn_integral_multc[symmetric]\n               intro!: arg_cong2[where f=\"(+)\"] nn_integral_cong ac_simps\n               split: split_indicator)"], ["proof (state)\nthis:\n  (\\<lambda>s.\n      (emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n       set_nn_integral (measure_pmf (K s)) (- {t}) F) *\n      emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}) =\n  (\\<lambda>s.\n      emeasure (T s)\n       {\\<omega> \\<in> space (T s).\n        HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n      (\\<integral>\\<^sup>+t'\\<in>- {t}.\n                          (F t' *\n                           emeasure (T t)\n                            {\\<omega> \\<in> space (T t). P \\<omega>})\n       \\<partial>measure_pmf (K s)))\n\ngoal (4 subgoals):\n 1. sup_continuous\n     (\\<lambda>x s.\n         x s * emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n 2. sup_continuous\n     (\\<lambda>F s.\n         emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 3. mono\n     (\\<lambda>F s.\n         emeasure (T s)\n          {\\<omega> \\<in> space (T s).\n           HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n         set_nn_integral (measure_pmf (K s)) (- {t}) F)\n 4. (\\<lambda>s.\n        \\<bottom> s *\n        emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n    \\<le> lfp (\\<lambda>F s.\n                  emeasure (T s)\n                   {\\<omega> \\<in> space (T s).\n                    HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n                  set_nn_integral (measure_pmf (K s)) (- {t}) F)", "qed (auto intro!: order_continuous_intros sup_continuous_mono lfp_upperbound\n            intro: le_funI add_nonneg_nonneg\n            simp: bot_ennreal split: split_indicator)"], ["proof (state)\nthis:\n  lfp (\\<lambda>F s.\n          emeasure (T s)\n           {\\<omega> \\<in> space (T s).\n            HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n          set_nn_integral (measure_pmf (K s)) (- {t}) F) =\n  (\\<lambda>s.\n      lfp (\\<lambda>F s.\n              emeasure (T s)\n               {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n              set_nn_integral (measure_pmf (K s)) (- {t}) F)\n       s *\n      emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "also"], ["proof (state)\nthis:\n  lfp (\\<lambda>F s.\n          emeasure (T s)\n           {\\<omega> \\<in> space (T s).\n            HLD {t} \\<omega> \\<and> nxt P \\<omega>} +\n          set_nn_integral (measure_pmf (K s)) (- {t}) F) =\n  (\\<lambda>s.\n      lfp (\\<lambda>F s.\n              emeasure (T s)\n               {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n              set_nn_integral (measure_pmf (K s)) (- {t}) F)\n       s *\n      emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>})\n\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "have \"lfp (?F (HLD {t})) s = emeasure (T s) {x\\<in>space (T s). (HLD (-{t}) suntil HLD {t}) x}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s.\n            emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n            set_nn_integral (measure_pmf (K s)) (- {t}) F)\n     s =\n    emeasure (T s) {x \\<in> space (T s). (HLD (- {t}) suntil HLD {t}) x}", "by (rule emeasure_suntil_disj[symmetric]) (auto simp: HLD_iff)"], ["proof (state)\nthis:\n  lfp (\\<lambda>F s.\n          emeasure (T s) {\\<omega> \\<in> space (T s). HLD {t} \\<omega>} +\n          set_nn_integral (measure_pmf (K s)) (- {t}) F)\n   s =\n  emeasure (T s) {x \\<in> space (T s). (HLD (- {t}) suntil HLD {t}) x}\n\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "finally"], ["proof (chain)\npicking this:\n  emeasure (T s)\n   {x \\<in> space (T s).\n    (HLD (- {t}) suntil (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs)) x} =\n  emeasure (T s) {x \\<in> space (T s). (HLD (- {t}) suntil HLD {t}) x} *\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}", "show ?thesis"], ["proof (prove)\nusing this:\n  emeasure (T s)\n   {x \\<in> space (T s).\n    (HLD (- {t}) suntil (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs)) x} =\n  emeasure (T s) {x \\<in> space (T s). (HLD (- {t}) suntil HLD {t}) x} *\n  emeasure (T t) {\\<omega> \\<in> space (T t). P \\<omega>}\n\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {x \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n       x} =\n    emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n    emeasure (T t) {x \\<in> space (T t). P x}", "by (simp add: HLD_iff[abs_def] ev_eq_suntil)"], ["proof (state)\nthis:\n  emeasure (T s)\n   {x \\<in> space (T s).\n    ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n     (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n     x} =\n  emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n  emeasure (T t) {x \\<in> space (T t). P x}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_suntil:\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"(AE x in T s. (not (HLD {t}) suntil (HLD {t} aand nxt P)) x) \\<longleftrightarrow>\n   (AE x in T s. ev (HLD {t}) x) \\<and> (AE x in T t. P x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s)\n     ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n      (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs)) =\n    (almost_everywhere (T s) (ev (HLD {t})) \\<and>\n     almost_everywhere (T t) P)", "apply (subst (1 2 3) T.prob_Collect_eq_1[symmetric])"], ["proof (prove)\ngoal (4 subgoals):\n 1. {x \\<in> space (T t). P x} \\<in> T.events t\n 2. {x \\<in> space (T s). ev (HLD {t}) x} \\<in> T.events s\n 3. {x \\<in> space (T s).\n     ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n      (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n      x}\n    \\<in> T.events s\n 4. (T.prob s\n      {x \\<in> space (T s).\n       ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n        (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n        x} =\n     1) =\n    (T.prob s {x \\<in> space (T s). ev (HLD {t}) x} = 1 \\<and>\n     T.prob t {x \\<in> space (T t). P x} = 1)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. {x \\<in> space (T s). ev (HLD {t}) x} \\<in> T.events s\n 2. {x \\<in> space (T s).\n     ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n      (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n      x}\n    \\<in> T.events s\n 3. (T.prob s\n      {x \\<in> space (T s).\n       ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n        (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n        x} =\n     1) =\n    (T.prob s {x \\<in> space (T s). ev (HLD {t}) x} = 1 \\<and>\n     T.prob t {x \\<in> space (T t). P x} = 1)", "apply simp"], ["proof (prove)\ngoal (2 subgoals):\n 1. {x \\<in> space (T s).\n     ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n      (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n      x}\n    \\<in> T.events s\n 2. (T.prob s\n      {x \\<in> space (T s).\n       ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n        (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n        x} =\n     1) =\n    (T.prob s {x \\<in> space (T s). ev (HLD {t}) x} = 1 \\<and>\n     T.prob t {x \\<in> space (T t). P x} = 1)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. (T.prob s\n      {x \\<in> space (T s).\n       ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n        (\\<lambda>xs. HLD {t} xs \\<and> nxt P xs))\n        x} =\n     1) =\n    (T.prob s {x \\<in> space (T s). ev (HLD {t}) x} = 1 \\<and>\n     T.prob t {x \\<in> space (T t). P x} = 1)", "apply (simp_all add: measure_def emeasure_suntil_HLD del: space_T nxt.simps)"], ["proof (prove)\ngoal (1 subgoal):\n 1. (emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} *\n     emeasure (T t) {x \\<in> space (T t). P x} =\n     1) =\n    (emeasure (T s) {x \\<in> space (T s). ev (HLD {t}) x} = 1 \\<and>\n     emeasure (T t) {x \\<in> space (T t). P x} = 1)", "apply (auto simp: T.emeasure_eq_measure mult_eq_1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "subsection \\<open>Fairness\\<close>"], ["", "definition fair :: \"'s \\<Rightarrow> 's \\<Rightarrow> 's stream \\<Rightarrow> bool\" where\n  \"fair s t = alw (ev (HLD {s})) impl alw (ev (HLD {s} aand nxt (HLD {t})))\""], ["", "lemma AE_T_fair:\n  assumes \"t' \\<in> K t\"\n  shows \"AE \\<omega> in T s. fair t t' \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "let ?M = \"\\<lambda>P s. emeasure (T s) {\\<omega>\\<in>space (T s). P \\<omega>}\""], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "let ?t = \"HLD {t}\" and ?t' = \"HLD {t'}\""], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "define N where \"N = alw (ev ?t) aand alw (not (?t aand nxt ?t'))\""], ["proof (state)\nthis:\n  N =\n  (\\<lambda>xs.\n      alw (ev (HLD {t})) xs \\<and>\n      alw (\\<lambda>xs. \\<not> (HLD {t} xs \\<and> nxt (HLD {t'}) xs)) xs)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "let ?until = \"not ?t suntil (?t aand nxt (not ?t' aand nxt N))\""], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "have N_stl: \"\\<And>\\<omega>. N \\<omega> \\<Longrightarrow> N (stl \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>. N \\<omega> \\<Longrightarrow> N (stl \\<omega>)", "by (auto simp: N_def)"], ["proof (state)\nthis:\n  N ?\\<omega>1 \\<Longrightarrow> N (stl ?\\<omega>1)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "have [measurable]: \"Measurable.pred S N\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV)) N", "unfolding N_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV))\n     (\\<lambda>xs.\n         alw (ev (HLD {t})) xs \\<and>\n         alw (\\<lambda>xs. \\<not> (HLD {t} xs \\<and> nxt (HLD {t'}) xs)) xs)", "by measurable"], ["proof (state)\nthis:\n  Measurable.pred (stream_space (count_space UNIV)) N\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "let ?c = \"pmf (K t) t'\""], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "let ?R = \"\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal ?c)\""], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "have \"mono ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))", "by (intro monoI mult_right_mono inf_mono) (auto simp: mono_def field_simps )"], ["proof (state)\nthis:\n  mono (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "have \"\\<And>s. ?M N s \\<le> gfp ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s.\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))", "proof (induction rule: gfp_ordinal_induct[OF \\<open>mono ?R\\<close>])"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "fix x s"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "assume x: \"\\<And>s. ?M N s \\<le> x\""], ["proof (state)\nthis:\n  emeasure (T ?s1) {\\<omega> \\<in> space (T ?s1). N \\<omega>} \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "{"], ["proof (state)\nthis:\n  emeasure (T ?s1) {\\<omega> \\<in> space (T ?s1). N \\<omega>} \\<le> x\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "fix \\<omega>"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "assume \"N \\<omega>\""], ["proof (state)\nthis:\n  N \\<omega>\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "then"], ["proof (chain)\npicking this:\n  N \\<omega>", "have \"ev (HLD {t}) \\<omega>\" \"N \\<omega>\""], ["proof (prove)\nusing this:\n  N \\<omega>\n\ngoal (1 subgoal):\n 1. ev (HLD {t}) \\<omega> &&& N \\<omega>", "by (auto simp: N_def)"], ["proof (state)\nthis:\n  ev (HLD {t}) \\<omega>\n  N \\<omega>\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "then"], ["proof (chain)\npicking this:\n  ev (HLD {t}) \\<omega>\n  N \\<omega>", "have \"?until \\<omega>\""], ["proof (prove)\nusing this:\n  ev (HLD {t}) \\<omega>\n  N \\<omega>\n\ngoal (1 subgoal):\n 1. ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n     (\\<lambda>xs.\n         HLD {t} xs \\<and>\n         nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n     \\<omega>", "by (induct rule: ev_induct_strong) (auto simp: N_def intro: suntil.intros dest: N_stl)"], ["proof (state)\nthis:\n  ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n   (\\<lambda>xs.\n       HLD {t} xs \\<and>\n       nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n   \\<omega>\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "}"], ["proof (state)\nthis:\n  N ?\\<omega>3 \\<Longrightarrow>\n  ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n   (\\<lambda>xs.\n       HLD {t} xs \\<and>\n       nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n   ?\\<omega>3\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "then"], ["proof (chain)\npicking this:\n  N ?\\<omega>3 \\<Longrightarrow>\n  ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n   (\\<lambda>xs.\n       HLD {t} xs \\<and>\n       nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n   ?\\<omega>3", "have \"?M N s \\<le> ?M ?until s\""], ["proof (prove)\nusing this:\n  N ?\\<omega>3 \\<Longrightarrow>\n  ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n   (\\<lambda>xs.\n       HLD {t} xs \\<and>\n       nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n   ?\\<omega>3\n\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n    \\<le> emeasure (T s)\n           {\\<omega> \\<in> space (T s).\n            ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n             (\\<lambda>xs.\n                 HLD {t} xs \\<and>\n                 nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n             \\<omega>}", "by (intro emeasure_mono_AE) auto"], ["proof (state)\nthis:\n  emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n  \\<le> emeasure (T s)\n         {\\<omega> \\<in> space (T s).\n          ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n           (\\<lambda>xs.\n               HLD {t} xs \\<and>\n               nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n           \\<omega>}\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "also"], ["proof (state)\nthis:\n  emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n  \\<le> emeasure (T s)\n         {\\<omega> \\<in> space (T s).\n          ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n           (\\<lambda>xs.\n               HLD {t} xs \\<and>\n               nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n           \\<omega>}\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "have \"\\<dots> = ?M (ev ?t) s * ?M (not ?t' aand nxt N) t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s)\n     {\\<omega> \\<in> space (T s).\n      ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n       (\\<lambda>xs.\n           HLD {t} xs \\<and>\n           nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n       \\<omega>} =\n    emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n    emeasure (T t)\n     {\\<omega> \\<in> space (T t).\n      \\<not> HLD {t'} \\<omega> \\<and> nxt N \\<omega>}", "by (simp_all add: emeasure_suntil_HLD del: nxt.simps space_T)"], ["proof (state)\nthis:\n  emeasure (T s)\n   {\\<omega> \\<in> space (T s).\n    ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n     (\\<lambda>xs.\n         HLD {t} xs \\<and>\n         nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n     \\<omega>} =\n  emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t).\n    \\<not> HLD {t'} \\<omega> \\<and> nxt N \\<omega>}\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "also"], ["proof (state)\nthis:\n  emeasure (T s)\n   {\\<omega> \\<in> space (T s).\n    ((\\<lambda>xs. \\<not> HLD {t} xs) suntil\n     (\\<lambda>xs.\n         HLD {t} xs \\<and>\n         nxt (\\<lambda>xs. \\<not> HLD {t'} xs \\<and> nxt N xs) xs))\n     \\<omega>} =\n  emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t).\n    \\<not> HLD {t'} \\<omega> \\<and> nxt N \\<omega>}\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "have \"\\<dots> \\<le> ?M (ev ?t) s * (\\<integral>\\<^sup>+s'. 1 \\<sqinter> x * indicator (UNIV - {t'}) s' \\<partial>K t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n    emeasure (T t)\n     {\\<omega> \\<in> space (T t).\n      \\<not> HLD {t'} \\<omega> \\<and> nxt N \\<omega>}\n    \\<le> emeasure (T s)\n           {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n          (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n           \\<partial>measure_pmf (K t))", "by (auto intro!: mult_left_mono nn_integral_mono T.measure_le_1 emeasure_mono\n               split: split_indicator simp add: x emeasure_Collect_T[of _ t] simp del: space_T)"], ["proof (state)\nthis:\n  emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t).\n    \\<not> HLD {t'} \\<omega> \\<and> nxt N \\<omega>}\n  \\<le> emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n        (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n         \\<partial>measure_pmf (K t))\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "also"], ["proof (state)\nthis:\n  emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n  emeasure (T t)\n   {\\<omega> \\<in> space (T t).\n    \\<not> HLD {t'} \\<omega> \\<and> nxt N \\<omega>}\n  \\<le> emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n        (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n         \\<partial>measure_pmf (K t))\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "have \"\\<dots> \\<le> 1 * (\\<integral>\\<^sup>+s'. 1 \\<sqinter> x * indicator (UNIV - {t'}) s' \\<partial>K t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n    (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n     \\<partial>measure_pmf (K t))\n    \\<le> 1 *\n          (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n           \\<partial>measure_pmf (K t))", "by (intro mult_right_mono T.measure_le_1) simp"], ["proof (state)\nthis:\n  emeasure (T s) {\\<omega> \\<in> space (T s). ev (HLD {t}) \\<omega>} *\n  (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n   \\<partial>measure_pmf (K t))\n  \\<le> 1 *\n        (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n         \\<partial>measure_pmf (K t))\n\ngoal (2 subgoals):\n 1. \\<And>S s.\n       \\<lbrakk>\\<And>s.\n                   emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n                   \\<le> S;\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n        \\<le> S\\<rbrakk>\n       \\<Longrightarrow> emeasure (T s)\n                          {\\<omega> \\<in> space (T s). N \\<omega>}\n                         \\<le> 1 \\<sqinter> S * (1 - ennreal (pmf (K t) t'))\n 2. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "finally"], ["proof (chain)\npicking this:\n  emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n  \\<le> 1 *\n        (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n         \\<partial>measure_pmf (K t))", "show \"?M N s \\<le> 1 \\<sqinter> x * (1 - ennreal ?c)\""], ["proof (prove)\nusing this:\n  emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n  \\<le> 1 *\n        (\\<integral>\\<^sup>+s'\\<in>UNIV - {t'}. (1 \\<sqinter> x)\n         \\<partial>measure_pmf (K t))\n\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n    \\<le> 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))", "by (subst (asm) nn_integral_cmult_indicator) (auto simp: emeasure_Diff emeasure_pmf_single)"], ["proof (state)\nthis:\n  emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n  \\<le> 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))\n\ngoal (1 subgoal):\n 1. \\<And>M s.\n       \\<forall>S\\<in>M.\n          \\<forall>x.\n             emeasure (T x) {\\<omega> \\<in> space (T x). N \\<omega>}\n             \\<le> S \\<Longrightarrow>\n       emeasure (T s) {\\<omega> \\<in> space (T s). N \\<omega>}\n       \\<le> \\<Sqinter> M", "qed (auto intro: Inf_greatest)"], ["proof (state)\nthis:\n  emeasure (T ?s1) {\\<omega> \\<in> space (T ?s1). N \\<omega>}\n  \\<le> gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "also"], ["proof (state)\nthis:\n  emeasure (T ?s1) {\\<omega> \\<in> space (T ?s1). N \\<omega>}\n  \\<le> gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "from \\<open>mono ?R\\<close>"], ["proof (chain)\npicking this:\n  mono (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))", "have \"gfp ?R = ?R (gfp ?R)\""], ["proof (prove)\nusing this:\n  mono (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n\ngoal (1 subgoal):\n 1. gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) =\n    1 \\<sqinter>\n    gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n    (1 - ennreal (pmf (K t) t'))", "by (rule gfp_unfold)"], ["proof (state)\nthis:\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) =\n  1 \\<sqinter>\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n  (1 - ennreal (pmf (K t) t'))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "then"], ["proof (chain)\npicking this:\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) =\n  1 \\<sqinter>\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n  (1 - ennreal (pmf (K t) t'))", "have \"gfp ?R \\<le> ?R (gfp ?R)\""], ["proof (prove)\nusing this:\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) =\n  1 \\<sqinter>\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n  (1 - ennreal (pmf (K t) t'))\n\ngoal (1 subgoal):\n 1. gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n    \\<le> 1 \\<sqinter>\n          gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n          (1 - ennreal (pmf (K t) t'))", "by simp"], ["proof (state)\nthis:\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n  \\<le> 1 \\<sqinter>\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n        (1 - ennreal (pmf (K t) t'))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "with assms[THEN pmf_positive]"], ["proof (chain)\npicking this:\n  0 < pmf (K t) t'\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n  \\<le> 1 \\<sqinter>\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n        (1 - ennreal (pmf (K t) t'))", "have \"gfp ?R \\<le> 0\""], ["proof (prove)\nusing this:\n  0 < pmf (K t) t'\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t')))\n  \\<le> 1 \\<sqinter>\n        gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) *\n        (1 - ennreal (pmf (K t) t'))\n\ngoal (1 subgoal):\n 1. gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) \\<le> 0", "by (cases \"gfp ?R\")\n       (auto simp: top_unique inf_ennreal.rep_eq field_simps mult_le_0_iff ennreal_1[symmetric]\n                   pmf_le_1 ennreal_minus ennreal_mult[symmetric] ennreal_le_iff2 inf_min min_def\n             simp del: ennreal_1\n             split: if_split_asm)"], ["proof (state)\nthis:\n  gfp (\\<lambda>x. 1 \\<sqinter> x * (1 - ennreal (pmf (K t) t'))) \\<le> 0\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "finally"], ["proof (chain)\npicking this:\n  emeasure (T ?s2) {\\<omega> \\<in> space (T ?s2). N \\<omega>} \\<le> 0", "have \"\\<And>s. AE \\<omega> in T s. \\<not> N \\<omega>\""], ["proof (prove)\nusing this:\n  emeasure (T ?s2) {\\<omega> \\<in> space (T ?s2). N \\<omega>} \\<le> 0\n\ngoal (1 subgoal):\n 1. \\<And>s. AE \\<omega> in T s. \\<not> N \\<omega>", "by (subst AE_iff_measurable[OF _ refl]) (auto intro: antisym simp: le_fun_def)"], ["proof (state)\nthis:\n  AE \\<omega> in T ?s1. \\<not> N \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "then"], ["proof (chain)\npicking this:\n  AE \\<omega> in T ?s1. \\<not> N \\<omega>", "have \"AE \\<omega> in T s. alw (not N) \\<omega>\""], ["proof (prove)\nusing this:\n  AE \\<omega> in T ?s1. \\<not> N \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (alw (\\<lambda>xs. \\<not> N xs))", "by (intro AE_T_alw) auto"], ["proof (state)\nthis:\n  almost_everywhere (T s) (alw (\\<lambda>xs. \\<not> N xs))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "moreover"], ["proof (state)\nthis:\n  almost_everywhere (T s) (alw (\\<lambda>xs. \\<not> N xs))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "{"], ["proof (state)\nthis:\n  almost_everywhere (T s) (alw (\\<lambda>xs. \\<not> N xs))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "assume \"alw (ev (HLD {t})) \\<omega>\""], ["proof (state)\nthis:\n  alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "then"], ["proof (chain)\npicking this:\n  alw (ev (HLD {t})) \\<omega>", "have \"alw (alw (ev (HLD {t}))) \\<omega>\""], ["proof (prove)\nusing this:\n  alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (alw (ev (HLD {t}))) \\<omega>", "unfolding alw_alw"], ["proof (prove)\nusing this:\n  alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t})) \\<omega>", "."], ["proof (state)\nthis:\n  alw (alw (ev (HLD {t}))) \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "moreover"], ["proof (state)\nthis:\n  alw (alw (ev (HLD {t}))) \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "assume \"alw (not N) \\<omega>\""], ["proof (state)\nthis:\n  alw (\\<lambda>xs. \\<not> N xs) \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "then"], ["proof (chain)\npicking this:\n  alw (\\<lambda>xs. \\<not> N xs) \\<omega>", "have \"alw (alw (ev (HLD {t})) impl ev (HLD {t} aand nxt (HLD {t'}))) \\<omega>\""], ["proof (prove)\nusing this:\n  alw (\\<lambda>xs. \\<not> N xs) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            alw (ev (HLD {t})) xs \\<longrightarrow>\n            ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) xs)\n     \\<omega>", "unfolding N_def not_alw_iff not_ev_iff de_Morgan_disj de_Morgan_conj not_not imp_conv_disj"], ["proof (prove)\nusing this:\n  alw (\\<lambda>xs.\n          ev (alw (\\<lambda>xs. \\<not> HLD {t} xs)) xs \\<or>\n          ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) xs)\n   \\<omega>\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs.\n            ev (alw (\\<lambda>xs. \\<not> HLD {t} xs)) xs \\<or>\n            ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) xs)\n     \\<omega>", "."], ["proof (state)\nthis:\n  alw (\\<lambda>xs.\n          alw (ev (HLD {t})) xs \\<longrightarrow>\n          ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) xs)\n   \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "ultimately"], ["proof (chain)\npicking this:\n  alw (alw (ev (HLD {t}))) \\<omega>\n  alw (\\<lambda>xs.\n          alw (ev (HLD {t})) xs \\<longrightarrow>\n          ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) xs)\n   \\<omega>", "have \"alw (ev (HLD {t} aand nxt (HLD {t'}))) \\<omega>\""], ["proof (prove)\nusing this:\n  alw (alw (ev (HLD {t}))) \\<omega>\n  alw (\\<lambda>xs.\n          alw (ev (HLD {t})) xs \\<longrightarrow>\n          ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) xs)\n   \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs)) \\<omega>", "by (rule alw_mp)"], ["proof (state)\nthis:\n  alw (ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs)) \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "}"], ["proof (state)\nthis:\n  \\<lbrakk>alw (ev (HLD {t})) ?\\<omega>3;\n   alw (\\<lambda>xs. \\<not> N xs) ?\\<omega>3\\<rbrakk>\n  \\<Longrightarrow> alw (ev (\\<lambda>xs.\n                                HLD {t} xs \\<and> nxt (HLD {t'}) xs))\n                     ?\\<omega>3\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>alw (ev (HLD {t})) ?\\<omega>3;\n   alw (\\<lambda>xs. \\<not> N xs) ?\\<omega>3\\<rbrakk>\n  \\<Longrightarrow> alw (ev (\\<lambda>xs.\n                                HLD {t} xs \\<and> nxt (HLD {t'}) xs))\n                     ?\\<omega>3", "have \"\\<forall>\\<omega>. alw (not N) \\<omega> \\<longrightarrow> fair t t' \\<omega>\""], ["proof (prove)\nusing this:\n  \\<lbrakk>alw (ev (HLD {t})) ?\\<omega>3;\n   alw (\\<lambda>xs. \\<not> N xs) ?\\<omega>3\\<rbrakk>\n  \\<Longrightarrow> alw (ev (\\<lambda>xs.\n                                HLD {t} xs \\<and> nxt (HLD {t'}) xs))\n                     ?\\<omega>3\n\ngoal (1 subgoal):\n 1. \\<forall>\\<omega>.\n       alw (\\<lambda>xs. \\<not> N xs) \\<omega> \\<longrightarrow>\n       fair t t' \\<omega>", "by (auto simp: fair_def)"], ["proof (state)\nthis:\n  \\<forall>\\<omega>.\n     alw (\\<lambda>xs. \\<not> N xs) \\<omega> \\<longrightarrow>\n     fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "ultimately"], ["proof (chain)\npicking this:\n  almost_everywhere (T s) (alw (\\<lambda>xs. \\<not> N xs))\n  \\<forall>\\<omega>.\n     alw (\\<lambda>xs. \\<not> N xs) \\<omega> \\<longrightarrow>\n     fair t t' \\<omega>", "show ?thesis"], ["proof (prove)\nusing this:\n  almost_everywhere (T s) (alw (\\<lambda>xs. \\<not> N xs))\n  \\<forall>\\<omega>.\n     alw (\\<lambda>xs. \\<not> N xs) \\<omega> \\<longrightarrow>\n     fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (fair t t')", "by (simp add: eventually_mono)"], ["proof (state)\nthis:\n  almost_everywhere (T s) (fair t t')\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma enabled_imp_trancl:\n  assumes \"alw (HLD B) \\<omega>\" \"enabled s \\<omega>\"\n  shows \"alw (HLD (acc_on B `` {s})) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "define t where \"t = s\""], ["proof (state)\nthis:\n  t = s\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "then"], ["proof (chain)\npicking this:\n  t = s", "have \"(s, t) \\<in> acc_on B\""], ["proof (prove)\nusing this:\n  t = s\n\ngoal (1 subgoal):\n 1. (s, t) \\<in> acc_on B", "by auto"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on B\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "moreover"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on B\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "note \\<open>alw (HLD B) \\<omega>\\<close>"], ["proof (state)\nthis:\n  alw (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "moreover"], ["proof (state)\nthis:\n  alw (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "note \\<open>enabled s \\<omega>\\<close>[unfolded \\<open>t == s\\<close>[symmetric]]"], ["proof (state)\nthis:\n  enabled t \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "ultimately"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on B `` {s})) \\<omega>", "proof (coinduction arbitrary: t \\<omega> rule: alw_coinduct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>\\<rbrakk>\n       \\<Longrightarrow> HLD (acc_on B `` {s}) \\<omega>\n 2. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>;\n        \\<not> alw (HLD (acc_on B `` {s})) (stl \\<omega>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t \\<omega>'.\n                            stl \\<omega> = \\<omega>' \\<and>\n                            (s, t) \\<in> acc_on B \\<and>\n                            alw (HLD B) \\<omega>' \\<and> enabled t \\<omega>'", "case stl"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>\n  \\<not> alw (HLD (acc_on B `` {s})) (stl \\<omega>)\n\ngoal (2 subgoals):\n 1. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>\\<rbrakk>\n       \\<Longrightarrow> HLD (acc_on B `` {s}) \\<omega>\n 2. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>;\n        \\<not> alw (HLD (acc_on B `` {s})) (stl \\<omega>)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>t \\<omega>'.\n                            stl \\<omega> = \\<omega>' \\<and>\n                            (s, t) \\<in> acc_on B \\<and>\n                            alw (HLD B) \\<omega>' \\<and> enabled t \\<omega>'", "from this(1,2,3)"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>\n\ngoal (1 subgoal):\n 1. \\<exists>t \\<omega>.\n       stl \\<omega> = \\<omega> \\<and>\n       (s, t) \\<in> acc_on B \\<and>\n       alw (HLD B) \\<omega> \\<and> enabled t \\<omega>", "by (auto simp: enabled.simps[of _ \\<omega>] alw.simps[of _ \\<omega>] HLD_iff\n                 intro!: exI[of _ \"shd \\<omega>\"] rtrancl_trans[of s t])"], ["proof (state)\nthis:\n  \\<exists>t \\<omega>.\n     stl \\<omega> = \\<omega> \\<and>\n     (s, t) \\<in> acc_on B \\<and>\n     alw (HLD B) \\<omega> \\<and> enabled t \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>\\<rbrakk>\n       \\<Longrightarrow> HLD (acc_on B `` {s}) \\<omega>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>\\<rbrakk>\n       \\<Longrightarrow> HLD (acc_on B `` {s}) \\<omega>", "case (alw t \\<omega>)"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>t \\<omega>.\n       \\<lbrakk>(s, t) \\<in> acc_on B; alw (HLD B) \\<omega>;\n        enabled t \\<omega>\\<rbrakk>\n       \\<Longrightarrow> HLD (acc_on B `` {s}) \\<omega>", "then"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on B\n  alw (HLD B) \\<omega>\n  enabled t \\<omega>\n\ngoal (1 subgoal):\n 1. HLD (acc_on B `` {s}) \\<omega>", "by (auto simp: HLD_iff enabled.simps[of _ \\<omega>] alw.simps[of _ \\<omega>] intro!: rtrancl_trans[of s t])"], ["proof (state)\nthis:\n  HLD (acc_on B `` {s}) \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  alw (HLD (acc_on B `` {s})) \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_T_reachable: \"AE \\<omega> in T s. alw (HLD (acc `` {s})) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (alw (HLD (acc `` {s})))", "using AE_T_enabled"], ["proof (prove)\nusing this:\n  almost_everywhere (T ?s) (enabled ?s)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (alw (HLD (acc `` {s})))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       enabled s \\<omega> \\<Longrightarrow> alw (HLD (acc `` {s})) \\<omega>", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       enabled s \\<omega> \\<Longrightarrow> alw (HLD (acc `` {s})) \\<omega>", "assume \"enabled s \\<omega>\""], ["proof (state)\nthis:\n  enabled s \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       enabled s \\<omega> \\<Longrightarrow> alw (HLD (acc `` {s})) \\<omega>", "from enabled_imp_trancl[of UNIV, OF _ this]"], ["proof (chain)\npicking this:\n  alw (HLD UNIV) \\<omega> \\<Longrightarrow>\n  alw (HLD (acc_on UNIV `` {s})) \\<omega>", "show \"alw (HLD (acc `` {s})) \\<omega>\""], ["proof (prove)\nusing this:\n  alw (HLD UNIV) \\<omega> \\<Longrightarrow>\n  alw (HLD (acc_on UNIV `` {s})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (acc `` {s})) \\<omega>", "by (auto simp: HLD_iff[abs_def] all_imp_alw)"], ["proof (state)\nthis:\n  alw (HLD (acc `` {s})) \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_T_all_fair: \"AE \\<omega> in T s. \\<forall>(t,t')\\<in>SIGMA t:UNIV. K t. fair t t' \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                           fair t t' \\<omega>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                           fair t t' \\<omega>", "let ?Rn = \"SIGMA s:(acc `` {s}). K s\""], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                           fair t t' \\<omega>", "have \"AE \\<omega> in T s. \\<forall>(t,t')\\<in>?Rn. fair t t' \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\n                                 \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                           fair t t' \\<omega>", "proof (subst AE_ball_countable)"], ["proof (state)\ngoal (2 subgoals):\n 1. countable (SIGMA x:acc `` {s}. set_pmf (K x))\n 2. \\<forall>y\\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n       AE x in T s. case y of (t, t') \\<Rightarrow> fair t t' x", "show \"countable ?Rn\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (SIGMA x:acc `` {s}. set_pmf (K x))", "by (intro countable_SIGMA countable_rtrancl[OF countable_Image]) (auto simp: Image_def)"], ["proof (state)\nthis:\n  countable (SIGMA x:acc `` {s}. set_pmf (K x))\n\ngoal (1 subgoal):\n 1. \\<forall>y\\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n       AE x in T s. case y of (t, t') \\<Rightarrow> fair t t' x", "qed (auto intro!: AE_T_fair)"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<forall>(t, t')\n                               \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                         fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                           fair t t' \\<omega>", "then"], ["proof (chain)\npicking this:\n  AE \\<omega> in T s. \\<forall>(t, t')\n                               \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                         fair t t' \\<omega>", "show ?thesis"], ["proof (prove)\nusing this:\n  AE \\<omega> in T s. \\<forall>(t, t')\n                               \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                         fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                           fair t t' \\<omega>", "using AE_T_reachable"], ["proof (prove)\nusing this:\n  AE \\<omega> in T s. \\<forall>(t, t')\n                               \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                         fair t t' \\<omega>\n  almost_everywhere (T ?s) (alw (HLD (acc `` {?s})))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                           fair t t' \\<omega>", "proof (eventually_elim, safe)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "fix \\<omega> t t'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "assume \"\\<forall>(t,t')\\<in>?Rn. fair t t' \\<omega>\" \"t' \\<in> K t\" and alw: \"alw (HLD (acc `` {s})) \\<omega>\""], ["proof (state)\nthis:\n  \\<forall>(t, t')\\<in>SIGMA x:acc `` {s}. set_pmf (K x). fair t t' \\<omega>\n  t' \\<in> set_pmf (K t)\n  alw (HLD (acc `` {s})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "moreover"], ["proof (state)\nthis:\n  \\<forall>(t, t')\\<in>SIGMA x:acc `` {s}. set_pmf (K x). fair t t' \\<omega>\n  t' \\<in> set_pmf (K t)\n  alw (HLD (acc `` {s})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "{"], ["proof (state)\nthis:\n  \\<forall>(t, t')\\<in>SIGMA x:acc `` {s}. set_pmf (K x). fair t t' \\<omega>\n  t' \\<in> set_pmf (K t)\n  alw (HLD (acc `` {s})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "assume \"t \\<notin> acc `` {s}\""], ["proof (state)\nthis:\n  t \\<notin> acc `` {s}\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "then"], ["proof (chain)\npicking this:\n  t \\<notin> acc `` {s}", "have \"alw (not (HLD {t})) \\<omega>\""], ["proof (prove)\nusing this:\n  t \\<notin> acc `` {s}\n\ngoal (1 subgoal):\n 1. alw (\\<lambda>xs. \\<not> HLD {t} xs) \\<omega>", "by (intro alw_mono[OF alw]) (auto simp: HLD_iff)"], ["proof (state)\nthis:\n  alw (\\<lambda>xs. \\<not> HLD {t} xs) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "then"], ["proof (chain)\npicking this:\n  alw (\\<lambda>xs. \\<not> HLD {t} xs) \\<omega>", "have \"not (alw (ev (HLD {t}))) \\<omega>\""], ["proof (prove)\nusing this:\n  alw (\\<lambda>xs. \\<not> HLD {t} xs) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> alw (ev (HLD {t})) \\<omega>", "unfolding not_alw_iff not_ev_iff"], ["proof (prove)\nusing this:\n  alw (\\<lambda>xs. \\<not> HLD {t} xs) \\<omega>\n\ngoal (1 subgoal):\n 1. ev (alw (\\<lambda>xs. \\<not> HLD {t} xs)) \\<omega>", "by auto"], ["proof (state)\nthis:\n  \\<not> alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<not> alw (ev (HLD {t})) \\<omega>", "have \"fair t t' \\<omega>\""], ["proof (prove)\nusing this:\n  \\<not> alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. fair t t' \\<omega>", "unfolding fair_def"], ["proof (prove)\nusing this:\n  \\<not> alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t})) \\<omega> \\<longrightarrow>\n    alw (ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs)) \\<omega>", "by auto"], ["proof (state)\nthis:\n  fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "}"], ["proof (state)\nthis:\n  t \\<notin> acc `` {s} \\<Longrightarrow> fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> a b.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:acc `` {s}.\n                                 set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        alw (HLD (acc `` {s})) \\<omega>;\n        AE \\<omega> in T s. \\<forall>(t, t')\n                                     \\<in>SIGMA x:acc `` {s}. set_pmf (K x).\n                               fair t t' \\<omega>;\n        \\<And>s. almost_everywhere (T s) (alw (HLD (acc `` {s})));\n        a \\<in> UNIV; b \\<in> set_pmf (K a)\\<rbrakk>\n       \\<Longrightarrow> fair a b \\<omega>", "ultimately"], ["proof (chain)\npicking this:\n  \\<forall>(t, t')\\<in>SIGMA x:acc `` {s}. set_pmf (K x). fair t t' \\<omega>\n  t' \\<in> set_pmf (K t)\n  alw (HLD (acc `` {s})) \\<omega>\n  t \\<notin> acc `` {s} \\<Longrightarrow> fair t t' \\<omega>", "show \"fair t t' \\<omega>\""], ["proof (prove)\nusing this:\n  \\<forall>(t, t')\\<in>SIGMA x:acc `` {s}. set_pmf (K x). fair t t' \\<omega>\n  t' \\<in> set_pmf (K t)\n  alw (HLD (acc `` {s})) \\<omega>\n  t \\<notin> acc `` {s} \\<Longrightarrow> fair t t' \\<omega>\n\ngoal (1 subgoal):\n 1. fair t t' \\<omega>", "by auto"], ["proof (state)\nthis:\n  fair t t' \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                         fair t t' \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma fair_imp: assumes \"fair t t' \\<omega>\" \"alw (ev (HLD {t})) \\<omega>\" shows \"alw (ev (HLD {t'})) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "assume \"ev (HLD {t} aand nxt (HLD {t'})) \\<omega>\""], ["proof (state)\nthis:\n  ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "then"], ["proof (chain)\npicking this:\n  ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) \\<omega>", "have \"ev (HLD {t'}) \\<omega>\""], ["proof (prove)\nusing this:\n  ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs) \\<omega>\n\ngoal (1 subgoal):\n 1. ev (HLD {t'}) \\<omega>", "by induction auto"], ["proof (state)\nthis:\n  ev (HLD {t'}) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "}"], ["proof (state)\nthis:\n  ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs)\n   ?\\<omega>'3 \\<Longrightarrow>\n  ev (HLD {t'}) ?\\<omega>'3\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "with assms"], ["proof (chain)\npicking this:\n  fair t t' \\<omega>\n  alw (ev (HLD {t})) \\<omega>\n  ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs)\n   ?\\<omega>'3 \\<Longrightarrow>\n  ev (HLD {t'}) ?\\<omega>'3", "show ?thesis"], ["proof (prove)\nusing this:\n  fair t t' \\<omega>\n  alw (ev (HLD {t})) \\<omega>\n  ev (\\<lambda>xs. HLD {t} xs \\<and> nxt (HLD {t'}) xs)\n   ?\\<omega>'3 \\<Longrightarrow>\n  ev (HLD {t'}) ?\\<omega>'3\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "by (auto simp: fair_def elim!: alw_mp intro: all_imp_alw)"], ["proof (state)\nthis:\n  alw (ev (HLD {t'})) \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_T_ev_HLD:\n  assumes exiting: \"\\<And>t. (s, t) \\<in> acc_on (-B) \\<Longrightarrow> \\<exists>t'\\<in>B. (t, t') \\<in> acc\"\n  assumes fin: \"finite (acc_on (-B) `` {s})\"\n  shows \"AE \\<omega> in T s. ev (HLD B) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (ev (HLD B))", "using AE_T_all_fair AE_T_enabled"], ["proof (prove)\nusing this:\n  AE \\<omega> in T ?s. \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x).\n                          fair t t' \\<omega>\n  almost_everywhere (T ?s) (enabled ?s)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (ev (HLD B))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:UNIV. set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> ev (HLD B) \\<omega>", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:UNIV. set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> ev (HLD B) \\<omega>", "assume fair: \"\\<forall>(t, t')\\<in>(SIGMA s:UNIV. K s). fair t t' \\<omega>\" and \"enabled s \\<omega>\""], ["proof (state)\nthis:\n  \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x). fair t t' \\<omega>\n  enabled s \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>\\<forall>(t, t')\n                         \\<in>SIGMA \\<omega>:UNIV. set_pmf (K \\<omega>).\n                   fair t t' \\<omega>;\n        enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> ev (HLD B) \\<omega>", "show \"ev (HLD B) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev (HLD B) \\<omega>", "proof (rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "assume \"\\<not> ev (HLD B) \\<omega>\""], ["proof (state)\nthis:\n  \\<not> ev (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> ev (HLD B) \\<omega>", "have \"alw (HLD (- B)) \\<omega>\""], ["proof (prove)\nusing this:\n  \\<not> ev (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (- B)) \\<omega>", "by (simp add: not_ev_iff HLD_iff[abs_def])"], ["proof (state)\nthis:\n  alw (HLD (- B)) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "from enabled_imp_trancl[OF this \\<open>enabled s \\<omega>\\<close>]"], ["proof (chain)\npicking this:\n  alw (HLD (acc_on (- B) `` {s})) \\<omega>", "have \"alw (HLD (acc_on (-B) `` {s})) \\<omega>\""], ["proof (prove)\nusing this:\n  alw (HLD (acc_on (- B) `` {s})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (HLD (acc_on (- B) `` {s})) \\<omega>", "by (simp add: Diff_eq)"], ["proof (state)\nthis:\n  alw (HLD (acc_on (- B) `` {s})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "from pigeonhole_stream[OF this fin]"], ["proof (chain)\npicking this:\n  \\<exists>x\\<in>acc_on (- B) `` {s}. alw (ev (HLD {x})) \\<omega>", "obtain t where \"(s, t) \\<in> acc_on (-B)\" \"alw (ev (HLD {t})) \\<omega>\""], ["proof (prove)\nusing this:\n  \\<exists>x\\<in>acc_on (- B) `` {s}. alw (ev (HLD {x})) \\<omega>\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        \\<lbrakk>(s, t) \\<in> acc_on (- B);\n         alw (ev (HLD {t})) \\<omega>\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on (- B)\n  alw (ev (HLD {t})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "from exiting[OF this(1)]"], ["proof (chain)\npicking this:\n  \\<exists>t'\\<in>B. (t, t') \\<in> acc", "obtain t' where \"(t, t') \\<in> acc\" \"t' \\<in> B\""], ["proof (prove)\nusing this:\n  \\<exists>t'\\<in>B. (t, t') \\<in> acc\n\ngoal (1 subgoal):\n 1. (\\<And>t'.\n        \\<lbrakk>(t, t') \\<in> acc; t' \\<in> B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  (t, t') \\<in> acc\n  t' \\<in> B\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "from this(1)"], ["proof (chain)\npicking this:\n  (t, t') \\<in> acc", "have \"alw (ev (HLD {t'})) \\<omega>\""], ["proof (prove)\nusing this:\n  (t, t') \\<in> acc\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t'})) \\<omega>", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. alw (ev (HLD {t})) \\<omega>\n 2. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> acc;\n        (y, z) \\<in> (SIGMA x:UNIV. set_pmf (K x));\n        alw (ev (HLD {y})) \\<omega>\\<rbrakk>\n       \\<Longrightarrow> alw (ev (HLD {z})) \\<omega>", "case (step u w)"], ["proof (state)\nthis:\n  (t, u) \\<in> acc\n  (u, w) \\<in> (SIGMA x:UNIV. set_pmf (K x))\n  alw (ev (HLD {u})) \\<omega>\n\ngoal (2 subgoals):\n 1. alw (ev (HLD {t})) \\<omega>\n 2. \\<And>y z.\n       \\<lbrakk>(t, y) \\<in> acc;\n        (y, z) \\<in> (SIGMA x:UNIV. set_pmf (K x));\n        alw (ev (HLD {y})) \\<omega>\\<rbrakk>\n       \\<Longrightarrow> alw (ev (HLD {z})) \\<omega>", "then"], ["proof (chain)\npicking this:\n  (t, u) \\<in> acc\n  (u, w) \\<in> (SIGMA x:UNIV. set_pmf (K x))\n  alw (ev (HLD {u})) \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  (t, u) \\<in> acc\n  (u, w) \\<in> (SIGMA x:UNIV. set_pmf (K x))\n  alw (ev (HLD {u})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {w})) \\<omega>", "using fair fair_imp[of u w \\<omega>]"], ["proof (prove)\nusing this:\n  (t, u) \\<in> acc\n  (u, w) \\<in> (SIGMA x:UNIV. set_pmf (K x))\n  alw (ev (HLD {u})) \\<omega>\n  \\<forall>(t, t')\\<in>SIGMA x:UNIV. set_pmf (K x). fair t t' \\<omega>\n  \\<lbrakk>fair u w \\<omega>; alw (ev (HLD {u})) \\<omega>\\<rbrakk>\n  \\<Longrightarrow> alw (ev (HLD {w})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {w})) \\<omega>", "by auto"], ["proof (state)\nthis:\n  alw (ev (HLD {w})) \\<omega>\n\ngoal (1 subgoal):\n 1. alw (ev (HLD {t})) \\<omega>", "qed fact"], ["proof (state)\nthis:\n  alw (ev (HLD {t'})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "{"], ["proof (state)\nthis:\n  alw (ev (HLD {t'})) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "assume \"ev (HLD {t'}) \\<omega>\""], ["proof (state)\nthis:\n  ev (HLD {t'}) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ev (HLD {t'}) \\<omega>", "have \"ev (HLD B) \\<omega>\""], ["proof (prove)\nusing this:\n  ev (HLD {t'}) \\<omega>\n\ngoal (1 subgoal):\n 1. ev (HLD B) \\<omega>", "by (rule ev_mono) (auto simp: HLD_iff \\<open>t' \\<in> B\\<close>)"], ["proof (state)\nthis:\n  ev (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "}"], ["proof (state)\nthis:\n  ev (HLD {t'}) \\<omega> \\<Longrightarrow> ev (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<not> ev (HLD B) \\<omega> \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  ev (HLD {t'}) \\<omega> \\<Longrightarrow> ev (HLD B) \\<omega>", "show False"], ["proof (prove)\nusing this:\n  ev (HLD {t'}) \\<omega> \\<Longrightarrow> ev (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. False", "using \\<open>alw (ev (HLD {t'})) \\<omega>\\<close> \\<open>\\<not> ev (HLD B) \\<omega>\\<close>"], ["proof (prove)\nusing this:\n  ev (HLD {t'}) \\<omega> \\<Longrightarrow> ev (HLD B) \\<omega>\n  alw (ev (HLD {t'})) \\<omega>\n  \\<not> ev (HLD B) \\<omega>\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ev (HLD B) \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_T_ev_HLD':\n  assumes exiting: \"\\<And>s. s \\<notin> X \\<Longrightarrow> \\<exists>t\\<in>X. (s, t) \\<in> acc\"\n  assumes fin: \"finite (-X)\"\n  shows \"AE \\<omega> in T s. ev (HLD X) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T s) (ev (HLD X))", "proof (rule AE_T_ev_HLD)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       (s, t) \\<in> acc_on (- X) \\<Longrightarrow>\n       \\<exists>t'\\<in>X. (t, t') \\<in> acc\n 2. finite (acc_on (- X) `` {s})", "show \"\\<And>t. (s, t) \\<in> acc_on (- X) \\<Longrightarrow> \\<exists>t'\\<in>X. (t, t') \\<in> acc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t.\n       (s, t) \\<in> acc_on (- X) \\<Longrightarrow>\n       \\<exists>t'\\<in>X. (t, t') \\<in> acc", "using exiting"], ["proof (prove)\nusing this:\n  ?s1 \\<notin> X \\<Longrightarrow> \\<exists>t\\<in>X. (?s1, t) \\<in> acc\n\ngoal (1 subgoal):\n 1. \\<And>t.\n       (s, t) \\<in> acc_on (- X) \\<Longrightarrow>\n       \\<exists>t'\\<in>X. (t, t') \\<in> acc", "by (auto elim: rtrancl.cases)"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- X) \\<Longrightarrow>\n  \\<exists>t'\\<in>X. (?t1, t') \\<in> acc\n\ngoal (1 subgoal):\n 1. finite (acc_on (- X) `` {s})", "have \"acc_on (- X) `` {s} \\<subseteq> -X \\<union> {s}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_on (- X) `` {s} \\<subseteq> - X \\<union> {s}", "by (auto elim: rtrancl.cases)"], ["proof (state)\nthis:\n  acc_on (- X) `` {s} \\<subseteq> - X \\<union> {s}\n\ngoal (1 subgoal):\n 1. finite (acc_on (- X) `` {s})", "with fin"], ["proof (chain)\npicking this:\n  finite (- X)\n  acc_on (- X) `` {s} \\<subseteq> - X \\<union> {s}", "show \"finite (acc_on (- X) `` {s})\""], ["proof (prove)\nusing this:\n  finite (- X)\n  acc_on (- X) `` {s} \\<subseteq> - X \\<union> {s}\n\ngoal (1 subgoal):\n 1. finite (acc_on (- X) `` {s})", "by (auto dest: finite_subset )"], ["proof (state)\nthis:\n  finite (acc_on (- X) `` {s})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_T_max_sfirst:\n  assumes [measurable]: \"Measurable.pred S X\"\n  assumes AE: \"AE \\<omega> in T c. sfirst X (c ## \\<omega>) < \\<infinity>\" and \"0 < e\"\n  shows \"\\<exists>N::nat. \\<P>(\\<omega> in T c. N < sfirst X (c ## \\<omega>)) < e\" (is \"\\<exists>N. ?P N < e\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "have \"?P \\<longlonglongrightarrow> measure (T c) (\\<Inter>N::nat. {bT \\<in> space (T c). N < sfirst X (c ## bT)})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>N.\n        T.prob c\n         {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n    \\<longlonglongrightarrow> T.prob c\n                               (\\<Inter>x.\n                                   {bT \\<in> space (T c).\n                                    enat x < sfirst X (c ## bT)})", "using dual_order.strict_trans enat_ord_simps(2)"], ["proof (prove)\nusing this:\n  \\<lbrakk>?b < ?a; ?c < ?b\\<rbrakk> \\<Longrightarrow> ?c < ?a\n  (enat ?m < enat ?n) = (?m < ?n)\n\ngoal (1 subgoal):\n 1. (\\<lambda>N.\n        T.prob c\n         {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n    \\<longlonglongrightarrow> T.prob c\n                               (\\<Inter>x.\n                                   {bT \\<in> space (T c).\n                                    enat x < sfirst X (c ## bT)})", "by (intro T.finite_Lim_measure_decseq) (force simp: decseq_Suc_iff simp del: enat_ord_simps)+"], ["proof (state)\nthis:\n  (\\<lambda>N.\n      T.prob c\n       {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n  \\<longlonglongrightarrow> T.prob c\n                             (\\<Inter>x.\n                                 {bT \\<in> space (T c).\n                                  enat x < sfirst X (c ## bT)})\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "also"], ["proof (state)\nthis:\n  (\\<lambda>N.\n      T.prob c\n       {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n  \\<longlonglongrightarrow> T.prob c\n                             (\\<Inter>x.\n                                 {bT \\<in> space (T c).\n                                  enat x < sfirst X (c ## bT)})\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "have \"measure (T c) (\\<Inter>N::nat. {bT \\<in> space (T c). N < sfirst X (c ## bT)}) =\n      \\<P>(bT in T c. sfirst X (c ## bT) = \\<infinity>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.prob c\n     (\\<Inter>x. {bT \\<in> space (T c). enat x < sfirst X (c ## bT)}) =\n    T.prob c {bT \\<in> space (T c). sfirst X (c ## bT) = \\<infinity>}", "by (auto simp del: not_infinity_eq intro!: arg_cong[where f=\"measure (T c)\"])\n       (metis less_irrefl not_infinity_eq)"], ["proof (state)\nthis:\n  T.prob c\n   (\\<Inter>x. {bT \\<in> space (T c). enat x < sfirst X (c ## bT)}) =\n  T.prob c {bT \\<in> space (T c). sfirst X (c ## bT) = \\<infinity>}\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "also"], ["proof (state)\nthis:\n  T.prob c\n   (\\<Inter>x. {bT \\<in> space (T c). enat x < sfirst X (c ## bT)}) =\n  T.prob c {bT \\<in> space (T c). sfirst X (c ## bT) = \\<infinity>}\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "have \"\\<P>(bT in T c. sfirst X (c ## bT) = \\<infinity>) = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.prob c {bT \\<in> space (T c). sfirst X (c ## bT) = \\<infinity>} = 0", "using AE"], ["proof (prove)\nusing this:\n  AE \\<omega> in T c. sfirst X (c ## \\<omega>) < \\<infinity>\n\ngoal (1 subgoal):\n 1. T.prob c {bT \\<in> space (T c). sfirst X (c ## bT) = \\<infinity>} = 0", "by (intro T.prob_eq_0_AE) auto"], ["proof (state)\nthis:\n  T.prob c {bT \\<in> space (T c). sfirst X (c ## bT) = \\<infinity>} = 0\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>N.\n      T.prob c\n       {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n  \\<longlonglongrightarrow> 0", "have \"\\<exists>N. \\<forall>n\\<ge>N. norm (?P n - 0) < e\""], ["proof (prove)\nusing this:\n  (\\<lambda>N.\n      T.prob c\n       {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n  \\<longlonglongrightarrow> 0\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          norm\n           (T.prob c\n             {\\<omega> \\<in> space (T c).\n              enat n < sfirst X (c ## \\<omega>)} -\n            0)\n          < e", "using \\<open>0 < e\\<close>"], ["proof (prove)\nusing this:\n  (\\<lambda>N.\n      T.prob c\n       {\\<omega> \\<in> space (T c). enat N < sfirst X (c ## \\<omega>)})\n  \\<longlonglongrightarrow> 0\n  0 < e\n\ngoal (1 subgoal):\n 1. \\<exists>N.\n       \\<forall>n\\<ge>N.\n          norm\n           (T.prob c\n             {\\<omega> \\<in> space (T c).\n              enat n < sfirst X (c ## \\<omega>)} -\n            0)\n          < e", "by (rule LIMSEQ_D)"], ["proof (state)\nthis:\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        norm\n         (T.prob c\n           {\\<omega> \\<in> space (T c). enat n < sfirst X (c ## \\<omega>)} -\n          0)\n        < e\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "then"], ["proof (chain)\npicking this:\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        norm\n         (T.prob c\n           {\\<omega> \\<in> space (T c). enat n < sfirst X (c ## \\<omega>)} -\n          0)\n        < e", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<exists>N.\n     \\<forall>n\\<ge>N.\n        norm\n         (T.prob c\n           {\\<omega> \\<in> space (T c). enat n < sfirst X (c ## \\<omega>)} -\n          0)\n        < e\n\ngoal (1 subgoal):\n 1. \\<exists>x.\n       T.prob c\n        {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n       < e", "by (auto simp: measure_nonneg)"], ["proof (state)\nthis:\n  \\<exists>x.\n     T.prob c\n      {\\<omega> \\<in> space (T c). enat x < sfirst X (c ## \\<omega>)}\n     < e\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>First Hitting Time\\<close>"], ["", "lemma nn_integral_sfirst_finite':\n  assumes \"s \\<notin> H\"\n  assumes [simp]: \"finite (acc_on (-H) `` {s})\"\n  assumes until: \"AE \\<omega> in T s. ev (HLD H) \\<omega>\"\n  shows \"(\\<integral>\\<^sup>+ \\<omega>. sfirst (HLD H) \\<omega> \\<partial>T s) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have R_ne[simp]: \"acc_on (-H) `` {s} \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_on (- H) `` {s} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  acc_on (- H) `` {s} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have [measurable]: \"H \\<in> sets (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. H \\<in> sets (count_space UNIV)", "by simp"], ["proof (state)\nthis:\n  H \\<in> sets (count_space UNIV)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "let ?Pf = \"\\<lambda>n t. \\<P>(\\<omega> in T t. enat n < sfirst (HLD H) (t ## \\<omega>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have Pf_mono: \"\\<And>N n t. N \\<le> n \\<Longrightarrow> ?Pf n t \\<le> ?Pf N t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>N n t.\n       N \\<le> n \\<Longrightarrow>\n       T.prob t\n        {\\<omega> \\<in> space (T t).\n         enat n < sfirst (HLD H) (t ## \\<omega>)}\n       \\<le> T.prob t\n              {\\<omega> \\<in> space (T t).\n               enat N < sfirst (HLD H) (t ## \\<omega>)}", "by (auto intro!: T.finite_measure_mono simp del: enat_ord_code(1) simp: enat_ord_code(1)[symmetric])"], ["proof (state)\nthis:\n  ?N1 \\<le> ?n1 \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1).\n    enat ?n1 < sfirst (HLD H) (?t1 ## \\<omega>)}\n  \\<le> T.prob ?t1\n         {\\<omega> \\<in> space (T ?t1).\n          enat ?N1 < sfirst (HLD H) (?t1 ## \\<omega>)}\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have not_H: \"\\<And>t. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> t \\<notin> H\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>t. (s, t) \\<in> acc_on (- H) \\<Longrightarrow> t \\<notin> H", "using \\<open>s \\<notin> H\\<close>"], ["proof (prove)\nusing this:\n  s \\<notin> H\n\ngoal (1 subgoal):\n 1. \\<And>t. (s, t) \\<in> acc_on (- H) \\<Longrightarrow> t \\<notin> H", "by (auto elim: rtrancl.cases)"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow> ?t1 \\<notin> H\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have \"\\<forall>\\<^sub>F n in sequentially. \\<forall>t\\<in>acc_on (-H)``{s}. ?Pf n t < 1\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       \\<forall>t\\<in>acc_on (- H) `` {s}.\n          T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat n < sfirst (HLD H) (t ## \\<omega>)}\n          < 1", "proof (safe intro!: eventually_ball_finite)"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (acc_on (- H) `` {s})\n 2. \\<And>t x.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in sequentially.\n          T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat n < sfirst (HLD H) (t ## \\<omega>)}\n          < 1", "fix t"], ["proof (state)\ngoal (2 subgoals):\n 1. finite (acc_on (- H) `` {s})\n 2. \\<And>t x.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in sequentially.\n          T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat n < sfirst (HLD H) (t ## \\<omega>)}\n          < 1", "assume \"(s, t) \\<in> acc_on (-H)\""], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (2 subgoals):\n 1. finite (acc_on (- H) `` {s})\n 2. \\<And>t x.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in sequentially.\n          T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat n < sfirst (HLD H) (t ## \\<omega>)}\n          < 1", "then"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on (- H)", "have \"AE \\<omega> in T t. sfirst (HLD H) (t ## \\<omega>) < \\<infinity>\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T t. sfirst (HLD H) (t ## \\<omega>) < \\<infinity>", "unfolding sfirst_finite"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T t. ev (HLD H) (t ## \\<omega>)", "proof induction"], ["proof (state)\ngoal (2 subgoals):\n 1. AE \\<omega> in T s. ev (HLD H) (s ## \\<omega>)\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> acc_on (- H);\n        (y, z) \\<in> (SIGMA s:UNIV. set_pmf (K s) \\<inter> - H);\n        AE \\<omega> in T y. ev (HLD H) (y ## \\<omega>)\\<rbrakk>\n       \\<Longrightarrow> AE \\<omega> in T z. ev (HLD H) (z ## \\<omega>)", "case (step t u)"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on (- H)\n  (t, u) \\<in> (SIGMA s:UNIV. set_pmf (K s) \\<inter> - H)\n  AE \\<omega> in T t. ev (HLD H) (t ## \\<omega>)\n\ngoal (2 subgoals):\n 1. AE \\<omega> in T s. ev (HLD H) (s ## \\<omega>)\n 2. \\<And>y z.\n       \\<lbrakk>(s, y) \\<in> acc_on (- H);\n        (y, z) \\<in> (SIGMA s:UNIV. set_pmf (K s) \\<inter> - H);\n        AE \\<omega> in T y. ev (HLD H) (y ## \\<omega>)\\<rbrakk>\n       \\<Longrightarrow> AE \\<omega> in T z. ev (HLD H) (z ## \\<omega>)", "with step.IH"], ["proof (chain)\npicking this:\n  AE \\<omega> in T t. ev (HLD H) (t ## \\<omega>)\n  (s, t) \\<in> acc_on (- H)\n  (t, u) \\<in> (SIGMA s:UNIV. set_pmf (K s) \\<inter> - H)\n  AE \\<omega> in T t. ev (HLD H) (t ## \\<omega>)", "show ?case"], ["proof (prove)\nusing this:\n  AE \\<omega> in T t. ev (HLD H) (t ## \\<omega>)\n  (s, t) \\<in> acc_on (- H)\n  (t, u) \\<in> (SIGMA s:UNIV. set_pmf (K s) \\<inter> - H)\n  AE \\<omega> in T t. ev (HLD H) (t ## \\<omega>)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T u. ev (HLD H) (u ## \\<omega>)", "by (subst (asm) AE_T_iff) (auto simp: ev_Stream not_H)"], ["proof (state)\nthis:\n  AE \\<omega> in T u. ev (HLD H) (u ## \\<omega>)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. ev (HLD H) (s ## \\<omega>)", "qed (simp add: ev_Stream eventually_frequently_simps until)"], ["proof (state)\nthis:\n  AE \\<omega> in T t. sfirst (HLD H) (t ## \\<omega>) < \\<infinity>\n\ngoal (2 subgoals):\n 1. finite (acc_on (- H) `` {s})\n 2. \\<And>t x.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in sequentially.\n          T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat n < sfirst (HLD H) (t ## \\<omega>)}\n          < 1", "from AE_T_max_sfirst[OF _ this, of 1]"], ["proof (chain)\npicking this:\n  \\<lbrakk>Measurable.pred (stream_space (count_space UNIV)) (HLD H);\n   0 < 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       T.prob t\n                        {\\<omega> \\<in> space (T t).\n                         enat x < sfirst (HLD H) (t ## \\<omega>)}\n                       < 1", "obtain N where \"?Pf N t < 1\""], ["proof (prove)\nusing this:\n  \\<lbrakk>Measurable.pred (stream_space (count_space UNIV)) (HLD H);\n   0 < 1\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x.\n                       T.prob t\n                        {\\<omega> \\<in> space (T t).\n                         enat x < sfirst (HLD H) (t ## \\<omega>)}\n                       < 1\n\ngoal (1 subgoal):\n 1. (\\<And>N.\n        T.prob t\n         {\\<omega> \\<in> space (T t).\n          enat N < sfirst (HLD H) (t ## \\<omega>)}\n        < 1 \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  T.prob t\n   {\\<omega> \\<in> space (T t). enat N < sfirst (HLD H) (t ## \\<omega>)}\n  < 1\n\ngoal (2 subgoals):\n 1. finite (acc_on (- H) `` {s})\n 2. \\<And>t x.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       \\<forall>\\<^sub>F n in sequentially.\n          T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat n < sfirst (HLD H) (t ## \\<omega>)}\n          < 1", "with Pf_mono[of N]"], ["proof (chain)\npicking this:\n  N \\<le> ?n1 \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1).\n    enat ?n1 < sfirst (HLD H) (?t1 ## \\<omega>)}\n  \\<le> T.prob ?t1\n         {\\<omega> \\<in> space (T ?t1).\n          enat N < sfirst (HLD H) (?t1 ## \\<omega>)}\n  T.prob t\n   {\\<omega> \\<in> space (T t). enat N < sfirst (HLD H) (t ## \\<omega>)}\n  < 1", "show \"\\<forall>\\<^sub>F n in sequentially. ?Pf n t < 1\""], ["proof (prove)\nusing this:\n  N \\<le> ?n1 \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1).\n    enat ?n1 < sfirst (HLD H) (?t1 ## \\<omega>)}\n  \\<le> T.prob ?t1\n         {\\<omega> \\<in> space (T ?t1).\n          enat N < sfirst (HLD H) (?t1 ## \\<omega>)}\n  T.prob t\n   {\\<omega> \\<in> space (T t). enat N < sfirst (HLD H) (t ## \\<omega>)}\n  < 1\n\ngoal (1 subgoal):\n 1. \\<forall>\\<^sub>F n in sequentially.\n       T.prob t\n        {\\<omega> \\<in> space (T t).\n         enat n < sfirst (HLD H) (t ## \\<omega>)}\n       < 1", "by (auto simp: eventually_sequentially intro: le_less_trans)"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     T.prob t\n      {\\<omega> \\<in> space (T t). enat n < sfirst (HLD H) (t ## \\<omega>)}\n     < 1\n\ngoal (1 subgoal):\n 1. finite (acc_on (- H) `` {s})", "qed simp"], ["proof (state)\nthis:\n  \\<forall>\\<^sub>F n in sequentially.\n     \\<forall>t\\<in>acc_on (- H) `` {s}.\n        T.prob t\n         {\\<omega> \\<in> space (T t).\n          enat n < sfirst (HLD H) (t ## \\<omega>)}\n        < 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "then"], ["proof (chain)\npicking this:\n  \\<forall>\\<^sub>F n in sequentially.\n     \\<forall>t\\<in>acc_on (- H) `` {s}.\n        T.prob t\n         {\\<omega> \\<in> space (T t).\n          enat n < sfirst (HLD H) (t ## \\<omega>)}\n        < 1", "obtain n where \"\\<And>t. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> ?Pf n t < 1\""], ["proof (prove)\nusing this:\n  \\<forall>\\<^sub>F n in sequentially.\n     \\<forall>t\\<in>acc_on (- H) `` {s}.\n        T.prob t\n         {\\<omega> \\<in> space (T t).\n          enat n < sfirst (HLD H) (t ## \\<omega>)}\n        < 1\n\ngoal (1 subgoal):\n 1. (\\<And>n.\n        (\\<And>t.\n            (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n            T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat n < sfirst (HLD H) (t ## \\<omega>)}\n            < 1) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: eventually_sequentially)"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1). enat n < sfirst (HLD H) (?t1 ## \\<omega>)}\n  < 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "moreover"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1). enat n < sfirst (HLD H) (?t1 ## \\<omega>)}\n  < 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "define d where \"d = Max (?Pf n ` acc_on (-H) `` {s})\""], ["proof (state)\nthis:\n  d =\n  (MAX t\\<in>acc_on (- H) `` {s}.\n      T.prob t\n       {\\<omega> \\<in> space (T t).\n        enat n < sfirst (HLD H) (t ## \\<omega>)})\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "ultimately"], ["proof (chain)\npicking this:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1). enat n < sfirst (HLD H) (?t1 ## \\<omega>)}\n  < 1\n  d =\n  (MAX t\\<in>acc_on (- H) `` {s}.\n      T.prob t\n       {\\<omega> \\<in> space (T t).\n        enat n < sfirst (HLD H) (t ## \\<omega>)})", "have d: \"0 \\<le> d\" \"d < 1\" \"\\<And>t. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> ?Pf (Suc n) t \\<le> d\""], ["proof (prove)\nusing this:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1). enat n < sfirst (HLD H) (?t1 ## \\<omega>)}\n  < 1\n  d =\n  (MAX t\\<in>acc_on (- H) `` {s}.\n      T.prob t\n       {\\<omega> \\<in> space (T t).\n        enat n < sfirst (HLD H) (t ## \\<omega>)})\n\ngoal (1 subgoal):\n 1. 0 \\<le> d &&&\n    d < 1 &&&\n    (\\<And>t.\n        (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n        T.prob t\n         {\\<omega> \\<in> space (T t).\n          enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}\n        \\<le> d)", "using Pf_mono[of n \"Suc n\"]"], ["proof (prove)\nusing this:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1). enat n < sfirst (HLD H) (?t1 ## \\<omega>)}\n  < 1\n  d =\n  (MAX t\\<in>acc_on (- H) `` {s}.\n      T.prob t\n       {\\<omega> \\<in> space (T t).\n        enat n < sfirst (HLD H) (t ## \\<omega>)})\n  n \\<le> Suc n \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1).\n    enat (Suc n) < sfirst (HLD H) (?t1 ## \\<omega>)}\n  \\<le> T.prob ?t1\n         {\\<omega> \\<in> space (T ?t1).\n          enat n < sfirst (HLD H) (?t1 ## \\<omega>)}\n\ngoal (1 subgoal):\n 1. 0 \\<le> d &&&\n    d < 1 &&&\n    (\\<And>t.\n        (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n        T.prob t\n         {\\<omega> \\<in> space (T t).\n          enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}\n        \\<le> d)", "by (auto simp: Max_ge_iff measure_nonneg)"], ["proof (state)\nthis:\n  0 \\<le> d\n  d < 1\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1).\n    enat (Suc n) < sfirst (HLD H) (?t1 ## \\<omega>)}\n  \\<le> d\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "let ?F = \"\\<lambda>F \\<omega>. if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1 :: ennreal\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have \"sup_continuous ?F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_continuous\n     (\\<lambda>F \\<omega>.\n         if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)", "by (intro order_continuous_intros)"], ["proof (state)\nthis:\n  sup_continuous\n   (\\<lambda>F \\<omega>.\n       if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "then"], ["proof (chain)\npicking this:\n  sup_continuous\n   (\\<lambda>F \\<omega>.\n       if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)", "have \"mono ?F\""], ["proof (prove)\nusing this:\n  sup_continuous\n   (\\<lambda>F \\<omega>.\n       if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n\ngoal (1 subgoal):\n 1. mono\n     (\\<lambda>F \\<omega>.\n         if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)", "by (rule sup_continuous_mono)"], ["proof (state)\nthis:\n  mono\n   (\\<lambda>F \\<omega>.\n       if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have lfp_nonneg[simp]: \"\\<And>\\<omega>. 0 \\<le> lfp ?F \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       0 \\<le> lfp (\\<lambda>F \\<omega>.\n                       if shd \\<omega> \\<in> H then 0\n                       else F (stl \\<omega>) + 1)\n                \\<omega>", "by (subst lfp_unfold[OF \\<open>mono ?F\\<close>]) auto"], ["proof (state)\nthis:\n  0 \\<le> lfp (\\<lambda>F \\<omega>.\n                  if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n           ?\\<omega>1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "let ?I = \"\\<lambda>F s. \\<integral>\\<^sup>+t. (if t \\<in> H then 0 else F t + 1) \\<partial>K s\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have \"sup_continuous ?I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_continuous\n     (\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s))", "by (intro order_continuous_intros) auto"], ["proof (state)\nthis:\n  sup_continuous\n   (\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "then"], ["proof (chain)\npicking this:\n  sup_continuous\n   (\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s))", "have \"mono ?I\""], ["proof (prove)\nusing this:\n  sup_continuous\n   (\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s))\n\ngoal (1 subgoal):\n 1. mono\n     (\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s))", "by (rule sup_continuous_mono)"], ["proof (state)\nthis:\n  mono\n   (\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "define p where \"p = Suc n / (1 - d)\""], ["proof (state)\nthis:\n  p = real (Suc n) / (1 - d)\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have p: \"p = Suc n + d * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. p = real (Suc n) + d * p", "unfolding p_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. real (Suc n) / (1 - d) = real (Suc n) + d * (real (Suc n) / (1 - d))", "using d(1,2)"], ["proof (prove)\nusing this:\n  0 \\<le> d\n  d < 1\n\ngoal (1 subgoal):\n 1. real (Suc n) / (1 - d) = real (Suc n) + d * (real (Suc n) / (1 - d))", "by (auto simp: field_simps)"], ["proof (state)\nthis:\n  p = real (Suc n) + d * p\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have [simp]: \"0 \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> p", "using d(1,2)"], ["proof (prove)\nusing this:\n  0 \\<le> d\n  d < 1\n\ngoal (1 subgoal):\n 1. 0 \\<le> p", "by (auto simp: p_def)"], ["proof (state)\nthis:\n  0 \\<le> p\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have \"(\\<integral>\\<^sup>+ \\<omega>. sfirst (HLD H) \\<omega> \\<partial>T s) = (\\<integral>\\<^sup>+ \\<omega>. lfp ?F \\<omega> \\<partial>T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s =\n    integral\\<^sup>N (T s)\n     (lfp (\\<lambda>F \\<omega>.\n              if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1))", "proof (intro nn_integral_cong_AE)"], ["proof (state)\ngoal (1 subgoal):\n 1. AE x in T s. ennreal_of_enat (sfirst (HLD H) x) =\n                 lfp (\\<lambda>F \\<omega>.\n                         if shd \\<omega> \\<in> H then 0\n                         else F (stl \\<omega>) + 1)\n                  x", "show \"AE x in T s. sfirst (HLD H) x = lfp ?F x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in T s. ennreal_of_enat (sfirst (HLD H) x) =\n                 lfp (\\<lambda>F \\<omega>.\n                         if shd \\<omega> \\<in> H then 0\n                         else F (stl \\<omega>) + 1)\n                  x", "using until"], ["proof (prove)\nusing this:\n  almost_everywhere (T s) (ev (HLD H))\n\ngoal (1 subgoal):\n 1. AE x in T s. ennreal_of_enat (sfirst (HLD H) x) =\n                 lfp (\\<lambda>F \\<omega>.\n                         if shd \\<omega> \\<in> H then 0\n                         else F (stl \\<omega>) + 1)\n                  x", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ev (HLD H) x \\<Longrightarrow>\n       ennreal_of_enat (sfirst (HLD H) x) =\n       lfp (\\<lambda>F \\<omega>.\n               if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n        x", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       ev (HLD H) x \\<Longrightarrow>\n       ennreal_of_enat (sfirst (HLD H) x) =\n       lfp (\\<lambda>F \\<omega>.\n               if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n        x", "assume \"ev (HLD H) \\<omega>\""], ["proof (state)\nthis:\n  ev (HLD H) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       ev (HLD H) x \\<Longrightarrow>\n       ennreal_of_enat (sfirst (HLD H) x) =\n       lfp (\\<lambda>F \\<omega>.\n               if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n        x", "then"], ["proof (chain)\npicking this:\n  ev (HLD H) \\<omega>", "show \"sfirst (HLD H) \\<omega> = lfp ?F \\<omega>\""], ["proof (prove)\nusing this:\n  ev (HLD H) \\<omega>\n\ngoal (1 subgoal):\n 1. ennreal_of_enat (sfirst (HLD H) \\<omega>) =\n    lfp (\\<lambda>F \\<omega>.\n            if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n     \\<omega>", "by (induction rule: ev_induct_strong;\n            subst lfp_unfold[OF \\<open>mono ?F\\<close>], simp add: HLD_iff[abs_def] ac_simps max_absorb2)"], ["proof (state)\nthis:\n  ennreal_of_enat (sfirst (HLD H) \\<omega>) =\n  lfp (\\<lambda>F \\<omega>.\n          if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)\n   \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE x in T s. ennreal_of_enat (sfirst (HLD H) x) =\n               lfp (\\<lambda>F \\<omega>.\n                       if shd \\<omega> \\<in> H then 0\n                       else F (stl \\<omega>) + 1)\n                x\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x) \\<partial>T s =\n  integral\\<^sup>N (T s)\n   (lfp (\\<lambda>F \\<omega>.\n            if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x) \\<partial>T s =\n  integral\\<^sup>N (T s)\n   (lfp (\\<lambda>F \\<omega>.\n            if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have \"\\<dots> = lfp (?I^^Suc n) s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s)\n     (lfp (\\<lambda>F \\<omega>.\n              if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)) =\n    lfp ((\\<lambda>F s.\n             \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                                \\<partial>measure_pmf (K s)) ^^\n         Suc n)\n     s", "unfolding lfp_funpow[OF \\<open>mono ?I\\<close>]"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s)\n     (lfp (\\<lambda>F \\<omega>.\n              if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)) =\n    lfp (\\<lambda>F s.\n            \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                               \\<partial>measure_pmf (K s))\n     s", "by (subst nn_integral_T_lfp)\n       (auto simp: nn_integral_add max_absorb2 intro!: order_continuous_intros)"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s)\n   (lfp (\\<lambda>F \\<omega>.\n            if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)) =\n  lfp ((\\<lambda>F s.\n           \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                              \\<partial>measure_pmf (K s)) ^^\n       Suc n)\n   s\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s)\n   (lfp (\\<lambda>F \\<omega>.\n            if shd \\<omega> \\<in> H then 0 else F (stl \\<omega>) + 1)) =\n  lfp ((\\<lambda>F s.\n           \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                              \\<partial>measure_pmf (K s)) ^^\n       Suc n)\n   s\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "have \"lfp (?I^^Suc n) t \\<le> p\" if \"(s, t) \\<in> acc_on (-H)\" for t"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp ((\\<lambda>F s.\n             \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                                \\<partial>measure_pmf (K s)) ^^\n         Suc n)\n     t\n    \\<le> ennreal p", "using that"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. lfp ((\\<lambda>F s.\n             \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                                \\<partial>measure_pmf (K s)) ^^\n         Suc n)\n     t\n    \\<le> ennreal p", "proof (induction arbitrary: t rule: lfp_ordinal_induct[of \"?I^^Suc n\"])"], ["proof (state)\ngoal (3 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>S t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   S t \\<le> ennreal p;\n        S \\<le> lfp ((\\<lambda>F s.\n                         \\<integral>\\<^sup>+ t.\n        (if t \\<in> H then 0 else F t + 1)\n      \\<partial>measure_pmf (K s)) ^^\n                     Suc n);\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc n)\n                          S t\n                         \\<le> ennreal p\n 3. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "case (step S)"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow> S ?t1 \\<le> ennreal p\n  S \\<le> lfp ((\\<lambda>F s.\n                   \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n\\<partial>measure_pmf (K s)) ^^\n               Suc n)\n  (s, t) \\<in> acc_on (- H)\n\ngoal (3 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>S t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   S t \\<le> ennreal p;\n        S \\<le> lfp ((\\<lambda>F s.\n                         \\<integral>\\<^sup>+ t.\n        (if t \\<in> H then 0 else F t + 1)\n      \\<partial>measure_pmf (K s)) ^^\n                     Suc n);\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc n)\n                          S t\n                         \\<le> ennreal p\n 3. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "have \"(?I^^i) S t \\<le> i + ?Pf i t * ennreal p\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     i)\n     S t\n    \\<le> of_nat i +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "using step(3)"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     i)\n     S t\n    \\<le> of_nat i +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "proof (induction i arbitrary: t)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>t.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       ((\\<lambda>F s.\n            \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                               \\<partial>measure_pmf (K s)) ^^\n        0)\n        S t\n       \\<le> of_nat 0 +\n             ennreal\n              (T.prob t\n                {\\<omega> \\<in> space (T t).\n                 enat 0 < sfirst (HLD H) (t ## \\<omega>)}) *\n             ennreal p\n 2. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "case 0"], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (2 subgoals):\n 1. \\<And>t.\n       (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n       ((\\<lambda>F s.\n            \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                               \\<partial>measure_pmf (K s)) ^^\n        0)\n        S t\n       \\<le> of_nat 0 +\n             ennreal\n              (T.prob t\n                {\\<omega> \\<in> space (T t).\n                 enat 0 < sfirst (HLD H) (t ## \\<omega>)}) *\n             ennreal p\n 2. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "then"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on (- H)", "show ?case"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     0)\n     S t\n    \\<le> of_nat 0 +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat 0 < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "using T.prob_space step(1)"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n  T.prob ?s (space (T ?s)) = 1\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow> S ?t1 \\<le> ennreal p\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     0)\n     S t\n    \\<le> of_nat 0 +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat 0 < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "by (auto simp add: zero_ennreal_def[symmetric] not_H zero_enat_def[symmetric] one_ennreal_def[symmetric])"], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   0)\n   S t\n  \\<le> of_nat 0 +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat 0 < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "case (Suc i)"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   i)\n   S ?t1\n  \\<le> of_nat i +\n        ennreal\n         (T.prob ?t1\n           {\\<omega> \\<in> space (T ?t1).\n            enat i < sfirst (HLD H) (?t1 ## \\<omega>)}) *\n        ennreal p\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "then"], ["proof (chain)\npicking this:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   i)\n   S ?t1\n  \\<le> of_nat i +\n        ennreal\n         (T.prob ?t1\n           {\\<omega> \\<in> space (T ?t1).\n            enat i < sfirst (HLD H) (?t1 ## \\<omega>)}) *\n        ennreal p\n  (s, t) \\<in> acc_on (- H)", "have \"t \\<notin> H\""], ["proof (prove)\nusing this:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   i)\n   S ?t1\n  \\<le> of_nat i +\n        ennreal\n         (T.prob ?t1\n           {\\<omega> \\<in> space (T ?t1).\n            enat i < sfirst (HLD H) (?t1 ## \\<omega>)}) *\n        ennreal p\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. t \\<notin> H", "by (auto simp: not_H)"], ["proof (state)\nthis:\n  t \\<notin> H\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "from Suc.prems"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on (- H)", "have \"\\<And>t'. t' \\<in> K t \\<Longrightarrow> t' \\<notin> H \\<Longrightarrow> (s, t') \\<in> acc_on (-H)\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. \\<And>t'.\n       \\<lbrakk>t' \\<in> set_pmf (K t); t' \\<notin> H\\<rbrakk>\n       \\<Longrightarrow> (s, t') \\<in> acc_on (- H)", "by (rule rtrancl_into_rtrancl) (insert Suc.prems, auto dest: not_H)"], ["proof (state)\nthis:\n  \\<lbrakk>?t'1 \\<in> set_pmf (K t); ?t'1 \\<notin> H\\<rbrakk>\n  \\<Longrightarrow> (s, ?t'1) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "then"], ["proof (chain)\npicking this:\n  \\<lbrakk>?t'1 \\<in> set_pmf (K t); ?t'1 \\<notin> H\\<rbrakk>\n  \\<Longrightarrow> (s, ?t'1) \\<in> acc_on (- H)", "have \"(?I ^^ Suc i) S t \\<le> ?I (\\<lambda>t. i + ennreal (?Pf i t) * p) t\""], ["proof (prove)\nusing this:\n  \\<lbrakk>?t'1 \\<in> set_pmf (K t); ?t'1 \\<notin> H\\<rbrakk>\n  \\<Longrightarrow> (s, ?t'1) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     Suc i)\n     S t\n    \\<le> \\<integral>\\<^sup>+ t. (if t \\<in> H then 0\n                                  else of_nat i +\n ennreal\n  (T.prob t\n    {\\<omega> \\<in> space (T t). enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n ennreal p +\n 1)\n                             \\<partial>measure_pmf (K t)", "by (auto simp: AE_measure_pmf_iff simp del: sfirst_eSuc space_T\n                 intro!: nn_integral_mono_AE add_mono max.mono Suc)"], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc i)\n   S t\n  \\<le> \\<integral>\\<^sup>+ t. (if t \\<in> H then 0\n                                else of_nat i +\n                                     ennreal\n(T.prob t\n  {\\<omega> \\<in> space (T t). enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                                     ennreal p +\n                                     1)\n                           \\<partial>measure_pmf (K t)\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "also"], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc i)\n   S t\n  \\<le> \\<integral>\\<^sup>+ t. (if t \\<in> H then 0\n                                else of_nat i +\n                                     ennreal\n(T.prob t\n  {\\<omega> \\<in> space (T t). enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                                     ennreal p +\n                                     1)\n                           \\<partial>measure_pmf (K t)\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "have \"\\<dots> \\<le> (\\<integral>\\<^sup>+ t. ennreal (Suc i) + ennreal \\<P>(\\<omega> in T t. enat i < sfirst (HLD H) (t ## \\<omega>)) * p \\<partial>K t)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. (if t \\<in> H then 0\n                            else of_nat i +\n                                 ennreal\n                                  (T.prob t\n                                    {\\<omega> \\<in> space (T t).\n                                     enat i\n                                     < sfirst (HLD H) (t ## \\<omega>)}) *\n                                 ennreal p +\n                                 1)\n                       \\<partial>measure_pmf (K t)\n    \\<le> \\<integral>\\<^sup>+ t. ennreal (real (Suc i)) +\n                                 ennreal\n                                  (T.prob t\n                                    {\\<omega> \\<in> space (T t).\n                                     enat i\n                                     < sfirst (HLD H) (t ## \\<omega>)}) *\n                                 ennreal p\n                             \\<partial>measure_pmf (K t)", "by (intro nn_integral_mono) auto"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. (if t \\<in> H then 0\n                          else of_nat i +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat i\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p +\n                               1)\n                     \\<partial>measure_pmf (K t)\n  \\<le> \\<integral>\\<^sup>+ t. ennreal (real (Suc i)) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat i\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p\n                           \\<partial>measure_pmf (K t)\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "also"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. (if t \\<in> H then 0\n                          else of_nat i +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat i\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p +\n                               1)\n                     \\<partial>measure_pmf (K t)\n  \\<le> \\<integral>\\<^sup>+ t. ennreal (real (Suc i)) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat i\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p\n                           \\<partial>measure_pmf (K t)\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "have \"\\<dots> \\<le> Suc i + ennreal (?Pf (Suc i) t) * p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. ennreal (real (Suc i)) +\n                           ennreal\n                            (T.prob t\n                              {\\<omega> \\<in> space (T t).\n                               enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                           ennreal p\n                       \\<partial>measure_pmf (K t)\n    \\<le> of_nat (Suc i) +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "unfolding T.emeasure_eq_measure[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. ennreal (real (Suc i)) +\n                           emeasure (T t)\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)} *\n                           ennreal p\n                       \\<partial>measure_pmf (K t)\n    \\<le> of_nat (Suc i) +\n          emeasure (T t)\n           {\\<omega> \\<in> space (T t).\n            enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)} *\n          ennreal p", "by (subst (2) emeasure_Collect_T)\n           (auto simp: \\<open>t \\<notin> H\\<close> eSuc_enat[symmetric] nn_integral_add nn_integral_multc ennreal_of_nat_eq_real_of_nat)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ t. ennreal (real (Suc i)) +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p\n                     \\<partial>measure_pmf (K t)\n  \\<le> of_nat (Suc i) +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (1 subgoal):\n 1. \\<And>i t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   ((\\<lambda>F s.\n                        \\<integral>\\<^sup>+ t.\n       (if t \\<in> H then 0 else F t + 1)\n     \\<partial>measure_pmf (K s)) ^^\n                    i)\n                    S t\n                   \\<le> of_nat i +\n                         ennreal\n                          (T.prob t\n                            {\\<omega> \\<in> space (T t).\n                             enat i < sfirst (HLD H) (t ## \\<omega>)}) *\n                         ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc i)\n                          S t\n                         \\<le> of_nat (Suc i) +\n                               ennreal\n                                (T.prob t\n                                  {\\<omega> \\<in> space (T t).\n                                   enat (Suc i)\n                                   < sfirst (HLD H) (t ## \\<omega>)}) *\n                               ennreal p", "finally"], ["proof (chain)\npicking this:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc i)\n   S t\n  \\<le> of_nat (Suc i) +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p", "show ?case"], ["proof (prove)\nusing this:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc i)\n   S t\n  \\<le> of_nat (Suc i) +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     Suc i)\n     S t\n    \\<le> of_nat (Suc i) +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "by (simp add: ennreal_of_nat_eq_real_of_nat)"], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc i)\n   S t\n  \\<le> of_nat (Suc i) +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat (Suc i) < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   ?i1)\n   S t\n  \\<le> of_nat ?i1 +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat ?i1 < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (3 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>S t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   S t \\<le> ennreal p;\n        S \\<le> lfp ((\\<lambda>F s.\n                         \\<integral>\\<^sup>+ t.\n        (if t \\<in> H then 0 else F t + 1)\n      \\<partial>measure_pmf (K s)) ^^\n                     Suc n);\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc n)\n                          S t\n                         \\<le> ennreal p\n 3. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "then"], ["proof (chain)\npicking this:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   ?i1)\n   S t\n  \\<le> of_nat ?i1 +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat ?i1 < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p", "have \"(?I^^Suc n) S t \\<le> Suc n + ?Pf (Suc n) t * ennreal p\""], ["proof (prove)\nusing this:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   ?i1)\n   S t\n  \\<le> of_nat ?i1 +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat ?i1 < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     Suc n)\n     S t\n    \\<le> of_nat (Suc n) +\n          ennreal\n           (T.prob t\n             {\\<omega> \\<in> space (T t).\n              enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}) *\n          ennreal p", "."], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc n)\n   S t\n  \\<le> of_nat (Suc n) +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (3 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>S t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   S t \\<le> ennreal p;\n        S \\<le> lfp ((\\<lambda>F s.\n                         \\<integral>\\<^sup>+ t.\n        (if t \\<in> H then 0 else F t + 1)\n      \\<partial>measure_pmf (K s)) ^^\n                     Suc n);\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc n)\n                          S t\n                         \\<le> ennreal p\n 3. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "also"], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc n)\n   S t\n  \\<le> of_nat (Suc n) +\n        ennreal\n         (T.prob t\n           {\\<omega> \\<in> space (T t).\n            enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}) *\n        ennreal p\n\ngoal (3 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>S t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   S t \\<le> ennreal p;\n        S \\<le> lfp ((\\<lambda>F s.\n                         \\<integral>\\<^sup>+ t.\n        (if t \\<in> H then 0 else F t + 1)\n      \\<partial>measure_pmf (K s)) ^^\n                     Suc n);\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc n)\n                          S t\n                         \\<le> ennreal p\n 3. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "have \"\\<dots> \\<le> p\""], ["proof (prove)\ngoal (1 subgoal):\n 1. of_nat (Suc n) +\n    ennreal\n     (T.prob t\n       {\\<omega> \\<in> space (T t).\n        enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}) *\n    ennreal p\n    \\<le> ennreal p", "using d step"], ["proof (prove)\nusing this:\n  0 \\<le> d\n  d < 1\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  T.prob ?t1\n   {\\<omega> \\<in> space (T ?t1).\n    enat (Suc n) < sfirst (HLD H) (?t1 ## \\<omega>)}\n  \\<le> d\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow> S ?t1 \\<le> ennreal p\n  S \\<le> lfp ((\\<lambda>F s.\n                   \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n\\<partial>measure_pmf (K s)) ^^\n               Suc n)\n  (s, t) \\<in> acc_on (- H)\n\ngoal (1 subgoal):\n 1. of_nat (Suc n) +\n    ennreal\n     (T.prob t\n       {\\<omega> \\<in> space (T t).\n        enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}) *\n    ennreal p\n    \\<le> ennreal p", "by (subst (2) p) (auto intro!: mult_right_mono simp: ennreal_of_nat_eq_real_of_nat ennreal_mult)"], ["proof (state)\nthis:\n  of_nat (Suc n) +\n  ennreal\n   (T.prob t\n     {\\<omega> \\<in> space (T t).\n      enat (Suc n) < sfirst (HLD H) (t ## \\<omega>)}) *\n  ennreal p\n  \\<le> ennreal p\n\ngoal (3 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>S t.\n       \\<lbrakk>\\<And>t.\n                   (s, t) \\<in> acc_on (- H) \\<Longrightarrow>\n                   S t \\<le> ennreal p;\n        S \\<le> lfp ((\\<lambda>F s.\n                         \\<integral>\\<^sup>+ t.\n        (if t \\<in> H then 0 else F t + 1)\n      \\<partial>measure_pmf (K s)) ^^\n                     Suc n);\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> ((\\<lambda>F s.\n                              \\<integral>\\<^sup>+ t.\n             (if t \\<in> H then 0 else F t + 1)\n           \\<partial>measure_pmf (K s)) ^^\n                          Suc n)\n                          S t\n                         \\<le> ennreal p\n 3. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "finally"], ["proof (chain)\npicking this:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc n)\n   S t\n  \\<le> ennreal p", "show ?case"], ["proof (prove)\nusing this:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc n)\n   S t\n  \\<le> ennreal p\n\ngoal (1 subgoal):\n 1. ((\\<lambda>F s.\n         \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                            \\<partial>measure_pmf (K s)) ^^\n     Suc n)\n     S t\n    \\<le> ennreal p", "."], ["proof (state)\nthis:\n  ((\\<lambda>F s.\n       \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                          \\<partial>measure_pmf (K s)) ^^\n   Suc n)\n   S t\n  \\<le> ennreal p\n\ngoal (2 subgoals):\n 1. mono\n     ((\\<lambda>F s.\n          \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                             \\<partial>measure_pmf (K s)) ^^\n      Suc n)\n 2. \\<And>M t.\n       \\<lbrakk>\\<forall>S\\<in>M.\n                   \\<forall>x.\n                      (s, x) \\<in> acc_on (- H) \\<longrightarrow>\n                      S x \\<le> ennreal p;\n        (s, t) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> (\\<Squnion> M) t \\<le> ennreal p", "qed (auto simp: SUP_least intro!: mono_pow \\<open>mono ?I\\<close> simp del: funpow.simps)"], ["proof (state)\nthis:\n  (s, ?t1) \\<in> acc_on (- H) \\<Longrightarrow>\n  lfp ((\\<lambda>F s.\n           \\<integral>\\<^sup>+ t. (if t \\<in> H then 0 else F t + 1)\n                              \\<partial>measure_pmf (K s)) ^^\n       Suc n)\n   ?t1\n  \\<le> ennreal p\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "finally"], ["proof (chain)\npicking this:\n  (s, s) \\<in> acc_on (- H) \\<Longrightarrow>\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x) \\<partial>T s\n  \\<le> ennreal p", "show ?thesis"], ["proof (prove)\nusing this:\n  (s, s) \\<in> acc_on (- H) \\<Longrightarrow>\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x) \\<partial>T s\n  \\<le> ennreal p\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "unfolding p_def"], ["proof (prove)\nusing this:\n  (s, s) \\<in> acc_on (- H) \\<Longrightarrow>\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x) \\<partial>T s\n  \\<le> ennreal (real (Suc n) / (1 - d))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "by (auto simp: top_unique)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) x)\n                     \\<partial>T s \\<noteq>\n  \\<infinity>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_sfirst_finite:\n  assumes [simp]: \"finite (acc_on (-H) `` {s})\"\n  assumes until: \"AE \\<omega> in T s. ev (HLD H) \\<omega>\"\n  shows \"(\\<integral>\\<^sup>+ \\<omega>. sfirst (HLD H) (s ## \\<omega>) \\<partial>T s) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "assume \"s \\<notin> H\""], ["proof (state)\nthis:\n  s \\<notin> H\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>\n 2. \\<not> ?P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "then"], ["proof (chain)\npicking this:\n  s \\<notin> H", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<notin> H\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "using nn_integral_sfirst_finite'[of s H] until"], ["proof (prove)\nusing this:\n  s \\<notin> H\n  \\<lbrakk>s \\<notin> H; finite (acc_on (- H) `` {s});\n   almost_everywhere (T s) (ev (HLD H))\\<rbrakk>\n  \\<Longrightarrow> \\<integral>\\<^sup>+ x.\n   ennreal_of_enat (sfirst (HLD H) x)\n \\<partial>T s \\<noteq>\n                    \\<infinity>\n  almost_everywhere (T s) (ev (HLD H))\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "by (simp add: nn_integral_add)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                     \\<partial>T s \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<not> s \\<notin> H \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                       \\<partial>T s \\<noteq>\n    \\<infinity>", "qed (simp add: sfirst.simps)"], ["", "lemma prob_T:\n  assumes P: \"Measurable.pred S P\"\n  shows \"\\<P>(\\<omega> in T s. P \\<omega>) = (\\<integral>t. \\<P>(\\<omega> in T t. P (t ## \\<omega>)) \\<partial>K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.prob s {\\<omega> \\<in> space (T s). P \\<omega>} =\n    measure_pmf.expectation (K s)\n     (\\<lambda>t. T.prob t {\\<omega> \\<in> space (T t). P (t ## \\<omega>)})", "using emeasure_Collect_T[OF P, of s]"], ["proof (prove)\nusing this:\n  emeasure (T s) {x \\<in> space (T s). P x} =\n  \\<integral>\\<^sup>+ t. emeasure (T t) {x \\<in> space (T t). P (t ## x)}\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. T.prob s {\\<omega> \\<in> space (T s). P \\<omega>} =\n    measure_pmf.expectation (K s)\n     (\\<lambda>t. T.prob t {\\<omega> \\<in> space (T t). P (t ## \\<omega>)})", "unfolding T.emeasure_eq_measure"], ["proof (prove)\nusing this:\n  ennreal (T.prob s {x \\<in> space (T s). P x}) =\n  \\<integral>\\<^sup>+ t. ennreal\n                          (T.prob t {x \\<in> space (T t). P (t ## x)})\n                     \\<partial>measure_pmf (K s)\n\ngoal (1 subgoal):\n 1. T.prob s {\\<omega> \\<in> space (T s). P \\<omega>} =\n    measure_pmf.expectation (K s)\n     (\\<lambda>t. T.prob t {\\<omega> \\<in> space (T t). P (t ## \\<omega>)})", "by (subst (asm) nn_integral_eq_integral)\n     (auto intro!: measure_pmf.integrable_const_bound[where B=1])"], ["", "lemma T_subprob[measurable]: \"T \\<in> measurable (measure_pmf I) (subprob_algebra S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.random_variable I\n     (subprob_algebra (stream_space (count_space UNIV))) T", "by (auto intro!: space_bind simp: space_subprob_algebra) unfold_locales"], ["", "subsection \\<open>Markov chain with Initial Distribution\\<close>"], ["", "definition T' :: \"'s pmf \\<Rightarrow> 's stream measure\" where\n  \"T' I = bind I (\\<lambda>s. distr (T s) S ((##) s))\""], ["", "lemma distr_Stream_subprob:\n  \"(\\<lambda>s. distr (T s) S ((##) s)) \\<in> measurable (measure_pmf I) (subprob_algebra S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf.random_variable I\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>s. distr (T s) (stream_space (count_space UNIV)) ((##) s))", "apply (intro measurable_distr2[OF _ T_subprob])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(x, y). x ## y)\n    \\<in> measure_pmf I \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "apply (subst measurable_cong_sets[where M'=\"count_space UNIV \\<Otimes>\\<^sub>M S\" and N'=S])"], ["proof (prove)\ngoal (3 subgoals):\n 1. sets (measure_pmf I \\<Otimes>\\<^sub>M stream_space (count_space UNIV)) =\n    sets\n     (count_space UNIV \\<Otimes>\\<^sub>M stream_space (count_space UNIV))\n 2. sets (stream_space (count_space UNIV)) =\n    sets (stream_space (count_space UNIV))\n 3. (\\<lambda>(x, y). x ## y)\n    \\<in> count_space UNIV \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "apply (rule sets_pair_measure_cong)"], ["proof (prove)\ngoal (4 subgoals):\n 1. measure_pmf.events I = sets (count_space UNIV)\n 2. sets (stream_space (count_space UNIV)) =\n    sets (stream_space (count_space UNIV))\n 3. sets (stream_space (count_space UNIV)) =\n    sets (stream_space (count_space UNIV))\n 4. (\\<lambda>(x, y). x ## y)\n    \\<in> count_space UNIV \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "apply auto"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma sets_T': \"sets (T' I) = sets S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (T' I) = sets (stream_space (count_space UNIV))", "by (simp add: T'_def)"], ["", "lemma prob_space_T': \"prob_space (T' I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space (T' I)", "unfolding T'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space\n     (measure_pmf I \\<bind>\n      (\\<lambda>s. distr (T s) (stream_space (count_space UNIV)) ((##) s)))", "proof (rule measure_pmf.prob_space_bind)"], ["proof (state)\ngoal (2 subgoals):\n 1. AE x in measure_pmf\n             I. prob_space\n                 (distr (T x) (stream_space (count_space UNIV)) ((##) x))\n 2. measure_pmf.random_variable I (subprob_algebra ?S)\n     (\\<lambda>s. distr (T s) (stream_space (count_space UNIV)) ((##) s))", "show \"AE s in I. prob_space (distr (T s) S ((##) s))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE s in measure_pmf\n             I. prob_space\n                 (distr (T s) (stream_space (count_space UNIV)) ((##) s))", "by (intro AE_measure_pmf_iff[THEN iffD2] ballI T.prob_space_distr) simp"], ["proof (state)\nthis:\n  AE s in measure_pmf\n           I. prob_space\n               (distr (T s) (stream_space (count_space UNIV)) ((##) s))\n\ngoal (1 subgoal):\n 1. measure_pmf.random_variable I (subprob_algebra ?S)\n     (\\<lambda>s. distr (T s) (stream_space (count_space UNIV)) ((##) s))", "qed (rule distr_Stream_subprob)"], ["", "lemma AE_T':\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"(AE x in T' I. P x) \\<longleftrightarrow> (\\<forall>s\\<in>I. AE x in T s. P (s ## x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T' I) P =\n    (\\<forall>s\\<in>set_pmf I. AE x in T s. P (s ## x))", "unfolding T'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere\n     (measure_pmf I \\<bind>\n      (\\<lambda>s. distr (T s) (stream_space (count_space UNIV)) ((##) s)))\n     P =\n    (\\<forall>s\\<in>set_pmf I. AE x in T s. P (s ## x))", "by (simp add: AE_bind[OF distr_Stream_subprob] AE_measure_pmf_iff AE_distr_iff)"], ["", "lemma emeasure_T':\n  assumes [measurable]: \"X \\<in> sets S\"\n  shows \"emeasure (T' I) X = (\\<integral>\\<^sup>+s. emeasure (T s) {\\<omega>\\<in>space S. s ## \\<omega> \\<in> X} \\<partial>I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T' I) X =\n    \\<integral>\\<^sup>+ s. emeasure (T s)\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             s ## \\<omega> \\<in> X}\n                       \\<partial>measure_pmf I", "unfolding T'_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (measure_pmf I \\<bind>\n      (\\<lambda>s. distr (T s) (stream_space (count_space UNIV)) ((##) s)))\n     X =\n    \\<integral>\\<^sup>+ s. emeasure (T s)\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             s ## \\<omega> \\<in> X}\n                       \\<partial>measure_pmf I", "by (simp add: emeasure_bind[OF _ distr_Stream_subprob] emeasure_distr vimage_def Int_def conj_ac)"], ["", "lemma prob_T':\n  assumes [measurable]: \"Measurable.pred S P\"\n  shows \"\\<P>(x in T' I. P x) = (\\<integral>s. \\<P>(x in T s. P (s ## x)) \\<partial>I)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<P>(x in T' I. P x) =\n    measure_pmf.expectation I\n     (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<P>(x in T' I. P x) =\n    measure_pmf.expectation I\n     (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})", "interpret T': prob_space \"T' I\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space (T' I)", "by (rule prob_space_T')"], ["proof (state)\ngoal (1 subgoal):\n 1. T'.prob {x \\<in> space (T' I). P x} =\n    measure_pmf.expectation I\n     (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. T'.prob {x \\<in> space (T' I). P x} =\n    measure_pmf.expectation I\n     (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})", "using emeasure_T'[of \"{x\\<in>space (T' I). P x}\" I]"], ["proof (prove)\nusing this:\n  {x \\<in> space (T' I). P x}\n  \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n  emeasure (T' I) {x \\<in> space (T' I). P x} =\n  \\<integral>\\<^sup>+ s. emeasure (T s)\n                          {\\<omega>\n                           \\<in> space (stream_space (count_space UNIV)).\n                           s ## \\<omega> \\<in> {x \\<in> space (T' I). P x}}\n                     \\<partial>measure_pmf I\n\ngoal (1 subgoal):\n 1. T'.prob {x \\<in> space (T' I). P x} =\n    measure_pmf.expectation I\n     (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})", "unfolding T'.emeasure_eq_measure T.emeasure_eq_measure sets_eq_imp_space_eq[OF sets_T']"], ["proof (prove)\nusing this:\n  {x \\<in> space (stream_space (count_space UNIV)). P x}\n  \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n  ennreal (T'.prob {x \\<in> space (stream_space (count_space UNIV)). P x}) =\n  \\<integral>\\<^sup>+ s. ennreal\n                          (T.prob s\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             s ## \\<omega>\n                             \\<in> {x \\<in> space\n       (stream_space (count_space UNIV)).\n                                    P x}})\n                     \\<partial>measure_pmf I\n\ngoal (1 subgoal):\n 1. T'.prob {x \\<in> space (stream_space (count_space UNIV)). P x} =\n    measure_pmf.expectation I\n     (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. ennreal\n     (T'.prob {x \\<in> space (stream_space (count_space UNIV)). P x}) =\n    \\<integral>\\<^sup>+ s. ennreal\n                            (T.prob s\n                              {\\<omega>\n                               \\<in> space\n(stream_space (count_space UNIV)).\n                               s ## \\<omega>\n                               \\<in> space\n(stream_space (count_space UNIV)) \\<and>\n                               P (s ## \\<omega>)})\n                       \\<partial>measure_pmf I \\<Longrightarrow>\n    T'.prob {x \\<in> space (stream_space (count_space UNIV)). P x} =\n    measure_pmf.expectation I\n     (\\<lambda>s.\n         T.prob s\n          {x \\<in> space (stream_space (count_space UNIV)). P (s ## x)})", "apply (subst (asm) nn_integral_eq_integral)"], ["proof (prove)\ngoal (3 subgoals):\n 1. integrable (measure_pmf I)\n     (\\<lambda>s.\n         T.prob s\n          {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n           s ## \\<omega>\n           \\<in> space (stream_space (count_space UNIV)) \\<and>\n           P (s ## \\<omega>)})\n 2. AE x in measure_pmf\n             I. 0 \\<le> T.prob x\n                         {\\<omega>\n                          \\<in> space (stream_space (count_space UNIV)).\n                          x ## \\<omega>\n                          \\<in> space\n                                 (stream_space (count_space UNIV)) \\<and>\n                          P (x ## \\<omega>)}\n 3. ennreal\n     (T'.prob {x \\<in> space (stream_space (count_space UNIV)). P x}) =\n    ennreal\n     (measure_pmf.expectation I\n       (\\<lambda>s.\n           T.prob s\n            {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n             s ## \\<omega>\n             \\<in> space (stream_space (count_space UNIV)) \\<and>\n             P (s ## \\<omega>)})) \\<Longrightarrow>\n    T'.prob {x \\<in> space (stream_space (count_space UNIV)). P x} =\n    measure_pmf.expectation I\n     (\\<lambda>s.\n         T.prob s\n          {x \\<in> space (stream_space (count_space UNIV)). P (s ## x)})", "apply (auto intro!: measure_pmf.integrable_const_bound[where B=1] integral_cong arg_cong2[where f=measure]\n                simp: AE_measure_pmf measure_nonneg space_stream_space)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  T'.prob {x \\<in> space (T' I). P x} =\n  measure_pmf.expectation I\n   (\\<lambda>s. T.prob s {x \\<in> space (T s). P (s ## x)})\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma T_eq_T': \"T s = T' (K s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T s = T' (K s)", "proof (rule measure_eqI)"], ["proof (state)\ngoal (2 subgoals):\n 1. T.events s = sets (T' (K s))\n 2. \\<And>A.\n       A \\<in> T.events s \\<Longrightarrow>\n       emeasure (T s) A = emeasure (T' (K s)) A", "fix X"], ["proof (state)\ngoal (2 subgoals):\n 1. T.events s = sets (T' (K s))\n 2. \\<And>A.\n       A \\<in> T.events s \\<Longrightarrow>\n       emeasure (T s) A = emeasure (T' (K s)) A", "assume X: \"X \\<in> sets (T s)\""], ["proof (state)\nthis:\n  X \\<in> T.events s\n\ngoal (2 subgoals):\n 1. T.events s = sets (T' (K s))\n 2. \\<And>A.\n       A \\<in> T.events s \\<Longrightarrow>\n       emeasure (T s) A = emeasure (T' (K s)) A", "then"], ["proof (chain)\npicking this:\n  X \\<in> T.events s", "have [measurable]: \"X \\<in> sets S\""], ["proof (prove)\nusing this:\n  X \\<in> T.events s\n\ngoal (1 subgoal):\n 1. X \\<in> sets (stream_space (count_space UNIV))", "by simp"], ["proof (state)\nthis:\n  X \\<in> sets (stream_space (count_space UNIV))\n\ngoal (2 subgoals):\n 1. T.events s = sets (T' (K s))\n 2. \\<And>A.\n       A \\<in> T.events s \\<Longrightarrow>\n       emeasure (T s) A = emeasure (T' (K s)) A", "have X_eq: \"X = {x\\<in>space (T s). x \\<in> X}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X = {x \\<in> space (T s). x \\<in> X}", "using sets.sets_into_space[OF X]"], ["proof (prove)\nusing this:\n  X \\<subseteq> space (T s)\n\ngoal (1 subgoal):\n 1. X = {x \\<in> space (T s). x \\<in> X}", "by auto"], ["proof (state)\nthis:\n  X = {x \\<in> space (T s). x \\<in> X}\n\ngoal (2 subgoals):\n 1. T.events s = sets (T' (K s))\n 2. \\<And>A.\n       A \\<in> T.events s \\<Longrightarrow>\n       emeasure (T s) A = emeasure (T' (K s)) A", "show \"emeasure (T s) X = emeasure (T' (K s)) X\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) X = emeasure (T' (K s)) X", "apply (subst X_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {x \\<in> space (T s). x \\<in> X} = emeasure (T' (K s)) X", "apply (subst emeasure_Collect_T, simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. emeasure (T t)\n                            {x \\<in> space (T t). t ## x \\<in> X}\n                       \\<partial>measure_pmf (K s) =\n    emeasure (T' (K s)) X", "apply (subst emeasure_T', simp)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ t. emeasure (T t)\n                            {x \\<in> space (T t). t ## x \\<in> X}\n                       \\<partial>measure_pmf (K s) =\n    \\<integral>\\<^sup>+ s. emeasure (T s)\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             s ## \\<omega> \\<in> X}\n                       \\<partial>measure_pmf (K s)", "apply simp"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure (T s) X = emeasure (T' (K s)) X\n\ngoal (1 subgoal):\n 1. T.events s = sets (T' (K s))", "qed (simp add: sets_T')"], ["", "lemma T_eq_bind: \"T s = (measure_pmf (K s) \\<bind> (\\<lambda>t. distr (T t) S ((##) t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T s =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))", "by (subst T_eq_T') (simp add: T'_def)"], ["", "lemma T_split:\n  \"T s = (T s \\<bind> (\\<lambda>\\<omega>. distr (T ((s ## \\<omega>) !! n)) S (\\<lambda>\\<omega>'. stake n \\<omega> @- \\<omega>')))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T s =\n    T s \\<bind>\n    (\\<lambda>\\<omega>.\n        distr (T ((s ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n         ((@-) (stake n \\<omega>)))", "proof (induction n arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! 0))\n            (stream_space (count_space UNIV)) ((@-) (stake 0 \\<omega>)))\n 2. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "case 0"], ["proof (state)\nthis:\n  \n\ngoal (2 subgoals):\n 1. \\<And>s.\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! 0))\n            (stream_space (count_space UNIV)) ((@-) (stake 0 \\<omega>)))\n 2. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. T s =\n    T s \\<bind>\n    (\\<lambda>\\<omega>.\n        distr (T ((s ## \\<omega>) !! 0)) (stream_space (count_space UNIV))\n         ((@-) (stake 0 \\<omega>)))", "apply (simp add: distr_cong[OF refl sets_T[symmetric, of s] refl])"], ["proof (prove)\ngoal (1 subgoal):\n 1. T s = T s \\<bind> (\\<lambda>\\<omega>. T s)", "apply (subst bind_const')"], ["proof (prove)\ngoal (3 subgoals):\n 1. prob_space (T s)\n 2. subprob_space (T s)\n 3. T s = T s", "apply unfold_locales"], ["proof (prove)\ngoal (1 subgoal):\n 1. T s = T s", ".."], ["proof (state)\nthis:\n  T s =\n  T s \\<bind>\n  (\\<lambda>\\<omega>.\n      distr (T ((s ## \\<omega>) !! 0)) (stream_space (count_space UNIV))\n       ((@-) (stake 0 \\<omega>)))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "case (Suc n)"], ["proof (state)\nthis:\n  T ?s1 =\n  T ?s1 \\<bind>\n  (\\<lambda>\\<omega>.\n      distr (T ((?s1 ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n       ((@-) (stake n \\<omega>)))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "let ?K = \"measure_pmf (K s)\" and ?m = \"\\<lambda>n \\<omega> \\<omega>'. stake n \\<omega> @- \\<omega>'\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "note sets_stream_space_cong[simp, measurable_cong]"], ["proof (state)\nthis:\n  sets ?M = sets ?N \\<Longrightarrow>\n  sets (stream_space ?M) = sets (stream_space ?N)\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "have \"T s = (?K \\<bind> (\\<lambda>t. distr (T t) S ((##) t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T s =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))", "by (rule T_eq_bind)"], ["proof (state)\nthis:\n  T s =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "also"], ["proof (state)\nthis:\n  T s =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "have \"\\<dots> = (?K \\<bind> (\\<lambda>t. distr (T t \\<bind> (\\<lambda>\\<omega>. distr (T ((t ## \\<omega>) !! n)) S (?m n \\<omega>))) S ((##) t)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)) =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        distr\n         (T t \\<bind>\n          (\\<lambda>\\<omega>.\n              distr (T ((t ## \\<omega>) !! n))\n               (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))))\n         (stream_space (count_space UNIV)) ((##) t))", "unfolding Suc[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)) =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))", ".."], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr\n       (T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))))\n       (stream_space (count_space UNIV)) ((##) t))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "also"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr\n       (T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))))\n       (stream_space (count_space UNIV)) ((##) t))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "have \"\\<dots> = (?K \\<bind> (\\<lambda>t. T t \\<bind> (\\<lambda>\\<omega>. distr (distr (T ((t ## \\<omega>) !! n)) S (?m n \\<omega>)) S ((##) t))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        distr\n         (T t \\<bind>\n          (\\<lambda>\\<omega>.\n              distr (T ((t ## \\<omega>) !! n))\n               (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))))\n         (stream_space (count_space UNIV)) ((##) t)) =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr\n             (distr (T ((t ## \\<omega>) !! n))\n               (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>)))\n             (stream_space (count_space UNIV)) ((##) t)))", "by (simp add: distr_bind[where K=S, OF measurable_distr2[where M=S]] space_stream_space)"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr\n       (T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))))\n       (stream_space (count_space UNIV)) ((##) t)) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr\n           (distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>)))\n           (stream_space (count_space UNIV)) ((##) t)))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "also"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr\n       (T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))))\n       (stream_space (count_space UNIV)) ((##) t)) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr\n           (distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>)))\n           (stream_space (count_space UNIV)) ((##) t)))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "have \"\\<dots> = (?K \\<bind> (\\<lambda>t. T t \\<bind> (\\<lambda>\\<omega>. distr (T ((t ## \\<omega>) !! n)) S (?m (Suc n) (t ## \\<omega>)))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr\n             (distr (T ((t ## \\<omega>) !! n))\n               (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>)))\n             (stream_space (count_space UNIV)) ((##) t))) =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV))\n             ((@-) (stake (Suc n) (t ## \\<omega>)))))", "by (simp add: distr_distr space_stream_space comp_def)"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr\n           (distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>)))\n           (stream_space (count_space UNIV)) ((##) t))) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T ((t ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) (t ## \\<omega>)))))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "also"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr\n           (distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>)))\n           (stream_space (count_space UNIV)) ((##) t))) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T ((t ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) (t ## \\<omega>)))))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "have \"\\<dots> = (?K \\<bind> (\\<lambda>t. distr (T t) S ((##) t) \\<bind> (\\<lambda>\\<omega>. distr (T (\\<omega> !! n)) S (?m (Suc n) \\<omega>))))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        T t \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T ((t ## \\<omega>) !! n))\n             (stream_space (count_space UNIV))\n             ((@-) (stake (Suc n) (t ## \\<omega>))))) =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        distr (T t) (stream_space (count_space UNIV)) ((##) t) \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n             ((@-) (stake (Suc n) \\<omega>))))", "by (simp add: space_stream_space bind_distr[OF _ measurable_distr2[where M=S]] del: stake.simps)"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T ((t ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) (t ## \\<omega>))))) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr (T t) (stream_space (count_space UNIV)) ((##) t) \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) \\<omega>))))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "also"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      T t \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T ((t ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) (t ## \\<omega>))))) =\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr (T t) (stream_space (count_space UNIV)) ((##) t) \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) \\<omega>))))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "have \"\\<dots> = (T s \\<bind> (\\<lambda>\\<omega>. distr (T (\\<omega> !! n)) S (?m (Suc n) \\<omega>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        distr (T t) (stream_space (count_space UNIV)) ((##) t) \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n             ((@-) (stake (Suc n) \\<omega>)))) =\n    T s \\<bind>\n    (\\<lambda>\\<omega>.\n        distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n         ((@-) (stake (Suc n) \\<omega>)))", "unfolding T_eq_bind[of s]"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        distr (T t) (stream_space (count_space UNIV)) ((##) t) \\<bind>\n        (\\<lambda>\\<omega>.\n            distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n             ((@-) (stake (Suc n) \\<omega>)))) =\n    measure_pmf (K s) \\<bind>\n    (\\<lambda>t.\n        distr (T t) (stream_space (count_space UNIV)) ((##) t)) \\<bind>\n    (\\<lambda>\\<omega>.\n        distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n         ((@-) (stake (Suc n) \\<omega>)))", "by (subst bind_assoc[OF measurable_distr2[where M=S] measurable_distr2[where M=S], OF _ T_subprob])\n       (simp_all add: space_stream_space del: stake.simps)"], ["proof (state)\nthis:\n  measure_pmf (K s) \\<bind>\n  (\\<lambda>t.\n      distr (T t) (stream_space (count_space UNIV)) ((##) t) \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake (Suc n) \\<omega>)))) =\n  T s \\<bind>\n  (\\<lambda>\\<omega>.\n      distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n       ((@-) (stake (Suc n) \\<omega>)))\n\ngoal (1 subgoal):\n 1. \\<And>n s.\n       (\\<And>s.\n           T s =\n           T s \\<bind>\n           (\\<lambda>\\<omega>.\n               distr (T ((s ## \\<omega>) !! n))\n                (stream_space (count_space UNIV))\n                ((@-) (stake n \\<omega>)))) \\<Longrightarrow>\n       T s =\n       T s \\<bind>\n       (\\<lambda>\\<omega>.\n           distr (T ((s ## \\<omega>) !! Suc n))\n            (stream_space (count_space UNIV))\n            ((@-) (stake (Suc n) \\<omega>)))", "finally"], ["proof (chain)\npicking this:\n  T s =\n  T s \\<bind>\n  (\\<lambda>\\<omega>.\n      distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n       ((@-) (stake (Suc n) \\<omega>)))", "show ?case"], ["proof (prove)\nusing this:\n  T s =\n  T s \\<bind>\n  (\\<lambda>\\<omega>.\n      distr (T (\\<omega> !! n)) (stream_space (count_space UNIV))\n       ((@-) (stake (Suc n) \\<omega>)))\n\ngoal (1 subgoal):\n 1. T s =\n    T s \\<bind>\n    (\\<lambda>\\<omega>.\n        distr (T ((s ## \\<omega>) !! Suc n))\n         (stream_space (count_space UNIV)) ((@-) (stake (Suc n) \\<omega>)))", "by simp"], ["proof (state)\nthis:\n  T s =\n  T s \\<bind>\n  (\\<lambda>\\<omega>.\n      distr (T ((s ## \\<omega>) !! Suc n)) (stream_space (count_space UNIV))\n       ((@-) (stake (Suc n) \\<omega>)))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_T_split:\n  assumes f[measurable]: \"f \\<in> borel_measurable S\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T s) = (\\<integral>\\<^sup>+\\<omega>. (\\<integral>\\<^sup>+\\<omega>'. f (stake n \\<omega> @- \\<omega>') \\<partial>T ((s ## \\<omega>) !! n)) \\<partial>T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) f =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         \\<integral>\\<^sup>+ \\<omega>'.\n        f (stake n \\<omega> @- \\<omega>')\n      \\<partial>T ((s ## \\<omega>) !! n)\n                       \\<partial>T s", "apply (subst T_split[of s n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N\n     (T s \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T ((s ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake n \\<omega>))))\n     f =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         \\<integral>\\<^sup>+ \\<omega>'.\n        f (stake n \\<omega> @- \\<omega>')\n      \\<partial>T ((s ## \\<omega>) !! n)\n                       \\<partial>T s", "apply (simp add: nn_integral_bind[OF f measurable_distr2[where M=S]])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<omega>.\n                         integral\\<^sup>N\n                          (distr (T ((s ## \\<omega>) !! n))\n                            (stream_space (count_space UNIV))\n                            ((@-) (stake n \\<omega>)))\n                          f\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         \\<integral>\\<^sup>+ \\<omega>'.\n        f (stake n \\<omega> @- \\<omega>')\n      \\<partial>T ((s ## \\<omega>) !! n)\n                       \\<partial>T s", "apply (subst nn_integral_distr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>\\<omega>.\n       T.random_variable ((s ## \\<omega>) !! n)\n        (stream_space (count_space UNIV)) ((@-) (stake n \\<omega>))\n 2. \\<And>\\<omega>.\n       f \\<in> borel_measurable\n                (distr (T ((s ## \\<omega>) !! n))\n                  (stream_space (count_space UNIV))\n                  ((@-) (stake n \\<omega>)))\n 3. \\<integral>\\<^sup>+ \\<omega>.\n                         \\<integral>\\<^sup>+ x. f (stake n \\<omega> @- x)\n      \\<partial>T ((s ## \\<omega>) !! n)\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         \\<integral>\\<^sup>+ \\<omega>'.\n        f (stake n \\<omega> @- \\<omega>')\n      \\<partial>T ((s ## \\<omega>) !! n)\n                       \\<partial>T s", "apply (simp_all add: space_stream_space)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma emeasure_T_split:\n  assumes P[measurable]: \"Measurable.pred S P\"\n  shows \"emeasure (T s) {\\<omega>\\<in>space (T s). P \\<omega>} =\n      (\\<integral>\\<^sup>+\\<omega>. emeasure (T ((s ## \\<omega>) !! n)) {\\<omega>'\\<in>space (T ((s ## \\<omega>) !! n)). P (stake n \\<omega> @- \\<omega>')} \\<partial>T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply (subst T_split[of s n])"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (T s \\<bind>\n      (\\<lambda>\\<omega>.\n          distr (T ((s ## \\<omega>) !! n)) (stream_space (count_space UNIV))\n           ((@-) (stake n \\<omega>))))\n     {\\<omega> \\<in> space (T s). P \\<omega>} =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply (subst emeasure_bind[OF _ measurable_distr2[where M=S]])"], ["proof (prove)\ngoal (5 subgoals):\n 1. space (T s) \\<noteq> {}\n 2. (\\<lambda>(\\<omega>, y). stake n \\<omega> @- y)\n    \\<in> T s \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 3. T.random_variable s (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>\\<omega>. T ((s ## \\<omega>) !! n))\n 4. {\\<omega> \\<in> space (T s). P \\<omega>}\n    \\<in> sets (stream_space (count_space UNIV))\n 5. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (T ((s ## x) !! n))\n                              (stream_space (count_space UNIV))\n                              ((@-) (stake n x)))\n                            {\\<omega> \\<in> space (T s). P \\<omega>}\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply (simp_all add: )"], ["proof (prove)\ngoal (2 subgoals):\n 1. space (stream_space (count_space UNIV)) \\<noteq> {}\n 2. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (T ((s ## x) !! n))\n                              (stream_space (count_space UNIV))\n                              ((@-) (stake n x)))\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             P \\<omega>}\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>'\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply (simp add: space_stream_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (T ((s ## x) !! n))\n                              (stream_space (count_space UNIV))\n                              ((@-) (stake n x)))\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             P \\<omega>}\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>'\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply (subst emeasure_distr)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       T.random_variable ((s ## x) !! n) (stream_space (count_space UNIV))\n        ((@-) (stake n x))\n 2. \\<And>x.\n       {\\<omega> \\<in> space (stream_space (count_space UNIV)). P \\<omega>}\n       \\<in> sets (stream_space (count_space UNIV))\n 3. \\<integral>\\<^sup>+ x. emeasure (T ((s ## x) !! n))\n                            ((@-) (stake n x) -`\n                             {\\<omega>\n                              \\<in> space (stream_space (count_space UNIV)).\n                              P \\<omega>} \\<inter>\n                             space (T ((s ## x) !! n)))\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>'\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply simp_all"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. emeasure (T ((s ## x) !! n))\n                            ({y. stake n x @- y\n                                 \\<in> space\n  (stream_space (count_space UNIV)) \\<and>\n                                 P (stake n x @- y)} \\<inter>\n                             space (stream_space (count_space UNIV)))\n                       \\<partial>T s =\n    \\<integral>\\<^sup>+ \\<omega>.\n                         emeasure (T ((s ## \\<omega>) !! n))\n                          {\\<omega>'\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P (stake n \\<omega> @- \\<omega>')}\n                       \\<partial>T s", "apply (simp_all add: space_stream_space)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma prob_T_split:\n  assumes P[measurable]: \"Measurable.pred S P\"\n  shows \"\\<P>(\\<omega> in T s. P \\<omega>) = (\\<integral>\\<omega>. \\<P>(\\<omega>' in T ((s ## \\<omega>) !! n). P (stake n \\<omega> @- \\<omega>')) \\<partial>T s)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.prob s {\\<omega> \\<in> space (T s). P \\<omega>} =\n    T.expectation s\n     (\\<lambda>\\<omega>.\n         T.prob ((s ## \\<omega>) !! n)\n          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n           P (stake n \\<omega> @- \\<omega>')})", "using emeasure_T_split[OF P, of s n]"], ["proof (prove)\nusing this:\n  emeasure (T s) {\\<omega> \\<in> space (T s). P \\<omega>} =\n  \\<integral>\\<^sup>+ \\<omega>.\n                       emeasure (T ((s ## \\<omega>) !! n))\n                        {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n                         P (stake n \\<omega> @- \\<omega>')}\n                     \\<partial>T s\n\ngoal (1 subgoal):\n 1. T.prob s {\\<omega> \\<in> space (T s). P \\<omega>} =\n    T.expectation s\n     (\\<lambda>\\<omega>.\n         T.prob ((s ## \\<omega>) !! n)\n          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n           P (stake n \\<omega> @- \\<omega>')})", "unfolding T.emeasure_eq_measure"], ["proof (prove)\nusing this:\n  ennreal (T.prob s {\\<omega> \\<in> space (T s). P \\<omega>}) =\n  \\<integral>\\<^sup>+ \\<omega>.\n                       ennreal\n                        (T.prob ((s ## \\<omega>) !! n)\n                          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n                           P (stake n \\<omega> @- \\<omega>')})\n                     \\<partial>T s\n\ngoal (1 subgoal):\n 1. T.prob s {\\<omega> \\<in> space (T s). P \\<omega>} =\n    T.expectation s\n     (\\<lambda>\\<omega>.\n         T.prob ((s ## \\<omega>) !! n)\n          {\\<omega>' \\<in> space (T ((s ## \\<omega>) !! n)).\n           P (stake n \\<omega> @- \\<omega>')})", "by (subst (asm) nn_integral_eq_integral)\n     (auto intro!: T.integrable_const_bound[where B=1] measure_measurable_subprob_algebra2[where N=S]\n           simp: T.emeasure_eq_measure SIGMA_Collect_eq)"], ["", "lemma enabled_imp_alw:\n  \"(\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X \\<Longrightarrow> x \\<in> X \\<Longrightarrow> enabled x \\<omega> \\<Longrightarrow> alw (HLD X) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>(\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X; x \\<in> X;\n     enabled x \\<omega>\\<rbrakk>\n    \\<Longrightarrow> alw (HLD X) \\<omega>", "proof (coinduction arbitrary: \\<omega> x)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega> xa.\n       \\<lbrakk>(\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X; xa \\<in> X;\n        enabled xa \\<omega>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            \\<omega> = xs \\<and>\n                            HLD X xs \\<and>\n                            ((\\<exists>\\<omega> x.\n                                 stl xs = \\<omega> \\<and>\n                                 (\\<Union>s\\<in>X. set_pmf (K s))\n                                 \\<subseteq> X \\<and>\n                                 x \\<in> X \\<and> enabled x \\<omega>) \\<or>\n                             alw (HLD X) (stl xs))", "case alw"], ["proof (state)\nthis:\n  (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X\n  xa \\<in> X\n  enabled xa \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> xa.\n       \\<lbrakk>(\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X; xa \\<in> X;\n        enabled xa \\<omega>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>xs.\n                            \\<omega> = xs \\<and>\n                            HLD X xs \\<and>\n                            ((\\<exists>\\<omega> x.\n                                 stl xs = \\<omega> \\<and>\n                                 (\\<Union>s\\<in>X. set_pmf (K s))\n                                 \\<subseteq> X \\<and>\n                                 x \\<in> X \\<and> enabled x \\<omega>) \\<or>\n                             alw (HLD X) (stl xs))", "then"], ["proof (chain)\npicking this:\n  (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X\n  xa \\<in> X\n  enabled xa \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X\n  xa \\<in> X\n  enabled xa \\<omega>\n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       \\<omega> = xs \\<and>\n       HLD X xs \\<and>\n       ((\\<exists>\\<omega> x.\n            stl xs = \\<omega> \\<and>\n            (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X \\<and>\n            x \\<in> X \\<and> enabled x \\<omega>) \\<or>\n        alw (HLD X) (stl xs))", "unfolding enabled.simps[of _ \\<omega>]"], ["proof (prove)\nusing this:\n  (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X\n  xa \\<in> X\n  \\<exists>\\<omega> s.\n     xa = s \\<and>\n     \\<omega> = \\<omega> \\<and>\n     enabled (shd \\<omega>) (stl \\<omega>) \\<and>\n     shd \\<omega> \\<in> set_pmf (K s)\n\ngoal (1 subgoal):\n 1. \\<exists>xs.\n       \\<omega> = xs \\<and>\n       HLD X xs \\<and>\n       ((\\<exists>\\<omega> x.\n            stl xs = \\<omega> \\<and>\n            (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X \\<and>\n            x \\<in> X \\<and> enabled x \\<omega>) \\<or>\n        alw (HLD X) (stl xs))", "by (auto simp: HLD_iff)"], ["proof (state)\nthis:\n  \\<exists>xs.\n     \\<omega> = xs \\<and>\n     HLD X xs \\<and>\n     ((\\<exists>\\<omega> x.\n          stl xs = \\<omega> \\<and>\n          (\\<Union>s\\<in>X. set_pmf (K s)) \\<subseteq> X \\<and>\n          x \\<in> X \\<and> enabled x \\<omega>) \\<or>\n      alw (HLD X) (stl xs))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma alw_HLD_iff_sconst:\n  \"alw (HLD {x}) \\<omega> \\<longleftrightarrow> \\<omega> = sconst x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. alw (HLD {x}) \\<omega> = (\\<omega> = sconst x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. alw (HLD {x}) \\<omega> \\<Longrightarrow> \\<omega> = sconst x\n 2. \\<omega> = sconst x \\<Longrightarrow> alw (HLD {x}) \\<omega>", "assume \"alw (HLD {x}) \\<omega>\""], ["proof (state)\nthis:\n  alw (HLD {x}) \\<omega>\n\ngoal (2 subgoals):\n 1. alw (HLD {x}) \\<omega> \\<Longrightarrow> \\<omega> = sconst x\n 2. \\<omega> = sconst x \\<Longrightarrow> alw (HLD {x}) \\<omega>", "then"], ["proof (chain)\npicking this:\n  alw (HLD {x}) \\<omega>", "show \"\\<omega> = sconst x\""], ["proof (prove)\nusing this:\n  alw (HLD {x}) \\<omega>\n\ngoal (1 subgoal):\n 1. \\<omega> = sconst x", "by (coinduction arbitrary: \\<omega>) (auto simp: HLD_iff)"], ["proof (state)\nthis:\n  \\<omega> = sconst x\n\ngoal (1 subgoal):\n 1. \\<omega> = sconst x \\<Longrightarrow> alw (HLD {x}) \\<omega>", "qed (auto simp: alw_sconst HLD_iff)"], ["", "lemma enabled_iff_sconst:\n  assumes [simp]: \"set_pmf (K x) = {x}\" shows \"enabled x \\<omega> \\<longleftrightarrow> \\<omega> = sconst x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. enabled x \\<omega> = (\\<omega> = sconst x)", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. enabled x \\<omega> \\<Longrightarrow> \\<omega> = sconst x\n 2. \\<omega> = sconst x \\<Longrightarrow> enabled x \\<omega>", "assume \"enabled x \\<omega>\""], ["proof (state)\nthis:\n  enabled x \\<omega>\n\ngoal (2 subgoals):\n 1. enabled x \\<omega> \\<Longrightarrow> \\<omega> = sconst x\n 2. \\<omega> = sconst x \\<Longrightarrow> enabled x \\<omega>", "then"], ["proof (chain)\npicking this:\n  enabled x \\<omega>", "show \"\\<omega> = sconst x\""], ["proof (prove)\nusing this:\n  enabled x \\<omega>\n\ngoal (1 subgoal):\n 1. \\<omega> = sconst x", "by (coinduction arbitrary: \\<omega>) (auto elim: enabled.cases)"], ["proof (state)\nthis:\n  \\<omega> = sconst x\n\ngoal (1 subgoal):\n 1. \\<omega> = sconst x \\<Longrightarrow> enabled x \\<omega>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<omega> = sconst x \\<Longrightarrow> enabled x \\<omega>", "assume \"\\<omega> = sconst x\""], ["proof (state)\nthis:\n  \\<omega> = sconst x\n\ngoal (1 subgoal):\n 1. \\<omega> = sconst x \\<Longrightarrow> enabled x \\<omega>", "then"], ["proof (chain)\npicking this:\n  \\<omega> = sconst x", "show \"enabled x \\<omega>\""], ["proof (prove)\nusing this:\n  \\<omega> = sconst x\n\ngoal (1 subgoal):\n 1. enabled x \\<omega>", "by (coinduction arbitrary: \\<omega>) auto"], ["proof (state)\nthis:\n  enabled x \\<omega>\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_sconst:\n  assumes [simp]: \"set_pmf (K x) = {x}\"\n  shows \"(AE \\<omega> in T x. P \\<omega>) \\<longleftrightarrow> P (sconst x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "have \"(AE \\<omega> in T x. P \\<omega>) \\<longleftrightarrow> (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P =\n    (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x)", "using AE_T_enabled[of x]"], ["proof (prove)\nusing this:\n  almost_everywhere (T x) (enabled x)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P =\n    (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x)", "by (simp add: enabled_iff_sconst)"], ["proof (state)\nthis:\n  almost_everywhere (T x) P =\n  (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "also"], ["proof (state)\nthis:\n  almost_everywhere (T x) P =\n  (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "have \"\\<dots> = (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x) =\n    (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x)", "by (simp del: AE_conj_iff cong: rev_conj_cong)"], ["proof (state)\nthis:\n  (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x) =\n  (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "also"], ["proof (state)\nthis:\n  (AE \\<omega> in T x. P \\<omega> \\<and> \\<omega> = sconst x) =\n  (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "have \"\\<dots> = (AE \\<omega> in T x. P (sconst x))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x) =\n    (AE \\<omega> in T x. P (sconst x))", "using AE_T_enabled[of x]"], ["proof (prove)\nusing this:\n  almost_everywhere (T x) (enabled x)\n\ngoal (1 subgoal):\n 1. (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x) =\n    (AE \\<omega> in T x. P (sconst x))", "by (simp add: enabled_iff_sconst)"], ["proof (state)\nthis:\n  (AE \\<omega> in T x. P (sconst x) \\<and> \\<omega> = sconst x) =\n  (AE \\<omega> in T x. P (sconst x))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "finally"], ["proof (chain)\npicking this:\n  almost_everywhere (T x) P = (AE \\<omega> in T x. P (sconst x))", "show ?thesis"], ["proof (prove)\nusing this:\n  almost_everywhere (T x) P = (AE \\<omega> in T x. P (sconst x))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) P = P (sconst x)", "by simp"], ["proof (state)\nthis:\n  almost_everywhere (T x) P = P (sconst x)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma ev_eq_lfp: \"ev P = lfp (\\<lambda>F \\<omega>. P \\<omega> \\<or> (\\<not> P \\<omega> \\<and> F (stl \\<omega>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. ev P =\n    lfp (\\<lambda>F \\<omega>.\n            P \\<omega> \\<or> \\<not> P \\<omega> \\<and> F (stl \\<omega>))", "unfolding ev_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>p x.\n            (\\<exists>xs. x = xs \\<and> P xs) \\<or>\n            (\\<exists>xs. x = xs \\<and> p (stl xs))) =\n    lfp (\\<lambda>F \\<omega>.\n            P \\<omega> \\<or> \\<not> P \\<omega> \\<and> F (stl \\<omega>))", "by (intro antisym lfp_mono) blast+"], ["", "lemma INF_eq_zero_iff_ennreal: \"((\\<Sqinter>i\\<in>A. f i) = (0::ennreal)) = (\\<forall>x>0. \\<exists>i\\<in>A. f i < x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter> (f ` A) = 0) = (\\<forall>x>0. \\<exists>i\\<in>A. f i < x)", "using INF_eq_bot_iff[where 'a=ennreal]"], ["proof (prove)\nusing this:\n  (\\<Sqinter> (?f ` ?A) = \\<bottom>) =\n  (\\<forall>x>\\<bottom>. \\<exists>i\\<in>?A. ?f i < x)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (f ` A) = 0) = (\\<forall>x>0. \\<exists>i\\<in>A. f i < x)", "unfolding bot_ennreal_def zero_ennreal_def"], ["proof (prove)\nusing this:\n  (\\<Sqinter> (?f ` ?A) = e2ennreal 0) =\n  (\\<forall>x>e2ennreal 0. \\<exists>i\\<in>?A. ?f i < x)\n\ngoal (1 subgoal):\n 1. (\\<Sqinter> (f ` A) = e2ennreal 0) =\n    (\\<forall>x>e2ennreal 0. \\<exists>i\\<in>A. f i < x)", "by auto"], ["", "lemma inf_continuous_cmul: \n  fixes c :: ennreal\n  assumes f: \"inf_continuous f\" and c: \"c < \\<top>\" \n  shows \"inf_continuous (\\<lambda>x. c * f x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inf_continuous (\\<lambda>x. c * f x)", "proof (rule inf_continuous_compose[OF _ f], clarsimp simp add: inf_continuous_def)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>M.\n       decseq M \\<Longrightarrow>\n       c * \\<Sqinter> range M = (\\<Sqinter>i. c * M i)", "fix M :: \"nat \\<Rightarrow> ennreal\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>M.\n       decseq M \\<Longrightarrow>\n       c * \\<Sqinter> range M = (\\<Sqinter>i. c * M i)", "assume M: \"decseq M\""], ["proof (state)\nthis:\n  decseq M\n\ngoal (1 subgoal):\n 1. \\<And>M.\n       decseq M \\<Longrightarrow>\n       c * \\<Sqinter> range M = (\\<Sqinter>i. c * M i)", "show \"c * (\\<Sqinter>i. M i) = (\\<Sqinter>i. c * M i)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. c * \\<Sqinter> range M = (\\<Sqinter>i. c * M i)", "using M"], ["proof (prove)\nusing this:\n  decseq M\n\ngoal (1 subgoal):\n 1. c * \\<Sqinter> range M = (\\<Sqinter>i. c * M i)", "by (intro LIMSEQ_unique[OF ennreal_tendsto_cmult[OF c] LIMSEQ_INF] LIMSEQ_INF)\n       (auto simp: decseq_def mult_left_mono)"], ["proof (state)\nthis:\n  c * \\<Sqinter> range M = (\\<Sqinter>i. c * M i)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_T_ev_HLD_infinite:\n  fixes X :: \"'s set\" and r :: real\n  assumes \"r < 1\"\n  assumes r: \"\\<And>x. x \\<in> X \\<Longrightarrow> measure (K x) X \\<le> r\"\n  shows \"AE \\<omega> in T x. ev (HLD (- X)) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "assume \"x \\<in> X\""], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have \"0 \\<le> r\""], ["proof (prove)\ngoal (1 subgoal):\n 1. 0 \\<le> r", "using r[OF \\<open>x \\<in> X\\<close>] measure_nonneg[of \"K x\" X]"], ["proof (prove)\nusing this:\n  measure_pmf.prob (K x) X \\<le> r\n  0 \\<le> measure_pmf.prob (K x) X\n\ngoal (1 subgoal):\n 1. 0 \\<le> r", "by (blast  intro: order.trans)"], ["proof (state)\nthis:\n  0 \\<le> r\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "define P where \"P F x = \\<integral>\\<^sup>+y. indicator X y * (F y \\<sqinter> 1) \\<partial>K x\" for F x"], ["proof (state)\nthis:\n  P ?F ?x =\n  \\<integral>\\<^sup>+ y. indicator X y * (?F y \\<sqinter> 1)\n                     \\<partial>measure_pmf (K ?x)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have [measurable]: \"X \\<in> sets (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> sets (count_space UNIV)", "by auto"], ["proof (state)\nthis:\n  X \\<in> sets (count_space UNIV)\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have bnd: \"(\\<integral>\\<^sup>+ y. indicator X y * (f y \\<sqinter> 1) \\<partial>K x) \\<le> 1\" for x f"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. indicator X y * (f y \\<sqinter> 1)\n                       \\<partial>measure_pmf (K x)\n    \\<le> 1", "by (intro measure_pmf.nn_integral_le_const AE_pmfI) (auto split: split_indicator)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ y. indicator X y * (?f1 y \\<sqinter> 1)\n                     \\<partial>measure_pmf (K ?x1)\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have \"emeasure (T x) {\\<omega>\\<in>space (T x). alw (HLD X) \\<omega>} =\n      emeasure (T x) {\\<omega>\\<in>space (T x). gfp (\\<lambda>F \\<omega>. shd \\<omega> \\<in> X \\<and> F (stl \\<omega>)) \\<omega>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} =\n    emeasure (T x)\n     {\\<omega> \\<in> space (T x).\n      gfp (\\<lambda>F \\<omega>.\n              shd \\<omega> \\<in> X \\<and> F (stl \\<omega>))\n       \\<omega>}", "by (simp add: alw_def HLD_def)"], ["proof (state)\nthis:\n  emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} =\n  emeasure (T x)\n   {\\<omega> \\<in> space (T x).\n    gfp (\\<lambda>F \\<omega>. shd \\<omega> \\<in> X \\<and> F (stl \\<omega>))\n     \\<omega>}\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "also"], ["proof (state)\nthis:\n  emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} =\n  emeasure (T x)\n   {\\<omega> \\<in> space (T x).\n    gfp (\\<lambda>F \\<omega>. shd \\<omega> \\<in> X \\<and> F (stl \\<omega>))\n     \\<omega>}\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have \"\\<dots> = gfp P x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (T x)\n     {\\<omega> \\<in> space (T x).\n      gfp (\\<lambda>F \\<omega>.\n              shd \\<omega> \\<in> X \\<and> F (stl \\<omega>))\n       \\<omega>} =\n    gfp P x", "apply (rule emeasure_gfp)"], ["proof (prove)\ngoal (7 subgoals):\n 1. \\<And>s. T.events s = T.events x\n 2. \\<And>s. finite_measure (T s)\n 3. inf_continuous (\\<lambda>a b. shd b \\<in> X \\<and> a (stl b))\n 4. inf_continuous P\n 5. \\<And>P.\n       T.random_variable x (count_space UNIV) P \\<Longrightarrow>\n       T.random_variable x (count_space UNIV)\n        (\\<lambda>a. shd a \\<in> X \\<and> P (stl a))\n 6. \\<And>Pa s.\n       T.random_variable x (count_space UNIV) Pa \\<Longrightarrow>\n       emeasure (T s)\n        {\\<omega> \\<in> space (T x).\n         shd \\<omega> \\<in> X \\<and> Pa (stl \\<omega>)} =\n       P (\\<lambda>s.\n             emeasure (T s) {\\<omega> \\<in> space (T x). Pa \\<omega>})\n        s\n 7. \\<And>Pa. P Pa \\<le> P (\\<lambda>s. emeasure (T s) (space (T s)))", "apply (auto intro!: order_continuous_intros inf_continuous_cmul split: split_indicator simp: P_def)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>s x.\n       \\<integral>\\<^sup>+ y. indicator X y * (x y \\<sqinter> 1)\n                          \\<partial>measure_pmf (K s) =\n       \\<top> \\<Longrightarrow>\n       False\n 2. \\<And>P s.\n       Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n       emeasure (T s)\n        {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n         shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)} =\n       \\<integral>\\<^sup>+ y. indicator X y *\n                              (emeasure (T y)\n                                {\\<omega>\n                                 \\<in> space\n  (stream_space (count_space UNIV)).\n                                 P \\<omega>} \\<sqinter>\n                               1)\n                          \\<partial>measure_pmf (K s)\n 3. \\<And>P.\n       (\\<lambda>a.\n           \\<integral>\\<^sup>+ y. indicator X y * (P y \\<sqinter> 1)\n                              \\<partial>measure_pmf (K a))\n       \\<le> (\\<lambda>a. emeasure (measure_pmf (K a)) X)", "subgoal for x f"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. indicator X y * (f y \\<sqinter> 1)\n                       \\<partial>measure_pmf (K x) =\n    \\<top> \\<Longrightarrow>\n    False", "using bnd[of x f]"], ["proof (prove)\nusing this:\n  \\<integral>\\<^sup>+ y. indicator X y * (f y \\<sqinter> 1)\n                     \\<partial>measure_pmf (K x)\n  \\<le> 1\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. indicator X y * (f y \\<sqinter> 1)\n                       \\<partial>measure_pmf (K x) =\n    \\<top> \\<Longrightarrow>\n    False", "by (auto simp: top_unique)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P s.\n       Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n       emeasure (T s)\n        {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n         shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)} =\n       \\<integral>\\<^sup>+ y. indicator X y *\n                              (emeasure (T y)\n                                {\\<omega>\n                                 \\<in> space\n  (stream_space (count_space UNIV)).\n                                 P \\<omega>} \\<sqinter>\n                               1)\n                          \\<partial>measure_pmf (K s)\n 2. \\<And>P.\n       (\\<lambda>a.\n           \\<integral>\\<^sup>+ y. indicator X y * (P y \\<sqinter> 1)\n                              \\<partial>measure_pmf (K a))\n       \\<le> (\\<lambda>a. emeasure (measure_pmf (K a)) X)", "subgoal for P x"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    emeasure (T x)\n     {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n      shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)} =\n    \\<integral>\\<^sup>+ y. indicator X y *\n                           (emeasure (T y)\n                             {\\<omega>\n                              \\<in> space (stream_space (count_space UNIV)).\n                              P \\<omega>} \\<sqinter>\n                            1)\n                       \\<partial>measure_pmf (K x)", "apply (subst T_eq_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    emeasure\n     (measure_pmf (K x) \\<bind>\n      (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)))\n     {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n      shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)} =\n    \\<integral>\\<^sup>+ y. indicator X y *\n                           (emeasure (T y)\n                             {\\<omega>\n                              \\<in> space (stream_space (count_space UNIV)).\n                              P \\<omega>} \\<sqinter>\n                            1)\n                       \\<partial>measure_pmf (K x)", "apply (subst emeasure_bind[where N=S])"], ["proof (prove)\ngoal (4 subgoals):\n 1. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    space (measure_pmf (K x)) \\<noteq> {}\n 2. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))\n 3. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n     shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)}\n    \\<in> sets (stream_space (count_space UNIV))\n 4. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. emeasure\n                            (distr (T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)}\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y. indicator X y *\n                           (emeasure (T y)\n                             {\\<omega>\n                              \\<in> space (stream_space (count_space UNIV)).\n                              P \\<omega>} \\<sqinter>\n                            1)\n                       \\<partial>measure_pmf (K x)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))\n 2. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n     shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)}\n    \\<in> sets (stream_space (count_space UNIV))\n 3. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. emeasure\n                            (distr (T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)}\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y. indicator X y *\n                           (emeasure (T y)\n                             {\\<omega>\n                              \\<in> space (stream_space (count_space UNIV)).\n                              P \\<omega>} \\<sqinter>\n                            1)\n                       \\<partial>measure_pmf (K x)", "apply (rule measurable_distr2[where M=S])"], ["proof (prove)\ngoal (4 subgoals):\n 1. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    (\\<lambda>(x, y). x ## y)\n    \\<in> measure_pmf (K x) \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 2. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV))) T\n 3. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n     shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)}\n    \\<in> sets (stream_space (count_space UNIV))\n 4. Measurable.pred (stream_space (count_space UNIV)) P \\<Longrightarrow>\n    \\<integral>\\<^sup>+ x. emeasure\n                            (distr (T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            {\\<omega>\n                             \\<in> space (stream_space (count_space UNIV)).\n                             shd \\<omega> \\<in> X \\<and> P (stl \\<omega>)}\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y. indicator X y *\n                           (emeasure (T y)\n                             {\\<omega>\n                              \\<in> space (stream_space (count_space UNIV)).\n                              P \\<omega>} \\<sqinter>\n                            1)\n                       \\<partial>measure_pmf (K x)", "apply (auto intro: T_subprob[THEN measurable_space] intro!: nn_integral_cong_AE AE_pmfI\n            simp: emeasure_distr split: split_indicator)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       \\<lbrakk>Measurable.pred (stream_space (count_space UNIV)) P;\n        y \\<in> set_pmf (K x); y \\<in> X\\<rbrakk>\n       \\<Longrightarrow> emeasure (T y)\n                          ({ya.\n                            y ## ya\n                            \\<in> space\n                                   (stream_space (count_space UNIV)) \\<and>\n                            P ya} \\<inter>\n                           space (stream_space (count_space UNIV))) =\n                         emeasure (T y)\n                          {\\<omega>\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P \\<omega>} \\<sqinter>\n                         1", "apply (simp_all add: space_stream_space T.emeasure_le_1 inf.absorb1)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P.\n       (\\<lambda>a.\n           \\<integral>\\<^sup>+ y. indicator X y * (P y \\<sqinter> 1)\n                              \\<partial>measure_pmf (K a))\n       \\<le> (\\<lambda>a. emeasure (measure_pmf (K a)) X)", "apply (intro le_funI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<integral>\\<^sup>+ y. indicator X y * (P y \\<sqinter> 1)\n                          \\<partial>measure_pmf (K x)\n       \\<le> emeasure (measure_pmf (K x)) X", "apply (subst nn_integral_indicator[symmetric])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>P x. X \\<in> measure_pmf.events (K x)\n 2. \\<And>P x.\n       \\<integral>\\<^sup>+ y. indicator X y * (P y \\<sqinter> 1)\n                          \\<partial>measure_pmf (K x)\n       \\<le> integral\\<^sup>N (measure_pmf (K x)) (indicator X)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x.\n       \\<integral>\\<^sup>+ y. indicator X y * (P y \\<sqinter> 1)\n                          \\<partial>measure_pmf (K x)\n       \\<le> integral\\<^sup>N (measure_pmf (K x)) (indicator X)", "apply (intro nn_integral_mono)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>P x xa.\n       xa \\<in> space (measure_pmf (K x)) \\<Longrightarrow>\n       indicator X xa * (P xa \\<sqinter> 1) \\<le> indicator X xa", "apply (auto split: split_indicator)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure (T x)\n   {\\<omega> \\<in> space (T x).\n    gfp (\\<lambda>F \\<omega>. shd \\<omega> \\<in> X \\<and> F (stl \\<omega>))\n     \\<omega>} =\n  gfp P x\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "also"], ["proof (state)\nthis:\n  emeasure (T x)\n   {\\<omega> \\<in> space (T x).\n    gfp (\\<lambda>F \\<omega>. shd \\<omega> \\<in> X \\<and> F (stl \\<omega>))\n     \\<omega>} =\n  gfp P x\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have \"\\<dots> \\<le> (INF n. ennreal r ^ n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp P x \\<le> \\<Sqinter> range ((^) (ennreal r))", "proof (intro INF_greatest)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n \\<in> UNIV \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n", "have mono_P: \"mono P\""], ["proof (prove)\ngoal (1 subgoal):\n 1. mono P", "by (force simp: le_fun_def mono_def P_def intro!: nn_integral_mono intro: le_infI1 split: split_indicator)"], ["proof (state)\nthis:\n  mono P\n\ngoal (1 subgoal):\n 1. \\<And>n. n \\<in> UNIV \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n. n \\<in> UNIV \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n", "show \"gfp P x \\<le> ennreal r ^ n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp P x \\<le> ennreal r ^ n", "using \\<open>x \\<in> X\\<close>"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. gfp P x \\<le> ennreal r ^ n", "proof (induction n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ 0\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "case 0"], ["proof (state)\nthis:\n  x \\<in> X\n\ngoal (2 subgoals):\n 1. \\<And>x. x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ 0\n 2. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "then"], ["proof (chain)\npicking this:\n  x \\<in> X", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. gfp P x \\<le> ennreal r ^ 0", "by (subst gfp_unfold[OF mono_P]) (auto intro!: measure_pmf.nn_integral_le_const AE_pmfI split: split_indicator simp: P_def)"], ["proof (state)\nthis:\n  gfp P x \\<le> ennreal r ^ 0\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "case (Suc n x)"], ["proof (state)\nthis:\n  ?x1 \\<in> X \\<Longrightarrow> gfp P ?x1 \\<le> ennreal r ^ n\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "have \"gfp P x = P (gfp P) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. gfp P x = P (gfp P) x", "by (subst gfp_unfold[OF mono_P]) rule"], ["proof (state)\nthis:\n  gfp P x = P (gfp P) x\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "also"], ["proof (state)\nthis:\n  gfp P x = P (gfp P) x\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "have \"\\<dots> \\<le> P (\\<lambda>x. ennreal r ^ n) x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (gfp P) x \\<le> P (\\<lambda>x. ennreal r ^ n) x", "unfolding P_def[of _ x]"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ y. indicator X y * (gfp P y \\<sqinter> 1)\n                       \\<partial>measure_pmf (K x)\n    \\<le> \\<integral>\\<^sup>+ y. indicator X y *\n                                 (ennreal r ^ n \\<sqinter> 1)\n                             \\<partial>measure_pmf (K x)", "by (auto intro!: nn_integral_mono le_infI1 Suc split: split_indicator)"], ["proof (state)\nthis:\n  P (gfp P) x \\<le> P (\\<lambda>x. ennreal r ^ n) x\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "also"], ["proof (state)\nthis:\n  P (gfp P) x \\<le> P (\\<lambda>x. ennreal r ^ n) x\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "have \"\\<dots> \\<le> ennreal r ^ (Suc n)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (\\<lambda>x. ennreal r ^ n) x \\<le> ennreal r ^ Suc n", "using Suc"], ["proof (prove)\nusing this:\n  ?x1 \\<in> X \\<Longrightarrow> gfp P ?x1 \\<le> ennreal r ^ n\n  x \\<in> X\n\ngoal (1 subgoal):\n 1. P (\\<lambda>x. ennreal r ^ n) x \\<le> ennreal r ^ Suc n", "by (auto simp: P_def nn_integral_multc measure_pmf.emeasure_eq_measure intro!: mult_mono ennreal_leI r)"], ["proof (state)\nthis:\n  P (\\<lambda>x. ennreal r ^ n) x \\<le> ennreal r ^ Suc n\n\ngoal (1 subgoal):\n 1. \\<And>n x.\n       \\<lbrakk>\\<And>x.\n                   x \\<in> X \\<Longrightarrow> gfp P x \\<le> ennreal r ^ n;\n        x \\<in> X\\<rbrakk>\n       \\<Longrightarrow> gfp P x \\<le> ennreal r ^ Suc n", "finally"], ["proof (chain)\npicking this:\n  gfp P x \\<le> ennreal r ^ Suc n", "show ?case"], ["proof (prove)\nusing this:\n  gfp P x \\<le> ennreal r ^ Suc n\n\ngoal (1 subgoal):\n 1. gfp P x \\<le> ennreal r ^ Suc n", "."], ["proof (state)\nthis:\n  gfp P x \\<le> ennreal r ^ Suc n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gfp P x \\<le> ennreal r ^ n\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  gfp P x \\<le> \\<Sqinter> range ((^) (ennreal r))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "also"], ["proof (state)\nthis:\n  gfp P x \\<le> \\<Sqinter> range ((^) (ennreal r))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have \"\\<dots> = 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<Sqinter> range ((^) (ennreal r)) = 0", "unfolding ennreal_power[OF \\<open>0 \\<le> r\\<close>]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<Sqinter>n. ennreal (r ^ n)) = 0", "proof (intro LIMSEQ_unique[OF LIMSEQ_INF])"], ["proof (state)\ngoal (2 subgoals):\n 1. decseq (\\<lambda>i. ennreal (r ^ i))\n 2. (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> 0", "show \"decseq (\\<lambda>i. ennreal (r ^ i))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. decseq (\\<lambda>i. ennreal (r ^ i))", "using \\<open>0 \\<le> r\\<close> \\<open>r < 1\\<close>"], ["proof (prove)\nusing this:\n  0 \\<le> r\n  r < 1\n\ngoal (1 subgoal):\n 1. decseq (\\<lambda>i. ennreal (r ^ i))", "by (auto intro!: ennreal_leI power_decreasing simp: decseq_def)"], ["proof (state)\nthis:\n  decseq (\\<lambda>i. ennreal (r ^ i))\n\ngoal (1 subgoal):\n 1. (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> 0", "have \"(\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> ennreal 0\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> ennreal 0", "using \\<open>0 \\<le> r\\<close> \\<open>r < 1\\<close>"], ["proof (prove)\nusing this:\n  0 \\<le> r\n  r < 1\n\ngoal (1 subgoal):\n 1. (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> ennreal 0", "by (intro tendsto_ennrealI LIMSEQ_power_zero) auto"], ["proof (state)\nthis:\n  (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> ennreal 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> 0", "then"], ["proof (chain)\npicking this:\n  (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> ennreal 0", "show \"(\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> 0\""], ["proof (prove)\nusing this:\n  (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> ennreal 0\n\ngoal (1 subgoal):\n 1. (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> 0", "by simp"], ["proof (state)\nthis:\n  (\\<lambda>i. ennreal (r ^ i)) \\<longlonglongrightarrow> 0\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<Sqinter> range ((^) (ennreal r)) = 0\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "finally"], ["proof (chain)\npicking this:\n  emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} \\<le> 0", "have *: \"emeasure (T x) {\\<omega>\\<in>space (T x). alw (HLD X) \\<omega>} = 0\""], ["proof (prove)\nusing this:\n  emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} \\<le> 0\n\ngoal (1 subgoal):\n 1. emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} = 0", "by auto"], ["proof (state)\nthis:\n  emeasure (T x) {\\<omega> \\<in> space (T x). alw (HLD X) \\<omega>} = 0\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "have \"AE \\<omega> in T x. ev (HLD (- X)) \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "by (rule AE_I[OF _ *]) (auto simp: not_ev_iff not_HLD[symmetric])"], ["proof (state)\nthis:\n  almost_everywhere (T x) (ev (HLD (- X)))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "}"], ["proof (state)\nthis:\n  ?xa3 \\<in> X \\<Longrightarrow> almost_everywhere (T ?xa3) (ev (HLD (- X)))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "note * = this"], ["proof (state)\nthis:\n  ?xa3 \\<in> X \\<Longrightarrow> almost_everywhere (T ?xa3) (ev (HLD (- X)))\n\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. almost_everywhere (T x) (ev (HLD (- X)))", "apply (clarsimp simp add: AE_T_iff[of _ x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf (K x) \\<Longrightarrow>\n       AE \\<omega> in T y. ev (HLD (- X)) (y ## \\<omega>)", "subgoal for x'"], ["proof (prove)\ngoal (1 subgoal):\n 1. x' \\<in> set_pmf (K x) \\<Longrightarrow>\n    AE \\<omega> in T x'. ev (HLD (- X)) (x' ## \\<omega>)", "by (cases \"x' \\<in> X\") (auto simp add: ev_Stream *)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  almost_everywhere (T x) (ev (HLD (- X)))\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Trace space with Restriction\\<close>"], ["", "definition \"rT x = restrict_space (T x) {\\<omega>. enabled x \\<omega>}\""], ["", "lemma space_rT: \"\\<omega> \\<in> space (rT x) \\<longleftrightarrow> enabled x \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<omega> \\<in> space (rT x)) = enabled x \\<omega>", "by (auto simp: rT_def space_restrict_space space_stream_space)"], ["", "lemma Collect_enabled_S[measurable]: \"Collect (enabled x) \\<in> sets S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))", "have \"Collect (enabled x) = {\\<omega>\\<in>space S. enabled x \\<omega>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. Collect (enabled x) =\n    {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n     enabled x \\<omega>}", "by (auto simp: space_stream_space)"], ["proof (state)\nthis:\n  Collect (enabled x) =\n  {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n   enabled x \\<omega>}\n\ngoal (1 subgoal):\n 1. Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))", "then"], ["proof (chain)\npicking this:\n  Collect (enabled x) =\n  {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n   enabled x \\<omega>}", "show ?thesis"], ["proof (prove)\nusing this:\n  Collect (enabled x) =\n  {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n   enabled x \\<omega>}\n\ngoal (1 subgoal):\n 1. Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))", "by simp"], ["proof (state)\nthis:\n  Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma space_rT_in_S: \"space (rT x) \\<in> sets S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (rT x) \\<in> sets (stream_space (count_space UNIV))", "by (simp add: rT_def space_restrict_space)"], ["", "lemma sets_rT: \"A \\<in> sets (rT x) \\<longleftrightarrow> A \\<in> sets S \\<and> A \\<subseteq> {\\<omega>. enabled x \\<omega>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (A \\<in> sets (rT x)) =\n    (A \\<in> sets (stream_space (count_space UNIV)) \\<and>\n     A \\<subseteq> {\\<omega>. enabled x \\<omega>})", "by (auto simp: rT_def sets_restrict_space space_stream_space)"], ["", "lemma prob_space_rT: \"prob_space (rT x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space (rT x)", "unfolding rT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space (restrict_space (T x) (Collect (enabled x)))", "by (auto intro!: prob_space_restrict_space T.emeasure_eq_1_AE AE_T_enabled)"], ["", "lemma measurable_force_enabled2[measurable]: \"force_enabled x \\<in> measurable S (rT x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. force_enabled x\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M rT x", "unfolding rT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. force_enabled x\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          restrict_space (T x) (Collect (enabled x))", "by (rule measurable_restrict_space2)\n     (auto intro: measurable_force_enabled enabled_force_enabled)"], ["", "lemma space_rT_not_empty[simp]: \"space (rT x) \\<noteq> {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. space (rT x) \\<noteq> {}", "by (simp add: rT_def space_restrict_space Ex_enabled)"], ["", "lemma T_eq_bind': \"T x = do { y \\<leftarrow> measure_pmf (K x) ; \\<omega> \\<leftarrow> T y ; return S (y ## \\<omega>) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T x =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        T y \\<bind>\n        (\\<lambda>\\<omega>.\n            return (stream_space (count_space UNIV)) (y ## \\<omega>)))", "apply (subst T_eq_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K x) \\<bind>\n    (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        T y \\<bind>\n        (\\<lambda>\\<omega>.\n            return (stream_space (count_space UNIV)) (y ## \\<omega>)))", "apply (subst bind_return_distr[symmetric])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>t. space (T t) \\<noteq> {}\n 2. \\<And>t. T.random_variable t (stream_space (count_space UNIV)) ((##) t)\n 3. measure_pmf (K x) \\<bind>\n    (\\<lambda>t.\n        T t \\<bind>\n        return (stream_space (count_space UNIV)) \\<circ> (##) t) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        T y \\<bind>\n        (\\<lambda>\\<omega>.\n            return (stream_space (count_space UNIV)) (y ## \\<omega>)))", "apply (simp_all add: space_stream_space comp_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma rT_eq_bind: \"rT x = do { y \\<leftarrow> measure_pmf (K x) ; \\<omega> \\<leftarrow> rT y ; return (rT x) (y ## \\<omega>) }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rT x =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        rT y \\<bind> (\\<lambda>\\<omega>. return (rT x) (y ## \\<omega>)))", "unfolding rT_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_space (T x) (Collect (enabled x)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        restrict_space (T y) (Collect (enabled y)) \\<bind>\n        (\\<lambda>\\<omega>.\n            return (restrict_space (T x) (Collect (enabled x)))\n             (y ## \\<omega>)))", "apply (subst T_eq_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. restrict_space\n     (measure_pmf (K x) \\<bind>\n      (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t)))\n     (Collect (enabled x)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        restrict_space (T y) (Collect (enabled y)) \\<bind>\n        (\\<lambda>\\<omega>.\n            return (restrict_space (T x) (Collect (enabled x)))\n             (y ## \\<omega>)))", "apply (subst restrict_space_bind[where K=S])"], ["proof (prove)\ngoal (5 subgoals):\n 1. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>t. distr (T t) (stream_space (count_space UNIV)) ((##) t))\n 2. space (measure_pmf (K x)) \\<noteq> {}\n 3. Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))\n 4. Collect (enabled x) \\<noteq> {}\n 5. measure_pmf (K x) \\<bind>\n    (\\<lambda>xa.\n        restrict_space\n         (distr (T xa) (stream_space (count_space UNIV)) ((##) xa))\n         (Collect (enabled x))) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        restrict_space (T y) (Collect (enabled y)) \\<bind>\n        (\\<lambda>\\<omega>.\n            return (restrict_space (T x) (Collect (enabled x)))\n             (y ## \\<omega>)))", "apply (rule measurable_distr2[where M=S])"], ["proof (prove)\ngoal (6 subgoals):\n 1. (\\<lambda>(x, y). x ## y)\n    \\<in> measure_pmf (K x) \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 2. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV))) T\n 3. space (measure_pmf (K x)) \\<noteq> {}\n 4. Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))\n 5. Collect (enabled x) \\<noteq> {}\n 6. measure_pmf (K x) \\<bind>\n    (\\<lambda>xa.\n        restrict_space\n         (distr (T xa) (stream_space (count_space UNIV)) ((##) xa))\n         (Collect (enabled x))) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        restrict_space (T y) (Collect (enabled y)) \\<bind>\n        (\\<lambda>\\<omega>.\n            return (restrict_space (T x) (Collect (enabled x)))\n             (y ## \\<omega>)))", "apply (auto simp del: measurable_pmf_measure1\n              simp add: Ex_enabled return_restrict_space intro!: bind_cong )"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa.\n       restrict_space\n        (distr (T xa) (stream_space (count_space UNIV)) ((##) xa))\n        (Collect (enabled x)) =\n       restrict_space (T xa) (Collect (enabled xa)) \\<bind>\n       (\\<lambda>\\<omega>.\n           restrict_space (return (T x) (xa ## \\<omega>))\n            (Collect (enabled x)))", "apply (subst restrict_space_bind[symmetric, where K=S])"], ["proof (prove)\ngoal (5 subgoals):\n 1. \\<And>xa.\n       (\\<lambda>\\<omega>. return (T x) (xa ## \\<omega>))\n       \\<in> restrict_space (T xa)\n              (Collect (enabled xa)) \\<rightarrow>\\<^sub>M\n             subprob_algebra (stream_space (count_space UNIV))\n 2. \\<And>x. space (restrict_space (T x) (Collect (enabled x))) \\<noteq> {}\n 3. \\<And>xa.\n       Collect (enabled x) \\<in> sets (stream_space (count_space UNIV))\n 4. \\<And>xa. Collect (enabled x) \\<noteq> {}\n 5. \\<And>xa.\n       restrict_space\n        (distr (T xa) (stream_space (count_space UNIV)) ((##) xa))\n        (Collect (enabled x)) =\n       restrict_space\n        (restrict_space (T xa) (Collect (enabled xa)) \\<bind>\n         (\\<lambda>\\<omega>. return (T x) (xa ## \\<omega>)))\n        (Collect (enabled x))", "apply (auto simp add: Ex_enabled space_restrict_space return_cong[OF sets_T]\n              intro!:  measurable_restrict_space1 measurable_compose[OF _ return_measurable]\n              arg_cong2[where f=restrict_space])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       distr (T x) (stream_space (count_space UNIV)) ((##) x) =\n       restrict_space (T x) (Collect (enabled x)) \\<bind>\n       (\\<lambda>\\<omega>.\n           return (stream_space (count_space UNIV)) (x ## \\<omega>))", "apply (subst bind_return_distr[unfolded comp_def])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x. space (restrict_space (T x) (Collect (enabled x))) \\<noteq> {}\n 2. \\<And>x.\n       (##) x\n       \\<in> restrict_space (T x)\n              (Collect (enabled x)) \\<rightarrow>\\<^sub>M\n             stream_space (count_space UNIV)\n 3. \\<And>x.\n       distr (T x) (stream_space (count_space UNIV)) ((##) x) =\n       distr (restrict_space (T x) (Collect (enabled x)))\n        (stream_space (count_space UNIV)) ((##) x)", "apply (simp add: space_restrict_space Ex_enabled)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       (##) x\n       \\<in> restrict_space (T x)\n              (Collect (enabled x)) \\<rightarrow>\\<^sub>M\n             stream_space (count_space UNIV)\n 2. \\<And>x.\n       distr (T x) (stream_space (count_space UNIV)) ((##) x) =\n       distr (restrict_space (T x) (Collect (enabled x)))\n        (stream_space (count_space UNIV)) ((##) x)", "apply (simp add: measurable_restrict_space1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       distr (T x) (stream_space (count_space UNIV)) ((##) x) =\n       distr (restrict_space (T x) (Collect (enabled x)))\n        (stream_space (count_space UNIV)) ((##) x)", "apply (rule measure_eqI)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x.\n       sets (distr (T x) (stream_space (count_space UNIV)) ((##) x)) =\n       sets\n        (distr (restrict_space (T x) (Collect (enabled x)))\n          (stream_space (count_space UNIV)) ((##) x))\n 2. \\<And>x A.\n       A \\<in> sets\n                (distr (T x) (stream_space (count_space UNIV))\n                  ((##) x)) \\<Longrightarrow>\n       emeasure (distr (T x) (stream_space (count_space UNIV)) ((##) x)) A =\n       emeasure\n        (distr (restrict_space (T x) (Collect (enabled x)))\n          (stream_space (count_space UNIV)) ((##) x))\n        A", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       A \\<in> sets\n                (distr (T x) (stream_space (count_space UNIV))\n                  ((##) x)) \\<Longrightarrow>\n       emeasure (distr (T x) (stream_space (count_space UNIV)) ((##) x)) A =\n       emeasure\n        (distr (restrict_space (T x) (Collect (enabled x)))\n          (stream_space (count_space UNIV)) ((##) x))\n        A", "apply (subst (1 2) emeasure_distr)"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<And>x A.\n       A \\<in> sets\n                (distr (T x) (stream_space (count_space UNIV))\n                  ((##) x)) \\<Longrightarrow>\n       (##) x\n       \\<in> restrict_space (T x)\n              (Collect (enabled x)) \\<rightarrow>\\<^sub>M\n             stream_space (count_space UNIV)\n 2. \\<And>x A.\n       A \\<in> sets\n                (distr (T x) (stream_space (count_space UNIV))\n                  ((##) x)) \\<Longrightarrow>\n       A \\<in> sets (stream_space (count_space UNIV))\n 3. \\<And>x A.\n       A \\<in> sets\n                (distr (T x) (stream_space (count_space UNIV))\n                  ((##) x)) \\<Longrightarrow>\n       T.random_variable x (stream_space (count_space UNIV)) ((##) x)\n 4. \\<And>x A.\n       A \\<in> sets\n                (distr (T x) (stream_space (count_space UNIV))\n                  ((##) x)) \\<Longrightarrow>\n       emeasure (T x) ((##) x -` A \\<inter> space (T x)) =\n       emeasure (restrict_space (T x) (Collect (enabled x)))\n        ((##) x -` A \\<inter>\n         space (restrict_space (T x) (Collect (enabled x))))", "apply (auto simp: measurable_restrict_space1)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       emeasure (T x)\n        ((##) x -` A \\<inter> space (stream_space (count_space UNIV))) =\n       emeasure (restrict_space (T x) (Collect (enabled x)))\n        ((##) x -` A \\<inter> Collect (enabled x))", "apply (subst emeasure_restrict_space)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       Collect (enabled x) \\<inter> space (T x) \\<in> T.events x\n 2. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       (##) x -` A \\<inter> Collect (enabled x)\n       \\<subseteq> Collect (enabled x)\n 3. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       emeasure (T x)\n        ((##) x -` A \\<inter> space (stream_space (count_space UNIV))) =\n       emeasure (T x) ((##) x -` A \\<inter> Collect (enabled x))", "apply (auto simp: space_restrict_space intro!: emeasure_eq_AE)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       AE xa in T x. (x ## xa \\<in> A \\<and>\n                      xa \\<in> space (stream_space (count_space UNIV))) =\n                     (x ## xa \\<in> A \\<and> enabled x xa)\n 2. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       (##) x -` A \\<inter> Collect (enabled x)\n       \\<in> sets (stream_space (count_space UNIV))", "using AE_T_enabled"], ["proof (prove)\nusing this:\n  almost_everywhere (T ?s) (enabled ?s)\n\ngoal (2 subgoals):\n 1. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       AE xa in T x. (x ## xa \\<in> A \\<and>\n                      xa \\<in> space (stream_space (count_space UNIV))) =\n                     (x ## xa \\<in> A \\<and> enabled x xa)\n 2. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       (##) x -` A \\<inter> Collect (enabled x)\n       \\<in> sets (stream_space (count_space UNIV))", "apply eventually_elim"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>x A xa.\n       \\<lbrakk>A \\<in> sets (stream_space (count_space UNIV));\n        enabled x xa\\<rbrakk>\n       \\<Longrightarrow> (x ## xa \\<in> A \\<and>\n                          xa \\<in> space\n                                    (stream_space (count_space UNIV))) =\n                         (x ## xa \\<in> A \\<and> enabled x xa)\n 2. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       (##) x -` A \\<inter> Collect (enabled x)\n       \\<in> sets (stream_space (count_space UNIV))", "apply (simp add: space_stream_space)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       (##) x -` A \\<inter> Collect (enabled x)\n       \\<in> sets (stream_space (count_space UNIV))", "apply (rule sets_Int_pred)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       (##) x -` A \\<inter> Collect (enabled x)\n       \\<subseteq> space (stream_space (count_space UNIV))\n 2. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>xa. xa \\<in> (##) x -` A)\n 3. \\<And>x A.\n       A \\<in> sets (stream_space (count_space UNIV)) \\<Longrightarrow>\n       Measurable.pred (stream_space (count_space UNIV))\n        (\\<lambda>xa. xa \\<in> Collect (enabled x))", "apply auto"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x A xa.\n       \\<lbrakk>A \\<in> sets (stream_space (count_space UNIV));\n        x ## xa \\<in> A; enabled x xa\\<rbrakk>\n       \\<Longrightarrow> xa \\<in> space (stream_space (count_space UNIV))", "apply (simp add: space_stream_space)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["", "lemma snth_rT: \"(\\<lambda>x. x !! n) \\<in> measurable (rT x) (count_space (acc `` {x}))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "have \"\\<And>\\<omega>. enabled x \\<omega> \\<Longrightarrow> (x, \\<omega> !! n) \\<in> acc\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       enabled x \\<omega> \\<Longrightarrow> (x, \\<omega> !! n) \\<in> acc", "proof (induction n arbitrary: x)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>\\<omega> x.\n       enabled x \\<omega> \\<Longrightarrow> (x, \\<omega> !! 0) \\<in> acc\n 2. \\<And>n \\<omega> x.\n       \\<lbrakk>\\<And>\\<omega> x.\n                   enabled x \\<omega> \\<Longrightarrow>\n                   (x, \\<omega> !! n) \\<in> acc;\n        enabled x \\<omega>\\<rbrakk>\n       \\<Longrightarrow> (x, \\<omega> !! Suc n) \\<in> acc", "case (Suc n)"], ["proof (state)\nthis:\n  enabled ?x1 ?\\<omega>1 \\<Longrightarrow> (?x1, ?\\<omega>1 !! n) \\<in> acc\n  enabled x \\<omega>\n\ngoal (2 subgoals):\n 1. \\<And>\\<omega> x.\n       enabled x \\<omega> \\<Longrightarrow> (x, \\<omega> !! 0) \\<in> acc\n 2. \\<And>n \\<omega> x.\n       \\<lbrakk>\\<And>\\<omega> x.\n                   enabled x \\<omega> \\<Longrightarrow>\n                   (x, \\<omega> !! n) \\<in> acc;\n        enabled x \\<omega>\\<rbrakk>\n       \\<Longrightarrow> (x, \\<omega> !! Suc n) \\<in> acc", "from Suc.prems Suc.IH[of \"shd \\<omega>\" \"stl \\<omega>\"]"], ["proof (chain)\npicking this:\n  enabled x \\<omega>\n  enabled (shd \\<omega>) (stl \\<omega>) \\<Longrightarrow>\n  (shd \\<omega>, stl \\<omega> !! n) \\<in> acc", "show ?case"], ["proof (prove)\nusing this:\n  enabled x \\<omega>\n  enabled (shd \\<omega>) (stl \\<omega>) \\<Longrightarrow>\n  (shd \\<omega>, stl \\<omega> !! n) \\<in> acc\n\ngoal (1 subgoal):\n 1. (x, \\<omega> !! Suc n) \\<in> acc", "by (auto simp: enabled.simps[of x \\<omega>] intro: rtrancl_trans)"], ["proof (state)\nthis:\n  (x, \\<omega> !! Suc n) \\<in> acc\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega> x.\n       enabled x \\<omega> \\<Longrightarrow> (x, \\<omega> !! 0) \\<in> acc", "qed (auto elim: enabled.cases)"], ["proof (state)\nthis:\n  enabled x ?\\<omega>1 \\<Longrightarrow> (x, ?\\<omega>1 !! n) \\<in> acc\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "moreover"], ["proof (state)\nthis:\n  enabled x ?\\<omega>1 \\<Longrightarrow> (x, ?\\<omega>1 !! n) \\<in> acc\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "{"], ["proof (state)\nthis:\n  enabled x ?\\<omega>1 \\<Longrightarrow> (x, ?\\<omega>1 !! n) \\<in> acc\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "fix X :: \"'s set\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "have [measurable]: \"X \\<in> count_space UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. X \\<in> sets (count_space UNIV)", "by simp"], ["proof (state)\nthis:\n  X \\<in> sets (count_space UNIV)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "have *: \"(\\<lambda>x. x !! n) -` X \\<inter> space (rT x) =  {\\<omega>\\<in>space S. \\<omega> !! n \\<in> X \\<and> enabled x \\<omega>}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n) -` X \\<inter> space (rT x) =\n    {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n     \\<omega> !! n \\<in> X \\<and> enabled x \\<omega>}", "by (auto simp: space_stream_space space_rT)"], ["proof (state)\nthis:\n  (\\<lambda>x. x !! n) -` X \\<inter> space (rT x) =\n  {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n   \\<omega> !! n \\<in> X \\<and> enabled x \\<omega>}\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "have \"(\\<lambda>x. x !! n) -` X \\<inter> space (rT x) \\<in> sets S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n) -` X \\<inter> space (rT x)\n    \\<in> sets (stream_space (count_space UNIV))", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n     \\<omega> !! n \\<in> X \\<and> enabled x \\<omega>}\n    \\<in> sets (stream_space (count_space UNIV))", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>x. x !! n) -` X \\<inter> space (rT x)\n  \\<in> sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "}"], ["proof (state)\nthis:\n  (\\<lambda>x. x !! n) -` ?X3 \\<inter> space (rT x)\n  \\<in> sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "ultimately"], ["proof (chain)\npicking this:\n  enabled x ?\\<omega>1 \\<Longrightarrow> (x, ?\\<omega>1 !! n) \\<in> acc\n  (\\<lambda>x. x !! n) -` ?X3 \\<inter> space (rT x)\n  \\<in> sets (stream_space (count_space UNIV))", "show ?thesis"], ["proof (prove)\nusing this:\n  enabled x ?\\<omega>1 \\<Longrightarrow> (x, ?\\<omega>1 !! n) \\<in> acc\n  (\\<lambda>x. x !! n) -` ?X3 \\<inter> space (rT x)\n  \\<in> sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. x !! n)\n    \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})", "by (auto simp: measurable_def space_rT sets_rT)"], ["proof (state)\nthis:\n  (\\<lambda>x. x !! n)\n  \\<in> rT x \\<rightarrow>\\<^sub>M count_space (acc `` {x})\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Bisimulation\\<close>"], ["", "lemma T_coinduct[consumes 1, case_names prob sets cont]:\n  assumes \"R x M\"\n  assumes prob: \"\\<And>x M. R x M \\<Longrightarrow> prob_space M\"\n    and sets: \"\\<And>x M. R x M \\<Longrightarrow> sets M = sets S\"\n    and cont': \"\\<And>x M. R x M \\<Longrightarrow> \\<exists>M'. (\\<forall>y\\<in>K x. R y (M' y)) \\<and> (\\<forall>y. sets (M' y) = S \\<and> prob_space (M' y)) \\<and>\n      M = (measure_pmf (K x) \\<bind> (\\<lambda>y. distr (M' y) S ((##) y)))\"\n  shows \"T x = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T x = M", "using \\<open>R x M\\<close>"], ["proof (prove)\nusing this:\n  R x M\n\ngoal (1 subgoal):\n 1. T x = M", "proof (coinduction arbitrary: x M rule: measure_eq_stream_space_coinduct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       T x \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 2. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 3. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "case left"], ["proof (state)\nthis:\n  R x Ma\n\ngoal (3 subgoals):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       T x \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 2. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 3. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "then"], ["proof (chain)\npicking this:\n  R x Ma", "show ?case"], ["proof (prove)\nusing this:\n  R x Ma\n\ngoal (1 subgoal):\n 1. T x \\<in> space (prob_algebra (stream_space (count_space UNIV)))", "using T.prob_space_axioms[of x] sets_T[of x]"], ["proof (prove)\nusing this:\n  R x Ma\n  prob_space (T x)\n  T.events x = sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. T x \\<in> space (prob_algebra (stream_space (count_space UNIV)))", "by (auto simp: space_prob_algebra)"], ["proof (state)\nthis:\n  T x \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (2 subgoals):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 2. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "next"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 2. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "case (right M)"], ["proof (state)\nthis:\n  R M Ma\n\ngoal (2 subgoals):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n 2. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "with prob[of M] sets[of M]"], ["proof (chain)\npicking this:\n  R M ?M1 \\<Longrightarrow> prob_space ?M1\n  R M ?M1 \\<Longrightarrow>\n  sets ?M1 = sets (stream_space (count_space UNIV))\n  R M Ma", "show ?case"], ["proof (prove)\nusing this:\n  R M ?M1 \\<Longrightarrow> prob_space ?M1\n  R M ?M1 \\<Longrightarrow>\n  sets ?M1 = sets (stream_space (count_space UNIV))\n  R M Ma\n\ngoal (1 subgoal):\n 1. Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))", "by (auto simp: space_prob_algebra)"], ["proof (state)\nthis:\n  Ma \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "case (cont x M)"], ["proof (state)\nthis:\n  R x M\n\ngoal (1 subgoal):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "with cont'[OF cont]"], ["proof (chain)\npicking this:\n  \\<exists>M'.\n     (\\<forall>y\\<in>set_pmf (K x). R y (M' y)) \\<and>\n     (\\<forall>y.\n         sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n         prob_space (M' y)) \\<and>\n     M =\n     measure_pmf (K x) \\<bind>\n     (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n  R x M", "obtain M' where *:\n    \"(\\<forall>y\\<in>K x. R y (M' y))\"\n    \"(\\<forall>y. sets (M' y) = S \\<and> prob_space (M' y))\"\n    \"M = (measure_pmf (K x) \\<bind> (\\<lambda>y. distr (M' y) S ((##) y)))\""], ["proof (prove)\nusing this:\n  \\<exists>M'.\n     (\\<forall>y\\<in>set_pmf (K x). R y (M' y)) \\<and>\n     (\\<forall>y.\n         sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n         prob_space (M' y)) \\<and>\n     M =\n     measure_pmf (K x) \\<bind>\n     (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n  R x M\n\ngoal (1 subgoal):\n 1. (\\<And>M'.\n        \\<lbrakk>\\<forall>y\\<in>set_pmf (K x). R y (M' y);\n         \\<forall>y.\n            sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n            prob_space (M' y);\n         M =\n         measure_pmf (K x) \\<bind>\n         (\\<lambda>y.\n             distr (M' y) (stream_space (count_space UNIV))\n              ((##) y))\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  \\<forall>y\\<in>set_pmf (K x). R y (M' y)\n  \\<forall>y.\n     sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n     prob_space (M' y)\n  M =\n  measure_pmf (K x) \\<bind>\n  (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal (1 subgoal):\n 1. \\<And>x Ma.\n       R x Ma \\<Longrightarrow>\n       \\<exists>N' M' p.\n          (\\<forall>y\\<in>set_pmf p.\n              \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n          (\\<forall>x.\n              N' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          (\\<forall>x.\n              M' x\n              \\<in> space\n                     (prob_algebra\n                       (stream_space (count_space UNIV)))) \\<and>\n          T x =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (N' y) (stream_space (count_space UNIV))\n               ((##) y)) \\<and>\n          Ma =\n          measure_pmf p \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>N' M' p.\n       (\\<forall>y\\<in>set_pmf p.\n           \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n       (\\<forall>x.\n           N' x\n           \\<in> space\n                  (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n       (\\<forall>x.\n           M' x\n           \\<in> space\n                  (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n       T x =\n       measure_pmf p \\<bind>\n       (\\<lambda>y.\n           distr (N' y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n       M =\n       measure_pmf p \\<bind>\n       (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "apply (rule exI[of _ T])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M' p.\n       (\\<forall>y\\<in>set_pmf p.\n           \\<exists>x M. T y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n       (\\<forall>x.\n           T x\n           \\<in> space\n                  (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n       (\\<forall>x.\n           M' x\n           \\<in> space\n                  (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n       T x =\n       measure_pmf p \\<bind>\n       (\\<lambda>y.\n           distr (T y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n       M =\n       measure_pmf p \\<bind>\n       (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "apply (rule exI[of _ M'])"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>p.\n       (\\<forall>y\\<in>set_pmf p.\n           \\<exists>x M. T y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n       (\\<forall>x.\n           T x\n           \\<in> space\n                  (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n       (\\<forall>x.\n           M' x\n           \\<in> space\n                  (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n       T x =\n       measure_pmf p \\<bind>\n       (\\<lambda>y.\n           distr (T y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n       M =\n       measure_pmf p \\<bind>\n       (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "apply (rule exI[of _ \"K x\"])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set_pmf (K x).\n        \\<exists>x M. T y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n    (\\<forall>x.\n        T x\n        \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n    (\\<forall>x.\n        M' x\n        \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n    T x =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        distr (T y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n    M =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "using * T.prob_space_axioms sets_T[of x]"], ["proof (prove)\nusing this:\n  \\<forall>y\\<in>set_pmf (K x). R y (M' y)\n  \\<forall>y.\n     sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n     prob_space (M' y)\n  M =\n  measure_pmf (K x) \\<bind>\n  (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n  prob_space (T ?s)\n  T.events x = sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set_pmf (K x).\n        \\<exists>x M. T y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n    (\\<forall>x.\n        T x\n        \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n    (\\<forall>x.\n        M' x\n        \\<in> space (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n    T x =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y.\n        distr (T y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n    M =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "apply (auto simp: space_prob_algebra intro: T_eq_bind)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>N' M' p.\n     (\\<forall>y\\<in>set_pmf p.\n         \\<exists>x M. N' y = T x \\<and> M' y = M \\<and> R x M) \\<and>\n     (\\<forall>x.\n         N' x\n         \\<in> space\n                (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n     (\\<forall>x.\n         M' x\n         \\<in> space\n                (prob_algebra (stream_space (count_space UNIV)))) \\<and>\n     T x =\n     measure_pmf p \\<bind>\n     (\\<lambda>y.\n         distr (N' y) (stream_space (count_space UNIV)) ((##) y)) \\<and>\n     M =\n     measure_pmf p \\<bind>\n     (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma T_bisim:\n  assumes M: \"\\<And>x. prob_space (M x)\" \"\\<And>x. sets (M x) = sets S\"\n    and M_eq: \"\\<And>x. M x = (measure_pmf (K x) \\<bind> (\\<lambda>s. distr (M s) S ((##) s)))\"\n  shows \"T = M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T = M", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. T x = M x", "fix x"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x. T x = M x", "show \"T x = M x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T x = M x", "proof (coinduction arbitrary: x rule: T_coinduct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xa__. prob_space (M xa__)\n 2. \\<And>xa__. sets (M xa__) = sets (stream_space (count_space UNIV))\n 3. \\<And>xa__.\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (K xa__).\n              \\<exists>x__. y = x__ \\<and> M' y = M x__) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          M xa__ =\n          measure_pmf (K xa__) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "case (cont x)"], ["proof (state)\nthis:\n  \n\ngoal (3 subgoals):\n 1. \\<And>xa__. prob_space (M xa__)\n 2. \\<And>xa__. sets (M xa__) = sets (stream_space (count_space UNIV))\n 3. \\<And>xa__.\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (K xa__).\n              \\<exists>x__. y = x__ \\<and> M' y = M x__) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          M xa__ =\n          measure_pmf (K xa__) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "then"], ["proof (chain)\npicking this:", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M'.\n       (\\<forall>y\\<in>set_pmf (K x).\n           \\<exists>x__. y = x__ \\<and> M' y = M x__) \\<and>\n       (\\<forall>y.\n           sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n           prob_space (M' y)) \\<and>\n       M x =\n       measure_pmf (K x) \\<bind>\n       (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "apply (intro exI[of _ M])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set_pmf (K x).\n        \\<exists>x__. y = x__ \\<and> M y = M x__) \\<and>\n    (\\<forall>y.\n        sets (M y) = sets (stream_space (count_space UNIV)) \\<and>\n        prob_space (M y)) \\<and>\n    M x =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y. distr (M y) (stream_space (count_space UNIV)) ((##) y))", "apply (subst M_eq[of x])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<forall>y\\<in>set_pmf (K x).\n        \\<exists>x__. y = x__ \\<and> M y = M x__) \\<and>\n    (\\<forall>y.\n        sets (M y) = sets (stream_space (count_space UNIV)) \\<and>\n        prob_space (M y)) \\<and>\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>s. distr (M s) (stream_space (count_space UNIV)) ((##) s)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>y. distr (M y) (stream_space (count_space UNIV)) ((##) y))", "apply (simp add: M)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<exists>M'.\n     (\\<forall>y\\<in>set_pmf (K x).\n         \\<exists>x__. y = x__ \\<and> M' y = M x__) \\<and>\n     (\\<forall>y.\n         sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n         prob_space (M' y)) \\<and>\n     M x =\n     measure_pmf (K x) \\<bind>\n     (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal (2 subgoals):\n 1. \\<And>xa__. prob_space (M xa__)\n 2. \\<And>xa__. sets (M xa__) = sets (stream_space (count_space UNIV))", "qed fact+"], ["proof (state)\nthis:\n  T x = M x\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma T_subprob'[measurable]: \"T \\<in> measurable (count_space UNIV) (subprob_algebra S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n            subprob_algebra (stream_space (count_space UNIV))", "by (auto intro!: space_bind simp: space_subprob_algebra) unfold_locales"], ["", "lemma T_subprob''[simp]: \"T a \\<in> space (subprob_algebra S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T a \\<in> space (subprob_algebra (stream_space (count_space UNIV)))", "using measurable_space[OF T_subprob', of a]"], ["proof (prove)\nusing this:\n  a \\<in> space (count_space UNIV) \\<Longrightarrow>\n  T a \\<in> space (subprob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. T a \\<in> space (subprob_algebra (stream_space (count_space UNIV)))", "by simp"], ["", "lemma AE_not_suntil_coinduct [consumes 1, case_names \\<psi> \\<phi>]:\n  assumes \"P s\"\n  assumes \\<psi>: \"\\<And>s. P s \\<Longrightarrow> s \\<notin> \\<psi>\"\n  assumes \\<phi>: \"\\<And>s t. P s \\<Longrightarrow> s \\<in> \\<phi> \\<Longrightarrow> t \\<in> K s \\<Longrightarrow> P t\"\n  shows \"AE \\<omega> in T s. not (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "have \"\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>) \\<longleftrightarrow>\n      (\\<forall>n. \\<not> ((\\<lambda>R. HLD \\<psi> or (HLD \\<phi> aand nxt R)) ^^ n) \\<bottom> (s ## \\<omega>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)) =\n    (\\<forall>n.\n        \\<not> ((\\<lambda>R xs.\n                    HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                n)\n                \\<bottom> (s ## \\<omega>))", "unfolding suntil_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<not> lfp (\\<lambda>p x.\n                    (\\<exists>\\<omega>.\n                        x = \\<omega> \\<and> HLD \\<psi> \\<omega>) \\<or>\n                    (\\<exists>\\<omega>.\n                        x = \\<omega> \\<and>\n                        HLD \\<phi> \\<omega> \\<and> p (stl \\<omega>)))\n             (s ## \\<omega>)) =\n    (\\<forall>n.\n        \\<not> ((\\<lambda>R xs.\n                    HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                n)\n                \\<bottom> (s ## \\<omega>))", "by (subst sup_continuous_lfp)\n         (auto simp add: sup_continuous_def)"], ["proof (state)\nthis:\n  (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)) =\n  (\\<forall>n.\n      \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              n)\n              \\<bottom> (s ## \\<omega>))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "}"], ["proof (state)\nthis:\n  (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## ?\\<omega>3)) =\n  (\\<forall>n.\n      \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              n)\n              \\<bottom> (s ## ?\\<omega>3))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "moreover"], ["proof (state)\nthis:\n  (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## ?\\<omega>3)) =\n  (\\<forall>n.\n      \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              n)\n              \\<bottom> (s ## ?\\<omega>3))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "{"], ["proof (state)\nthis:\n  (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## ?\\<omega>3)) =\n  (\\<forall>n.\n      \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              n)\n              \\<bottom> (s ## ?\\<omega>3))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "from \\<open>P s\\<close>"], ["proof (chain)\npicking this:\n  P s", "have \"AE \\<omega> in T s. \\<not> ((\\<lambda>R. HLD \\<psi> or (HLD \\<phi> aand nxt R)) ^^ n) \\<bottom> (s ## \\<omega>)\""], ["proof (prove)\nusing this:\n  P s\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                    HLD \\<psi> xs \\<or>\n                                    HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                n)\n                                \\<bottom> (s ## \\<omega>)", "proof (induction n arbitrary: s)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>s.\n       P s \\<Longrightarrow>\n       AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                   0)\n                                   \\<bottom> (s ## \\<omega>)\n 2. \\<And>n s.\n       \\<lbrakk>\\<And>s.\n                   P s \\<Longrightarrow>\n                   AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n             HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n         n)\n         \\<bottom> (s ## \\<omega>);\n        P s\\<rbrakk>\n       \\<Longrightarrow> AE \\<omega> in T\n   s. \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              Suc n)\n              \\<bottom> (s ## \\<omega>)", "case (Suc n)"], ["proof (state)\nthis:\n  P ?s1 \\<Longrightarrow>\n  AE \\<omega> in T ?s1. \\<not> ((\\<lambda>R xs.\n                                    HLD \\<psi> xs \\<or>\n                                    HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                n)\n                                \\<bottom> (?s1 ## \\<omega>)\n  P s\n\ngoal (2 subgoals):\n 1. \\<And>s.\n       P s \\<Longrightarrow>\n       AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                   0)\n                                   \\<bottom> (s ## \\<omega>)\n 2. \\<And>n s.\n       \\<lbrakk>\\<And>s.\n                   P s \\<Longrightarrow>\n                   AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n             HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n         n)\n         \\<bottom> (s ## \\<omega>);\n        P s\\<rbrakk>\n       \\<Longrightarrow> AE \\<omega> in T\n   s. \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              Suc n)\n              \\<bottom> (s ## \\<omega>)", "then"], ["proof (chain)\npicking this:\n  P ?s1 \\<Longrightarrow>\n  AE \\<omega> in T ?s1. \\<not> ((\\<lambda>R xs.\n                                    HLD \\<psi> xs \\<or>\n                                    HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                n)\n                                \\<bottom> (?s1 ## \\<omega>)\n  P s", "show ?case"], ["proof (prove)\nusing this:\n  P ?s1 \\<Longrightarrow>\n  AE \\<omega> in T ?s1. \\<not> ((\\<lambda>R xs.\n                                    HLD \\<psi> xs \\<or>\n                                    HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                n)\n                                \\<bottom> (?s1 ## \\<omega>)\n  P s\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                    HLD \\<psi> xs \\<or>\n                                    HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                Suc n)\n                                \\<bottom> (s ## \\<omega>)", "apply (subst AE_T_iff)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> Measurable.pred (stream_space (count_space UNIV))\n                       (\\<lambda>\\<omega>.\n                           \\<not> ((\\<lambda>R xs.\n HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                   Suc n)\n                                   \\<bottom> (s ## \\<omega>))\n 2. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set_pmf (K s).\n                         AE \\<omega> in T\n   y. \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              Suc n)\n              \\<bottom> (s ## y ## \\<omega>)", "apply (rule measurable_compose[OF measurable_Stream, where M1=\"count_space UNIV\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. s)\n                      \\<in> stream_space\n                             (count_space UNIV) \\<rightarrow>\\<^sub>M\n                            count_space UNIV\n 2. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> (\\<lambda>x. x)\n                      \\<in> stream_space\n                             (count_space UNIV) \\<rightarrow>\\<^sub>M\n                            stream_space (count_space UNIV)\n 3. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> Measurable.pred (stream_space (count_space UNIV))\n                       (\\<lambda>a.\n                           \\<not> ((\\<lambda>R xs.\n HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                   Suc n)\n                                   \\<bottom> a)\n 4. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set_pmf (K s).\n                         AE \\<omega> in T\n   y. \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              Suc n)\n              \\<bottom> (s ## y ## \\<omega>)", "apply measurable"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>Q.\n       \\<lbrakk>\\<And>s.\n                   P s \\<Longrightarrow>\n                   AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n             HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n         n)\n         \\<bottom> (s ## \\<omega>);\n        P s; Measurable.pred (stream_space (count_space UNIV)) Q\\<rbrakk>\n       \\<Longrightarrow> Measurable.pred (stream_space (count_space UNIV)) Q\n 2. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set_pmf (K s).\n                         AE \\<omega> in T\n   y. \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              Suc n)\n              \\<bottom> (s ## y ## \\<omega>)", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>\\<And>s.\n                P s \\<Longrightarrow>\n                AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n          HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n      n)\n      \\<bottom> (s ## \\<omega>);\n     P s\\<rbrakk>\n    \\<Longrightarrow> \\<forall>y\\<in>set_pmf (K s).\n                         AE \\<omega> in T\n   y. \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              Suc n)\n              \\<bottom> (s ## y ## \\<omega>)", "apply (auto simp: bot_fun_def intro!: AE_impI dest: \\<phi> \\<psi>)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                  HLD \\<psi> xs \\<or>\n                                  HLD \\<phi> xs \\<and> nxt R xs) ^^\n                              Suc n)\n                              \\<bottom> (s ## \\<omega>)\n\ngoal (1 subgoal):\n 1. \\<And>s.\n       P s \\<Longrightarrow>\n       AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n                                   0)\n                                   \\<bottom> (s ## \\<omega>)", "qed simp"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                  HLD \\<psi> xs \\<or>\n                                  HLD \\<phi> xs \\<and> nxt R xs) ^^\n                              n)\n                              \\<bottom> (s ## \\<omega>)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "}"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                  HLD \\<psi> xs \\<or>\n                                  HLD \\<phi> xs \\<and> nxt R xs) ^^\n                              ?n3)\n                              \\<bottom> (s ## \\<omega>)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "ultimately"], ["proof (chain)\npicking this:\n  (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## ?\\<omega>3)) =\n  (\\<forall>n.\n      \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              n)\n              \\<bottom> (s ## ?\\<omega>3))\n  AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                  HLD \\<psi> xs \\<or>\n                                  HLD \\<phi> xs \\<and> nxt R xs) ^^\n                              ?n3)\n                              \\<bottom> (s ## \\<omega>)", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## ?\\<omega>3)) =\n  (\\<forall>n.\n      \\<not> ((\\<lambda>R xs.\n                  HLD \\<psi> xs \\<or> HLD \\<phi> xs \\<and> nxt R xs) ^^\n              n)\n              \\<bottom> (s ## ?\\<omega>3))\n  AE \\<omega> in T s. \\<not> ((\\<lambda>R xs.\n                                  HLD \\<psi> xs \\<or>\n                                  HLD \\<phi> xs \\<and> nxt R xs) ^^\n                              ?n3)\n                              \\<bottom> (s ## \\<omega>)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "by (simp add: AE_all_countable)"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma AE_not_suntil_coinduct_strong [consumes 1, case_names \\<psi> \\<phi>]:\n  assumes \"P s\"\n  assumes P_\\<psi>: \"\\<And>s. P s \\<Longrightarrow> s \\<notin> \\<psi>\"\n  assumes P_\\<phi>: \"\\<And>s t. P s \\<Longrightarrow> s \\<in> \\<phi> \\<Longrightarrow> t \\<in> K s \\<Longrightarrow> P t \\<or>\n    (AE \\<omega> in T t. not (HLD \\<phi> suntil HLD \\<psi>) (t ## \\<omega>))\"\n  shows \"AE \\<omega> in T s. not (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)\" (is \"?nuntil s\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "have \"P s \\<or> ?nuntil s\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P s \\<or>\n    (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                 (s ## \\<omega>))", "using \\<open>P s\\<close>"], ["proof (prove)\nusing this:\n  P s\n\ngoal (1 subgoal):\n 1. P s \\<or>\n    (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                 (s ## \\<omega>))", "by auto"], ["proof (state)\nthis:\n  P s \\<or>\n  (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                               (s ## \\<omega>))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "then"], ["proof (chain)\npicking this:\n  P s \\<or>\n  (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                               (s ## \\<omega>))", "show ?thesis"], ["proof (prove)\nusing this:\n  P s \\<or>\n  (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                               (s ## \\<omega>))\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                (s ## \\<omega>)", "proof (coinduction arbitrary: s rule: AE_not_suntil_coinduct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>sa.\n       P sa \\<or>\n       (AE \\<omega> in T sa. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                     (sa ## \\<omega>)) \\<Longrightarrow>\n       sa \\<notin> \\<psi>\n 2. \\<And>t sa.\n       \\<lbrakk>P sa \\<or>\n                (AE \\<omega> in T sa. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n        (sa ## \\<omega>));\n        sa \\<in> \\<phi>; t \\<in> set_pmf (K sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            t = s \\<and>\n                            (P s \\<or>\n                             (AE \\<omega> in T\n        s. \\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)))", "case (\\<phi> t s)"], ["proof (state)\nthis:\n  P s \\<or>\n  (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                               (s ## \\<omega>))\n  s \\<in> \\<phi>\n  t \\<in> set_pmf (K s)\n\ngoal (2 subgoals):\n 1. \\<And>sa.\n       P sa \\<or>\n       (AE \\<omega> in T sa. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                     (sa ## \\<omega>)) \\<Longrightarrow>\n       sa \\<notin> \\<psi>\n 2. \\<And>t sa.\n       \\<lbrakk>P sa \\<or>\n                (AE \\<omega> in T sa. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n        (sa ## \\<omega>));\n        sa \\<in> \\<phi>; t \\<in> set_pmf (K sa)\\<rbrakk>\n       \\<Longrightarrow> \\<exists>s.\n                            t = s \\<and>\n                            (P s \\<or>\n                             (AE \\<omega> in T\n        s. \\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)))", "then"], ["proof (chain)\npicking this:\n  P s \\<or>\n  (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                               (s ## \\<omega>))\n  s \\<in> \\<phi>\n  t \\<in> set_pmf (K s)", "show ?case"], ["proof (prove)\nusing this:\n  P s \\<or>\n  (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                               (s ## \\<omega>))\n  s \\<in> \\<phi>\n  t \\<in> set_pmf (K s)\n\ngoal (1 subgoal):\n 1. \\<exists>s.\n       t = s \\<and>\n       (P s \\<or>\n        (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                     (s ## \\<omega>)))", "by (auto simp: AE_T_iff[of _ s] suntil_Stream[of _ _ s] dest: P_\\<phi>)"], ["proof (state)\nthis:\n  \\<exists>s.\n     t = s \\<and>\n     (P s \\<or>\n      (AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                   (s ## \\<omega>)))\n\ngoal (1 subgoal):\n 1. \\<And>sa.\n       P sa \\<or>\n       (AE \\<omega> in T sa. \\<not> (HLD \\<phi> suntil HLD \\<psi>)\n                                     (sa ## \\<omega>)) \\<Longrightarrow>\n       sa \\<notin> \\<psi>", "qed (auto simp: suntil_Stream dest: P_\\<psi>)"], ["proof (state)\nthis:\n  AE \\<omega> in T s. \\<not> (HLD \\<phi> suntil HLD \\<psi>) (s ## \\<omega>)\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Reward Structure on Markov Chains\\<close>"], ["", "locale MC_with_rewards = MC_syntax K for K :: \"'s \\<Rightarrow> 's pmf\" +\n  fixes \\<iota> :: \"'s \\<Rightarrow> 's \\<Rightarrow> ennreal\" and \\<rho> :: \"'s \\<Rightarrow> ennreal\"\n  assumes \\<iota>_nonneg: \"\\<And>s t. 0 \\<le> \\<iota> s t\" and \\<rho>_nonneg: \"\\<And>s. 0 \\<le> \\<rho> s\"\n  assumes measurable_\\<iota>[measurable]: \"(\\<lambda>(a, b). \\<iota> a b) \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M count_space UNIV)\"\nbegin"], ["", "definition reward_until :: \"'s set \\<Rightarrow> 's \\<Rightarrow> 's stream \\<Rightarrow> ennreal\" where\n  \"reward_until X = lfp (\\<lambda>F s \\<omega>. if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + (F (shd \\<omega>) (stl \\<omega>)))\""], ["", "lemma measurable_\\<rho>[measurable]: \"\\<rho> \\<in> borel_measurable (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<rho> \\<in> borel_measurable (count_space UNIV)", "by simp"], ["", "lemma measurable_reward_until[measurable (raw)]:\n  assumes [measurable]: \"f \\<in> measurable M (count_space UNIV)\"\n  assumes [measurable]: \"g \\<in> measurable M S\"\n  shows \"(\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "let ?F = \"\\<lambda>F (s, \\<omega>). if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + (F (shd \\<omega>, stl \\<omega>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "fix s \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "have \"reward_until X s \\<omega> = lfp ?F (s, \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    lfp (\\<lambda>F (s, \\<omega>).\n            if s \\<in> X then 0\n            else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                 F (shd \\<omega>, stl \\<omega>))\n     (s, \\<omega>)", "unfolding reward_until_def lfp_pair[symmetric]"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>f (s, \\<omega>).\n            if s \\<in> X then 0\n            else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                 f (shd \\<omega>, stl \\<omega>))\n     (s, \\<omega>) =\n    lfp (\\<lambda>F (s, \\<omega>).\n            if s \\<in> X then 0\n            else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                 F (shd \\<omega>, stl \\<omega>))\n     (s, \\<omega>)", ".."], ["proof (state)\nthis:\n  reward_until X s \\<omega> =\n  lfp (\\<lambda>F (s, \\<omega>).\n          if s \\<in> X then 0\n          else \\<rho> s + \\<iota> s (shd \\<omega>) +\n               F (shd \\<omega>, stl \\<omega>))\n   (s, \\<omega>)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "}"], ["proof (state)\nthis:\n  reward_until X ?s3 ?\\<omega>3 =\n  lfp (\\<lambda>F (s, \\<omega>).\n          if s \\<in> X then 0\n          else \\<rho> s + \\<iota> s (shd \\<omega>) +\n               F (shd \\<omega>, stl \\<omega>))\n   (?s3, ?\\<omega>3)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "note * = this"], ["proof (state)\nthis:\n  reward_until X ?s3 ?\\<omega>3 =\n  lfp (\\<lambda>F (s, \\<omega>).\n          if s \\<in> X then 0\n          else \\<rho> s + \\<iota> s (shd \\<omega>) +\n               F (shd \\<omega>, stl \\<omega>))\n   (?s3, ?\\<omega>3)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "have [measurable]: \"lfp ?F \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F (s, \\<omega>).\n            if s \\<in> X then 0\n            else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                 F (shd \\<omega>, stl \\<omega>))\n    \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))", "proof (rule borel_measurable_lfp)"], ["proof (state)\ngoal (2 subgoals):\n 1. sup_continuous\n     (\\<lambda>F (s, \\<omega>).\n         if s \\<in> X then 0\n         else \\<rho> s + \\<iota> s (shd \\<omega>) +\n              F (shd \\<omega>, stl \\<omega>))\n 2. \\<And>f.\n       f \\<in> borel_measurable\n                (count_space UNIV \\<Otimes>\\<^sub>M\n                 stream_space (count_space UNIV)) \\<Longrightarrow>\n       (\\<lambda>(s, \\<omega>).\n           if s \\<in> X then 0\n           else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                f (shd \\<omega>, stl \\<omega>))\n       \\<in> borel_measurable\n              (count_space UNIV \\<Otimes>\\<^sub>M\n               stream_space (count_space UNIV))", "fix f :: \"('s \\<times> 's stream) \\<Rightarrow> ennreal\""], ["proof (state)\ngoal (2 subgoals):\n 1. sup_continuous\n     (\\<lambda>F (s, \\<omega>).\n         if s \\<in> X then 0\n         else \\<rho> s + \\<iota> s (shd \\<omega>) +\n              F (shd \\<omega>, stl \\<omega>))\n 2. \\<And>f.\n       f \\<in> borel_measurable\n                (count_space UNIV \\<Otimes>\\<^sub>M\n                 stream_space (count_space UNIV)) \\<Longrightarrow>\n       (\\<lambda>(s, \\<omega>).\n           if s \\<in> X then 0\n           else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                f (shd \\<omega>, stl \\<omega>))\n       \\<in> borel_measurable\n              (count_space UNIV \\<Otimes>\\<^sub>M\n               stream_space (count_space UNIV))", "assume [measurable]: \"f \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M S)\""], ["proof (state)\nthis:\n  f \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))\n\ngoal (2 subgoals):\n 1. sup_continuous\n     (\\<lambda>F (s, \\<omega>).\n         if s \\<in> X then 0\n         else \\<rho> s + \\<iota> s (shd \\<omega>) +\n              F (shd \\<omega>, stl \\<omega>))\n 2. \\<And>f.\n       f \\<in> borel_measurable\n                (count_space UNIV \\<Otimes>\\<^sub>M\n                 stream_space (count_space UNIV)) \\<Longrightarrow>\n       (\\<lambda>(s, \\<omega>).\n           if s \\<in> X then 0\n           else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                f (shd \\<omega>, stl \\<omega>))\n       \\<in> borel_measurable\n              (count_space UNIV \\<Otimes>\\<^sub>M\n               stream_space (count_space UNIV))", "show \"?F f \\<in> borel_measurable (count_space UNIV \\<Otimes>\\<^sub>M S)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(s, \\<omega>).\n        if s \\<in> X then 0\n        else \\<rho> s + \\<iota> s (shd \\<omega>) +\n             f (shd \\<omega>, stl \\<omega>))\n    \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))", "unfolding split_beta'"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        if fst x \\<in> X then 0\n        else \\<rho> (fst x) + \\<iota> (fst x) (shd (snd x)) +\n             f (shd (snd x), stl (snd x)))\n    \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))", "apply (intro measurable_If)"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>x. 0)\n    \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))\n 2. (\\<lambda>x.\n        \\<rho> (fst x) + \\<iota> (fst x) (shd (snd x)) +\n        f (shd (snd x), stl (snd x)))\n    \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))\n 3. {x \\<in> space\n              (count_space UNIV \\<Otimes>\\<^sub>M\n               stream_space (count_space UNIV)).\n     fst x \\<in> X}\n    \\<in> sets\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))", "apply measurable []"], ["proof (prove)\ngoal (2 subgoals):\n 1. (\\<lambda>x.\n        \\<rho> (fst x) + \\<iota> (fst x) (shd (snd x)) +\n        f (shd (snd x), stl (snd x)))\n    \\<in> borel_measurable\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))\n 2. {x \\<in> space\n              (count_space UNIV \\<Otimes>\\<^sub>M\n               stream_space (count_space UNIV)).\n     fst x \\<in> X}\n    \\<in> sets\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))", "apply measurable []"], ["proof (prove)\ngoal (1 subgoal):\n 1. {x \\<in> space\n              (count_space UNIV \\<Otimes>\\<^sub>M\n               stream_space (count_space UNIV)).\n     fst x \\<in> X}\n    \\<in> sets\n           (count_space UNIV \\<Otimes>\\<^sub>M\n            stream_space (count_space UNIV))", "apply (rule predE)"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred\n     (count_space UNIV \\<Otimes>\\<^sub>M stream_space (count_space UNIV))\n     (\\<lambda>x. fst x \\<in> X)", "apply (rule measurable_compose[OF measurable_fst])"], ["proof (prove)\ngoal (1 subgoal):\n 1. Measurable.pred (count_space UNIV) (\\<lambda>a. a \\<in> X)", "apply measurable []"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>(s, \\<omega>).\n      if s \\<in> X then 0\n      else \\<rho> s + \\<iota> s (shd \\<omega>) +\n           f (shd \\<omega>, stl \\<omega>))\n  \\<in> borel_measurable\n         (count_space UNIV \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. sup_continuous\n     (\\<lambda>F (s, \\<omega>).\n         if s \\<in> X then 0\n         else \\<rho> s + \\<iota> s (shd \\<omega>) +\n              F (shd \\<omega>, stl \\<omega>))", "qed (auto intro!: \\<iota>_nonneg \\<rho>_nonneg order_continuous_intros)"], ["proof (state)\nthis:\n  lfp (\\<lambda>F (s, \\<omega>).\n          if s \\<in> X then 0\n          else \\<rho> s + \\<iota> s (shd \\<omega>) +\n               F (shd \\<omega>, stl \\<omega>))\n  \\<in> borel_measurable\n         (count_space UNIV \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M", "unfolding *"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        lfp (\\<lambda>F (s, \\<omega>).\n                if s \\<in> X then 0\n                else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                     F (shd \\<omega>, stl \\<omega>))\n         (f x, g x))\n    \\<in> borel_measurable M", "by measurable"], ["proof (state)\nthis:\n  (\\<lambda>x. reward_until X (f x) (g x)) \\<in> borel_measurable M\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma continuous_reward_until:\n  \"sup_continuous (\\<lambda>F s \\<omega>. if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + (F (shd \\<omega>) (stl \\<omega>)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sup_continuous\n     (\\<lambda>F s \\<omega>.\n         if s \\<in> X then 0\n         else \\<rho> s + \\<iota> s (shd \\<omega>) +\n              F (shd \\<omega>) (stl \\<omega>))", "by (intro \\<iota>_nonneg \\<rho>_nonneg order_continuous_intros) (auto simp: sup_continuous_def image_comp)"], ["", "lemma\n  shows reward_until_unfold: \"reward_until X s \\<omega> =\n        (if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + reward_until X (shd \\<omega>) (stl \\<omega>))\"\n      (is ?unfold)"], ["proof (prove)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "let ?F = \"\\<lambda>F s \\<omega>. if s \\<in> X then 0 else \\<rho> s + \\<iota> s (shd \\<omega>) + (F (shd \\<omega>) (stl \\<omega>))\""], ["proof (state)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "{"], ["proof (state)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "fix s \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "have \"reward_until X s \\<omega> = ?F (reward_until X) s \\<omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "unfolding reward_until_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. lfp (\\<lambda>F s \\<omega>.\n            if s \\<in> X then 0\n            else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                 F (shd \\<omega>) (stl \\<omega>))\n     s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          lfp (\\<lambda>F s \\<omega>.\n                  if s \\<in> X then 0\n                  else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                       F (shd \\<omega>) (stl \\<omega>))\n           (shd \\<omega>) (stl \\<omega>))", "apply (subst lfp_unfold)"], ["proof (prove)\ngoal (2 subgoals):\n 1. mono\n     (\\<lambda>F s \\<omega>.\n         if s \\<in> X then 0\n         else \\<rho> s + \\<iota> s (shd \\<omega>) +\n              F (shd \\<omega>) (stl \\<omega>))\n 2. (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          lfp (\\<lambda>F s \\<omega>.\n                  if s \\<in> X then 0\n                  else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                       F (shd \\<omega>) (stl \\<omega>))\n           (shd \\<omega>) (stl \\<omega>)) =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          lfp (\\<lambda>F s \\<omega>.\n                  if s \\<in> X then 0\n                  else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                       F (shd \\<omega>) (stl \\<omega>))\n           (shd \\<omega>) (stl \\<omega>))", "apply (rule continuous_reward_until[THEN sup_continuous_mono, of X])"], ["proof (prove)\ngoal (1 subgoal):\n 1. (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          lfp (\\<lambda>F s \\<omega>.\n                  if s \\<in> X then 0\n                  else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                       F (shd \\<omega>) (stl \\<omega>))\n           (shd \\<omega>) (stl \\<omega>)) =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          lfp (\\<lambda>F s \\<omega>.\n                  if s \\<in> X then 0\n                  else \\<rho> s + \\<iota> s (shd \\<omega>) +\n                       F (shd \\<omega>) (stl \\<omega>))\n           (shd \\<omega>) (stl \\<omega>))", "apply rule"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  reward_until X s \\<omega> =\n  (if s \\<in> X then 0\n   else \\<rho> s + \\<iota> s (shd \\<omega>) +\n        reward_until X (shd \\<omega>) (stl \\<omega>))\n\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "}"], ["proof (state)\nthis:\n  reward_until X ?sa3 ?\\<omega>'3 =\n  (if ?sa3 \\<in> X then 0\n   else \\<rho> ?sa3 + \\<iota> ?sa3 (shd ?\\<omega>'3) +\n        reward_until X (shd ?\\<omega>'3) (stl ?\\<omega>'3))\n\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "note step = this"], ["proof (state)\nthis:\n  reward_until X ?sa3 ?\\<omega>'3 =\n  (if ?sa3 \\<in> X then 0\n   else \\<rho> ?sa3 + \\<iota> ?sa3 (shd ?\\<omega>'3) +\n        reward_until X (shd ?\\<omega>'3) (stl ?\\<omega>'3))\n\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "show ?unfold"], ["proof (prove)\ngoal (1 subgoal):\n 1. reward_until X s \\<omega> =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s (shd \\<omega>) +\n          reward_until X (shd \\<omega>) (stl \\<omega>))", "by (subst step) (auto intro!: arg_cong2[where f=\"(+)\"])"], ["proof (state)\nthis:\n  reward_until X s \\<omega> =\n  (if s \\<in> X then 0\n   else \\<rho> s + \\<iota> s (shd \\<omega>) +\n        reward_until X (shd \\<omega>) (stl \\<omega>))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma reward_until_simps[simp]:\n  shows \"s \\<in> X \\<Longrightarrow> reward_until X s \\<omega> = 0\"\n    and \"s \\<notin> X \\<Longrightarrow> reward_until X s \\<omega> = \\<rho> s + \\<iota> s (shd \\<omega>) + reward_until X (shd \\<omega>) (stl \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<in> X \\<Longrightarrow> reward_until X s \\<omega> = 0) &&&\n    (s \\<notin> X \\<Longrightarrow>\n     reward_until X s \\<omega> =\n     \\<rho> s + \\<iota> s (shd \\<omega>) +\n     reward_until X (shd \\<omega>) (stl \\<omega>))", "unfolding reward_until_unfold[of X s \\<omega>]"], ["proof (prove)\ngoal (1 subgoal):\n 1. (s \\<in> X \\<Longrightarrow>\n     (if s \\<in> X then 0\n      else \\<rho> s + \\<iota> s (shd \\<omega>) +\n           reward_until X (shd \\<omega>) (stl \\<omega>)) =\n     0) &&&\n    (s \\<notin> X \\<Longrightarrow>\n     (if s \\<in> X then 0\n      else \\<rho> s + \\<iota> s (shd \\<omega>) +\n           reward_until X (shd \\<omega>) (stl \\<omega>)) =\n     \\<rho> s + \\<iota> s (shd \\<omega>) +\n     reward_until X (shd \\<omega>) (stl \\<omega>))", "by simp_all"], ["", "lemma reward_until_SCons[simp]:\n  \"reward_until X s (t ## \\<omega>) = (if s \\<in> X then 0 else \\<rho> s + \\<iota> s t + reward_until X t \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. reward_until X s (t ## \\<omega>) =\n    (if s \\<in> X then 0\n     else \\<rho> s + \\<iota> s t + reward_until X t \\<omega>)", "by simp"], ["", "lemma nn_integral_reward_until_finite:\n  assumes [simp]: \"finite (acc `` {s})\" (is \"finite (?R `` {s})\")\n  assumes \\<rho>: \"\\<And>t. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> \\<rho> t < \\<infinity>\"\n  assumes \\<iota>: \"\\<And>t t'. (s, t) \\<in> acc_on (-H) \\<Longrightarrow> t' \\<in> K t \\<Longrightarrow> \\<iota> t t' < \\<infinity>\"\n  assumes ev: \"AE \\<omega> in T s. ev (HLD H) \\<omega>\"\n  shows \"(\\<integral>\\<^sup>+ \\<omega>. reward_until H s \\<omega> \\<partial>T s) \\<noteq> \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "proof cases"], ["proof (state)\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "assume \"s \\<in> H\""], ["proof (state)\nthis:\n  s \\<in> H\n\ngoal (2 subgoals):\n 1. ?P \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>\n 2. \\<not> ?P \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "then"], ["proof (chain)\npicking this:\n  s \\<in> H", "show ?thesis"], ["proof (prove)\nusing this:\n  s \\<in> H\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "assume \"s \\<notin>  H\""], ["proof (state)\nthis:\n  s \\<notin> H\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "let ?L = \"acc_on (-H)\""], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "define M where \"M = Max ((\\<lambda>(s, t). \\<rho> s + \\<iota> s t) ` (SIGMA t:?L``{s}. K t))\""], ["proof (state)\nthis:\n  M =\n  (MAX (s, t)\\<in>SIGMA x:acc_on (- H) `` {s}. set_pmf (K x).\n      \\<rho> s + \\<iota> s t)\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "have \"?L \\<subseteq> ?R\""], ["proof (prove)\ngoal (1 subgoal):\n 1. acc_on (- H) \\<subseteq> acc", "by (intro rtrancl_mono) auto"], ["proof (state)\nthis:\n  acc_on (- H) \\<subseteq> acc\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "with \\<open>s \\<notin> H\\<close>"], ["proof (chain)\npicking this:\n  s \\<notin> H\n  acc_on (- H) \\<subseteq> acc", "have subset: \"(SIGMA t:?L``{s}. K t) \\<subseteq> (?R``{s} \\<times> ?R``{s})\""], ["proof (prove)\nusing this:\n  s \\<notin> H\n  acc_on (- H) \\<subseteq> acc\n\ngoal (1 subgoal):\n 1. (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n    \\<subseteq> acc `` {s} \\<times> acc `` {s}", "by (auto intro: rtrancl_into_rtrancl elim: rtrancl.cases)"], ["proof (state)\nthis:\n  (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n  \\<subseteq> acc `` {s} \\<times> acc `` {s}\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "then"], ["proof (chain)\npicking this:\n  (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n  \\<subseteq> acc `` {s} \\<times> acc `` {s}", "have [simp, intro!]: \"finite ((\\<lambda>(s, t). \\<rho> s + \\<iota> s t) ` (SIGMA t:?L``{s}. K t))\""], ["proof (prove)\nusing this:\n  (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n  \\<subseteq> acc `` {s} \\<times> acc `` {s}\n\ngoal (1 subgoal):\n 1. finite\n     ((\\<lambda>(s, t). \\<rho> s + \\<iota> s t) `\n      (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)))", "by (intro finite_imageI) (auto dest: finite_subset)"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>(s, t). \\<rho> s + \\<iota> s t) `\n    (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)))\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "{"], ["proof (state)\nthis:\n  finite\n   ((\\<lambda>(s, t). \\<rho> s + \\<iota> s t) `\n    (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)))\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "fix t t'"], ["proof (state)\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "assume \"(s, t) \\<in> ?L\" \"t \\<notin> H\" \"t' \\<in> K t\""], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on (- H)\n  t \\<notin> H\n  t' \\<in> set_pmf (K t)\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "then"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on (- H)\n  t \\<notin> H\n  t' \\<in> set_pmf (K t)", "have \"(t, t') \\<in> (SIGMA t:?L``{s}. K t)\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n  t \\<notin> H\n  t' \\<in> set_pmf (K t)\n\ngoal (1 subgoal):\n 1. (t, t') \\<in> (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))", "by (auto intro: rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  (t, t') \\<in> (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "then"], ["proof (chain)\npicking this:\n  (t, t') \\<in> (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))", "have \"\\<rho> t + \\<iota> t t' \\<le> M\""], ["proof (prove)\nusing this:\n  (t, t') \\<in> (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n\ngoal (1 subgoal):\n 1. \\<rho> t + \\<iota> t t' \\<le> M", "unfolding M_def"], ["proof (prove)\nusing this:\n  (t, t') \\<in> (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x))\n\ngoal (1 subgoal):\n 1. \\<rho> t + \\<iota> t t'\n    \\<le> (MAX (s, t)\\<in>SIGMA x:acc_on (- H) `` {s}. set_pmf (K x).\n              \\<rho> s + \\<iota> s t)", "by (intro Max_ge) auto"], ["proof (state)\nthis:\n  \\<rho> t + \\<iota> t t' \\<le> M\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "}"], ["proof (state)\nthis:\n  \\<lbrakk>(s, ?t3) \\<in> acc_on (- H); ?t3 \\<notin> H;\n   ?t'3 \\<in> set_pmf (K ?t3)\\<rbrakk>\n  \\<Longrightarrow> \\<rho> ?t3 + \\<iota> ?t3 ?t'3 \\<le> M\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "note le_M = this"], ["proof (state)\nthis:\n  \\<lbrakk>(s, ?t3) \\<in> acc_on (- H); ?t3 \\<notin> H;\n   ?t'3 \\<in> set_pmf (K ?t3)\\<rbrakk>\n  \\<Longrightarrow> \\<rho> ?t3 + \\<iota> ?t3 ?t'3 \\<le> M\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "have fin_L: \"finite (?L `` {s})\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite (acc_on (- H) `` {s})", "by (intro finite_subset[OF _ assms(1)] Image_mono \\<open>?L \\<subseteq> ?R\\<close> order_refl)"], ["proof (state)\nthis:\n  finite (acc_on (- H) `` {s})\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "have \"M < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. M < \\<infinity>", "unfolding M_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (MAX (s, t)\\<in>SIGMA x:acc_on (- H) `` {s}. set_pmf (K x).\n        \\<rho> s + \\<iota> s t)\n    < \\<infinity>", "proof (subst Max_less_iff, safe)"], ["proof (state)\ngoal (2 subgoals):\n 1. (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)) = {} \\<Longrightarrow>\n    False\n 2. \\<And>a aa b x.\n       \\<lbrakk>b \\<in> set_pmf (K aa); (s, aa) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> \\<rho> aa + \\<iota> aa b < \\<infinity>", "show \"(SIGMA x:?L `` {s}. set_pmf (K x)) = {} \\<Longrightarrow> False\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)) = {} \\<Longrightarrow>\n    False", "using \\<open>s \\<notin> H\\<close>"], ["proof (prove)\nusing this:\n  s \\<notin> H\n\ngoal (1 subgoal):\n 1. (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)) = {} \\<Longrightarrow>\n    False", "by (auto simp add: Sigma_empty_iff set_pmf_not_empty)"], ["proof (state)\nthis:\n  (SIGMA x:acc_on (- H) `` {s}. set_pmf (K x)) = {} \\<Longrightarrow> False\n\ngoal (1 subgoal):\n 1. \\<And>a aa b x.\n       \\<lbrakk>b \\<in> set_pmf (K aa); (s, aa) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> \\<rho> aa + \\<iota> aa b < \\<infinity>", "fix t t'"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a aa b x.\n       \\<lbrakk>b \\<in> set_pmf (K aa); (s, aa) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> \\<rho> aa + \\<iota> aa b < \\<infinity>", "assume \"(s, t) \\<in> ?L\" \"t' \\<in> K t\""], ["proof (state)\nthis:\n  (s, t) \\<in> acc_on (- H)\n  t' \\<in> set_pmf (K t)\n\ngoal (1 subgoal):\n 1. \\<And>a aa b x.\n       \\<lbrakk>b \\<in> set_pmf (K aa); (s, aa) \\<in> acc_on (- H)\\<rbrakk>\n       \\<Longrightarrow> \\<rho> aa + \\<iota> aa b < \\<infinity>", "then"], ["proof (chain)\npicking this:\n  (s, t) \\<in> acc_on (- H)\n  t' \\<in> set_pmf (K t)", "show \"\\<rho> t + \\<iota> t t' < \\<infinity>\""], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n  t' \\<in> set_pmf (K t)\n\ngoal (1 subgoal):\n 1. \\<rho> t + \\<iota> t t' < \\<infinity>", "using \\<rho>[of t] \\<iota>[of t t']"], ["proof (prove)\nusing this:\n  (s, t) \\<in> acc_on (- H)\n  t' \\<in> set_pmf (K t)\n  (s, t) \\<in> acc_on (- H) \\<Longrightarrow> \\<rho> t < \\<infinity>\n  \\<lbrakk>(s, t) \\<in> acc_on (- H); t' \\<in> set_pmf (K t)\\<rbrakk>\n  \\<Longrightarrow> \\<iota> t t' < \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<rho> t + \\<iota> t t' < \\<infinity>", "by simp"], ["proof (state)\nthis:\n  \\<rho> t + \\<iota> t t' < \\<infinity>\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  M < \\<infinity>\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "from set_pmf_not_empty[of \"K s\"]"], ["proof (chain)\npicking this:\n  set_pmf (K s) \\<noteq> {}", "obtain t where \"t \\<in> K s\""], ["proof (prove)\nusing this:\n  set_pmf (K s) \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>t.\n        t \\<in> set_pmf (K s) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  t \\<in> set_pmf (K s)\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "with le_M[of s t]"], ["proof (chain)\npicking this:\n  \\<lbrakk>(s, s) \\<in> acc_on (- H); s \\<notin> H;\n   t \\<in> set_pmf (K s)\\<rbrakk>\n  \\<Longrightarrow> \\<rho> s + \\<iota> s t \\<le> M\n  t \\<in> set_pmf (K s)", "have \"0 \\<le> M\""], ["proof (prove)\nusing this:\n  \\<lbrakk>(s, s) \\<in> acc_on (- H); s \\<notin> H;\n   t \\<in> set_pmf (K s)\\<rbrakk>\n  \\<Longrightarrow> \\<rho> s + \\<iota> s t \\<le> M\n  t \\<in> set_pmf (K s)\n\ngoal (1 subgoal):\n 1. 0 \\<le> M", "using set_pmf_not_empty[of \"K s\"] \\<open>s \\<notin> H\\<close> le_M[of s] \\<iota>_nonneg[of s] \\<rho>_nonneg[of s]"], ["proof (prove)\nusing this:\n  \\<lbrakk>(s, s) \\<in> acc_on (- H); s \\<notin> H;\n   t \\<in> set_pmf (K s)\\<rbrakk>\n  \\<Longrightarrow> \\<rho> s + \\<iota> s t \\<le> M\n  t \\<in> set_pmf (K s)\n  set_pmf (K s) \\<noteq> {}\n  s \\<notin> H\n  \\<lbrakk>(s, s) \\<in> acc_on (- H); s \\<notin> H;\n   ?t'3 \\<in> set_pmf (K s)\\<rbrakk>\n  \\<Longrightarrow> \\<rho> s + \\<iota> s ?t'3 \\<le> M\n  0 \\<le> \\<iota> s ?t\n  0 \\<le> \\<rho> s\n\ngoal (1 subgoal):\n 1. 0 \\<le> M", "by (intro order_trans[OF _ le_M]) auto"], ["proof (state)\nthis:\n  0 \\<le> M\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "have \"AE \\<omega> in T s. reward_until H s \\<omega> \\<le> M * sfirst (HLD H) (s ## \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. reward_until H s \\<omega>\n                        \\<le> M *\n                              ennreal_of_enat\n                               (sfirst (HLD H) (s ## \\<omega>))", "using ev AE_T_enabled"], ["proof (prove)\nusing this:\n  almost_everywhere (T s) (ev (HLD H))\n  almost_everywhere (T ?s) (enabled ?s)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in T s. reward_until H s \\<omega>\n                        \\<le> M *\n                              ennreal_of_enat\n                               (sfirst (HLD H) (s ## \\<omega>))", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>ev (HLD H) \\<omega>; enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> reward_until H s \\<omega>\n                         \\<le> M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))", "fix \\<omega>"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>ev (HLD H) \\<omega>; enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> reward_until H s \\<omega>\n                         \\<le> M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))", "assume \"ev (HLD H) \\<omega>\" \"enabled s \\<omega>\""], ["proof (state)\nthis:\n  ev (HLD H) \\<omega>\n  enabled s \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>ev (HLD H) \\<omega>; enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> reward_until H s \\<omega>\n                         \\<le> M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))", "moreover"], ["proof (state)\nthis:\n  ev (HLD H) \\<omega>\n  enabled s \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>ev (HLD H) \\<omega>; enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> reward_until H s \\<omega>\n                         \\<le> M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))", "define t where \"t = s\""], ["proof (state)\nthis:\n  t = s\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>ev (HLD H) \\<omega>; enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> reward_until H s \\<omega>\n                         \\<le> M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))", "ultimately"], ["proof (chain)\npicking this:\n  ev (HLD H) \\<omega>\n  enabled s \\<omega>\n  t = s", "have \"ev (HLD H) \\<omega>\" \"enabled t \\<omega>\" \"t \\<in> ?L``{s}\""], ["proof (prove)\nusing this:\n  ev (HLD H) \\<omega>\n  enabled s \\<omega>\n  t = s\n\ngoal (1 subgoal):\n 1. ev (HLD H) \\<omega> &&&\n    enabled t \\<omega> &&& t \\<in> acc_on (- H) `` {s}", "by auto"], ["proof (state)\nthis:\n  ev (HLD H) \\<omega>\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       \\<lbrakk>ev (HLD H) \\<omega>; enabled s \\<omega>\\<rbrakk>\n       \\<Longrightarrow> reward_until H s \\<omega>\n                         \\<le> M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))", "then"], ["proof (chain)\npicking this:\n  ev (HLD H) \\<omega>\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}", "show \"reward_until H t \\<omega> \\<le> M * sfirst (HLD H) (t ## \\<omega>)\""], ["proof (prove)\nusing this:\n  ev (HLD H) \\<omega>\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n\ngoal (1 subgoal):\n 1. reward_until H t \\<omega>\n    \\<le> M * ennreal_of_enat (sfirst (HLD H) (t ## \\<omega>))", "proof (induction arbitrary: t rule: ev_induct_strong)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>xs t.\n       \\<lbrakk>HLD H xs; enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))\n 2. \\<And>xs t.\n       \\<lbrakk>ev (HLD H) (stl xs); \\<not> HLD H xs;\n        \\<And>t.\n           \\<lbrakk>enabled t (stl xs); t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n           \\<Longrightarrow> reward_until H t (stl xs)\n                             \\<le> M *\n                                   ennreal_of_enat\n                                    (sfirst (HLD H) (t ## stl xs));\n        enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))", "case (base \\<omega> t)"], ["proof (state)\nthis:\n  HLD H \\<omega>\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n\ngoal (2 subgoals):\n 1. \\<And>xs t.\n       \\<lbrakk>HLD H xs; enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))\n 2. \\<And>xs t.\n       \\<lbrakk>ev (HLD H) (stl xs); \\<not> HLD H xs;\n        \\<And>t.\n           \\<lbrakk>enabled t (stl xs); t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n           \\<Longrightarrow> reward_until H t (stl xs)\n                             \\<le> M *\n                                   ennreal_of_enat\n                                    (sfirst (HLD H) (t ## stl xs));\n        enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))", "then"], ["proof (chain)\npicking this:\n  HLD H \\<omega>\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}", "show ?case"], ["proof (prove)\nusing this:\n  HLD H \\<omega>\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n\ngoal (1 subgoal):\n 1. reward_until H t \\<omega>\n    \\<le> M * ennreal_of_enat (sfirst (HLD H) (t ## \\<omega>))", "by (auto simp: HLD_iff sfirst_Stream elim: enabled.cases intro: le_M)"], ["proof (state)\nthis:\n  reward_until H t \\<omega>\n  \\<le> M * ennreal_of_enat (sfirst (HLD H) (t ## \\<omega>))\n\ngoal (1 subgoal):\n 1. \\<And>xs t.\n       \\<lbrakk>ev (HLD H) (stl xs); \\<not> HLD H xs;\n        \\<And>t.\n           \\<lbrakk>enabled t (stl xs); t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n           \\<Longrightarrow> reward_until H t (stl xs)\n                             \\<le> M *\n                                   ennreal_of_enat\n                                    (sfirst (HLD H) (t ## stl xs));\n        enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>xs t.\n       \\<lbrakk>ev (HLD H) (stl xs); \\<not> HLD H xs;\n        \\<And>t.\n           \\<lbrakk>enabled t (stl xs); t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n           \\<Longrightarrow> reward_until H t (stl xs)\n                             \\<le> M *\n                                   ennreal_of_enat\n                                    (sfirst (HLD H) (t ## stl xs));\n        enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))", "case (step \\<omega> t)"], ["proof (state)\nthis:\n  ev (HLD H) (stl \\<omega>)\n  \\<not> HLD H \\<omega>\n  \\<lbrakk>enabled ?t1 (stl \\<omega>);\n   ?t1 \\<in> acc_on (- H) `` {s}\\<rbrakk>\n  \\<Longrightarrow> reward_until H ?t1 (stl \\<omega>)\n                    \\<le> M *\n                          ennreal_of_enat\n                           (sfirst (HLD H) (?t1 ## stl \\<omega>))\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n\ngoal (1 subgoal):\n 1. \\<And>xs t.\n       \\<lbrakk>ev (HLD H) (stl xs); \\<not> HLD H xs;\n        \\<And>t.\n           \\<lbrakk>enabled t (stl xs); t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n           \\<Longrightarrow> reward_until H t (stl xs)\n                             \\<le> M *\n                                   ennreal_of_enat\n                                    (sfirst (HLD H) (t ## stl xs));\n        enabled t xs; t \\<in> acc_on (- H) `` {s}\\<rbrakk>\n       \\<Longrightarrow> reward_until H t xs\n                         \\<le> M *\n                               ennreal_of_enat (sfirst (HLD H) (t ## xs))", "from step.IH[of \"shd \\<omega>\"] step.prems step.hyps"], ["proof (chain)\npicking this:\n  \\<lbrakk>enabled (shd \\<omega>) (stl \\<omega>);\n   shd \\<omega> \\<in> acc_on (- H) `` {s}\\<rbrakk>\n  \\<Longrightarrow> reward_until H (shd \\<omega>) (stl \\<omega>)\n                    \\<le> M *\n                          ennreal_of_enat\n                           (sfirst (HLD H) (shd \\<omega> ## stl \\<omega>))\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n  ev (HLD H) (stl \\<omega>)\n  \\<not> HLD H \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>enabled (shd \\<omega>) (stl \\<omega>);\n   shd \\<omega> \\<in> acc_on (- H) `` {s}\\<rbrakk>\n  \\<Longrightarrow> reward_until H (shd \\<omega>) (stl \\<omega>)\n                    \\<le> M *\n                          ennreal_of_enat\n                           (sfirst (HLD H) (shd \\<omega> ## stl \\<omega>))\n  enabled t \\<omega>\n  t \\<in> acc_on (- H) `` {s}\n  ev (HLD H) (stl \\<omega>)\n  \\<not> HLD H \\<omega>\n\ngoal (1 subgoal):\n 1. reward_until H t \\<omega>\n    \\<le> M * ennreal_of_enat (sfirst (HLD H) (t ## \\<omega>))", "by (auto simp add: HLD_iff enabled.simps[of t] distrib_left sfirst_Stream\n                           reward_until_simps[of t]\n                 simp del: reward_until_simps\n                 intro!: add_mono le_M intro: rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  reward_until H t \\<omega>\n  \\<le> M * ennreal_of_enat (sfirst (HLD H) (t ## \\<omega>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  reward_until H t \\<omega>\n  \\<le> M * ennreal_of_enat (sfirst (HLD H) (t ## \\<omega>))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE \\<omega> in T s. reward_until H s \\<omega>\n                      \\<le> M *\n                            ennreal_of_enat (sfirst (HLD H) (s ## \\<omega>))\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "then"], ["proof (chain)\npicking this:\n  AE \\<omega> in T s. reward_until H s \\<omega>\n                      \\<le> M *\n                            ennreal_of_enat (sfirst (HLD H) (s ## \\<omega>))", "have \"(\\<integral>\\<^sup>+\\<omega>. reward_until H s \\<omega> \\<partial>T s) \\<le> (\\<integral>\\<^sup>+\\<omega>. M * sfirst (HLD H) (s ## \\<omega>) \\<partial>T s)\""], ["proof (prove)\nusing this:\n  AE \\<omega> in T s. reward_until H s \\<omega>\n                      \\<le> M *\n                            ennreal_of_enat (sfirst (HLD H) (s ## \\<omega>))\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (reward_until H s)\n    \\<le> \\<integral>\\<^sup>+ \\<omega>.\n                               M *\n                               ennreal_of_enat\n                                (sfirst (HLD H) (s ## \\<omega>))\n                             \\<partial>T s", "by (rule nn_integral_mono_AE)"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (reward_until H s)\n  \\<le> \\<integral>\\<^sup>+ \\<omega>.\n                             M *\n                             ennreal_of_enat\n                              (sfirst (HLD H) (s ## \\<omega>))\n                           \\<partial>T s\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "also"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (reward_until H s)\n  \\<le> \\<integral>\\<^sup>+ \\<omega>.\n                             M *\n                             ennreal_of_enat\n                              (sfirst (HLD H) (s ## \\<omega>))\n                           \\<partial>T s\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "have \"\\<dots> < \\<infinity>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<omega>.\n                         M *\n                         ennreal_of_enat (sfirst (HLD H) (s ## \\<omega>))\n                       \\<partial>T s\n    < \\<infinity>", "using \\<open>0 \\<le> M\\<close> \\<open>M < \\<infinity>\\<close> nn_integral_sfirst_finite[OF fin_L ev]"], ["proof (prove)\nusing this:\n  0 \\<le> M\n  M < \\<infinity>\n  \\<integral>\\<^sup>+ x. ennreal_of_enat (sfirst (HLD H) (s ## x))\n                     \\<partial>T s \\<noteq>\n  \\<infinity>\n\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ \\<omega>.\n                         M *\n                         ennreal_of_enat (sfirst (HLD H) (s ## \\<omega>))\n                       \\<partial>T s\n    < \\<infinity>", "by (simp add: nn_integral_cmult  less_top[symmetric] ennreal_mult_eq_top_iff)"], ["proof (state)\nthis:\n  \\<integral>\\<^sup>+ \\<omega>.\n                       M * ennreal_of_enat (sfirst (HLD H) (s ## \\<omega>))\n                     \\<partial>T s\n  < \\<infinity>\n\ngoal (1 subgoal):\n 1. s \\<notin> H \\<Longrightarrow>\n    integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "finally"], ["proof (chain)\npicking this:\n  integral\\<^sup>N (T s) (reward_until H s) < \\<infinity>", "show ?thesis"], ["proof (prove)\nusing this:\n  integral\\<^sup>N (T s) (reward_until H s) < \\<infinity>\n\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>", "by simp"], ["proof (state)\nthis:\n  integral\\<^sup>N (T s) (reward_until H s) \\<noteq> \\<infinity>\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "subsection \\<open>Bisimulation on a relation\\<close>"], ["", "definition rel_set_strong :: \"('a \\<Rightarrow> 'b \\<Rightarrow> bool) \\<Rightarrow> 'a set \\<Rightarrow> 'b set \\<Rightarrow> bool\"\n  where \"rel_set_strong R A B \\<longleftrightarrow> (\\<forall>x y. R x y \\<longrightarrow> (x \\<in> A \\<longleftrightarrow> y \\<in> B))\""], ["", "lemma T_eq_rel_half[consumes 4, case_names prob sets cont]:\n  fixes R :: \"'s \\<Rightarrow> 't \\<Rightarrow> bool\" and f :: \"'s \\<Rightarrow> 't\" and S :: \"'s set\"\n  assumes R_def: \"\\<And>s t. R s t \\<longleftrightarrow> (s \\<in> S \\<and> f s = t)\"\n  assumes A[measurable]: \"A \\<in> sets (stream_space (count_space UNIV))\"\n    and B[measurable]: \"B \\<in> sets (stream_space (count_space UNIV))\"\n    and AB: \"rel_set_strong (stream_all2 R) A B\" and KL: \"rel_fun R (rel_pmf R) K L\" and xy: \"R x y\"\n  shows \"MC_syntax.T K x A = MC_syntax.T L y B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (MC_syntax.T K x) A = emeasure (MC_syntax.T L y) B", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (MC_syntax.T K x) A = emeasure (MC_syntax.T L y) B", "interpret K: MC_syntax K"], ["proof (prove)\ngoal:\nNo subgoals!", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (MC_syntax.T L y) B", "interpret L: MC_syntax L"], ["proof (prove)\ngoal:\nNo subgoals!", "by unfold_locales"], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have \"x \\<in> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S", "using \\<open>R x y\\<close>"], ["proof (prove)\nusing this:\n  R x y\n\ngoal (1 subgoal):\n 1. x \\<in> S", "by (auto simp: R_def)"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "define g where \"g t = (SOME s. R s t)\" for t"], ["proof (state)\nthis:\n  g ?t = (SOME s. R s ?t)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have measurable_g: \"g \\<in> count_space UNIV \\<rightarrow>\\<^sub>M count_space UNIV\""], ["proof (prove)\ngoal (1 subgoal):\n 1. g \\<in> count_space UNIV \\<rightarrow>\\<^sub>M count_space UNIV", "by auto"], ["proof (state)\nthis:\n  g \\<in> count_space UNIV \\<rightarrow>\\<^sub>M count_space UNIV\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have g: \"R i j \\<Longrightarrow> R (g j) j\" for i j"], ["proof (prove)\ngoal (1 subgoal):\n 1. R i j \\<Longrightarrow> R (g j) j", "unfolding g_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. R i j \\<Longrightarrow> R (SOME s. R s j) j", "by (rule someI)"], ["proof (state)\nthis:\n  R ?i1 ?j1 \\<Longrightarrow> R (g ?j1) ?j1\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have K_subset: \"x \\<in> S \\<Longrightarrow> K x \\<subseteq> S\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow> set_pmf (K x) \\<subseteq> S", "using KL[THEN rel_funD, of x \"f x\", THEN rel_pmf_imp_rel_set]"], ["proof (prove)\nusing this:\n  R x (f x) \\<Longrightarrow> rel_set R (set_pmf (K x)) (set_pmf (L (f x)))\n\ngoal (1 subgoal):\n 1. x \\<in> S \\<Longrightarrow> set_pmf (K x) \\<subseteq> S", "by (auto simp: rel_set_def R_def)"], ["proof (state)\nthis:\n  ?x1 \\<in> S \\<Longrightarrow> set_pmf (K ?x1) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have in_S: \"AE \\<omega> in K.T x. \\<omega> \\<in> streams S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. AE \\<omega> in K.T x. \\<omega> \\<in> streams S", "using K.AE_T_enabled"], ["proof (prove)\nusing this:\n  almost_everywhere (K.T ?s) (K.enabled ?s)\n\ngoal (1 subgoal):\n 1. AE \\<omega> in K.T x. \\<omega> \\<in> streams S", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       K.enabled x \\<omega> \\<Longrightarrow> \\<omega> \\<in> streams S", "case (elim \\<omega>)"], ["proof (state)\nthis:\n  K.enabled x \\<omega>\n\ngoal (1 subgoal):\n 1. \\<And>\\<omega>.\n       K.enabled x \\<omega> \\<Longrightarrow> \\<omega> \\<in> streams S", "with \\<open>x \\<in> S\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> S\n  K.enabled x \\<omega>", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> S\n  K.enabled x \\<omega>\n\ngoal (1 subgoal):\n 1. \\<omega> \\<in> streams S", "apply (coinduction arbitrary: x \\<omega>)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>xa \\<omega>.\n       \\<lbrakk>xa \\<in> S; K.enabled xa \\<omega>\\<rbrakk>\n       \\<Longrightarrow> \\<exists>a s.\n                            \\<omega> = a ## s \\<and>\n                            a \\<in> S \\<and>\n                            ((\\<exists>x \\<omega>.\n                                 s = \\<omega> \\<and>\n                                 x \\<in> S \\<and>\n                                 K.enabled x \\<omega>) \\<or>\n                             s \\<in> streams S)", "subgoal for x \\<omega>"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> S; K.enabled x \\<omega>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a s.\n                         \\<omega> = a ## s \\<and>\n                         a \\<in> S \\<and>\n                         ((\\<exists>x \\<omega>.\n                              s = \\<omega> \\<and>\n                              x \\<in> S \\<and> K.enabled x \\<omega>) \\<or>\n                          s \\<in> streams S)", "using K_subset"], ["proof (prove)\nusing this:\n  ?x1 \\<in> S \\<Longrightarrow> set_pmf (K ?x1) \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<lbrakk>x \\<in> S; K.enabled x \\<omega>\\<rbrakk>\n    \\<Longrightarrow> \\<exists>a s.\n                         \\<omega> = a ## s \\<and>\n                         a \\<in> S \\<and>\n                         ((\\<exists>x \\<omega>.\n                              s = \\<omega> \\<and>\n                              x \\<in> S \\<and> K.enabled x \\<omega>) \\<or>\n                          s \\<in> streams S)", "by (cases \\<omega>) (auto simp: K.enabled_Stream)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  \\<omega> \\<in> streams S\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  AE \\<omega> in K.T x. \\<omega> \\<in> streams S\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have L_eq: \"L y = map_pmf f (K x)\" if xy: \"R x y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. L y = map_pmf f (K x)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. L y = map_pmf f (K x)", "have \"rel_pmf (\\<lambda>x y. x = y) (map_pmf f (K x)) (L y)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pmf (=) (map_pmf f (K x)) (L y)", "using KL[THEN rel_funD, OF xy]"], ["proof (prove)\nusing this:\n  rel_pmf R (K x) (L y)\n\ngoal (1 subgoal):\n 1. rel_pmf (=) (map_pmf f (K x)) (L y)", "by (auto intro: pmf.rel_mono_strong simp: R_def pmf.rel_map)"], ["proof (state)\nthis:\n  rel_pmf (=) (map_pmf f (K x)) (L y)\n\ngoal (1 subgoal):\n 1. L y = map_pmf f (K x)", "then"], ["proof (chain)\npicking this:\n  rel_pmf (=) (map_pmf f (K x)) (L y)", "show ?thesis"], ["proof (prove)\nusing this:\n  rel_pmf (=) (map_pmf f (K x)) (L y)\n\ngoal (1 subgoal):\n 1. L y = map_pmf f (K x)", "unfolding pmf.rel_eq"], ["proof (prove)\nusing this:\n  map_pmf f (K x) = L y\n\ngoal (1 subgoal):\n 1. L y = map_pmf f (K x)", "by simp"], ["proof (state)\nthis:\n  L y = map_pmf f (K x)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  R ?x1 ?y1 \\<Longrightarrow> L ?y1 = map_pmf f (K ?x1)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "let ?D = \"\\<lambda>x. distr (K.T x) K.S (smap f)\""], ["proof (state)\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have prob_space_D: \"?D x \\<in> space (prob_algebra K.S)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (K.T x) (stream_space (count_space UNIV)) (smap f)\n    \\<in> space (prob_algebra (stream_space (count_space UNIV)))", "by (auto simp: space_prob_algebra K.T.prob_space_distr)"], ["proof (state)\nthis:\n  distr (K.T ?x1) (stream_space (count_space UNIV)) (smap f)\n  \\<in> space (prob_algebra (stream_space (count_space UNIV)))\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have D_eq_D: \"?D x = ?D x'\" if \"R x y\" \"R x' y\" for x x' y"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (K.T x) (stream_space (count_space UNIV)) (smap f) =\n    distr (K.T x') (stream_space (count_space UNIV)) (smap f)", "proof (rule stream_space_eq_sstart)"], ["proof (state)\ngoal (8 subgoals):\n 1. countable ?S\n 2. prob_space (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n 3. prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n 4. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 5. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 6. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 7. sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 8. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists ?S\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs)", "define A where \"A = K.acc `` {x, x'}\""], ["proof (state)\nthis:\n  A = K.acc `` {x, x'}\n\ngoal (8 subgoals):\n 1. countable ?S\n 2. prob_space (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n 3. prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n 4. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 5. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 6. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 7. sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 8. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists ?S\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs)", "have x_A: \"x \\<in> A\" \"x' \\<in> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<in> A &&& x' \\<in> A", "by (auto simp: A_def)"], ["proof (state)\nthis:\n  x \\<in> A\n  x' \\<in> A\n\ngoal (8 subgoals):\n 1. countable ?S\n 2. prob_space (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n 3. prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n 4. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 5. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 6. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 7. sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 8. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists ?S\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs)", "let ?\\<Omega> = \"f ` A\""], ["proof (state)\ngoal (8 subgoals):\n 1. countable ?S\n 2. prob_space (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n 3. prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n 4. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 5. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams ?S\n 6. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 7. sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 8. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> []; xs \\<in> lists ?S\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart ?S xs)", "show \"countable ?\\<Omega>\""], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (f ` A)", "unfolding A_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. countable (f ` K.acc `` {x, x'})", "by (intro countable_image K.countable_acc) auto"], ["proof (state)\nthis:\n  countable (f ` A)\n\ngoal (7 subgoals):\n 1. prob_space (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n 2. prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n 3. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 4. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 5. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 6. sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 7. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> [];\n        xs \\<in> lists (f ` K.acc `` {x, x'})\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs)", "show \"prob_space (?D x)\" \"prob_space (?D x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space\n     (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) &&&\n    prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))", "by (auto intro!: K.T.prob_space_distr)"], ["proof (state)\nthis:\n  prob_space (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n  prob_space (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n\ngoal (5 subgoals):\n 1. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 2. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 3. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 4. sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))\n 5. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> [];\n        xs \\<in> lists (f ` K.acc `` {x, x'})\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs)", "show \"sets (?D x) = sets L.S\" \"sets (?D x') = sets L.S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV)) &&&\n    sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n    sets (stream_space (count_space UNIV))", "by auto"], ["proof (state)\nthis:\n  sets (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) =\n  sets (stream_space (count_space UNIV))\n  sets (distr (K.T x') (stream_space (count_space UNIV)) (smap f)) =\n  sets (stream_space (count_space UNIV))\n\ngoal (3 subgoals):\n 1. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 2. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 3. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> [];\n        xs \\<in> lists (f ` K.acc `` {x, x'})\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs)", "have AE_streams: \"AE x in ?D x''. x \\<in> streams ?\\<Omega>\" if \"x'' \\<in> A\" for x''"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in distr (K.T x'') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` A)", "apply (simp add: space_stream_space streams_sets AE_distr_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in K.T x''. smap f x \\<in> streams (f ` A)", "using K.AE_T_reachable[of x'']"], ["proof (prove)\nusing this:\n  almost_everywhere (K.T x'') (alw (HLD (K.acc `` {x''})))\n\ngoal (1 subgoal):\n 1. AE x in K.T x''. smap f x \\<in> streams (f ` A)", "unfolding alw_HLD_iff_streams"], ["proof (prove)\nusing this:\n  AE \\<omega> in K.T x''. \\<omega> \\<in> streams (K.acc `` {x''})\n\ngoal (1 subgoal):\n 1. AE x in K.T x''. smap f x \\<in> streams (f ` A)", "proof eventually_elim"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> streams (K.acc `` {x''}) \\<Longrightarrow>\n       smap f x \\<in> streams (f ` A)", "fix s"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> streams (K.acc `` {x''}) \\<Longrightarrow>\n       smap f x \\<in> streams (f ` A)", "assume \"s \\<in> streams (K.acc `` {x''})\""], ["proof (state)\nthis:\n  s \\<in> streams (K.acc `` {x''})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> streams (K.acc `` {x''}) \\<Longrightarrow>\n       smap f x \\<in> streams (f ` A)", "moreover"], ["proof (state)\nthis:\n  s \\<in> streams (K.acc `` {x''})\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> streams (K.acc `` {x''}) \\<Longrightarrow>\n       smap f x \\<in> streams (f ` A)", "have \"K.acc `` {x''} \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K.acc `` {x''} \\<subseteq> A", "using \\<open>x'' \\<in> A\\<close>"], ["proof (prove)\nusing this:\n  x'' \\<in> A\n\ngoal (1 subgoal):\n 1. K.acc `` {x''} \\<subseteq> A", "by (auto simp: A_def Image_def intro: rtrancl_trans)"], ["proof (state)\nthis:\n  K.acc `` {x''} \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       x \\<in> streams (K.acc `` {x''}) \\<Longrightarrow>\n       smap f x \\<in> streams (f ` A)", "ultimately"], ["proof (chain)\npicking this:\n  s \\<in> streams (K.acc `` {x''})\n  K.acc `` {x''} \\<subseteq> A", "show \"smap f s \\<in> streams (f ` A)\""], ["proof (prove)\nusing this:\n  s \\<in> streams (K.acc `` {x''})\n  K.acc `` {x''} \\<subseteq> A\n\ngoal (1 subgoal):\n 1. smap f s \\<in> streams (f ` A)", "by (auto intro: smap_streams)"], ["proof (state)\nthis:\n  smap f s \\<in> streams (f ` A)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?x''1 \\<in> A \\<Longrightarrow>\n  AE x in distr (K.T ?x''1) (stream_space (count_space UNIV))\n           (smap f). x \\<in> streams (f ` A)\n\ngoal (3 subgoals):\n 1. AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 2. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` K.acc `` {x, x'})\n 3. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> [];\n        xs \\<in> lists (f ` K.acc `` {x, x'})\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs)", "with x_A"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x' \\<in> A\n  ?x''1 \\<in> A \\<Longrightarrow>\n  AE x in distr (K.T ?x''1) (stream_space (count_space UNIV))\n           (smap f). x \\<in> streams (f ` A)", "show \"AE x in ?D x'. x \\<in> streams ?\\<Omega>\" \"AE x in ?D x. x \\<in> streams ?\\<Omega>\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  x' \\<in> A\n  ?x''1 \\<in> A \\<Longrightarrow>\n  AE x in distr (K.T ?x''1) (stream_space (count_space UNIV))\n           (smap f). x \\<in> streams (f ` A)\n\ngoal (1 subgoal):\n 1. AE x in distr (K.T x') (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` A) &&&\n    AE x in distr (K.T x) (stream_space (count_space UNIV))\n             (smap f). x \\<in> streams (f ` A)", "by auto"], ["proof (state)\nthis:\n  AE x in distr (K.T x') (stream_space (count_space UNIV))\n           (smap f). x \\<in> streams (f ` A)\n  AE x in distr (K.T x) (stream_space (count_space UNIV))\n           (smap f). x \\<in> streams (f ` A)\n\ngoal (1 subgoal):\n 1. \\<And>xs.\n       \\<lbrakk>xs \\<noteq> [];\n        xs \\<in> lists (f ` K.acc `` {x, x'})\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` K.acc `` {x, x'}) xs)", "from \\<open>x \\<in> A\\<close> \\<open>x' \\<in> A\\<close> that"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y", "show \"?D x (sstart (f ` A) xs) = ?D x' (sstart (f ` A) xs)\" for xs"], ["proof (prove)\nusing this:\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y\n\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) xs) =\n    emeasure (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) xs)", "proof (induction xs arbitrary: x x' y)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<And>x x' y.\n       \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) []) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) [])\n 2. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "case Nil"], ["proof (state)\nthis:\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y\n\ngoal (2 subgoals):\n 1. \\<And>x x' y.\n       \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) []) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) [])\n 2. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "moreover"], ["proof (state)\nthis:\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y\n\ngoal (2 subgoals):\n 1. \\<And>x x' y.\n       \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) []) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) [])\n 2. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "have \"?D x (streams (f ` A)) = 1\" if \"x \\<in> A\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n     (streams (f ` A)) =\n    1", "using AE_streams[of x] that"], ["proof (prove)\nusing this:\n  x \\<in> A \\<Longrightarrow>\n  AE x in distr (K.T x) (stream_space (count_space UNIV))\n           (smap f). x \\<in> streams (f ` A)\n  x \\<in> A\n\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n     (streams (f ` A)) =\n    1", "by (intro prob_space.emeasure_eq_1_AE[OF K.T.prob_space_distr]) (auto simp: streams_sets)"], ["proof (state)\nthis:\n  ?x1 \\<in> A \\<Longrightarrow>\n  emeasure (distr (K.T ?x1) (stream_space (count_space UNIV)) (smap f))\n   (streams (f ` A)) =\n  1\n\ngoal (2 subgoals):\n 1. \\<And>x x' y.\n       \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) []) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) [])\n 2. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "ultimately"], ["proof (chain)\npicking this:\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y\n  ?x1 \\<in> A \\<Longrightarrow>\n  emeasure (distr (K.T ?x1) (stream_space (count_space UNIV)) (smap f))\n   (streams (f ` A)) =\n  1", "show ?case"], ["proof (prove)\nusing this:\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y\n  ?x1 \\<in> A \\<Longrightarrow>\n  emeasure (distr (K.T ?x1) (stream_space (count_space UNIV)) (smap f))\n   (streams (f ` A)) =\n  1\n\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) []) =\n    emeasure (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) [])", "by simp"], ["proof (state)\nthis:\n  emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) []) =\n  emeasure (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) [])\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "case (Cons z zs x x' y)"], ["proof (state)\nthis:\n  \\<lbrakk>?x1 \\<in> A; ?x'1 \\<in> A; R ?x1 ?y1; R ?x'1 ?y1\\<rbrakk>\n  \\<Longrightarrow> emeasure\n                     (distr (K.T ?x1) (stream_space (count_space UNIV))\n                       (smap f))\n                     (sstart (f ` A) zs) =\n                    emeasure\n                     (distr (K.T ?x'1) (stream_space (count_space UNIV))\n                       (smap f))\n                     (sstart (f ` A) zs)\n  x \\<in> A\n  x' \\<in> A\n  R x y\n  R x' y\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "have \"rel_pmf (R OO R\\<inverse>\\<inverse>) (K x) (K x')\""], ["proof (prove)\ngoal (1 subgoal):\n 1. rel_pmf (R OO R\\<inverse>\\<inverse>) (K x) (K x')", "using KL[THEN rel_funD, OF Cons(4)] KL[THEN rel_funD, OF Cons(5)]"], ["proof (prove)\nusing this:\n  rel_pmf R (K x) (L y)\n  rel_pmf R (K x') (L y)\n\ngoal (1 subgoal):\n 1. rel_pmf (R OO R\\<inverse>\\<inverse>) (K x) (K x')", "unfolding pmf.rel_compp pmf.rel_flip"], ["proof (prove)\nusing this:\n  rel_pmf R (K x) (L y)\n  rel_pmf R (K x') (L y)\n\ngoal (1 subgoal):\n 1. (rel_pmf R OO (\\<lambda>a b. rel_pmf R b a)) (K x) (K x')", "by auto"], ["proof (state)\nthis:\n  rel_pmf (R OO R\\<inverse>\\<inverse>) (K x) (K x')\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "then"], ["proof (chain)\npicking this:\n  rel_pmf (R OO R\\<inverse>\\<inverse>) (K x) (K x')", "obtain p :: \"('s \\<times> 's) pmf\" where p: \"\\<And>a b. (a, b) \\<in> p \\<Longrightarrow> (R OO R\\<inverse>\\<inverse>) a b\" and\n        eq: \"map_pmf fst p = K x\" \"map_pmf snd p = K x'\""], ["proof (prove)\nusing this:\n  rel_pmf (R OO R\\<inverse>\\<inverse>) (K x) (K x')\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        \\<lbrakk>\\<And>a b.\n                    (a, b) \\<in> set_pmf p \\<Longrightarrow>\n                    (R OO R\\<inverse>\\<inverse>) a b;\n         map_pmf fst p = K x; map_pmf snd p = K x'\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (auto simp: pmf.in_rel)"], ["proof (state)\nthis:\n  (?a1, ?b1) \\<in> set_pmf p \\<Longrightarrow>\n  (R OO R\\<inverse>\\<inverse>) ?a1 ?b1\n  map_pmf fst p = K x\n  map_pmf snd p = K x'\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "let ?S = \"stream_space (count_space UNIV)\""], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "have *: \"(##) y -` smap f -` sstart (f ` A) (z # zs) = (if f y = z then smap f -` sstart (f ` A) zs else {})\" for y z zs"], ["proof (prove)\ngoal (1 subgoal):\n 1. (##) y -` smap f -` sstart (f ` A) (z # zs) =\n    (if f y = z then smap f -` sstart (f ` A) zs else {})", "by auto"], ["proof (state)\nthis:\n  (##) ?y2 -` smap f -` sstart (f ` A) (?z2 # ?zs2) =\n  (if f ?y2 = ?z2 then smap f -` sstart (f ` A) ?zs2 else {})\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "have **: \"?D x (sstart (f ` A) (z # zs)) = (\\<integral>\\<^sup>+ y'. (if f y' = z then ?D y' (sstart (f ` A) zs) else 0) \\<partial>K x)\" for x"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) (z # zs)) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply (simp add: emeasure_distr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (K.T x)\n     (smap f -` sstart (f ` A) (z # zs) \\<inter>\n      space (stream_space (count_space UNIV))) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply (subst K.T_eq_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure\n     (measure_pmf (K x) \\<bind>\n      (\\<lambda>t.\n          distr (K.T t) (stream_space (count_space UNIV)) ((##) t)))\n     (smap f -` sstart (f ` A) (z # zs) \\<inter>\n      space (stream_space (count_space UNIV))) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply (subst emeasure_bind[where N=\"?S\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. space (measure_pmf (K x)) \\<noteq> {}\n 2. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>t. distr (K.T t) (stream_space (count_space UNIV)) ((##) t))\n 3. smap f -` sstart (f ` A) (z # zs) \\<inter>\n    space (stream_space (count_space UNIV))\n    \\<in> sets (stream_space (count_space UNIV))\n 4. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (K.T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            (smap f -` sstart (f ` A) (z # zs) \\<inter>\n                             space (stream_space (count_space UNIV)))\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply simp"], ["proof (prove)\ngoal (3 subgoals):\n 1. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>t. distr (K.T t) (stream_space (count_space UNIV)) ((##) t))\n 2. smap f -` sstart (f ` A) (z # zs) \\<inter>\n    space (stream_space (count_space UNIV))\n    \\<in> sets (stream_space (count_space UNIV))\n 3. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (K.T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            (smap f -` sstart (f ` A) (z # zs) \\<inter>\n                             space (stream_space (count_space UNIV)))\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply (rule measurable_distr2[where M=\"?S\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<lambda>(x, y). x ## y)\n    \\<in> measure_pmf (K x) \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 2. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV))) K.T\n 3. smap f -` sstart (f ` A) (z # zs) \\<inter>\n    space (stream_space (count_space UNIV))\n    \\<in> sets (stream_space (count_space UNIV))\n 4. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (K.T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            (smap f -` sstart (f ` A) (z # zs) \\<inter>\n                             space (stream_space (count_space UNIV)))\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. emeasure\n                            (distr (K.T x) (stream_space (count_space UNIV))\n                              ((##) x))\n                            (smap f -` sstart (f ` A) (z # zs) \\<inter>\n                             space (stream_space (count_space UNIV)))\n                       \\<partial>measure_pmf (K x) =\n    \\<integral>\\<^sup>+ y'. (if f y' = z\n                             then emeasure\n                                   (distr (K.T y')\n                                     (stream_space (count_space UNIV))\n                                     (smap f))\n                                   (sstart (f ` A) zs)\n                             else 0)\n                       \\<partial>measure_pmf (K x)", "apply (intro nn_integral_cong_AE AE_pmfI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf (K x) \\<Longrightarrow>\n       emeasure (distr (K.T y) (stream_space (count_space UNIV)) ((##) y))\n        (smap f -` sstart (f ` A) (z # zs) \\<inter>\n         space (stream_space (count_space UNIV))) =\n       (if f y = z\n        then emeasure\n              (distr (K.T y) (stream_space (count_space UNIV)) (smap f))\n              (sstart (f ` A) zs)\n        else 0)", "apply (auto simp add: emeasure_distr)"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>y.\n       \\<lbrakk>y \\<in> set_pmf (K x); z = f y\\<rbrakk>\n       \\<Longrightarrow> emeasure (K.T y)\n                          ((##) y -`\n                           smap f -` sstart (f ` A) (f y # zs) \\<inter>\n                           (##) y -`\n                           space (stream_space (count_space UNIV)) \\<inter>\n                           space (stream_space (count_space UNIV))) =\n                         emeasure (K.T y)\n                          (smap f -` sstart (f ` A) zs \\<inter>\n                           space (stream_space (count_space UNIV)))\n 2. \\<And>y.\n       \\<lbrakk>y \\<in> set_pmf (K x); f y \\<noteq> z\\<rbrakk>\n       \\<Longrightarrow> emeasure (K.T y)\n                          ((##) y -`\n                           smap f -` sstart (f ` A) (z # zs) \\<inter>\n                           (##) y -`\n                           space (stream_space (count_space UNIV)) \\<inter>\n                           space (stream_space (count_space UNIV))) =\n                         0", "apply (simp_all add: * space_stream_space)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure (distr (K.T ?x2) (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) (z # zs)) =\n  \\<integral>\\<^sup>+ y'. (if f y' = z\n                           then emeasure\n                                 (distr (K.T y')\n                                   (stream_space (count_space UNIV))\n                                   (smap f))\n                                 (sstart (f ` A) zs)\n                           else 0)\n                     \\<partial>measure_pmf (K ?x2)\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "have fst_A: \"fst ab \\<in> A\" if \"ab \\<in> p\" for ab"], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ab \\<in> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. fst ab \\<in> A", "have \"fst ab \\<in> K x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. fst ab \\<in> set_pmf (K x)", "using \\<open>ab \\<in> p\\<close> set_map_pmf [of fst p]"], ["proof (prove)\nusing this:\n  ab \\<in> set_pmf p\n  set_pmf (map_pmf fst p) = fst ` set_pmf p\n\ngoal (1 subgoal):\n 1. fst ab \\<in> set_pmf (K x)", "by (auto simp: eq)"], ["proof (state)\nthis:\n  fst ab \\<in> set_pmf (K x)\n\ngoal (1 subgoal):\n 1. fst ab \\<in> A", "with \\<open>x \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  x \\<in> A\n  fst ab \\<in> set_pmf (K x)", "show \"fst ab \\<in> A\""], ["proof (prove)\nusing this:\n  x \\<in> A\n  fst ab \\<in> set_pmf (K x)\n\ngoal (1 subgoal):\n 1. fst ab \\<in> A", "by (auto simp: A_def intro: rtrancl.rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  fst ab \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?ab2 \\<in> set_pmf p \\<Longrightarrow> fst ?ab2 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "have snd_A: \"snd ab \\<in> A\" if \"ab \\<in> p\" for ab"], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ab \\<in> A", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. snd ab \\<in> A", "have \"snd ab \\<in> K x'\""], ["proof (prove)\ngoal (1 subgoal):\n 1. snd ab \\<in> set_pmf (K x')", "using \\<open>ab \\<in> p\\<close> set_map_pmf [of snd p]"], ["proof (prove)\nusing this:\n  ab \\<in> set_pmf p\n  set_pmf (map_pmf snd p) = snd ` set_pmf p\n\ngoal (1 subgoal):\n 1. snd ab \\<in> set_pmf (K x')", "by (auto simp: eq)"], ["proof (state)\nthis:\n  snd ab \\<in> set_pmf (K x')\n\ngoal (1 subgoal):\n 1. snd ab \\<in> A", "with \\<open>x' \\<in> A\\<close>"], ["proof (chain)\npicking this:\n  x' \\<in> A\n  snd ab \\<in> set_pmf (K x')", "show \"snd ab \\<in> A\""], ["proof (prove)\nusing this:\n  x' \\<in> A\n  snd ab \\<in> set_pmf (K x')\n\ngoal (1 subgoal):\n 1. snd ab \\<in> A", "by (auto simp: A_def intro: rtrancl.rtrancl_into_rtrancl)"], ["proof (state)\nthis:\n  snd ab \\<in> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?ab2 \\<in> set_pmf p \\<Longrightarrow> snd ?ab2 \\<in> A\n\ngoal (1 subgoal):\n 1. \\<And>a xs x x' y.\n       \\<lbrakk>\\<And>x x' y.\n                   \\<lbrakk>x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n                   \\<Longrightarrow> emeasure\n(distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs) =\n                                     emeasure\n(distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n(sstart (f ` A) xs);\n        x \\<in> A; x' \\<in> A; R x y; R x' y\\<rbrakk>\n       \\<Longrightarrow> emeasure\n                          (distr (K.T x) (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs)) =\n                         emeasure\n                          (distr (K.T x') (stream_space (count_space UNIV))\n                            (smap f))\n                          (sstart (f ` A) (a # xs))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) (z # zs)) =\n    emeasure (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n     (sstart (f ` A) (z # zs))", "unfolding ** eq[symmetric] nn_integral_map_pmf"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<integral>\\<^sup>+ x. (if f (fst x) = z\n                            then emeasure\n                                  (distr (K.T (fst x))\n                                    (stream_space (count_space UNIV))\n                                    (smap f))\n                                  (sstart (f ` A) zs)\n                            else 0)\n                       \\<partial>measure_pmf p =\n    \\<integral>\\<^sup>+ x. (if f (snd x) = z\n                            then emeasure\n                                  (distr (K.T (snd x))\n                                    (stream_space (count_space UNIV))\n                                    (smap f))\n                                  (sstart (f ` A) zs)\n                            else 0)\n                       \\<partial>measure_pmf p", "apply (intro nn_integral_cong_AE AE_pmfI)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>y.\n       y \\<in> set_pmf p \\<Longrightarrow>\n       (if f (fst y) = z\n        then emeasure\n              (distr (K.T (fst y)) (stream_space (count_space UNIV))\n                (smap f))\n              (sstart (f ` A) zs)\n        else 0) =\n       (if f (snd y) = z\n        then emeasure\n              (distr (K.T (snd y)) (stream_space (count_space UNIV))\n                (smap f))\n              (sstart (f ` A) zs)\n        else 0)", "subgoal for ab"], ["proof (prove)\ngoal (1 subgoal):\n 1. ab \\<in> set_pmf p \\<Longrightarrow>\n    (if f (fst ab) = z\n     then emeasure\n           (distr (K.T (fst ab)) (stream_space (count_space UNIV)) (smap f))\n           (sstart (f ` A) zs)\n     else 0) =\n    (if f (snd ab) = z\n     then emeasure\n           (distr (K.T (snd ab)) (stream_space (count_space UNIV)) (smap f))\n           (sstart (f ` A) zs)\n     else 0)", "using p[of \"fst ab\" \"snd ab\"]"], ["proof (prove)\nusing this:\n  (fst ab, snd ab) \\<in> set_pmf p \\<Longrightarrow>\n  (R OO R\\<inverse>\\<inverse>) (fst ab) (snd ab)\n\ngoal (1 subgoal):\n 1. ab \\<in> set_pmf p \\<Longrightarrow>\n    (if f (fst ab) = z\n     then emeasure\n           (distr (K.T (fst ab)) (stream_space (count_space UNIV)) (smap f))\n           (sstart (f ` A) zs)\n     else 0) =\n    (if f (snd ab) = z\n     then emeasure\n           (distr (K.T (snd ab)) (stream_space (count_space UNIV)) (smap f))\n           (sstart (f ` A) zs)\n     else 0)", "by (auto simp: R_def intro!: Cons(1) fst_A snd_A)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) (z # zs)) =\n  emeasure (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) (z # zs))\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) ?xs1) =\n  emeasure (distr (K.T x') (stream_space (count_space UNIV)) (smap f))\n   (sstart (f ` A) ?xs1)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  \\<lbrakk>R ?x1 ?y1; R ?x'1 ?y1\\<rbrakk>\n  \\<Longrightarrow> distr (K.T ?x1) (stream_space (count_space UNIV))\n                     (smap f) =\n                    distr (K.T ?x'1) (stream_space (count_space UNIV))\n                     (smap f)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have L_eq_D: \"L.T y = ?D x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. L.T y = distr (K.T x) (stream_space (count_space UNIV)) (smap f)", "using \\<open>R x y\\<close>"], ["proof (prove)\nusing this:\n  R x y\n\ngoal (1 subgoal):\n 1. L.T y = distr (K.T x) (stream_space (count_space UNIV)) (smap f)", "proof (coinduction arbitrary: x y rule: L.T_coinduct)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "case (cont x y)"], ["proof (state)\nthis:\n  R x y\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "then"], ["proof (chain)\npicking this:\n  R x y", "have Kx_Ly: \"rel_pmf R (K x) (L y)\""], ["proof (prove)\nusing this:\n  R x y\n\ngoal (1 subgoal):\n 1. rel_pmf R (K x) (L y)", "by (rule KL[THEN rel_funD])"], ["proof (state)\nthis:\n  rel_pmf R (K x) (L y)\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "then"], ["proof (chain)\npicking this:\n  rel_pmf R (K x) (L y)", "have *: \"y' \\<in> L y \\<Longrightarrow> \\<exists>x'\\<in>K x. R x' y'\" for y'"], ["proof (prove)\nusing this:\n  rel_pmf R (K x) (L y)\n\ngoal (1 subgoal):\n 1. y' \\<in> set_pmf (L y) \\<Longrightarrow>\n    \\<exists>x'\\<in>set_pmf (K x). R x' y'", "by (auto dest!: rel_pmf_imp_rel_set simp: rel_set_def)"], ["proof (state)\nthis:\n  ?y'1 \\<in> set_pmf (L y) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_pmf (K x). R x' ?y'1\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "have **: \"y' \\<in> L y \\<Longrightarrow> R (g y') y'\" for y'"], ["proof (prove)\ngoal (1 subgoal):\n 1. y' \\<in> set_pmf (L y) \\<Longrightarrow> R (g y') y'", "using *[of y']"], ["proof (prove)\nusing this:\n  y' \\<in> set_pmf (L y) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_pmf (K x). R x' y'\n\ngoal (1 subgoal):\n 1. y' \\<in> set_pmf (L y) \\<Longrightarrow> R (g y') y'", "unfolding g_def"], ["proof (prove)\nusing this:\n  y' \\<in> set_pmf (L y) \\<Longrightarrow>\n  \\<exists>x'\\<in>set_pmf (K x). R x' y'\n\ngoal (1 subgoal):\n 1. y' \\<in> set_pmf (L y) \\<Longrightarrow> R (SOME s. R s y') y'", "by (auto intro: someI)"], ["proof (state)\nthis:\n  ?y'1 \\<in> set_pmf (L y) \\<Longrightarrow> R (g ?y'1) ?y'1\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "have D_SCons_eq_D_D: \"distr (K.T i) K.S (\\<lambda>x. z ## smap f x) = distr (?D i) K.S (\\<lambda>x. z ## x)\" for i z"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (K.T i) (stream_space (count_space UNIV))\n     (\\<lambda>x. z ## smap f x) =\n    distr (distr (K.T i) (stream_space (count_space UNIV)) (smap f))\n     (stream_space (count_space UNIV)) ((##) z)", "by (subst distr_distr) (auto simp: comp_def)"], ["proof (state)\nthis:\n  distr (K.T ?i1) (stream_space (count_space UNIV))\n   (\\<lambda>x. ?z1 ## smap f x) =\n  distr (distr (K.T ?i1) (stream_space (count_space UNIV)) (smap f))\n   (stream_space (count_space UNIV)) ((##) ?z1)\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "have D_eq_D_gi: \"?D i = ?D (g (f i))\" if i: \"i \\<in> K x\" for i"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (K.T i) (stream_space (count_space UNIV)) (smap f) =\n    distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f)", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. distr (K.T i) (stream_space (count_space UNIV)) (smap f) =\n    distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f)", "obtain j where \"j \\<in> L y\" \"R i j\" \"f i = j\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> set_pmf (L y); R i j; f i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using Kx_Ly i"], ["proof (prove)\nusing this:\n  rel_pmf R (K x) (L y)\n  i \\<in> set_pmf (K x)\n\ngoal (1 subgoal):\n 1. (\\<And>j.\n        \\<lbrakk>j \\<in> set_pmf (L y); R i j; f i = j\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (force dest!: rel_pmf_imp_rel_set simp: rel_set_def R_def)"], ["proof (state)\nthis:\n  j \\<in> set_pmf (L y)\n  R i j\n  f i = j\n\ngoal (1 subgoal):\n 1. distr (K.T i) (stream_space (count_space UNIV)) (smap f) =\n    distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f)", "then"], ["proof (chain)\npicking this:\n  j \\<in> set_pmf (L y)\n  R i j\n  f i = j", "show ?thesis"], ["proof (prove)\nusing this:\n  j \\<in> set_pmf (L y)\n  R i j\n  f i = j\n\ngoal (1 subgoal):\n 1. distr (K.T i) (stream_space (count_space UNIV)) (smap f) =\n    distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f)", "by (auto intro!: D_eq_D[OF \\<open>R i j\\<close>] g)"], ["proof (state)\nthis:\n  distr (K.T i) (stream_space (count_space UNIV)) (smap f) =\n  distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  ?i1 \\<in> set_pmf (K x) \\<Longrightarrow>\n  distr (K.T ?i1) (stream_space (count_space UNIV)) (smap f) =\n  distr (K.T (g (f ?i1))) (stream_space (count_space UNIV)) (smap f)\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "have ***: \"?D x = measure_pmf (L y) \\<bind> (\\<lambda>y. distr (?D (g y)) K.S ((##) y))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. distr (K.T x) (stream_space (count_space UNIV)) (smap f) =\n    measure_pmf (L y) \\<bind>\n    (\\<lambda>y.\n        distr (distr (K.T (g y)) (stream_space (count_space UNIV)) (smap f))\n         (stream_space (count_space UNIV)) ((##) y))", "apply (subst K.T_eq_bind)"], ["proof (prove)\ngoal (1 subgoal):\n 1. distr\n     (measure_pmf (K x) \\<bind>\n      (\\<lambda>t.\n          distr (K.T t) (stream_space (count_space UNIV)) ((##) t)))\n     (stream_space (count_space UNIV)) (smap f) =\n    measure_pmf (L y) \\<bind>\n    (\\<lambda>y.\n        distr (distr (K.T (g y)) (stream_space (count_space UNIV)) (smap f))\n         (stream_space (count_space UNIV)) ((##) y))", "apply (subst distr_bind[of _ _ K.S])"], ["proof (prove)\ngoal (4 subgoals):\n 1. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV)))\n     (\\<lambda>t. distr (K.T t) (stream_space (count_space UNIV)) ((##) t))\n 2. space (measure_pmf (K x)) \\<noteq> {}\n 3. smap f\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 4. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (distr (K.T x) (stream_space (count_space UNIV)) ((##) x))\n         (stream_space (count_space UNIV)) (smap f)) =\n    measure_pmf (L y) \\<bind>\n    (\\<lambda>y.\n        distr (distr (K.T (g y)) (stream_space (count_space UNIV)) (smap f))\n         (stream_space (count_space UNIV)) ((##) y))", "apply (rule measurable_distr2[of _  _ \"K.S\"])"], ["proof (prove)\ngoal (5 subgoals):\n 1. (\\<lambda>(x, y). x ## y)\n    \\<in> measure_pmf (K x) \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 2. measure_pmf.random_variable (K x)\n     (subprob_algebra (stream_space (count_space UNIV))) K.T\n 3. space (measure_pmf (K x)) \\<noteq> {}\n 4. smap f\n    \\<in> stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 5. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (distr (K.T x) (stream_space (count_space UNIV)) ((##) x))\n         (stream_space (count_space UNIV)) (smap f)) =\n    measure_pmf (L y) \\<bind>\n    (\\<lambda>y.\n        distr (distr (K.T (g y)) (stream_space (count_space UNIV)) (smap f))\n         (stream_space (count_space UNIV)) ((##) y))", "apply (simp_all add: Pi_iff)"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (distr (K.T x) (stream_space (count_space UNIV)) ((##) x))\n         (stream_space (count_space UNIV)) (smap f)) =\n    measure_pmf (L y) \\<bind>\n    (\\<lambda>y.\n        distr (distr (K.T (g y)) (stream_space (count_space UNIV)) (smap f))\n         (stream_space (count_space UNIV)) ((##) y))", "apply (simp add: distr_distr comp_def L_eq[OF cont] map_pmf_rep_eq)"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    distr (measure_pmf (K x)) (count_space UNIV) f \\<bind>\n    (\\<lambda>y.\n        distr (K.T (g y)) (stream_space (count_space UNIV))\n         (\\<lambda>x. y ## smap f x))", "apply (subst bind_distr[where K=K.S])"], ["proof (prove)\ngoal (4 subgoals):\n 1. measure_pmf.random_variable (K x) (count_space UNIV) f\n 2. (\\<lambda>y.\n        distr (K.T (g y)) (stream_space (count_space UNIV))\n         (\\<lambda>x. y ## smap f x))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))\n 3. space (measure_pmf (K x)) \\<noteq> {}\n 4. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply measurable []"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>y.\n        distr (K.T (g y)) (stream_space (count_space UNIV))\n         (\\<lambda>x. y ## smap f x))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))\n 2. space (measure_pmf (K x)) \\<noteq> {}\n 3. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply (rule measurable_distr2[of _  _ \"K.S\"])"], ["proof (prove)\ngoal (4 subgoals):\n 1. (\\<lambda>(xa, x). xa ## smap f x)\n    \\<in> count_space UNIV \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)\n 2. (\\<lambda>x. K.T (g x))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))\n 3. space (measure_pmf (K x)) \\<noteq> {}\n 4. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply measurable []"], ["proof (prove)\ngoal (3 subgoals):\n 1. (\\<lambda>x. K.T (g x))\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))\n 2. space (measure_pmf (K x)) \\<noteq> {}\n 3. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply (rule measurable_compose[OF measurable_g])"], ["proof (prove)\ngoal (3 subgoals):\n 1. K.T\n    \\<in> count_space UNIV \\<rightarrow>\\<^sub>M\n          subprob_algebra (stream_space (count_space UNIV))\n 2. space (measure_pmf (K x)) \\<noteq> {}\n 3. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply measurable []"], ["proof (prove)\ngoal (2 subgoals):\n 1. space (measure_pmf (K x)) \\<noteq> {}\n 2. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply simp"], ["proof (prove)\ngoal (1 subgoal):\n 1. measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T x) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa)) =\n    measure_pmf (K x) \\<bind>\n    (\\<lambda>x.\n        distr (K.T (g (f x))) (stream_space (count_space UNIV))\n         (\\<lambda>xa. f x ## smap f xa))", "apply (rule bind_measure_pmf_cong[where N=\"K.S\"])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       distr (K.T x) (stream_space (count_space UNIV))\n        (\\<lambda>xa. f x ## smap f xa)\n       \\<in> space (subprob_algebra (stream_space (count_space UNIV)))\n 2. \\<And>x.\n       distr (K.T (g (f x))) (stream_space (count_space UNIV))\n        (\\<lambda>xa. f x ## smap f xa)\n       \\<in> space (subprob_algebra (stream_space (count_space UNIV)))\n 3. \\<And>i.\n       i \\<in> set_pmf (K x) \\<Longrightarrow>\n       distr (K.T i) (stream_space (count_space UNIV))\n        (\\<lambda>x. f i ## smap f x) =\n       distr (K.T (g (f i))) (stream_space (count_space UNIV))\n        (\\<lambda>x. f i ## smap f x)", "apply (auto simp: space_subprob_algebra space_stream_space intro!: K.T.subprob_space_distr)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> set_pmf (K x) \\<Longrightarrow>\n       distr (K.T i) (stream_space (count_space UNIV))\n        (\\<lambda>x. f i ## smap f x) =\n       distr (K.T (g (f i))) (stream_space (count_space UNIV))\n        (\\<lambda>x. f i ## smap f x)", "unfolding D_SCons_eq_D_D D_eq_D_gi"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>i.\n       i \\<in> set_pmf (K x) \\<Longrightarrow>\n       distr\n        (distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f))\n        (stream_space (count_space UNIV)) ((##) (f i)) =\n       distr\n        (distr (K.T (g (f i))) (stream_space (count_space UNIV)) (smap f))\n        (stream_space (count_space UNIV)) ((##) (f i))", ".."], ["proof (state)\nthis:\n  distr (K.T x) (stream_space (count_space UNIV)) (smap f) =\n  measure_pmf (L y) \\<bind>\n  (\\<lambda>y.\n      distr (distr (K.T (g y)) (stream_space (count_space UNIV)) (smap f))\n       (stream_space (count_space UNIV)) ((##) y))\n\ngoal (3 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       \\<exists>M'.\n          (\\<forall>y\\<in>set_pmf (L y).\n              \\<exists>x ya.\n                 y = ya \\<and>\n                 M' y =\n                 distr (K.T x) (stream_space (count_space UNIV))\n                  (smap f) \\<and>\n                 R x ya) \\<and>\n          (\\<forall>y.\n              sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n              prob_space (M' y)) \\<and>\n          distr (K.T xa) (stream_space (count_space UNIV)) (smap f) =\n          measure_pmf (L y) \\<bind>\n          (\\<lambda>y.\n              distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "show ?case"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>M'.\n       (\\<forall>y\\<in>set_pmf (L y).\n           \\<exists>x ya.\n              y = ya \\<and>\n              M' y =\n              distr (K.T x) (stream_space (count_space UNIV))\n               (smap f) \\<and>\n              R x ya) \\<and>\n       (\\<forall>y.\n           sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n           prob_space (M' y)) \\<and>\n       distr (K.T x) (stream_space (count_space UNIV)) (smap f) =\n       measure_pmf (L y) \\<bind>\n       (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))", "by (intro exI[of _ \"\\<lambda>t. distr (K.T (g t)) (stream_space (count_space UNIV)) (smap f)\"])\n         (auto simp add: K.T.prob_space_distr *** dest: **)"], ["proof (state)\nthis:\n  \\<exists>M'.\n     (\\<forall>y\\<in>set_pmf (L y).\n         \\<exists>x ya.\n            y = ya \\<and>\n            M' y =\n            distr (K.T x) (stream_space (count_space UNIV)) (smap f) \\<and>\n            R x ya) \\<and>\n     (\\<forall>y.\n         sets (M' y) = sets (stream_space (count_space UNIV)) \\<and>\n         prob_space (M' y)) \\<and>\n     distr (K.T x) (stream_space (count_space UNIV)) (smap f) =\n     measure_pmf (L y) \\<bind>\n     (\\<lambda>y. distr (M' y) (stream_space (count_space UNIV)) ((##) y))\n\ngoal (2 subgoals):\n 1. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       prob_space\n        (distr (K.T xa) (stream_space (count_space UNIV)) (smap f))\n 2. \\<And>xa y.\n       R xa y \\<Longrightarrow>\n       sets (distr (K.T xa) (stream_space (count_space UNIV)) (smap f)) =\n       sets (stream_space (count_space UNIV))", "qed (auto intro: K.T.prob_space_distr)"], ["proof (state)\nthis:\n  L.T y = distr (K.T x) (stream_space (count_space UNIV)) (smap f)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have \"stream_all2 R s t \\<longleftrightarrow> (s \\<in> streams S \\<and> smap f s = t)\" for s t"], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R s t = (s \\<in> streams S \\<and> smap f s = t)", "proof safe"], ["proof (state)\ngoal (3 subgoals):\n 1. stream_all2 R s t \\<Longrightarrow> s \\<in> streams S\n 2. stream_all2 R s t \\<Longrightarrow> smap f s = t\n 3. \\<lbrakk>s \\<in> streams S; t = smap f s\\<rbrakk>\n    \\<Longrightarrow> stream_all2 R s (smap f s)", "show \"stream_all2 R s t \\<Longrightarrow> s \\<in> streams S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R s t \\<Longrightarrow> s \\<in> streams S", "apply (coinduction arbitrary: s t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       stream_all2 R s t \\<Longrightarrow>\n       \\<exists>a sa.\n          s = a ## sa \\<and>\n          a \\<in> S \\<and>\n          ((\\<exists>s t. sa = s \\<and> stream_all2 R s t) \\<or>\n           sa \\<in> streams S)", "subgoal for s t"], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R s t \\<Longrightarrow>\n    \\<exists>a s.\n       s = a ## s \\<and>\n       a \\<in> S \\<and>\n       ((\\<exists>sa t. s = sa \\<and> stream_all2 R sa t) \\<or>\n        s \\<in> streams S)", "by (cases s; cases t) (auto simp: R_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  stream_all2 R s t \\<Longrightarrow> s \\<in> streams S\n\ngoal (2 subgoals):\n 1. stream_all2 R s t \\<Longrightarrow> smap f s = t\n 2. \\<lbrakk>s \\<in> streams S; t = smap f s\\<rbrakk>\n    \\<Longrightarrow> stream_all2 R s (smap f s)", "show \"stream_all2 R s t \\<Longrightarrow> smap f s = t\""], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R s t \\<Longrightarrow> smap f s = t", "apply (coinduction arbitrary: s t)"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>s t.\n       stream_all2 R s t \\<Longrightarrow>\n       shd (smap f s) = shd t \\<and>\n       (\\<exists>sa ta.\n           stl (smap f s) = smap f sa \\<and>\n           stl t = ta \\<and> stream_all2 R sa ta)", "subgoal for s t"], ["proof (prove)\ngoal (1 subgoal):\n 1. stream_all2 R s t \\<Longrightarrow>\n    shd (smap f s) = shd t \\<and>\n    (\\<exists>s t.\n        stl (smap f s) = smap f s \\<and> stl t = t \\<and> stream_all2 R s t)", "by (cases s; cases t) (auto simp: R_def)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  stream_all2 R s t \\<Longrightarrow> smap f s = t\n\ngoal (1 subgoal):\n 1. \\<lbrakk>s \\<in> streams S; t = smap f s\\<rbrakk>\n    \\<Longrightarrow> stream_all2 R s (smap f s)", "qed (auto intro!: stream.rel_refl_strong simp: stream.rel_map R_def streams_iff_sset)"], ["proof (state)\nthis:\n  stream_all2 R ?s1 ?t1 = (?s1 \\<in> streams S \\<and> smap f ?s1 = ?t1)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "then"], ["proof (chain)\npicking this:\n  stream_all2 R ?s1 ?t1 = (?s1 \\<in> streams S \\<and> smap f ?s1 = ?t1)", "have \"\\<omega> \\<in> streams S \\<Longrightarrow> \\<omega> \\<in> A \\<longleftrightarrow> smap f \\<omega> \\<in> B\" for \\<omega>"], ["proof (prove)\nusing this:\n  stream_all2 R ?s1 ?t1 = (?s1 \\<in> streams S \\<and> smap f ?s1 = ?t1)\n\ngoal (1 subgoal):\n 1. \\<omega> \\<in> streams S \\<Longrightarrow>\n    (\\<omega> \\<in> A) = (smap f \\<omega> \\<in> B)", "using AB"], ["proof (prove)\nusing this:\n  stream_all2 R ?s1 ?t1 = (?s1 \\<in> streams S \\<and> smap f ?s1 = ?t1)\n  rel_set_strong (stream_all2 R) A B\n\ngoal (1 subgoal):\n 1. \\<omega> \\<in> streams S \\<Longrightarrow>\n    (\\<omega> \\<in> A) = (smap f \\<omega> \\<in> B)", "by (auto simp: rel_set_strong_def)"], ["proof (state)\nthis:\n  ?\\<omega>1 \\<in> streams S \\<Longrightarrow>\n  (?\\<omega>1 \\<in> A) = (smap f ?\\<omega>1 \\<in> B)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "with in_S"], ["proof (chain)\npicking this:\n  AE \\<omega> in K.T x. \\<omega> \\<in> streams S\n  ?\\<omega>1 \\<in> streams S \\<Longrightarrow>\n  (?\\<omega>1 \\<in> A) = (smap f ?\\<omega>1 \\<in> B)", "have \"K.T x A = K.T x (smap f -` B \\<inter> space (K.T x))\""], ["proof (prove)\nusing this:\n  AE \\<omega> in K.T x. \\<omega> \\<in> streams S\n  ?\\<omega>1 \\<in> streams S \\<Longrightarrow>\n  (?\\<omega>1 \\<in> A) = (smap f ?\\<omega>1 \\<in> B)\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A =\n    emeasure (K.T x) (smap f -` B \\<inter> space (K.T x))", "by (auto intro!: emeasure_eq_AE streams_sets)"], ["proof (state)\nthis:\n  emeasure (K.T x) A = emeasure (K.T x) (smap f -` B \\<inter> space (K.T x))\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "also"], ["proof (state)\nthis:\n  emeasure (K.T x) A = emeasure (K.T x) (smap f -` B \\<inter> space (K.T x))\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have \"\\<dots> = (distr (K.T x) K.S (smap f)) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (K.T x) (smap f -` B \\<inter> space (K.T x)) =\n    emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B", "by (intro emeasure_distr[symmetric]) auto"], ["proof (state)\nthis:\n  emeasure (K.T x) (smap f -` B \\<inter> space (K.T x)) =\n  emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "also"], ["proof (state)\nthis:\n  emeasure (K.T x) (smap f -` B \\<inter> space (K.T x)) =\n  emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "have \"\\<dots> = (L.T y) B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B =\n    emeasure (L.T y) B", "unfolding L_eq_D"], ["proof (prove)\ngoal (1 subgoal):\n 1. emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B =\n    emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B", ".."], ["proof (state)\nthis:\n  emeasure (distr (K.T x) (stream_space (count_space UNIV)) (smap f)) B =\n  emeasure (L.T y) B\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "finally"], ["proof (chain)\npicking this:\n  emeasure (K.T x) A = emeasure (L.T y) B", "show ?thesis"], ["proof (prove)\nusing this:\n  emeasure (K.T x) A = emeasure (L.T y) B\n\ngoal (1 subgoal):\n 1. emeasure (K.T x) A = emeasure (L.T y) B", "."], ["proof (state)\nthis:\n  emeasure (K.T x) A = emeasure (L.T y) B\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection \\<open>Product Construction\\<close>"], ["", "locale MC_pair =\n  K1: MC_syntax K1 + K2: MC_syntax K2 for K1 K2\nbegin"], ["", "definition \"Kp \\<equiv> \\<lambda>(a, b). pair_pmf (K1 a) (K2 b)\""], ["", "sublocale MC_syntax Kp"], ["proof (prove)\ngoal:\nNo subgoals!", "."], ["", "definition\n  \"szip\\<^sub>E a b \\<equiv> \\<lambda>(\\<omega>1, \\<omega>2). szip (K1.force_enabled a \\<omega>1) (K2.force_enabled b \\<omega>2)\""], ["", "lemma szip_rT[measurable]: \"(\\<lambda>(\\<omega>1, \\<omega>2). szip \\<omega>1 \\<omega>2) \\<in> measurable (K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(\\<omega>1, \\<omega>2). szip \\<omega>1 \\<omega>2)\n    \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "proof (rule measurable_stream_space2)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>x.\n           (case x of\n            (\\<omega>1, \\<omega>2) \\<Rightarrow>\n              szip \\<omega>1 \\<omega>2) !!\n           n)\n       \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n             count_space UNIV", "fix n"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>x.\n           (case x of\n            (\\<omega>1, \\<omega>2) \\<Rightarrow>\n              szip \\<omega>1 \\<omega>2) !!\n           n)\n       \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n             count_space UNIV", "have \"(\\<lambda>x. (case x of (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !! n) = (\\<lambda>\\<omega>. (fst \\<omega> !! n, snd \\<omega> !! n))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n        n) =\n    (\\<lambda>\\<omega>. (fst \\<omega> !! n, snd \\<omega> !! n))", "by auto"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (case x of\n       (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n      n) =\n  (\\<lambda>\\<omega>. (fst \\<omega> !! n, snd \\<omega> !! n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>x.\n           (case x of\n            (\\<omega>1, \\<omega>2) \\<Rightarrow>\n              szip \\<omega>1 \\<omega>2) !!\n           n)\n       \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n             count_space UNIV", "also"], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (case x of\n       (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n      n) =\n  (\\<lambda>\\<omega>. (fst \\<omega> !! n, snd \\<omega> !! n))\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>x.\n           (case x of\n            (\\<omega>1, \\<omega>2) \\<Rightarrow>\n              szip \\<omega>1 \\<omega>2) !!\n           n)\n       \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n             count_space UNIV", "have \"\\<dots> \\<in> measurable (K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2) (count_space UNIV)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>\\<omega>. (fst \\<omega> !! n, snd \\<omega> !! n))\n    \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n          count_space UNIV", "apply (rule measurable_compose_countable'[OF _ measurable_compose[OF measurable_fst K1.snth_rT, of n]])"], ["proof (prove)\ngoal (2 subgoals):\n 1. \\<And>i.\n       i \\<in> K1.acc `` {x1} \\<Longrightarrow>\n       (\\<lambda>\\<omega>. (i, snd \\<omega> !! n))\n       \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n             count_space UNIV\n 2. countable (K1.acc `` {x1})", "apply (rule measurable_compose_countable'[OF _ measurable_compose[OF measurable_snd K2.snth_rT, of n]])"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>i ia.\n       \\<lbrakk>i \\<in> K1.acc `` {x1}; ia \\<in> K2.acc `` {x2}\\<rbrakk>\n       \\<Longrightarrow> (\\<lambda>\\<omega>. (i, ia))\n                         \\<in> K1.rT x1 \\<Otimes>\\<^sub>M\n                               K2.rT x2 \\<rightarrow>\\<^sub>M\n                               count_space UNIV\n 2. \\<And>i.\n       i \\<in> K1.acc `` {x1} \\<Longrightarrow> countable (K2.acc `` {x2})\n 3. countable (K1.acc `` {x1})", "apply (auto intro!: K1.countable_acc K2.countable_acc)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (\\<lambda>\\<omega>. (fst \\<omega> !! n, snd \\<omega> !! n))\n  \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal (1 subgoal):\n 1. \\<And>n.\n       (\\<lambda>x.\n           (case x of\n            (\\<omega>1, \\<omega>2) \\<Rightarrow>\n              szip \\<omega>1 \\<omega>2) !!\n           n)\n       \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n             count_space UNIV", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x.\n      (case x of\n       (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n      n)\n  \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n        count_space UNIV", "show \"(\\<lambda>x. (case x of (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !! n) \\<in> measurable (K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2) (count_space UNIV)\""], ["proof (prove)\nusing this:\n  (\\<lambda>x.\n      (case x of\n       (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n      n)\n  \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal (1 subgoal):\n 1. (\\<lambda>x.\n        (case x of\n         (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n        n)\n    \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n          count_space UNIV", "."], ["proof (state)\nthis:\n  (\\<lambda>x.\n      (case x of\n       (\\<omega>1, \\<omega>2) \\<Rightarrow> szip \\<omega>1 \\<omega>2) !!\n      n)\n  \\<in> K1.rT x1 \\<Otimes>\\<^sub>M K2.rT x2 \\<rightarrow>\\<^sub>M\n        count_space UNIV\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma measurable_szipE[measurable]: \"szip\\<^sub>E a b \\<in> measurable (K1.S \\<Otimes>\\<^sub>M K2.S) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. szip\\<^sub>E a b\n    \\<in> stream_space (count_space UNIV) \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "unfolding szip\\<^sub>E_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>(\\<omega>1, \\<omega>2).\n        szip (K1.force_enabled a \\<omega>1) (K2.force_enabled b \\<omega>2))\n    \\<in> stream_space (count_space UNIV) \\<Otimes>\\<^sub>M\n          stream_space (count_space UNIV) \\<rightarrow>\\<^sub>M\n          stream_space (count_space UNIV)", "by measurable"], ["", "lemma T_eq_prod: \"T = (\\<lambda>(x1, x2). do { \\<omega>1 \\<leftarrow> K1.T x1 ; \\<omega>2 \\<leftarrow> K2.T x2 ; return S (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)) })\"\n  (is \"_ = ?B\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. T =\n    (\\<lambda>(x1, x2).\n        K1.T x1 \\<bind>\n        (\\<lambda>\\<omega>1.\n            K2.T x2 \\<bind>\n            (\\<lambda>\\<omega>2.\n                return (stream_space (count_space UNIV))\n                 (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))", "proof (rule T_bisim)"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       prob_space\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n 2. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "have T1x: \"\\<And>x. subprob_space (K1.T x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x. subprob_space (K1.T x)", "by (rule prob_space_imp_subprob_space) unfold_locales"], ["proof (state)\nthis:\n  subprob_space (K1.T ?x1)\n\ngoal (3 subgoals):\n 1. \\<And>x.\n       prob_space\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n 2. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "interpret T12: pair_prob_space \"K1.T x\" \"K2.T y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_prob_space (K1.T x) (K2.T y)", "by unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       prob_space\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n 2. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "interpret T1K2: pair_prob_space \"K1.T x\" \"K2 y\" for x y"], ["proof (prove)\ngoal (1 subgoal):\n 1. pair_prob_space (K1.T x) (measure_pmf (K2 y))", "by unfold_locales"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       prob_space\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n 2. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "let ?P = \"\\<lambda>x1 x2. K1.T x1 \\<Otimes>\\<^sub>M K2.T x2\""], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       prob_space\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n 2. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "fix x"], ["proof (state)\ngoal (3 subgoals):\n 1. \\<And>x.\n       prob_space\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n 2. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 3. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "show \"prob_space (?B x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. prob_space\n     (case x of\n      (x1, x2) \\<Rightarrow>\n        K1.T x1 \\<bind>\n        (\\<lambda>\\<omega>1.\n            K2.T x2 \\<bind>\n            (\\<lambda>\\<omega>2.\n                return (stream_space (count_space UNIV))\n                 (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))", "by (auto simp: space_stream_space split: prod.splits\n                intro!: prob_space.prob_space_bind prob_space_return\n                        measurable_bind[where N=S] measurable_compose[OF _ return_measurable] AE_I2)\n       unfold_locales"], ["proof (state)\nthis:\n  prob_space\n   (case x of\n    (x1, x2) \\<Rightarrow>\n      K1.T x1 \\<bind>\n      (\\<lambda>\\<omega>1.\n          K2.T x2 \\<bind>\n          (\\<lambda>\\<omega>2.\n              return (stream_space (count_space UNIV))\n               (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n\ngoal (2 subgoals):\n 1. \\<And>x.\n       sets\n        (case x of\n         (x1, x2) \\<Rightarrow>\n           K1.T x1 \\<bind>\n           (\\<lambda>\\<omega>1.\n               K2.T x2 \\<bind>\n               (\\<lambda>\\<omega>2.\n                   return (stream_space (count_space UNIV))\n                    (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       sets (stream_space (count_space UNIV))\n 2. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "show \"sets (?B x) = sets S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. sets\n     (case x of\n      (x1, x2) \\<Rightarrow>\n        K1.T x1 \\<bind>\n        (\\<lambda>\\<omega>1.\n            K2.T x2 \\<bind>\n            (\\<lambda>\\<omega>2.\n                return (stream_space (count_space UNIV))\n                 (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n    sets (stream_space (count_space UNIV))", "by (simp split: prod.splits add: measurable_bind[where N=S] sets_bind[where N=S] space_stream_space)"], ["proof (state)\nthis:\n  sets\n   (case x of\n    (x1, x2) \\<Rightarrow>\n      K1.T x1 \\<bind>\n      (\\<lambda>\\<omega>1.\n          K2.T x2 \\<bind>\n          (\\<lambda>\\<omega>2.\n              return (stream_space (count_space UNIV))\n               (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n  sets (stream_space (count_space UNIV))\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "obtain a b where x_eq: \"x = (a, b)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>a b. x = (a, b) \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (cases x) auto"], ["proof (state)\nthis:\n  x = (a, b)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       (case x of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n       measure_pmf (Kp x) \\<bind>\n       (\\<lambda>s.\n           distr\n            (case s of\n             (x1, x2) \\<Rightarrow>\n               K1.T x1 \\<bind>\n               (\\<lambda>\\<omega>1.\n                   K2.T x2 \\<bind>\n                   (\\<lambda>\\<omega>2.\n                       return (stream_space (count_space UNIV))\n                        (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n            (stream_space (count_space UNIV)) ((##) s))", "show \"?B x = (measure_pmf (Kp x) \\<bind> (\\<lambda>s. distr (?B s) S ((##) s)))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (case x of\n     (x1, x2) \\<Rightarrow>\n       K1.T x1 \\<bind>\n       (\\<lambda>\\<omega>1.\n           K2.T x2 \\<bind>\n           (\\<lambda>\\<omega>2.\n               return (stream_space (count_space UNIV))\n                (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n    measure_pmf (Kp x) \\<bind>\n    (\\<lambda>s.\n        distr\n         (case s of\n          (x1, x2) \\<Rightarrow>\n            K1.T x1 \\<bind>\n            (\\<lambda>\\<omega>1.\n                K2.T x2 \\<bind>\n                (\\<lambda>\\<omega>2.\n                    return (stream_space (count_space UNIV))\n                     (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n         (stream_space (count_space UNIV)) ((##) s))", "unfolding x_eq"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (a, b) of\n     (x1, x2) \\<Rightarrow>\n       K1.T x1 \\<bind>\n       (\\<lambda>\\<omega>1.\n           K2.T x2 \\<bind>\n           (\\<lambda>\\<omega>2.\n               return (stream_space (count_space UNIV))\n                (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n    measure_pmf (Kp (a, b)) \\<bind>\n    (\\<lambda>s.\n        distr\n         (case s of\n          (x1, x2) \\<Rightarrow>\n            K1.T x1 \\<bind>\n            (\\<lambda>\\<omega>1.\n                K2.T x2 \\<bind>\n                (\\<lambda>\\<omega>2.\n                    return (stream_space (count_space UNIV))\n                     (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n         (stream_space (count_space UNIV)) ((##) s))", "apply (subst K1.T_eq_bind')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (a, b) of\n     (x1, x2) \\<Rightarrow>\n       measure_pmf (K1 x1) \\<bind>\n       (\\<lambda>y.\n           K1.T y \\<bind>\n           (\\<lambda>\\<omega>.\n               return (stream_space (count_space UNIV))\n                (y ## \\<omega>))) \\<bind>\n       (\\<lambda>\\<omega>1.\n           K2.T x2 \\<bind>\n           (\\<lambda>\\<omega>2.\n               return (stream_space (count_space UNIV))\n                (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n    measure_pmf (Kp (a, b)) \\<bind>\n    (\\<lambda>s.\n        distr\n         (case s of\n          (x1, x2) \\<Rightarrow>\n            K1.T x1 \\<bind>\n            (\\<lambda>\\<omega>1.\n                K2.T x2 \\<bind>\n                (\\<lambda>\\<omega>2.\n                    return (stream_space (count_space UNIV))\n                     (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n         (stream_space (count_space UNIV)) ((##) s))", "apply (subst K2.T_eq_bind')"], ["proof (prove)\ngoal (1 subgoal):\n 1. (case (a, b) of\n     (x1, x2) \\<Rightarrow>\n       measure_pmf (K1 x1) \\<bind>\n       (\\<lambda>y.\n           K1.T y \\<bind>\n           (\\<lambda>\\<omega>.\n               return (stream_space (count_space UNIV))\n                (y ## \\<omega>))) \\<bind>\n       (\\<lambda>\\<omega>1.\n           measure_pmf (K2 x2) \\<bind>\n           (\\<lambda>y.\n               K2.T y \\<bind>\n               (\\<lambda>\\<omega>.\n                   return (stream_space (count_space UNIV))\n                    (y ## \\<omega>))) \\<bind>\n           (\\<lambda>\\<omega>2.\n               return (stream_space (count_space UNIV))\n                (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n    measure_pmf (Kp (a, b)) \\<bind>\n    (\\<lambda>s.\n        distr\n         (case s of\n          (x1, x2) \\<Rightarrow>\n            K1.T x1 \\<bind>\n            (\\<lambda>\\<omega>1.\n                K2.T x2 \\<bind>\n                (\\<lambda>\\<omega>2.\n                    return (stream_space (count_space UNIV))\n                     (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n         (stream_space (count_space UNIV)) ((##) s))", "apply (auto\n         simp add: space_stream_space bind_assoc[where R=S and N=S] bind_return_distr[symmetric]\n                   Kp_def T1K2.bind_rotate[where N=S] split_beta' set_pair_pmf space_subprob_algebra\n                   bind_pair_pmf[of \"case_prod M\" for M, unfolded split, symmetric, where N=S] szip\\<^sub>E_def\n                   stream_eq_Stream_iff bind_return[where N=S] space_bind[where N=S]\n         simp del: measurable_pmf_measure1\n         intro!: bind_measure_pmf_cong[where N=S] subprob_space_bind[where N=S] subprob_space_measure_pmf\n                 T1x bind_cong[where M=\"MC_syntax.T K x\" for K x] arg_cong2[where f=return])"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  (case x of\n   (x1, x2) \\<Rightarrow>\n     K1.T x1 \\<bind>\n     (\\<lambda>\\<omega>1.\n         K2.T x2 \\<bind>\n         (\\<lambda>\\<omega>2.\n             return (stream_space (count_space UNIV))\n              (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2))))) =\n  measure_pmf (Kp x) \\<bind>\n  (\\<lambda>s.\n      distr\n       (case s of\n        (x1, x2) \\<Rightarrow>\n          K1.T x1 \\<bind>\n          (\\<lambda>\\<omega>1.\n              K2.T x2 \\<bind>\n              (\\<lambda>\\<omega>2.\n                  return (stream_space (count_space UNIV))\n                   (szip\\<^sub>E x1 x2 (\\<omega>1, \\<omega>2)))))\n       (stream_space (count_space UNIV)) ((##) s))\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma nn_integral_pT:\n  fixes f assumes [measurable]: \"f \\<in> borel_measurable S\"\n  shows \"(\\<integral>\\<^sup>+\\<omega>. f \\<omega> \\<partial>T (x, y)) = (\\<integral>\\<^sup>+\\<omega>1. \\<integral>\\<^sup>+\\<omega>2. f (szip\\<^sub>E x y (\\<omega>1, \\<omega>2)) \\<partial>K2.T y \\<partial>K1.T x)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. integral\\<^sup>N (T (x, y)) f =\n    \\<integral>\\<^sup>+ \\<omega>1.\n                         \\<integral>\\<^sup>+ \\<omega>2.\n        f (szip\\<^sub>E x y (\\<omega>1, \\<omega>2))\n      \\<partial>K2.T y\n                       \\<partial>K1.T x", "by (simp add: nn_integral_bind[where B=S] nn_integral_return in_S T_eq_prod)"], ["", "lemma prod_eq_prob_T:\n  assumes [measurable]: \"Measurable.pred K1.S P1\" \"Measurable.pred K2.S P2\"\n  shows \"\\<P>(\\<omega> in K1.T x1. P1 \\<omega>) * \\<P>(\\<omega> in K2.T x2. P2 \\<omega>) =\n    \\<P>(\\<omega> in T (x1, x2). P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "have \"\\<P>(\\<omega> in T (x1, x2). P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)) =\n    (\\<integral> x. \\<integral> xa. indicator {\\<omega> \\<in> space S. P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)} (szip\\<^sub>E x1 x2 (x, xa)) \\<partial>MC_syntax.T K2 x2 \\<partial>MC_syntax.T K1 x1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)} =\n    K1.T.expectation x1\n     (\\<lambda>x.\n         K2.T.expectation x2\n          (\\<lambda>xa.\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n               (szip\\<^sub>E x1 x2 (x, xa))))", "by (subst T_eq_prod)\n       (simp add: K1.T.measure_bind[where N=S] K2.T.measure_bind[where N=S] measure_return)"], ["proof (state)\nthis:\n  T.prob (x1, x2)\n   {\\<omega> \\<in> space (T (x1, x2)).\n    P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)} =\n  K1.T.expectation x1\n   (\\<lambda>x.\n       K2.T.expectation x2\n        (\\<lambda>xa.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n             (szip\\<^sub>E x1 x2 (x, xa))))\n\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "also"], ["proof (state)\nthis:\n  T.prob (x1, x2)\n   {\\<omega> \\<in> space (T (x1, x2)).\n    P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)} =\n  K1.T.expectation x1\n   (\\<lambda>x.\n       K2.T.expectation x2\n        (\\<lambda>xa.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n             (szip\\<^sub>E x1 x2 (x, xa))))\n\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "have \"... = (\\<integral>\\<omega>1. \\<integral>\\<omega>2. indicator {\\<omega>\\<in>space K1.S. P1 \\<omega>} \\<omega>1 * indicator {\\<omega>\\<in>space K2.S. P2 \\<omega>} \\<omega>2 \\<partial>K2.T x2 \\<partial>K1.T x1)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K1.T.expectation x1\n     (\\<lambda>x.\n         K2.T.expectation x2\n          (\\<lambda>xa.\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n               (szip\\<^sub>E x1 x2 (x, xa)))) =\n    K1.T.expectation x1\n     (\\<lambda>\\<omega>1.\n         K2.T.expectation x2\n          (\\<lambda>\\<omega>2.\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P1 \\<omega>}\n               \\<omega>1 *\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P2 \\<omega>}\n               \\<omega>2))", "apply (intro integral_cong_AE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. K1.T.random_variable x1 borel\n     (\\<lambda>x.\n         K2.T.expectation x2\n          (\\<lambda>xa.\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n               (szip\\<^sub>E x1 x2 (x, xa))))\n 2. K1.T.random_variable x1 borel\n     (\\<lambda>\\<omega>1.\n         K2.T.expectation x2\n          (\\<lambda>\\<omega>2.\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P1 \\<omega>}\n               \\<omega>1 *\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P2 \\<omega>}\n               \\<omega>2))\n 3. AE x in K1.T\n             x1. K2.T.expectation x2\n                  (\\<lambda>xa.\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P1 (smap fst \\<omega>) \\<and>\n                        P2 (smap snd \\<omega>)}\n                       (szip\\<^sub>E x1 x2 (x, xa))) =\n                 K2.T.expectation x2\n                  (\\<lambda>\\<omega>2.\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P1 \\<omega>}\n                       x *\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P2 \\<omega>}\n                       \\<omega>2)", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. AE x in K1.T\n             x1. K2.T.expectation x2\n                  (\\<lambda>xa.\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P1 (smap fst \\<omega>) \\<and>\n                        P2 (smap snd \\<omega>)}\n                       (szip\\<^sub>E x1 x2 (x, xa))) =\n                 K2.T.expectation x2\n                  (\\<lambda>\\<omega>2.\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P1 \\<omega>}\n                       x *\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P2 \\<omega>}\n                       \\<omega>2)", "using K1.AE_T_enabled"], ["proof (prove)\nusing this:\n  almost_everywhere (K1.T ?s) (K1.enabled ?s)\n\ngoal (1 subgoal):\n 1. AE x in K1.T\n             x1. K2.T.expectation x2\n                  (\\<lambda>xa.\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P1 (smap fst \\<omega>) \\<and>\n                        P2 (smap snd \\<omega>)}\n                       (szip\\<^sub>E x1 x2 (x, xa))) =\n                 K2.T.expectation x2\n                  (\\<lambda>\\<omega>2.\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P1 \\<omega>}\n                       x *\n                      indicat_real\n                       {\\<omega>\n                        \\<in> space (stream_space (count_space UNIV)).\n                        P2 \\<omega>}\n                       \\<omega>2)", "apply eventually_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       K1.enabled x1 x \\<Longrightarrow>\n       K2.T.expectation x2\n        (\\<lambda>xa.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n             (szip\\<^sub>E x1 x2 (x, xa))) =\n       K2.T.expectation x2\n        (\\<lambda>\\<omega>2.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 \\<omega>}\n             x *\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P2 \\<omega>}\n             \\<omega>2)", "apply (intro integral_cong_AE)"], ["proof (prove)\ngoal (3 subgoals):\n 1. \\<And>x.\n       K1.enabled x1 x \\<Longrightarrow>\n       K2.T.random_variable x2 borel\n        (\\<lambda>xa.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n             (szip\\<^sub>E x1 x2 (x, xa)))\n 2. \\<And>x.\n       K1.enabled x1 x \\<Longrightarrow>\n       K2.T.random_variable x2 borel\n        (\\<lambda>\\<omega>2.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 \\<omega>}\n             x *\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P2 \\<omega>}\n             \\<omega>2)\n 3. \\<And>x.\n       K1.enabled x1 x \\<Longrightarrow>\n       AE xa in K2.T\n                 x2. indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n                      (szip\\<^sub>E x1 x2 (x, xa)) =\n                     indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P1 \\<omega>}\n                      x *\n                     indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P2 \\<omega>}\n                      xa", "apply measurable"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x.\n       K1.enabled x1 x \\<Longrightarrow>\n       AE xa in K2.T\n                 x2. indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n                      (szip\\<^sub>E x1 x2 (x, xa)) =\n                     indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P1 \\<omega>}\n                      x *\n                     indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P2 \\<omega>}\n                      xa", "using K2.AE_T_enabled"], ["proof (prove)\nusing this:\n  almost_everywhere (K2.T ?s) (K2.enabled ?s)\n\ngoal (1 subgoal):\n 1. \\<And>x.\n       K1.enabled x1 x \\<Longrightarrow>\n       AE xa in K2.T\n                 x2. indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n                      (szip\\<^sub>E x1 x2 (x, xa)) =\n                     indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P1 \\<omega>}\n                      x *\n                     indicat_real\n                      {\\<omega>\n                       \\<in> space (stream_space (count_space UNIV)).\n                       P2 \\<omega>}\n                      xa", "apply eventually_elim"], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x xa.\n       \\<lbrakk>K1.enabled x1 x; K2.enabled x2 xa\\<rbrakk>\n       \\<Longrightarrow> indicat_real\n                          {\\<omega>\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P1 (smap fst \\<omega>) \\<and>\n                           P2 (smap snd \\<omega>)}\n                          (szip\\<^sub>E x1 x2 (x, xa)) =\n                         indicat_real\n                          {\\<omega>\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P1 \\<omega>}\n                          x *\n                         indicat_real\n                          {\\<omega>\n                           \\<in> space (stream_space (count_space UNIV)).\n                           P2 \\<omega>}\n                          xa", "apply (auto simp: space_stream_space szip\\<^sub>E_def K1.force_enabled K2.force_enabled\n                      smap_szip_snd[where g=\"\\<lambda>x. x\"] smap_szip_fst[where f=\"\\<lambda>x. x\"]\n                split: split_indicator)"], ["proof (prove)\ngoal:\nNo subgoals!", "done"], ["proof (state)\nthis:\n  K1.T.expectation x1\n   (\\<lambda>x.\n       K2.T.expectation x2\n        (\\<lambda>xa.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n             (szip\\<^sub>E x1 x2 (x, xa)))) =\n  K1.T.expectation x1\n   (\\<lambda>\\<omega>1.\n       K2.T.expectation x2\n        (\\<lambda>\\<omega>2.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 \\<omega>}\n             \\<omega>1 *\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P2 \\<omega>}\n             \\<omega>2))\n\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "also"], ["proof (state)\nthis:\n  K1.T.expectation x1\n   (\\<lambda>x.\n       K2.T.expectation x2\n        (\\<lambda>xa.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n             (szip\\<^sub>E x1 x2 (x, xa)))) =\n  K1.T.expectation x1\n   (\\<lambda>\\<omega>1.\n       K2.T.expectation x2\n        (\\<lambda>\\<omega>2.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 \\<omega>}\n             \\<omega>1 *\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P2 \\<omega>}\n             \\<omega>2))\n\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "have \"\\<dots> = \\<P>(\\<omega> in K1.T x1. P1 \\<omega>) * \\<P>(\\<omega> in K2.T x2. P2 \\<omega>)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. K1.T.expectation x1\n     (\\<lambda>\\<omega>1.\n         K2.T.expectation x2\n          (\\<lambda>\\<omega>2.\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P1 \\<omega>}\n               \\<omega>1 *\n              indicat_real\n               {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n                P2 \\<omega>}\n               \\<omega>2)) =\n    K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>}", "by simp"], ["proof (state)\nthis:\n  K1.T.expectation x1\n   (\\<lambda>\\<omega>1.\n       K2.T.expectation x2\n        (\\<lambda>\\<omega>2.\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P1 \\<omega>}\n             \\<omega>1 *\n            indicat_real\n             {\\<omega> \\<in> space (stream_space (count_space UNIV)).\n              P2 \\<omega>}\n             \\<omega>2)) =\n  K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n  K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>}\n\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", "finally"], ["proof (chain)\npicking this:\n  T.prob (x1, x2)\n   {\\<omega> \\<in> space (T (x1, x2)).\n    P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)} =\n  K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n  K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>}", "show ?thesis"], ["proof (prove)\nusing this:\n  T.prob (x1, x2)\n   {\\<omega> \\<in> space (T (x1, x2)).\n    P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)} =\n  K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n  K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>}\n\ngoal (1 subgoal):\n 1. K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n    K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n    T.prob (x1, x2)\n     {\\<omega> \\<in> space (T (x1, x2)).\n      P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}", ".."], ["proof (state)\nthis:\n  K1.T.prob x1 {\\<omega> \\<in> space (K1.T x1). P1 \\<omega>} *\n  K2.T.prob x2 {\\<omega> \\<in> space (K2.T x2). P2 \\<omega>} =\n  T.prob (x1, x2)\n   {\\<omega> \\<in> space (T (x1, x2)).\n    P1 (smap fst \\<omega>) \\<and> P2 (smap snd \\<omega>)}\n\ngoal:\nNo subgoals!", "qed"], ["", "end"], ["", "end"]]}