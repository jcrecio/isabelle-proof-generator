{"file_name": "/home/qj213/afp-2021-10-22/thys/SenSocialChoice/FSext.thy", "working_directory": "/home/qj213/afp-2021-10-22/thys/SenSocialChoice", "problem_names": ["lemma finite_subset_induct' [consumes 2, case_names empty insert]:\n  assumes \"finite F\" and \"F \\<subseteq> A\"\n    and empty: \"P {}\"\n    and insert: \"\\<And>a F. \\<lbrakk>finite F; a \\<in> A; F \\<subseteq> A; a \\<notin> F; P F \\<rbrakk> \\<Longrightarrow> P (insert a F)\"\n  shows \"P F\"", "lemma finite_list: \"finite A \\<Longrightarrow> \\<exists>l. set l = A \\<and> distinct l\"", "lemma bij_betw_onto: \"bij_betw f A B \\<Longrightarrow> f ` A = B\"", "lemma inj_on_UnI: \"\\<lbrakk> inj_on f A; inj_on f B; f ` (A - B) \\<inter> f ` (B - A) = {} \\<rbrakk> \\<Longrightarrow> inj_on f (A \\<union> B)\"", "lemma card_compose_bij:\n  assumes bijf: \"bij_betw f A A\"\n  shows \"card { a \\<in> A. P (f a) } = card { a \\<in> A. P a }\"", "lemma card_eq_bij:\n  assumes cardAB: \"card A = card B\"\n      and finiteA: \"finite A\" and finiteB: \"finite B\"\n  obtains f where \"bij_betw f A B\"", "lemma bij_combine:\n  assumes ABCD: \"A \\<subseteq> B\" \"C \\<subseteq> D\"\n      and bijf: \"bij_betw f A C\"\n      and bijg: \"bij_betw g (B - A) (D - C)\"\n  obtains h\n    where \"bij_betw h B D\"\n      and \"\\<And>x. x \\<in> A \\<Longrightarrow> h x = f x\"\n      and \"\\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\"", "lemma bij_complete:\n  assumes finiteC: \"finite C\"\n      and ABC: \"A \\<subseteq> C\" \"B \\<subseteq> C\"\n      and bijf: \"bij_betw f A B\"\n  obtains f' where \"bij_betw f' C C\"\n      and \"\\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x\"\n      and \"\\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\"", "lemma card_greater:\n  assumes finiteA: \"finite A\"\n      and c: \"card { x \\<in> A. P x } > card { x \\<in> A. Q x }\"\n  obtains C\n    where \"card ({ x \\<in> A. P x } - C) = card { x \\<in> A. Q x }\"\n      and \"C \\<noteq> {}\"\n      and \"C \\<subseteq> { x \\<in> A. P x }\"", "lemma hasI[intro]: \"hasw xs S \\<Longrightarrow> has (length xs) S\"", "lemma card_has:\n  assumes cardS: \"card S = n\"\n  shows \"has n S\"", "lemma card_has_rev:\n  assumes finiteS: \"finite S\"\n  shows \"has n S \\<Longrightarrow> card S \\<ge> n\" (is \"?lhs \\<Longrightarrow> ?rhs\")", "lemma has_0: \"has 0 S\"", "lemma has_suc_notempty: \"has (Suc n) S \\<Longrightarrow> {} \\<noteq> S\"", "lemma has_suc_subset: \"has (Suc n) S \\<Longrightarrow> {} \\<subset> S\"", "lemma has_notempty_1:\n  assumes Sne: \"S \\<noteq> {}\"\n  shows \"has 1 S\"", "lemma has_le_has:\n  assumes h: \"has n S\"\n      and nn': \"n' \\<le> n\"\n  shows \"has n' S\"", "lemma has_ge_has_not:\n  assumes h: \"\\<not>has n S\"\n      and nn': \"n \\<le> n'\"\n  shows \"\\<not>has n' S\"", "lemma has_eq:\n  assumes h: \"has n S\"\n      and hn': \"\\<not>has (Suc n) S\"\n  shows \"card S = n\"", "lemma has_extend_witness:\n  assumes h: \"has n S\"\n  shows \"\\<lbrakk> set xs \\<subseteq> S; length xs < n \\<rbrakk> \\<Longrightarrow> set xs \\<subset> S\"", "lemma has_extend_witness':\n  \"\\<lbrakk> has n S; hasw xs S; length xs < n \\<rbrakk> \\<Longrightarrow> \\<exists>x. hasw (x # xs) S\"", "lemma has_witness_two:\n  assumes hasnS: \"has n S\"\n      and nn': \"2 \\<le> n\"\n  shows \"\\<exists>x y. hasw [x,y] S\"", "lemma has_witness_three:\n  assumes hasnS: \"has n S\"\n      and nn': \"3 \\<le> n\"\n  shows \"\\<exists>x y z. hasw [x,y,z] S\"", "lemma finite_set_singleton_contra:\n  assumes finiteS: \"finite S\"\n      and Sne: \"S \\<noteq> {}\"\n      and cardS: \"card S > 1 \\<Longrightarrow> False\"\n  shows \"\\<exists>j. S = {j}\""], "translations": [["", "lemma finite_subset_induct' [consumes 2, case_names empty insert]:\n  assumes \"finite F\" and \"F \\<subseteq> A\"\n    and empty: \"P {}\"\n    and insert: \"\\<And>a F. \\<lbrakk>finite F; a \\<in> A; F \\<subseteq> A; a \\<notin> F; P F \\<rbrakk> \\<Longrightarrow> P (insert a F)\"\n  shows \"P F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P F", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. P F", "from \\<open>finite F\\<close>"], ["proof (chain)\npicking this:\n  finite F", "have \"F \\<subseteq> A \\<Longrightarrow> ?thesis\""], ["proof (prove)\nusing this:\n  finite F\n\ngoal (1 subgoal):\n 1. F \\<subseteq> A \\<Longrightarrow> P F", "proof induct"], ["proof (state)\ngoal (2 subgoals):\n 1. {} \\<subseteq> A \\<Longrightarrow> P {}\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> A \\<Longrightarrow> P F;\n        insert x F \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "show \"P {}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P {}", "by fact"], ["proof (state)\nthis:\n  P {}\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> A \\<Longrightarrow> P F;\n        insert x F \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> A \\<Longrightarrow> P F;\n        insert x F \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "fix x F"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> A \\<Longrightarrow> P F;\n        insert x F \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "assume \"finite F\" and \"x \\<notin> F\" and\n      P: \"F \\<subseteq> A \\<Longrightarrow> P F\" and i: \"insert x F \\<subseteq> A\""], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  F \\<subseteq> A \\<Longrightarrow> P F\n  insert x F \\<subseteq> A\n\ngoal (1 subgoal):\n 1. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        F \\<subseteq> A \\<Longrightarrow> P F;\n        insert x F \\<subseteq> A\\<rbrakk>\n       \\<Longrightarrow> P (insert x F)", "show \"P (insert x F)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. P (insert x F)", "proof (rule insert)"], ["proof (state)\ngoal (5 subgoals):\n 1. finite F\n 2. x \\<in> A\n 3. F \\<subseteq> A\n 4. x \\<notin> F\n 5. P F", "from i"], ["proof (chain)\npicking this:\n  insert x F \\<subseteq> A", "show \"x \\<in> A\""], ["proof (prove)\nusing this:\n  insert x F \\<subseteq> A\n\ngoal (1 subgoal):\n 1. x \\<in> A", "by blast"], ["proof (state)\nthis:\n  x \\<in> A\n\ngoal (4 subgoals):\n 1. finite F\n 2. F \\<subseteq> A\n 3. x \\<notin> F\n 4. P F", "from i"], ["proof (chain)\npicking this:\n  insert x F \\<subseteq> A", "have \"F \\<subseteq> A\""], ["proof (prove)\nusing this:\n  insert x F \\<subseteq> A\n\ngoal (1 subgoal):\n 1. F \\<subseteq> A", "by blast"], ["proof (state)\nthis:\n  F \\<subseteq> A\n\ngoal (4 subgoals):\n 1. finite F\n 2. F \\<subseteq> A\n 3. x \\<notin> F\n 4. P F", "with P"], ["proof (chain)\npicking this:\n  F \\<subseteq> A \\<Longrightarrow> P F\n  F \\<subseteq> A", "show \"P F\""], ["proof (prove)\nusing this:\n  F \\<subseteq> A \\<Longrightarrow> P F\n  F \\<subseteq> A\n\ngoal (1 subgoal):\n 1. P F", "."], ["proof (state)\nthis:\n  P F\n\ngoal (3 subgoals):\n 1. finite F\n 2. F \\<subseteq> A\n 3. x \\<notin> F", "show \"finite F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite F", "by fact"], ["proof (state)\nthis:\n  finite F\n\ngoal (2 subgoals):\n 1. F \\<subseteq> A\n 2. x \\<notin> F", "show \"x \\<notin> F\""], ["proof (prove)\ngoal (1 subgoal):\n 1. x \\<notin> F", "by fact"], ["proof (state)\nthis:\n  x \\<notin> F\n\ngoal (1 subgoal):\n 1. F \\<subseteq> A", "show \"F \\<subseteq> A\""], ["proof (prove)\ngoal (1 subgoal):\n 1. F \\<subseteq> A", "by fact"], ["proof (state)\nthis:\n  F \\<subseteq> A\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  P (insert x F)\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  F \\<subseteq> A \\<Longrightarrow> P F\n\ngoal (1 subgoal):\n 1. P F", "with \\<open>F \\<subseteq> A\\<close>"], ["proof (chain)\npicking this:\n  F \\<subseteq> A\n  F \\<subseteq> A \\<Longrightarrow> P F", "show ?thesis"], ["proof (prove)\nusing this:\n  F \\<subseteq> A\n  F \\<subseteq> A \\<Longrightarrow> P F\n\ngoal (1 subgoal):\n 1. P F", "by blast"], ["proof (state)\nthis:\n  P F\n\ngoal:\nNo subgoals!", "qed"], ["", "text\\<open>A slight improvement on @{thm [source] \"List.finite_list\"} - add\n@{term \"distinct\"}.\\<close>"], ["", "lemma finite_list: \"finite A \\<Longrightarrow> \\<exists>l. set l = A \\<and> distinct l\""], ["proof (prove)\ngoal (1 subgoal):\n 1. finite A \\<Longrightarrow> \\<exists>l. set l = A \\<and> distinct l", "proof(induct rule: finite_induct)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<exists>l. set l = {} \\<and> distinct l\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<exists>l. set l = F \\<and> distinct l\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. set l = insert x F \\<and> distinct l", "case (insert x F)"], ["proof (state)\nthis:\n  finite F\n  x \\<notin> F\n  \\<exists>l. set l = F \\<and> distinct l\n\ngoal (2 subgoals):\n 1. \\<exists>l. set l = {} \\<and> distinct l\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<exists>l. set l = F \\<and> distinct l\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. set l = insert x F \\<and> distinct l", "then"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<exists>l. set l = F \\<and> distinct l", "obtain l where \"set l = F \\<and> distinct l\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<exists>l. set l = F \\<and> distinct l\n\ngoal (1 subgoal):\n 1. (\\<And>l.\n        set l = F \\<and> distinct l \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  set l = F \\<and> distinct l\n\ngoal (2 subgoals):\n 1. \\<exists>l. set l = {} \\<and> distinct l\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<exists>l. set l = F \\<and> distinct l\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. set l = insert x F \\<and> distinct l", "with insert"], ["proof (chain)\npicking this:\n  finite F\n  x \\<notin> F\n  \\<exists>l. set l = F \\<and> distinct l\n  set l = F \\<and> distinct l", "have \"set (x#l) = insert x F \\<and> distinct (x#l)\""], ["proof (prove)\nusing this:\n  finite F\n  x \\<notin> F\n  \\<exists>l. set l = F \\<and> distinct l\n  set l = F \\<and> distinct l\n\ngoal (1 subgoal):\n 1. set (x # l) = insert x F \\<and> distinct (x # l)", "by auto"], ["proof (state)\nthis:\n  set (x # l) = insert x F \\<and> distinct (x # l)\n\ngoal (2 subgoals):\n 1. \\<exists>l. set l = {} \\<and> distinct l\n 2. \\<And>x F.\n       \\<lbrakk>finite F; x \\<notin> F;\n        \\<exists>l. set l = F \\<and> distinct l\\<rbrakk>\n       \\<Longrightarrow> \\<exists>l. set l = insert x F \\<and> distinct l", "thus ?case"], ["proof (prove)\nusing this:\n  set (x # l) = insert x F \\<and> distinct (x # l)\n\ngoal (1 subgoal):\n 1. \\<exists>l. set l = insert x F \\<and> distinct l", "by blast"], ["proof (state)\nthis:\n  \\<exists>l. set l = insert x F \\<and> distinct l\n\ngoal (1 subgoal):\n 1. \\<exists>l. set l = {} \\<and> distinct l", "qed auto"], ["", "subsection\\<open>Extra bijection lemmas\\<close>"], ["", "lemma bij_betw_onto: \"bij_betw f A B \\<Longrightarrow> f ` A = B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. bij_betw f A B \\<Longrightarrow> f ` A = B", "unfolding bij_betw_def"], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on f A \\<and> f ` A = B \\<Longrightarrow> f ` A = B", "by simp"], ["", "lemma inj_on_UnI: \"\\<lbrakk> inj_on f A; inj_on f B; f ` (A - B) \\<inter> f ` (B - A) = {} \\<rbrakk> \\<Longrightarrow> inj_on f (A \\<union> B)\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>inj_on f A; inj_on f B;\n     f ` (A - B) \\<inter> f ` (B - A) = {}\\<rbrakk>\n    \\<Longrightarrow> inj_on f (A \\<union> B)", "by (auto iff: inj_on_Un)"], ["", "lemma card_compose_bij:\n  assumes bijf: \"bij_betw f A A\"\n  shows \"card { a \\<in> A. P (f a) } = card { a \\<in> A. P a }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card {a \\<in> A. P a}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card {a \\<in> A. P a}", "from bijf"], ["proof (chain)\npicking this:\n  bij_betw f A A", "have T: \"f ` { a \\<in> A. P (f a) } = { a \\<in> A. P a }\""], ["proof (prove)\nusing this:\n  bij_betw f A A\n\ngoal (1 subgoal):\n 1. f ` {a \\<in> A. P (f a)} = {a \\<in> A. P a}", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on f A \\<and> f ` A = A\n\ngoal (1 subgoal):\n 1. f ` {a \\<in> A. P (f a)} = {a \\<in> A. P a}", "by auto"], ["proof (state)\nthis:\n  f ` {a \\<in> A. P (f a)} = {a \\<in> A. P a}\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card {a \\<in> A. P a}", "from bijf"], ["proof (chain)\npicking this:\n  bij_betw f A A", "have \"card { a \\<in> A. P (f a) } = card (f ` { a \\<in> A. P (f a) })\""], ["proof (prove)\nusing this:\n  bij_betw f A A\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card (f ` {a \\<in> A. P (f a)})", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on f A \\<and> f ` A = A\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card (f ` {a \\<in> A. P (f a)})", "by (auto intro: subset_inj_on card_image[symmetric])"], ["proof (state)\nthis:\n  card {a \\<in> A. P (f a)} = card (f ` {a \\<in> A. P (f a)})\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card {a \\<in> A. P a}", "with T"], ["proof (chain)\npicking this:\n  f ` {a \\<in> A. P (f a)} = {a \\<in> A. P a}\n  card {a \\<in> A. P (f a)} = card (f ` {a \\<in> A. P (f a)})", "show ?thesis"], ["proof (prove)\nusing this:\n  f ` {a \\<in> A. P (f a)} = {a \\<in> A. P a}\n  card {a \\<in> A. P (f a)} = card (f ` {a \\<in> A. P (f a)})\n\ngoal (1 subgoal):\n 1. card {a \\<in> A. P (f a)} = card {a \\<in> A. P a}", "by simp"], ["proof (state)\nthis:\n  card {a \\<in> A. P (f a)} = card {a \\<in> A. P a}\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_eq_bij:\n  assumes cardAB: \"card A = card B\"\n      and finiteA: \"finite A\" and finiteB: \"finite B\"\n  obtains f where \"bij_betw f A B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finiteA"], ["proof (chain)\npicking this:\n  finite A", "obtain g where G: \"bij_betw g A {0..<card A}\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        bij_betw g A {0..<card A} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (blast dest: ex_bij_betw_finite_nat)"], ["proof (state)\nthis:\n  bij_betw g A {0..<card A}\n\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finiteB"], ["proof (chain)\npicking this:\n  finite B", "obtain h where H: \"bij_betw h {0..<card B} B\""], ["proof (prove)\nusing this:\n  finite B\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        bij_betw h {0..<card B} B \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (blast dest: ex_bij_betw_nat_finite)"], ["proof (state)\nthis:\n  bij_betw h {0..<card B} B\n\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from G H cardAB"], ["proof (chain)\npicking this:\n  bij_betw g A {0..<card A}\n  bij_betw h {0..<card B} B\n  card A = card B", "have I: \"inj_on (h \\<circ> g) A\""], ["proof (prove)\nusing this:\n  bij_betw g A {0..<card A}\n  bij_betw h {0..<card B} B\n  card A = card B\n\ngoal (1 subgoal):\n 1. inj_on (h \\<circ> g) A", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on g A \\<and> g ` A = {0..<card A}\n  inj_on h {0..<card B} \\<and> h ` {0..<card B} = B\n  card A = card B\n\ngoal (1 subgoal):\n 1. inj_on (h \\<circ> g) A", "by - (rule comp_inj_on, simp_all)"], ["proof (state)\nthis:\n  inj_on (h \\<circ> g) A\n\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from G H cardAB"], ["proof (chain)\npicking this:\n  bij_betw g A {0..<card A}\n  bij_betw h {0..<card B} B\n  card A = card B", "have \"(h \\<circ> g) ` A = B\""], ["proof (prove)\nusing this:\n  bij_betw g A {0..<card A}\n  bij_betw h {0..<card B} B\n  card A = card B\n\ngoal (1 subgoal):\n 1. (h \\<circ> g) ` A = B", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on g A \\<and> g ` A = {0..<card A}\n  inj_on h {0..<card B} \\<and> h ` {0..<card B} = B\n  card A = card B\n\ngoal (1 subgoal):\n 1. (h \\<circ> g) ` A = B", "by auto (metis image_cong image_image)"], ["proof (state)\nthis:\n  (h \\<circ> g) ` A = B\n\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with I"], ["proof (chain)\npicking this:\n  inj_on (h \\<circ> g) A\n  (h \\<circ> g) ` A = B", "have \"bij_betw (h \\<circ> g) A B\""], ["proof (prove)\nusing this:\n  inj_on (h \\<circ> g) A\n  (h \\<circ> g) ` A = B\n\ngoal (1 subgoal):\n 1. bij_betw (h \\<circ> g) A B", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on (h \\<circ> g) A\n  (h \\<circ> g) ` A = B\n\ngoal (1 subgoal):\n 1. inj_on (h \\<circ> g) A \\<and> (h \\<circ> g) ` A = B", "by blast"], ["proof (state)\nthis:\n  bij_betw (h \\<circ> g) A B\n\ngoal (1 subgoal):\n 1. (\\<And>f. bij_betw f A B \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  bij_betw (h \\<circ> g) A B\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_combine:\n  assumes ABCD: \"A \\<subseteq> B\" \"C \\<subseteq> D\"\n      and bijf: \"bij_betw f A C\"\n      and bijg: \"bij_betw g (B - A) (D - C)\"\n  obtains h\n    where \"bij_betw h B D\"\n      and \"\\<And>x. x \\<in> A \\<Longrightarrow> h x = f x\"\n      and \"\\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?h = \"\\<lambda>x. if x \\<in> A then f x else g x\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"inj_on ?h (A \\<union> (B - A))\""], ["proof (prove)\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (A \\<union> (B - A))", "proof(rule inj_on_UnI)"], ["proof (state)\ngoal (3 subgoals):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) A\n 2. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (B - A)\n 3. (\\<lambda>x. if x \\<in> A then f x else g x) ` (A - (B - A)) \\<inter>\n    (\\<lambda>x. if x \\<in> A then f x else g x) ` (B - A - A) =\n    {}", "from bijf"], ["proof (chain)\npicking this:\n  bij_betw f A C", "show \"inj_on ?h A\""], ["proof (prove)\nusing this:\n  bij_betw f A C\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) A", "by - (rule inj_onI, auto dest: inj_onD bij_betw_imp_inj_on)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) A\n\ngoal (2 subgoals):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (B - A)\n 2. (\\<lambda>x. if x \\<in> A then f x else g x) ` (A - (B - A)) \\<inter>\n    (\\<lambda>x. if x \\<in> A then f x else g x) ` (B - A - A) =\n    {}", "from bijg"], ["proof (chain)\npicking this:\n  bij_betw g (B - A) (D - C)", "show \"inj_on ?h (B - A)\""], ["proof (prove)\nusing this:\n  bij_betw g (B - A) (D - C)\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (B - A)", "by - (rule inj_onI, auto dest: inj_onD bij_betw_imp_inj_on)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (B - A)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` (A - (B - A)) \\<inter>\n    (\\<lambda>x. if x \\<in> A then f x else g x) ` (B - A - A) =\n    {}", "from bijf bijg"], ["proof (chain)\npicking this:\n  bij_betw f A C\n  bij_betw g (B - A) (D - C)", "show \"?h ` (A - (B - A)) \\<inter> ?h ` (B - A - A) = {}\""], ["proof (prove)\nusing this:\n  bij_betw f A C\n  bij_betw g (B - A) (D - C)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` (A - (B - A)) \\<inter>\n    (\\<lambda>x. if x \\<in> A then f x else g x) ` (B - A - A) =\n    {}", "by (simp, blast dest: bij_betw_onto)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` (A - (B - A)) \\<inter>\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` (B - A - A) =\n  {}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (A \\<union> (B - A))\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with ABCD"], ["proof (chain)\npicking this:\n  A \\<subseteq> B\n  C \\<subseteq> D\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (A \\<union> (B - A))", "have \"inj_on ?h B\""], ["proof (prove)\nusing this:\n  A \\<subseteq> B\n  C \\<subseteq> D\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) (A \\<union> (B - A))\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B", "by (auto iff: Un_absorb1)"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"?h ` B = D\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "from ABCD"], ["proof (chain)\npicking this:\n  A \\<subseteq> B\n  C \\<subseteq> D", "have \"?h ` B = f ` A \\<union> g ` (B - A)\""], ["proof (prove)\nusing this:\n  A \\<subseteq> B\n  C \\<subseteq> D\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B =\n    f ` A \\<union> g ` (B - A)", "by (auto iff: image_Un Un_absorb1)"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B =\n  f ` A \\<union> g ` (B - A)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "also"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B =\n  f ` A \\<union> g ` (B - A)\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "from ABCD bijf bijg"], ["proof (chain)\npicking this:\n  A \\<subseteq> B\n  C \\<subseteq> D\n  bij_betw f A C\n  bij_betw g (B - A) (D - C)", "have \"\\<dots> = D\""], ["proof (prove)\nusing this:\n  A \\<subseteq> B\n  C \\<subseteq> D\n  bij_betw f A C\n  bij_betw g (B - A) (D - C)\n\ngoal (1 subgoal):\n 1. f ` A \\<union> g ` (B - A) = D", "by (blast dest: bij_betw_onto)"], ["proof (state)\nthis:\n  f ` A \\<union> g ` (B - A) = D\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "finally"], ["proof (chain)\npicking this:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "show ?thesis"], ["proof (prove)\nusing this:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D\n\ngoal (1 subgoal):\n 1. (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "."], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D", "have \"bij_betw ?h B D\"\n              and \"\\<And>x. x \\<in> A \\<Longrightarrow> ?h x = f x\"\n              and \"\\<And>x. x \\<in> B - A \\<Longrightarrow> ?h x = g x\""], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D\n\ngoal (1 subgoal):\n 1. bij_betw (\\<lambda>x. if x \\<in> A then f x else g x) B D &&&\n    (\\<And>x.\n        x \\<in> A \\<Longrightarrow>\n        (if x \\<in> A then f x else g x) = f x) &&&\n    (\\<And>x.\n        x \\<in> B - A \\<Longrightarrow>\n        (if x \\<in> A then f x else g x) = g x)", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B\n  (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D\n\ngoal (1 subgoal):\n 1. inj_on (\\<lambda>x. if x \\<in> A then f x else g x) B \\<and>\n    (\\<lambda>x. if x \\<in> A then f x else g x) ` B = D &&&\n    (\\<And>x.\n        x \\<in> A \\<Longrightarrow>\n        (if x \\<in> A then f x else g x) = f x) &&&\n    (\\<And>x.\n        x \\<in> B - A \\<Longrightarrow>\n        (if x \\<in> A then f x else g x) = g x)", "by auto"], ["proof (state)\nthis:\n  bij_betw (\\<lambda>x. if x \\<in> A then f x else g x) B D\n  ?x \\<in> A \\<Longrightarrow> (if ?x \\<in> A then f ?x else g ?x) = f ?x\n  ?x \\<in> B - A \\<Longrightarrow>\n  (if ?x \\<in> A then f ?x else g ?x) = g ?x\n\ngoal (1 subgoal):\n 1. (\\<And>h.\n        \\<lbrakk>bij_betw h B D;\n         \\<And>x. x \\<in> A \\<Longrightarrow> h x = f x;\n         \\<And>x. x \\<in> B - A \\<Longrightarrow> h x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "thus thesis"], ["proof (prove)\nusing this:\n  bij_betw (\\<lambda>x. if x \\<in> A then f x else g x) B D\n  ?x \\<in> A \\<Longrightarrow> (if ?x \\<in> A then f ?x else g ?x) = f ?x\n  ?x \\<in> B - A \\<Longrightarrow>\n  (if ?x \\<in> A then f ?x else g ?x) = g ?x\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma bij_complete:\n  assumes finiteC: \"finite C\"\n      and ABC: \"A \\<subseteq> C\" \"B \\<subseteq> C\"\n      and bijf: \"bij_betw f A B\"\n  obtains f' where \"bij_betw f' C C\"\n      and \"\\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x\"\n      and \"\\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finiteC ABC bijf"], ["proof (chain)\npicking this:\n  finite C\n  A \\<subseteq> C\n  B \\<subseteq> C\n  bij_betw f A B", "have \"card B = card A\""], ["proof (prove)\nusing this:\n  finite C\n  A \\<subseteq> C\n  B \\<subseteq> C\n  bij_betw f A B\n\ngoal (1 subgoal):\n 1. card B = card A", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  finite C\n  A \\<subseteq> C\n  B \\<subseteq> C\n  inj_on f A \\<and> f ` A = B\n\ngoal (1 subgoal):\n 1. card B = card A", "by (auto iff: inj_on_iff_eq_card [symmetric] intro: finite_subset)"], ["proof (state)\nthis:\n  card B = card A\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with finiteC ABC bijf"], ["proof (chain)\npicking this:\n  finite C\n  A \\<subseteq> C\n  B \\<subseteq> C\n  bij_betw f A B\n  card B = card A", "have \"card (C - A) = card (C - B)\""], ["proof (prove)\nusing this:\n  finite C\n  A \\<subseteq> C\n  B \\<subseteq> C\n  bij_betw f A B\n  card B = card A\n\ngoal (1 subgoal):\n 1. card (C - A) = card (C - B)", "by (auto iff: finite_subset card_Diff_subset)"], ["proof (state)\nthis:\n  card (C - A) = card (C - B)\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with finiteC"], ["proof (chain)\npicking this:\n  finite C\n  card (C - A) = card (C - B)", "obtain g where bijg: \"bij_betw g (C - A) (C - B)\""], ["proof (prove)\nusing this:\n  finite C\n  card (C - A) = card (C - B)\n\ngoal (1 subgoal):\n 1. (\\<And>g.\n        bij_betw g (C - A) (C - B) \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by - (drule card_eq_bij, auto)"], ["proof (state)\nthis:\n  bij_betw g (C - A) (C - B)\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from ABC bijf bijg"], ["proof (chain)\npicking this:\n  A \\<subseteq> C\n  B \\<subseteq> C\n  bij_betw f A B\n  bij_betw g (C - A) (C - B)", "obtain f' where bijf': \"bij_betw f' C C\"\n              and f'f: \"\\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x\"\n              and f'g: \"\\<And>x. x \\<in> C - A \\<Longrightarrow> f' x = g x\""], ["proof (prove)\nusing this:\n  A \\<subseteq> C\n  B \\<subseteq> C\n  bij_betw f A B\n  bij_betw g (C - A) (C - B)\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x = g x\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by - (drule bij_combine, auto)"], ["proof (state)\nthis:\n  bij_betw f' C C\n  ?x \\<in> A \\<Longrightarrow> f' ?x = f ?x\n  ?x \\<in> C - A \\<Longrightarrow> f' ?x = g ?x\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from f'g bijg"], ["proof (chain)\npicking this:\n  ?x \\<in> C - A \\<Longrightarrow> f' ?x = g ?x\n  bij_betw g (C - A) (C - B)", "have \"\\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\""], ["proof (prove)\nusing this:\n  ?x \\<in> C - A \\<Longrightarrow> f' ?x = g ?x\n  bij_betw g (C - A) (C - B)\n\ngoal (1 subgoal):\n 1. \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B", "by (blast dest: bij_betw_onto)"], ["proof (state)\nthis:\n  ?x \\<in> C - A \\<Longrightarrow> f' ?x \\<in> C - B\n\ngoal (1 subgoal):\n 1. (\\<And>f'.\n        \\<lbrakk>bij_betw f' C C;\n         \\<And>x. x \\<in> A \\<Longrightarrow> f' x = f x;\n         \\<And>x. x \\<in> C - A \\<Longrightarrow> f' x \\<in> C - B\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "with bijf' f'f"], ["proof (chain)\npicking this:\n  bij_betw f' C C\n  ?x \\<in> A \\<Longrightarrow> f' ?x = f ?x\n  ?x \\<in> C - A \\<Longrightarrow> f' ?x \\<in> C - B", "show thesis"], ["proof (prove)\nusing this:\n  bij_betw f' C C\n  ?x \\<in> A \\<Longrightarrow> f' ?x = f ?x\n  ?x \\<in> C - A \\<Longrightarrow> f' ?x \\<in> C - B\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_greater:\n  assumes finiteA: \"finite A\"\n      and c: \"card { x \\<in> A. P x } > card { x \\<in> A. Q x }\"\n  obtains C\n    where \"card ({ x \\<in> A. P x } - C) = card { x \\<in> A. Q x }\"\n      and \"C \\<noteq> {}\"\n      and \"C \\<subseteq> { x \\<in> A. P x }\""], ["proof (prove)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?PA = \"{ x \\<in> A . P x }\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?QA = \"{ x \\<in> A . Q x }\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from finiteA"], ["proof (chain)\npicking this:\n  finite A", "obtain p where P: \"bij_betw p {0..<card ?PA} ?PA\""], ["proof (prove)\nusing this:\n  finite A\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        bij_betw p {0..<card {x \\<in> A. P x}}\n         {x \\<in> A. P x} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "using ex_bij_betw_nat_finite[where M=\"?PA\"]"], ["proof (prove)\nusing this:\n  finite A\n  finite {x \\<in> A. P x} \\<Longrightarrow>\n  \\<exists>h. bij_betw h {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. (\\<And>p.\n        bij_betw p {0..<card {x \\<in> A. P x}}\n         {x \\<in> A. P x} \\<Longrightarrow>\n        thesis) \\<Longrightarrow>\n    thesis", "by (blast intro: finite_subset)"], ["proof (state)\nthis:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?CN = \"{card ?QA..<card ?PA}\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "let ?C = \"p ` ?CN\""], ["proof (state)\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "have \"card ({ x \\<in> A. P x } - ?C) = card ?QA\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "have nat_add_sub_shuffle: \"\\<And>x y z. \\<lbrakk> (x::nat) > y; x - y = z \\<rbrakk> \\<Longrightarrow> x - z = y\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<And>x y z.\n       \\<lbrakk>y < x; x - y = z\\<rbrakk> \\<Longrightarrow> x - z = y", "by simp"], ["proof (state)\nthis:\n  \\<lbrakk>?y < ?x; ?x - ?y = ?z\\<rbrakk> \\<Longrightarrow> ?x - ?z = ?y\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "from P"], ["proof (chain)\npicking this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}", "have T: \"p ` {card ?QA..<card ?PA} \\<subseteq> ?PA\""], ["proof (prove)\nusing this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n    \\<subseteq> {x \\<in> A. P x}", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on p {0..<card {x \\<in> A. P x}} \\<and>\n  p ` {0..<card {x \\<in> A. P x}} = {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n    \\<subseteq> {x \\<in> A. P x}", "by auto"], ["proof (state)\nthis:\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "from P"], ["proof (chain)\npicking this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}", "have \"card ?PA - card ?QA = card ?C\""], ["proof (prove)\nusing this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} - card {x \\<in> A. Q x} =\n    card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}})", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on p {0..<card {x \\<in> A. P x}} \\<and>\n  p ` {0..<card {x \\<in> A. P x}} = {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} - card {x \\<in> A. Q x} =\n    card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}})", "by (auto iff: card_image subset_inj_on[where A=\"?CN\"])"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} - card {x \\<in> A. Q x} =\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}})\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "with c"], ["proof (chain)\npicking this:\n  card {x \\<in> A. Q x} < card {x \\<in> A. P x}\n  card {x \\<in> A. P x} - card {x \\<in> A. Q x} =\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}})", "have \"card ?PA - card ?C = card ?QA\""], ["proof (prove)\nusing this:\n  card {x \\<in> A. Q x} < card {x \\<in> A. P x}\n  card {x \\<in> A. P x} - card {x \\<in> A. Q x} =\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}})\n\ngoal (1 subgoal):\n 1. card {x \\<in> A. P x} -\n    card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "by (rule nat_add_sub_shuffle)"], ["proof (state)\nthis:\n  card {x \\<in> A. P x} -\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "with finiteA P T"], ["proof (chain)\npicking this:\n  finite A\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}\n  card {x \\<in> A. P x} -\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}", "have \"card (?PA - ?C) = card ?QA\""], ["proof (prove)\nusing this:\n  finite A\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}\n  card {x \\<in> A. P x} -\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  finite A\n  inj_on p {0..<card {x \\<in> A. P x}} \\<and>\n  p ` {0..<card {x \\<in> A. P x}} = {x \\<in> A. P x}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}\n  card {x \\<in> A. P x} -\n  card (p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "by (auto iff: finite_subset card_Diff_subset)"], ["proof (state)\nthis:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "thus ?thesis"], ["proof (prove)\nusing this:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. card\n     ({x \\<in> A. P x} -\n      p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n    card {x \\<in> A. Q x}", "."], ["proof (state)\nthis:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from P c"], ["proof (chain)\npicking this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n  card {x \\<in> A. Q x} < card {x \\<in> A. P x}", "have \"?C \\<noteq> {}\""], ["proof (prove)\nusing this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n  card {x \\<in> A. Q x} < card {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}} \\<noteq> {}", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on p {0..<card {x \\<in> A. P x}} \\<and>\n  p ` {0..<card {x \\<in> A. P x}} = {x \\<in> A. P x}\n  card {x \\<in> A. Q x} < card {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}} \\<noteq> {}", "by auto"], ["proof (state)\nthis:\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "moreover"], ["proof (state)\nthis:\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}} \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "from P"], ["proof (chain)\npicking this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}", "have \"?C \\<subseteq> { x \\<in> A. P x }\""], ["proof (prove)\nusing this:\n  bij_betw p {0..<card {x \\<in> A. P x}} {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n    \\<subseteq> {x \\<in> A. P x}", "unfolding bij_betw_def"], ["proof (prove)\nusing this:\n  inj_on p {0..<card {x \\<in> A. P x}} \\<and>\n  p ` {0..<card {x \\<in> A. P x}} = {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n    \\<subseteq> {x \\<in> A. P x}", "by auto"], ["proof (state)\nthis:\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. (\\<And>C.\n        \\<lbrakk>card ({x \\<in> A. P x} - C) = card {x \\<in> A. Q x};\n         C \\<noteq> {}; C \\<subseteq> {x \\<in> A. P x}\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "ultimately"], ["proof (chain)\npicking this:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}} \\<noteq> {}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}", "show thesis"], ["proof (prove)\nusing this:\n  card\n   ({x \\<in> A. P x} -\n    p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}) =\n  card {x \\<in> A. Q x}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}} \\<noteq> {}\n  p ` {card {x \\<in> A. Q x}..<card {x \\<in> A. P x}}\n  \\<subseteq> {x \\<in> A. P x}\n\ngoal (1 subgoal):\n 1. thesis", ".."], ["proof (state)\nthis:\n  thesis\n\ngoal:\nNo subgoals!", "qed"], ["", "subsection\\<open>Collections of witnesses: @{term \"hasw\"}, @{term \"has\"}\\<close>"], ["", "text \\<open>\n\nGiven a set of cardinality at least $n$, we can find up to $n$ distinct\nwitnesses. The built-in @{term \"card\"} function unfortunately satisfies:\n\n\\begin{center}\n @{thm [source] \"Finite_Set.card.infinite\"}: @{thm \"Finite_Set.card.infinite\"\n [no_vars]}\n\\end{center}\n\nThese lemmas handle the infinite case uniformly.\n\nThanks to Gerwin Klein suggesting this approach.\n\n\\<close>"], ["", "definition hasw :: \"'a list \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n  \"hasw xs S \\<equiv> set xs \\<subseteq> S \\<and> distinct xs\""], ["", "definition has :: \"nat \\<Rightarrow> 'a set \\<Rightarrow> bool\" where\n  \"has n S \\<equiv> \\<exists>xs. hasw xs S \\<and> length xs = n\""], ["", "declare hasw_def[simp]"], ["", "lemma hasI[intro]: \"hasw xs S \\<Longrightarrow> has (length xs) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. hasw xs S \\<Longrightarrow> has (length xs) S", "by (unfold has_def, auto)"], ["", "lemma card_has:\n  assumes cardS: \"card S = n\"\n  shows \"has n S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has n S", "proof(cases \"n = 0\")"], ["proof (state)\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> has n S\n 2. n \\<noteq> 0 \\<Longrightarrow> has n S", "case True"], ["proof (state)\nthis:\n  n = 0\n\ngoal (2 subgoals):\n 1. n = 0 \\<Longrightarrow> has n S\n 2. n \\<noteq> 0 \\<Longrightarrow> has n S", "thus ?thesis"], ["proof (prove)\nusing this:\n  n = 0\n\ngoal (1 subgoal):\n 1. has n S", "by (simp add: has_def)"], ["proof (state)\nthis:\n  has n S\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> has n S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> has n S", "case False"], ["proof (state)\nthis:\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> has n S", "with cardS card_eq_0_iff[where A=S]"], ["proof (chain)\npicking this:\n  card S = n\n  (card S = 0) = (S = {} \\<or> infinite S)\n  n \\<noteq> 0", "have finiteS: \"finite S\""], ["proof (prove)\nusing this:\n  card S = n\n  (card S = 0) = (S = {} \\<or> infinite S)\n  n \\<noteq> 0\n\ngoal (1 subgoal):\n 1. finite S", "by simp"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. n \\<noteq> 0 \\<Longrightarrow> has n S", "show ?thesis"], ["proof (prove)\ngoal (1 subgoal):\n 1. has n S", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> has n S \\<Longrightarrow> False", "assume nhas: \"\\<not> has n S\""], ["proof (state)\nthis:\n  \\<not> has n S\n\ngoal (1 subgoal):\n 1. \\<not> has n S \\<Longrightarrow> False", "with distinct_card[symmetric]"], ["proof (chain)\npicking this:\n  distinct ?xs \\<Longrightarrow> length ?xs = card (set ?xs)\n  \\<not> has n S", "have nxs: \"\\<not> (\\<exists> xs. set xs \\<subseteq> S \\<and> distinct xs \\<and> card (set xs) = n)\""], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow> length ?xs = card (set ?xs)\n  \\<not> has n S\n\ngoal (1 subgoal):\n 1. \\<nexists>xs.\n       set xs \\<subseteq> S \\<and> distinct xs \\<and> card (set xs) = n", "by (auto simp add: has_def)"], ["proof (state)\nthis:\n  \\<nexists>xs.\n     set xs \\<subseteq> S \\<and> distinct xs \\<and> card (set xs) = n\n\ngoal (1 subgoal):\n 1. \\<not> has n S \\<Longrightarrow> False", "from finite_list finiteS"], ["proof (chain)\npicking this:\n  finite ?A \\<Longrightarrow> \\<exists>l. set l = ?A \\<and> distinct l\n  finite S", "obtain xs where \"S = set xs\""], ["proof (prove)\nusing this:\n  finite ?A \\<Longrightarrow> \\<exists>l. set l = ?A \\<and> distinct l\n  finite S\n\ngoal (1 subgoal):\n 1. (\\<And>xs. S = set xs \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  S = set xs\n\ngoal (1 subgoal):\n 1. \\<not> has n S \\<Longrightarrow> False", "with cardS nxs"], ["proof (chain)\npicking this:\n  card S = n\n  \\<nexists>xs.\n     set xs \\<subseteq> S \\<and> distinct xs \\<and> card (set xs) = n\n  S = set xs", "show False"], ["proof (prove)\nusing this:\n  card S = n\n  \\<nexists>xs.\n     set xs \\<subseteq> S \\<and> distinct xs \\<and> card (set xs) = n\n  S = set xs\n\ngoal (1 subgoal):\n 1. False", "by auto"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  has n S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma card_has_rev:\n  assumes finiteS: \"finite S\"\n  shows \"has n S \\<Longrightarrow> card S \\<ge> n\" (is \"?lhs \\<Longrightarrow> ?rhs\")"], ["proof (prove)\ngoal (1 subgoal):\n 1. has n S \\<Longrightarrow> n \\<le> card S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. has n S \\<Longrightarrow> n \\<le> card S", "assume ?lhs"], ["proof (state)\nthis:\n  has n S\n\ngoal (1 subgoal):\n 1. has n S \\<Longrightarrow> n \\<le> card S", "then"], ["proof (chain)\npicking this:\n  has n S", "obtain xs\n    where \"set xs \\<subseteq> S \\<and> n = length xs\"\n      and dxs: \"distinct xs\""], ["proof (prove)\nusing this:\n  has n S\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>set xs \\<subseteq> S \\<and> n = length xs;\n         distinct xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (unfold has_def hasw_def, blast)"], ["proof (state)\nthis:\n  set xs \\<subseteq> S \\<and> n = length xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. has n S \\<Longrightarrow> n \\<le> card S", "with card_mono[OF finiteS] distinct_card[OF dxs, symmetric]"], ["proof (chain)\npicking this:\n  ?A \\<subseteq> S \\<Longrightarrow> card ?A \\<le> card S\n  length xs = card (set xs)\n  set xs \\<subseteq> S \\<and> n = length xs\n  distinct xs", "show ?rhs"], ["proof (prove)\nusing this:\n  ?A \\<subseteq> S \\<Longrightarrow> card ?A \\<le> card S\n  length xs = card (set xs)\n  set xs \\<subseteq> S \\<and> n = length xs\n  distinct xs\n\ngoal (1 subgoal):\n 1. n \\<le> card S", "by simp"], ["proof (state)\nthis:\n  n \\<le> card S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_0: \"has 0 S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has 0 S", "by (simp add: has_def)"], ["", "lemma has_suc_notempty: \"has (Suc n) S \\<Longrightarrow> {} \\<noteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has (Suc n) S \\<Longrightarrow> {} \\<noteq> S", "by (clarsimp simp add: has_def)"], ["", "lemma has_suc_subset: \"has (Suc n) S \\<Longrightarrow> {} \\<subset> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has (Suc n) S \\<Longrightarrow> {} \\<subset> S", "by (rule psubsetI, (simp add: has_suc_notempty)+)"], ["", "lemma has_notempty_1:\n  assumes Sne: \"S \\<noteq> {}\"\n  shows \"has 1 S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has 1 S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. has 1 S", "from Sne"], ["proof (chain)\npicking this:\n  S \\<noteq> {}", "obtain x where \"x \\<in> S\""], ["proof (prove)\nusing this:\n  S \\<noteq> {}\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. has 1 S", "hence \"set [x] \\<subseteq> S \\<and> distinct [x] \\<and> length [x] = 1\""], ["proof (prove)\nusing this:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. set [x] \\<subseteq> S \\<and> distinct [x] \\<and> length [x] = 1", "by auto"], ["proof (state)\nthis:\n  set [x] \\<subseteq> S \\<and> distinct [x] \\<and> length [x] = 1\n\ngoal (1 subgoal):\n 1. has 1 S", "thus ?thesis"], ["proof (prove)\nusing this:\n  set [x] \\<subseteq> S \\<and> distinct [x] \\<and> length [x] = 1\n\ngoal (1 subgoal):\n 1. has 1 S", "by (unfold has_def hasw_def, blast)"], ["proof (state)\nthis:\n  has 1 S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_le_has:\n  assumes h: \"has n S\"\n      and nn': \"n' \\<le> n\"\n  shows \"has n' S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has n' S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. has n' S", "from h"], ["proof (chain)\npicking this:\n  has n S", "obtain xs where \"hasw xs S\" \"length xs = n\""], ["proof (prove)\nusing this:\n  has n S\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>hasw xs S; length xs = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (unfold has_def, blast)"], ["proof (state)\nthis:\n  hasw xs S\n  length xs = n\n\ngoal (1 subgoal):\n 1. has n' S", "with nn' set_take_subset[where n=\"n'\" and xs=\"xs\"]"], ["proof (chain)\npicking this:\n  n' \\<le> n\n  set (take n' xs) \\<subseteq> set xs\n  hasw xs S\n  length xs = n", "have \"hasw (take n' xs) S\" \"length (take n' xs) = n'\""], ["proof (prove)\nusing this:\n  n' \\<le> n\n  set (take n' xs) \\<subseteq> set xs\n  hasw xs S\n  length xs = n\n\ngoal (1 subgoal):\n 1. hasw (take n' xs) S &&& length (take n' xs) = n'", "by (simp_all add: min_def, blast+)"], ["proof (state)\nthis:\n  hasw (take n' xs) S\n  length (take n' xs) = n'\n\ngoal (1 subgoal):\n 1. has n' S", "thus ?thesis"], ["proof (prove)\nusing this:\n  hasw (take n' xs) S\n  length (take n' xs) = n'\n\ngoal (1 subgoal):\n 1. has n' S", "by (unfold has_def, blast)"], ["proof (state)\nthis:\n  has n' S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_ge_has_not:\n  assumes h: \"\\<not>has n S\"\n      and nn': \"n \\<le> n'\"\n  shows \"\\<not>has n' S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<not> has n' S", "using h nn'"], ["proof (prove)\nusing this:\n  \\<not> has n S\n  n \\<le> n'\n\ngoal (1 subgoal):\n 1. \\<not> has n' S", "by (blast dest: has_le_has)"], ["", "lemma has_eq:\n  assumes h: \"has n S\"\n      and hn': \"\\<not>has (Suc n) S\"\n  shows \"card S = n\""], ["proof (prove)\ngoal (1 subgoal):\n 1. card S = n", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. card S = n", "from h"], ["proof (chain)\npicking this:\n  has n S", "obtain xs\n    where xs: \"hasw xs S\" and lenxs: \"length xs = n\""], ["proof (prove)\nusing this:\n  has n S\n\ngoal (1 subgoal):\n 1. (\\<And>xs.\n        \\<lbrakk>hasw xs S; length xs = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (unfold has_def, blast)"], ["proof (state)\nthis:\n  hasw xs S\n  length xs = n\n\ngoal (1 subgoal):\n 1. card S = n", "have \"set xs = S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set xs = S", "proof"], ["proof (state)\ngoal (2 subgoals):\n 1. set xs \\<subseteq> S\n 2. S \\<subseteq> set xs", "from xs"], ["proof (chain)\npicking this:\n  hasw xs S", "show \"set xs \\<subseteq> S\""], ["proof (prove)\nusing this:\n  hasw xs S\n\ngoal (1 subgoal):\n 1. set xs \\<subseteq> S", "by simp"], ["proof (state)\nthis:\n  set xs \\<subseteq> S\n\ngoal (1 subgoal):\n 1. S \\<subseteq> set xs", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. S \\<subseteq> set xs", "show \"S \\<subseteq> set xs\""], ["proof (prove)\ngoal (1 subgoal):\n 1. S \\<subseteq> set xs", "proof(rule ccontr)"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<not> S \\<subseteq> set xs \\<Longrightarrow> False", "assume \"\\<not> S \\<subseteq> set xs\""], ["proof (state)\nthis:\n  \\<not> S \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. \\<not> S \\<subseteq> set xs \\<Longrightarrow> False", "then"], ["proof (chain)\npicking this:\n  \\<not> S \\<subseteq> set xs", "obtain x where \"x \\<in> S\" \"x \\<notin> set xs\""], ["proof (prove)\nusing this:\n  \\<not> S \\<subseteq> set xs\n\ngoal (1 subgoal):\n 1. (\\<And>x.\n        \\<lbrakk>x \\<in> S; x \\<notin> set xs\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by blast"], ["proof (state)\nthis:\n  x \\<in> S\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. \\<not> S \\<subseteq> set xs \\<Longrightarrow> False", "with lenxs xs"], ["proof (chain)\npicking this:\n  length xs = n\n  hasw xs S\n  x \\<in> S\n  x \\<notin> set xs", "have \"hasw (x # xs) S\" \"length (x # xs) = Suc n\""], ["proof (prove)\nusing this:\n  length xs = n\n  hasw xs S\n  x \\<in> S\n  x \\<notin> set xs\n\ngoal (1 subgoal):\n 1. hasw (x # xs) S &&& length (x # xs) = Suc n", "by simp_all"], ["proof (state)\nthis:\n  hasw (x # xs) S\n  length (x # xs) = Suc n\n\ngoal (1 subgoal):\n 1. \\<not> S \\<subseteq> set xs \\<Longrightarrow> False", "with hn'"], ["proof (chain)\npicking this:\n  \\<not> has (Suc n) S\n  hasw (x # xs) S\n  length (x # xs) = Suc n", "show False"], ["proof (prove)\nusing this:\n  \\<not> has (Suc n) S\n  hasw (x # xs) S\n  length (x # xs) = Suc n\n\ngoal (1 subgoal):\n 1. False", "by (unfold has_def, blast)"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  S \\<subseteq> set xs\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set xs = S\n\ngoal (1 subgoal):\n 1. card S = n", "with xs lenxs distinct_card"], ["proof (chain)\npicking this:\n  hasw xs S\n  length xs = n\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n  set xs = S", "show \"card S = n\""], ["proof (prove)\nusing this:\n  hasw xs S\n  length xs = n\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n  set xs = S\n\ngoal (1 subgoal):\n 1. card S = n", "by auto"], ["proof (state)\nthis:\n  card S = n\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_extend_witness:\n  assumes h: \"has n S\"\n  shows \"\\<lbrakk> set xs \\<subseteq> S; length xs < n \\<rbrakk> \\<Longrightarrow> set xs \\<subset> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n    \\<Longrightarrow> set xs \\<subset> S", "proof(induct xs)"], ["proof (state)\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> S; length [] < n\\<rbrakk>\n    \\<Longrightarrow> set [] \\<subset> S\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subset> S;\n        set (a # xs) \\<subseteq> S; length (a # xs) < n\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subset> S", "case Nil"], ["proof (state)\nthis:\n  set [] \\<subseteq> S\n  length [] < n\n\ngoal (2 subgoals):\n 1. \\<lbrakk>set [] \\<subseteq> S; length [] < n\\<rbrakk>\n    \\<Longrightarrow> set [] \\<subset> S\n 2. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subset> S;\n        set (a # xs) \\<subseteq> S; length (a # xs) < n\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subset> S", "with h has_suc_notempty"], ["proof (chain)\npicking this:\n  has n S\n  has (Suc ?n) ?S \\<Longrightarrow> {} \\<noteq> ?S\n  set [] \\<subseteq> S\n  length [] < n", "show ?case"], ["proof (prove)\nusing this:\n  has n S\n  has (Suc ?n) ?S \\<Longrightarrow> {} \\<noteq> ?S\n  set [] \\<subseteq> S\n  length [] < n\n\ngoal (1 subgoal):\n 1. set [] \\<subset> S", "by (cases n, auto)"], ["proof (state)\nthis:\n  set [] \\<subset> S\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subset> S;\n        set (a # xs) \\<subseteq> S; length (a # xs) < n\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subset> S", "next"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subset> S;\n        set (a # xs) \\<subseteq> S; length (a # xs) < n\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subset> S", "case (Cons x xs)"], ["proof (state)\nthis:\n  \\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subset> S\n  set (x # xs) \\<subseteq> S\n  length (x # xs) < n\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subset> S;\n        set (a # xs) \\<subseteq> S; length (a # xs) < n\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subset> S", "have \"set (x # xs) \\<noteq> S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. set (x # xs) \\<noteq> S", "proof"], ["proof (state)\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "assume Sxxs: \"set (x # xs) = S\""], ["proof (state)\nthis:\n  set (x # xs) = S\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "hence finiteS: \"finite S\""], ["proof (prove)\nusing this:\n  set (x # xs) = S\n\ngoal (1 subgoal):\n 1. finite S", "by auto"], ["proof (state)\nthis:\n  finite S\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "from h"], ["proof (chain)\npicking this:\n  has n S", "obtain xs'\n      where Sxs': \"set xs' \\<subseteq> S\"\n        and dlxs': \"distinct xs' \\<and> length xs' = n\""], ["proof (prove)\nusing this:\n  has n S\n\ngoal (1 subgoal):\n 1. (\\<And>xs'.\n        \\<lbrakk>set xs' \\<subseteq> S;\n         distinct xs' \\<and> length xs' = n\\<rbrakk>\n        \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by (unfold has_def hasw_def, blast)"], ["proof (state)\nthis:\n  set xs' \\<subseteq> S\n  distinct xs' \\<and> length xs' = n\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "with distinct_card"], ["proof (chain)\npicking this:\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n  set xs' \\<subseteq> S\n  distinct xs' \\<and> length xs' = n", "have \"card (set xs') = n\""], ["proof (prove)\nusing this:\n  distinct ?xs \\<Longrightarrow> card (set ?xs) = length ?xs\n  set xs' \\<subseteq> S\n  distinct xs' \\<and> length xs' = n\n\ngoal (1 subgoal):\n 1. card (set xs') = n", "by auto"], ["proof (state)\nthis:\n  card (set xs') = n\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "with finiteS Sxs' card_mono"], ["proof (chain)\npicking this:\n  finite S\n  set xs' \\<subseteq> S\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n  card (set xs') = n", "have \"card S \\<ge> n\""], ["proof (prove)\nusing this:\n  finite S\n  set xs' \\<subseteq> S\n  \\<lbrakk>finite ?B; ?A \\<subseteq> ?B\\<rbrakk>\n  \\<Longrightarrow> card ?A \\<le> card ?B\n  card (set xs') = n\n\ngoal (1 subgoal):\n 1. n \\<le> card S", "by auto"], ["proof (state)\nthis:\n  n \\<le> card S\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "moreover"], ["proof (state)\nthis:\n  n \\<le> card S\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "from Sxxs Cons card_length[where xs=\"x # xs\"]"], ["proof (chain)\npicking this:\n  set (x # xs) = S\n  \\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subset> S\n  set (x # xs) \\<subseteq> S\n  length (x # xs) < n\n  card (set (x # xs)) \\<le> length (x # xs)", "have \"card S < n\""], ["proof (prove)\nusing this:\n  set (x # xs) = S\n  \\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subset> S\n  set (x # xs) \\<subseteq> S\n  length (x # xs) < n\n  card (set (x # xs)) \\<le> length (x # xs)\n\ngoal (1 subgoal):\n 1. card S < n", "by auto"], ["proof (state)\nthis:\n  card S < n\n\ngoal (1 subgoal):\n 1. set (x # xs) = S \\<Longrightarrow> False", "ultimately"], ["proof (chain)\npicking this:\n  n \\<le> card S\n  card S < n", "show False"], ["proof (prove)\nusing this:\n  n \\<le> card S\n  card S < n\n\ngoal (1 subgoal):\n 1. False", "by simp"], ["proof (state)\nthis:\n  False\n\ngoal:\nNo subgoals!", "qed"], ["proof (state)\nthis:\n  set (x # xs) \\<noteq> S\n\ngoal (1 subgoal):\n 1. \\<And>a xs.\n       \\<lbrakk>\\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n                \\<Longrightarrow> set xs \\<subset> S;\n        set (a # xs) \\<subseteq> S; length (a # xs) < n\\<rbrakk>\n       \\<Longrightarrow> set (a # xs) \\<subset> S", "with Cons"], ["proof (chain)\npicking this:\n  \\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subset> S\n  set (x # xs) \\<subseteq> S\n  length (x # xs) < n\n  set (x # xs) \\<noteq> S", "show ?case"], ["proof (prove)\nusing this:\n  \\<lbrakk>set xs \\<subseteq> S; length xs < n\\<rbrakk>\n  \\<Longrightarrow> set xs \\<subset> S\n  set (x # xs) \\<subseteq> S\n  length (x # xs) < n\n  set (x # xs) \\<noteq> S\n\ngoal (1 subgoal):\n 1. set (x # xs) \\<subset> S", "by auto"], ["proof (state)\nthis:\n  set (x # xs) \\<subset> S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_extend_witness':\n  \"\\<lbrakk> has n S; hasw xs S; length xs < n \\<rbrakk> \\<Longrightarrow> \\<exists>x. hasw (x # xs) S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<lbrakk>has n S; hasw xs S; length xs < n\\<rbrakk>\n    \\<Longrightarrow> \\<exists>x. hasw (x # xs) S", "by (simp, blast dest: has_extend_witness)"], ["", "lemma has_witness_two:\n  assumes hasnS: \"has n S\"\n      and nn': \"2 \\<le> n\"\n  shows \"\\<exists>x y. hasw [x,y] S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y. hasw [x, y] S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x y. hasw [x, y] S", "have has2S: \"has 2 S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. has 2 S", "by (rule has_le_has[OF hasnS nn'])"], ["proof (state)\nthis:\n  has 2 S\n\ngoal (1 subgoal):\n 1. \\<exists>x y. hasw [x, y] S", "from has_extend_witness'[OF has2S, where xs=\"[]\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>hasw [] S; length [] < 2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. hasw [x] S", "obtain x where \"x \\<in> S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>hasw [] S; length [] < 2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>x. hasw [x] S\n\ngoal (1 subgoal):\n 1. (\\<And>x. x \\<in> S \\<Longrightarrow> thesis) \\<Longrightarrow> thesis", "by auto"], ["proof (state)\nthis:\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>x y. hasw [x, y] S", "with has_extend_witness'[OF has2S, where xs=\"[x]\"]"], ["proof (chain)\npicking this:\n  \\<lbrakk>hasw [x] S; length [x] < 2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa. hasw [xa, x] S\n  x \\<in> S", "show ?thesis"], ["proof (prove)\nusing this:\n  \\<lbrakk>hasw [x] S; length [x] < 2\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa. hasw [xa, x] S\n  x \\<in> S\n\ngoal (1 subgoal):\n 1. \\<exists>x y. hasw [x, y] S", "by auto"], ["proof (state)\nthis:\n  \\<exists>x y. hasw [x, y] S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma has_witness_three:\n  assumes hasnS: \"has n S\"\n      and nn': \"3 \\<le> n\"\n  shows \"\\<exists>x y z. hasw [x,y,z] S\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>x y z. hasw [x, y, z] S", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>x y z. hasw [x, y, z] S", "from nn'"], ["proof (chain)\npicking this:\n  3 \\<le> n", "obtain x y where \"hasw [x,y] S\""], ["proof (prove)\nusing this:\n  3 \\<le> n\n\ngoal (1 subgoal):\n 1. (\\<And>x y. hasw [x, y] S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "using has_witness_two[OF hasnS]"], ["proof (prove)\nusing this:\n  3 \\<le> n\n  2 \\<le> n \\<Longrightarrow> \\<exists>x y. hasw [x, y] S\n\ngoal (1 subgoal):\n 1. (\\<And>x y. hasw [x, y] S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  hasw [x, y] S\n\ngoal (1 subgoal):\n 1. \\<exists>x y z. hasw [x, y, z] S", "with nn'"], ["proof (chain)\npicking this:\n  3 \\<le> n\n  hasw [x, y] S", "show ?thesis"], ["proof (prove)\nusing this:\n  3 \\<le> n\n  hasw [x, y] S\n\ngoal (1 subgoal):\n 1. \\<exists>x y z. hasw [x, y, z] S", "using has_extend_witness'[OF hasnS, where xs=\"[x,y]\"]"], ["proof (prove)\nusing this:\n  3 \\<le> n\n  hasw [x, y] S\n  \\<lbrakk>hasw [x, y] S; length [x, y] < n\\<rbrakk>\n  \\<Longrightarrow> \\<exists>xa. hasw [xa, x, y] S\n\ngoal (1 subgoal):\n 1. \\<exists>x y z. hasw [x, y, z] S", "by auto"], ["proof (state)\nthis:\n  \\<exists>x y z. hasw [x, y, z] S\n\ngoal:\nNo subgoals!", "qed"], ["", "lemma finite_set_singleton_contra:\n  assumes finiteS: \"finite S\"\n      and Sne: \"S \\<noteq> {}\"\n      and cardS: \"card S > 1 \\<Longrightarrow> False\"\n  shows \"\\<exists>j. S = {j}\""], ["proof (prove)\ngoal (1 subgoal):\n 1. \\<exists>j. S = {j}", "proof -"], ["proof (state)\ngoal (1 subgoal):\n 1. \\<exists>j. S = {j}", "from cardS Sne card_0_eq[OF finiteS]"], ["proof (chain)\npicking this:\n  1 < card S \\<Longrightarrow> False\n  S \\<noteq> {}\n  (card S = 0) = (S = {})", "have Scard: \"card S = 1\""], ["proof (prove)\nusing this:\n  1 < card S \\<Longrightarrow> False\n  S \\<noteq> {}\n  (card S = 0) = (S = {})\n\ngoal (1 subgoal):\n 1. card S = 1", "by auto"], ["proof (state)\nthis:\n  card S = 1\n\ngoal (1 subgoal):\n 1. \\<exists>j. S = {j}", "from has_extend_witness[where xs=\"[]\", OF card_has[OF this]]"], ["proof (chain)\npicking this:\n  \\<lbrakk>set [] \\<subseteq> S; length [] < 1\\<rbrakk>\n  \\<Longrightarrow> set [] \\<subset> S", "obtain j where \"{j} \\<subseteq> S\""], ["proof (prove)\nusing this:\n  \\<lbrakk>set [] \\<subseteq> S; length [] < 1\\<rbrakk>\n  \\<Longrightarrow> set [] \\<subset> S\n\ngoal (1 subgoal):\n 1. (\\<And>j. {j} \\<subseteq> S \\<Longrightarrow> thesis) \\<Longrightarrow>\n    thesis", "by auto"], ["proof (state)\nthis:\n  {j} \\<subseteq> S\n\ngoal (1 subgoal):\n 1. \\<exists>j. S = {j}", "from card_seteq[OF finiteS this] Scard"], ["proof (chain)\npicking this:\n  card S \\<le> card {j} \\<Longrightarrow> {j} = S\n  card S = 1", "show ?thesis"], ["proof (prove)\nusing this:\n  card S \\<le> card {j} \\<Longrightarrow> {j} = S\n  card S = 1\n\ngoal (1 subgoal):\n 1. \\<exists>j. S = {j}", "by auto"], ["proof (state)\nthis:\n  \\<exists>j. S = {j}\n\ngoal:\nNo subgoals!", "qed"], ["", "(*<*)"], ["", "end"], ["", "(*>*)"]]}